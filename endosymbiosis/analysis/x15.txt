In the tech industry, leading a team is sometimes referred to as “programming with people.” As a novice engineer, I saw that as a cute metaphor that makes managers sound more technical than they actually are. After years of management, though, I’ve come to see it as quite literally true. In both cases, you’re trying to set up a complex system that, when left to run, will perform useful work and solve problems. The only difference is in how you define and maintain those systems. It’s a dramatic difference, though, which is why the parallels are hard to see at first.

Human Machines
What makes human beings unique among animals is our capacity to collaborate. Language lets us serialize ideas and pass them from mind to mind, quickly, easily, and in high fidelity. Sharing ideas lets us build systems bigger than a single person, whether that be a hunting party, a soccer team, or a company. We agree on goals, specialize in different tasks, and coordinate our strategy to form intelligent machines built out of humans. Although everything the group does is the product of individual people, the group itself has its own independent identity and can have behaviors that are totally different from what the individuals do.

So how do you make one of these human machines? The remarkable thing is they form spontaneously, all the time. Human beings instinctively want to socialize, build relationships, and help one another accomplish things. It’s an innate drive, built by evolution and mediated by emotions like pride, belonging, and admiration. In other words, all collaborative endeavors rely on healthy human emotions and relationships. Before we get carried away with the machine metaphor, we must remember that human needs must come first. That includes basics like compensation and healthcare, of course, but also more touchy-feely things like work / life balance, sense of purpose, a supportive community, autonomy, and growth. Providing these things is the humane thing to do, but it’s also good business. Happier, healthier, more fulfilled employees who trust and respect each other are much more productive and successful.

But we don’t just let teams form organically and do whatever they please. Leaders rally people around specific goals, then coordinate and direct their work. This is much harder than it sounds. One of the first things I discovered as a leader was how little control I had over my team. I could ask them to write some code for me, but it might come out all wrong if the solution I asked for was counter-intuitive to them. I could ramble on about the importance of code health, and everyone would nod in enthusiastic agreement, but that alone rarely changed anyone’s behavior. I couldn’t make people get along, hit a deadline, tell me what they “really think,” or hold off on sending that flippant email. Ultimately, what my team did was the product of all the people in it. Human beings simply aren’t robots who do what they’re told. Each person sees the world differently, has their own agenda, and makes decisions based on what makes sense to them. Leadership is getting people to choose to do what’s best for the team, on their own terms.

Culture
While computers are configured with software, humans are configured with memes: ideas and ways of being that we share with each other, internalize, and repeat. Each community has its own unique set of memes (its culture) which shapes its behavior. Culture includes the things that define a group, like the stories about who that group is and what they do, the activities they do together, and the relationships and patterns of communication with other groups. It also includes “guard rails” in the form of expectations, goals, incentives, and peer pressure that encourage good behavior and group alignment. A leader has outsize influence on a group’s culture, but in reality culture is emergent, continually being reinvented by every member of the community as they speak and act. A leader’s job is to cultivate a healthy culture, like a garden. They make an environment with rich soil and lots of light. They water the flowers, and pluck the weeds.

This means embracing the diverse perspectives of the team, supporting grassroots ideas, and giving folks a chance to prove themselves. At Google, my director once told me the whole department was going to focus on developer experience (DevEx) next quarter, and I should figure out what that meant for my team. A bunch of ideas immediately sprung to mind, but I decided to start with a team discussion. I explained why we were doing this, facilitated some talk about what good DevEx means, then opened the table for ideas. I didn’t start with my ideas. As a manager, my voice would overwhelm others, and my intuition was less valuable than the actual developers on my team. When someone suggested one of my ideas, it became theirs. I gave them my full support and feedback, but let them run with it in their own way. Then someone else had an idea that was surprising and unfamiliar. I wasn’t sure it would work or that the person was up to the challenge, but they were eager and confident, and a few others seemed to think the idea had potential. So, rather than sticking with the safe options, we talked about the costs and the benefits of this idea, how it might go wrong, how to prevent that, and how we could quickly test whether it was working. It turned out to be a smash hit.

Cultivating a healthy culture also means encouraging good habits, while discouraging harmful ones. As my team increased our focus on DevEx, we had to establish new patterns of communication. We had to deal with frustrated customers, disarm their anger, and listen deeply to their problems and feedback. We had to set healthy boundaries, making it very clear what we considered to be “not our problem,” low priority, or working as intended. We had to provide hands-on help to build trust and a reputation of competence. As a leader, my challenge was to keep up with my team’s work so I could give regular feedback, highlight good examples to share with the whole team, explain why some behavior was good or bad, and reward people in ways they found personally meaningful. I also had to be very consistent about modeling good behavior myself, but that could only go so far. I couldn’t possibly control, participate in, or even keep track of every request, conversation, or conflict. Instead, I focused on giving my team the tools, incentives, and trust to muddle through on their own. They did great.

Since a team’s behavior is mostly determined by its culture, one interesting consequence is that friction between teams is almost always a matter of culture shock. Each team has their own understanding of the work, their own ways of doing things, their own vocabulary, and their own sense of right and wrong. Most people aren’t consciously aware of their culture. It’s simply “how things are done.” This means it’s often surprising and upsetting to see someone do things differently. It feels like they are wrong, and getting in the way of your team and what’s good for the company. Misunderstandings are common. Two cultures might share a word in common, for instance, but the meaning or sentiment of that word might be totally different, in a way that neither side notices.

At one point, my team was building tools for our partners, who would use those tools to build user-facing products. Though we were friends working on the same code, it sometimes felt like our teams were from different planets. They used code names for major projects they were involved in, but our team didn’t know or care about. The problematic legacy code that my team was trying to eliminate and replace was their bread and butter. They had to use it extensively to meet their product goals, constantly adding more to the mess and getting upset when our improvements changed things out from under them and slowed down their work. We needed each other to do our jobs, but some level of conflict was inevitable.

As a leader in this space, a big part of my job was to act as a cultural interpreter. I lived in both worlds, to the extent I could. I had to align both teams on language and best practice. We had to agree on what vague concepts like “visual consistency” meant for our product, and ideally find a standard way to measure them. We had to debate priorities, which often meant figuring out how their goals might suffer if our goals weren’t met, even when they seemed totally unrelated. When conflict arose, I sat down with both sides, listening carefully, sussing out the root cause of our misunderstanding, and finding a new way to frame the discussion so we didn’t feel opposed to one another. In most cases, both sides were right and ultimately wanted the same things. The challenge was in helping everyone appreciate the other perspectives, and in turning an argument about “my way” vs “your way” into a discussion about what sort of compromise might strike a healthy balance and mitigate all our concerns.

Efficiency
Getting things done with diverse, independent, self-interested people can feel like herding cats. It’s the worst thing about programming with people, but it’s also the best thing. The real strength of human beings is their autonomy and creativity. Unlike computers, people will figure out how to solve a problem for themselves. They might even notice that they’re working on the wrong problem and choose to solve a different one instead. That’s an incredible super power, and the job of a good leader is to coax this out and make the most of it. This requires mastering some “programming techniques” that are wildly different from what works on computers.

One important technique is thinking in negative space. That is, in a creative project, a leader should avoid saying what to do, but instead focus on describing what success looks like. This gives each person a license, a responsibility even, to find their own way to a solution. This is why a leader will typically kick-off a new software team by writing a mission statement, or describing a vision for the future. Only then do they make a roadmap of work to do, usually with the help of the whole team. A healthy team has a clearly defined scope. Everyone knows what the team does and what they don’t do. The scope should be loose enough to leave room to explore, find new opportunities, and grow over time in whatever direction feels right. That’s not possible for a team defined in positive space—that is, purely based on the tasks they do.

On an individual level, the best way to think in negative space is to use problem statements. When I discover a new problem for my team to solve, I can’t help but imagine the good and bad ways to solve it. As an experienced engineer, my intuition is valuable, so it may be surprising that I make an effort to suppress those ideas at first. When I delegate some task, I want that person to take full ownership for the work. I want them to find a solution that they find intuitive, know inside and out, take pride in, resolve on their own, and take full credit for. I want to give them the chance to find a better solution than I can imagine, and permission to change strategy if they discover the first idea isn’t working. I want to let them make mistakes (safe, small ones), and learn from them. My intuition still matters, of course. It just shows up in the form of constraints and feedback. I highlight the key design factors and priorities, the challenges I anticipate, the properties that any good solution must have, how the work will be judged, and how this piece will fit into the bigger picture. As long as those things are satisfied, then it really doesn’t matter what design they choose.

Another challenge in working with human beings is their limited cognitive capacity. People are smart, but things like attention, will power, patience, and decision making are limited resources that can quickly be exhausted. When that happens, people make mistakes, cut corners, procrastinate, and get into conflicts. This isn’t a personal failing, it’s simply human nature. As a leader, I try to prevent that and make sure that limited, precious human brain power isn’t wasted.

The primary tools for this are process and policy. That is, figuring out how to do things up front, and standardizing that across the team. This includes things like checklists, frequently asked questions, form letters, bug report templates, and duty rosters. Revisiting the programming metaphor, this is actually pretty similar to how an engineer might optimize a program by moving code out of a loop, or from client to server. It’s about decoupling the work of deciding what to do and how to do it (an open ended and relatively difficult problem) from the work of actually doing the task (which is often just rote execution). The idea is to do the hard work when the team’s got the time and energy for it, not under pressure in the moment it’s needed. The planning gets done once, then the plan gets reused time and time again.

Process and policy are ways to externalize cognitive work and automate part of a team’s execution. They reduce the cognitive load and personal responsibility for each team member, but also reduce their autonomy and flexibility. That’s the polar opposite of thinking in negative space, like I advocated above. The reality is, a good leader’s job is learning how to balance these two ways of thinking, and applying them in the right circumstances. The goal is to encourage autonomy, creativity, and active thinking where it matters, and conserve those resources by using rote execution when that’s good enough. Knowing the difference is more of an art than a science.

There’s an interesting parallel here with biology. Life strikes a balance between cognitive power and instinct. Animals with big brains can think for themselves in the moment, taking context into account, finding new solutions, and jumping on opportunities as they present themselves. But in a life or death situation, it’s critical to do the right thing at the right moment. Sometimes thinking just wastes precious time, and opens up the possibility of doing the wrong thing. In those situations, instinct takes over, limiting the animal’s freedom, but preventing them from getting bogged down with a puzzle at the worst moment. Over time, intentional behaviors that work reliably can become instincts (this is called the Baldwin Effect). On the flip side, any instincts that no longer serve and unnecessarily limit an organism’s reproductive potential tend to be eliminated by natural selection.

Conclusion
Well, I could go on, but that seems like enough for one post. What do you think? Does this resonate with your own experience? If you work in another profession, does this sound right or are things very different for you? Do you have more ideas or advice to share? If so, then please leave a comment below. As always, I’d love to hear from you.

Author Nate Gaylinn (he/him)Posted onApril 6, 2022CategoriesProgramming with PeopleTagsculture, google, leadership, management9 Commentson Programming with People
Status Update: Goodreads Backlog Complete
Over the years, many books have played part in shaping my understanding of intelligence. I recently finished writing reviews for all my favorites on Goodreads. If you’re curious where my ideas come from or want to find something new to read, check it out. Right now I’m organizing everything into four categories:

Cognitive fiction: Fun stories inspired by science that have something to say about minds, intelligence, or human nature.
Practical non-fiction: Tools for making sense of the world or getting things done with your human brain.
Accessible non-fiction: Accessible science and philosophy books written for a general audience.
Academic non-fiction: Technical books for diving deep on these topics.
I’m reading very actively right now, so I’m adding new books all the time. I’d be happy to discuss any of these, and I’m always open to recommendations.

Author Nate Gaylinn (he/him)Posted onApril 6, 2022CategoriesStatus UpdatesLeave a commenton Status Update: Goodreads Backlog Complete
What’s the Big Idea?
What’s the Big Idea?
(this post’s image taken from Colossal, showing the work of Steve Lindsay)

Okay, okay, enough about me. This blog is supposed to be about “intelligence,” but what does that mean? What ideas am I actually researching and writing about? In this post, I’ll try to give you a broad overview of the areas that interest me. Going forward, I’ll focus on more narrow topics, so I can explore them more deeply.

What is Intelligence?
Perhaps the most common way we think of intelligence is “what human beings do.” Even though we talk about other forms of life (and even computer algorithms) being intelligent, we tend to talk about how close they come to achieving “human-level” performance, as if that’s the gold standard. More specifically, we look to the human brain as the idealized intelligent machine. This has always bothered me, for a number of reasons.

