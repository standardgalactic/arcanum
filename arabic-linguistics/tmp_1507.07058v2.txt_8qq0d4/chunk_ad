81935 
4 
1626 
0.729 
16 
282576 
68624 
3 
1513 
0.762 
175 
430407 
41510 
2 
1917 
0.611 
  
Table 2: Examples DSNS strings for three paintings. 
 
Third, a random DSNS string is selected from each sample in order to generate a ‘deviation’ value. The idea behind 
the deviation value is that it can be thought to act as a measure of ‘creative difference’ between two objects. Table 3 
shows two DSNS strings (from the same domain, for illustrative purposes) and their attributes. The two columns to 
the right, i.e. |d| and (∑÷)  represent ‘absolute difference’ and ‘summative division’, respectively. The former is simply 
the absolute difference between the two values of a particular attribute given the two strings whereas the latter is a 
new concept; it represents the sum of the division of the first string’s attribute value with the second string’s attribute 
value, and vice-versa; e.g. for attribute 1 in Table 3, it is 6/7 + 7/6. What we call ‘summative division’ was used 
because we wanted something simple yet functional enough to create sufficient variation in the deviation values that 
was also not, to our knowledge, previously described in the mathematical literature. 
 
Attribute 
String 1 
String 2 
|d| 
(∑÷) 
Deviation 
1 
6 
7 
1 
2.024 
(7+6.275) – 6 = 
7.275 
2 
5 
7 
2 
2.114 
3 
13 
9 
4 
2.137 
 
7 
6.275 
  
Table 3: Absolute difference, summative division and deviation. 
 
The deviation for the two DSNS strings is therefore =  [∑|d| + ∑ (∑÷)] - CID. The CID or ‘creative indifference value’ 
(‘6’ in this case) is obtained from the sum of the absolute differences and summative divisions (i.e. [∑|d| + ∑ (∑÷)]) 
for two DSNS strings with exactly the same attribute values; a sort of baseline. In theory, since the attribute values are 
exactly the same, the objects should also be (creatively) the same. Imagine if, in Table 3, for attribute 1, strings 1 and 2 
both had a value of 6, the absolute difference would be ‘0’ and the summative division would be (6/6 + 6/6 = 2). This 
would be true for all the attributes in the strings. The sum of 0+2 = 2; and the number of attributes, n, would lead to a 
CID of 2n. 
 
Fourth, this deviation of 7.275 (see Table 3) is then used to generate two new DSNS strings by randomly selecting 
possible attribute values from the original sample (so the values are ‘realistic’) until a pair is found that matches that 
deviation (i.e. 7.275) using the same process just described above.11 So suppose the sample has 300 DSNS strings,12 
                                                 
11 Note that the deviation value can be rounded to one or two decimal places to improve performance. The requirement of a pair of objects is 
fundamental and built into the DSNS approach. A ‘randomization’ approach on the attribute values of just one DSNS string would, in principle, not 
provide any basis of comparison with another creative object (that would have its own DSNS string), and as is shown in section 4.4, would likely not 

there are 300 possible values for each attribute, or somewhat less if the values for each attribute are not unique. A 
random change of all these attribute values, in new combinations, might lead to two new DSNS strings such that the 
same, precise deviation value results.13 This can be called ‘stage 1’ of the search for a perfect match. The idea put 
forth here is to obtain two new strings which have a similar contrast (i.e. difference) in ‘creative value’ as the original 
pair. If after 30 seconds (the amount of time is flexible but should be reasonably long), no exact match can be found 
using the ‘realistic’ attribute values in the sample, then the search is ‘widened’ to include all possible values (i.e. to 
one decimal place or more, depending on the nature of the attribute values and time constraints) between the lowest 
and highest attribute values in the sample. This is ‘stage 2’. So if for a particular attribute, there were only five values 
in the sample: 3, 7, 9, 10, 12, now any value between 3-12 (i.e. including 4, 5, 6, 8 and 11) would be sought after. This 
goes on for another 30 seconds. If still no match is found, then the final ‘stage 3’ takes effect where the two new 
DSNS stings that produced the closest deviation to the one desired are taken. ‘Contemplation time’ is therefore 
considered a factor in the creative process. 
 
So in the case of the 7.275 deviation, after 60 seconds, taking into account all the strings generated in stages 1 and 2 
(which means they should be stored in an historical array of some sort), if the closest deviation produced was 7.15, 
then those two DSNS strings that produced it would be retained. These two new strings can then be used to generate 
one or more new objects based on the same set of attributes (but with potentially different values) used to describe the 
other objects. The generation tool or technique is a separate issue beyond the DSNS and domain specific; in the case 
of this research, the chess problem generation process is explained in section 4.2 and Appendix A.  
 
In summary, the first two DSNS strings selected represent two unique objects within the domain (e.g. two chess 
problems). Their ‘creative difference’ is represented by the deviation value generated. This deviation value is then 
used to produce two new strings (which themselves would generate the same or similar deviation value) but with 
different attribute values. These new attribute values can ultimately be used to generate new objects of potentially 
creative value using whatever generation system is available, i.e. by feeding it the attribute values it needs to build 
objects of a particular type. In very simple terms, it is like having or being able to derive new (realistic) measurements 
