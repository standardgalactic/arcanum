control parameter does not dictate or prescribe the collective variable
or order parameter (the emergent pattern of relative phase). Rather,
its changing values lead the system through a variety of possible patterns or states (Kelso 1995, p. 7). Thus the model mathematically describes how the control parameter of finger-movement frequency
leads the system through different patterns of finger coordination.
In the language of dynamic-systems theory, this kind of description
gives the state space of the system—the abstract and multidimensional
space that represents all possible states of the system by specifying all
possible values of the system’s variables. The temporal evolution of the
system corresponds to its trajectory through this space. The model predicts the observed switching from one phase to another without
positing any internal motor program that directs the switches by issuing symbolic instructions. Instead, the phase transitions occur spontaneously as emergent properties of the system’s self-organizing dynamics. Kelso and colleagues have extended and developed this type
of phase-transition model to apply to a wide variety of cognitive domains, such as motor skill learning, speech perception, visual perception, and the dynamic coordination of activity among cortical areas of
the brain (Bressler and Kelso 2001; Kelso 1995).
One of the key points relating to the dynamical approach is its emphasis on time. Traditional computational models are static in that
they specify only a sequence of discrete states through which the
system must pass. In contrast, dynamic-systems models specify how processes unfold in real time. As Tim van Gelder states, “Although all cognitive scientists understand cognition as something that happens over
time, dynamicists see cognition as being in time, that is, as an essentially temporal phenomenon (van Gelder 1999a, p. 244). Van Gelder
(1998) describes this contrast as one between change versus state; geometry versus structure; structure in time versus static structure; time versus
order; parallel versus serial; and ongoing versus input/output.
Whereas computationalists focus primarily on discrete states and
treat change as what happens when a system shifts from one discrete
state to another, dynamicists focus on how a system changes state continuously in time. Dynamicists conceive of state changes geometrically,
in terms of their position and trajectory in phase space, whereas computationalists focus on the internal formal or syntactic structure of
Autonomy and Emergence 43
combinatorial entities. Computationalists think of these structures as
laid out statically (like snapshots), as either present all at once or not,
and hence of cognition as the rule-governed transformation of one
such static structure into another. For dynamicists, cognitive structures
are laid out as temporally extended patterns of activity, and cognition
is seen as the flow of complex temporal structures mutually and simultaneously influencing each other. Dynamicists are therefore interested
in the timing (rates, periods, durations, synchronies) of processes,
whereas computationalists have traditionally been interested only in
the order of cognitive states. Moreover, computationalists tend to
think of this order as being the serial or sequential progression of
sense → perceive → think → act, whereas for dynamicists cognition
unfolds as the continuous coevolution of acting, perceiving, imagining, feeling, and thinking. Finally, whereas computationalists think
of cognitive processes as having an input-output structure—the system
receives an input, proceeds through a sequence of internal operations,
produces an output, and then halts—dynamicists think of processes as
always ongoing, with no clear starting or end points. The goal is not to
map an input at one time onto an output at a later time, but always to
maintain appropriate change (van Gelder 1998).
Autonomous Systems
The dynamicist idea that cognitive processes are always ongoing with
no clear starting or end points can be deepened by introducing the
distinction between autonomous and heteronomous systems. Autonomy and heteronomy literally mean, respectively, self-governed and
other-governed. A heteronomous system is one whose organization is
defined by input-output information flow and external mechanisms of
control. Traditional computational systems, cognitivist or connectionist, are heteronomous. For instance, a typical connectionist network has an input layer and an output layer; the inputs are initially assigned by the observer outside the system; and output performance is
evaluated in relation to an externally imposed task. An autonomous
system, however, is defined by its endogenous, self-organizing and selfcontrolling dynamics, does not have inputs and outputs in the usual
