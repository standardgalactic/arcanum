Asteroid
Mission
Guidance
and
Control using Dual Quaternions
Master Thesis
Marc Trullas Ballester
Technische Universiteit Delft

ii
Image credit: ESA public domain

ASTEROID MISSION GUIDANCE AND
CONTROL USING DUAL QUATERNIONS
MASTER THESIS
by
Marc Trullas Ballester
in partial fulﬁllment of the requirements for the degree of
Master of Science
in Aerospace Engineering - Space Flight
at Delft University of Technology,
to be defended publicly on Tuesday April 17, 2018 at 4 PM.
Student number:
4453166
Project duration:
April 1, 2017 – April 17, 2018
Supervisors:
Prof. dr. ir. J. McMahon,
CU Boulder
Dr. ir. E. Mooij,
TU Delft
Thesis committee:
Dr. ir. P. Chu,
TU Delft
Prof. L. L. A. Vermeersen,
TU Delft (Chair)
An electronic version of this thesis is available at http://repository.tudelft.nl/.

ii

PREFACE
Asteroids, comets and space exploration is such an exciting topic and I am glad I had the opportunity to do
some research about it and learn so much. In this thesis, some advantages and disadvantages have been
found for dual quaternions applied to problems in asteroid close-proximity operations. Hopefully, this work
will contribute to the development of new space exploration missions and inspire future research.
This report is the culmination of my research carried out in order to fulﬁll the requirements of the Master
of Science degree program at the faculty of Aerospace Engineering, Delft University of Technology. Moreover,
it is expected that a conference paper based on this thesis will be published and presented in 2018.
This thesis research has been carried out in Boulder (CO), under the supervision of Prof. dr. ir. J. McMa-
hon from the University of Colorado Boulder and Dr. ir. E. Mooij from Delft University of Technology. I would
like to express my special and sincere gratitude to both of them for their valuable advice, patience and com-
prehension during all this work. This thesis would have not been the same without you.
Last, I would also like to thank my parents and Lena for all their unconditional support. Thank you very
much.
Marc Trullas Ballester
Barcelona, April 2018
iii

iv
PREFACE

ABSTRACT
The investigation of small bodies in the Solar System such as asteroids and comets is of increasing interest to
the space exploration community for scientiﬁc and security reasons. A key enabling technology is the avail-
ability to control position and attitude of spacecraft for asteroid close-proximity operations. Dynamics and
control issues related to these operations have been investigated addressing the orbital and attitude motion of
the spacecraft with no coupling between them assumed. In reality however, the translational and rotational
dynamics of spacecraft are generally coupled. It is therefore desirable to simultaneously take into account
the full six degrees of freedom problem when developing pose (position and orientation) control laws for
practical applications. One way of doing that is by expressing the state variables with dual quaternions, a
mathematical formulation that naturally couples both motions in an efﬁcient and compact way.
The goal of this thesis is to determine what advantages and disadvantages can a six degrees of freedom
controller based on dual quaternions bring over classical methods regarding asteroid close-proximity opera-
tions. To do so, a simulator was developed in Matlab R2016b with the two different representations: the dual
quaternion one and the classical one using vectors for position, velocity and angular velocity, and quaternions
for the attitude. Then, a controller was designed and optimized for each representation to follow a reference
trajectory in three different scenarios, such as orbiting, hovering and landing on the asteroid Bennu. The dual
quaternion representation has only two equations of motion instead of the four required for the classical one
because of its compactness and natural way of coupling rotational and translational motions. However, re-
sults show that the dual quaternion controller takes 15% more computational time to achieve the same level
of accuracy and energy consumption as the classical controller for the nominal scenarios. The reason for that
is because the total number of operations involved in the integration of the equations of motions is higher.
Moreover, a stability analysis was carried out and showed that controllers based on dual quaternions can
handle much larger perturbations than the classical ones. Speciﬁcally, between 23 and 227 times larger per-
turbations depending on the scenario. Apart from that, results also proved that dual quaternion controllers
can correct trajectory perturbations in a much faster and efﬁcient way than the classical ones. Speciﬁcally,
they have a settling time between 29% and 92% shorter, accumulate between 2.6 and 19 times less error and
consume between 3.2 and 9.3 times less energy, depending on the scenario.
v

vi
ABSTRACT

CONTENTS
Acronyms
xi
List of symbols
xiii
1
Introduction
1
1.1
Research objective . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
3
1.2
Report outline. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
4
2
Mission heritage
5
2.1
Asteroid missions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
5
2.2
Attitude and position representations. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
8
2.3
Mission and vehicle description
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10
2.3.1
Mission deﬁnition . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11
2.3.2
Spacecraft model
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13
2.4
Mission and systems requirements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15
3
Quaternions and dual quaternions
17
3.1
Quaternions
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17
3.1.1
Attitude representation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18
3.2
Dual quaternions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20
3.2.1
Attitude and position representation. . . . . . . . . . . . . . . . . . . . . . . . . . . . 23
3.2.2
Coordinate transformations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23
4
Flight dynamics and space environment
25
4.1
Reference frames . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25
4.1.1
Asteroid-centered inertial . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25
4.1.2
Spacecraft body-ﬁxed . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26
4.1.3
Asteroid-centered asteroid-ﬁxed . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26
4.2
Equations of motion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26
4.2.1
Classical formulation
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27
4.2.2
Dual quaternion formulation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28
vii

viii
CONTENTS
4.3
Force models . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28
4.3.1
Gravity force . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29
4.3.2
Solar radiation force . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 31
4.3.3
Solar tides (3rd body force). . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 32
4.4
Gravity gradient torque model . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 33
5
Spacecraft control
35
5.1
Classic control . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 36
5.1.1
Attitude control . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 36
5.1.2
Position control . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37
5.2
Dual quaternion control . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 38
5.3
Gains optimization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39
5.3.1
Cost function
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 40
5.3.2
Selected gains . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43
6
Numerical methods
47
6.1
Integration method . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 47
6.2
Root ﬁnding. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 49
6.3
Interpolation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 49
7
Simulator design
51
7.1
Architecture design . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 51
7.1.1
Guidance
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 52
7.1.2
Control. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53
7.1.3
Actuators. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53
7.1.4
Sensors
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53
7.1.5
Navigation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53
7.2
Veriﬁcation and pseudo-validation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 54
7.2.1
Navigation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 55
7.2.2
Guidance
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 67
7.2.3
Control, actuators and sensors. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 69
7.2.4
System test. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 70
8
Results
75
8.1
Kinematic propagation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 75
8.2
Two body problem . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 76
8.3
Nominal scenarios . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 79
8.3.1
Orbiting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 79
8.3.2
Hovering . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 83

CONTENTS
ix
8.3.3
Landing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 86
8.4
Frequency analysis . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90
8.5
Stability analysis . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91
8.5.1
Energy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 92
8.5.2
Errors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 94
8.5.3
Settling time . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 95
8.5.4
Computational time . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97
9
Conclusions and recommendations
99
9.1
Conclusions. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 99
9.2
Recommendations and future work. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 100
Appendix A: Stability theory
103
Appendix B: Other system test results
107
Bibliography
119

x
CONTENTS

ACRONYMS
ACAF
. . . . . . . . . . . . . . . . .
Asteroid-Centered Asteroid-Fixed
ACI . . . . . . . . . . . . . . . . . .
Asteroid-Centered Inertial
AU
. . . . . . . . . . . . . . . . . .
Astronomical Unit
DCM
. . . . . . . . . . . . . . . . .
Direction Cosine Matrix
DOF
. . . . . . . . . . . . . . . . .
Degrees of Freedom
DQ-EKF
. . . . . . . . . . . . . . .
Dual Quaternion Extended Kalman Filter
DQ-MEKF
. . . . . . . . . . . . . .
Dual Quaternion Multiplicative Extended Kalman Filter
ESA . . . . . . . . . . . . . . . . . .
European Space Agancy
FTC
. . . . . . . . . . . . . . . . .
Finite-Time Control
GNC
. . . . . . . . . . . . . . . . .
Guidance, Navigation and Control
ICRF
. . . . . . . . . . . . . . . . .
International Celestial Reference Frame
IMU
. . . . . . . . . . . . . . . . .
Inertial Measurement Unit
JAXA
. . . . . . . . . . . . . . . . .
Japanese Space Agency
JPL
. . . . . . . . . . . . . . . . . .
Jet Propulsion Laboratory
LEO
. . . . . . . . . . . . . . . . .
Low Earth Orbit
Lidar
. . . . . . . . . . . . . . . . .
Light Detection and Ranging
LRF . . . . . . . . . . . . . . . . . .
Laser Range Finder
MRP
. . . . . . . . . . . . . . . . .
Modiﬁed Rodrigues Parameters
NASA . . . . . . . . . . . . . . . . .
National Aeronautics and Space Administration
NEAR . . . . . . . . . . . . . . . . .
Near Earth Asteroid Rendezvous
xi

xii
ACRONYMS
NEO
. . . . . . . . . . . . . . . . .
Near Earth Object
OSIRIS-REx . . . . . . . . . . . . . .
Origins, Spectral Interpretation, Resource Identiﬁcation, Security,aaaaaaaa
aaaaaaaaa aaaaaaa aaaaaaa aaaaaaa Regolith Explorer
PD
. . . . . . . . . . . . . . . . . .
Proportional and Derivative
PID . . . . . . . . . . . . . . . . . .
Proportional, Integral and Derivative
RDCM
. . . . . . . . . . . . . . . .
Reduced Direction Cosine Matrix
RP
. . . . . . . . . . . . . . . . . .
Rodrigues Parameters
SRP . . . . . . . . . . . . . . . . . .
Solar Radiation Pressure

LIST OF SYMBOLS
CALLIGRAPHIC SYMBOLS
Symbol
Description
Unit
H
Set of quaternions
-
Hd
Set of dual quaternions
-
H r
Set of scalar quaternions
-
H v
Set of vector quaternions
-
H r
d
Set of dual quaternions with zero dual part
-
H v
d
Set of dual vector quaternions
-
ℜ
Real domain
-
GREEK SYMBOLS
Symbol
Description
Unit
αe
Reference equatorial radius
m
∆
Increment
-
ϵ
Dual unit
-
λ
Longitude in spherical coordinates
rad
µ
Gravitational parameter
m3/s2
σ
Standard deviation
-
σSB
Stefan-Boltzmann constant
W/m2/K4
τ
Torque vector
N·m
Φ
Angle of the quaternion; Euler parameter
rad
Φ
Increment function for integration
-
ω
Angular velocity
rad/s
ˆω
Dual velocity
m/s, rad/s
Ω
Angular velocity
rad/s
∇
Gradient operator
-
∇2
Laplace operator
-
xiii

xiv
OPERATORS
Symbol
Description
Unit
◦
Dual quaternion circle operation
-
∗
Conjugation operation
-
s
Swap operation
-
⋆
Matrix dual quaternion multiplication
-
*
Matrix quaternion multiplicaiton
-
ROMAN SYMBOLS
Symbol
Description
Unit
a
Acceleration vector
m/s2
ˆa,ˆb
Example dual quaternion
-
Asat
Cross-sectional area of satellite
m2
CR
Reﬂectivity coefﬁcient
-
¯Cn,m, ¯Sn,m
Spherical harmonic normalized coefﬁcients
-
Cn,m ,Sn,m
Spherical harmonic unnormalized coefﬁcient
-
C
Direction cosine matrix
-
d
Position vector from the Sun to the asteroid
m
ˆd
Dual disturbance force
N, N·m
e
Rotation vector of a quaternion; Euler vector parameter
-
ˆf
Dual force
N, N·m
F
Force vector
N
G
Quaternion rotation matrix
-
h
Step size
s
I
Inertia tensor
kg·m2
L
External torque vector
N·m
M
Total mass of a body
kg
M
Dual inertia matrix
kg, kg·m2
¯Pn,m
Normalized Legendre polynomial of order n and degree m
-
q
Quaternion
-
ˆq
Dual quaternion
-
qr
Real part of a dual quaternion
-
qd
Dual part of a dual quaternion
-
r
Position vector
m

0. LIST OF SYMBOLS
xv
Symbol
Description
Unit
u
Attitude control input
N·m
ˆu
Dual control input
N, N·m
U
Gravitational potential
J
v
Velocity vector
m/s
X, Y, Z
Reference frame X, Y, Z Axes
-
ˆ1
Dual quaternion 1+ϵ0
-
ˆ0
Dual quaternion 0+ϵ0
-
0
Quaternion (0,0,0,0)
-
1
Quaternion (1,0,0,0)
-

xvi

1
INTRODUCTION
The investigation of small bodies in the Solar System, such as asteroids and comets, is of increasing inter-
est to the space-exploration community for scientiﬁc and possibly safety reasons [Vukovich and Gui, 2017].
They are remnants from the formation of the Solar System and may contain the molecular precursors to the
origin of life and the Earth’s oceans. Some of them may also become hazardous objects with a probability of
impacting the Earth one day [Lissauser and de Pater, 2013]. For these reasons, several missions have been
dedicated to study asteroids and comets; such as Near Earth Asteroid Rendezvous (NEAR), Hayabusa, Roseta
or Origins, Spectral Interpretation, Resource Identiﬁcation, Security, Regolith Explorer (OSIRIS-REx).
One of the key challenges and enabling technology is the availability to control position and attitude of
spacecraft for close proximity operations, such as orbiting, hovering or landing on the surface of asteroids.
During the past two decades, dynamics and control issues related to these operations have been investigated
[Broschart and Scheeres, 2005; Scheeres, 2012; Lee et al., 2015; Kumar, 2008]. The majority of these studies
however, addressed the orbital and attitude motion of the spacecraft about the asteroid with no coupling
between them assumed; and this is the key for high precision modeling and control. In reality, the trans-
lational and rotational dynamics of spacecraft are generally coupled. Since the direction of the thrust force
is dependent on the spacecraft orientation, attitude motion can deﬂect an imposed control force and affect
translational motion in this way. In addition, some external torques, such as gravity gradient, are also func-
tions of the spacecraft position [Wang and Xu, 2014]. It is therefore desirable to simultaneously take into
account the full six Degrees of Freedom (DOF) coupling when developing pose (position and orientation)
control laws for practical applications.
The coupled full six DOF problem has been extensively studied for Earth-orbiting spacecraft in applica-
tions, such as: formation ﬂying, spacecraft rendezvous and docking, space debris removal and many others.
However, the corresponding problem for small asteroids is still open. The dynamics environment is quite
1

2
different from that of the Earth and poses special challenges for spacecraft-motion control. The gravity ﬁelds
of asteroids are weak and can be time varying due to high speed rotations and their small size, irregular shape
and mass distribution. When the dimensions of the spacecraft is comparable to the asteroid, the gravita-
tional coupling between translational and rotational motion plays an important role and therefore, it has to
be taken into account for close proximity operations [Wang et al., 2012; Misra and Sanyal, 2015].
One way of taking the full six DOF coupling into account is by using dual quaternions. A mathematical
formulation that naturally couples the translational and rotational motion. They provide an efﬁcient repre-
sentation of the two motions simultaneously and perform more compact and effectively than other formu-
lations [Wang et al., 2010]. Dual quaternions are an extension of classical quaternions. Therefore, they allow
to write the combined translational and rotational equations of motion in the same form as rotational-only
equations written in terms of quaternions. This appealing property can be used to design controllers by ex-
tending already existing attitude-only controllers with some desirable properties by often simply substituting
quaternions with dual quaternions. In addition, they also allow for the use of a single error function to repre-
sent the combined position and attitude error. As a result, the asymptotic stability of the combined rotational
and translational motion can be proven in a single step by using a Lyapunov function with the same form as
the Lyapunov function normally used to prove the asymptotic stability of a rotational-only controller [Filipe
and Tsiotras, 2014].
Dual quaternions have been successfully applied to various areas, such as computer vision [Daniilidis,
1999], animation [Ge and Ravani, 1994] and robotics [Aspragathos and Dimitros, 1998]. First, Funda and
Paul [1990] proved that dual quaternions are more computationally efﬁcient for robotic applications such
as representing screw displacements of multi-linked spatial mechanisms. Then, Aspragathos and Dimitros
[1998] showed that dual quaternions perform better than 4x4 homogeneous matrix transformations and Lie
algebra in robotic kinematics. However, the ﬁrst utilization of dual quaternions for spacecraft was proposed
in spacial navigation missions [Yuanxin et al., 2005]. Since then, several studies have been carried out using
dual quaternions for tracking problems. Among the most relevant ones: Wang et al. [2010] proposed an in-
cremental Proportional, Integral and Derivative (PID) control law for a rendezvous problem on Earth. Zhang
and Duan [2011] designed a robust ﬁnite-time control strategy for tracking a circular orbit nadir pointing.
Filipe and Tsiotras [2014] used dual quaternions for developing an adaptive non-linear position and attitude
tracking controller applied for docking two spacecraft orbiting Earth. Finally, Filipe and Ricardo [2014] devel-
oped the ﬁrst Dual Quaternion Multiplicative Extended Kalman Filter (DQ-MEKF) and proved pose-tracking
stability without velocity measurements for rendezvous and docking of two spacecraft.
However, non of the mentioned studies focused on asteroid close-proximity operations. One of the ﬁrst
utilizations of dual quaternions for asteroid operations was carried out by Razgus et al. [2017b]. They devel-
oped a new Dual Quaternion Extended Kalman Filter (DQ-EKF) and showed signiﬁcant gains in the transients
of the estimation errors compared to conventional ﬁlters using classical representations. Apart from that,
Vukovich and Gui [2017] also proposed an adaptive robust control scheme based on dual quaternions for
asteroid close-proximity operations, such as hovering and landing on 433 Eros. Despite the fact that Razgus
et al. [2017b] compared the dual quaternion representation with conventional ones, they focused on ﬁlters

1. INTRODUCTION
3
and not on the control part. And even though Vukovich and Gui [2017] proposed a controller based on dual
quaternion for asteroid operations, they only compared it with a Finite-Time Control (FTC) with different
characteristics from [Lee et al., 2015], and proved better performance only for the hovering scenario. The aim
of this master thesis is then to take a step further and fairly compare the dual quaternion representation with
respect to the classical one, focusing on the control part, for different asteroid close-proximity operations.
It will try to determine whether or not, the believed advantages of dual quaternions also apply for asteroid
close-proximity operations and quantify them. This thesis will not only look at the precision of the solution
and magnitude of the errors, but it will also analyze the energy consumption, stability ranges of the con-
trollers and computational times. The comparisons will be carried out for three very different scenarios, such
as orbiting, hovering and landing on the asteroid Bennu.
1.1. RESEARCH OBJECTIVE
This master thesis will compare two different ways of expressing state variables of a full six DOF problem
in asteroid close-proximity operations. The goal is to determine the advantages and disadvantages of each
representation and quantify them.
The ﬁrst representation method will be the classical one in which position, velocity and angular velocity
are expressed by three-dimensional vectors, and quaternions are used for the attitude. The second method
will be the dual quaternion one, in which both the pose (position and attitude) and dual velocity (linear and
angular velocities) of the spacecraft are represented by unit dual quaternions.
All the comparisons will be carried out in three different asteroid close-proximity operations correspond-
ing to orbiting, hovering and landing. The target asteroid will be Bennu, a B-type Near Earth Object (NEO)
object that is relatively close to Earth.
This thesis will focus on the guidance and control part. Therefore, no navigation ﬁlters will be taken into
account. The trajectory of the spacecraft will be assumed to be the one coming from numerically integrating
the equations of motion. The space environment will be assumed to be perfectly known and modeled.
Many different aspects will be considered for determining the advantages and disadvantages of each rep-
resentation. The ﬁrst one will be the efﬁciency in which each method can expresses the equations of motion
and solve them. A second one will be the effort taken for designing a controller and proving its stability.
Third, the simplicity and time consumption of each method when selecting the control gains will also be as-
sessed. The fourth one will be the performance in terms of errors, energy and time that each method takes
when trying to follow a predeﬁned reference trajectory about the asteroid. Fifth, a control frequency sensi-
tivity analysis will be carried out. And ﬁnally, a perturbation analysis will be developed to determine which
method can deal with larger perturbations and assess the performance of each controller when correcting
them.
Bearing all these aspects in mind, the research question and sub-questions to be answered in this thesis
can be written as follows.
• Research question: What advantages and disadvantages can a six DOF controller based on dual quater-

4
1.2. REPORT OUTLINE
nions bring over classical methods regarding asteroid close proximity operations?
1.2. REPORT OUTLINE
This report consists of nine chapters and two appendixes. The ﬁrst chapter is this current introduction and
the list of the remaining chapters is presented below.
• Chapter 2 explains the mission heritage and what have been learned from past missions to asteroids
and dual quaternion representations. It describes the way in which attitude and position is usually
represented and the mission and vehicle that will be used for this work. Finally, it concludes with the
mission and system requirements.
• Chapter 3 is an introduction to quaternions and dual quaternions and how they can represent attitude
and position. Dual quaternions are deﬁned and the most common operations are introduced. It is
meant to be a familiarizing chapter for the reader.
• Chapter 4 describes the ﬂight dynamics and space environment. It ﬁrst deﬁnes the reference frames
that will be used in this work. Then, it derives the equations of motion both for the dual quaternion
approach and the classical one. Finally, all the environment that will affect the spacecraft during the
simulations is modeled.
• Chapter 5 presents the controllers that will be used in each method for bringing the spacecraft down
to the reference trajectory. Proof of Lyapunov stability is provided for all of them. It concludes with the
gain selection and the explanation of how each gain will be optimized.
• Chapter 6 covers the numerical methods that will be used for integrating the equations of motion.
• Chapter 7 explains how the simulator will be implemented with a top level architectural design of all
the unit blocks. Then, the process of veriﬁcation and validation is presented for all previous blocks.
• Chapter 8 presents and discusses the results of all simulations. It is where the dual quaternion ap-
proach is really compared with the classical one and where the research questions can be answered. A
fair comparison is carried out for each of the three asteroid close proximity operations scenarios.
• Chapter 9 concludes the report with the conclusions coming from the output of the comparisons and
presents the recommendations for the future work.
This report ends with Appendixes A and B. The ﬁrst one covers theoretical explanations of some lemmas
and theorems regarding Lyapunov stability of non-linear systems, which are relevant for the understanding of
this work. Appendix B contains the remaining ﬁgures of the system tests that could not be shown in Chapter
7 for the sake of readability.

2
MISSION HERITAGE
This chapter aims at providing the mission heritage for this master thesis. Several past mission have been
dedicated to study asteroids, therefore, a lot can be learned and used from them. Section 2.1 summarizes
these missions and provides useful methodologies that can be applied for this thesis. In Section 2.2, the
classical ways of representing the state variables of the full six DOF problem are presented. They represent
the way in which all previous mission addressed the translational and rotational motion. Apart from that, the
mission heritage of dual quaternions is also presented. Several authors have already studied and applied dual
quaternions successfully for space applications, providing a solid ground-base to start this thesis. This allows
to deﬁne several mission scenarios and spacecraft models in order to answer the research question, which is
carried out in Section 2.3. Finally, the mission and systems requirements are stated in Section 2.4.
2.1. ASTEROID MISSIONS
The investigation of asteroids is now of increasing interest. They are remnants from the formation of the
Solar System 4.6 billion years ago, and may contain the molecular precursors to the origin of life and the
Earth’s oceans. Some of them may also become hazardous objects, which can potentially impact Earth. For
these reasons, several missions have been dedicated to study asteroids [Lissauser and de Pater, 2013]. This
section summarizes the most important ones.
• NEAR mission Shoemaker was the ﬁrst scientiﬁc mission from National Aeronautics and Space Admin-
istration (NASA), dedicated to the comprehensive study of an asteroid (433 Eros). It was launched in
1996. In 2000, the spacecraft successfully entered an orbit around the asteroid and carried out a one
year orbital phase of operations at progressively lower altitudes. The orbital mission phase culminated
in 2001 with a controlled descent and soft landing on the surface of Eros. Although landing on Eros was
5

6
2.1. ASTEROID MISSIONS
Table 2.1: Hayabusa components for attitude determination and control [Masashi et al., 2006]
Component
Qty.
Speciﬁcations
Two Axis Sun Aspect Sensor (TSAS)
1
Field of view: +/- 50 x +/- 50o
Accuracy better than 0.05o
Inertial Reference Unit (IRU)
2
Range:1432o/s Max
Resolution: 1.093x10−4o
Bias stability: 3o/h (3σ)
Random walk: 0.07 o/hr1/2)
Star Trakcer (STT)
1
Field of view 30o x 40o
Star dynamic range: 3 ≈-1 (CCD Magnitude)
Accuracy (random, bias): 3 arcmin (3 σ), 1 arcmin (3σ)
Update rate: 1 Hz
Reaction Wheel (RW)
3
Maximum momentum: 4 Nms (@5000 rpm)
Torque: 12 mNm minimum
Reaction Control System (RCS)
12 jets
Thrust: 20 Nominal
Minimum impulse: 0.2 Ns
deﬁned as the end of mission, the phenomenal success of this activity resulted in a two-week mission
extension. The controlled descent and soft landing activity was conceived to satisfy two goals. The
primary goal was to acquire high resolution images (10 cm) of the asteroid’s surface down to a 500 m
altitude. The second goal was a ﬂight demonstration of a controlled descent to a small body. To satisfy
this goal, an impact velocity less than 3 m/s was speciﬁed. Both goals were achieved and even a post
touchdown communications beacon was acquired to conﬁrm landing survival. Misson successfully
ended in 2001 [Nelson, 2001].
• Hayabusa mission was designed by Japanese Space Agency (JAXA) to explore asteroid Itokawa. It was
launched in 2003 and it was the ﬁrst spacecraft to land on an asteroid and return samples back to
Earth. Two months were spent for remote observations orbiting at an altitude range from 3 to 20 km.
Two touchdowns were performed to collect a total of 1 g of surface material. Due to the small size of the
asteroid, its gravitational effects were small and landing was more like docking [Masashi et al., 2006].
For attitude determination and control, Hayabusa used the components summarized in Table 2.1.
• Rosetta mission was a spacecraft built by European Space Agancy (ESA) to study comet 67P/Churyumov-
Gerasimenko launched in 2004. It orbited the comet for more than 2 years at altitudes from 5 to 20 km
and successfully deployed and landed its Philae probe in 2014. The spacecraft accompanied the comet
through perihelion until the end of mission in 2016 [Regnier et al., 2000]. Propellant mass was one of
the main dynamic constraints because it represented about 50% of the satellite mass, thus generated
non negligible sloshing effects and included sensitive mass and inertia variations along the mission.
Another dynamic constraint was the presence of large solar arrays to ensure sufﬁcient power at a dis-
tance of several AU from the Sun. The ﬂexible appendages had rather low-frequency and represented

2. MISSION HERITAGE
7
a signiﬁcant amount of the spacecraft inertia. Also, during nominal operations, the spacecraft had to
operate completely autonomously for up to a maximum period of time of about 2 days. The pointing
requirement during the observation phases and the lander ejection was about 0.05o and the antenna
pointing requirements in order to ensure Earth/satellite link was about 0.15o. Rosetta GNC equipment
consisted of: two pairs of coarse Sun sensors to determine the Sun direction, two star trackers, three
Inertial Measurement Unit (IMU) and two navigation cameras for autonomous asteroid direction mea-
surements and to provide images to the ground. The propulsion system consisted of two sets of 12
thrusters with a nominal force of 10 N for attitude control and velocity increments. Finally, Rosetta was
also equipped with four momentum wheels of 40 Nms capacity and a maximum torque of 19 mNm,
mainly for precise attitude control and to absorb environment torques [Regnier et al., 2000]. The at-
titude estimation during the normal mode was performed by means of a gyro-stellar estimator with a
6-state Kalman ﬁlter and a constant covariance matrix. The initialization of the estimator was carried
out with the attitude quaternion provided by the star tracker usding the J2000 reference frame. The
interest of that attitude estimator was that it led to a reduced computation load thanks to the constant
covariance, without performance degradation. Moreover, the use of quaternions (instead of Euler an-
gles) made it possible to operate at large angles. This was a requirement because the slew maneuvers
were envisaged during the normal mode. The attitude control was performed by means of the four mo-
mentum wheels (with a maximum torque of 0.4 Nm). The controllers were adapted to each phase of
the normal mode in order to ensure an adequate response time. During the asteroid ﬂy-by mode, the
two navigation cameras tracked the asteroid optical center at a frequency of 0.4 Hz, which enabled the
generation of the attitude guidance proﬁle through the Kalman ﬁlter. This was carried out by rotating
the satellite about the minimum inertia axis with a maximum angular rate of 0.8o/s.
• Hayabusa 2 mission is the second asteroid sampling and return mission of JAXA followed by its suc-
cessful predecessor mission. It was launched in 2014 and it is expected to study asteroid Ryugu (1999
JU3) in July 2018. The spacecraft is based on the technological heritage of Hayabusa incorporating
some major improvements in terms of navigation, propulsion, attitude control and sampling methods
[Tsuda et al., 2013]. It will perform some asteroid close proximity operations for 1.5 years, including
3 touchdowns for sampling and a 2-m-class crater generation by a high-speed impact operation. The
sample is to be brought back to Earth by a re-entry capsule. For attitude and orbit control Hayabusa 2
uses the systems summarized in Table 2.2. The sampling operation sequence will be divided into three
phases. An initial descent at 0.1 m/s controlled by ground operators; a fully autonomous second de-
scent where a target marker is deployed and followed using on-board navigation cameras and the ﬂash
Lidar; and a ﬁnal landing phase starting at an altitude of 30 m using the LRF to determine the local
surface orientation relative to the spacecraft [Tsuda et al., 2013].
• OSIRIS-REx mission which stands for Origins, Spectral Interpretation, Resource Identiﬁcation, Secu-
rity Regolith Explorer (OSIRIS-REx) is a NASA mission launched in 2016 to characterize and map the
surface of asteroid Bennu and return a sample to Earth (60 g approx). The spacecraft is expected to

8
2.2. ATTITUDE AND POSITION REPRESENTATIONS
Table 2.2: Speciﬁcations of the Hayabusa 2 spacecraft [Tsuda et al., 2013]
System
Speciﬁcations
Attitude and orbit control
HR5000S based processor, double redundant
4 Reaction wheels, 2 IRUs, 2 Star trackers
4 Coarse sun aspect sensors, 4 accelerometers
Sensor for proximity operation Lidar, LRF, 5 Target makers, Flash lamp
Optical navigation cameras
Propulsion system
Reaction control system
- Bi-propellant hydrazine system
- 20 N thruster x 12
Ion engine system
- Xe microwave discharge ion engine system
- Maximum thrust 28 mN, Isp = 2800 s
- 4 thruster heads on gimballed stage
- 3 operative at once (4/3 redundant)
arrive in November 2018 and orbit Bennu at 1 and 1.5 km altitudes for one year. A touch and go phase
is planned for getting the sample [Lorenz et al., 2017]. With a one-way light time of up to 18 minutes,
spacecraft operations during this maneuver will have to be performed completely autonomously with
a Light Detection and Ranging (Lidar) system combined with an optical system for Guidance, Naviga-
tion and Control (GNC). Unlike a planetary orbital environment where the planet’s gravity is by far the
dominant force acting on the spacecraft, the "small forces” acting on the OSIRIS-REx spacecraft will be
of comparable magnitude to the asteroid’s gravity, so that the accuracy with which the accelerations
from these forces can be modeled will determine how accurately the spacecraft’s future orbital state
can be predicted. Figure 2.1 shows the magnitude of these small forces. It is clear that the most relevant
forces will be the ones coming from Bennu’s gravity ﬁeld, the SRP and the Sun third body forces. The
requirements in position for the touch-and-go sequence are set to be an ellipse of only 25 m in diame-
ter. To do so, OSIRIS-REx is equipped with 4 reaction wheels and 28 engines divided into four groups:
a bank of four high-thrust main engines, six medium-thrust engines, 16 attitude control thrusters, and
a pair of specialized low-thrust engines. It is also equipped with 2 IMU, 2 star trackers, 4 headed Sun
sensors, a Lidar system and a navigation optical camera [May et al., 2014]. All the details regarding the
touch-and-go sequence are summarized in Figure 2.2.
2.2. ATTITUDE AND POSITION REPRESENTATIONS
Position, velocity and angular velocity are always expressed with a three dimensional vector. That is the
way all previous mentioned missions did it. However, there are different ways of expressing the orientation
of a rigid body. The most commonly used and well known representations are: Direction Cosine Matrix

2. MISSION HERITAGE
9
Figure 2.1: Different forces acting on OSIRIS-REx spacecraft on different phases. [Everett et al., 2017]
Figure 2.2: OSIRIS-REx touch-and-go phase event overview [Lorenz et al., 2017]
(DCM), Reduced Direction Cosine Matrix (RDCM), euler angles, principal rotation vectors, unit quaternions,
Rodrigues Parameters (RP) and Modiﬁed Rodrigues Parameters (MRP).
For this thesis work, unit quaternions have been selected to be the classical way of representing the atti-
tude of the spacecraft. They have no singularities, only four parameters are required, and dual quaternions
are much similar to them than to any other representation. Furthermore, all previous mentioned past mis-
sion most probably also used unit quaternions to express their orientation.

10
2.3. MISSION AND VEHICLE DESCRIPTION
However, as has been already introduced in Chapter 1, there is another way of representing the rotational
and translational motion of a rigid body. Position and attitude can be represented simultaneously with a
single variable using dual quaternions. The same can be said about the linear and angular velocities. Dual
quaternions are a mathematical formulation based on dual numbers with its own algebra associated with
them [Filipe and Tsiotras, 2013]. They are an extension of classical quaternions and therefore, they allow
to write the combined translational and rotational equations of motion in the same form as rotational-only
equations written in terms of quaternions. This appealing property can be used to design controllers by ex-
tending already existing attitude-only controllers with some desirable properties by often simply substituting
quaternions with dual quaternions. Fundamentals of dual quaternions and how they can represent position
and attitude at the same time is explained in detail in Chapter 3.
Dual quaternions have been successfully applied to different ﬁelds, such as computer vision [Daniilidis,
1999], animation [Ge and Ravani, 1994] and robotics [Aspragathos and Dimitros, 1998]. However, the ﬁrst
utilization of dual quaternions for spacecraft was proposed in spacial navigation missions [Yuanxin et al.,
2005]. Since then, several studies have been carried out using dual quaternions and they are becoming more
popular in the literature [Wang et al., 2010; Zhang and Duan, 2011; Filipe and Tsiotras, 2014].
Relevant heritage can be found in the work of Filipe and Ricardo [2014] and Razgus et al. [2017b], who
developed new ﬁlters using dual quaternions and showed their beneﬁts; such as proving signiﬁcant gains in
the transients of the estimation errors compared to conventional ﬁlters using classical representations. Apart
from that, relevant heritage can also be found in the work of Wang and Yu [2010]; Filipe and Tsiotras [2013];
Gui and Vukovich [2015]; Vukovich and Gui [2017], who proposed several controllers using dual quaternions.
Wang and Yu [2010] designed an incremental PID control law taking into account the coupled dynamics and
control for a rendezvous problem during ﬁnal approach on an Earth orbit. Filipe and Tsiotras [2014] de-
signed a nonlinear adaptive controller for the same problem, but without requiring information about the
mass and inertial matrix of the chaser satellite. They also showed almost global asymptotic stability of the
tracking errors. Then, Gui and Vukovich [2015] developed another controller using dual quaternions comb-
ing a simple PD controller with an adaptive algorithm which provided estimations of unknown parameters
and disturbances. They ensured almost global asymptotic convergence of the relative pose tracking error as
well, and showed a reduced control energy consumption and computationally more efﬁciency than [Filipe
and Tsiotras, 2014]; due to the gyroscopic terms involved in their control law. Finally, Vukovich and Gui [2017]
improved their own previous control law [Gui and Vukovich, 2015] by introducing another adaptive algorithm
to dynamically adjust the compensation of perturbations due to parametric uncertainties and external dis-
turbances.
2.3. MISSION AND VEHICLE DESCRIPTION
This section describes the mission scenarios and vehicle model that will be used for comparing the dual
quaternion approach with the classical one.

2. MISSION HERITAGE
11
Figure 2.3: A rendering of Bennu asteroid. Image credit NASA public domain
2.3.1. MISSION DEFINITION
To compare the dual quaternion representation with the classical ones, a realistic mission scenario involving
close proximity operations around an asteroid is required. Thus, a target asteroid is ﬁrst needed.
It has to be an asteroid small enough so that coupled dynamics can play and important role. Also, it has
to be a previously visited asteroid or otherwise, a sufﬁciently characterized asteroid with on ground mea-
surements, so that dynamical models can be developed for its close-proximity environment. Finally, it is
always desired to select an asteroid feasible to reach with current technology. For these reasons, asteroid
Bennu has been selected to be the main body of all simulations that will be carried out in this thesis. Bennu
is a B-type Near Earth Object (NEO) object that is relatively close to Earth (it orbits within 1.3 Astronomical
Unit (AU) of the Sun) and has an Earth-like orbit with low eccentricity and inclination. Apart from that, it is
the best characterized asteroid with on-ground measurements; and there is sufﬁcient information to create
accurate enough models. Bennu is also rich in terms of chemical composition because it contains carbon,
organic molecules, volatiles and amino acids that may have been the precursors to life on Earth [Scheeres
et al., 2016]. Apart from that, it has not signiﬁcantly changed since it was formed 4 billion years ago. Figure
2.3 shows a rendered image of the current Bennu model.
The main physical properties of Bennu that will be used in this thesis are summarized in Table 2.3. It
is important to mention that Bennu is still "unknown", because it has not been visited yet and all informa-
tion available at the moment might change since it is Earth-based measured. Table 2.3 presents the current
assumptions that are thought to be accurate within certain accuracy.
Bennu orbital elements at Epoch 2455562.5 (2011-Jan-01.0) are stated in Table 2.4 taken from the Jet
Propulsion Laboratory (JPL) database for NEO 1 .
Then, three different asteroid close-proximity operations can be deﬁned. They are meant to represent re-
alistic scenarios for asteroid characterization missions. These are: orbiting, hovering and landing on Bennu.
These will be the test scenarios where the dual quaternion approach will be compared with the classical one
to come up with different conclusions regarding computational times, efﬁciency, energy consumption and
precision.
ORBITING
The ﬁrst scenario will be to orbit Bennu at 1500 m. This orbiting scenario tries to simulate real mission phases
where the spacecraft studies the asteroid while orbiting. Normally, if the asteroid allows for stable orbits, they
1 Retrieved from "https://ssd.jpl.nasa.gov/sbdb.cgi?sstr=Bennu" on 8 August 2017

12
2.3. MISSION AND VEHICLE DESCRIPTION
Table 2.3: Bennu assumed properties (Earth-based) [Scheeres et al., 2016]
Mean radius
246 ± 10 m
Volume
6.23 ± 0.06 · 107 m3
Density
1260 ± 70 kg/m3
Nominal Total mass
7.8 · 1010 kg
Nominal Gravitatioinal parameter
5.2 m3/s2
Inertia principal moments
Ixx
1.3749·1015 kg/m2
Iyy
1.4285·1015 kg/m2
Izz
1.5421·1015 kg/m2
Spin rate
4.0613·10−4 ± 1.9·10−7 rad/s
Spin pole
Retrograde - obliquity ≈180o
Table 2.4: JPL database for Bennu ephemeris 1
Eccentricity
0.20374510 ± 2.2237e-08 (1 σ)
Semi Major Axis
1.12639102602 ± 4.0315e-11 au (1 σ)
Inclination
6.034939 ± 2.8409e-06o (1 σ)
Perihelion distance
0.89689436 ± 2.5034e-08 au (1 σ)
Aphelion distance
1.35588768855 ± 4.8529e-11 au (1 σ)
Longitude of the ascending node
2.060867 ± 3.9515e-06o (1 σ)
Argument of perihelion
66.223067 ± 6.096e-06o (1 σ)
Mean anomaly
101.703947 ± 2.6659e-06o (1 σ)
Time of perihelion passage
2455439.141945 ± 3.2307e-06 JED (1 σ)
Orbital period
436.64872818 ± 2.3442e-08 days (1 σ)
Mean motion
0.82446135019 ± 4.4263e-11o/d (1 σ)
do not perform any type of orbit control (or barely any) so that the gravity ﬁeld can be characterized, or many
other scientiﬁc experiments can be carried out. In the case of Bennu, it allows for very stable orbits [Hergen-
rother, 2014], therefore, no position control will be carried out. The selected orbit for all the simulations in
this thesis will be a Sun-synchronous terminator orbit. This is an orbit at 1500 m following the plane perpen-
dicular to the Sun vector from the center of the asteroid. It is a very scientiﬁcally interesting orbit because
apart from being a polar orbit ( covering all latitudes and longitudes ), the illumination is always the same;
which is desired for observational purposes. Regarding the orientation of the satellite, it will try to point to
the asteroid (simulating an observing camera) at all times. The orbital period for such an orbit is about 45.46
hours with a velocity of about 5.89 cm/s. The simulation time has been selected to be of 1 orbital period.
HOVERING
The second scenario will consist in hovering at 500 m from the surface of Bennu. It has been found [Her-
genrother, 2014], that one of the best spots for hovering is in the equator. It allows to observe the asteroid

2. MISSION HERITAGE
13
Figure 2.4: Spacecraft model (based on OSIRIS-REx parameters)
while it rotates and capture many interesting scientiﬁc features. The perfect illumination for this is when the
line from the satellite to the center of the asteroid forms a 30o angle with the line going from the Sun to the
center of Bennu. The shadows created from the craters and features on the surface are easier to detect and
understand. For this reason, this will be the selected spot for hovering in all these simulations. Regarding the
orientation of the satellite, it will always try to point to the center of the asteroid as well (simulating a camera
or Lidar for scientiﬁc purposes). It is important to remark here that this is an inertial hovering. This means
that the satellite will be ﬁxed in an inertial spot while the asteroid will be rotating. This allows the satellite to
observe all the faces of the asteroid, which is scientiﬁcally very interesting.
LANDING
The last scenario will be the landing on the surface of Bennu. On a real mission, the spacecraft always ﬁrst
studies the surface of the asteroid and then a landing spot is selected taking into account many different
aspects such as scientiﬁc interests, safety, data links, etc. As has been already explained, Bennu has never
been visited before, therefore, the real surface is not really known. For this reason, any point of the surface
can be a candidate spot for landing. For the sake of simplicity, the reference landing trajectory has been
selected to follow the x body-ﬁxed axis of Bennu from an altitude of 60 m above the surface to actually land
on it. This axis corresponds to the principal moment of inertia. The nominal landing velocity will be 10 cm/s;
this means that the maneuver will take 10 minutes to be completed. Regarding the orientation of the satellite,
it will have to point to the center of the asteroid at all times.
2.3.2. SPACECRAFT MODEL
The spacecraft model selected for this thesis work is a simpliﬁcation of the real OSIRIS-REx spacecraft. Almost
all parameters are published and will be used.
PHYSICAL PROPERTIES
Regarding physical properties, everything has been made public except for the inertia tensor (Lockheed Mar-
tin does not publish this type of information). Table 2.5 states all the known information. Figure 2.4 shows
the spacecraft model with its dimensions and body frame coordinate system deﬁnition.
To compute the inertia tensor, the spacecraft is assumed to be a box with two panels on each side, as
shown in Figure 2.4. The panels are located in the XY plane of the body frame of the satellite and are both

14
2.3. MISSION AND VEHICLE DESCRIPTION
Table 2.5: Spacecraft model properties
Name
Magnitude
Comments
Mass
1193.5 kg
Mass at Bennu arrival 2
Main body mass
1138.5 kg
Mass of the main body (cuboid)
Solar panels mass
22.5 kg
Mass of the solar panels (each)
Height
2.44 m
Height of main body 3
Width
2.44 m (6.2 m)
Width (with solar panels deployed) 3
Length
3.15 m
Length of main body 3
Solar array dim.
8.5 m2
Total area of solar arrays
Reﬂectivity coef.
1.28
Reﬂectivity coefﬁcient
Mass to Area ration
≈100 kg/m2
Mass to area ratio for SRP computations
equal. They have a total area of 8.5 m2, with assumed dimensions of 2.26 m and 1.88 m each. Their masses
are assumed to be 22.5 kg each. It is important to remark that the real OSIRIS-REx spacecraft has different
dimensions and inertia tensor. Since the goal of this master thesis is not to reproduce very accurate results
compared to the OSIRIS-REx mission, but to study possible advantages of dual quaternion, there is no reason
why the inertia tensor should be exactly the same.
The inertia tensor of a ﬁlled box (I b) with respect to its center of mass can be computed as follows:
I b =


1
12mb(l2
y +l2
z)
0
0
0
1
12mb(l2
x +l2
z)
0
0
0
1
12mb(l2
x +l2
y)

=


1129.70
0
0
0
1506.24
0
0
0
1506.24

kg·m2
(2.1)
where mb is the mass of the box ( 1138.5 kg ) and lx,ly and lz are its dimensions (depth = 3.15 m, width =
2.44 m and height = 2.44 m). Then, applying the parallel axis theorem (2.2), the inertia of each panel (I w)
with respect to the center of mass of the complete body (which does not change when adding the two solar
panels) can be computed as follows. It is important to remark that a negligible thickness is considered.
I w = I wcm + M ·d 2
(2.2)
I w =


1
12mw(s2
y)+mw(d2
x)
0
0
0
1
12mw(s2
x)+mw(d2
y)
0
0
0
1
12mw(s2
x + s2
y)+mw(d2
z )


(2.3)
I w =


111.60
0
0
0
9.58
0
0
0
121.18

kg·m2
(2.4)
2Taken from Beckman et al. [2013]
3"OSIRIS-REx: Asteroid Sample Return Mission" (PDF) (Press Kit). NASA. August 2016. Retrieved 7 August 2017

2. MISSION HERITAGE
15
where mw is the mass of one solar panel (22.5 kg) and sx and sy are the dimensions (depth = 2.26 m and width
= 1.88 m) of the panel respectively. dx,dy and dz are the distances between the main body principal axis and
the solar panel principal axis of inertia. The total inertia tensor of the spacecraft is just then the summation
of the inertia tensors of all components with respect to the center of mass.
I Total = I b +2I w =


1352.9
0
0
0
1525.4
0
0
0
1748.6

kg·m2
(2.5)
ACTUATORS
For attitude and orbit control, the spacecraft should be able to provide torques and forces. Since the goal of
this master thesis is to study the possible advantages or disadvantages when expressing the state variables
with dual quaternions, it does not really matter how these torques or forces are provided. OSIRIS-REx space-
craft uses thrusters or reactions wheels for attitude control depending on the phase of the mission and the
requirements. For the sake of simplicity, it will be assumed that the attitude control in all the simulations will
be provided with reaction wheels. These reaction wheels will be able to create torques in all three body axis of
the satellite and will have a maximum torque of 0.2 Nm per axis. There will be no limitation on time providing
maximum torque.
For orbit control, it will be assumed that the spacecraft has six thrusters (one in each face) aligned with
the center of mass of the satellite to make things easier. In that way, it should be able to create a force in any
direction without creating any torque. The maximum thrust force allowed by these engines will be 20 N in all
six directions without any limitation on how much time they can be ﬁring.
This conﬁguration will allow the controllers to create torques and forces so that the spacecraft can follow
the desired trajectories. The reason why there is a maximum torque and force in each direction is because
in this way, fair comparisons can be made between controllers. If there were no maximum limitations, the
controllers would simply command almost inﬁnite torque/force so that the settling time would be as small
as possible. Allowing for maximums not only brings more reality but it also solves this problem. These maxi-
mums have been selected by looking into actuators performances of OSIRIS-REx reaction wheels and engine
thrusters and taking into account other past missions heritage.
2.4. MISSION AND SYSTEMS REQUIREMENTS
In this master thesis, controllers should be able to bring the spacecraft down to the reference trajectory meet-
ing some requirements. If these requirements are met, the reference trajectory can be considered to be suc-
cessfully achieved. Having said that, some mission and systems requirements can be deﬁned.
MISSION REQUIREMENTS
• MR01 The spacecraft shall land on the surface of Bennu following the deﬁned reference trajectory.

16
2.4. MISSION AND SYSTEMS REQUIREMENTS
– MR01.1 The position error with respect to the landing trajectory shall not exceed 0.01 m in absolute
value for each 3 axes.
– MR01.2 The velocity error with respect to the landing trajectory shall not exceed 0.01 cm/s in absolute
value for each 3 axes.
– MR01.3 The pointing attitude error with respect to the landing trajectory shall not exceed 0.01o in
absolute value.
– MR01.4 The angular velocity error with respect to the landing trajectory shall not exceed 0.0001o/s in
absolute value for each 3 axes.
– MR01.5 The previous stability conditions shall be met before the settling time of 1 minute.
• MR02 The spacecraft shall hover about Bennu in the deﬁned spot.
– MR02.1 The position error with respect to the hovering reference spot shall not exceed 0.01 m in
absolute value for each 3 axes.
– MR02.2 The velocity error with respect to the hovering reference velocity shall not exceed 0.01 cm/s
in absolute value for each 3 axes.
– MR02.3 The pointing attitude error with respect to the hovering reference attitude shall not exceed
0.01o in absolute value.
– MR02.4 The angular velocity error with respect to the hovering reference angular velocity shall not
exceed 0.0001o/s in absolute value for each 3 axes.
– MR02.5 The previous stability conditions shall be met before the settling time of 1 minute.
• MR03 The spacecraft shall orbit Bennu following the deﬁned reference trajectory.
– MR03.1 The pointing attitude error with respect to the orbiting trajectory shall not exceed 0.01o in
absolute value.
– MR03.2 The angular velocity error with respect to the orbiting trajectory shall not exceed 0.0001o/s in
absolute value for each 3 axes.
– MR03.5 The previous stability conditions shall be met before the settling time of 10 minutes.
SYSTEMS REQUIREMENTS
• SR01 Position actuators shall be able to provide forces at all times with a maximum nominal force of 20 N
in each direction.
• SR02 Position actuators shall not generate a net torque when producing forces.
• SR02 Attitude actuators shall be able to provide torques at all times with a maximum nominal torque of 0.2
N·m in each direction.
• SR01 Attitude actuator shall not generate a net force when executing torque commands.
• SR02 The spacecraft shall be able to withstand all conditions suffered during close-proximity operations.

3
QUATERNIONS AND DUAL QUATERNIONS
The aim of this chapter is to introduce and deﬁne the fundamentals of quaternions and dual quaternions.
Apart from that, it also explains how quaternions can represent the attitude of spacecraft and how dual
quaternions can simultaneously represents both the attitude and the position of them. First, some funda-
mentals of quaternions are provided in Section 3.1 and then, the way in which they can be used to represent
the orientation of a rigid body is explained in Subsection 3.1.1. Second, dual quaternions are presented. They
are not easy to understand and it can represent a challenge for the reader to follow all the derivations in this
master thesis. For this reason, a proper introduction to them and some fundamentals are presented in Sec-
tion 3.2, with some visual interpretations. The way in which dual quaternions can be used to represent both
the position and orientation of spacecraft is deﬁned in Subsection 3.2.1. Finally, some coordinate transfor-
mations with dual quaternions are deﬁned in Subsection 3.2.2.
3.1. QUATERNIONS
As explained in [Han et al., 2008], quaternions can be understood as an extension of complex numbers. A
quaternion can be deﬁned as
q = q0 + q1i + q2 j + q3k
(3.1)
where q0,q1,q2,q3 ∈ℜ. i, j,k satisfy i 2 = j 2 = k2 = −1 and i = jk = −k j, j = ki = −ik and k = i j = −ji.
However, they can also be represented as an ordered pair q = (q0, ¯q); where q0 is called the scalar part and
¯q = [q1;q2;q3] ∈ℜ3 is called the vector part. The set of quaternions are denoted by H and some of their basic
operations are summarized here.
Addition:
a +b = (a0 +b0, ¯a + ¯b) ∈H
(3.2)
17

18
3.1. QUATERNIONS
Multiplication by a scalar:
λa = (λa0,λ¯a) ∈H
(3.3)
Multiplication:
ab = (a0b0 −¯a · ¯b,a0 ¯b +b0 ¯a + ¯a × ¯b) ∈H
(3.4)
Conjugation:
a∗= (a0,−¯a) ∈H
(3.5)
Dot product:
a ·b = 1
2(a∗b +b∗a) = (a0b0 + ¯a · ¯b, ¯0) ∈H
(3.6)
Cross product:
a ×b = 1
2(ab −b∗a∗) = (0,b0 ¯a + a0 ¯b + ¯a × ¯b) ∈H
(3.7)
Norm:
∥a ∥2= aa∗= (a2
0 + ¯a · ¯a, ¯0) ∈Hd
(3.8)
It is important to remark that the quaternion multiplication is not commutative.
3.1.1. ATTITUDE REPRESENTATION
Quaternions are sometimes also referred to as the four Euler parameters, and they can provide a redundant,
nonsingular attitude description. They are well suited to describe arbitrary, larger rotations. A unit quater-
nion q can be deﬁned in terms of principal rotation elements, to represent the attitude of a solid rigid, as
described by Schaub and Junkins [2009].
q0 = cos(Φ/2)
(3.9)
q1 = e1 sin(Φ/2)
(3.10)
q2 = e2 sin(Φ/2)
(3.11)
q3 = e3 sin(Φ/2)
(3.12)
where Φ is the rotated angle and e1, e2 and e3 are the component of the unit vector along which the rotated
angle is applied. It is evident since e2
1 +e3
2 +e2
3 = 1, that the qi satisfy the holonomic constraint
q2
0 + q2
1 + q2
2 + q2
3 = 1
(3.13)
It is important to mention that this constraint geometrically describes a four dimensional unit sphere. Any
rotation described through a quaternion has a trajectory on the surface of this constraint sphere. Given a
certain attitude, there are actually two sets of Euler parameters that will describe the same orientation. This
is due to the non-uniqueness of the principal rotation elements themselves. Since any point on the unit
constraint sphere surface represents a speciﬁc orientation, the anti-pole to that point represents the exact
same orientation. The difference between the two attitude descriptions is that one speciﬁes the orientation
through the shortest single axis rotation, and the other through the longest.

3. QUATERNIONS AND DUAL QUATERNIONS
19
Using the trigonometric identities
sinΦ = 2sin(Φ/2)cos(Φ/2)
cosΦ = 2cos2(Φ/2)−1
The DCM can be written in terms of quaternions as
C =


q2
0 + q2
1 −q2
2 −q2
3
2(q1q2 + q0q3)
2(q1q3 −q0q2)
2(q1q2 −q0q3)
q2
0 −q2
1 + q2
2 −q2
3
2(q2q3 −q0q1)
2(q1q3 + q0q2)
2(q2q3 −q0q1)
q2
0 −q2
1 −q2
2 + q2
3


(3.14)
It is evident that most general angular motion of a reference frame generates two arcs on the four dimensional
unit sphere (the geodesic arcs generated by q(t) and −q(t)). This elegant description is universally non-
singular and is unique to within the sign ±q(t). In this thesis the positive sign will always be selected. The
inverse transformation from C to quaternions can be found following the algorithm developed by Sheppard
[Schaub and Junkins, 2009]. First, the four q2
i terms are computed:
q2
0 = 1
4(1+traceC)
(3.15)
q2
1 = 1
4(1+2C11 −traceC)
(3.16)
q2
2 = 1
4(1+2C22 −traceC)
(3.17)
q2
3 = 1
4(1+2C33 −traceC)
(3.18)
Then, the square root of the largest q2
i found from Equation (3.15) to (3.18) has to be taken and the sign of qi
is chosen to be positive to avoid singularities. The other qi are found by dividing the appropriate three of the
following six in Equation (3.19) by the chosen largest qi coordinate:
q0q1 = (C23 −C32)/4
q0q2 = (C31 −C13)/4
q0q3 = (C12 −C21)/4
q2q3 = (C23 −C32)/4
q3q1 = (C31 −C13)/4
q1q2 = (C12 −C21)/4
(3.19)
A very important property of the quaternions is the manner in which they allow two sequential rotations to
be combined into one overall composite rotation. Let the quaternion q′ describe the ﬁrst, q′′ the second, and
q the composite rotation. It is then clear that
F N(q) = FB(q′′)BN(q′)
(3.20)
Introducing Equation (3.14) into Equation (3.20) and equating corresponding elements leads to the following
elegant transformation that bilinearly combines q′ and q′′ into q:

20
3.2. DUAL QUATERNIONS


q0
q1
q2
q3


=


q′′
0
−q′′
1
−q′′
2
−q′′
3
q′′
1
q′′
0
q′′
3
−q′′
2
q′′
2
−q′′
3
q′′
0
−q′′
2
q′′
3
q′′
2
−q′′
1
q′′
0




q′
0
q′
1
q′
2
q′
3


(3.21)
By transmutation of Equation (3.21), an alternate expression q = G(q′)q′′ is found


q0
q1
q2
q3


=


q′
0
−q′
1
−q′
2
−q′
3
q′
1
q′
0
q′
3
−q′
2
q′
2
−q′
3
q′
0
−q′
2
q′
3
q′
2
−q′
1
q′
0




q′′
0
q′′
1
q′′
2
q′′
3


(3.22)
where components of the matrix G(q′) are given in Equation (3.22). Note the useful identity
£
G(q)
¤T q =


1
0
0
0


(3.23)
By inspection, it is evident that the 4x4 matrices in Equation (3.21) and (3.22) are orthogonal. These transfor-
mations provide a simple, non singular, and bi-linear method to combine two successive rotations described
through quaternions. For other attitude parameters such as the Euler angles, this same composite transfor-
mation would yield a very complicated, transcendental expression.
3.2. DUAL QUATERNIONS
Dual quaternions were ﬁrst introduced by Clifford [1871] and they are built on and are an extension of clas-
sical quaternions. Dual quaternions are closely related to Chasles Theorem, which states that the general
displacement of a rigid body can be represented by a rotation about an axis (called the screw axis) and a
translation along that axis, creating a screw-like motion [Murray et al., 1994]. This allows to visualize dual
quaternions in a similar way a quaternion can be visualized (Euler theorem). The geometry of this process
can be depicted in Figure 3.1. The initial pose of a certain spacecraft could be the one on the right of Figure
3.1, and its ﬁnal position could be the one on the left. Then, the transformation from the initial to the ﬁnal
pose is described as a simultaneous translation and rotation along the line l. The spacecraft is rotated by an
angle Φ and translated a distance d. The ﬁnal frame is displaced by a vector R (expressed in the initial frame)
with respect to the initial frame.
However, to better understand dual quaternions, it is also needed to understand dual numbers and dual
algebra. In linear algebra, the dual numbers extend the real numbers by adjoining one new element ϵ with
the property ϵ2 = 0 (ϵ is nilpotent). The collection of dual numbers forms a particular two-dimensional com-
mutative unital associative algebra over the real numbers. The dual numbers can also be thought of as the
exterior algebra of a one-dimensional vector space. Since some operations and properties of dual numbers

3. QUATERNIONS AND DUAL QUATERNIONS
21
Figure 3.1: Visualization of a screw transformation [Razgus et al., 2017a]
(and speciﬁcally dual quaternions) might not be familiar to the reader, this chapter deﬁnes the basis and
some operations and properties that will be used in this thesis. It is meant to be a familiarizing chapter.
As explained in [Filipe and Tsiotras, 2014], a dual quaternion is a dual number deﬁned as
ˆq = qr +ϵqd
(3.24)
where ϵ is the dual unit deﬁned by
ϵ2 = 0
ϵ ̸= 0
(3.25)
The quaternions qr ,qd ∈H are called the "real part" and the "dual part" of the dual quaternion, respectively.
It is important to notice that dual quaternions are represented in bold and with a hat. This distinguish them
from normal quaternions and vectors.
Dual vector quaternions and dual scalar quaternions are dual quaternions formed from vector quater-
nions (i.e., qr ,qd ∈H v) and scalar quaternions (i.e., qr ,qd ∈H s), respectively. The set of dual quaternions,
dual scalar quaternion, dual vector quaternions, and dual scalar quaternions with zero dual part will be re-
spectively denoted by
Hd =
©
ˆq : ˆq = qr +ϵqd,qr ,qd ∈H
ª
H s
d =
©
ˆq : ˆq = qr +ϵqd,qr ,qd ∈H sª
H v
d =
©
ˆq : ˆq = qr +ϵqd,qr ,qd ∈H vª
H r
d =
©
ˆq : ˆq = qr +ϵ0,qr ∈H sª
Some basic operations with dual quaternions, which will be used in this research, are deﬁned as follows
[Filipe and Tsiotras, 2014]. ˆa, ˆb ∈Hd and λ ∈ℜ. It is important to familiarize with these operations because
they will be often used in this thesis work.
Addition:
ˆa + ˆb = (ar +br )+ϵ(ad +bd) ∈Hd
(3.26)
Multiplication by a scalar:
λˆa = (λar )+ϵ(λad) ∈Hd
(3.27)

22
3.2. DUAL QUATERNIONS
Multiplication:
ˆa ˆb = (ar br )+ϵ(ar bd + adbr ) ∈Hd
(3.28)
Conjugation:
ˆa∗= a∗
r +ϵa∗
d ∈Hd
(3.29)
Swap:
ˆas = ad +ϵar ∈Hd
(3.30)
Dot product:
ˆa · ˆb = 1
2(ˆa∗ˆb + ˆb
∗ˆa) = 1
2(ˆa ˆb
∗+ ˆb ˆa∗)
= ar ·br +ϵ(ad ·br + ar ·bd) ∈H s
d
(3.31)
Cross product:
ˆa × ˆb = 1
2(ˆa ˆb −ˆb
∗ˆa∗) = ar ×br +ϵ(ad ×br + ar ×bd) ∈H v
d
(3.32)
Circle product:
ˆa ◦ˆb = ˆar ˆbr + ˆad ˆbd ∈H v
d
(3.33)
Dual norm:
∥ˆa ∥2
d= ˆa ˆa∗= ˆa∗ˆa = ˆa · ˆa = (ar · ar )+ϵ(2ar · ad) ∈H s
d
(3.34)
Scalar norm:
sc(ˆa) = sc(ar)+ϵ sc(ad) ∈H s
d
(3.35)
Vector part:
vec(ˆa) = vec(ar)+ϵ vec(ad) ∈H v
d
(3.36)
It is important to notice that the dual quaternion multiplication is not commutative. Another deﬁnition com-
monly used is that the dual quaternions 1+ϵ0 and 0+ϵ0 are denoted by ˆ1 and ˆ0, respectively.
Because the dot product and dual norm of dual quaternions yield, in general, a dual number, the norm of
a dual quaternion will be deﬁned as
∥ˆa ∥2= ˆa ◦ˆa ∈H r
d
(3.37)
It might be important to notice that the dual quaternion circle product is commutative. The multiplication
of a matrix M ∈ℜ8x8 with a dual quaternion ˆq ∈Hd is deﬁned as
M ⋆ˆq = (M11 ∗qr + M12 ∗qd)+ϵ(M21 ∗qr + M22 ∗qd) ∈Hd
(3.38)
where
M =

M11
M12
M21
M22

,
M11,M12,M21,M22 ∈ℜ4x4
This deﬁnition is analogous to the multiplication of an 8x8 matrix with an eight-dimensional vector. It can be
shown that the following properties follow from the previous deﬁnitions [Gui and Vukovich, 2015]
ˆa ◦(ˆbˆc) = ˆb
s ◦(ˆas ˆc∗) = ˆcs ◦(ˆb
∗ˆas) ∈ℜ
ˆa, ˆb, ˆc ∈Hd
(3.39)
ˆa ◦(ˆb × ˆc) = ˆb
s ◦(ˆc × ˆas) = ˆcs ◦(ˆss × ˆb) ∈ℜ,
ˆa, ˆb, ˆc ∈H v
d
(3.40)

3. QUATERNIONS AND DUAL QUATERNIONS
23
ˆa × ˆa = ˆ0,
ˆa ∈H v
d
(3.41)
ˆa × ˆb = −ˆb × ˆa,
ˆa, ˆb ∈H v
d
(3.42)
ˆa ◦ˆb
s = ˆa ◦ˆb,
ˆa, ˆb ∈Hd
(3.43)
∥ˆas ∥=∥ˆa ∥,
ˆa ∈Hd
(3.44)
∥ˆa∗∥=∥ˆa ∥,
ˆa ∈Hd
(3.45)
(M ⋆ˆa)◦ˆb = ˆa ◦(MT ⋆ˆb),
ˆa, ˆb ∈Hd,
M ∈ℜ8x8
(3.46)
|ˆa ◦ˆb| ≤∥ˆa ∥∥ˆb ∥,
ˆa ˆb ∈Hd
(3.47)
∥ˆa ˆb ∥≤
p
3/2 ∥ˆa ∥∥ˆb ∥,
ˆa, ˆb ∈Hd
(3.48)
Finally, the L∞norm of a function ˆu : [0,∞) →Hd is deﬁned as
∥ˆu ∥∞= supt≥0 ∥ˆu(t) ∥
(3.49)
Moreover, ˆu ∈L∞if and only if ∥ˆu ∥∞< ∞.
3.2.1. ATTITUDE AND POSITION REPRESENTATION
The orientation and position of a body frame with respect to the inertial frame can be represented by a unit
quaternion qB/I ∈H u and by a translation vector ¯r B/I ∈ℜ3 respectively. Alternatively, it can also be repre-
sented more compactly by the unit dual quaternion
ˆqB/I = qB/I +ϵ1
2r I
B/I qB/I = qB/I +ϵ1
2 qB/Ir B
B/I
(3.50)
where r Y /Z = (¯r X
Y /Z ,0) and ¯r X
Y /Z = [xX
Y /Z
y X
Y /Z
zX
Y /Z ]T is the translation vector from the origin of the Z
frame to the origin of the Y frame expressed in the X frame. It is important to notice that ˆqB/I is a unit dual
quaternion, because it belongs to the set H u
d =
©
ˆq ∈Hd : ˆq · ˆq = ˆq ˆq∗= ˆq∗ˆq =∥ˆq ∥d= ˆ1
ª
.
Moreover, the velocity and the angular velocity (i.e., dual velocity) of a body frame Y with respect to a Z
frame expressed in a X frame can also be represented by a unit dual quaternion in a very compact way.
ˆωX
Y /Z = ωX
Y /Z +ϵ(v X
Y /Z +ωX
Y /Z ×r X
X /Y ),
v X
Y /Z = (¯v X
Y /Z ,0)
where ωX
Y /Z is the angular velocity of the body frame Y with respect to Z expressed in the body frame X and
¯v X
Y /Z is the linear velocity of the Y frame with respect to the Z frame expressed in the X frame [Filipe and
Tsiotras, 2014].
3.2.2. COORDINATE TRANSFORMATIONS
As the reader will see, there are several coordinate transformations in this master thesis, necessary to un-
derstand all the derivations. In the case of dual quaternions, coordinate transformations are carried out in a
different way than normal vectors. For this reason, if one desired to express the pose of the spacecraft in any
other different reference frame, he or she will have to apply the following transformations.

24
3.2. DUAL QUATERNIONS
Dual quaternion pose coordinate transformation:
ˆqB/D = ˆq∗
D/I ˆqB/I
(3.51)
Dual quaternion velocity coordinate transformation:
ˆωB
B/D = ˆωB
B/I −ˆωB
D/I
(3.52)
where ˆωB
D/I is the dual quaternion velocity of D with respect to I expressed in the B frame. To expressed in
another frame, one has to apply the following transformation
ˆωB
D/I = ˆq∗
B/D ˆωB
D/I ˆqB/D
(3.53)

4
FLIGHT DYNAMICS AND SPACE
ENVIRONMENT
This chapter aims at deﬁning the ﬂight dynamics involved in the simulations that will be carried out in this
thesis work and how the space environment will be modeled. First of all however, the three reference frames
that will be used are described in Section 4.1. Then, equations of motions for the dual quaternion approach
and the classical one are derived in Section 4.2. Finally, all different forces that will determine the trajectory
of the spacecraft are modeled in Section 4.3. The torques are modeled in Section 4.4.
4.1. REFERENCE FRAMES
In this thesis work, three different reference frames will be used: the Asteroid-Centered Inertial (ACI) ref-
erence frame, the Asteroid-Centered Asteroid-Fixed (ACAF) reference frame and the spacecraft body ﬁxed
frame. The ﬁrst one will be used to express all variables for integration of the equations of motion. It is always
easier to work in an inertial reference frame. The second one (ACAF) will be used for representing the gravity
ﬁeld of Bennu. In this case, the gravity ﬁeld will move with the asteroid itself; therefore, it is desirable to ex-
press it in a reference frame that moves with it. Finally, the last one (body-ﬁxed frame) will be used to express
all the relative errors and attitude orientations of the spacecraft.
4.1.1. ASTEROID-CENTERED INERTIAL
The ACI reference frame has its origin in the center of mass of the asteroid and its set of Cartesian axes point in
the same direction as the International Celestial Reference Frame (ICRF). The ACI frame is not a ’true’ inertial
reference frame because its origin has an acceleration about the Sun. However, this acceleration is negligible
compared to the accelerations acting on the satellite problem. For that reason, it is reasonable to accept it as
25

26
4.2. EQUATIONS OF MOTION
(a) ACI reference frame (black) and ACAF reference frame
(blue)
(b) Representation of body-ﬁxed frame [Markley and
Crassidis, 2014]
an inertial reference frame. Figure 4.1a shows a sketch in black. As can be seen, this inertial reference frame
does not rotate with the asteroid and remains ﬁxed in space.
4.1.2. SPACECRAFT BODY-FIXED
Another important reference frame for this research is the spacecraft body-ﬁxed frame, deﬁned by an origin
at the center of mass of the spacecraft and three Cartesian axes that move together with it. For this work, the
set of axes are chosen to be the three principal axes of inertia of the spacecraft. Figure 4.1b shows a sketch
of this reference frame. As can be seen, rotations about the x axis will be called rolling; rotations about the y
axis will be called pitching; and rotation about the z axis will be called yawing.
4.1.3. ASTEROID-CENTERED ASTEROID-FIXED
The ACAF reference frame is similar to the body frame but instead of having the origin at the center of mass
of the spacecraft it has its origin at the center of mass of the target asteroid. Then a set of three Cartesian axes
rotate together with the asteroid. They are the three principal axes of inertia of the asteroid. It is important
to mention that this reference frame is completely non inertial due to the rotation of the asteroid and its
accelerated center of mass. Figure 4.1a shows a sketch in blue. The discontinuous blue lines represent the
rotation of these axes with respect to the inertial reference axes (represented in black). As can be seen, they
rotate together with the principal axes of inertia of the asteroid.
4.2. EQUATIONS OF MOTION
The equations of motion to be solved in this work are stated in this section. First, the classical equations of
motions will be deﬁned. There are four classical equations of motion. Two for the translational motion and
two for the rotational motion expressing the rate of change of every state variable. Second, the equations of
motion expressed in the dual quaternion representation will be presented. In this case however, there are

4. FLIGHT DYNAMICS AND SPACE ENVIRONMENT
27
only two equations of motion. One for the rate of change of the dual quaternion pose and another one for the
dual velocity. All the equations are expressed with respect to the ACI reference frame, because it is an inertial
reference frame, thus, the equations of motion are simpler, easier and faster to integrate numerically.
4.2.1. CLASSICAL FORMULATION
In the classical formulation, position, velocity and angular velocity are represented by three-dimensional
vectors. The attitude is represented with a unit quaternion. The derivative of the position in an inertial frame
can be expressed as in Equation (4.1). As can be seen, it is simply the velocity of the spacecraft with respect
to the inertial frame.
˙r I
BI = v I
BI
(4.1)
where r I
BI is the position of the spacecraft with respect to the inertial frame, expressed in the inertial frame
and v I
BI is the same but with the velocity. Applying the second Newton’s law, the derivative of the velocity
with respect to time can be deﬁned as
˙v I
BI = aI
BI =
F I
B
M
(4.2)
where aI
BI is the acceleration of the spacecraft with respect to the inertial reference frame expressed in this
same inertial reference frame. This acceleration is dictated by the forces acting on the spacecraft over time.
For this reason, F I
B are the external forces acting on the spacecraft expressed in the ACI frame. M is the mass
of the spacecraft. It is very important that all variables are expressed in the same reference frame. Next, the
derivative of the attitude expressed with quaternions with respect to time can be written
˙qBI = 1
2B(qBI )ωB
BI
(4.3)
where qBI represents the quaternion rotation of the spacecraft with respect to the inertial axes and ωB
BI is the
angular velocity of the spacecraft with respect to ACI expressed in body frame. Finally, B(qBD) is just
B(q) =


−q1
−q2
−q3
q0
−q3
q2
q3
q0
−q1
−q2
q1
q0


(4.4)
Last but not least, the time derivative of the angular velocity is expressed in Equation (4.5). This equation is
also known as the rotational Euler equation of motion, which dictates how torques affect the angular velocity
of bodies, and thus, their orientation.
˙ωB
B/I = (I B)−1 £
τB −ωB
B/I ×(I BωB
BI )
¤
(4.5)
where I B is the inertia tensor of the spacecraft expressed in the body-ﬁxed frame, τB are the external torques
acting on the spacecraft over time expressed in the body-ﬁxed frame and ωB
B/I is the angular velocity of the
spacecraft with respect to the inertial frame expressed in the body frame [Markley and Crassidis, 2014]. It is
important to mention that this equation of motion is only valid for rigid bodies. This means that the satellite
has to be assumed with a constant shape and without allowing deformations.

28
4.3. FORCE MODELS
4.2.2. DUAL QUATERNION FORMULATION
In contrast with the classical formulation, the position and the attitude of the spacecraft in the dual quater-
nion formulation are expressed with the same variable; an eight-dimensional dual quaternion. The same
happens with the linear and angular velocities. From now on, they will be addressed as dual pose and dual
velocity of the spacecraft. The time derivative of the dual pose is
˙ˆqB/I = 1
2 ˆqB/I ˆωB
B/I
(4.6)
where ˆqB/I is the dual pose of the spacecraft and represents both the attitude and the position at the same
time. It is expressed with respect to the ACI and expressed in the body-ﬁxed frame. ˆωB
B/I is the so called dual
velocity and it represents the linear and angular velocities of the spacecraft with respect to a inertial frame
and expressed in the body-ﬁxed frame. The derivative of the this dual velocity with respect to time is
( ˙ˆωB
B/I)s = (MB)−1 ⋆
h
ˆf
B −ˆωB
B/I ×
©
MB ⋆( ˆωB
B/I)sªi
(4.7)
where MB is the dual inertia matrix representing both the mass and the inertia of the spacecraft, f B is the
external dual force expressed in body frame, which represents the torques and forces acting on the spacecraft,
expressed in the body ﬁxed-frame. As can be seen, the equations of motion in the dual quaternion form (4.6)
(4.7) are identical to the rotational ones in the classical approach expressed in quaternions (4.3) (4.5). It is
very important to bear in mind all the dual quaternion operations deﬁned in Chapter 3, such as the swap
operator or the matrix multiplication with a dual quaternion. Also, it might be worth mentioning that only
two equations of motion are needed with dual quaternions to express exactly the same that the classical
method with four. Everything is more compact with dual quaternions.
4.3. FORCE MODELS
As can be seen from the equations of motion, the forces acting on the spacecraft will determine the motion
of the spacecraft. This section describes the forces that will interact with the spacecraft and how they can
be modeled. In real scenarios, many different forces have to be taken into account for precise orbit determi-
nation, however, for this thesis work, only the most relevant ones have been modeled. Figure 4.2 shows the
different forces (in km/s2) acting on the real OSIRIS-REx mission during close proximity operation phases. As
can be seen, the most relevant ones during proximity operations are the main body gravity and the SRP. Then,
depending on the phase of the mission, the third body effects from the Sun and the infrared forces come into
play. The ﬁrst ones are two orders of magnitude, or sometimes even up to four, larger than the second ones.
The grey line represents the gravity forces due to the oblateness of Bennu, and the pink one represents the
infrared forces generated due the different temperature parts of the spacecraft. Finally, the red line represents
the albedo forces due to the radiation reﬂected by Bennu and impacting on the spacecraft. In this thesis, only
the gravitational, the SRP and the Sun third body forces will be modeled. Since no thermal analysis will be
carried out, it is out of the scope to model the infrared radiation. The same applies with the albedo forces,
they are out of the scope of this master thesis. However, this is still a reasonable modeling because these
forces are from 4 to 6 orders of magnitude smaller than the modeled ones.

4. FLIGHT DYNAMICS AND SPACE ENVIRONMENT
29
Figure 4.2: Different forces acting on OSIRIS-REx spacecraft on different phases. [Everett et al., 2017]
4.3.1. GRAVITY FORCE
Gravity representations may be split into four categories [Jones, 2010]: a series expansion of orthogonal func-
tions, a linear combination of potential functions, linear combinations of functions deﬁned via splines, ker-
nels or ﬁnite elements, and collocation methods using minimum norm or least squares. The latter one most
accurately represent local variations in the gravity ﬁeld, but the model is not optimal for global variations.
The combination of nodes deﬁne the gravity ﬁeld, or some derived quantity, as a collection of nodes with
interpolation performed between them for evaluation of the gravity ﬁeld. Typically, these models provide fast
evaluation or estimation capabilities [Jones, 2010]. Other options are to use B-splines deﬁned on the surface
of a sphere, polynomials on subdivisions of the surface of the cube or B-splines on the surface of a cube. The
last one is the cubed-sphere model, which combines the beneﬁts of the ﬁrst two. Their killing drawbacks are
the computational effort required and the amount of memory necessary to store all the coefﬁcients.
Models using a linear combinations of potentials usually assume a collection of point masses, i.e. the
sum of individual gravity potentials yields the total potential of a system. However, other forms exists. For
example, Werner and Scheeres [1997] present a model for evaluating the gravity ﬁeld of any general polyhe-
dron. An irregularly shaped body, such as an asteroid, may be represented by a polyhedron to some precision.
Formulating the gravity potential as a volume integral of differential masses, the gravity ﬁeld may be repre-
sented by a linear combination of surface integrals on each face and edge of the polyhedron. This model
satisﬁes Laplace’s equation at any point outside of the body, with accuracy limited by an assumption of con-
stant density and the accuracy of the shape representation. Instead of a single polyhedron, Scheeres et al.
[2000] deﬁned the body as a collection of polyhedra, allowing for each polyhedron to have a different, but
individually uniform, density. Unfortunately, the polyhedron model is computational intensive [Jones, 2010].
Its major drawback is the computational effort needed to add up all these potentials functions.

30
4.3. FORCE MODELS
Finally, the spherical harmonic model represents the gravity ﬁeld as a linear combination of an inﬁnite
number of orthogonal functions on the sphere. These functions use the associated Legendre functions of the
ﬁrst kind for a given degree and order. The frequency of each function increases with degree, which implies a
smaller wavelength. These shorter wavelengths correspond to smaller areas on the sphere. Thus, high-degree
models imply increased spatial resolution of the model. This method can guarantee to converge to the correct
gravity ﬁeld outside of the circumscribing sphere. They can be truncated at ﬁnite order to size the accuracy
in representation with the accuracy needed in modeling, and a rich literature exists for the computation and
evaluation of such expansions [Jones, 2010]. They allow to compute an accurate enough gravity ﬁeld with a
very cheap computational price and time. For these reasons and for the sake of simplicity, the gravity force in
this master thesis will be modeled using spherical harmonics.
However, the spherical harmonics have some drawbacks and limitations to bear in mind. The major one
is that the same form of the exterior harmonic expansion is no longer guaranteed to converge inside the
circumscribing sphere, and indeed often diverges [Werner and Scheeres, 1997]. In the case of Bennu, since it
is a very rounded body, the circumscribing sphere is very close to the surface and has no major effects on the
solution. However, for other asteroids, this would not be the case. Takahashi [2013] compared the gravity ﬁeld
computed with a polyhedron model and with spherical harmonics for the case of Bennu in his PhD thesis.
One of his results was that the surface accelerations errors (in %) of the spherical harmonic method compared
to the polyhedron model are 0.74 in average, with a maximum of 10.95 using a 4 degree model. This level of
accuracy is good enough for this master thesis. Another drawback is that the harmonic expansion yields no
information about whether a ﬁeld point is outside or inside the body. In a spacecraft simulation, a separate
algorithm must be used to detect this important geometric condition.
The gravity force can then be modeled with an spherical harmonic approximation using Kaula normalized
coefﬁcients. The gravitational potential function can be written as [Gottlieb, 1993]
U = µ
r +
∞
X
n=0
nX
m=0
µ
r
³αe
r
´n
Pnm(ϵ)
¡
Cn,m cos(mλ)+Snm sin(mλ)
¢
(4.8)
where µ is the gravitational parameter, αe is the reference equatorial radius and r is the magnitude of the
position vector x. Pnm are the associated Legendre functions with its Legendre polynomials. Also, ϵ is the
latitude of the position vector and λ its longitude. The Cnm and Snm are the unnormalized cosine and sine
gravity coefﬁcients that results from the mass distribution of the asteroid. The use of normalized coefﬁcients
is justiﬁed because they do not require the computation of terms in the order of magnitude (n +m)!.
Then, the gravitational acceleration vector g can be calculated as minus the ﬁrst partial derivative of U
with respect to the asteroid-ﬁxed position vector x (Equation 4.9). Thus, the rotation of Bennu will have to be
taken into account.
g = ∂U
∂x
(4.9)
The normalized spherical harmonics coefﬁcients of constant density for Bennu that will be used in the
simulations are listed in Table 4.1. The frame is centered at the center of the asteroid and aligned with its

4. FLIGHT DYNAMICS AND SPACE ENVIRONMENT
31
Table 4.1: Normalized spherical harmonic coefﬁcients of constant density (1260 kg/m3) for Bennu [McMahon et al., 2018]
Degree (n)
Order (m)
C Coeff (Cnm)
S Coeff (Snm)
0
0
1
-
1
0
0
-
1
1
0
0
2
0
-0.0175112
-
2
1
-0.0000023
0
2
2
0.0058194
-0.0000197
3
0
0.0056102
-
3
1
0.0015471
0.0015368
3
2
0.0001115
0.0000635
3
3
0.0026660
-0.0009332
4
0
0.0102498
-
4
1
0.0004360
0.0018562
4
2
-0.0021919
0.0007749
4
3
-0.0010761
0.0001024
4
4
0.0021356
0.0030684
5
0
-0.0013767
-
5
1
0.0005161
-0.0000786
5
2
0.0005464
-0.0012414
5
3
0.0004250
0.0002269
5
4
0.0013801
-0.0005038
5
5
0.0004869
0.0005241
6
0
-0.0024871
-
6
1
0.0011514
-0.0000084
6
2
0.0007281
-0.0002936
6
3
0.0013361
-0.0009706
6
4
-0.0005090
-0.0006485
6
5
0.0001236
-0.0005993
6
6
0.0007195
-0.0000500
principal moments of inertia. The coefﬁcients are Kaula normalized and are computed for a reference radius
of 245.887 m, which is the radius of the sphere with equivalent volume as the shape model.
It is important to always bear in mind the limitations and consequences of each model. In this case, the
reason for stopping at degree and order 6 is because no more data was available. As has been explained,
all the information from Bennu comes from ground-based measurements. Bennu has not been visited yet.
And these measurements cannot give more resolution of the gravity ﬁeld. The consequences of this fact are
a more central-body gravity ﬁeld without abrupt changes in gravity. Finally, as can be seen in Table 4.1, the
assumption of constant density, combined with the rounded shape model of Bennu, result in high order
coefﬁcient of the table very small. This as well, makes the gravity ﬁeld more uniform.
4.3.2. SOLAR RADIATION FORCE
A variety of models has been used to study solar radiation for various applications. The simplest model, which
has been used for most analytical studies to date, states that the force caused by solar radiation pressure acts
along the object-Sun line, directly away from the Sun. In the spacecraft community, this model is often re-

32
4.3. FORCE MODELS
ferred to as the cannonball model, because this is how solar radiation would affect a cannonball-like spherical
object with a uniform optical properties in space. This model is used as the baseline for many missions and
has also been applied to the debris problem [McMahon, 2011]. One of the advantages for the cannonball
model is that its simplicity allows it to be expressed as a potential disturbing function, which allows easy
analytical investigation of the perturbative effects through the use of Lagrange’s planetary equations.
Spacecraft missions often desire much higher ﬁdelity in their solar radiation pressure model than the can-
nonball model. The next step is still a simple model characterized by a small number of facets to capture the
general geometry of the spacecraft. Many spacecraft can be modeled as a "box-wing" model. With a small
number of facets, it is still tractable to approach the problem analytically. However, the solar radiation pres-
sure force is computed per fact for each Sun position as needed, which requires a numerical implementation.
As the models of the spacecraft become more and more detailed, they are more and more reliant on numerical
methods and are referred to as micro models. These micro models can be extremely detailed, approaching
full CAD models with the shape of the spacecraft reproduced and each component being assigned its own
optical properties. The effects of solar radiation pressure for such high ﬁdelity models is determined through
extremely detailed ray-tracing methods which can include all self-shadowing and secondary incidence effects
[McMahon, 2011].
Since the purpose of this study is to focus on the control part using dual quaternions and not to highly
represent the Solar Radiation Pressure, a simple "box-wing" model will be use to compute the SRP forces.
This means that the SRP forces will depend on the actual orientation of the spacecraft, making even stronger
coupling between translational and rotational motions. The acceleration due to the SRP can then be modeled
as
aSRP = Cr
A(q)
M
PΦ
R2 ˆD
(4.10)
where Cr is the coefﬁcient of reﬂectivity, M is the mass of the spacecraft, A(q) is the wet area, which depends
on the orientation of the spacecraft and needs to be computed every time step. PΦ is the solar-radiation
pressure at the Sun’s surface (1·1014 kg·km/s2) and R here is the distance from the spacecraft to the Sun.
Finally, ˆD is the unit vector pointing from the Sun to the spacecraft [McMahon et al., 2018].
It is important to mention that no eclipses or radiation coming from the asteroid (albedo) will be modeled.
The eclipse assumption is totally valid and accurate because the terminator orbit will not enter any eclipse.
Moreover, the hovering and landing will always be in a fully illuminated part of the asteroid.
4.3.3. SOLAR TIDES (3RD BODY FORCE)
In this thesis work, 3rd body effects refer to the acceleration produced by the Sun, which will be modeled as
aST = −
µSun
|r sat +d|3 (r sat +d)+ µSun
|d|3 d
(4.11)
µSun is the gravitational parameter of the Sun, r sat is the position vector in the ACI frame and d is the position
vector pointing from the Sun to the center of the asteroid. It is important to remark here that the second term

4. FLIGHT DYNAMICS AND SPACE ENVIRONMENT
33
is due to the fact that this acceleration is expressed in the asteroid centered inertial frame.
4.4. GRAVITY GRADIENT TORQUE MODEL
Apart from the previous mentioned forces acting on the spacecraft, the simulations will also take into ac-
count the gravity gradient torque. The bast majority of studies compute the gravity gradient torque with the
following equation, as explain Schaub and Junkins [2009] in their book.
τ = 3 µ
R3
c
a3 × Ia3
(4.12)
where Rc is the distance from the center of the attracting body (asteroid), µ is its gravitational parameter, a3 is
the third component of the Local Vertical Local Horizontal frame, expressed in body frame, and I is the inertia
moment tensor of the spacecraft. However, Equation (4.12) was derived assuming some simpliﬁcations and
approximations. First of all, a central gravity ﬁeld was assumed, meaning that the gravity vector always points
towards the center of the attracting body. This assumption is not valid at all in the case of small asteroids
with irregular shapes and mass distributions [Wang and Xu, 2013]. For this reason, a numerical approach
is necessary. In this thesis work, it will be obtained through the spherical harmonics gravity ﬁeld. It is not
a central-body gravity ﬁeld and it could be as accurate as the spherical harmonics can be. As explained by
Gottlieb [1993], the assumption of this method is that the gravity gradient torque can be computed assuming
that the gravity varies linearly about the center of mass of the satellite. This means that the gravity at the
vicinity of a point is given by the expression
g = g cm + ∂g
∂r δr
(4.13)
where g cm is the gravity acceleration at the center of mass of the satellite and r is any arbitrary vector with its
origin at the center of mass of the satellite. Then, the gravity gradient torque can be modeled as
τ =
Z
ρ ×Gρdm =


g23(Izz −Iyy)+ g13Ixy −g12Ixz + Iyz(g33 −g22)
g13(Ixx −Izz)−g23Ixy + g12Iyz + Ixz(g11 −g33)
g12(Iyy −Ixx)+ g23Ixz −g13Iyz + Ixy(g22 −g11)


(4.14)
where Ii j are the different components of the inertia tensor (in body frame) and gi j are just the coefﬁcients
of the matrix G deﬁned by
G = BT ∂g
∂r B
(4.15)
where g is the gravity vector at the center of mass of the satellite (so its derivative is just the second derivative
of the gravity potential mentioned in the previous section with respect to the position vector). And the B
matrix is just the rotation matrix that transforms from vector from body ﬁxed coordinate frame to the asteroid
ﬁxed reference frame.
This method has been compared with a full numerical simulation of a box-shaped spacecraft orbiting
about Bennu in close proximity. The full numerical simulation computes the torques assuming that the

34
4.4. GRAVITY GRADIENT TORQUE MODEL
spacecraft is a combination of point masses (up to 262144). Furthermore, it takes into account the full reso-
lution of the gravity ﬁeld without assuming linear variations from the center of mass of the satellite to all of its
points masses. The results show that the maximum relative errors between the methods are between 3 and
5% for the worst cases depending on the body axis. This errors are totally affordable taking into account the
amount of time saved by applying the Gottlieb [1993] method.

5
SPACECRAFT CONTROL
To follow the desired trajectories for each scenario of this thesis, attitude and orbit control will clearly be
required. There are many different ways and possibilities on how to control spacecraft. Depending on the
selected control laws or even depending on the selected gains, the spacecraft will behave differently to com-
pensate for disturbances and bring it back to its reference trajectory. Finding the best controller for each case
has occupied the minds of many engineers for hundred years, and it is still a problem nowadays.
One of the key points when selecting a control law is stability; specially in the ﬁeld of autonomous naviga-
tion around asteroids. It is always desirable to guarantee that your controller will always bring your spacecraft
down to reference trajectory and succeed in your mission. However, still nowadays, global stability cannot
be guaranteed without making some assumptions. For instance, a very common assumption is to assume
perfect knowledge of your spacecraft (mass and inertia). For most of the cases, they are well known with suf-
ﬁcient precision to guarantee stability. However, sometime, spacecraft have liquid propellant tanks with fuel
slushing and changing the inertia of the spacecraft all the time. This is very difﬁcult and costly to model. If
the stability requirements are very restrictive, they cannot always be guaranteed.
Bearing these limitations in mind, this chapter deﬁnes the controllers that will bring the spacecraft to
follow the desired trajectories for this master thesis. Section 5.1 deﬁnes the control approach that will be used
for the classical representation, whereas Section 5.2, deﬁnes the one for the dual quaternion representation.
For both of them, proof of Lyapunov stability is derived. Then, a process for gain selection and optimization
is explained in Section 5.3. The ﬁnal selected gains for each scenario are stated at the end of this chapter.
35

36
5.1. CLASSIC CONTROL
5.1. CLASSIC CONTROL
This section ﬁrst deﬁnes the attitude control scheme that will be applied to control the spacecraft in the
simulations by following the development explained in [Schaub and Junkins, 2009]. Then the orbit control is
deﬁned with a similar approach.
5.1.1. ATTITUDE CONTROL
The selected attitude controller will be a feedback control very well suited for tracking reference trajectories.
It will guarantee the stability of the rotational motion. Deﬁning δω as the error in angular velocity (Equation
(5.1)) with respect to a desired reference angular rate (ωr ), and q as the attitude error to some reference
orientation; it is possible to create a Lyapunov function.
δω = ω−ωr
(5.1)
The Euler’s rotational equations of motion for this problem is given by
I ˙ω = −ω× Iω+u +L
(5.2)
Taking into account the Lyapunov theory explained in Appendix A, a positive deﬁnite function, radially un-
bounded and that represents some how the relative state error to the reference trajectory has to be deﬁned.
A possible candidate can be the function deﬁned by
V (δω,q) = 1
2δωT Iδω+K (q −1)T (q −1)
(5.3)
The parameter K is a positive scalar attitude feedback gain and 1 represents the zero attitude quaternion
(1,0,0,0). The derivative of the Lyapunov function can be expressed as
˙V = δωT
µ
I d
dt
¯¯¯¯
B
(δω)+K ϵ
¶
(5.4)
where ϵ is just the vector part of the error quaternion deﬁned as ϵ = (q1,q2,q3)T . It is important to see that the
derivative has to be evaluated in a body-ﬁxed frame. Now, forcing this derivative to be negative semi-deﬁnite
by setting it equal to
˙V = −δωT Pδω
(5.5)
where P is the positive deﬁnite angular velocity feedback gain matrix, this leads to the following stability
constraint:
I d
dt
¯¯¯¯
B
(δω)+K ϵ+Pδω = 0
(5.6)
Now, making use of the local derivative, applying the transport theorem, and introducing the dynamic equa-
tion of motion (5.2), this stability condition can be expressed as
K ϵ+Pδω−ω× Iω+L +u −I( ˙ωr −ω×ωr ) = 0
(5.7)

5. SPACECRAFT CONTROL
37
L represents the total external torques acting on the spacecraft except for the control torque u. The nonlinear
feedback control is then given by
u = −K ϵ−Pδω+ω× Iω+ I( ˙ωr −ω×ωr )−L
(5.8)
On basis of the Lyapunov theory explained in Appendix A, it can be guaranteed that this feedback control
will stabilize the rotational motion to the reference trajectory. It is important to bear in mind that it has been
assumed perfectly known forces acting on the spacecraft, perfectly known inertia and mass, and perfectly
known orientation and angular rates.
5.1.2. POSITION CONTROL
The selected position controller will be very similar to the attitude one. It will also guarantee stability and it is
very well suited for tracking reference trajectories. To start with, a good candidate Lyapunov function, positive
deﬁnite, radially unbounded and representing the state error relative to a reference trajectory is expressed as
V (r ,v) = 1
2 vT v + 1
2kpr T r
(5.9)
where r represents here the position of the spacecraft with respect to the reference position and v represents
the relative velocity. The parameter Kp is a positive scalar position feedback gain. The derivative of this
function with respect to time can be expressed as
˙V = vT ˙v +kpr v
(5.10)
As was done in the attitude section, this function derivative has to be negative semi-deﬁnite so that stability
can be guaranteed. Setting this function equal to
˙V = −kvvT v
(5.11)
which is always negative and where kv is a positive scalar velocity feedback gain. Forcing both function
derivatives to be equal leads to the stability condition
vT ˙v +kpr T v +kvvT v = 0
(5.12)
Now, substituting the equation of motion (for ˙v), set by Newton’s second law taking into account a control
force, the stability condition can be re-written as
vT F
M + vT F c
M −vT ad +kpr T v +kvvT v = 0
(5.13)
where F are the external forces acting on the spacecraft, F c are the control forces, M is the mass of the space-
craft and ad is the desired acceleration. This ﬁnally leads to a control force given by
F c = −Kpr −Kvv + M ad −F
(5.14)
And therefore, making use of Lyapunov theory explained in Appendix A, it can be proven that this controller
can guarantee position and velocity Lyapunov stability.

38
5.2. DUAL QUATERNION CONTROL
5.2. DUAL QUATERNION CONTROL
Assuming that the systems dynamics are perfectly known, this sections deﬁnes a PD controller based on the
work done by Gui and Vukovich [2015] for controlling both the position and orientation of the spacecraft
simultaneously with dual quaternions. The proposed controller is deﬁned by
ˆf
B
c = −
¡ˆk1 ⊙ˆpB
B/D
¢s −
¡ˆk2 ⊙ˆωB
B/D
¢s + ˆωB
D/I × MB ˆωB
D/I + MB ³
ˆq∗
B/D ˙ˆω
D
D/I ˆqB/D
´
−ˆf
B
ext
(5.15)
where ˆk1 = kq + ϵ2kr and ˆk2 = kω + ϵkv are dual numbers gains ( kq,kr ,kω,kv ∈ℜ+ ). The super-indexes
always stand for the reference frame in which each variable is expressed, whereas the sub-indexes tell with
respect to which frame each variable is expressed. The ⊙operation stands for the multiplication between a
dual number and a dual quaternion:
ˆc ⊙ˆa = (cr +ϵcd)⊙(ar +ϵad) = cr ar +ϵcd ad
(5.16)
ˆf
B
c is just the dual quaternion control force. ˆpB
B/D is the dual quaternion pose error of the spacecraft with
respect to the reference trajectory, expressed in body frame.
ˆpB
B/D = qB/D +ϵ1
2r B
B/D
(5.17)
qB/D is the orientation quaternion error with respect to the reference orientation, r B
B/D is the position error
relative to the reference position expressed in body frame, ˆωB
B/D is the same but with angular velocity, MB is
the so called dual inertial matrix combining information of the spacecraft’s mass and inertia; and ˆf
B
ext is the
total dual quaternion forces acting on the spacecraft.
It is important to note that the ˆpB
B/D and ˆωB
B/D feedbacks ensure convergence of the tracking error, while
the remaining terms involved are used to compensate for the dual forces acting on the spacecraft.
As can be seen, controller (5.15) has exactly the same form as classical attitude controller (5.8), with all
the equivalent terms. The reason behind the selection of these controllers is to make them comparable. It is
important to bear in mind that the goal of this master thesis is to compare the dual quaternion representation
with the classical one. Therefore, the controllers have to be similar. Otherwise, certain advantages could be
associated with the control approach and not with the state variable representations.
The stability of this controller can be proven with Lyapunov theory. Equation (5.18) is a positive deﬁ-
nite Lyapunov function, radially unbound and expressing the state dual quaternion error with respect to the
reference trajectory.
V ( ˆqB/D, ˆωB
B/D) =
¡ˆk1 ⊙( ˆqB/D −ˆ1)
¢
◦
¡
ˆqB/D −ˆ1
¢
+ 1
2
¡
ˆωB
B/D
¢s ◦
¡ ˆM ˆωB
B/D
¢
(5.18)
which satisﬁes that is always positive and V (ˆ1, ˆ0) = 0. Noting that (ˆk1⊙( ˆqB/D −ˆ1))◦˙ˆqB/D +(ˆk1⊙˙ˆqB/D)◦( ˆqB/D)◦
( ˆqB/D −ˆ1) = 2(ˆk1 ⊙( ˆqB/D −ˆ1))◦˙ˆqB/D, and taking into account that ˆa ◦ˆb = ar br + adbd; the derivative of this
Lyapunov function can be computed along the close-loop trajectory as
˙V = 2
¡ˆk1 ⊙( ˆqB/D −ˆ1)
¢
◦˙ˆqB/D +( ˆωB
B/D)s ◦( ˆM
B ˙ˆω
B
B/D)
= −( ˆωB
B/D)s ◦(ˆk2 ⊙ˆωB
B/D)s −( ˆωB
B/D)s ◦(ˆk1 ⊙ˆpB/D)s +
¡ˆk1 ⊙( ˆqB/D −ˆ1)
¢
◦( ˆqB/D ˆωB
(B/D)
(5.19)

5. SPACECRAFT CONTROL
39
Noting that ˆωB
B/D is a vector dual quaternion, using the expression ˆa ◦(ˆb ˆc) = ˆcs ◦(ˆb
∗ˆas) it is possible to obtain
¡
(ˆk1 ⊙( ˆqB/D −ˆ1)
¢
◦( ˆqB/D ˆωB
B/D) = ( ˆωB
B/D)s ◦
¡
ˆq∗
B/D
¡ˆk1 ⊙( ˆqB/D −ˆ1)
¢¢
= ( ˆωB
B/D)s ◦vec
³
ˆq∗
B/D
¡ˆk1 ⊙( ˆqB/D −ˆ1)
¢s´
(5.20)
and simple algebra manipulations shows that
vec
¡
ˆq∗
B/D ×(ˆk1 ⊙( ˆqB/D −ˆ1))s¢
= vec
µµ
q∗
B/D +ϵ1
2(r B
B/D)∗q∗
B/D
¶µ1
2krqB/Dr B
B/D +ϵkq(qB/D −1)
¶¶
= vec
µ1
2krr B
B/D +ϵkq(1−q∗
B/D)
¶
= (ˆk1 ⊙ˆpB/D)s
(5.21)
Now, Equation (5.20) can be re-written as
¡
(ˆk1 ⊙( ˆqB/D −ˆ1)
¢
◦( ˆqB/D ˆωB
B/D) = ( ˆωB
B/D)s ◦(ˆk1 ⊙ˆpB/D)s
(5.22)
Then, introducing this expression into Equation (5.19), the derivative of the Lyapunov function yields
˙V = −( ˆωB
B/D)s ◦(ˆk2 ⊙ˆωB
B/D)s ≤0
(5.23)
Therefore, limt→∞V (t) exists and is ﬁnite and the states ˆqB/D and ˆωB
B/D are uniformly bounded, which means
that ˆf
B
c and thus ˙ˆω
B
B/D are also bounded. Hence, ˆωB
B/D and ˙V are uniformly continuous. Making use of Bar-
balat’s lemma (explained in Appendix A), limt→∞
˙
V (t) = 0, and thus limt→∞ˆωB
B/D(t) = ˆ0. Then, since ¨ˆω
B
B/D(t)
is bounded; ˙ˆω
B
B/D(t) is uniformly continuous. Making use again of Barbalat’s lemma, limt→∞˙ˆω
B
B/D(t) = ˆ0;
and thus, limt→∞ˆpB
B/D(t) = ˆ0. This implies that limt→∞ˆqB/D(t) = ±ˆ1 and limt→∞ˆωB
B/D(t) = ˆ0. Which then
means that the spacecraft will be stabilized within the reference trajectory.
5.3. GAINS OPTIMIZATION
As can be seen in the controllers given by Equations (5.8), (5.14) and (5.15), there are different scalars or
dual-number gains. Depending on the value of these gains, controllers will behave in different ways and its
performance will depend on them. That is why they have to be tunned for each speciﬁc case to obtain the
best desired performance.
To optimize and tune each controller, a desired goal or requirement is needed. Then, the criteria for
assessing what is optimal can be deﬁned. In this thesis, a cost function has been developed for this reason,
taking into many different aspects described below.
First of all, the selected gain values have to meet the mission requirements speciﬁed in Section 2.4. For
instance, the attitude pointing error cannot exceed 0.01o during the hovering scenario. All the combination
of gains that do not meet these requirements will not be considered. Second of all, the selected gains have
to bring the spacecraft to the reference trajectory before a given settling time, also speciﬁed in Section 2.4.
The spacecraft will have to remain within the reference trajectory for the rest of the simulation. Again, all the
combinations of gains that do not meet this requirement will not be considered. As an example, the settling
time for the landing scenario has been deﬁned to be one minute. After one minute, the controls should

40
5.3. GAINS OPTIMIZATION
have steered the spacecraft to its reference trajectory. Finally, the selected gain values also have to meet some
overshoot requirements. Since it is not desired to have abrupt control responses, the initial overshoots cannot
exceed ten times the maximum control errors. For instance, the spacecraft error velocity cannot exceed the
value of 1 cm/s during the hovering scenario. All combination of gains that do not meet these requirements
will not be considered.
All gains meeting these requirements can be used to achieve the mission goals. However, some of them
have better performances than others. Once the mission requirements are guaranteed, the second most rel-
evant aspect is to analyze how much energy does it take to achieve this goal. Some combination of gains
can meet the requirements but consume a lot of energy. For this reason, the energy spent by each combina-
tion of gains has to be taken into account. The same concept also applies for the steady state error. Some
combinations of gains can meet the requirements but have a large constant steady state error.
5.3.1. COST FUNCTION
Bearing all these aspects in mind, it is now possible to deﬁne an optimization method and a cost function
that will determine which combination of gains is the optimal for each scenario. It is important to mention
that all combination of gains will be optimized for the nominal trajectory. This means, that the spacecraft is
always supposed to start with the correct states and no initial errors.
The optimization method chosen for this master thesis is a trial and error method. It consists in generat-
ing all possible different combinations of gains and assessing their performance with a cost function. It is a
time consuming method but it works; specially when the behavior of the cost function is clearly non-linear
(as will be seen below in this section). It might be important to notice that there are always four gains to
be optimized. However, since the classical representation has different control approaches for the rotational
motion than for the translational motion, the gains for each motion are completely independent. This is not
the case for the dual quaternion representation, where the four gains are totally linked. This has an impor-
tant impact on the optimization method. It means that for the classical representation, the method can be
divided into two two-dimensional optimization processes. Whereas for the dual quaternion representation,
a full four-dimensional optimization process is required. The ﬁrst one is clearly much faster and also has
the advantage of being able to graphically visualize the results. This is a drawback of the dual quaternion
representation: the gain selection is much difﬁcult and time consuming.
The optimization process deﬁned for this master thesis is as follows. First, a grid of possible combinations
of gain values is generated. For each combination, the three mentioned requirements are checked to be met
(mission requirements, settling time requirements and overshoot requirements). If the combination of gains
meet the requirements, a cost function is evaluated. This process can be represented by:
COMBINATION OF GAINS =⇒MEET REQUIREMENTS? =⇒





NO
→NOT CONSIDERED
YES
→COST FUNCTION EVALUATION
The cost function is a combination of two weighted factors. The ﬁrst and most important is the energy con-
sumption. The second is the steady state error. The priority of the optimization process is to ﬁrst meet the

5. SPACECRAFT CONTROL
41
requirements, then spend as less energy as possible, and ﬁnally, have the minimum error while meeting the
control requirements. For this reason, the selected weights have been chosen to be 80% for the energy and
20% for the steady state errors. A sensitivity analysis has been carried out to prove that results are only slightly
affected by these weights. It is important to bear in mind that energy has been always treated as more im-
portant than the steady state errors because it means less fuel. And fuel is very expensive in space. If mission
requirements are met, the steady state errors should only be considered for choosing between two very sim-
ilar energy consumption performances of different combinations of gains. This is the reason for selecting
these weights. The cost function is then given by
COST FUNCTION = 0.8·ENERGY CONSUMPTION+0.2·STEADY STATE ERROR
(5.24)
To compute the energy consumption of each combination of gains, torques and forces have to be taken into
account. However, the order of magnitude of the forces required to control the spacecraft is much higher
than the order of magnitude of the torques. For this reason, they have been normalized with the maximum
available torque and force, deﬁned in Section 2.3. In this way, they can be added up and get a performance
parameter indicating the energy spent for a speciﬁc combination of gains. This parameter is deﬁned by
ENERGY CONSUMPTION =
Z t
t0
q
F 2x +F 2y +F 2z
Fmax
dt +
Z t
t0
q
τ2x +τ2y +τ2z
τmax
dt
(5.25)
where Fi are each of the control force components and τi each of the control torque components. Fmax and
τmax are their maximum values deﬁned by actuator limitations. In this way, the total energy spent for each
combination of gains can be evaluated. To compute the steady state error, a similar evaluation has to be car-
ried out. Again, all different errors have to be integrated and normalized. In this case, the maximum control
requirement values, deﬁned in Section 2.4, have been used for normalization. For instance, the position er-
ror has to be divided by its maximum permitted error. In this way, all different errors with different units and
orders of magnitudes can be added up. The steady state error parameter is deﬁned by
STEADY STATE ER. = POSITION ER.+VELOCITY ER.+ATTITUDE ER.+ANGULAR VELOCITY ER.
where
POSITION ERROR =
Z t
t0
q
r 2x +r 2y +r 2z
ρposition
dt
VELOCITY ERROR =
Z t
t0
q
v2x + v2y + v2z
ρvelocity
dt
ATTITUDE ERROR =
Z t
t0
¯¯2·arccos(q0)
¯¯
ρattitude
dt
ANGULAR VELOCITY ERROR =
Z t
t0
q
ω2x +ω2y +ω2z
ρω
dt
(5.26)
where ρ is the maximum allowed error for each variable deﬁned in Section 2.4.
Following this optimization method, all gains for all different scenarios have been optimized. It is impor-
tant to notice two consequences derived from choosing this method. The ﬁrst one is that, as one can imagine,

42
5.3. GAINS OPTIMIZATION
(a) Energy consumption for the rotational hovering motion
(b) Steady state error for the rotational hovering motion
Figure 5.1: Energy and steady state error cost functions for the hovering scenario
it is impossible to generate all possible combination of gains because there are inﬁnite numbers between two
values. For this reason, a dense grid has to be chosen so that it can handle as much combinations as possible.
With a dense grid, the gain values can be found with more precision and therefore, a better performance can
be achieved. The second one is that this takes a lot of time. For instance, if each simulation takes 2 seconds to
run, a grid of 25 values for each gain takes four and a half days. This is of course unacceptable. To avoid such
long computing times, the Matlab parallel toolbox has been used. Since the evaluation of each simulation is
completely independent from the next one, the computer can divide its processor and create a pool of differ-
ent workers. The more powerful the computer is, the more workers it can have. Each worker can compute
in parallel different simulations with a certain combination of gains. Combining all independent results, the
optimum combination of gains can be founded faster.
Last but not least, results from the classical rotating hovering case are presented here as an example. As
has been mentioned before, the optimization process for the classical representation can be divided into two
two-dimensional optimization processes. The following results correspond to the rotational control gains.
Since it is a two dimensional problem, it can be represented in a 3d-plot. Figure 5.1a shows the energy con-
sumption and Figure 5.1b the steady state error.
The ﬁrst thing one has to realize is that, both functions have been inverted, for representation purposes.
The sign has been changed in both of them and they have been brought to positive numbers by adding the
lower minimum value. A second important thing to mention is that, in both cases, the maximum perfor-
mance is very close to their neighbors. For instance, the difference in energy spent by all combination of
gains showed in Figure 5.1a is very small. It is important to mention that values on the lower plane have
been changed so that the difference can be appreciated. The combination of gains that do not have any value
correspond to the ones not meeting the mission requirements. This means, that almost all the gains that con-
verge have very similar energy performances. This happened to all the results from this optimization process

5. SPACECRAFT CONTROL
43
Figure 5.2: Cost function for the rotational hovering motion
in the different three scenarios. Optimal performances are reached with a large combination of different gain
values. However, there was always a combination of gains with a maximum performance. The spikes on the
left part of Figure 5.1a correspond to local phenomena, derived from the combination of frequencies with
the integration time step. They are however compensated when doing the average with the steady state error
function.
Doing the previous mentioned weighted average with the energy consumption and the steady state error,
the cost function for this speciﬁc example is shown in Figure 5.2. As can be seen, values have been normalized
from one to zero. A value of one in the cost function would mean that the same combination of gains had
both the best energy performance and the best steady state error performance.
As happened before, despite the combination of factors, the optimal gains still have a very similar perfor-
mance index than their neighbors. This means that many different options have similar performances. For
this speciﬁc case, the maximum was found for Kq = 1065.9 N·m and Kω = 1106.5 N·m·s/rad.
5.3.2. SELECTED GAINS
All gains have been optimized following the described optimization process. Table 5.1 shows the selected
gains for the orbiting scenario and the simulation settings used for the optimization. The ﬁrst thing to notice
is that the initial conditions correspond to the nominal ones. The initial quaternion attitude corresponds to
the one pointing at the center of the asteroid from the initial position. As can be seen, the integration fre-
quency has been set to be 1 Hz. This corresponds to an integration time-step of one second, which provides
an accuracy of 10−9 in order of magnitude to all state variables. The control frequency is 0.5 Hz. This cor-
responds to a control update every two seconds. With this control frequency, all mission requirements can
be met easily. The last but not least important thing to notice is that the time span used to optimize these
gains has been selected to be a tenth of the orbital period. This selection is very important because it comes

44
5.3. GAINS OPTIMIZATION
with some consequences. On one hand, the time span has to be as short as possible to reduce the computa-
tional time of the optimization process. On the other hand, it has to be long enough to allow the controller to
stabilize the motion of the spacecraft. It is important to take into account the time evolution of all the state
variables. Tiny increasing errors could be present and do not have an important impact on the results but
become a problem for longer periods of time. After trying several time span options, a tenth of an orbit has
been found to be long enough to stabilize all motions and do not take excessive computational time. The
value of the selected gains is very similar for Kω but much different for Kq. It it worth mentioning that in
the orbiting scenario, only the rotational motion is controlled, since the spacecraft is already in a very stable
terminator orbit. For this reason, only Kq and Kω need to be optimized in both cases.
Table 5.1: Selected gains and settings for orbiting scenario
Parameter
Value
Initial position (Inertial frame)
[ 0; 0 ; 1500 ] m
Initial velocity (Inertial frame)
[ 0.03563 ; -0.04687 ; 0 ] m/s
Initial attitude
[ 0 ; -0.3193 ; 0.9476 ; 0 ]
Initial angular velocity (Body frame)
[ -1.9626 ; -0.000002106 ; -0.1074 ] ·10−5 rad/s
Integration and control freq.
IF = 1 Hz ; CF = 0.5 Hz
Time span
10% orbital period (1.6·104s)
Classic control gains
Kq = 1165.0,Kω = 1129.0
Dual quaternion control gains
Kq = 208.3,Kω = 1108.0
For the hovering scenario, the selected gains and settings for the optimization process are shown in Table
5.2. As can be noticed, the initial conditions also correspond to the nominal ones, with no initial deviations.
In this case, the integration frequency has been set to be 2 Hz to provide an accuracy of the state errors of
10−12 in order of magnitude. The control frequency has also been selected to be 0.5 Hz, because it allows
the controllers to meet with all the mission requirements. All ﬂight proven actuators and sensors on-board
current missions to asteroids can deal with these control frequencies. For the same reasons mentioned in the
orbiting scenario, and after some trial an error, the time span for this optimization process has been chosen
to be one hour. This time span allows the tiny motions with low frequencies to stabilize and guarantee that
both controllers meet the mission requirements. It is important to notice that, in this case, both the rotational
and translational motions have to be controlled. In contrast with the orbiting scenario, four gains have to be
selected for each control approach. As can be seen, the gain values are completely different for the classical
representation than for the dual quaternion one. The reason for that is the natural coupling of the motions in
the dual quaternion representation.
Finally, Table 5.3 shows the selected gain values for the landing scenario, together with the optimization
settings. The initial conditions are again the ones from the nominal trajectory, with no initial errors. However,
in this case, the integration frequency has been selected to be 4 Hz. The reason behind this selection can be
found in the accuracy of the errors. Since the landing trajectory involves higher control commands to meet

5. SPACECRAFT CONTROL
45
Table 5.2: Selected gains and settings for hovering scenario
Parameter
Value
Initial position (Inertial frame)
[ -288.563 ; -687.929 ; 0 ] m
Initial velocity (Inertial frame)
[ 0. ; 0. ; 0 ] m/s
Initial attitude
[ 0.1812 ; 0.0973 ; 0.7004 ; 0.6835 ]
Initial angular velocity (Body frame)
[ 0 ; 0 ; 0 ] ·10−3 rad/s
Integration and control freq.
IF = 2 Hz ; CF = 0.5 Hz
Time span
0 - 1 h
Classic control gains
Kq = 1065.9,Kr = 862.1,Kω = 1106.5,Kv = 1075.9
Dual quaternion control gains
Kq = 512.7,Kr = 1.82,Kω = 581.9,Kv = 1.82
Table 5.3: Selected gains and settings for landing scenario
Parameter
Value
Initial position (ACI frame)
[ 345.46 ; 0 ; 0 ] m
Initial velocity (ACI frame)
[ -0.1 ; -0.1403 ; 0 ] m/s
Initial attitude
[ 0.4743 ; 0.5244 ; -0.4743 ; -0.5244 ]
Initial angular velocity (Body frame)
[ 0.0932 ; 0.6336 ; -0.0191 ] ·10−3 rad/s
Integration and control freq.
IF = 4 Hz ; CF = 1 Hz
Time span
0 - 600 s
Classic control gains
Kq = 3271.4,Kr = 3974.0,Kω = 1978.6,Kv = 2295.0
Dual quaternion control gains
Kq = 950.0,Kr = 0.267,Kω = 1050.0,Kv = 1.213
the mission requirements, the integration time-steps had to smaller to be achieve an accuracy of 10−12 in
order of magnitude. For the landing scenario, a control frequency of 1 Hz was needed to achieve the mission
requirements. In this case, there was no other option than having a time span of 600 s because of the duration
of the deﬁned landing trajectory. After 600 s the spacecraft have to be landed on the asteroid. Again, the value
of the gains for the classical representation are very different than for the dual quaternion representation,
because of the the same reasons than in the hovering scenario.

46
5.3. GAINS OPTIMIZATION

6
NUMERICAL METHODS
This chapter aims at describing the numerical methods used in this master thesis. First of all, the integration
method used for solving the differential equations of motions is explained in Section 6.1. Apart from inte-
gration algorithms, this thesis also needs a root-ﬁnding method for solving algebraic equations. It is deﬁned
in Section 6.2. Finally, for veriﬁcation purposes, some particular solutions need to be interpolated to meet a
certain output points. The interpolation numerical method used in this master thesis is deﬁned in Section
6.3.
6.1. INTEGRATION METHOD
Many methods have been developed for the numerical integration and each of them has its own inherent
advantages and drawbacks. It is in general not possible to simply select one method as best suited for the
prediction of a satellite motion. The selection of the best numerical integrator for solving the equations of
motions involved in asteroid close-proximity operations could be a single thesis alone. There are single and
multiple-step methods, ﬁxed and variable step-sizes algorithms, explicit and implicit approaches, one and
multiple-stage integrators, different order methods, energy conservative algorithms, and many other charac-
teristics affecting the performance of each integrator. However the goal of this master thesis is to compare
the dual quaternion representation with the classical one. For this reason, only two aspects have been taken
into account when selecting the numerical integration technique.
The ﬁrst one is that it should be a ﬁxed step-size algorithm. The reason is because the spacecraft has to
be controlled so that it can follow the desired trajectories. All controllers have a working frequency at which
they operate. The same happens with the navigation sensors. For this reason, it is more convenient to have a
ﬁxed integration step-size method, so that these operating frequencies can be handled in a much easier way.
47

48
6.1. INTEGRATION METHOD
Figure 6.1: Step size dependency with tolerance of the solution for close-proximity operations in Bennu
The second one is that the integration technique should provide sufﬁcient precision of the solution so that
the dual quaternion representation can be fairly compared with the classical one.
Bearing these requirements in mind, a Runge-Kutta 4 algorithm is perfectly suited for this work. It is a
ﬁxed step-size method easy to implement and totally capable of providing the required precision. To prove
that, the required time-steps needed to achieve certain levels of accuracy has been computed in the vicinity
of asteroid Bennu. Figure 6.1 shows this. As can be seen, the larger the step-sizes are, the larger the errors
of the solution are. More speciﬁcally, it shows that the required step-size to achieve an error of the solution
in the order of magnitude of 10−14, is two seconds. The mission requirements deﬁned in Section 2.4 have
an order of magnitude much larger than 10−14. Maybe another algorithm could provide the same level of
accuracy in a faster way, but it is not the important aspect to take into account in this thesis.
The Runge-Kutta 4 is an explicit, multi-stage and single-step integration method. It is a fourth-order
method, meaning that the local truncation error is on the order of O(h5), while the total accumulated error
is on the order of O(h4). It uses the following expression to approximate the solution of y at some later time
t0 +h:
y(t0 +h) ≈y0 +h ·Φ = η(t0 +h)
(6.1)
It is evident that Φ, the increment function, should closely approximate the slope of the secant through (t0, y0)
and (t0+h, y(t0+h)). Carl Runge and Wilhelm Kutta developed different expressions for Φ based on the slopes
at various points within the integration step. In the classical Runge-Kutta 4 method, the increment function
Φ is calculated as the weighted mean [Montenbruck and Gill, 2000]
ΦRK 4 = 1
6(k1 +2k2 +2k3 +k4)
(6.2)
of four slopes
k1 = f (t0, y0)
k2 = f (t0 +h/2, y0 +h ·k1/2)
k3 = f (t0 +h/2, y0‘h ·k2/2)
k4 = f (t0 +h, y0 +h ·k3)
(6.3)

6. NUMERICAL METHODS
49
This formula approximates the exact solution up to terms of order h4, provided that y(t) is sufﬁciently smooth
and differentiable, and it is therefore called a 4th-order method. Its local truncation error
eRK 4 = |y(t0 +h)−η(t0 +h)| ≤const ·h5
(6.4)
is bound by a term of order h5.
6.2. ROOT FINDING
There are also many root ﬁnding methods: bisection methods, false position, Newton’s methods, secant
methods, interpolation methods, inverse interpolation methods... All of them have their own advantages
and disadvantages and are better suited for different equations. However, as has been done with the numeri-
cal integrator, the important aspect is that it has to work properly. For this reason, a simple secant method has
been selected for solving the algebraic equations of this master thesis. It is deﬁned by the following recurrence
relation:
xn = xn−1 −f (xn−1)
xn−1 −xn−1
f (xn−1 −f (zn−2)
As can be seen, it requires two initial values, which should ideally be chosen close to the root. Its order is
approximately 1.6.
6.3. INTERPOLATION
Sometimes, a given solution is required to be known at a point where it has not been deﬁned yet. For these
cases, an interpolation technique is needed. There are also many possibilities with different levels of accuracy
and difﬁculties, however, for this master thesis, only linear interpolations will be carried out. To carry out
a linear interpolation between two known points with coordinates (x0, y0) and (x1, y1), the solution is very
straight forward. The linear interpolant will be the straight line between these points. For a value x in the
interval (x0,x1), the value y along the straight line is given by:
y = y0(x1 −x)+ y1(x −x0)
x1 −x0

50
6.3. INTERPOLATION

7
SIMULATOR DESIGN
All the elements involved in the simulations have been deﬁned and characterized in previous chapters. There-
fore, it is now possible to build a simulator in Matlab and assemble all different parts together. This chapter
describes the way in which this simulator has been implemented in Section 7.1, and provides a top-level ar-
chitectural design of it. To make sure that everything works as expected and that the results obtained are
reliable, a detailed process of veriﬁcation and validation has been carried out. Section 7.2 describes this pro-
cess. This is a very important procedure, because it gives credibility to the research performed in this thesis
and shows that results can be trusted.
7.1. ARCHITECTURE DESIGN
To build a simulator that represents the dynamical environment of Bennu and the spacecraft, many different
aspects come into play. It is therefore desirable to divide the simulator into several blocks. This section
provides a top level architectural design of the simulator implemented in Matlab, showing these divisions.
The simulator can be divided into ﬁve different top level blocks: guidance, control, actuators, sensors and
navigation. Figure 7.1 shows them and how they interact with each other.
For the sake of clariﬁcation, 4 different colors have been used. Blue boxes in Figure 7.1 represent the
main blocks already mentioned. Dark blue boxes represent the outputs of the simulator. As can be seen, the
outputs of the simulations are the desired trajectories to follow, force and torque commands and the actual
trajectory followed by the spacecraft. Grey boxes are the inputs of the simulation. As can be seen, there are
only 4 inputs: the mission goal, initial conditions, integration settings and control settings. Finally, purple
boxes represent the different databases where information about the spacecraft or the asteroid trajectory is
stored.
51

52
7.1. ARCHITECTURE DESIGN
Figure 7.1: Top level architecture design of the simulator
7.1.1. GUIDANCE
The guidance block is responsible for determining the reference trajectory to follow. It tells the spacecraft
where to go. As inputs, it takes the mission goal and the state of the spacecraft. In real missions, it should

7. SIMULATOR DESIGN
53
be able to recompute the desired trajectory depending on different factors. For instance, if something goes
wrong, it should command a safe maneuver. Another example could be to readjust the trajectory depending
on the fuel level. In this master thesis however, the reference trajectory will not change. As explained in
Chapter 2, these reference trajectories will be the orbiting, hovering and landing on Bennu.
7.1.2. CONTROL
The control block is the one responsible for computing the control forces and torques necessary to follow the
desired trajectory. Taking as inputs the reference trajectory and the states of the spacecraft, it computes the
required forces and torques following the control laws deﬁned in Chapter 5. It is important to mention that
as inputs, it also receives the control frequency and the control gains. The control frequency is always lower
than the integration frequency due to hardware limitations (on-board CPU).
7.1.3. ACTUATORS
The actuators block represents all the real actuators on the spacecraft meant to execute the forces and torques
commands computed by the control block. All real actuators have a certain efﬁciency and a certain precision,
thus, the computed commands are not always the real ones acting on the spacecraft. Apart from that, real
actuators also have an working range. For instance, there is a maximum force one can achieve with a given
thruster. These limitations have been deﬁned in Chapter 2. Bearing this in mind, the actuator block takes
these limitations into account and computes the real control forces and torques that will steer the spacecraft.
7.1.4. SENSORS
The sensors block represents the spacecraft sensors measuring different types of information. For example,
gyroscopes measuring angular velocities, star trackers giving the orientation of the spacecraft, accelerome-
ters measuring accelerations or navigation cameras measuring features on the surface of the asteroid. Each
sensor has a working frequency which limits the integration of the different state variables. In this master
thesis however, no sensors have been deﬁned or simulated.
7.1.5. NAVIGATION
The navigation block is responsible for determining the position and orientation of the spacecraft. It usually
contains a ﬁlter or a combination of ﬁlters to statistically determine all the state variables over time. As inputs,
it takes the integration settings and the measured states from the sensors block. In this master thesis however,
no sensors data is available. For this reason, the position and orientation of the spacecraft will be assumed to
be exactly the ones coming from numerically integrating the equations of motion with the models described
in Chapter 4. Perfect knowledge of the environment is assumed. The navigation block can be sub-divided
into smaller sub-blocks, easier to understand, verify and validate. This is shown in Figure 7.2, where the
architectural design of the navigation block is represented in detail.
As can be seen, ﬁve different sub-blocks can be identiﬁed. They correspond to the different models de-

54
7.2. VERIFICATION AND PSEUDO-VALIDATION
Figure 7.2: Architectural design of the navigation block
scribed in Sections 4.3 and 4.4, together with the integrator sub-block. The ﬁrst one is the gravity force model,
which computes the gravity forces coming from the asteroid using the spherical harmonics approximation
proposed in [Gottlieb, 1993]. The second one is the SRP model followed by the 3rd body force model. The
fourth one is the gravity gradient torque sub-block. And ﬁnally, the last one is the Runge-Kutta 4 integrator,
which numerically integrates the position and orientation of the spacecraft over time. It is important to see
the relationship between each sub-block and what are their inputs and outputs. For instance, the gravity
force sub-block only needs the current orientation of the asteroid and the inertial position of the spacecraft.
Moreover, the SRP sub-block requires the current position of the Sun at each time step and the position of the
spacecraft as well.
Figures 7.1 and 7.2 represent the top level architectural design for the classical representation. For the dual
quaternion representation, the diagrams are almost identical. Only the equations of motion are different and
the way the variables are expressed and taken as inputs or outputs. As has been explained in Chapter 3, dual
quaternions are more compact and only require two equations of motion. However, all ﬁve sub-blocks are
still necessary and the architectural design remains the same.
7.2. VERIFICATION AND PSEUDO-VALIDATION
To make sure that all written code in Matlab has been properly implemented and works as expected, each
block and sub-block deﬁned in the architectural design has to be veriﬁed and validated. The previous sub-
divisions have been made so that different unit tests can be deﬁned. In this way, the process of veriﬁcation
and validation becomes much clearer and easier. All different blocks and sub-blocks will be veriﬁed and
validated in this section through unit tests and then, a ﬁnal system test will be carried out to check if the

7. SIMULATOR DESIGN
55
Figure 7.3: Acceleration on the equator comparison
whole simulator works properly. The system test will determine whether or not the developed simulator can
be used as a tool for the purpose of this thesis or not.
It is important to bear in mind the difference between veriﬁcation and validation. On one hand, the
process of veriﬁcation checks whether the implemented code works as expected. It has nothing to do with the
physical meaning. On the other hand, the process of validation proves that the implemented code provides
results that represent the real expected physical values with physical meaning. Since Bennu has never been
visited, the only way of validating in this master thesis, is to compare results with other previous independent
studies. That is why it is called pseudo-validation in this case.
Despite the fact that the simulation cycle starts with the guidance block, it makes more sense to ﬁrst
validate the smaller sub-blocks and their models associated with them in the navigation block. The reason is
because this is the chronological order followed when developing the simulator.
7.2.1. NAVIGATION
As already depicted in Figure 7.2, the navigation block can be sub-divided into smaller sub-blocks that will
deﬁne different unit tests. This section describes them all.
GRAVITY FORCE
The ﬁrst sub-block to be veriﬁed and pseudo-validated is the implemented gravity force model. To verify
that the spherical harmonics gravity force model code has been implemented correctly, an auxiliary Matlab
function has been used. Matlab has its already build-in function which provides the user with the acceleration
at any point around the Earth given a spherical harmonic model and its order and degree. If the code is
well written, both functions should give the same acceleration at the same point given the same spherical
harmonic model.
The Matlab function used is gravitysphericalharmonic and the gravity model selected is the EGM96. By
default, Matlab uses only 70 of the 360 spherical harmonic coefﬁcients of the model. Figure 7.3 shows the
gravity acceleration on the equator for each function and Figure 7.4 shows the same but on the Greenwich
meridian. Figures 7.5 and 7.6 show their differences.
As can be seen, the acceleration given by the two methods is almost the same up to a computer precision.
It is interesting to mention that if less degrees are used on the spherical harmonic model, the solution is

56
7.2. VERIFICATION AND PSEUDO-VALIDATION
Figure 7.4: Acceleration on the Greenwich meridian comparison
Figure 7.5: Differences in acceleration in Figure 7.3
Figure 7.6: Differences in acceleration in Figure 7.4
still similar except for the higher frequencies missing. The differences are in the order of magnitude of 10−8
m/s2 in the equator and 10−6 m/s2 in the meridian. Finally, to check how the model behave at different
altitudes, Figure 7.7a shows the norm of the acceleration from the surface to up to 4.000 km and Figure 7.7b
its differences with the Matlab function. As it can be seen, the further away from the Earth, the more similar
the results are and the more it resembles to the central body acceleration. Differences are in the order of
magnitude of 10−9 m/s2. These results verify that at least the spherical harmonics gravity ﬁeld code is well
implemented and that it works on Earth.
If one just changes the coefﬁcients and use the spherical harmonics coefﬁcients for Bennu, the code
should still work properly. However, to pseudo-validate the results, data on [Hergenrother, 2014] has been
used to check for the order of magnitude of the surface gravity ﬁeld. Figure 7.8 shows the surface accelera-
tions (in mm/s2) computed by Hergenrother [2014], whereas Figure 7.9 shows the computed surface accel-
eration coming from the implemented code. As it can be seen, in both cases the surface acceleration has

7. SIMULATOR DESIGN
57
(a) Accelartion on different altitudes on Earth
(b) Differences in acceleration in Figure 7.7a
Figure 7.8: Bennu’s surface acceleration in mm/s2 from [Hergenrother, 2014]
the same order of magnitude 10−5 m/s2 and follows the same pattern. It is important to mention that these
accelerations are not computed using the same method. In [Hergenrother, 2014], they are computed using
a polyhedron gravity model and in this thesis they are computed using spherical harmonics. As it was ex-
plained in [Takahashi, 2013], the spherical harmonics gravity model is only guaranteed to converge outside
the Brillouin sphere, and the surface of Bennu is clearly inside of it. That explains why the values are not ex-
actly the same. However, the differences are inside the predicted error values computed by Takahashi [2013]
when comparing a polyhedron model with a spherical harmonic model.
The combination of all these tests makes one believe that the gravity ﬁeld code is well implemented and
that it works as required.
SOLAR RADIATION PRESSURE
The second navigation sub-block to be veriﬁed and validated is the SRP one. To check if the solar-radiation
force has been properly implemented, the order of magnitude of this force and its direction have been com-
pared to data taken from [McMahon et al., 2018]. Figure 7.10 shows different accelerations acting on OSIRIS-

58
7.2. VERIFICATION AND PSEUDO-VALIDATION
Figure 7.9: Computed Bennu’s surface acceleration in mm/s2
Figure 7.10: Comparison of acceleration magnitudes during preliminary survey [McMahon et al., 2018]
Table 7.1: Solar radiation pressure acceleration at 7 km in ACI frame
Point (km)
Acc x (m/s2)
Acc y (m/s2)
Acc z (m/s2)
Norm (m/s2)
(7,0,0)
2.655·10−8
2.018·10−8
0.203·10−8
3.341·10−8
REx during the preliminary survey phase, which happens to be a bunch of ﬂybys with periapsis of 7 km each.
As can be seen, the SRP acceleration is constant with an order of magnitude of 10−8 m/s2. The imple-
mented code gives an acceleration that can be shown in Table 7.1 at (7,0,0) km in the ACI reference frame.
The order of magnitude is exactly the same and the direction is pointing outwards the Sun. This unit test has
been carried out at different other points in the proximity of Bennu and the result is exactly the same due to
the fact that the Sun is very far away compared to the changing distances in the proximity of Bennu.

7. SIMULATOR DESIGN
59
Table 7.2: Solar tide acceleration at 7 km in ACI frame
Point (km)
Acc x (m/s2)
Acc y (m/s2)
Acc z (m/s2)
Norm (m/s2)
( 7, 0, 0)
1.108·10−10
1.784·10−10
0.180·10−10
2.108·10−10
(-7, 0, 0)
-1.108·10−10
-1.784·10−10
-0.180·10−10
2.108·10−10
( 0, 7, 0)
1.784·10−10
0.117·10−10
0.137·10−10
1.793·10−10
( 0,-7, 0)
-1.784·10−10
-0.117·10−10
-0.137·10−10
1.793·10−10
( 0, 0, 7)
0.180·10−10
0.137·10−10
-1.225·10−10
1.246·10−10
( 0 ,0,-7)
-0.180·10−10
-0.137·10−10
1.225·10−10
1.246·10−10
3RD BODY PERTURBATIONS
The next navigation sub-block to be veriﬁed and validated, corresponds to the third body perturbations com-
ing from the Sun. As happened with the SRP, this unit test consisted of verifying and pseudo-validating the
order of magnitude and direction of the perturbing force. On one hand, Figure 7.10 shows that the order
of magnitude of the acceleration coming from the Sun is 10−10 m/s2. This is data taken from [McMahon
et al., 2018], which is an independent study. On the other hand, the implemented codes gives an acceleration
shown in Table 7.2, at different points, in the ACI frame as well.
As can be seen, the order of magnitude is the same. However, how can we verify the direction of this force?
Figure 7.11 shows the direction of the Sun perturbations (also known as solar tides), seen by the satellite in an
orbit of 1 km in the ACI frame. It can be understood as the force received by 1 kg point mass, at a distance of 1
km. The direction of the acceleration is outwards near the equator and inwards on the poles. This is the same
type of acceleration that generates tides on Earth, due to different 3rd bodies like the Sun or the Moon. That
is why it is also called solar tide. Equation (4.11) in Chapter 4, overlaps the gravitation attraction from the Sun
to the satellite, minus the acceleration from the Sun to the asteroid, to express it in the ACI frame. Comparing
the direction of this perturbing ﬁeld with the one in [Montenbruck and Gill, 2000], it can be veriﬁed that the
implemented code represents indeed the expected force direction.
GRAVITY GRADIENT TORQUE
The unit test for the gravity gradient torque has two parts. The ﬁrst one consist in comparing the torque with
the analytic Equation 4.12 from [Schaub and Junkins, 2009]. This equation is an approximation of the gravity
gradient torque, because it only considers a central gravity ﬁeld. However, it will serve for validating the order
of magnitude and direction of these torque.
The second part of the unit test is based on the fact that the gravity force model has been already veriﬁed
and pseudo-validated. It consists on computing the torque using two completely independent methods. The
ﬁrst method is the one which will be used during all the simulations on this thesis, based on the Gottlieb algo-
rithm [Gottlieb, 1993], and explained in Section 4.4. The second method is based on point masses. Since the
acceleration of any point is known to be correct, and given by the Matlab function gravitysphericalharmonics,
the gravity gradient torque is computed by cross-multiplying the force that each point mass is receiving per

60
7.2. VERIFICATION AND PSEUDO-VALIDATION
Figure 7.11: Direction of the solar tide acceleration. XZ plane (top left). YZ plane (top center). 3d view (top right). XY plane (bottom)
its distance to the center of mass and then adding up all these torques. In this case the acceleration is not
assumed to vary linearly (in contrast with the ﬁrst method) and it is actually computed at all points of the
spacecraft using the spherical harmonics model. If the number of points is high enough, the Inertia should
be close to equal and therefore arrive to a very similar gravity gradient torque.
The second method has been compared with the ﬁrst one for several number of point masses representing
the spacecraft (in this case just a cuboid). The number of points selected to represent the spacecraft has been:
8, 64, 512, 8000, 32768 and 262144. The scenario simulated was a LEO polar orbit and the cuboid dimensions
were 1x2x0.5 m (width, depth, height). The orientation of the satellite was maintained inertially ﬁxed with
respect to the Earth during all the orbit. The gravity gradient point was computed 100 times for each orbit
in the body frame. The results are shown in Figures 7.12 to 7.14. The blue lines represent the point-mass
method, the red lines the Gottlieb method and the orange lines the central body method, from Equation 4.12.
It is important to remark that, due to the approximations carried out in the central body method (orange
lines), it only provides torques in the y direction of the body frame. This is one of the reasons why this method
was not considered from the very beginning. However, it can be used to validate the order of magnitude and
direction of this particular torque. As can be seen in Figure 7.13, the implemented method and this central
body approximation are almost the same.
Moreover, comparing the Gottlieb method with the point-mass one, the more point masses used to rep-
resent the cuboid, the closer the solutions become. This can be seen from left to right and up to down in
Figures 7.12 to 7.14. Each ﬁgure increases the number of point masses used to represent the cuboid. In the
lower part of each ﬁgure, the difference between each method is plotted. As can be seen, these differences be-
come smaller and smaller when increasing the number of point masses. This test has a maximum of 262144
number of point masses for computational reasons. With 262144 point masses, the differences in torques are

7. SIMULATOR DESIGN
61
(a) Gravity gradient torque with 8 point masses
(b) Gravity gradient torque with 64 point masses
(c) Gravity gradient torque with 512 point masses
(d) Gravity gradient torque with 8000 point masses
(e) Gravity gradient torque with 32768 point masses
(f) Gravity gradient torque with 262144 point masses
Figure 7.12: Comparison of the gravity gradient torque (τx) methods

62
7.2. VERIFICATION AND PSEUDO-VALIDATION
(a) Gravity gradient torque with 8 point masses
(b) Gravity gradient torque with 64 point masses
(c) Gravity gradient torque with 512 point masses
(d) Gravity gradient torque with 8000 point masses
(e) Gravity gradient torque with 32768 point masses
(f) Gravity gradient torque with 262144 point masses
Figure 7.13: Comparison of the gravity gradient torque (τy) methods

7. SIMULATOR DESIGN
63
(a) Gravity gradient torque with 8 point masses
(b) Gravity gradient torque with 64 point masses
(c) Gravity gradient torque with 512 point masses
(d) Gravity gradient torque with 8000 point masses
(e) Gravity gradient torque with 32768 point masses
(f) Gravity gradient torque with 262144 point masses
Figure 7.14: Comparison of the gravity gradient torque (τz) methods

64
7.2. VERIFICATION AND PSEUDO-VALIDATION
only one order of magnitude less than the actual torques and all curves follow the same pattern. Since both
independent methods produce the same torques, and all them match the analytic equation, it can be veriﬁed
and validated that the gravity gradient torque sub-block is correct and that it provides the expected physical
values indeed.
RUNGE-KUTTA 4 INTEGRATOR
Finally, the last navigation sub-block to be veriﬁed and validated is the Runge-Kutta 4 integrator. To do so,
different tests have been carried out. The ﬁrst one consists in studying a kinematic propagation. A rigid body
without any force or torque acting on it. If the integrator is well implemented, the rigid body should remain
unperturbed forever. Results from this test are just straight constant lines and therefore, there is no need to
show them. Both position and velocity components remained constant at zero and the energy did not change
at all. The testing time was 700 seconds but it should have worked for any period of time.
The second test consists in comparing the numerical two body problem solution with the analytic one
from Kepler. The solutions should be the same if the Runge-Kutta 4 integrator is well implemented. The se-
lected orbit was an equatorial orbit about Bennu at 1500 m and with zero eccentricity and inclination. Figure
7.15 shows both trajectories. It might be difﬁcult to distinguish but there is actually a blue line overlapping the
red one, corresponding to the integrated solution. Figure 7.16 shows the differences in position and velocity
between the two solutions. As can be seen, the maximum difference in position after 3 orbits is 0.04 m and
0.0015 mm/s in velocity. The integration time step in this case was 1 second. If the time step is increased, the
errors also increase and if the time step is reduced, so do the errors. This is due to the numerical integration
algorithm. The smaller the time step, the better the solution and longer the time it takes to compute it.
Figure 7.15: Integrated trajectory vs Kepler solution of a two body problem
Another test is the energy check for the same two body problem. In the two body problem, the only force
acting on the spacecraft is the gravitational force. It is a central force that comes from a potential function.
This means that the total energy should remain constant over time, no matter the number of orbits if there
is no other force acting on the spacecraft. The results show that the energy remains constant with a tinny
numerical variation shown in Figure 7.17. As can be seen, the energy variations are in the order of magnitude
of 10−13 J, whereas the total energy is 3.64 J. Therefore, it can be considered constant.

7. SIMULATOR DESIGN
65
Figure 7.16: Position and velocity comparison of the integrated two body trajectory and the Kepler solution
Figure 7.17: Energy variation of the integrated two body trajectory with a time step of 1 second
All these previous tests concerned about the orbital motion. They verify and pseudo-validate that the
position and velocity resulting from the numerical integrations are correct and that they represent the desired
physical meaning. However, nothing has yet been said about the rotational motion. To check whether or not
the attitude integration is correct, the following tests have been carried out.
The ﬁrst one consists in studying the torque-free motion of a rigid body. For the case of an axis-symmetric
body, there is a known analytic solution derived in [Celledoni et al., 2008]. If the Runge-Kutta 4 integrators
(classic and dual quaternion) are well implemented, the solution for a given initial condition should be the
same as the analytic one. After carrying out these tests, results show that they are indeed the same. The
differences depend on the step size of the integration (as it happened with the translational motion and for
the exact same reason). With a step size of 10 seconds and an initial angular velocity of ω = [0.03,−0.03,0.015]
deg/s, the differences in quaternion components were of the order of magnitude of 10−5, and 10−8 for the
angular velocities components, after 125 hours. The results were exactly the same for both the classic and
dual quaternion integrators. For the sake of readability, only the angular velocity from the classical integrator

66
7.2. VERIFICATION AND PSEUDO-VALIDATION
Figure 7.18: Numerical and analytic angular velocities and their differences for a torque-free motion
is shown in Figure 7.18 as an example. The top part shows the angular velocity components and the bottom
part, their differences.
The second test consists in checking the rotational energy of the rigid body in the above mentioned mo-
tion. Since there are no torques acting on the rigid body, the rotational energy should remain constant. The
total angular momentum has to be conserved. As happened with the translational motion, the rotational
energy remained constant in all tests, with tinny numerical variations of 10−12 times smaller than the mean
value. Thus, it can be considered constant.
The third and ﬁnal test for the rotational motion consists in verifying the implemented integrators, by
comparing their solutions with an already veriﬁed and trusted solution. With the ﬁrst and second previous
tests, one can only be sure that the numerical integration algorithm works in the absence of torques. Since
there is no general analytic solution for the rotational motion in presence of torques, the solutions have to
be compared with a previous trusted independent work. In this case, the trusted solution came from a Mat-
lab package called quaternion 1, which uses the ode45 integrator for numerically integrating the rotational
equations of motion. This work is totally independent and provides a quaternion solution given the initial
conditions and the torques acting on the rigid body, as a function of time.
The rigid body used for this test was the model of the satellite used in all simulations (deﬁned in Section
2.3). A constant torque of τ = [0.01,−0.01,0.005] was applied during the 30 minutes simulation. The step size
selected was 0.25 seconds. The results of the test showed that both solutions are exactly the same up to some
numerical precision. Figure 7.19 shows the quaternion solutions for both cases in the top part. As can be seen
1Downloaded from MathWorks "https://es.mathworks.com/matlabcentral/ﬁleexchange/33341-quaternion" on 15 January 2018

7. SIMULATOR DESIGN
67
Figure 7.19: Differences between the quaternion solution and a trusted solution for the general rotational motion
in the bottom part, the differences between them are of the order of magnitude of 10−13 after 30 minutes. It
might be important to note that the differences grow with time. This is because the trusted solution uses the
matlab ode45 integrator. This is a variable step-size algorithm that allows to control the error of your solution.
As explained in previous chapters, the numerical algorithm for this thesis is a Runge-Kutta 4, which is a ﬁxed
step-size method. Due to the fact that a constant torque is applied, the rotational rates increase over time, and
smaller time-steps are required after a period of time to maintain the error constant. Since the Runge-Kutta 4
is maintaining the same time-step, the errors increase over time. The angular velocities are not shown for the
sake of readability, but their differences after 30 minutes were of the order of magnitude of 10−15 deg/s. These
tests serve for verifying and validating that the implemented code works as expected and provide a solution,
which corresponds to real physical solution of the rotational motion.
7.2.2. GUIDANCE
The guidance block is responsible for determining the reference trajectory to be followed. Normally, it should
allow for changes in the reference trajectory depending on different inputs. As has been explained in the
previous section, a possible example could be to abort the desired trajectory and enter a safe mode pointing
towards the Sun because something went wrong. In this master thesis however, the reference trajectories will
not change at all. Therefore, the unit test t make sure that the guidance block has been properly implemented
is to check these reference trajectories.
The ﬁrst scenario is to orbit about Bennu. The orientation of the satellite should be to point towards
the center of the asteroid at all times, as described in Section 2.3. To verify that the guidance block works

68
7.2. VERIFICATION AND PSEUDO-VALIDATION
Figure 7.20: Orbiting reference trajectory 3D view
as expected, a graphical representation of the trajectory with the orientation of the spacecraft have been
plotted. Figure 7.20 shows a three-dimensional view of the desired motion for the orbiting scenario. The
blue-red-green arrows represent the body axes of the spacecraft. As can be seen, the green arrows (z body
axis) always point towards the center of the asteroid. A simple test has been carried out to make sure of that.
The position vector in the ACI frame has been dot-multiplied with this z body axis at all times and the result
has always been zero. This proves that their directions are always parallel and that the satellite is indeed
pointing towards the center of the asteroid at all times. The blue arrows (x body axis) are always parallel to
the Sun direction. A dot-product multiplication between these axes and the Sun vector has been carried out
to make sure of that. Finally, both the linear and angular velocity have been numerically differentiated and
compared with the values coming from the guidance block. The results have been exactly the same. With
these tests and the graphical visualization of the trajectory, one can be sure that the guidance block is indeed
working as expected and that its outputs are correct.
The second scenario is to hover around Bennu. Similar tests have been carried out for this case. The po-
sition and velocity of the spacecraft have been checked to be constant at all times, with the correct values. All
zeros in the case of the velocity for example. In the hovering scenario, the spacecraft has to point towards the
center of the asteroid again. The same test than for the orbiting scenario has been carried out with successful
results. A graphical three-dimensional representation of the motion can also be seen in Figure 7.21. As can
be seen, the outputs from the guidance block for the hover case are now proven to be correct.
Finally, the last and third scenario is to land on the surface of Bennu. The satellite should point towards
the center of the asteroid at all times as well. The exact same tests than for the previous scenarios, have been
carried out with successful results. Figure 7.22 shows the graphical three-dimensional representation of the
reference trajectory. As can be seen, the spacecraft is pointing towards the center of the asteroid during all the
landing procedure. The blue-red-green arrows still represent the orientation of the spacecraft (body axes). As
an additional test for the landing scenario, the position vector of the satellite has been dot-multiplied with
the x axis of the asteroid in this case. Since the spacecraft is supposed to follow this axis until landing, the

7. SIMULATOR DESIGN
69
results have been always zeros. This proves that these vectors are always parallel and that the spacecraft is
indeed following the x axis of the asteroid. The velocity has been expressed in the asteroid rotating frame and
checked that it is indeed 10 cm/s at all times. For these reasons, the guidance block can be said to be veriﬁed
and that it provides the expected reference trajectories.
7.2.3. CONTROL, ACTUATORS AND SENSORS
The next sub-blocks to be veriﬁed and validated are the control and actuators sub-blocks. They have been
grouped together because they can be veriﬁed and validated at the same time with a single unit test. The
purpose of these blocks is to compute a force and torque command to steer the spacecraft back to its reference
trajectory. This has to be carried out with some limitations coming from the actuators, deﬁned in Chapter
2. The unit test consist in running several test cases and verifying that the controls commands are actually
Figure 7.21: Hovering reference trajectory 3D view
Figure 7.22: Landing reference trajectory 3D view

70
7.2. VERIFICATION AND PSEUDO-VALIDATION
correct.
The ﬁrst test case consists in evaluating the control commands when the errors in all state variables are
zero. As has been explained in Chapter 5, the control commands when there is no error, should be the refer-
ence accelerations indeed. This can be seen in Equations (5.8), (5.14) and (5.15). It is exactly the same for the
classical method than for the dual quaternion method. Since the guidance block has been already veriﬁed,
the outputs from the control sub-block have been compared with the reference accelerations for the case of
zero error. Results show that they are indeed the same.
The second test case consists in computing the control commands when the reference accelerations are
zero and there is actually a certain given error in the state variables. The computed commands should be
these errors multiplied by the control gains. This test has been carried out for both the classic and dual
quaternion representations, and the results have been correct.
The third test case consists in running several different simulations and checking that the control com-
mands actually steer the spacecraft through the reference trajectory. For the sake of readability only one
example will be shown. However, this test has been carried out for all three mission scenarios and with differ-
ent initial conditions each. This example consists in hovering on Bennu with certain initial errors in all state
variables. The results from this test case show that the controller is actually capable of correcting these ini-
tial errors and bring the spacecraft back to the reference trajectory. Figures 7.23a and 7.23b show the control
forces and torques of this simulation, for both the classic and dual quaternion representation. As can be seen,
the forces and torques are saturated at 20 N and 0.2 Nm at the beginning, and then released. This proves that
the actuators sub-block is well implemented and that it does not allow to outreach the actuators capabilities
deﬁned in Chapter 2. As can be seen, all control commands converge to almost zero, with ﬁnal values corre-
sponding to the reference accelerations. This proves that the control sub-block is well implemented and that
it is able to steer the spacecraft back to the reference trajectory. The same successful results happened in all
the simulated test cases, proving that the control and actuators sub-blocks work as expected.
Finally, since there are actually no sensors, the spacecraft motion is believed to be exactly the same com-
ing out from the numerical integrations. For this reason, it is not possible to verify or validate this sensor
block. It has been grouped together with the previous blocks for compactness of the document.
7.2.4. SYSTEM TEST
Last but not least, a system test has been carried out for each of the mission scenarios. The system test
consists in verifying and validating that the simulator, as a complete system, works as expected and provides
valid results. So far, all different sub-blocks have been separately veriﬁed and validated through the unit tests
deﬁned in previous sub-sections. However, the combination of all sub-blocks working together to achieve
the ﬁnal goal, has not been tested yet. This is the purpose of the system test; to check whether or not the
simulator, as a system, works correctly.
Taking this into account, a different system test has been run for each mission scenario. All the input
parameters and speciﬁcations of each simulation are summarized in Tables 7.3 to 7.5. As can be seen, all

7. SIMULATOR DESIGN
71
(a) Control forces and torques commands with classic
approach
(b) Control forces and torques commands with dual
quaternions
Table 7.3: Parameters for orbiting system test
Parameter
Value
Initial position (ACI frame)
[ 1500 ; 0 ; 0 ] m
Initial velocity (ACI frame)
[ 0.0356 ; -0.0469 ; 0 ] m/s
Initial attitude
[ 1 ; 0 ; 0 ; 0 ]
Initial angular velocity (Body frame)
[ 0 ; 0 ; 0 ] ·10−3 rad/s
Integration and control freq.
IF = 0.1 Hz; CF = 0.1 Hz
Time span
0 - 44.46 h
Classic control gains
Kq = 4.46,Kω = 170
Dual quaternion control gains
Kq = 5.57,Kω = 214.28
simulations have a starting initial error in all state variables. In this way, it is possible to see if the controllers
are able to steer the spacecraft back to the reference trajectory. The control gains have been selected so that
the spacecraft has the minimum settling time and and minimum error. It is important to notice that for these
system tests, the procedure described in Section 5.3 for gains optimization, has not been followed. The only
goal of these tests was to verify the behavior of the simulators.
After carrying out these system tests for the three mission scenarios, the simulator worked as expected
and provided successful results. The spacecraft was able to follow the reference trajectory in all cases. All
different sub-blocks worked together as expected, providing a valid solution to each of the mission scenarios.
For the sake of readability, all these system tests results are shown in Appendix B. Only a representative
example proving that the spacecraft is indeed following the reference trajectory is shown in this section. This

72
7.2. VERIFICATION AND PSEUDO-VALIDATION
Table 7.4: Parameters for hovering system test
Parameter
Value
Initial position (ACI frame)
[ -287.5639 ; -688.9294 ; 0.5000 ] m
Initial velocity (ACI frame)
[ -0.0100 ; 0.0100 ; 0.0050 ] m/s
Initial attitude
[ 0.1937 ; 0.0977 ; 0.7010 ; 0.6794 ]
Initial angular velocity (Body frame)
[ 0.1745 ; -0.1745 ; 0.0873 ] ·10−3 rad/s
Integration and control freq.
IF = 2 Hz; CF = 2 Hz
Time span
0 - 600 s
Classic control gains
Kq = 285.17,Kr = 388.89,Kω = 1272.70,Kv = 1955.60
Dual quaternion control gains
Kq = 97.78,Kr = 6.22,Kω = 505.56,Kv = 6
Table 7.5: Parameters for landing system test
Parameter
Value
Initial position (Inertial frame)
[ 346.46 ; -1 ; 0.5 ] m
Initial velocity (Inertial frame)
[ -0.11 ; 0.01 ; 0.05 ] m/s
Initial attitude
[ 0.4678 ; 0.5218 ; -0.4854 ; -0.5228 ]
Initial angular velocity (Body frame)
[ 0.0932 ; 0.6336 ; -0.0191 ] ·10−3 rad/s
Integration and control freq.
IF = 2 Hz; CF = 2 Hz
Time span
0 - 600 s
Classic control gains
Kq = 285.17,Kr = 303.02,Kω = 1272.70,Kv = 1997.56
Dual quaternion control gains
Kq = 117.14,Kr = 5,Kω = 560,Kv = 5
example corresponds to the landing scenario for the classical representation. Figure 7.24 shows the evolution
of all the different reference state variables over time. As can be seen, position and velocity are expressed
in the ACI reference frame, showing the reference trajectory to be followed by the spacecraft. The errors in
the trajectory after running the system test are shown in Figure 7.25; where the differences between all state
variables and their reference are shown. As can be seen, after a settling time, all variables manage to come
back to the reference values despite the initial errors.
There is always an overshot to correct the trajectory, and then, all variables remain within the mission
requirements. In this speciﬁc system test, the overshot for the position has a maximum of 1 m. This means
that the spacecraft is 1 m away of its nominal trajectory and then goes fast to its nominal position. For the
velocities, the maximum overshot is 0.1 m/s; whereas it is 0.075 deg/s for the angular velocities. The attitude
does not have an overshoot. In this case, it is represented as the angle to be rotated so that the spacecraft is
pointing to its desired direction. In this system test, it starts with a pointing error of 1.5 deg and it quickly
goes to zero. The blue boxes represent a zoom-in of speciﬁc regions of the plot. In this way, it is easy to see
that all components are indeed converging to the reference trajectory, within the mission requirements.
Finally, Figure 7.26 shows the different control commands generated by the control block over time. As
can be seen, both the forces and torques are saturated at the beginning. Then, they all go to almost zero values
to steer the spacecraft so that it follows the reference trajectory. For this speciﬁc system test, the translational

7. SIMULATOR DESIGN
73
Figure 7.24: Reference state variables values for the landing scenario (obtained by the classical method)
Figure 7.25: State variable errors with respect to reference trajectory with classical approach
motion reaches stability faster than the rotation motion.
Bearing all these results in mind, it is now possible to arrive to the conclusion that the implemented
simulator works as expected. Now, it has been veriﬁed and validated, and it is ready to provide useful results
for comparing the dual quaternion approach with the classical representation.

74
7.2. VERIFICATION AND PSEUDO-VALIDATION
Figure 7.26: Control forces and torques commands with classical approach

8
RESULTS
This chapter presents the results of this master thesis. After having developed a simulator following the steps
described in Chapter 7, it is possible to compare both methods and answer the research questions. First of
all, in Section 8.1, a simple kinematic propagation test is carried out for determining the computational time
of each representation to solve the equations of motion. Second, a more complex scenario is presented in
Section 8.2 where the comparison is carried out for a two body problem. The accuracy of the solutions is
compared versus the time spent. Third, in Section 8.3, both control approaches are compared in the nominal
scenarios of orbiting, hovering and landing. Finally, in Sections 8.4 and 8.5, a sensitivity analysis of the control
frequency is carried out, together with a stability comparison. With all these comparison tests, some very
interesting conclusion are drawn.
8.1. KINEMATIC PROPAGATION
The ﬁrst candidate advantage of dual quaternions was that they could be faster than classical methods be-
cause there are only two equations of motion to be solved, instead of four. Since the rotational and transla-
tional motions are coupled, the integration can be carried out at the same time (as explained in Chapter 4)
and could take less computational time. To verify this hypothesis, a very simple test has been performed. It
consists in doing a kinematic propagation of a rigid body without the inﬂuence of any force or torque. The
goal is to determine the computational time each method takes to integrate the equations of motion, given
some equal initial conditions.
The test is deﬁned as a rigid body spinning about the y body axis with an initial angular velocity of ωx = 0,
ωy = 0.02 and ωz = 0 rad/s and a translational initial velocity of vx = 1, vy = 2 and vz = −1 m/s. Its initial
position is the origin of the inertial reference frame and its initial orientation is deﬁned with the quaternion
75

76
8.2. TWO BODY PROBLEM
Table 8.1: Time to run the kinematic propagation with step-size of 1 s
Classical Method
Dual quaternion method
Time
0.6855 s ± 0.004 σ
1.3603 s ± 0.0174 σ
components q0 = 1, q1 = 0, q2 = 0 and q3 = 0. The integration has been carried out for the duration of 3000 s,
with a range of different time-steps (from 10 to 0.01 s).
Since the computer used for all the simulations in this master thesis is a Macintosh, the time it takes to
run a matlab routine is not constant. Because of the multi-tasking nature of its processor, depending on
the number of other applications running at the same time, more or less computational power is dedicated
to run the routine. This makes the computational time to change a little bit. To cancel this drawback, all
simulations have been carried out several times and only the mean value with its standard deviation has been
considered. In all cases, only Matlab was running and all other applications were closed. For this speciﬁc
test, all simulations were carried out 1000 times for each time step. The results from this test show that dual
quaternions always take more time to propagate the equations of motion. For the sake of readability, only
results from the time-step of 1 s are presented in Table 8.1.
As can be observed, with a time step of 1 s, the dual quaternion representation takes almost twice as time
as the classical representation. This ratio between methods is independent of the integration time-step. This
clearly shows that the initial hypothesis of dual quaternions being faster, is not true. Despite the fact of only
having two equations of motion, dual quaternions take more time to propagate the six degrees of freedom
of a solid rigid. The reason for this is hidden in the dual quaternion operations. Even though there are only
two equations of motion with less dual quaternion operations, the total number of basic operations that has
to be computed is much larger. As deﬁned in Section 3.2, the dual quaternion multiplication, for instance,
involves three separate quaternion multiplications and several vector summations. For this reason, the total
number of basic operations involved in each kinematic propagation has been computed. It turns out that, for
the dual quaternion representation, it is almost four times larger than for the classical representation. Basic
operations have to be understood as additions, subtractions, multiplications and divisions. And this is the
reason why the dual quaternion representation takes more time.
8.2. TWO BODY PROBLEM
The fact that dual quaternions take more time for a simple kinematic propagation, does not necessarily mean
that they have to be always slower for any application. One of the main advantages of dual quaternions is
that they naturally couple the rotational and translational motions. They integrate both motions at the same
time, whereas in the classical method, they have to be integrated separately. Due to this natural coupling,
despite the fact of taking more time in each integration, they could allow for longer time-steps, resulting in
a reduction of the total time. Another possibility is that for a given integration frequency, dual quaternions
could be more precise than classical representations. To test these hypothesis, a more complex scenario have

8. RESULTS
77
been considered. Since these hypothesis are based on the natural coupling between motions, these coupling
effects have to be present. For this reason, a two body problem with the spacecraft orbiting the asteroid has
been selected. The forces involved are: the gravitational force approximated by spherical harmonics, the SRP
force and third body perturbations. The only torques affecting the spacecraft are the gravity gradient ones.
The goal of this test is to determine if dual quaternions allow for larger step-sizes and if they can be more
precise than classical representations. To achieve this goal, one has to integrate the equations of motion
with a variable step size method. Then, looking at the relationship between computational total time and
precision, some conclusions can be drawn. For this reason, several orbits with different initial conditions
have been simulated and studied. The result of each simulation is a plot of the time that it takes, by each
method, to integrate the solution, given a certain tolerance error. In this way, it is possible to determine
which method is more precise given a certain computational time. Or in other words, which method takes
more time given a certain tolerance error.
To do so, the matlab ode45 function has been used. It is an already implemented numerical integrator,
based on the Felhberg method (or commonly known as Runge-Kutta 4(5)). The error in the solution can be
estimated and controlled by using the higher-order embedded method that allows for an adaptive step-size
to be determined automatically. To generate the plots, the total time spent to compute the solution has been
calculated for a range of different error tolerances. For each error tolerance, the simulation has been carried
out 100 times, and only the average time spent has been taken into account with its standard deviation. It is
important to mention that, to control the error of the solution, the parameters RelTol and AbsTol have been
used. They are odeset input parameters and it is crucial to understand them.
RelTol is the relative error tolerance. It measures the error relative to the order of magnitude of each so-
lution component. Roughly speaking, it controls the number of correct digits in all solution components.
AbsTol is the absolute error tolerance. It is a threshold below which the value of the solution becomes unim-
portant. If the solution is smaller than the AbsTol, then the solver does not need to obtain any correct digits.
For this reason, the value of this tolerance should take into account the scale of the solution components. In
this thesis, the order of magnitude of some state variables is 10−3, for this reason, it has been stablished that,
the AbsTol should never be smaller than 10−6. For the sake of simplicity, from now on, the expression ’error
tolerance’ will refer to both RelTol and AbsTol with the same value, if not indicated otherwise.
The ﬁrst orbit scenario is a circular orbit (e = 0) about Bennu, with a semi-major axis of 1500 m and
without inclination (i = 0). The initial orientation is deﬁned to be q = (1,0,0,0) and no initial angular velocity
is considered. The simulation time is one orbital period, which is about 44.5 hours for this speciﬁc orbit. The
results from this scenario are shown in Figure 8.1. As can be seen, the dual quaternion approach always takes
more time to compute the solution given a certain error tolerance. The smaller the error tolerance, the bigger
the difference between methods. With an error tolerance of 10−14, the dual quaternion method takes 42.26 s,
whereas the classical one only takes 12.46 s. This is almost 3.4 times slower. For this speciﬁc orbit, it is clear
that the previous hypothesis was wrong. Despite the fact of naturally coupling the rotational motion with the
translational one, the dual quaternion representation does not allow for longer steps sizes, and it still takes
more time to compute the solution given a certain error tolerance.

78
8.2. TWO BODY PROBLEM
Figure 8.1: Simulation time versus error tolerances for circular orbit at 1500 m
To make these results more general, four other different orbit scenarios with different initial conditions
have been simulated as well. In the ﬁrst scenario, the orbit did not have eccentricity or inclination. Also, the
angular speeds were very small. If the goal is to analyze the beneﬁts of dual quaternions, extreme scenarios
with stronger couplings between motions have to be tested. That is why the next following tests try to go to
the limits of orbiting scenarios. A second scenario, for instance, consists in performing another circular orbit
(e = 0) but closer to Bennu. This time, the semi-major axis has been set to only 500 meters. The inclination
has been kept at zero (i = 0). The initial orientation has been deﬁned to be q = (1,0,0,0) as well, but now,
some initial angular velocity is taken into account: ωx = 0.001, ωy = −0.001 and ωz = 0.0005 rad/s.
A third orbit scenario is an equatorial elliptical orbit (e = 0.44) with periapsis at 500 m. The initial position
in the ACI frame has been deﬁned to be r 0 = (0,500,0) m with initial velocity of v0 = vc(1.2,0,0) m/s. vc is the
circular orbital velocity at this initial point. The initial orientation has been deﬁned to be q = (1,0,0,0), with
an initial angular velocity of ωx = 0.001, ωy = −0.001 and ωz = 0.0005 rad/s.
A fourth orbit scenario consists in the same elliptical orbit (e = 0.44), but now some inclination is taken
into account (i = 45o). The initial position in the ACI frame has been deﬁned to be r 0 = (0,500,0) m with a
velocity of v0 = vc(
p
2/2,0,
p
2/2) m/s. The initial orientation was q = (1,0,0,0), with initial angular velocity
components: ωx = 0.001, ωy = −0.001 and ωz = 0.0005 rad/s.
Finally, to go to even more extreme situations, a ﬁfth and last scenario has been deﬁned as an elliptical
orbit (e = 0.7) with an inclination of 45o an periapsis at 416 m. Moreover, the the angular velocities have
been increased to ωx = 0.01, ωy = −0.01 and ωz = 0.005 rad/s, which means ten times faster than previous
scenarios.
In all these scenarios, the results have been exactly the same than the ﬁrst scenario. For this reason and
for the sake of readability, they are not shown in this document as ﬁgures. Dual quaternions always take
more time to compute the solution given a certain ﬁxed error tolerance. However, one relevant aspect has
been discovered. The more extreme the scenario is and the more coupled the rotational and translational

8. RESULTS
79
Table 8.2: Times dual quaternions are slower than classical method
1st scenario
2nd scenario
3rd scenario
4th scenario
5th scenario
Times DQ slower
3.3
2.2
1.9
1.6
1.4
motions are, the smaller the differences between methods become. Taking the error tolerance of 10−14, the
ratio between the time spent for the dual quaternion method and the classical one is summarized in Table
8.2. As can be seen, the ratio is always higher than one but gets reduced in each scenario.
These results state that, for the tested orbiting scenarios, dual quaternions take more time to compute a
solution with a given error tolerance than the classical representation. They also show that, for these scenar-
ios, dual quaternions do not allow for larger step sizes. However, these results also suggest that, maybe in a
highly coupled rotational and translational dynamics situation, dual quaternions might still have some ad-
vantages, or at least be equal than classical representations, in terms of precision and computational speed.
This suggestion, of course, has to be tested. And there is no better scenario than the ones described in Section
2.3 of this thesis for testing them.
8.3. NOMINAL SCENARIOS
So far, it has been proven that for the tested scenarios, dual quaternions are slower than classical represen-
tations to achieve the same level of accuracy in the solutions. However, no control has been applied yet. In
the previous scenarios, the coupling between the translational and the rotational motion was present be-
cause of the dependency of some forces with the attitude of the spacecraft (such as the SRP force); and the
dependency of the gravity gradient torque with the position of the spacecraft. However, these couplings are
weak and do not have a clear impact for the simulated periods of times. When they do become important
is when introducing controls laws. Since the direction of the control thrust force is dependent on the space-
craft orientation, attitude motion can deﬂect an imposed control force and affect translational motion in this
way [Wang and Xu, 2014]. For this reason, comparing the performance of each method in the mentioned
scenarios, with the spacecraft trying to follow a given reference trajectory, will allow to test the hypothesis
mentioned in the previous section. This will also determine which advantages or disadvantages, the dual
quaternion representation has in terms of controlability, energy consumption and stability.
It is important to mention that, in the three close-proximity scenarios deﬁned in Section 2.3, the gains
have been optimized following the methodology described in Section 5.3. The spacecraft always starts in the
reference trajectory and therefore, the initial errors are always zero.
8.3.1. ORBITING
The ﬁrst scenario deﬁned in Section 2.3 is the orbiting scenario. It consists in orbiting Bennu in a Sun-
synchronous terminator orbit at 1500 m. The initial conditions and all the parameters for the simulations
are summarized in Table 8.3. The selected gains are the ones found in Section 5.3.

80
8.3. NOMINAL SCENARIOS
Table 8.3: Initial conditions an settings for orbiting simulation
Parameter
Value
Initial position (Inertial frame)
[ 0; 0 ; 1500 ] m
Initial velocity (Inertial frame)
[ 0.03563 ; -0.04687 ; 0 ] m/s
Initial attitude
[ 0 ; -0.3193 ; 0.9476 ; 0 ]
Initial angular velocity (Body frame)
[ -1.9626 ; -0.000002106 ; -0.1074 ] ·10−5 rad/s
Integration and control freq.
IF = 1 Hz ; CF = 0.5 Hz
Time span
1 orbital period (1.6·105s)
Classic control gains
Kq = 1165.0,Kω = 1129.0
Dual quaternion control gains
Kq = 208.3,Kω = 1108.0
Figure 8.2: State variable errors with respect to reference trajectory with classical approach
After performing the same simulation with the classical method and the dual quaternion one, the results
obtained are almost identical. For this reason and for the sake of readability, only the classical results will be
shown in this case; and the tinny differences will be explained.
As a ﬁrst result, both control approaches succeeded in guiding the spacecraft through the reference tra-
jectory, and within the requirements deﬁned in Section 2.2. Figure 8.2 shows the errors between the classical
solution and the reference trajectory. It is important to mention that, for the orbiting scenario, only the ro-
tational motion had to be controlled. This scenario tries to represent real missions, where the spacecraft is
orbiting in a stable orbit around the asteroid, and only attitude control is required for scientiﬁc purposes. For
this reason, only errors in attitude and angular velocities are shown.
As can be seen, the order of magnitude of the pointing errors is 10−6 degrees, whereas the requirement
was 0.01 degrees. The order of magnitude of the angular velocity errors is 10−11 degrees per second, whereas
the requirement was 1·10−4 degrees per second. Both of them are well below the requirements. The errors ob-
tained with the dual quaternion approach are exactly the same. No differences can be appreciated comparing
the plots.

8. RESULTS
81
Figure 8.3: Rotational motion errors for the orbiting scenario
Several things are worth mentioning. First, the pointing errors only have discrete values. This is because
the pointing error has been computed as two times the arc-cosine of the ﬁrst component of the attitude
quaternion. It represents the angle to be rotated so that the orientation of the spacecraft is the same as the
reference one. Since all state variables have been treated as double ﬂoating point precision numbers, the
ars-cosine function has a maximum precision of 10−7 degrees, when close to zero. This is the reason why the
values are discrete. Second, the angular velocity errors have some oscillations in the order of magnitude of
10−11, but they are stable. The simulation time has been increased up to ten orbits and these oscillations have
remained constant. This also happens in the exact same way for the dual quaternion representation. Third
and ﬁnally, despite the fact that it cannot be observed in Figure 8.2, the angular velocity has an overshot
of almost 3·10−9 degrees per second in the y axis, before stabilizing.The overshoot for the dual quaternion
representation is in the same order of magnitude.
To numerically compare the errors of both methods, each error state component has been integrated
over time. In this way, the total accumulated error can be compared. Figure 8.3 shows this comparison in a
histogram. The blue bars represent the total accumulated pointing error. It is the summation of the absolute
values of the angle to be rotated over the time of simulation. The red bars represent the total accumulated
angular velocity errors. It is the summation of the errors in all three body axes over time. The green bars
represent the summation of the blue and red bars. It represents the total rotational error of each method. It is
important to mention that, all errors have been normalized with their requirements. In this way, it is possible
to add pointing errors with angular velocity errors. Therefore, the physical meaning is the number of times
the accumulated error exceeds each requirement.
As can be seen, the accumulated errors are almost the same for both methods. To be more precise, the
total accumulated rotational error ( green bar ) for the dual quaternion representation is 0.356, whereas for
the classical representation it is 0.354. This difference is insigniﬁcant. These results state that both methods
have the same errors and behave in very similar ways for this orbiting scenario.
A second aspect to be compared of both methods is the energy spent. It could happen that for achieving
the same errors, one of them spends much more energy. Figure 8.4 shows the control torques commands for
each methods. As can be seen, they are identical again. This probably explains why the error performance is

82
8.3. NOMINAL SCENARIOS
Figure 8.4: Control torque commands for the orbiting scenario (classical and dual quaternion)
Figure 8.5: Rotational energy spent for the orbiting scenario
also identical. If the control torques are the same, the spacecraft will follow the same trajectory. It is worth
mentioning that, the the order of magnitude of the torques is 10−6 N·m, which is the order of magnitude of
the gravity gradient torques affecting the spacecraft.
As has been carried out with the errors, to numerically compare both representations, the total energy
spent has been accounted. This is shown in Figure 8.5. The blue-red-yellow bars represent the integration
over time of each torque in the three body axes. As can be seen, the total energy spent by each method is
again almost identical. To be more precise, the difference in energy spent is only 4·10−11 N·m·s, whereas the
order of magnitude of the values is 10−1 N·m·s. This difference is completely insigniﬁcant. For this reason, it
can be afﬁrmed that both methods used the same amount of energy to achieve the same level of precision.
Finally, after proving that both methods are completely equivalent in terms of errors and energy, the time
spent for each method has to be compared. Maybe, to achieve the same performance, one method takes
more computational time than the other. And this is clearly the case. After running the same simulation 1000
times, the computational times for each method are presented in Table 8.4. The dual quaternion method
takes clearly more time to achieve the same results than the classical method. The hypothesis of a coupled
rotational and translational dynamics problem with dual quaternions being faster, has been proven to be
false for the orbiting scenario.
To conclude, this section has proved that the dual quaternion representation takes more time to achieve
the same level of precision and energy consumption than the classical representation.

8. RESULTS
83
Table 8.4: Time to run orbiting scenario
Classical Method
Dual quaternion method
Time
24.267 ± 0.034 s
28.045 ± 0.039 s
Table 8.5: Initial conditions an settings for hovering simulation
Parameter
Value
Initial position (Inertial frame)
[ -288.563 ; -687.929 ; 0 ] m
Initial velocity (Inertial frame)
[ 0. ; 0. ; 0 ] m/s
Initial attitude
[ 0.1812 ; 0.0973 ; 0.7004 ; 0.6835 ]
Initial angular velocity (Body frame)
[ 0 ; 0 ; 0 ] ·10−3 rad/s
Integration and control freq.
IF = 2 Hz ; CF = 0.5 Hz
Time span
0 - 1 h
Classic control gains
Kq = 1065.918,Kr = 862.069,Kω = 1106.531,Kv = 1075.862
Dual quaternion control gains
Kq = 512.727,Kr = 1.818,Kω = 581.818,Kv = 1.818
8.3.2. HOVERING
The second scenario deﬁned in Section 2.3 is the hovering scenario. It consists in hovering at 500 m from the
surface of Bennu. The initial conditions and all the parameters for the simulations are summarized in Table
8.5. The selected gains are the ones found in Section 5.3.
As happened with the orbiting simulations, the results from the hovering scenario of the dual quater-
nion method and the classical one are almost identical again. For this reason and for the sake of readability,
this time, only the dual quaternion results will be shown in this document; and the tinny differences will be
explained.
As a ﬁrst result, both control approaches succeeded in maintaining the spacecraft on the hovering spot
with the right orientation, within the requirements deﬁned in Sections 2.2. Figure 8.6 shows the errors be-
tween the dual quaternion solution and the reference one. The main difference between the hovering sce-
nario and the orbiting one is that the former requires both translational and rotational control. This is the
reason why four different sub-plots are shown in this ﬁgure.
The ﬁrst sub-ﬁgure on the upper left side corresponds to the position errors. As can be seen, the orders
of magnitude of the errors are of 10−11 m, whereas the control requirement is 1 cm. These errors are way
below the requirement. In this case, a ﬁrst transitional region can be observed in the very beginning (spe-
cially in the y direction). After that, the error oscillates but does not increase over time. To prove that, the
hover simulation has been prolonged for ten hours and the results showed that the errors do not grow. This
errors are completely dependent on the gains selected during the optimization process. Similar results are
obtained for the velocities. The order of magnitude is the same but the requirement is 0.01 cm/s, therefore,
the requirement is completely met.
The sub-ﬁgure on the bottom left part of Figure 8.6 corresponds the pointing errors. As can be observed,

84
8.3. NOMINAL SCENARIOS
Figure 8.6: State variable errors with respect to reference trajectory with dual quaternion approach
they are exactly zero. This of course is not true, but because of the working precision, the matlab results
are exactly zero. This means that the error in the ﬁrst component of the attitude quaternion is below 10−16.
Roughly speaking: tinny small attitude errors. Finally, the last sub-ﬁgure on the bottom right, corresponds
to the angular velocity errors. The order of magnitude of the errors is 10−10 degrees per second, whereas the
requirement is 0.0001o/s. A clear overshoot of 8·10−10 can be observed in the y body axis, before stabilization.
The errors obtained with the classical method are almost identical than this ones shown in Figure 8.6. No
differences can be appreciated comparing both results.
Again, as it has been carried out for the orbiting scenario, to numerically compare the errors of both
methods, each error state component has been integrated over time. In this way, the total accumulated error
can be compared. Figure 8.7 shows this comparison in a histogram. In this case, the blue bars represent the
total accumulated position errors; the red bars, the velocity errors; the yellow bars, the pointing errors and
the purple bars the angular velocity errors. The green bars still represent the total summation of all of them.
All bars have been normalized with their speciﬁc requirement deﬁned in Section 2.4. In this way, it is possible
to add pointing errors with position errors, as has already been explained before.
As can be seen, the accumulated errors are again almost the same for both methods. To be more pre-
cise, the total accumulated error (green bar) for the dual quaternion representation is 0.03219, whereas for
the classical representation is 0.03221. This difference is again insigniﬁcant. These results state that both
methods have the same errors and behave in very similar ways for this hovering scenario.
A second aspect to be compared of both methods is the energy spent. Figure 8.8 shows the control forces
and torques commands for each methods. This is different from the orbiting scenario, because now, control
forces are also taken into account for the translational motion. As can be seen, they are almost identical

8. RESULTS
85
Figure 8.7: Translational and rotational motion errors for the hovering scenario
Figure 8.8: Control force and torque commands for the hovering scenario (classical and dual quaternion)
again. As it will be explained later on the results, they will only be different when correcting for perturbations.
If both controllers are optimized in the same way, their performance turns out to be identical for the nominal
scenarios. It is worth mentioning that the order of magnitude of the control torques is 10−5 N·m in this case,
whereas the order of magnitude of the forces is 10−2 N.
To numerically compare both methods, the total energy spent has been accounted. This is shown in Fig-
ure 8.9. On the left part, the total accumulated forces are shown for both the classical and the dual quaternion
representations. As can be seen, both methods consume the same force and it corresponds to the one on the
z body axis. The reason for this is because the spacecraft have to point to the asteroid at all times with the
z body axis. Therefore, the control force has to nullify the gravitation pull in this same direction. On the
right side, the energy consumed for the rotational motion can be observed. Again, both methods consume
almost the same amount energy. To be more precise, the difference in energy spent for the rotational motion

86
8.3. NOMINAL SCENARIOS
Figure 8.9: Rotational energy spent for the hovering scenario
Table 8.6: Time to run hovering scenario
Classical Method
Dual quaternion method
Time
11.090 ± 0.021 s
12.516 ± 0.019 s
is only 10−11 N·m·s, whereas the magnitude of the values are of 10−2 N·m·s. This difference is completely
insigniﬁcant. For the translational motion, this difference is of the order of magnitude of 10−9N, whereas
the magnitude of the values are of 101 N. With these results, one can afﬁrm that both methods use the same
amount of energy to achieve the same level of precision.
Finally, after proving that both methods are completely equivalent in terms of errors and energy, the time
spent for each method has to be compared. After running the same simulation 1000 times, the computational
times for each method are presented in Table 8.6. Again, the dual quaternion method takes clearly more time
to achieve the same results than the classical method.
The same conclusion can be drawn from this hovering scenario than for the orbiting one: the dual quater-
nion representation takes more time to achieve the same level of precision and energy consumption than the
classical representation.
8.3.3. LANDING
The last and third scenario deﬁned in Section 2.3 is the landing scenario. It consists in a landing on the surface
of Bennu following a certain given reference trajectory. The initial conditions and all the parameters for the
simulations are summarized in Table 8.7. The selected gains are the ones found in Section 5.3.
Again, as happened in the previous simulations, the results from the landing scenario of the dual quater-
nion method and the classical one, are almost identical. For this reason and for the sake of readability, this
time, only the classical results will be shown in this document. The tinny differences between methods will
be explained.
As a ﬁrst result, both control approaches succeeded in steering the spacecraft through the reference land-

8. RESULTS
87
Table 8.7: Initial conditions an settings for landing simulation
Parameter
Value
Initial position (ACI frame)
[ 345.46 ; 0 ; 0 ] m
Initial velocity (ACI frame)
[ -0.1 ; -0.1403 ; 0 ] m/s
Initial attitude
[ 0.4743 ; 0.5244 ; -0.4743 ; -0.5244 ]
Initial angular velocity (Body frame)
[ 0.0932 ; 0.6336 ; -0.0191 ] ·10−3 rad/s
Integration and control freq.
IF = 4 Hz ; CF = 1 Hz
Time span
0 - 600 s
Classic control gains
Kq = 3271.429,Kr = 3974.000,Kω = 1978.571,Kv = 2295.000
Dual quaternion control gains
Kq = 950.000,Kr = 0.267,Kω = 1050.000,Kv = 1.213
Figure 8.10: State variable errors with respect to reference trajectory with classical approach
ing trajectory, within the requirements deﬁned in Sections 2.2. Figure 8.10 shows the errors between the
classical solution and the reference one.
The ﬁrst sub-ﬁgure on the top left corresponds to the position errors. As can be seen, the order of magni-
tude of the errors is 10−8 m, whereas the control requirement is 1 cm. Despite the fact of growing with time,
these errors are way smaller than the position requirement. These errors are totally dependent on the control
gains selected in Sectioin 5.3, which have been chosen taken into account energy consumption and accu-
mulated errors. For this nominal trajectory, the selected gains achieve the goal with the minimum energy
consumption. Similar results are obtained for the landing velocities. The order of magnitude is the same but
the requirement is 0.01 cm/s, therefore, the requirement is completely met.
The sub-ﬁgure on the bottom left part of Figure 8.10 corresponds the pointing errors. As can be observed,

88
8.3. NOMINAL SCENARIOS
Figure 8.11: Translational and rotational motion errors for the landing scenario
the pointing error reaches its maximum at the beginning, and then slowly converges to almost zero during
the landing trajectory. The order of magnitude of the pointing errors is 10−6 degrees, far below the attitude
requirement. Finally, the last sub-ﬁgure on the bottom right, corresponds to the angular velocity errors. The
order of magnitude of the errors is 10−8 degrees per second, whereas the requirement is 0.0001o/s. A clear
overshoot of 8·10−6 degrees per second can be observed in the z body axis, before stabilization. The errors
obtained with the dual quaternion method are almost identical than these ones shown in Figure 8.10. No
differences could be appreciated comparing both results.
Again, as it has been carried out for the previous scenarios, to numerically compare the errors of both
methods, each error state component has been integrated over time. Figure 8.11 shows this comparison in a
histogram. All bars are normalized with the speciﬁc requirements deﬁned in Section 2.4.
As can be seen, the accumulated errors are again almost the same for both methods. To be more precise,
the total accumulated error (green bar) for the dual quaternion representation is 1.0052, whereas for the
classical representation is 1.0049. This difference is again insigniﬁcant. It might be important to notice that
the longer bar is the purple one, corresponding to the angular velocity errors. These results state that both
methods have almost the same errors and behave in very similar ways for this landing scenario.
The second aspect to be compared of both methods is the energy spent. Figure 8.11 shows control forces
and torques commands for each methods. As can be seen, they are almost identical again. It is worth men-
tioning that the order of magnitude of the control torques is 10−4 N·m in this case, whereas the order of
magnitude of the forces is 10−2 N.
To numerically compare both methods, the total energy spent has been accounted. This is shown in Fig-
ure 8.13. On the left part, the total accumulated forces are shown for both the classical and the dual quater-
nion representations. As can be seen, both methods consume the same force. On the right side, the energy
consumed for the rotational motion can be observed. Again, both methods consume almost the same energy.
To be more precise, the difference in energy spent for the rotational motion is only 1·10−7 N·m·s, whereas the
magnitude of the values are of 10−2 N·m·s. This difference is completely insigniﬁcant. With these results, one
can state that both methods use the same amount of energy to achieve the same level of precision.
Finally, after proving that both methods are completely equivalent in terms of errors and energy, the time

8. RESULTS
89
Figure 8.12: Control force and torque commands for the landing scenario (classical and dual quaternion)
Figure 8.13: Rotational energy spent for the landing scenario
Table 8.8: Time to run landing scenario
Classical Method
Dual quaternion method
Time
3.715 ± 0.008 s
4.152 ± 0.011 s
spent for each method has to be compared. After running the same simulation 1000 times, the computational
times for each method are presented in Table 8.8. Again, the dual quaternion method takes clearly more time
to achieve the same results than the classical method.
To conclude, in all three different asteroid close-proximity operations, the dual quaternion representation
takes always more time to achieve the same level of accuracy and energy consumption than the classical

90
8.4. FREQUENCY ANALYSIS
Table 8.9: Range of operational control frequencies meeting mission requirements
Classical Method
Dual quaternion method
Orbiting scenario
< 0.5 Hz - 0.465 Hz >
< 0.5 Hz - 0.457 Hz >
Hovering scenario
< 0.5 Hz - 0.459 Hz >
< 0.5 Hz - 0.490 Hz >
Landing scenario
< 1 Hz - 0.834 Hz >
< 1 Hz - 0.541 Hz >
representation.
8.4. FREQUENCY ANALYSIS
In an attempt to further compare both controllers performances, a frequency analysis has been carried out.
So far, it has been proven that both methods achieve the same accuracy and energy consumption with a
certain given control frequency. However, what happens if this control frequency has to be reduced? Will both
controllers still behave in the same way? The aim of this section is to answer this question, and determine
which one pops up earlier.
To do so, the control frequency has been reduced little by little. The initial conditions have been kept the
same, with no initial errors. In this way, it has been possible to determine the lowest frequency at which, each
controller, still can meet the requirements for all three scenarios. The integration frequency and the time
span of each simulation have been kept the same as well. The same applies for the gains. Only the control
frequency has been reduced.
Table 8.9 shows the results of this analysis for each asteroid close-proximity operation. The results are
given with an operation control frequency range. It represents the range of control frequencies at which,
each controller, is still able to meet the mission requirements. As can be seen, for the orbiting and landing
scenarios, the dual quaternion representation has a wider range of frequencies. This means that it can meet
the mission requirements with lower control frequencies.
Results from the landing scenario, for instance, show that the control frequency can be reduced up to
0.834 Hz for the classical representation, and up to 0.541 Hz for the dual quaternion representation. For the
latter case, this represents a reduction of almost the 50% of the nominal frequency. Due to nowadays ﬂight
proven GNC hardware and software frequencies limitations, this result can be very beneﬁcial and save a lot of
money. Results from the orbiting scenario only show a small advantage of the dual quaternion representation
over the classical one. The possible control frequency reduction is a 7% for the classical method and a 8.6%
for the dual quaternion one. This is only a difference of 1.6%.
Finally, results from the hovering scenario show the opposite. The dual quaternion representation stops
meeting the mission requirements with higher frequencies than the classical representation. The reason for
this is unknown. This is clearly a recommended future aspect to study. Several hypothesis have been formu-
lated and proven wrong. For example, it was thought to be because of a local minimum of the optimization
cost function close to the non-converging region. However, this was not the case. Bearing these results in

8. RESULTS
91
mind, it cannot be concluded that dual quaternions are less sensitive to control frequency reductions. Re-
sults are inconclusive and this can only be concluded for the speciﬁc case of orbiting and landing.
8.5. STABILITY ANALYSIS
Another important aspect to be compared is the stability of each controller. Previous results showed that both
representations have the same performance in terms of accuracy and energy consumption, for the nominal
trajectory. However, how does each controller deal with perturbations? What happens if the spacecraft does
not start on the reference trajectory? Chapter 5, together with the stability theory summarized in Appendix A,
proved that both controllers can reach almost global Lyapunov stability. However, is there a controller more
stable than the other? How does each controller steer back the satellite to the reference trajectory? What is
the maximum perturbation each controller can handle?
To answer all these questions, several tests have been carried out for the three asteroid close-proximity
scenarios. The ﬁrst one consists in determining the maximum initial perturbation that each controller can
handle. However, a perturbation of 1 m in the initial position has not the same impact as a perturbation
of 1 m/s in the initial velocity. To solve this dimensional problem, all perturbations have been normalized
with their maximum allowed deviations. In this way, the perturbations have been expressed as the number
of times exceeding the maximum allowed control deviations; becoming therefore, comparable.
The test starts with an initial perturbation of 1 time the maximum allowed deviation in each state variable.
For instance, if the requirement for the position is 1 cm, the initial error for the position has been set to be 1
cm. However, it is not the same to have 1 cm of error in one direction than in another direction. For this rea-
son, 50 different sets of perturbations of 1 cm have been generated with totally random different directions.
It is important to mention however, that these initial conditions have been the same for the classical and dual
quaternion representations. The goal is to determine if each controller is able to handle initial perturbations
of a number of times the maximum allowed deviation in 50 random different directions. It might be worth
mentioning that the control and integration frequency has not been modiﬁed from the ones of the nominal
scenarios. The gains are also the same. The only parameters that have changed are the initial conditions. If
a controller is able to handle a perturbation of 3 times the maximum allowed deviation for each of the state
variables, in 50 different directions, it is then considered to handle errors of this order of magnitude in all
possible directions. This is of course and assumption but it works for comparing each representation. The
magnitude of the perturbations has been increased until a controller is not able to handle the perturbations
anymore.
Results from this test are shown in Table 8.10. They represent the order of magnitude of the initial pertur-
bations that each controller can handle. These results show a very interesting discovery. The dual quaternion
representation can handle much larger initial deviations than the classical representation in all three different
scenarios.
As can be seen, for the orbiting scenario, the dual quaternion representation can meet the mission re-
quirements with initial perturbations of 255 times the maximum allowed deviation. This represents 227 more

92
8.5. STABILITY ANALYSIS
Table 8.10: Initial conditions deviations that still meet the requirements for each scenario
Classical Method
Dual quaternion method
Orbiting scenario
28 times
255 times
Hovering scenario
4 times
202 times
Landing scenario
16 times
39 times
times than the classical representation. The same can be said for the hovering scenario, with 198 times more.
For the landing scenario, the difference is a little bit smaller with only 23 times more. These results are very
important because they prove that dual quaternions, despite the fact of taking more time to achieve the same
level of accuracy and energy consumption, they can handle much larger perturbations than the classical rep-
resentation. For real asteroids missions, this is a very important advantage. As has been explained in Chapter
2, the dynamical environment around asteroids is not always properly modeled and there are always pertur-
bations. The results found in this test show that dual quaternions are more suited for these perturbations.
Dual quaternions might be able to deal with larger perturbations, however, given a perturbation, which
method is more efﬁcient in terms of energy? Which control approach takes more time? Which controller has
a shorter settling time and brings the spacecraft back to the reference trajectory with less accumulated errors?
To answer all these questions, a second test has been carried out. It consists in testing both controllers for a
given set of initial conditions with certain deviations. For each set of initial conditions, four different aspects
will be analyzed: the energy spent; the time it takes to run the simulation, the settling time and the total
accumulated error.
It is important to mention, that the initial conditions are the same for both controllers. In the range of
stability perturbations computed in the ﬁrst test, 800 random initial conditions with deviations have been
generated for each scenario. Results are presented here as histograms. The bars of the histograms represent
the number of times each controller has a results in a speciﬁc range of values. For instance, how many of the
800 simulations took between 3 and 4 seconds to run. In this way, it is possible to compare both approaches
and drew some conclusions.
8.5.1. ENERGY
The ﬁrst aspect to be compared is the energy spent by each control approach. Figures 8.14 to 8.16 show the
results. Figure 8.14 shows the histograms for the orbiting scenario. As can be observed, the dual quaternion
controller uses much less energy in general than the classical controller. To take some statistical results,
a normal distribution has been ﬁtted to both histograms. The mean average energy spent by the classical
controller is 604.988, while it is only 64.889 for the dual quaternion one. These numbers do not have units
because they have been normalized with the maximum force and torque available by the spacecraft actuators.
They represent the summation of all forces and torques over time, in all three body axes, normalized with
these maximum available limits. Without any doubt, the classical controller consumes more energy.

8. RESULTS
93
Figure 8.14: Energy spent by each method given a set of initial deviations ( orbiting scenario )
Figure 8.15: Energy spent by each method given a set of initial deviations ( hovering scenario )
Figure 8.15 shows the same results but for the hovering scenario. As can be seen, the classical approach
also consumes much more energy than the dual quaternion one. However, in this case, it was not possible to
ﬁt a normal distribution because the energy spent by each controller follows a gamma distribution instead.
The gamma distribution is a two-parameter family of distributions used to model sums of exponentially dis-
tributed random variables. a is the shape parameter and b is the scale parameters. The estimated value is
their multiplication. Gamma probability functions are used, for example, to model waiting times in airports
or multi-path fading of signal power in wireless communications. After ﬁtting the curves, the mean value for
the classical controller is 1100.446, whereas it is 243.920 for the dual quaternion one.
Finally, Figure 8.16 shows the results for the landing scenario. In this case, it was possible to ﬁt a normal
distribution for each controller again. The results are the same as the previous ones: the classical representa-
tion consumes 3.2 more energy than the dual quaternion representation.
From these results, a very important conclusion can be drawn: dual quaternions can deal with initial
perturbations in a more efﬁcient way than the classical controllers in terms of energy consumption. This is
also an outstanding advantage of the dual quaternions over the classical representation because efﬁciency in
space means less fuel. And less fuel means less money.

94
8.5. STABILITY ANALYSIS
Figure 8.16: Energy spent by each method given a set initial deviations ( landing scenario )
Figure 8.17: Accumulated errors by each method given a set initial deviations ( orbiting scenario )
8.5.2. ERRORS
The second aspect to be compared is the total accumulated error of each controller. Figures 8.17 to 8.19
show the results for each of the three scenarios. It is important to notice that the accumulated error has been
computed in the same way as previous tests. Since errors in position are not the same as errors in velocity,
all errors have been normalized with their maximum allowed value. In this way, the total error plotted in
these ﬁgures represent the summation of all the state variables normalized errors. Again, the results are
shown in the form of histograms. Figure 8.17 shows the total accumulated errors for the orbiting scenario.
As can be seen, the dual quaternion representation has much less errors than the classical one. In this case,
the mean value of the total accumulated errors for the dual quaternion controller is 77954.214, whereas it is
357669.830 for the classical one. It is important to notice that, a normal distribution has been ﬁtted for the
dual quaternion controller histogram, whereas a gamma distribution has been ﬁtted for the classical one.
Figure 8.18 shows the same results but for the hovering scenario. As can be seen, the classical approach
also has much more accumulated errors than the dual quaternion one. In this case, the differences were so
big that they had to be plotted in separate histograms to appreciate the information. Again, these histograms
follow a gamma distribution. The mean value of the total accumulated error for the classical controller is
3.123494·106 and 1.65085·105 for the dual quaternion one.
Finally, Figure 8.19 shows the error results for the landing scenario. In this case, it was possible to ﬁt a
normal distribution for each controller again. The mean value of accumulated errors for the classical control

8. RESULTS
95
Figure 8.18: Accumulated errors by each method given a set initial deviations ( hovering scenario )
Figure 8.19: Accumulated errors by each method given a set initial deviations ( landing scenario )
approach is 9.468·105, whereas it is only 3.620·105 for the dual quaternion approach.
Bearing these results in mind, an important conclusion can be drawn. In all simulations, despite the
fact of having initial errors, both controllers are always available to steer the spacecraft back to the reference
trajectory. After reaching stability, as it has been proven in Section 8.3, both controllers behave equally and
have the same errors. For this reason, if the dual quaternion control approach is showing much less errors
during these simulations, it is because it achieves stability much faster than the classical control approach.
And for this reason, it can be stated that, the dual quaternion approach has a much shorter settling time than
the classical one. This is a very important advantage to take into account when selected a control approach
in real missions. To statistically prove this conclusion, the next subsection shows the settling times of each
scenario.
8.5.3. SETTLING TIME
The third aspect to be compared is the settling time. It is important to mention that it has been computed as
the time each controller takes to bring the state variables within the mission requirements, after correcting
for a perturbation. Results are presented again as histograms, and shown in Figures 8.20 to 8.22. Figure 8.20
shows the settling time for each control approach in the orbiting scenario. As can be seen, both controllers

96
8.5. STABILITY ANALYSIS
Figure 8.20: Settling time for each method ( orbiting scenario )
Figure 8.21: Settling time for each method ( hovering scenario )
manage to stabilize the initial perturbations after less than 250 s. To be more precise, the average settling
time for the dual quaternion controller is 57.9 s, whereas it is 81.9 s in the classical control. Clearly, the
controller based on dual quaternions takes less time to bring the different state variables back within the
mission requirements.
Figure 8.21 shows the histogram results of settling times for the hovering scenario. In this case, the average
settling time for the classical approach is 517 s, whereas it is only 216.9 s for the dual quaternion controller. A
gamma distribution have been ﬁtted to both histograms. Again, the dual quaternion approach proves to be
much faster in recovering from initial perturbations, speciﬁcally, 58.03% faster. It is also worth mentioning
that dual quaternions manage to stabilize all perturbations before 500 s; whereas the classical approach can
take up to more than 2500 s in some cases.
Finally, Figure 8.22 shows the settling time results for the landing scenario. As can be seen, the average
settling time for the classical controller is 203.7 s, whereas it is only 15 s for the dual quaternion represen-
tation, which represents a reduction of 92.6%. It is important to notice that the dual quaternion controller
manages to stabilize all initial perturbations before the ﬁrst 25 s. However, the classical one takes longer times
and follows a gamma distribution, rather than a normal one.
These histogram results prove what have been stated in the previous subsection: controllers based on
dual quaternions have a shorter settling time when correcting for initial perturbations.

8. RESULTS
97
Figure 8.22: Settling time for each method ( landing scenario )
Figure 8.23: Computational time spent for each method ( orbiting scenario )
Figure 8.24: Computational time spent for each method ( hovering scenario )
8.5.4. COMPUTATIONAL TIME
Finally, the last aspect to be compared is the computational time each controller is taking to run the simu-
lation. Figures 8.23 to 8.25 show the time results. As has already been proven before, the dual quaternion
approach takes more time to compute the control commands and integrate the solution. With no surprise,
the results are the same as the ones obtained in Section 8.3, because the computational time depends on the
number of operations to be carried out and not the efﬁciency of the control approach.
Several conclusion have been drawn in this section. The ﬁrst one is that, dual quaternions can han-
dle larger perturbations than the classical approach and still reach the mission requirements. Second, dual
quaternions spend much less energy to correct perturbations. Third and ﬁnal, dual quaternions have a set-

98
8.5. STABILITY ANALYSIS
Figure 8.25: Computational time spent for each method ( landing scenario )
tling time much shorter than the classical representation and thus, accumulate less error over the simula-
tions. All of these advantages come with the price of taking more computational time.

9
CONCLUSIONS AND RECOMMENDATIONS
This chapter closes the cycle started in the introduction by providing all the conclusions drawn during the
development of the thesis work, as well as the results obtained. It also answers the research questions and
includes a set of recommendations for future work in the topic.
9.1. CONCLUSIONS
The ﬁrst conclusion of this work is that dual quaternions have been successfully compared to classical meth-
ods for a full six DOF controller problem in asteroid close proximity operations. Three different scenarios
have been successfully simulated to provide sufﬁcient and valuable comparisons between the two methods
to answer the research questions.
The research objective formulated in Chapter 1 was:
• What advantages and disadvantages can a six DOF controller based on dual quaternions bring over clas-
sical methods regarding asteroid close proximity operations?
The answer to this question can be summarized in the following advantages and disadvantages:
• Dual quaternions naturally couple the rotational and translational motion. They allow the integration
of both motions to be carried out at the same time.
• Dual quaternions are a mathematical formulation that allows to represent the six DOF of a spacecraft
in a very compact form.
• Only two equations of motions are sufﬁcient to represent the full six DOF problem with dual quater-
nions. Four are necessary in the classical approach.
99

100
9.2. RECOMMENDATIONS AND FUTURE WORK
• Only one Lyapunov function is necessary to prove stability of the non-linear system with dual quater-
nions. The classical method requires two steps to prove its stability.
• Dual quaternions controllers can be designed following the same theory and properties of attitude-only
controllers written with quaternions.
• Dual quaternion controllers take more time to optimize following the methodology described in this
master thesis (Section 5.3).
• Dual quaternions take more time to integrate the equations of motion. The total number of basic op-
erations to be computed is almost 4 times larger than for the classical representation.
• Given a ﬁxed integration step-size, dual quaternions have less accuracy in the solutions than the clas-
sical representations, for the tested scenarios.
• For the described nominal scenarios, the dual quaternion control approach achieves the same order of
magnitude in errors and energy consumption than the classical approach, taking more computational
time (about 15% more).
• Dual quaternions can handle larger perturbations in the tested scenarios (between 23 and 227 times
larger depending on the scenario).
• Dual quaternions are more efﬁcient in terms of energy consumption when correcting deviations from
the nominal trajectory in the tested scenarios (between 3.2 and 9.3 times less).
• Dual quaternions have shorter settling times. Speciﬁcally, between 29% and 92% shorter settling times
depending on the tested scenarios.
• Dual quaternions accumulate less errors (between 2.6 and 19 times less than classical methods) when
correcting deviations from the nominal trajectory in the tested scenarios.
9.2. RECOMMENDATIONS AND FUTURE WORK
Despite the fact that this thesis covered an extensive work and successfully compared the dual quaternion
approach with classical methods for asteroid close-proximity operations; several further steps and recom-
mendations can be given to further investigate on the topic. Therefore, this section states them.
• The reason why dual quaternions are very sensitive to control frequency reduction for the hovering
scenario has to be further studied.
• The work done in this thesis could be further applied to other scenarios such as docking between space-
crafts in Earth orbit or close-proximity operations in other asteroids.
• The performance of controllers with adaptive algorithms could be compared between the classical and
the dual quaternion approaches.

9. CONCLUSIONS AND RECOMMENDATIONS
101
• The gain selection methodology could be further studied to reduce the computational time involved
and improve the accuracy of the results.
• It would be great to study the full dimension of the problem by introducing a ﬁlter and statistical orbit
determination

102
9.2. RECOMMENDATIONS AND FUTURE WORK

APPENDIX A
STABILITY THEORY
To understand and design controllers capable of stabilizing spacecraft it is important to bear some theory
and deﬁnitions in mind. This appendix gives the necessary theory to understand the design of the controllers
proposed in Chapter 5. All this theory has been taken from [Schaub and Junkins, 2009].
STABILITY DEFINITIONS
There are different types of stability. Let x be a generalized state vector; then nonlinear dynamical systems
can be written in the form
˙x = f (x,t)
(A.1)
To deﬁne stability of a dynamical system, some notions of an equilibrium state xe and nominal reference
motion xr are required.
• Equilibrium state: A state vector point xe is said to be an equilibrium state (or equilibrium point) of a
dynamical system described by ˙x = f (x,t) at time t0 if
f (xe,t) = 0
∀t > t0
(A.2)
If the dynamical system is to follow a prescribed motion, then this motion is referred to as the nominal refer-
ence motion xr (t). To describe the proximity of one state to another, the notion of neighborhoods is deﬁned.
• Neighborhood Bδ: Given δ > 0, a state vector x(t) is said to be in the neighborhood Bδ(xr (t)) of the
state xr (t) if
∥x(t)−xr (t)∥< δ =⇒x(t) ∈Bδ(xr (t))
(A.3)
103

104
A simple form of stability is the concept of a motion simply being bounded (or Lagrange stable) relative to
xr (t). Note that x(t0) could lie arbitrarily close to xr (t0) while x(t) may still deviate from xr (t). The only
stability guarantee made here is that this state vector difference will remain within a ﬁnite bound δ.
• Lagrange stability: The motion x(t) is said to be Lagrange stable (or bounded) relative to xr (t) if there
exists a δ > 0 such that
x(t) ∈Bδ(xr (t))
(A.4)
Declaring a motion to be Lyapunov stable (also referred to simply as being stable) is a stronger statement
than saying it is Lagrange stable.
• Lyapunov stability: The motion x(t) is said to be Lyapunov stable (or stable) relative to xr (t) if for each
ϵ > 0 there exists a δ(ϵ) > 0 such that
x(t0) ∈Bδ(xr (t0)) =⇒x(t) ∈Bδ(xr (t))
∀t > t0
(A.5)
In other words, if the state vector x(t) is to remain within any arbitrarily small neighborhood Bϵ of xr (t), then
there exists a corresponding initial neighborhood Bδ(xr (t0)) from which all x(t) must originate. A stronger
stability statement is to say the motion x(t) is asymptotically stable. In this case the difference between x(t)
and xr (t) will approach zero over time.
• Asymptotic Stability: The motion x(t) is asymptotically stable relative to xr (t) if x(t) is Lyapunov stable
and there exists a δ > 0 such that
x(t0) ∈Bδ(xr (t0)) =⇒lim
t→∞x(t) = xr (t)
(A.6)
Except for the Lagrange stability deﬁnition, all other types of stabilities deﬁned are referred to as local stability.
The initial state vector has to be within a certain neighborhood Bδ relative to the desired state vector for
stability to be guaranteed. If stability is guaranteed for any initial state vector x(t0), then the system is said to
be globally stable or stable at large.
LYAPUNOV DIRECT METHOD
Proving stability of nonlinear systems with the basic stability deﬁnitions and without resorting to local lin-
ear approximations can be quite tedious and difﬁcult. Lyapunov’s direct method provides a tool to make
rigorous, analytical stability claims of nonlinear systems by studying the behavior of a scalar, energy-like Lya-
punov function. A major beneﬁt of this method is that this can be done without having to solve the nonlinear
differential equations.
To prove stability of a dynamical system, special positive deﬁnite functions called Lyapunov functions are
sought.
• Lyapunov function: The scalar function V (x) is a Lyapunov function for the dynamical system ˙x = f (x)
if it is continuous and there exists a δ > 0 such that for any x ∈Bδ(xr )

A. STABILITY THEORY
105
1. V (x) is a positive deﬁnite function about xr .
2. V (x) has continuous partial derivatives.
3.
˙V (x) is negative semideﬁnite.
Even though V (x) explicitly depends on only the state vector x, because x(t) is time varying, the Lyapunov
function V is time varying, too. Using the chain rule, the derivative of V is found to be
˙V = ∂V T
∂x f (x)
(A.7)
Bearing this deﬁnitions in mind, the following theorems can be stated:
• Theorem A.1 - Lyapunov stability If a Lyapunov function V (x) exists for the dynamical system ˙x = f (x),
then this system is stable about the origin.
• Theorem A.2 - Asymptotic stability Assume V (x) is a Lyapunov function about xr (t) for the dynamical
system ˙x = f (x); then the system is asymptotically stable if
1. the system is stable about xr (t).
2.
˙V (x) is negative deﬁnite about xr (t).
And this is theorem that has been used to proof the stability of the controllers developed in this master thesis
work.
BARBALAT’S THEOREM
Sometimes, for time varying systems, it is difﬁcult to ﬁnd a Lyapunov function with a negative deﬁnite deriva-
tive. This is where Barbalat’s theorem comes into play. It says:
• Barbalat’s lemma if V (x,t) satisﬁes the following conditions:
1. V (x,t) is lower bounded
2.
˙V (x,t) is negative semi-deﬁnite
3.
˙V (x,t) is uniformly continuous in time (satisﬁed if ¨V is ﬁnite); then
˙V (x,t) →0
as
t →∞
(A.8)
This lemma is used during the proof of stability of the dual quaternion controller.

106

APPENDIX B
OTHER SYSTEM TEST RESULTS
This appendix contains all the results from the system tests explained in Subsection 7.2.4. For the sake of
readability, only the results from the landing scenario with classical representation were shown. Thus, this
appendix shows all the remaining results to show that all system tests were successful.
ORBITING - CLASSIC
To start with, results from the system test with the classical approach for the orbiting scenario are presented
below. The order in which the results are presented follows the same structure as in the main document, (Sub-
section 7.2.4). First of all, the different state variables evolution over time is presented in Figure B.1. As can
be seen, it corresponds to one orbital period. The upper-left plot corresponds to the position components,
whereas the upper-right plot shows the linear velocities. Both of them start and ﬁnish at the same values due
to the stable orbit around Bennu. On the bottom-left side, the quaternion orientation is presented. Then, on
the bottom-right side of Figure B.1, the angular velocities are shown. The blue box corresponds to a zoom-in
of a speciﬁc part of the plot for better appreciation of how variables converge to their reference values.
Next, Figure B.2 shows the errors of the attitude quaternion and the angular velocity with respect to the
reference values. It is worth remembering that for the orbiting scenarios, only the rotational motion was
controlled. For this reason, only the pointing errors and the angular velocity errors are presented. As can be
seen, after a settling time, both motions reach stability and remain withing the requirements speciﬁed. For
the pointing error, there is no overshoot and the error goes directly to zero from its starting point. However,
for the angular velocity, there is a clear overshoot before reaching stability. The settling time is about 400 s.
The blue box is again the zoom-in area for better visualizing how each error is converging to its reference
value.
107

108
Figure B.1: Orbiting state variables and reference values with classic approach
Figure B.2: Orbiting state variable errors with respect to reference trajectory with classic approach
Finally, the different control commands torques are presented in Figure B.3. It is interesting to notice
that only the ﬁrst 900 s are shown in this ﬁgure, for better appreciating how the controller manage to steer
the spacecraft back to the reference trajectory. During the ﬁrst seconds, the controller is clearly saturated
reaching its maximum allowed values. Due to actuators limitations, there is a maximum torque of 0.2 Nm
in each body direction that cannot be exceeded. During the ﬁrst 300 s, the actuators are saturated before
stabilizing the spacecraft to the reference trajectory. It is also worth mentioning that, after stabilization, the

B. OTHER SYSTEM TEST RESULTS
109
Figure B.3: Orbiting control forces and torques commands with classic approach
control torque commands are not zero. They have the values required to follow the reference trajectory.
However, since these values are so small, they cannot be appreciated in this ﬁgure.
As a conclusion, the system test for the classical orbiting scenario is a success. All variables manage to get
stabilized in the reference trajectory and remain there for the duration of the simulation. This proves that the
simulator and the controller as a whole system works as expected.
ORBITING - DUAL QUATERNIONS
Next, results from the system test with the dual quaternion approach, for the orbiting scenario, are presented.
They are very similar to the ones of the classical approach. First of all, the different state variables evolution
over time is presented in Figure B.4. The upper-left plot corresponds to the position components, whereas
the upper-right plot shows the linear velocities. Their values are identical to the previous system test with
classical control. However, on the bottom-left side, the quaternion orientation plot shows some differences.
More speciﬁcally, they look anti-symmetric with respect to the classical control. The reason for this is because
the initial orientation error was set to be 180o, as it can be seen in Table 7.3. The classical control approach
forced the spacecraft to rotate in one direction, whereas the dual quaternion controller chose the other one.
This can also be observed in the bottom-right side of Figure B.4. The angular velocities of the body x and y
axes are exactly the opposite than the ones with classical control. The blue box corresponds to a zoom-in of
a speciﬁc part of the plot for better appreciation of how variables converge to their reference values.
Moreover, Figure B.5 shows the errors of the attitude quaternion and the angular velocity with respect
to the reference values, for the dual quaternion orbiting system test. Again, only the pointing error and the
angular velocity errors are shown because no orbit control has been applied. On the upper part, the pointing
error goes from 180o to almost 0o very quickly (in about 500 s). The difference between the dual quaternion
approach and the classical one is that the ﬁrst one reduces the error much faster than the second one. The
same can be noticed from the angular velocity errors shown on the bottom part of the ﬁgure. The overshoot
for the angular velocities is as high as the classical one. The blue box is again the zoom-in area for better
visualizing how each error is converging to its reference value.
Finally, the different control commands torques for the dual quaternion representation are presented in
Figure B.6. Two aspects are worth mentioning when comparing these results with the classical ones. The ﬁrst

110
Figure B.4: Orbiting state variables and reference values with dual quaternion approach
Figure B.5: Orbiting state variable errors with respect to reference trajectory with dual quaternion approach
one is that the settling time is shorter. The second one is that the control torque commands have the opposite
shape than for the classical approach. This is the reason why the state variables look anti-symmetric. As has
been said already, the dual quaternion approach chose to steer the spacecraft in the exact opposite direction
than the classical control, when starting with 180o of pointing initial error. Furthermore, it is also important
to notice that only the ﬁrst 900 s have been represented in this ﬁgure to appreciate how the control commands
evolve overtime. Otherwise, it would have been a straight line very close to zero, over the more than 7000 s of

B. OTHER SYSTEM TEST RESULTS
111
Figure B.6: Orbiting control forces and torques commands with dual quaternion approach
simulation.
This system test proves that the simulator developed with the implemented controller work as expected
and manage to achieve the mission requirements, both with a classical representation and with the dual
quaternion one. All sub-blocks deﬁned in Section 7.1 work together as a system successfully.
HOVERING - CLASSIC
Next, results from the system test with the classical approach, for the hovering scenario, are presented below.
As has been done in previous sections, the different state variables evolution over time are presented in Figure
B.7. The upper-left plot corresponds to the position components. The reference values are also shown in
dashed lined. Since the trajectory is an inertial hovering about Bennu, the position components are straight
lines. The upper-right plot of the ﬁgure shows the velocity components. As can be seen, there is a clear
overshoot to correct the position of the satellite and then, all velocity components go to almost zero. In
this case, the overshoot has an order of magnitude of 0.1 m/s. It is important to remember that the initial
conditions and gain settings for this simulation have been stated in Sub-section 7.2.4. The bottom-left side
of Figure B.7 shows the different quaternion components over time, with the reference values. And last, in
the bottom-right side of the ﬁgure, the angular velocity components are represented. They also show a clear
overshoot, as the linear velocity did. In this case, the order of magnitude is about 0.08o/s. The reason for that
is because the orientation of the satellite had to be corrected changing the angular velocity, to ﬁnally stabilize
on the reference value.
Figure B.8 shows the errors of each state variable over time. As can be seen, the linear and angular veloc-
ities look exactly the same as in Figure B.7. This is because the reference velocities are zero. However, the a
blue box have been inserted to zoom in and appreciate that both state variables actually converge within the
requirements of the mission. Regarding the left part of the ﬁgure, the position and attitude errors are shown.
They quickly go to zero (in about 40 s). It is important to mention that, in contrast with the orbiting scenario,
orbit control was required for hovering. For this reason, position and velocity errors are presented in Figure
B.8.
Finally, both the force and torque control commands are represented in Figure B.9. There is a clear satu-
ration of the actuators in both cases before reaching stability. It is worth mentioning that only the ﬁrst 55 s are

112
Figure B.7: Hovering state variables and reference values with classic approach
Figure B.8: Hovering state variable errors with respect to reference trajectory with classic approach
shown in this ﬁgure, for better appreciating how each controller manage to stabilize the spacecraft. As can be
seen, it takes a little bit longer for the attitude motion to reach stability. Last, it is important to realize that the
control commands never go to exactly zero values. There is always a tinny torque or force to be compensated
so that inertial hovering can be achieved.
The conclusion for this system test is exactly the same than for the previous ones. It proves that the sim-

B. OTHER SYSTEM TEST RESULTS
113
Figure B.9: Hovering control forces and torques commands with classic approach
ulator developed and the classical control for hovering works as expected and provides us with valid results.
HOVERING - DUAL QUATERNIONS
Here, results from the system test with the dual quaternion approach, for the hovering scenario, are pre-
sented. Again, they are very similar to the ones of the classical approach. The different state variables evolu-
tion over time is presented in Figure B.10. The distributions of the different state variables is the same as in
the previous cases. The main difference with respect to the classical approach is that the overshoot for the
angular velocity is slightly smaller. In this case, the order of magnitude is 0.07o/s instead of 0.08o/s. For the
linear velocity, they remain equal.
Figure B.11 shows the different errors for each state variable. The performance of the dual quaternion
controller is very similar to the classical one for this hovering scenario. The only difference is the already
mentioned smaller overshoot for the angular velocity. The blue box areas are a zoom-in of speciﬁc regions of
the plot to clarify how each state variable converges to the reference solution.
Finally, Figure B.12 shows both the force and torque commands for the dual quaternion controller in the
hovering scenario. As can be seen, the actuators a saturated for almost 15 s and then manage to stabilize the
spacecraft to the hovering trajectory. The settling time is this case is the same as for the classical representa-
tion.
LANDING - DUAL QUATERNIONS
Last but not least, results form the landing scenario with the dual quaternion approach are represented be-
low. For the sake of simplicity, only the classical representation for the landing scenario was shown in the

114
Figure B.10: Hovering state variables and reference values with dual quaternion approach
Figure B.11: Hovering state variable errors with respect to reference trajectory with dual quaternion approach
main document. Here, system test results using the dual quaternion approach are shown to prove that every-
thing implemented in this thesis, works properly and as expected. First, Figure B.13 shows the different state
variables evolution over time. All simulation settings and initial conditions are described in Subsection 7.2.4
of the main document. The gains used for this simulations are also stated. As can be seen, all different state
variables manage to follow the reference trajectory (shown in dashed lines) to ﬁnally land on the surface of

B. OTHER SYSTEM TEST RESULTS
115
Figure B.12: Hovering control forces and torques commands with dual quaternion approach
Figure B.13: Landing state variables and reference values for the landing scenario with dual quaternion approach
Bennu meeting the speciﬁed requirements.
Figure B.14 shows the different errors for each state variable. As can be appreciated, the initial conditions
are not the nominal ones. For this reason, there is a clear overshoot in both the angular and linear velocities
to compensate for these errors, and then follow the reference trajectory. The maximum overshoot for the
linear velocity has an order of magnitude of 0.15 m/s, whereas it is 0.06o/s for the angular velocity. On the
bottom-left side of the ﬁgure, the pointing error is represented showing how quickly the controller manages
to correct the initial attitude error. Comparing these results with the ones in the main document for the

116
Figure B.14: Landing state variable errors with respect to reference trajectory with dual quaternion approach
classical controller, it can be said that the overshoot for the angular velocity here, is slightly smaller than the
0.08o/s for the classical control. However, for the linear velocity, it is a little bit bigger (compared to 0.1 m/s
of the classical representation). The blue boxes still represent the zoom-in areas for better appreciating how
each error converges to zero.
Figure B.15: Landing control forces and torques commands with dual quaternion approach
Finally, Figure B.15 shows both the force and torque commands of the dual quaternion controller used
to guide the spacecraft through the landing trajectory. In this case, only for the ﬁrst 15 s the actuators are
saturated. Then, they converge to almost zero, where the spacecraft reaches convergence. It is important

B. OTHER SYSTEM TEST RESULTS
117
noticing that they never go to exactly zero values, because there are always some tinny torques or forces to be
performed so that the spacecraft follows the reference trajectory.
The ﬁnal conclusion of this Appendix B is that all system tests carried out have been successful. The
different blocks deﬁned in Section 7.1, can work together as a system and provide the user with interesting
and valid results, which can be used to answer the research question of this master thesis. For all different
scenarios deﬁned in this work, both the classical and the dual quaternion controllers manage to steer the
spacecraft through the reference trajectory meeting the mission requirements. The purpose of this Appendix
is to prove and show the system test results of all the different simulations that have been carried out in this
thesis, and that could not be shown in the main document for the sake of simplicity.

118

BIBLIOGRAPHY
Aspragathos, N. A. and Dimitros, J. K. (1998). A Comparative Study of Three Methods for Robot Kinematics.
Ieee Transactions on Systems, Man, and Cybernetics—Part B: Cybernetics, 28(2):135–145.
Beckman, M., Barbee, B. W., Williams, B. G., Williams, K., Sutter, B., and Berry, K. (2013). Trajectory and
Mission Design for the Origins Spectral Interpretation Resource Identiﬁcation Security Regolith Explorer
Asteroid Sample Return Mission. Planetary Defence Conference 2013, IAA, 19:1–13.
Broschart, S. B. and Scheeres, D. J. (2005). Control of Hovering Spacecraft Near Small Bodies : Application to
Asteroid 25143 Itokawa. Journal of guidance, control and dynamics, 28(2):343–354.
Celledoni, E., Fassò, F., Säfström, N., and Zanna, A. (2008). The exact computation of the free rigid body
motion and its use in splitting methods. SIAM Journal on Scientiﬁc Computing, 30(4):2084–2112.
Clifford (1871). Preliminary sketch of biquaternions. Proceedings of the London Mathematical Society, s1-
4(1):381–395.
Daniilidis, K. (1999). Hand-eye calibration using dual quaternions. The International Journal of Robotics
Research, 18(3):286–298.
Everett, D., Linn, T., Mink, R., and Wood, J. (2017). Designing to Sample the Unknown : Lessons from OSIRIS-
REx Project Systems Engineering. IEEE Aerospace Conference, 2017, 40(2):1–19.
Filipe, N. and Tsiotras, P. (2013). Rigid Body Motion Tracking Without Linear and Angular Velocity Feedback
Using Dual Quaternions. European Control Conference (ECC), 2013, (125):329–334.
Filipe, N. and Tsiotras, P. (2014). Adaptive position and attitude tracking controller for satellite proximity
operations using dual quaternions. Advances in the Astronautical Sciences, 150(4):2313–2332.
Filipe, S. and Ricardo, N. (2014). Nonlinear pose control and estimation for space proximity operations: An
approach based on dual quaternions. PhD thesis, Georgia Institute of Technology.
Funda, J. and Paul, R. P. (1990). A Computational Analysis of Screw Transformations In Robotics. Transactions
on robotics and automation, 6(3):348–356.
Ge, Q. and Ravani, B. (1994). Computer aided geometric design of motion interpolants. Journal of Mechanical
Design, 116(3):756–762.
Gottlieb, R. G. (1993). Fast gravity, gravity partials, normalized gravity, gravity gradient torque and magnetic
ﬁeld: derivation, code and data. NASA Contractor Report 188243, pages 64–65.
119

120
BIBLIOGRAPHY
Gui, H. and Vukovich, G. (2015). Dual-quaternion-based adaptive motion tracking of spacecraft with reduced
control effort. Nonlinear Dynamics, 83(1):597–614.
Han, D., Wei, Q., Li, Z., and Sun, W. (2008). Control of oriented mechanical systems: A method based on dual
quaternion. IFAC Proceedings Volumes, 41(2):3836–3841.
Hergenrother, C. W. e. a. (2014). The Design Reference Asteroid for the OSIRIS-REx Mission Target (101955)
Bennu. arXiv preprint arXiv:1409.4704, 1409(101955):4704–4708.
Jones, B. A. (2010). Efﬁcient models for the evaluation and estimation of the gravity ﬁeld. PhD thesis, University
of Colorado at Boulder.
Kumar, K. D. (2008). Attitude dynamics and control of satellites orbiting rotating asteroids. Acta Mechanica,
198(1):99–118.
Lee, D., Sanyal, A. K., Butcher, E. A., and Scheeres, D. J. (2015). Finite-time control for spacecraft body-ﬁxed
hovering over an asteroid. IEEE Transactions on Aerospace and Electronic Systems, 51(1):506–520.
Lissauser, J. J. and de Pater, I. (2013). Fundamental Planetary Science. Cambridge University Press, ISBN
9780521618557.
Lorenz, D. A., Olds, R., May, A., Mario, C., Perry, M. E., Palmer, E. E., and Daly, M. (2017). Lessons learned
from osiris-rex autonomous navigation using natural feature tracking. IEEE Aerospace Conference, 2017,
32(1):1–12.
Markley, F. L. and Crassidis, J. L. (2014). Fundamentals of Spacecraft Attitude Determination and Control,
volume 33. Springer, ISBN - 978493908011.
Masashi, U., Kenichi, S., Tatsuaki, H., Takashi, K., and Jun’ichiro, K. (2006). Attitude Control Challenges and
Solutions for Hayabusa Spacecraft. AIAA/AAS Astrodynamics Specialist Conference and Exhibit, (28):1–10.
May, A., Sutter, B., Linn, T., Bierhaus, B., Berry, K., and Mink, R. (2014). OSIRIS-REx Touch-and-Go (TAG)
Mission Design for Asteroid Sample Collection. International Astronautical Congress; 65th, (121):1–11.
McMahon, J., Scheeres, D., Hesar, S., Farnocchia, D., Chesley, S., and Lauretta, D. (2018). The osiris-rex radio
science experiment at bennu. Space Science Reviews, 214(1):43.
McMahon, J. W. (2011). An analytical theory for the perturbative effect of solar radiation pressure on natural
and artiﬁcial satellites. PhD thesis, University of Colorado at Boulder.
Misra, G. and Sanyal, A. K. (2015). Analysis of orbit-attitude coupling of spacecraft near small solar system
bodies. AIAA Guidance, Navigation, and Control Conference, page 1777.
Montenbruck, O. and Gill, E. (2000). Satellite Orbits: Models, Methods and Applications, volume 134. Springer.
Murray, R. M., Li, Z., Sastry, S. S., and Sastry, S. S. (1994). A mathematical introduction to robotic manipulation.
CRC press.

BIBLIOGRAPHY
121
Nelson, R. L. (2001). 433 Eros Landing - Development of NEAR Shoemaker’s Controlled Descent Sequence.
15th Annual AIAA/USU Conference on Small Satellites, 15(1):1–7.
Razgus, B., Mooij, E., and Choukroun, D. (2017a). Relative Navigation in Asteroid Missions: A Dual Quaternion
Approach. AIAA Guidance, Navigation, and Control Conference, page 1521.
Razgus, B., Mooij, E., and Choukroun, D. (2017b). Relative navigation in asteroid missions using dual quater-
nion ﬁltering. Journal of Guidance, Control, and Dynamics, pages 1–16.
Regnier, P., Ecale, E., and Serra, S. V. (2000). AOCS Design for scientiﬁc Missions ROSETTA/MARS EXPRESS.
Spacecraft Guidance, Navigation and Control Systems, 425:3–7.
Schaub, H. and Junkins, J. L. (2009). Analytical Mechanics of Space Systems. American Institute of Aeronautics
and Astronautics, Virginia ISBN - 9781600867217, 4th edition.
Scheeres, D., Hesar, S., Tardivel, S., Hirabayashi, M., Farnocchia, D., McMahon, J., Chesley, S., Barnouin, O.,
Binzel, R., Bottke, W., et al. (2016). The geophysical environment of bennu. Icarus, 276:116–140.
Scheeres, D., Khushalani, B., and Werner, R. A. (2000). Estimating asteroid density distributions from shape
and gravity information. Planetary and Space Science, 48(10):965–971.
Scheeres, D. J. (2012). Orbit Mechanics About Asteroids and Comets. Journal of Guidance, Control, and
Dynamics, 35(3).
Takahashi, Y. (2013). Gravity Field Characterization around Small Bodies. PhD thesis, University of Colorado
at Boulder.
Tsuda, Y., Yoshikawa, M., Abe, M., Minamino, H., and Nakazawa, S. (2013). System design of the hayabusa
2-asteroid sample return mission to 1999 JU3. Acta Astronautica, 91:356–362.
Vukovich, G. and Gui, H. (2017). Robust Adaptive Tracking of Rigid-Body Motion with Applications to Asteroid
Proximity Operations. IEEE Transactions on Aerospace and Electronic Systems, 9251:1–11.
Wang, J., Liang, H., and Sun, Z. (2010). Relative Coupled Dynamics and Control Using Dual Number. Systems
and Control in Aeronautics and Astronautics (ISSCAA), 36(2):277–282.
Wang, X. and Yu, C. (2010). Feedback linearization regulator with coupled attitude and translation dynamics
based on unit dual quaternion. IEEE International Symposium on Intelligent Control - Proceedings, pages
2380–2384.
Wang, Y., Guan, H., and Xu, S. (2012). Fourth-order gravity gradient torque of spacecraft orbiting asteroids.
Advances in the Astronautical Sciences, 143:471–488.
Wang, Y. and Xu, S. (2013). Gravity gradient torque of spacecraft orbiting asteroids. Aircraft Engineering and
Aerospace Technology, 85(1):72–81.

122
BIBLIOGRAPHY
Wang, Y. and Xu, S. (2014). Gravitational Orbit-Rotation Coupling of a Rigid Satellite around a Spheroid Planet.
Journal of aerospace engineering ASCE, 27:140–150.
Werner, R. and Scheeres, D. (1997). Exterior gravitation of a polyhedron derived and compared with harmonic
and mascon gravitation representations of asteroid 4769 Castalia. Celestial Mechanics and Dynamical As-
tronomy, 65(3):313–344.
Yuanxin, W., Xiaoping, H., Dewen, H., Tao, L., and Juanxiang, L. (2005). Strapdown Inertial Navigation System
Algorithms Based on Dual Quaternions. IEEE Transactions on Aerospace and Electronic Systems, 41(1):135–
137.
Zhang, F. and Duan, G. (2011). Robust Integrated Translation and Rotation Finite-Time Maneuver of a Rigid
Spacecraft Based on Dual Quaternion. AIAA Guidance, Navigation, and Control Conference, 18(92):1–17.

