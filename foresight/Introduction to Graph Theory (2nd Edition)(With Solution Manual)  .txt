


































































































































































































































































































































































































































































































































































































































i
ii
INTRODUCTION TO GRAPH THEORY
SECOND EDITION (2001)
SOLUTION MANUAL
SUMMER 2005 VERSION
c⃝DOUGLAS B. WEST
MATHEMATICS DEPARTMENT
UNIVERSITY OF ILLINOIS
All rights reserved. No part of this work may be reproduced
or transmitted in any form without permission.
NOTICE
This is the Summer 2005 version of the Instructor’s Solution Manual for
Introduction to Graph Theory, by Douglas B. West. A few solutions have
been added or clariﬁed since last year’s version.
Also present is a (slightly edited) annotated syllabus for the one-
semester course taught from this book at the University of Illinois.
This version of the Solution Manual contains solutions for 99.4% of
the problems in Chapters 1–7 and 93% of the problems in Chapter 8. The
author believes that only Problems 4.2.10, 7.1.36, 7.1.37, 7.2.39, 7.2.47,
and 7.3.31 in Chapters 1–7 are lacking solutions here. There problems are
too long or difﬁcult for this text or use concepts not covered in the text; they
will be deleted in the third edition.
The positions of solutions that have not yet been written into the ﬁles
are occupied by the statements of the corresponding problems. These prob-
lems retain the (−), (!), (+), (∗) indicators. Also (•) is added to introduce
the statements of problems without other indicators. Thus every problem
whose solution is not included is marked by one of the indicators, for ease
of identiﬁcation.
The author hopes that the solutions contained herein will be useful to
instructors. The level of detail in solutions varies. Instructors should feel
free to write up solutions with more or less detail according to the needs of
the class. Please do not leave solutions posted on the web.
Due to time limitations, the solutions have not been proofread or edited
as carefully as the text, especially in Chapter 8. Please send corrections to
west@math.uiuc.edu. The author thanks Fred Galvin in particular for con-
tributing improvements or alternative solutions for many of the problems
in the earlier chapters.
This will be the last version of the Solution Manual for the second
edition of the text. The third edition will have many new problems, such
as those posted at http://www.math.uiuc.edu/ west/igt/newprob.html . The
effort to include all solutions will resume for the third edition. Possibly
other pedagogical features may also be added later.
Inquiries may be sent to west@math.uiuc.edu. Meanwhile, the author
apologizes for any inconvenience caused by the absence of some solutions.
Douglas B. West

iii
Solutions
Preface
iv
Mathematics Department - University of Illinois
MATH 412
SYLLABUS FOR INSTRUCTORS
Text: West, Introduction to Graph Theory, second edition,
Prentice Hall, 2001.
Many students in this course see graph algorithms repeatedly in
courses in computer science. Hence this course aims primarily to improve
students’ writing of proofs in discrete mathematics while learning about
the structure of graphs. Some algorithms are presented along the way, and
many of the proofs are constructive. The aspect of algorithms emphasized
in CS courses is running time; in a mathematics course in graph theory
from this book the algorithmic focus is on proving that the algorithms work.
Math 412 is intended as a rigorous course that challenges students to
think. Homework and tests should require proofs, and most of the exercises
in the text do so. The material is interesting, accessible, and applicable;
most students who stick with the course will give it a fair amount of time
and thought.
An important aspect of the course is the clear presentation of solutions,
which involves careful writing. Many of the problems in the text have hints,
either where the problem is posed or in Appendix C (or both). Producing
a solution involves two main steps: ﬁnding a proof and properly writing
it. It is generally beneﬁcial to the learning process to provide “collabora-
tive study sessions” in which students can discuss homework problems in
small groups and an instructor or teaching assistant is available to answer
questions and provide direction. Students should then write up clear and
complete solutions on their own.
This course works best when students have had prior exposure to
writing proofs, as in a “transition” course. Some students may need fur-
ther explicit discussions of the structure of proofs. Such discussion appear
in many texts, such as
D’Angelo and West, Mathematical Thinking: Problem-Solving and Proofs;
Eisenberg, The Mathematical Method: A Transition to Advanced Mathematics;
Fletcher/Patty, Foundations of Higher Mathematics;
Galovich, Introduction to Mathematical Structures;
Galovich, Doing Mathematics: An Introduction to Proofs and Problem Solving;
Solow, How to Read and Do Proofs.
Suggested Schedule
The subject matter for the course is the ﬁrst seven chapters of the text,
skipping most optional material. Modiﬁcations to this are discussed below.
The 22 sections are allotted an average of slightly under two lectures each.
In the exercises, problems designated by (−) are easier or shorter than
most, often good for tests or for “warmup” before doing homework problems.
Problems designated by (+) are harder than most. Those designated by (!)
are particularly instructive, entertaining, or important. Those designated
by (∗) make use of optional material.
The semester at the University of Illinois has 43 ﬁfty-minute lectures.
The ﬁnal two lectures are for optional topics, usually chosen by the students
from topics in Chapter 8.
Chapter 1
Fundamental Concepts
8
Chapter 2
Trees and Distance
5.5
Chapter 3
Matchings and Factors
5.5
Chapter 4
Connectivity and Paths
6
Chapter 5
Graph Coloring
6
Chapter 6
Planar Graphs
5
Chapter 7
Edges and Cycles
5
*
Total
41
Optional Material
No later material requires material marked optional. The “optional”
marking also suggests to students that the ﬁnal examination will not cover
that material.
The optional subsections on Disjoint Spanning Trees (Bridg-It) in Sec-
tion 2.1 and Stable Matchings in Section 3.2 are always quite popular with
the students. The planarity algorithm (without proof) in 6.2 is appealing
to students, as is the notion of embedding graphs on the torus through
Example 6.3.21. Our course usually includes these four items.
The discussion of f -factors in Section 3.3 is also very instructive and
is covered when the class is proceeding on schedule. Other potential addi-
tions include the applications of Menger’s Theorem at 4.2.24 or 4.2.25.
Other items marked optional generally should not be covered in class.
Additional text items not marked optional that can be skipped when
behind schedule:
1.1: 31, 35
1.2: 16, 21–23
1.3: 24, 31–32
1.4: 1, 4, 7, 25–26
2.1: 8, 14–16
2.2: 13–19
2.3: 7–8
3.2: 4
4.1: 4–6
4.2: 20–21
5.1: 11, 22(proof)
5.3: 10–11, 16(proof)
6.1: 18–20, 28
6.3: 9–10, 13–15
7.2: 17

v
Solutions
Preface
vi
Comments
There are several underlying themes in the course, and mentioning
these at appropriate moments helps establish continuity. These include
1) TONCAS (The Obvious Necessary Condition(s) are Also Sufﬁcient).
2) Weak duality in dual maximation and minimization problems.
3) Proof techniques such as the use of extremality, the paradigm for induc-
tive proofs of conditional statements, and the technique of transforming a
problem into a previously solved problem.
Students sometimes ﬁnd it strange that so many exercises concern
the Petersen graph. This is not so much because of the importance of the
Petersen graph itself, but rather because it is a small graph and yet has
complex enough structure to permit many interesting exercises to be asked.
Chapter 1.
In recent years, most students enter the course having
been exposed to proof techniques, so reviewing these in the ﬁrst ﬁve sec-
tions has become less necessary; remarks in class can emphasis techniques
as reminders. To minimize confusion, digraphs should not be mentioned
until section 1.4; students absorb the additional model more easily after
becoming comfortable with the ﬁrst.
1.1: p3-6 contain motivational examples as an overview of the course;
this discussion should not extend past the ﬁrst day no matter where it
ends (the deﬁnitions are later repeated where needed). The material on
the Petersen graph establishes its basic properties for use in later examples
and exercises.
1.2: The deﬁnitions of path and cycle are intended to be intuitive; one
shouldn’t dwell on the heaviness of the notation for walks.
1.3: Although characterization of graphic sequences is a classical topic,
some reviewers have questioned its importance. Nevertheless, here is a
computation that students enjoy and can perform.
1.4: The examples are presented to motivate the model; these can be
skipped to save time. The de Bruijn graph is a classical application. It is
desirable to present it, but it takes a while to explain.
Chapter 2.
2.1: Characterization of trees is a good place to ask for input from the
class, both in listing properties and in proving equivalence.
2.2: The inductive proof for the Pr ¨ufer correspondence seems to be
easier for most students to grasp than the full bijective proof; it also illus-
trates the usual type of induction with trees. Most students in the class
have seen determinants, but most have considerable difﬁculty understand-
ing the proof of the Matrix Tree Theorem; given the time involved, it is best
just to state the result and give an example (the next edition will include
a purely inductive proof that uses only determinant expansion, not the
Cauchy-Binet Formula). Students ﬁnd the material on graceful labelings
enjoyable and illuminating; it doesn’t take long, but also it isn’t required.
The material on branchings should certaily be skipped in this course.
2.3: Many students have seen rooted trees in computer science and
ﬁnd ordinary trees unnatural; Kruskal’s algorithm should clarify the dis-
tinction. Many CS courses now cover the algorithms of Kruskal, Dijkstra,
and Huffman; here cover Kruskal and perhaps Dijkstra (many students
have seen the algorithm but not a proof of correctness), and skip Huffman.
Chapter 3.
3.1: Skip “Dominating Sets”, but present the rest of the section.
3.2: Students ﬁnd the Hungarian algorithm difﬁcult; explicit examples
need to be worked along with the theoretical discussion of the equality
subgraph. “Stable Matchings” is very popular with students and should be
presented unless far behind in schedule. Skip “Faster Bipartite Matching”.
3.3: Present all of the subsection on Tutte’s 1-factor Theorem. The
material on f -factors is intellectually beautiful and leads to one proof of
the Erd˝os-Gallai conditions, but it is not used again in the course and is an
“aside”. Skip everything on Edmonds’ Blossom Algorithm: matching algo-
rithms in general graphs are important algorithmically but would require
too much time in this course; this is “recommended reading”.
Chapter 4.
4.1: Students have trouble distinguishing “k-connected” from “connec-
tivity k” and “bonds” from “edge cuts”.
Bonds are dual to cycles in the
matroidal sense; there are hints of this in exercises and in Chapter 7, but
the full duality cannot be explored before Chapter 8.
4.2: Students ﬁnd this section a bit difﬁcult. The proof of 4.2.10 is
similar to that of 4.2.7, making it omittable, but the application in 4.2.14
is appealing. The details of 4.2.20-21 can be skipped or treated lightly,
since the main issue is the local version of Menger’s theorem. 4.2.24-25 are
appealing applications that can be added; 4.2.5 (CSDR) is a fundamental
result but takes a fair amount of effort.
4.3: The material on network ﬂow is quite easy but can take a long
time to present due to the overhead of deﬁning new concepts. The basic
idea of 4.3.13-15 should be presented without belaboring the details too
much. 4.3.16 is a more appealing application that perhaps makes the point
more effectively. Skip “Supplies and Demands”.

vii
Solutions
Preface
viii
Chapter 5.
5.1: If time is short, the proof of 5.1.22 (Brooks’ Theorem) can be merely
sketched.
5.2: Be sure to cover Tur´an’s Theorem. Presentation of Dirac’s The-
orem in 5.2.20 is valuable as an application of the Fan Lemma (Menger’s
Theorem). The subsequent material has limited appeal to undergraduates.
5.3: The inclusion-exclusion formula for the chromatic polynomial is
derived here (5.3.10) without using inclusion-exclusion, making it accessi-
ble to this class without prerequisite. However, this proof is difﬁcult for
students to follow in favor of the simple inclusion-exclusion proof, which
will be optional since that formula is not prerequisite for the course. Hence
this formula should be omitted unless students know inclusion-exclusion.
Chordal graphs and perfect graphs are more important, but these can also
be treated lightly if short of time. Skip “Counting Acyclic Orientations”.
Chapter 6.
6.1: The technical deﬁnitions of objects in the plane should be treated
very lightly. It is better to be informal here, without writing out formal
deﬁnitions unless explicitly requested by students. Outerplanar graphs
are useful as a much easier class on which to solve problems (exercises!)
like those on planar graphs; 6.18-20 are fundamental observations about
outerplanar graphs, but other items are more important if time is short.
6.1.28 (polyhedra) is an appealing application but can be skipped.
6.2: The preparatory material 6.2.4-7 on Kuratowski’s Theorem can be
presented lightly, leaving the annoying details as reading; the subsequent
material on convex embedding of 3-connected graphs is much more inter-
esting. Presentation of the planarity algorithm is appealing but optional;
skip the proof that it works.
6.3: The four color problem is popular; for undergraduates, show the
ﬂaw in Kempe’s proof (p271), but don’t present the discharging rule un-
less ahead of schedule. Students ﬁnd the concept of crossing number easy
to grasp, but the results are fairly difﬁcult; try to go as far as the recur-
sive quartic lower bound for the complete graph. The edge bound and its
geometric application are impressive but take too much time for under-
graduates. The idea of embeddings on surfaces can be conveyed through
the examples in 6.3.21 on the torus. Interested students can be advised to
read the rest of this section.
Chapter 7.
7.1: The proof of Vizing’s Theorem is one of the more difﬁcult in the
course, but undergraduates can gain follow it when it is presented with
sufﬁcient colored chalk. The proof can be skipped if short of time. Skip
“Characterization of Line Graphs”, although if time and interest is plenti-
ful the necessity of Krausz’s condition can be explained.
7.2: Chv´atal’s theorem (7.2.13) is not as hard to present as it looks if
the instructor has the statement and proof clearly in mind. Nevertheless,
the proof is somewhat technical and can be skipped (the same can be said
of 7.2.17). More appealing is the Chv´atal–Erd˝os Theorem (7.2.19), which
certainly should be presented. Skip “Cycles in Directed Graphs”.
7.3: The theorems of Tait and Grinberg make a nice culmination to
the required material of the course. Skip “Snarks” and “Flows and Cycle
Covers”. Nevertheless, these are lively topics that can be recommended for
advanced students.
Chapter 8. If time permits, material from the ﬁrst part of sections of
Chapter 8 can be presented to give the students a glimpse of other topics.
The best choices for conveying some understanding in a brief treatment are
Section 8.3 (Ramsey Theory or Sperner’s Lemma) and Section 8.5 (Random
Graphs). Also possible are the Gossip Problem (or other items) from Sec-
tion 8.4 and some of the optional material from earlier chapters. The ﬁrst
part of Section 8.1 (Perfect Graphs) may also be usable for this purpose if
perfect graphs have been discussed in Section 5.3. Sections 8.2 and 8.6 re-
quire more investment in preliminary material and thus are less suitable
for giving a “glimpse”.

1
Chapter 1: Fundamental Concepts
Section 1.1: What Is a Graph?
2
1.FUNDAMENTAL CONCEPTS
1.1. WHAT IS A GRAPH?
1.1.1. Complete bipartite graphs and complete graphs. The complete bipar-
tite graph Km,n is a complete graph if and only if m = n = 1 or {m, n} = {1, 0}.
1.1.2. Adjacency matrices and incidence matrices for a 3-vertex path.
 0
1
1
1
0
0
1
0
0
!  0
1
0
1
0
1
0
1
0
!  0
0
1
0
0
1
1
1
0
!
 1
1
1
0
0
1
!  1
1
0
1
1
0
!  1
0
1
1
0
1
!  0
1
1
1
1
0
!  1
0
0
1
1
1
!  0
1
1
0
1
1
!
Adjacency matrices for a path and a cycle with six vertices.


0
1
0
0
0
0
1
0
1
0
0
0
0
1
0
1
0
0
0
0
1
0
1
0
0
0
0
1
0
1
0
0
0
0
1
0




0
1
0
0
0
1
1
0
1
0
0
0
0
1
0
1
0
0
0
0
1
0
1
0
0
0
0
1
0
1
1
0
0
0
1
0


1.1.3. Adjacency matrix for Km,n.
m
n
m
0
1
n
1
0
1.1.4. G ∼= H if and only if G ∼= H. If f is an isomorphism from G to H,
then f is a vertex bijection preserving adjacency and nonadjacency, and
hence f preserves non-adjacency and adjacency in G and is an isomor-
phism from G to H. The same argument applies for the converse, since the
complement of G is G.
1.1.5. If every vertex of a graph G has degree 2, then G is a cycle—FALSE.
Such a graph can be a disconnected graph with each component a cycle. (If
inﬁnite graphs are allowed, then the graph can be an inﬁnite path.)
1.1.6. The graph below decomposes into copies of P4.
•
•
•
•
•
•
1.1.7. A graph with more than six vertices of odd degree cannot be decom-
posed into three paths. Every vertex of odd degree must be the endpoint
of some path in a decomposition into paths. Three paths have only six
endpoints.
1.1.8. Decompositions of a graph. The graph below decomposes into copies
of K1,3 with centers at the marked vertices. It decomposes into bold and
solid copies of P4 as shown.
•
•
•
•
•
•
•
•
1.1.9. A graph and its complement. With vertices labeled as shown, two
vertices are adjacent in the graph on the right if and only if they are not
adjacent in the graph on the left.
•
•
•
•
•
•
•
•
a
b
c
d
e
f
g
h
•
•
•
•
•
•
•
•
a
f
d
g
c
h
b
e
1.1.10. The complement of a simple disconnected graph must be connected—
TRUE. A disconnected graph G has vertices x, y that do not belong to a
path. Hencex and y are adjacent in G. Furthermore, x and y have no com-
mon neighbor in G, since that would yield a path connecting them. Hence

3
Chapter 1: Fundamental Concepts
Section 1.1: What Is a Graph?
4
every vertex not in {x, y} is adjacent in G to at least one of {x, y}. Hence
every vertex can reach every other vertex in G using paths through {x, y}.
1.1.11. Maximum clique and maximum independent set. Since two ver-
tices have degree 3 and there are only four other vertices, there is no clique
of size 5. A complete subgraph with four vertices is shown in bold.
Since two vertices are adjacent to all others, an independent set con-
taining either of them has only one vertex. Deleting them leaves P4, in
which the maximum size of an independent set is two, as marked.
•
•
•
•
•
•
1.1.12. The Petersen graph. The Petersen graph contains odd cycles, so it
is not bipartite; for example, the vertices 12, 34, 51, 23, 45 form a 5-cycle.
The vertices 12, 13, 14, 15 form an independent set of size 4, since any
two of these vertices have 1 as a common element and hence are nonadja-
cent. Visually, there is an independent set of size 4 marked on the drawing
of the Petersen graph on the cover of the book. There are many ways to
show that the graph has no larger independent set.
Proof 1. Two consecutive vertices on a cycle cannot both appear in an
independent set, so every cycle contributes at most half its vertices. Since
the vertex set is covered by two disjoint 5-cycles, every independent set has
size at most 4.
Proof 2. Let ab be a vertex in an independent set S, where a, b ∈[5].
We show that S has at most three additional vertices. The vertices not
adjacent to ab are ac, bd, ae, bc, ad, be, and they form a cycle in that order.
Hence at most half of them can be added to S.
1.1.13. The graph with vertex set {0, 1}k and x ↔y when x and y differ in
one place is bipartite. The partite sets are determined by the parity of the
number of 1’s. Adjacent vertices have opposite parity. (This graph is the
k-dimensional hypercube; see Section 1.3.)
1.1.14. Cutting opposite corner squares from an eight by eight checkerboard
leaves a subboard that cannot be partitioned into rectangles consisting of
two adjacent unit squares.
2-coloring the squares of a checkerboard so
that adjacent squares have opposite colors shows that the graph having
a vertex for each square and an edge for each pair of adjacent squares
is bipartite. The squares at opposite corners have the same color; when
these are deleted, there are 30 squares of that color and 32 of the other
color. Each pair of adjacent squares has one of each color, so the remaining
squares cannot be partitioned into sets of this type.
Generalization: the two partite sets of a bipartite graph cannot be
matched up using pairwise-disjoint edges if the two partite sets have un-
equal sizes.
1.1.15. Common graphs in four families: A = {paths}, B = {cycles}, C =
{complete graphs}, D = {bipartite graphs}.
A ∩B = ∅: In a cycle, the numbers of vertices and edges are equal,
but this is false for a path.
A ∩C = {K1, K2}: To be a path, a graph must contain no cycle.
A ∩D = A: non-bipartite graphs have odd cycles.
B ∩C = K3: Only when n = 3 does
 n
2

= n.
B ∩D = {C2k: k ≥2}: odd cycles are not bipartite.
C ∩D = {K1, K2}: bipartite graphs cannot have triangles.
1.1.16. The graphs below are not isomorphic. The graph on the left has four
cliques of size 4, and the graph on the right has only two. Alternatively, the
complement of the graph on the left is disconnected (two 4-cycles), while
the complement of the graph on the right is connected (one 8-cycle).
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
1.1.17.
There are exactly two isomorphism classes of 4-regular simple
graphs with 7 vertices.
Simple graphs G and H are isomorphic if and
only if their complements G and H are isomorphic, because an isomor-
phism φ: V (G) →V (H) is also an isomorphism from G to H, and vice
versa. Hence it sufﬁces to count the isomorphism classes of 2-regular sim-
ple graphs with 7 vertices. Every component of a ﬁnite 2-regular graph is a
cycle. In a simple graph, each cycle has at least three vertices. Hence each
class it determined by partitioning 7 into integers of size at least 3 to be
the sizes of the cycles. The only two graphs that result are C7 and C3 + C4
– a single cycle or two cycles of lengths three and four.
1.1.18. Isomorphism. Using the correspondence indicated below, the ﬁrst
two graphs are isomorphic; the graphs are bipartite, with ui ↔vj if and
only if i ̸= j. The third graph contains odd cycles and hence is not isomor-
phic to the others.

5
Chapter 1: Fundamental Concepts
Section 1.1: What Is a Graph?
6
•
•
•
•
•
•
•
•
v2
u4
v3
u1
u3 v1
u2
v4
•
•
•
•
•
•
•
•
u4
u3
u2
u1
v4
v3
v2
v1
•
•
•
•
•
•
•
•
Visually, the ﬁrst two graphs are Q3 and the graph obtained by delet-
ing four disjoint edges from K4,4. In Q3, each vertex is adjacent to the
vertices whose names have opposite parity of the number of 1s, except for
the complementary vertex. Hence Q3 also has the structure of K4,4 with
four disjoint edges deleted; this proves isomorphism without specifying an
explicit bijection.
1.1.19. Isomorphism of graphs. The rightmost two graphs below are iso-
morphic. The outside 10-cycle in the rightmost graph corresponds to the
intermediate ring in the second graph. Pulling one of the inner 5-cycles of
the rightmost graph out to the outside transforms the graph into the same
drawing as the second graph.
The graph on the left is bipartite, as shown by marking one partite set.
It cannot be isomorphic to the others, since they contain 5-cycles.
• • •
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
• •
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
• • •
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
1.1.20. Among the graphs below, the ﬁrst (F) and third (H) are isomorphic,
and the middle graph (G) is not isomorphic to either of these.
F and H are isomorphic. We exhibit an isomorphism (a bijection from
V (F) to V (H) that preserves the adjacency relation). To do this, we name
the vertices of F, write the name of each vertex of F on the corresponding
vertex in H, and show that the names of the edges are the same in H and
F. This proves that H is a way to redraw F. We have done this below using
the ﬁrst eight letters and the ﬁrst eight natural numbers as names.
To prove quickly that the adjacency relation is preserved, observe that
1, a, 2, b, 3, c, 4, d, 5, e, 6, f, 7, g, 8, h is a cycle in both drawings, and the ad-
ditional edges 1c, 2d, 3e, 4 f, 5g, 6h, 7a, 8b are also the same in both draw-
ings. Thus the two graphs have the same edges under this vertex corre-
spondence. Equivalently, if we list the vertices in this speciﬁed order for
the two drawings, the two adjacency matrices are the same, but that is
harder to verify.
G is not isomorphic to F or to H. In F and in H, the numbers form an
independent set, as do the letters. Thus F and H are bipartite. The graph
G cannot be bipartite, since it contains an odd cycle. The vertices above
the horizontal axis of the picture induce a cycle of length 7.
It is also true that the middle graph contains a 4-cycle and the others
do not, but it is harder to prove the absence of a 4-cycle than to prove the
absence of an odd cycle.
•
•
•
•
•
•
•
•
h
2
f
8
d
6
b
4
•
•
•
•
•
•
•
•
1
a
7
g
5
e
3
c
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
• •
• •
•
•
•
•
•
•
•
a
2
b
3
c
4
d
5
e
6
f
7
g
8
h
1
1.1.21. Isomorphism. Both graphs are bipartite, as shown below by mark-
ing one partite set.
In the graph on the right, every vertex appears in
eight 4-cycles. In the graph on the left, every vertex appears in only six
4-cycles (it is enough just to check one). Thus they are not isomorphic.
Alternatively, for every vertex in the right graph there are ﬁve vertices
having common neighbors with it, while in the left graph there are six
such vertices.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
• •
•
•
•
•
•
•
1.1.22.
Isomorphism of explicit graphs.
Among the graphs below,
{G1, G2, G5} are pairwise isomorphic. Also G3 ∼= G4, and these are not
isomorphic to any of the others. Thus there are exactly two isomorphism
classes represented among these graphs.
To prove these statements, one can present explicit bijections between
vertex sets and verify that these preserve the adjacency relation (such as
by displaying the adjacency matrix, for example). One can also make other
structural arguments. For example, one can move the highest vertex in G3
down into the middle of the picture to obtain G4; from this one can list the
desired bijection.

7
Chapter 1: Fundamental Concepts
Section 1.1: What Is a Graph?
8
One can also recall that two graphs are isomorphic if and only if their
complements are isomorphic. The complements of G1, G2, and G5 are cy-
cles of length 7, which are pairwise isomorphic. Each of G3 and G4 consists
of two components that are cycles of lengths 3 and 4; these graphs are
isomorphic to each other but not to a 7-cycle.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
G1
G2
G3
G4
G5
1.1.23. Smallest pairs of nonisomorphic graphs with the same vertex de-
grees. For multigraphs, loopless multigraphs, and simple graphs, the re-
quired numbers of vertices are 2,4,5; constructions for the upper bounds
appear below. We must prove that these constructions are smallest.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
a) general
b) loopless
c) simple
a) With 1 vertex, every edge is a loop, and the isomorphism class is
determined by the number of edges, which is determined by the vertex
degree. Hence nonisomorphic graphs with the same vertex degrees have
at least two vertices.
b) Every loopless graph is a graph, so the answer for loopless graphs
is at least 2. The isomorphism class of a loopless graph with two vertices
is determined by the number of copies of the edge, which is determined
by the vertex degrees.
The isomorphism class of a loopless graph with
three vertices is determined by the edge multiplicities. Let the three vertex
degrees be a, b, c, and let the multiplicities of the opposite edges be x, y, z,
where Since a = y + z, b = x + z, and c = x + y, we can solve for the
multiplicities in terms of the degrees by x = (b +c −a)/2, y = (a +c −b)/2,
and z = (a + b −c)/2.
Hence the multiplicities are determined by the
degrees, and all loopless graphs with vertex degrees a, b, c are pairwise
isomorphic. Hence nonisomorphic loopless graphs with the same vertex
degrees have at least four vertices.
c) Since a simple graph is a loopless graph, the answer for simple
graphs is at least 4. There are 11 isomorphism classes of simple graphs
with four vertices. For each of 0,1,5, or 6 edges, there is only one isomor-
phism class. For 2 edges, there are two isomorphism classes, but they have
different lists of vertex degrees (similarly for 4 edges). For 3 edges, the
three isomorphism classes have degree lists 3111, 2220, and 2211, all dif-
ferent. Hence nonisomorphic simple graphs with the same vertex degrees
must have at least ﬁve vertices.
1.1.24. Isomorphisms for the Petersen graph. Isomorphism is proved by
giving an adjacency-preserving bijection between the vertex sets. For picto-
rial representations of graphs, this is equivalent to labeling the two graphs
with the same vertex labels so that the adjacency relation is the same
in both pictures; the labels correspond to a permutation of the rows and
columns of the adjacency matrices to make them identical. The various
drawings of the Petersen graph below illustrate its symmetries; the label-
ings indicate that these are all “the same” (unlabeled) graph. The number
of isomorphisms from one graph to another is the same as the number of
isomorphisms from the graph to itself.
•
•
•
•
•
•
•
•
•
•
45
12
23
13
51
34
52
41
35
24
•
•
•
•
•
•
•
•
•
•
12
52
23
35
13
51
34
41
24
45
•
•
•
•
•
•
•
•
•
•
51
24
41
35
12
34
52
13
45
23
•
•
•
•
•
•
•
•
•
•
12
34
52
13
24
51
23
41
35
45
1.1.25. The Petersen graph has no cycle of length 7. Suppose that the Pe-
tersen graph has a cycle C of length 7. Since any two vertices of C are
connected by a path of length at most 3 on C, any additional edge with
endpoints on C would create a cycle of length at most 4. Hence the third
neighbor of each vertex on C is not on C.

9
Chapter 1: Fundamental Concepts
Section 1.1: What Is a Graph?
10
Thus there are seven edges from V (C) to the remaining three vertices.
By the pigeonhole principle, one of the remaining vertices receives at least
three of these edges. This vertex x not on C has three neighbors on C.
For any three vertices on C, either two are adjacent or two have a common
neighbor on C (again the pigeonhole principle applies). Using x, this com-
pletes a cycle of length at most 4. We have shown that the assumption of a
7-cycle leads to a contradiction.
Alternative completion of proof. Let u be a vertex on C, and let v, w
be the two vertices farthest from u on C. As argued earlier, no edges join
vertices of C that are not consecutive on C. Thus u is not adjacent to v or w.
Hence u, v have a common neighbor off C, as do u, w. Since u has only one
neighbor off C, these two common neighbors are the same. The resulting
vertex x is adjacent to all of u, v, w, and now x, v, w is a 3-cycle.
1.1.26. A k-regular graph of girth four has at least 2k vertices, with equality
only for Kk,k. Let G be k-regular of girth four, and chose xy ∈E(G). Girth
4 implies that G is simple and that x and y have no common neighbors.
Thus the neighborhoods N(x) and N(y) are disjoint sets of size k, which
forces at least 2k vertices into G. Possibly there are others.
Note also that N(x) and N(y) are independent sets, since G has no
triangle. If G has no vertices other than these, then the vertices in N(x)
can have neighbors only in N(y). Since G is k-regular, every vertex of N(x)
must be adjacent to every vertex of N(y). Thus G is isomorphic to Kk,k,
with partite sets N(x) and N(y). In other words, there is only one such
isomorphism class for each value of k.
Comment. One can also start with a vertex x, choose y from among
the k vertices in N(x), and observe that N(y) must have k −1 more vertices
not in N(x) ∪{x}. The proof then proceeds as above.
(An alternative proof uses the methods of Section 1.3. A triangle-free
simple graph with n vertices has at most n2/4 edges. Since G is k-regular,
this yields n2/4 ≥nk/2, and hence n ≥2k. Furthermore, equality holds
in the edge bound only for Kn/2,n/2, so this is the only such graph with 2k
vertices. (C. Pikscher))
•
•
•
•
•
N(x) −{y}
x
N(y) −{x}
•
•
•
•
•y
1.1.27. A simple graph of girth 5 in which every vertex has degree at least
k has at least k2 + 1 vertices, with equality achieveable when k ∈{2, 3}. Let
G be k-regular of girth ﬁve. Let S be the set consisting of a vertex x and
its neighbors. Since G has no cycle of length less than ﬁve, G is simple,
and any two neighbors of x are nonadjacent and have no common neighbor
other than x. Hence each y ∈S −{x} has at least k −1 neighbors that
are not in S and not neighbors of any vertex in S. Hence G has at least
k(k −1) vertices outside S and at least k + 1 vertices in S for at least k2 + 1
altogether.
The 5-cycle achieves equality when k = 2. For k = 3, growing the graph
symmetrically from x permits completing the graph by adding edges among
the non-neighbors of x. The result is the Petersen graph. (Comment: For
k > 3, it is known that girth 5 with minimum degree k and exactly k2 + 1
vertices is impossible, except for k = 7 and possibly for k = 57.)
•
•
•
•
•
•
•
•
•
•
x
1.1.28. The Odd Graph has girth 6. The Odd Graph Ok is the disjointness
graph of the set of k-element subsets of [2k + 1].
Vertices with a common neighbor correspond to k-sets with k −1 com-
mon elements. Thus they have exactly one common neighbor, and Ok has
no 4-cycle. Two vertices at distance 2 from a single vertex have at least
k −2 common neighbors. For k > 2, such vertices cannot be adjacent, and
thus Ok has no 5-cycle when k > 2. To form a 6-cycle when k ≥2, let
A = {2, . . . , k}, B = {k + 2, . . . , 2k}, a = 1, b = k + 1, c = 2k + 1. A 6-cycle is
A ∪{a}, B ∪{b}, A ∪{c}, B ∪{a}, A ∪{b}, B ∪{c}.
The Odd Graph also is not bipartite.
The successive elements
{1, . . . , k}, {k + 1, . . . , 2k}, {2k + 1, 1, . . . , k −1}, . . ., {k + 2, . . . , 2k + 1}
form an odd cycle.
1.1.29. Among any 6 people, there are 3 mutual acquaintances or 3 mutual
strangers. Let G be the graph of the acquaintance relation, and let x be one
of the people. Since x has 5 potential neighbors, x has at least 3 neighbors
or at least 3 nonneighbors. By symmetry (if we complement G, we still
have to prove the same statement), we may assume that x has at least 3
neighbors. If any pair of these people are acquainted, then with x we have
3 mutual acquaintances, but if no pair of neighbors of x is acquainted, then
the neighbors of x are three mutual strangers.
1.1.30. The number of edges incident to vi is the ith diagonal entry in M M T
and in A2. In both M M T and A2 this is the sum of the squares of the entries

11
Chapter 1: Fundamental Concepts
Section 1.1: What Is a Graph?
12
in the ith row. For M M T , this follows immediately from the deﬁnition of
matrix multiplication and transposition, but for A2 this uses the graph-
theoretic fact that A = AT ; i.e. column i is the same as row i. Because
G is simple, the entries of the matrix are all 0 or 1, so the sum of the
squares in a row equals the number of 1s in the row. In M, the 1s in a row
denote incident edges; in A they denote vertex neighbors. In either case,
the number of 1s is the degree of the vertex.
If i ̸= j, then the entry in position (i, j) of A2 is the number of common
neighbors of vi and vj. The matrix multiplication puts into position (i, j)
the “product” of row i and column j; that is Pn
k=1 ai,kak, j. When G is simple,
entries in A are 1 or 0, depending on whether the corresponding vertices
are adjacent. Hence ai,kak, j = 1 if vk is a common neighbor of vi and vj;
otherwise, the contribution is 0. Thus the number of contributions of 1 to
entry (i, j) is the number of common neighbos of vi and vj.
If i ̸= j, then the entry in position (i, j) of M M T is the number of edges
joining vi and vj (0 or 1 when G has no multiple edges). The ith row of
M has 1s corresponding to the edges incident to vi. The jth column of
MT is the same as the jth row of M, which has 1s corresponding to the
edges incident to vj. Summing the products of corresponding entries will
contribute 1 for each edge incident to both vi and vj; 0 otherwise.
Comment. For graphs without loops, both arguments for (i, j) in gen-
eral apply when i = j to explain the diagonal entries.
1.1.31.
Kn decomposes into two isomorphic (“self-complementary”) sub-
graphs if and only if n or n −1 is divisible by 4.
a) The number of vertices in a self-complementary graph is congruent
to 0 or 1 (mod 4). If G and G are isomorphic, then they have the same
number of edges, but together they have
 n
2

edges (with none repeated), so
the number of edges in each must be n(n −1)/4. Since this is an integer
and the numbers n and n −1 are not both even, one of {n, n −1} must be
divisible by 4.
b) Construction of self-complementary graphs for all such n.
Proof 1 (explicit construction).
We generalize the structure of the
self-complementary graphs on 4 and 5 vertices, which are P4 and C5. For
n = 4k, take four vertex sets of size k, say X1, X2, X3, X4, and join all
vertices of Xi to those of Xi+1, for i = 1, 2, 3. To specify the rest of G, within
these sets let X1 and X4 induce copies of a graph H with k vertices, and let
X2 and X3 induce H. (For example, H may be Kk.) In G, both X2 and X3
induce H, while X1 and X4 induce H, and the connections between sets are
X2 ↔X4 ↔X1 ↔X3. Thus relabeling the subsets deﬁnes an isomorphism
between G and G. (There are still other constructions for G.)
H
H
H
H
H
H
H
H
For n = 4k + 1, we add a vertex x to the graph constructed above. Join
x to the 2k vertices in X1 and X4 to form G. The isomorphism showing that
G −x is self-complementary also works for G (with x mapped to itself),
since this isomorphism maps NG(x) = X1 ∪X4 to NG(x) = X2 ∪X3.
Proof 2 (inductive construction). If G is self-complementary, then let
H1 be the graph obtained from G and P4 by joining the two ends of P4 to
all vertices of G. Let H2 be the graph obtained from G and P4 by join-
ing the two center vertices of P4 to all vertices of G.
Both H1 and H2
are self-complementary. Using this with G = K1 produces the two self-
complementary graphs of order 5, namely C5 and the bull.
Self-complementary graphs with order divisible by 4 arise from re-
peated use of the above using G = P4 as a starting point, and self-
complementary graphs of order congruent to 1 modulo 4 arise from repeated
use of the above using G = K1 as a starting point. This construction pro-
duces many more self-complementary graphs than the explicit construction
in Proof 1.
1.1.32. Km,n decomposes into two isomorphic subgraphs if and only if m
and n are not both odd. The condition is necessary because the number
of edges must be even. It is sufﬁcient because Km,n decomposes into two
copies of Km,n/2 when n is even.
1.1.33. Decomposition of complete graphs into cycles through all vertices.
View the vertex set of Kn as Zn, the values 0, . . . , n −1 in cyclic order. Since
each vertex has degree n −1 and each cycle uses two edges at each vertex,
the decomposition has (n −1)/2 cycles.
For n = 5 and n = 7, it sufﬁces to use cycles formed by traversing the
vertices with constant difference: (0, 1, 2, 3, 4) and (0, 2, 4, 1, 3) for n = 5
and (0, 1, 2, 3, 4, 5, 6), (0, 2, 4, 6, 1, 3, 5), and (0, 3, 6, 2, 5, 1, 4) for n = 7.
This construction fails for n = 9 since the edges with difference 3 form
three 3-cycles. The cyclically symmetric construction below treats the ver-
tex set as Z8 together with one special vertex.

13
Chapter 1: Fundamental Concepts
Section 1.1: What Is a Graph?
14
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
1.1.34. Decomposition of the Petersen graph into copies of P4. Consider
the drawing of the Petersen graph with an inner 5-cycle and outer 5-cycle.
Each P4 consists of one edge from each cycle and one cross edge joining
them. Extend each cross edge e to a copy of P4 by taking the edge on each
of the two 5-cycles that goes in a clockwise direction from e. In this way,
the edges on the outside 5-cycle are used in distinct copies of P4, and the
same holds for the edges on the inside 5-cycle.
Decomposition of the Petersen graph into three pairwise-isomorphic
connected subgraphs. Three such decompositions are shown below. We re-
stricted the search by seeking a decomposition that is unchanged by 120◦
rotations in a drawing of the Petersen graph with 3-fold rotational symme-
try. The edges in this drawing form classes of size 3 that are unchanged
under rotations of 120◦; each subgraph in the decomposition uses exactly
one edge from each class.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
1.1.35. Kn decomposes into three pairwise-isomorphic subgraphs if and
only if n + 1 is not divisible by 3. The number of edges is n(n −1)/2. If n + 1
is divisible by 3, then n and n−1 are not divisible by 3. Thus decomposition
into three subgraphs of equal size is impossible in this case.
If n +1 is not divisible by 3, then e(Kn) is divisible by 3, since n or n −1
is divisible by 3. We construct a decomposition into three subgraphs that
are pairwise isomorphic (there are many such decompositions).
When n is a multiple of 3, we partition the vertex set into three subsets
V1, V2, V3 of equal size. Edges now have two types: within a set or joining
two sets. Let the ith subgraph Gi consist of all the edges within Vi and all
the edges joining the two other subsets. Each edge of Kn appears in exactly
one of these subgraphs, and each Gi is isomorphic to the disjoint union of
Kn/3 and Kn/3,n/3.
When n ≡1 (mod 3), consider one vertex w. Since n −1 is a multiple
of 3, we can form the subgraphs Gi as above on the remaining n −1 ver-
tices. Modify Gi to form Hi by joining w to every vertex of Vi. Each edge
involving w has been added to exactly one of the three subgraphs. Each Hi
is isomorphic to the disjoint union of K1+(n−1)/3 and K(n−1)/3,(n−1)/3.
•
1.1.36. If Kn decomposes into triangles, then n −1 or n −3 is divisible by 6.
Such a decomposition requires that the degree of each vertex is even and
the number of edges is divisible by 3. To have even degree, n must be odd.
Also n(n −1)/2 is a multiple of 3, so 3 divides n or n −1. If 3 divides n and
n is odd, then n −3 is divisible by 6. If 3 divides n −1 and n is odd, then
n −1 is divisible by 6.
1.1.37. A graph in which every vertex has degree 3 has no decomposition
into paths with at least ﬁve vertices each. Suppose that G has such a de-
composition. Since every vertex has degree 3, each vertex is an endpoint
of at least one of the paths and is an internal vertex on at most one of
them. Since every path in the decomposition has two endpoints and has at
least three internal vertices, we conclude that the number of paths in the
decomposition is at least n(G)/2 and is at most n(G)/3, which is impossible.
Alternatively, let k be the number of paths. There are 2k endpoints of
paths. On the other hand, since each internal vertex on a path in the de-
composition must be an endpoint of some other path in the decomposition,
there must be at least 3k endpoints of paths. The contradiction implies
that there cannot be such a decomposition.
1.1.38. A 3-regular graph G has a decomposition into claws if and only if
G is bipartite. When G is bipartite, we produce a decomposition into claws.
We use all claws obtained by taking the three edges incident with a single
vertex in the ﬁrst partite set. Each claw uses all the edges incident to its
central vertex. Since each edge has exactly one endpoint in the ﬁrst partite
set, each edge appears in exactly one of these claws.
When G has a decomposition into claws, we partition V (G) into two
independent sets. Let X be the set of centers of the claws in the decom-
position. Since every vertex has degree 3, each claw in the decomposition

15
Chapter 1: Fundamental Concepts
Section 1.1: What Is a Graph?
16
uses all edges incident to its center. Since each edge is in at most one claw,
this makes X an independent set. The remaining vertices also form an in-
dependent set, because every edge is in some claw in the decomposition,
which means that one of its endpoints must be the center of that claw.
1.1.39. Graphs that decompose K6.
Triangle—No.
A graph decomposing into triangles must have even
degree at each vertex. (This excludes all decompositions into cycles.)
Paw, P5—No. K6 has 15 edges, but each paw or P5 has four edges.
House, Bowtie, Dart–No. K6 has 15 edges, but each house, bowtie, or
dart has six edges.
Claw—Yes. Put ﬁve vertices 0, 1, 2, 3, 4 on a circle and the other vertex
z in the center. For i ∈{0, 1, 2, 3, 4}, use a claw with edges from i to i + 1,
i + 2, and z. Each edge appears in exactly one of these claws.
Kite—Yes. Put all six vertices on a circle. Each kite uses two opposite
edges on the outside, one diagonal, and two opposite edges of “length” 2.
Three rotations of the picture complete the decomposition.
Bull—Yes. The bull has ﬁve edges, so we need three bulls. Each bull
uses degrees 3, 3, 2, 1, 1, 0 at the six vertices. Each bull misses one vertex,
and each vertex of K6 has ﬁve incident edges, so three of the vertices will
receive degrees 3, 2, 0 from the three bulls, and the other three will receive
degrees 3, 1, 1. Thus we use vertices of two types, which leads us to position
them on the inside and outside as on the right below. The bold, solid, and
dashed bulls obtained by rotation complete the decomposition.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
1.1.40. Automorphisms of Pn, Cn, and Kn.
A path can be left alone or
ﬂipped, a cycle can be rotated or ﬂipped, and a complete graph can be
permuted arbtrarily. The numbers of automorphisms are 2, 2n, n!, respec-
tively. Correspondingly, the numbers of distinct labelings using vertex set
[n] are n!/2, (n−1)!/2, 1, respectively. For Pn, these formulas require n > 1.
1.1.41. Graphs with one and three automorphisms. The two graphs on the
left have six vertices and only the identity automorphism. The two graphs
on the right have three automorphisms.
•
•
•
•
•
•
•
•
•
•
•
•
• •
•
•
•
•
•
•
•
•
•
•
• •
•
•
•
•
•
•
•
•
•
•
•
•
•
1.1.42. The set of automorphisms of a graph G satisﬁes the following:
a) The composition of two automorphisms is an automorphism.
b) The identity permutation is an automorphism.
c) The inverse of an automorphism is also an automorphism.
d) Composition of automorphisms satisﬁes the associative property.
The ﬁrst three properties are essentially the same as the transitive, reﬂex-
ive, and symmetric properties for the isomorphism relation; see the discus-
sion of these in the text. The fourth property holds because composition
of functions always satisﬁes the associative property (see the discussion of
composition in Appendix A).
1.1.43.
Every automorphism of the Petersen graph maps the 5-cycle
(12,34,51,23,45) into a 5-cycle with vertices ab, cd, ea, bc, de by a permu-
tation of [5] taking 1,2,3,4,5 to a, b, c, d, e, respectively. Let σ denote the
automorphism, and let the vertex ab be the image of the vertex 12 under σ.
The image of 34 must be a pair disjoint from ab, so we may let cd = σ(34).
The third vertex must be disjoint from the second and share an element
with the ﬁrst. We may select a to be the common element in the ﬁrst and
third vertices. Similarly, we may select c to be the common element in the
second and fourth vertices. Since nonadjacent vertices correspond to sets
with a common element, the other element of the fourth vertex must be b,
and the ﬁfth vertex can’t have a or b and must have d and e. Thus every
5-cycle must have this form and is the image of (12,34,51,23,45) under the
speciﬁed permutation σ.
The Peterson graph has 120 automorphisms.
Every permutation of
[5] preserves the disjointness relation on 2-element subsets and therefore
deﬁnes an automorphism of the Petersen graph. Thus there are at least
120 automorphism. To show that there are no others, consider an arbi-
trary automorphism σ. By the preceding paragraph, the 5-cycle C maps
to some 5-cycle (ab, cd, ea, bc, de). This deﬁnes a permutation f mapping
1, 2, 3, 4, 5 to a, b, c, d, e, respectively. It sufﬁces to show that the other
vertices must also have images under σ that are described by f .
The remaining vertices are pairs consisting of two nonconsecutive val-
ues modulo 5. By symmetry, it sufﬁces to consider just one of them, say
24. The only vertex of C that 24 is adjacent to (disjoint from) is 51. Since

17
Chapter 1: Fundamental Concepts
Section 1.2: Paths, Cycles, and Trails
18
σ(51) = ea, and the only vertex not on (ab, cd, ea, bc, de) that is adjacent
to ea is bd, we must have σ(24) = bd, as desired.
1.1.44.
For each pair of 3-edge paths P = (u0, u1, u2, u3) and Q =
(v0, v1, v2, v3) in the Petersen graph, there is an automorphism of the Pe-
tersen graph that turns P into Q. In the disjointness representation of
the Petersen graph, suppose the pairs corresponding to the vertices of P
are ab, cd, ef, gh, respectively. Since consecutive pairs are disjoint and the
edges are unordered pairs, we may write the pairs so that a, b, c, d, e are
distinct, f = a, g = b, and h = c. Putting the vertex names of Q in the
same format AB, C D, E F, G
H, we chose the isomorphism generated by
the permutation of [5] that turns a, b, c, d, e into A, B, C, D, E, respectively.
1.1.45. A graph with 12 vertices in which every vertex has degree 3 and the
only automorphism is the identity.
•
•
•
•
•
•
•
•
•
a
b
c
d
e
q
p
y
x
•
•
•
u
v
w
There are many ways to prove that an automorphism must ﬁx all the
vertices. The graph has only two triangles (abc and uvw). Now an automor-
phism must ﬁx p, since is the only vertex having no neighbor on a triangle,
and also e, since it is the only vertex with neighbors on both triangles. Now
d is the unique common neighbor of p and e. The remaining vertices can be
ﬁxed iteratively in the same way, by ﬁnding each as the only unlabeled ver-
tex with a speciﬁed neighborhood among the vertices already ﬁxed. (This
construction was provided by Luis Dissett, and the argument forbidding
nontrivial automorphisms was shortened by Fred Galvin. Another such
graph with three triangles was found by a student of Fred Galvin.)
1.1.46. Vertex-transitivity and edge-transitivity. The graph on the left in
Exercise 1.1.21 is isomorphic to the 4-dimensional hypercube (see Section
1.3), which is vertex-transitive and edge-transitive via the permutation
of coordinates.
For the graph on the right, rotation and inside-out ex-
change takes care of vertex-transitivity. One further generating operation
is needed to get edge-transitivity; the two bottom outside vertices can be
switched with the two bottom inside vertices.
1.1.47. Edge-transitive versus vertex-transitive. a) If G is obtained from Kn
with n ≥4 by replacing each edge of Kn with a path of two edges through
a new vertex of degree 2, then G is edge-transitive but not vertex-transitive.
Every edge consists of an old vertex and a new vertex. The n! permutations
of old vertices yield automorphism. Let x&y denote the new vertex on the
path replacing the old edge xy; note that x&y = y&x. The edge joining x
and x&y is mapped to the edge joining u and u&v by any automorphism
that maps x to u and y to v. The graph is not vertex-transitive, since x&y
has degree 2, while x has degree n −1.
b) If G is edge-transitive but not vertex-transitive and has no isolated
vertices, then G is bipartite. Let uv be an arbitrary edge of G. Let S be the
set of vertices to which u is mapped by automorphisms of G, and let T be the
set of vertices to which v is mapped. Since G is edge-transitive and has no
isolated vertex, S ∪T = V (G). Since G is not vertex-transitive, S ̸= V (G).
Together, these statements yield S ∩T = ∅, since the composition of two
automorphisms is an automorphism. By edge-transitivity, every edge of G
contains one vertex of S and one vertex of T . Since S ∩T = ∅, this implies
that G is bipartite with vertex bipartition S, T .
c) The graph below is vertex-transitive but not edge-transitive. A com-
position of left-right reﬂections and vertical rotations can take each vertex
to any other. The graph has some edges on triangles and some edges not
on triangles, so it cannot be edge-transitive.
•
•
•
•
•
•
1.2. PATHS, CYCLES, AND TRAILS
1.2.1. Statements about connection.
a) Every disconnected graph has an isolated vertex—FALSE. A simple
4-vertex graph in which every vertex has degree 1 is disconnected and has
no isolated vertex.
b) A graph is connected if and only if some vertex is connected to all
other vertices—TRUE. A vertex is “connected to” another if they lie in a
common path.
If G is connected, then by deﬁnition each vertex is con-
nected to every other. If some vertex x is connected to every other, then
because a u, x-path and x, v-path together contain a u, v-path, every vertex
is connected to every other, and G is connected.

19
Chapter 1: Fundamental Concepts
Section 1.2: Paths, Cycles, and Trails
20
c) The edge set of every closed trail can be partitioned into edge sets of
cycles—TRUE. The vertices and edges of a closed trail form an even graph,
and Proposition 1.2.27 applies.
d) If a maximal trail in a graph is not closed, then its endpoints have
odd degree. If an endpoint v is different from the other endpoint, then the
trail uses an odd number of edges incident to v. If v has even degree, then
there remains an incident edge at v on which to extend the trail.
1.2.2. Walks in K4.
a) K4 has a walk that is not a trail; repeat an edge.
b) K4 has a trail that is not closed and is not a path; traverse a triangle
and then one additional edge.
c) The closed trails in K4 that are not cycles are single vertices. A closed
trail has even vertex degrees; in K4 this requires degrees 2 or 0, which
forbids connected nontrivial graphs that are not cycles. By convention, a
single vertex forms a closed trail that is not a cycle.
1.2.3.
The non-coprimality graph with vertex set {1, . . . , 15}.
Vertices
1,11,13 are isolated. The remainder induce a single component. It has
a spanning path 7,14,10,5,15,3,9,12,8,6,4,2. Thus there are four compo-
nents, and the maximal path length is 11.
1.2.4. Effect on the adjacency and incidence matrices of deleting a vertex or
edge. Assume that the graph has no loops.
Consider the vertex ordering v1, . . . , vn.
Deleting edge vivj simply
deletes the corresponding column of the incidence matrix; in the adjacency
matrix it reduces positions i, j and j, i by one.
Deleting a vertex vi eliminates the ith row of the incidence matrix,
and it also deletes the column for each edge incident to vi. In the adjacency
matrix, the ith row and ith column vanish, and there is no effect on the
rest of the matrix.
1.2.5. If v is a vertex in a connected graph G, then v has a neighbor in every
component of G −v. Since G is connected, the vertices in one component of
G −v must have paths in G to every other component of G −v, and a path
can only leave a component of G −v via v. Hence v has a neighbor in each
component.
No cut-vertex has degree 1. If G is connected and G −v has k compo-
nents, then having a neighbor in each such component yields dG(v) ≥k. If
v is a cut-vertex, then k ≥2, and hence dG(v) ≥2.
1.2.6. The paw. Maximal paths: acb, abcd, bacd (two are maximum paths).
Maximal cliques: abc, cd (one is a maximum clique). Maximal independent
sets: c, bd, ad (two are maximum independent sets).
•
•
•
•
a
b
c
d
1.2.7. A bipartite graph has a unique bipartition (except for interchanging
the two partite sets) if and only if it is connected. Let G be a bipartite graph.
If u and v are vertices in distinct components, then there is a bipartition in
which u and v are in the same partite set and another in which they are in
opposite partite sets.
If G is connected, then from a ﬁxed vertex u we can walk to all other
vertices. A vertex v must be in the same partite set as u if there is a u, v-
walk of even length, and it must be in the opposite set if there is a u, v-walk
of odd length.
1.2.8. The biclique Km,n is Eulerian if and only if m and n are both even or
one of them is 0. The graph is connected. It vertices have degrees m and
n (if both are nonzero), which are all even if and only if m and n are both
even. When m or n is 0, the graph has no edges and is Eulerian.
1.2.9. The minimum number of trails that decompose the Petersen graph is
5. The Petersen graph has exactly 10 vertices of odd degree, so it needs at
least 5 trails, and Theorem 1.2.33 implies that ﬁve trails sufﬁce.
The Petersen graph does have a decomposition into ﬁve paths. Given
the drawing of the Petersen graph consisting of two disjoint 5-cycles and
edges between them, form paths consisting of one edge from each cycle and
one edge joining them.
1.2.10. Statements about Eulerian graphs.
a) Every Eulerian bipartite graph has an even number of edges—TRUE.
Proof 1. Every vertex has even degree. We can count the edges by
summing the degrees of the vertices in one partite set; this counts every
edge exactly once. Since the summands are all even, the total is also even.
Proof 2. Since every walk alternates between the partite sets, follow-
ing an Eulerian circuit and ending at the initial vertex requires taking an
even number of steps.
Proof 3. Every Eulerian graph has even vertex degrees and decom-
poses into cycles. In a bipartite graph, every cycle has even length. Hence
the number of edges is a sum of even numbers.
b) Every Eulerian simple graph with an even number of vertices has
an even number of edges—FALSE. The union of an even cycle and an odd
cycle that share one vertex is an Eulerian graph with an even number of
vertices and an odd number of edges.

21
Chapter 1: Fundamental Concepts
Section 1.2: Paths, Cycles, and Trails
22
1.2.11. If G is an Eulerian graph with edges e, f that share a vertex, then
G need not have an Eulerian circuit in which e, f appear consecutively. If
G consists of two edge-disjoint cycles sharing one common vertex v, then
edges incident to v that belong to the same cycle cannot appear consecu-
tively on an Eulerian circuit.
1.2.12. Algorithm for Eulerian circuit. We convert the proof by extremal-
ity to an iterative algorithm. Assume that G is a connected even graph.
Initialize T to be a closed trail of length 0; a single vertex.
If T is not all of G, we traverse T to reach a vertex v on T that is
incident to an edge e not in T . Beginning from v along e, traversing an
arbitrary trail T ′ not using edges of T ; eventually the trail cannot be ex-
tended. Since G −E(T ) is an even graph, this can only happen upon a
return to the original vertex v, completing a closed trail. Splice T ′ into T
by traversing T up to v, then following T ′, then the rest of T .
If this new trail includes all of E(G), then it is an Eulerian circuit, and
we stop. Otherwise, let this new trail be T and repeat the iterative step.
Since each successive trail is longer and G has ﬁnitely many edges, the
procedure must terminate. It can only terminate when an Eulerian circuit
has been found.
1.2.13. Each u, v-walk contains a u, v-path.
a) (induction). We use ordinary induction on the length l of the walk,
proving the statement for all pairs of vertices. A u, v-walk of length 1 is
a u, v-path of length 1; this provides the basis.
For the induction step,
suppose l > 1, and let W be a u, v-walk of length l; the induction hypothesis
is that walks of length less than l contain paths linking their endpoints. If
u = v, the desired path has length 0. If u ̸= v, let wv be the last edge of W,
and let W ′ be the u, w-walk obtained by deleting wv from W. Since W ′ has
length l −1, the induction hypothesis guarantees a u, w-path P in W ′. If
w = v, then P is the desired u, v-path. If w ̸= v and v is not on P, then we
extend P by the edge wv to obtain a u, v-path. If w ̸= v and v is on P, then
P contains a u, v-path. In each case, the edges of the u, v-path we construct
all belong to W.
•
•
•
u
w
v
b) (extremality) Given a u, v-walk W, consider a shortest u, v-walk W ′
contained in W. If this is not a path, then it has a repeated vertex, and
the portion between the instances of one vertex can be removed to obtain a
shorter u, v-walk in W than W ′.
1.2.14. The union of the edge sets of distinct u, v-paths contains a cycle.
Proof 1 (extremality). Let P and Q be distinct u, v-paths. Since a
path in a simple graph is determined by its set of edges, we may assume
(by symmetry) that P has an edge e not belonging to Q. Within the portion
of P before P traverses e, let y be the last vertex that belongs to Q. Within
the portion of P after P traverses e, let z be the ﬁrst vertex that belongs
to Q. The vertices y, z exist, because u, v ∈V (Q). The y, z-subpath of
P combines with the y, z- or z, y-subpath of Q to form a cycle, since this
subpath of Q contains no vertex of P between y and z.
Proof 2 (induction). We use induction on the sum l of the lengths of
the two paths, for all vertex pairs simultaneously. If P and Q are u, v-
paths, then l ≥2. If l = 2, then we have distinct edges consisting of u and
v, and together they form a cycle of length 2. For the induction step, sup-
pose l > 2. If P and Q have no common internal vertices, then their union
is a cycle. If P and Q have a common internal vertex w, then let P ′, P′′ be
the u, w-subpath of P and the w, v-subpath of P. Similarly deﬁne Q′, Q′′.
Then P′, Q′ are u, w-paths with total length less than l. Similarly, P ′′, Q′′
are w, v-paths with total length less than l. Since P, Q are distinct, we
must have P′, Q′ distinct or P′′, Q′′ distinct. We can apply the induction
hypothesis to the pair that is a pair of distinct paths joining the same end-
points. This pair contains the edges of a cycle, by the induction hypothesis,
which in turn is contained in the union of P and Q.
The union of distinct u, v-walks need not contain a cycle.
Let G =
P3, with vertices u, x, v in order. The distinct u, v-walks with vertex lists
u, x, u, x, v and u, x, v, x, v do not contain a cycle in their union.
1.2.15. If W is a nontrivial closed walk that does not contain a cycle, then
some edge of W occurs twice in succession (once in each direction).
Proof 1 (induction on the length l of W). We are given l ≥1. A closed
walk of length 1 is a loop, which is a cycle. Thus we may assume l ≥2.
Basis step: l = 2. Since it contains no cycle, the walk must take a step
and return immediately on the same edge.
Induction step: l > 2. If there is no vertex repetition other than ﬁrst
vertex = last vertex, then W traverses a cycle, which is forbidden. Hence
there is some other vertex repetition. Let W ′ be the portion of W between
the instances of such a repetition. The walk W ′ is a shorter closed walk
than W and contains no cycle, since W has none. By the induction hypoth-
esis, W ′ has an edge repeating twice in succession, and this repetition also
appears in W.
Proof 2. Let w be the ﬁrst repetition of a vertex along W, arriving
from v on edge e. From the ﬁrst occurrence of w to the visit to v is a w, v-
walk, which is a cycle if v = w or contains a nontrivial w, v-path P. This

23
Chapter 1: Fundamental Concepts
Section 1.2: Paths, Cycles, and Trails
24
completes a cycle with e unless in fact P is the path of length 1 with edge
e, in which case e repeats immediately in opposite directions.
1.2.16. If edge e appears an odd number of times in a closed walk W, then
W contains the edges of a cycle through e.
Proof 1 (induction on the length of W, as in Lemma 1.2.7). The short-
est closed walk has length 1. Basis step (l = 1): The edge e in a closed walk
of length 1 is a loop and thus a cycle. Induction step (l > 1): If there is no
vertex repetition, then W is a cycle. If there is a vertex repetition, choose
two appearances of some vertex (other than the beginning and end of the
walk). This splits the walk into two closed walks shorter than W. Since
each step is in exactly one of these subwalks, one of them uses e an odd
number of times. By the induction hypothesis, that subwalk contains the
edges of a cycle through e, and this is contained in W.
Proof 2 (parity ﬁrst, plus Lemma 1.2.6). Let x and y be the endpoints
of e. As we traverse the walk, every trip through e is x, e, y or y, e, x. Since
the number of trips is odd, the two types cannot alternate. Hence some two
successive trips through e have the same direction. By symmetry, we may
assume that this is x, e, y, . . . , x, e, y.
The portion of the walk between these two trips through e is a y, x-
walk that does not contain e. By Lemma 1.2.6, it contains a y, x-path (that
does not contain e. Adding e to this path completes a cycle with e consisting
of edges in W.
Proof 3 (contrapositive). If edge e in walk W does not lie on a cycle
consisting of edges in W, then by our characterization of cut-edges, e is a
cut-edge of the subgraph H consisting of the vertices and edges in W. This
means that the walk can only return to e at the endpoint from which it most
recently left e. This requires the traversals of e to alternate directions along
e. Since a closed walk ends where it starts (that is, in the same component
of H −e), the number of traversals of e by W must be even.
1.2.17. The “adjacent-transposition graph” Gn on permutations of [n] is
connected. Note that since every permutation of [n] has n −1 adjacent
pairs that can be transposed, Gn is (n −1)-regular. Therefore, showing that
Gn is connected shows that it is Eulerian if and only if n is odd.
Proof 1 (path to ﬁxed vertex). We show that every permutation has
a path to the identity permutation I = 1, . . . , n. By the transitivity of the
connection relation, this yields for all u, v ∈V (G) a u, v-path in G.
To
create a v, I-path, move element 1 to the front by adjacent interchanges,
then move 2 forward to position 2, and so on. This builds a walk to I, which
contains a path to I. (Actually, this builds a path.)
Proof 2 (direct u, v-path). Each vertex is a permutation of [n]. Let
u = a1, . . . , an and v = b1, . . . , bn; we construct at u, v-path. The element
b1 appears in u as some ai; move it to the front by adjacent transpositions,
beginning a walk from u. Next ﬁnd b2 among a2, . . . , an and move it to
position 2. Iterating this procedure brings the elements of v toward the
front, in order, while following a walk. It reaches v when all positions have
been “corrected”. (Actually, the walk is a u, v-path.) Note that since we
always bring the desired element forward, we never disturb the position of
the elements that were already moved to their desired positions.
Proof 3 (induction on n). If n = 1, then Gn ∼= K1 and G is connected
(we can also start with n = 2). For n > 1, assume that Gn−1 is connected.
In Gn, the subgraph H induced by the vertices having n at the end is iso-
morphic to Gn−1. Every vertex of G is connected to a vertex of H by a path
formed by moving element n to the end, one step at a time. For u, v ∈V (G),
we thus have a path from u to a vertex u′ ∈V (H), a path from v to a vertex
v′ ∈V (H), and a u′, v′-path in H that exists by the induction hypothe-
sis. By the transitivity of the connection relation, there is a u, v-path in G.
This completes the proof of the induction step. (The part of G4 used in the
induction step appears below.)
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
1234
2134
2314
3214
3124
1324
1243
2143
2341
3241
3142
1342
1423
2413
2431
3421
3412
1432
4123
4213
4231
4321
4312
4132
Proof 4 (induction on n). The basis is as in Proof 3. For n > 1, note
that for each i ∈[n], the vertices with i at the end induce a copy Hi of
Gn−1. By the induction hypothesis, each such subgraph is connected. Also,
Hn has vertices with i in position n −1 whenever 1 ≤i ≤n −1. We can
interchange the last two positions to obtain a neighbor in Hi. Hence there
is an edge from each Hi to Hn, and transitivity of the connection relation
again completes the proof.
1.2.18. For k ≥1, there are two components in the graph Gk whose vertex
set is the set of binary k-tuples and whose edge set consists of the pairs that
differ in exactly two places. Changing two coordinates changes the number
of 1s in the name of the vertex by zero or by ±2. Thus the parity of the

25
Chapter 1: Fundamental Concepts
Section 1.2: Paths, Cycles, and Trails
26
number of 1s remains the same along every edge. This implies that Gk has
at least two components, because there is no edge from an k-tuple with an
even number of 1s to an k-tuple with an odd number of 1s.
To show that Gk has at most two components, there are several ap-
proaches. In each, we prove that any two vertices with the same parity lie
on a path, where “parity” means parity of the number of 1s.
Proof 1. If u and v are vertices with the same parity, then they differ
in an even number of places. This is true because each change of a bit in
obtaining one label from the other switches the parity. Since they differ
in an even number of places, we can change two places at a time to travel
from u to v along a path in Gk.
Proof 2.
We use induction on k.
Basis step (k = 1): G1 has two
components, each an isolated vertex. Induction step (k > 1): when k > 1,
Gk consists of two copies of Gk−1 plus additional edges. The two copies are
obtained by appending 0 to all the vertex names in Gk−1 or appending 1
to them all. Within a copy, the edges don’t change, since these vertices
all agree in the new place. By the induction hypothesis, each subgraph
has two components. The even piece in the 0-copy has 0 · · · 000, which is
adjacent to 0 · · · 011 in the odd piece of the 1-copy. The odd piece in the
0-copy has 0 · · · 010, which is adjacent to 0 · · · 001 in the even piece of the
1-copy. Thus the four pieces reduce to (at most) two components in Gk.
1.2.19. For n,r, s ∈N, the simple graph G with vertex set Zn and edge set
{i j: | j −i| ∈{r, s}} has gcd(n,r, s) components. Note: The text gives the
vertex set incorrectly. When r = s = 2 and n is odd, it is necessary to go up
to n ≡0 to switch from odd to even.
Let k = gcd(n,r, s). Since k divides n, the congruence classes modulo n
fall into congruence classes modulo k in a well-deﬁned way. All neighbors of
vertex i differ from i by a multiple of k. Thus all vertices in a component lie
in the same congruence class modulo k, which makes at least k components.
To show that there are only k components, we show that all vertices
with indices congruent to i (mod k) lie in one component (for each i). It
sufﬁces to build a path from i to i + k. Let l = gcd(r, s), and let a = r/l and
b = s/l. Since there are integers (one positive and one negative) such that
pa +qb = 1, moving p edges with difference +r and q edges with difference
+s achieves a change of +l.
We thus have a path from i to i + l, for each i. Now, k = gcd(l, n). As
above, there exist integers p′, q′ such that p′(l/k) + q′(n/k) = 1. Rewriting
this as p′l = k −q′n means that if we use p′ of the paths that add l, then
we will have moved from i to i + k (mod n).
1.2.20. If v is a cut-vertex of a simple graph G, then v is not a cut-vertex
of G. Let V1, . . . , Vk be the vertex sets of the components of G −v; note
that k ≥2. Then G contains the complete multipartite graph with partite
sets V1, . . . , Vk. Since this includes all vertices of G −v, the graph G −v is
connected. Hence v is not a cut-vertex of G.
1.2.21. A self-complementary graph has a cut-vertex if and only if it has a
vertex of degree 1. If there is a vertex of degree 1, then its neighbor is a
cut-vertex (K2 is not self-complementary).
For the converse, let v be a cut-vertex in a self-complementary graph
G. The graph G −v has a spanning biclique, meaning a complete bipartite
subgraph that contains all its vertices. Since G is self-complementary, also
G must have a vertex u such that G −u has a spanning biclique.
Since each vertex of G −v is nonadjacent to all vertices in the other
components of G −v, a vertex other than u must be in the same partite set
of the spanning biclique of G −u as the vertices not in the same component
as u in G −v. Hence only v can be in the other partite set, and v has degree
at least n −2. We conclude that v has degree at most 1 in G, so G has a
vertex of degree at most 1. Since a graph and its complement cannot both
be disconnected, G has a vertex of degree 1.
1.2.22. A graph is connected if and only if for every partition of its vertices
into two nonempty sets, there is an edge with endpoints in both sets.
Necessity. Let G be a connected graph. Given a partition of V (G) into
nonempty sets S, T , choose u ∈S and v ∈T . Since G is connected, G has a
u, v-path P. After its last vertex in S, P has an edge from S to T .
Sufﬁciency.
Proof 1 (contrapositive). We show that if G is not connected, then for
some partition there is no edge across. In particular, if G is disconnected,
then let H be a component of G. Since H is a maximal connected sub-
graph of G and the connection relation is transitive, there cannot be an
edges with one endpoint in V (H) and the other endpoint outside. Thus for
the partition of V (G) into V (H) and V (G) −V (H) there is no edge with
endpoints in both sets.
Proof 2 (algorithmic approach). We grow a set of vertices that lie in
the same equivalence class of the connection relation, eventually accumu-
lating all vertices. Start with one vertex in S. While S does not include all
vertices, there is an edge with endpoints x ∈S and y /∈S. Adding y to S
produces a larger set within the same equivalence class, using the transi-
tivity of the connection relation. This procedure ends only when there are
no more vertices outside S, in which case all of G is in the same equivalence
class, so G has only one component.
Proof 3 (extremality). Given a vertex x ∈V (G), let S be the set of all
vertices that can be reached from x via paths. If S ̸= V (G), consider the
partition into S and V (G)−S. By hypothesis, G has an edge with endpoints

27
Chapter 1: Fundamental Concepts
Section 1.2: Paths, Cycles, and Trails
28
u ∈S and v /∈S. Now there is an x, v-path formed by extending an x, u-
path along the edge uv. This contradicts the choice of S, so in fact S is all
of V (G). Since there are paths from x to all other vertices, the transitivity
of the connection relation implies that G is connected.
1.2.23. a) If a connected simple graph G is not a complete graph, then every
vertex of G belongs to some induced subgraph isomorphic to P3. Let v be a
vertex of G. If the neighborhood of v is not a clique, then v has a pair x, y
of nonadjacent neighbors; {x, v, y} induces P3. If the neighborhood of v is a
clique, then since G is not complete there is some vertex y outside the set S
consisting of v and its neighbors. Since G is connected, there is some edge
between a neighbor w of v and a vertex x that is not a neighbor of v. Now
the set {v, w, x} induces P3, since x is not a neighbor of v.
One can also use cases according to whether v is adjacent to all other
vertices or not. The two cases are similar to those above.
b) When a connected simple graph G is not a complete graph, G may
have edges that belong to no induced subgraph isomorphic to P3. In the
graph below, e lies in no such subgraph.
•
•
•
•
e
1.2.24. If a simple graph with no isolated vertices has no induced subgraph
with exactly two edges, then it is a complete graph. Let G be such a graph.
If G is disconnected, then edges from two components yield four vertices
that induce a subgraph with two edges. If G is connected and not complete,
then G has nonadjacent vertices x and y. Let Q be a shortest x, y-path; it
has length at least 2. Any three successive vertices on Q induce P3, with
two edges.
Alternatively, one can use proof by contradiction. If G is not complete,
then G has two nonadjacent vertices. Considering several cases (common
neighbor or not, etc.) always yields an induced subgraph with two edges.
1.2.25. Inductive proof that every graph G with no odd cycles is bipartite.
Proof 1 (induction on e(G)). Basis step (e(G) = 0): Every graph with
no edges is bipartite, using any two sets covering V (G).
Induction step (e(G) > 0): Discarding an edge e introduces no odd
cycles. Thus the induction hypothesis implies that G −e is bipartite.
If e is a cut-edge, then combining bipartitions of the components of
G −e so that the endpoints of e are in opposite sets produces a bipartition
of G. If e is not a cut-edge of G, then let u and v be its endpoints, and let
X, Y be a bipartition of G −e. Adding e completes a cycle with a u, v-path
in G −e; by hypothesis, this cycle has even length. This forces u and v to be
in opposite sets in the bipartition X, Y. Hence the bipartition X, Y of G −e
is also a bipartition of G.
Proof 2 (induction on n(G)). Basis step (n(G) = 1): A graph with one
vertex and no odd cycles has no loop and hence no edge and is bipartite.
Induction step (n(G) > 1): When we discard a vertex v, we introduce
no odd cycles. Thus the induction hypothesis implies that G −v is bipartite.
Let G1, . . . , Gk be the components of G −v; each has a bipartition. If v has
neighbors u, w in both parts of the bipartition of Gi, then the edges uv and
vw and a shortest u, w-path in Gi form a cycle of odd length. Hence we can
specify the bipartition Xi, Yi of Gi so that Xi contains all neighbors of v in
Gi. We now have a bipartition of G by letting X = S Xi and Y = {v}∪(S Yi).
1.2.26. A graph G is bipartite if and only if for every subgraph H of G,
there is an independent set containing at least half of the vertices of H.
Every bipartite graph has a vertex partition into two independent sets, one
of which must contain at least half the vertices (though it need not be a
maximum independent set). Since every subgraph of a bipartite graph is
bipartite, the argument applies to all subgraphs of a bipartite graph, and
the condition is necessary.
For the converse, suppose that G is not bipartite. By the characteri-
zation of bipartite graphs, G contains an odd cycle H. This subgraph H
has no independent set containing at least half its vertices, because every
set consisting of at least half the vertices in an odd cycle must have two
consecutive vertices on the cycle.
1.2.27. The “transposition graph” on permutations of [n] is bipartite. The
partite sets are determined by the parity of the number of pairs i, j such
that i < j and ai > aj (these are called inversions). We claim that each
transposition changes the parity of the number of inversions, and there-
fore each edge in the graph joins vertices with opposite parity. Thus the
permutations with an even number of inversions form an independent set,
as do those with an odd number of inversions. This is a bipartition, and
thus the graph is bipartite.
Consider the transposition that interchanges the elements in position
r and position s, with r < s. No pairs involving elements that are before r
or after s have their order changed. If r < k < s, then interchanging ar and
as changes the order of ar and ak, and also it changes the order of ak and as.
Thus for each such k the number of inversions changes twice and retains
the same parity. This describes all changes in order except for the switch
of ar and as itself. Thus the total number of changes is odd, and the parity
of the number of inversions changes.

29
Chapter 1: Fundamental Concepts
Section 1.2: Paths, Cycles, and Trails
30
1.2.28. a) The graph below has a unique largest bipartite subgraph, ob-
tained by deleting the central edge.
Deleting the central edge leaves a
bipartite subgraph, since the indicated sets A and B are independent in
that subgraph. If deleting one edge makes a graph bipartite, then that
edge must belong to all odd cycles in the graph, since a bipartite subgraph
has no odd cycles. The two odd cycles in bold have only the central edge in
common, so no other edge belongs to all odd cycles.
•
•
•
•
•
•
•
•
A
B
A
B
B
A
B
A
b) In the graph below, the largest bipartite subgraph has 10 edges, and
it is not unique. Deleting edges bh and ag yields an X, Y-bigraph with X =
{b, c, e, h} and Y = {a, d, f, g}. Another bipartite subgraph with 10 edges is
obtained by deleting edges de and cf ; the bipartition is X = {b, c, f, g} and
Y = {a, d, e, h}. (Although these two subgraphs are isomorphic, they are
two subgraphs, just as the Petersen graph has ten claws, not one.)
It remains to show that we must delete at least two edges to obtain a
bipartite subgraph. By the characterization of bipartite graphs, we must
delete enough edges to break all odd cycles. We can do this with (at most)
one edge if and only if all the odd cycles have a common edge. The 5-cycles
(b, a, c, f, h) and (b, d, e, g, h) have only the edge bh in common. Therefore,
if there is a single edge lying in all odd cycles, it must be bh. However,
(a, c, f, h, g) is another 5-cycle that does not contain this.
Therefore no
edge lies in all odd cycles, and at least two edges must be deleted.
•
•
•
•
•
•
•
•
a
b
c
d
e
f
g
h
1.2.29. A connected simple graph not having P4 or C3 as an induced sub-
graph is a biclique. Choose a vertex x. Since G has no C3, N(x) is inde-
pendent. Let S = V (G) −N(X) −{x}. Every v ∈S has a neighbor in N(x);
otherwise, a shortest v, x-path contains an induced P4. If v ∈S is adjacent
to w but not z in N(x), then v, w, x, z is an induced P4. Hence all of S is ad-
jacent to all of N(x). Now S ∪{x} is an independent set, since G has no C3.
We have proved that G is a biclique with bipartition N(x), S ∪{x}.
1.2.30. Powers of the adjacency matrix.
a) In a simple graph G, the (i, j)th entry in the kth power of the ad-
jacency matrix A is the number of (vi, vj)-walks of length k in G. We use
induction on k. When k = 1, ai, j counts the edges (walks of length 1) from
i to j. When k > 1, every (vi, vj)-walk of length k has a unique vertex
vr reached one step before the end at vj. By the induction hypothesis, the
number of (vi, vr)-walks of length k−1 is entry (i,r) in Ak−1, which we write
as a(k−1)
i,r
. The number of (vi, vj)-paths of length k that arrive via vr on the
last step is a(k−1)
i,r
ar, j, since ar, j is the number of edges from vr to vj that can
complete the walk. Counting the (vi, vj)-walks of length k by which vertex
appears one step before vj yields Pn
r=1 a(k−1)
i,r
ar, j. By the deﬁnition of ma-
trix multiplication, this is the (i, j)th entry in Ak. (The proof allows loops
and multiple edges and applies without change for digraphs. When loops
are present, note that there is no choice of “direction” on a loop; a walk is
a list of edge traversals).
b) A simple graph G with adjacency matrix A is bipartite if and only
if, for each odd integer r, the diagonal entries of the matrix Ar are all 0. By
part (a), Ar
i,i counts the closed walks of length r beginning at vi. If this is
always 0, then G has no closed walks of odd length through any vertex; in
particular, G has no odd cycle and is bipartite. Conversely, if G is bipartite,
then G has no odd cycle and hence no closed odd walk, since every closed
odd walk contains an odd cycle.
1.2.31. Kn is the union of k bipartite graphs if and only if n ≤2k (without
using induction).
a) Construction when n ≤2k. Given n ≤2k, encode the vertices of
Kn as distinct binary k-tuples. Let Gi be the complete bipartite subgraph
with bipartition Xi, Yi, where Xi is the set of vertices whose codes have 0
in position i, and Yi is the set of vertices whose codes have 1 in position i.
Since every two vertex codes differ in some position, G1 ∪· · · ∪Gk = Kn.
b) Upper bound.
Given that Kn is a union of bipartite graphs
G1, . . . , Gk, we deﬁne a code for each vertex.
For 1 ≤i ≤k, let Xi, Yi
be a bipartition of Gi. Assign vertex v the code (a1, . . . , ak), where ai = 0 if
v ∈Xi, and ai = 1 if v ∈Yi or v /∈Xi ∪Yi. Since every two vertices are ad-
jacent and the edge joining them must be covered in the union, they lie in
opposite partite sets in some Gi. Therefore the codes assigned to the ver-
tices are distinct. Since the codes are binary k-tuples, there are at most 2k
of them, so n ≤2k.
1.2.32. “Every maximal trail in an even graph is an Eulerian circuit”—
FALSE. When an even graph has more than one component, each compo-
nent has a maximal trail, and it will not be an Eulerian circuit unless the

31
Chapter 1: Fundamental Concepts
Section 1.2: Paths, Cycles, and Trails
32
other components have no edges. The added hypothesis needed is that the
graph is connected.
The proof of the corrected statement is essentially that of Theorem
1.2.32. If a maximal trail T is not an Eulerian circuit, then it is incident
to a missing edge e, and a maximal trail in the even graph G −E(T ) that
starts at e can be inserted to enlarge T , which contradicts the hypothesis
that T is a maximal trail.
1.2.33. The edges of a connected graph with 2k odd vertices can be parti-
tioned into k trails if k > 0. The assumption of connectedness is necessary,
because the conclusion is not true for G = H1 + H2 when H1 has some odd
vertices and H2 is Eulerian.
Proof 1 (induction on k). When k = 1, we add an edge between the
two odd vertices, obtain an Eulerian circuit, and delete the added edge.
When k > 1, let P be a path connecting two odd vertices. The graph G′ =
G −E(P) has 2k −2 odd vertices, since deleting E(P) changes degree parity
only at the ends of P. The induction hypothesis applies to each component
of G′ that has odd vertices. Any component not having odd vertices has
an Eulerian circuit that contains a vertex of P; we splice it into P to avoid
having an additional trail. In total, we have used the desired number of
trails to partition E(G).
Proof 2 (induction on e(G)). If e(G) = 1, then G = K2, and we have
one trail. If G has an even vertex x adjacent to an odd vertex y, then G′ =
G −xy has the same number of odd vertices as G. The trail decomposition
of G′ guaranteed by the induction hypothesis has one trail ending at x and
no trail ending at y. Add xy to the trail ending at x to obtain the desired
decomposition of G. If G has no even vertex adjacent to an odd vertex, then
G is Eulerian or every vertex of G is odd. In this case, deleting an edge xy
reduces k, and we can add xy as a trail of length one to the decomposition
of G −xy guaranteed by the induction hypothesis.
1.2.34. The graph below has 6 equivalence classes of Eulerian circuits. If
two Eulerian circuits follow the same circular arrangement of edges, dif-
fering only in the starting edges or the direction, then we consider them
equivalent. An equivalence class of circuits is characterized by the pairing
of edges at each vertex corresponding to visits through that vertex.
A 2-valent vertex has exactly one such pairing; a 4-valent vertex has
three possible pairings. The only restriction is that the pairings must yield
a single closed trail. Given a pairing at one 4-valent vertex below, there is a
forbidden pairing at the other, because it would produce two edge-disjoint
4-cycles instead of a single trail. The other two choices are okay. Thus the
answer is 3 · 2 = 6.
•
•
•
•
•
•
x
a
b
c
d
y
Alternatively, think of making choices while following a circuit. Be-
cause each circuit uses each edge, and because the reversal of a circuit C
is in the same class as C, we may follow a canonical representative of the
class from a along ax. We now count the choices made to determine the cir-
cuit. After x we can follow one of 3 choices. This leads us through another
neighbor of x to y. Now we cannot use the edge ya or the edge just used,
so two choices remain. This determines the rest of the circuit. For each of
the three ways to make the initial choice, there was a choice of two later,
so there are 3 · 2 = 6 ways to specify distinct classes of circuits. (Distinct
ways of making the choices yields a distinct pairing at some vertex.)
1.2.35. Algorithm for Eulerian circuits. Let G be a connected even graph.
At each vertex partition the incident edges into pairs (each edge appears in
a pair at each endpoint). Start along some edge. At each arrival at a vertex,
there is an edge paired with the entering edge; use it to exit. This can end
only by arriving at the initial vertex along the edge paired with the initial
edge, and it must end since the graph is ﬁnite. At the point where the ﬁrst
edge would be repeated, stop; this completes a closed trail. Furthermore,
there is no choice in assembling this trail, so every edge appears in exactly
one such trail. Therefore, the pairing decomposes G into closed trails.
If there is more than one trail in the decomposition, then there are
two trails with a common vertex, since G is connected. (A shortest path
connecting vertices in two of the trails ﬁrst leaves the ﬁrst trail at some
vertex v, and at v we have edges from two different trails.) Given edges
from trails A and B at v, change the pairing by taking a pair in A and a
pair in B and switching them to make two pairs that pair an edge of A with
an edge of B. Now when A is followed from v, the return to A does not end
the trail, but rather the trail continues and follows B before returning to
the original edge. Thus changing the pairing at v combines these two trails
into one trail and leaves the other trails unchanged.
We have shown that if the number of trails in the decomposition ex-
ceeds one, then we can obtain a decomposition with fewer trails be changing
the pairing. Repeating the argument produces a decomposition using one
closed trail. This trail is an Eulerian circuit.

33
Chapter 1: Fundamental Concepts
Section 1.2: Paths, Cycles, and Trails
34
1.2.36. Alternative characterization of Eulerian graphs.
a) If G is loopless and Eulerian and G′ = G −uv, then G′ has an odd
number of u, v-trails that visit v only at the end.
Proof 1 (exhaustive counting and parity). Every extension of every
trail from u in G′ eventually reaches v, because a maximal trail ends only
at a vertex of odd degree. We maintain a list of trails from u. The number
of choices for the ﬁrst edge is odd. For a trail T that has not yet reached v,
there are an odd number of ways to extend T by one edge. We replace T in
the list by these extensions. This changes the number of trails in the list
by an even number. The process ends when all trails in the list end at v.
Since the list always has odd size, the total number of these trails is odd.
Proof 2 (induction and stronger result). We prove that the same con-
clusion holds whenever u and v are the only vertices of odd degree in a
graph H, regardless of whether they are adjacent. This is immediate if H
has only the edge uv. For larger graphs, we show that there are an odd
number of such trails starting with each edge e incident to u, so the sum is
odd. If e = uv, then there is one such trail. Otherwise, when e = uw with
w ̸= v, we apply the induction hypothesis to H −e, in which w and v are
the only vertices of odd degree.
The number of non-paths in this list of trails is even. If T is such a trail
that is not a path, then let w be the ﬁrst instance of a vertex repetition
on T . By traversing the edges between the ﬁrst two occurrences of w in
the opposite order, we obtain another trail T ′ in the list. For T ′, the ﬁrst
instance of a vertex repetition is again w, and thus T ′′ = T . This deﬁnes
an involution under which the ﬁxed points are the u, v-paths. The trails
we wish to delete thus come in pairs, so there are an even number of them.
b) If v is a vertex of odd degree in a graph G, then some edge incident
to v lies in an even number of cycles. Let c(e) denote the number of cycles
containing e.
Summing c(e) over edges incident to v counts each cycle
through v exactly twice, so the sum is even. Since there are an odd number
of terms in the sum, c(e) must be even for some e incident to v.
c) A nontrivial connected graph is Eulerian if and only if every edge
belongs to an odd number of cycles. Necessity: By part (a), the number of
u, v-paths in G −uv is odd. The cycles through uv in G correspond to the
u, v-paths in G −uv, so the number of these cycles is odd.
Sufﬁciency: We observe the contrapositive. If G is not Eulerian, then
G has a vertex v of odd degree. By part (b), some edge incident to v lies in
an even number of cycles.
1.2.37. The connection relation is transitive. It sufﬁces to show that if P
is a u, v-path and P′ is a v, w-path, then P and P′ together contain a u, w-
path. At least one vertex of P is in P′, since both contain v. Let x be the
ﬁrst vertex of P that is in P′. Following P from u to x and then P′ from x
to w yields a u, w path, since no vertex of P before x belongs to P ′.
1.2.38. Every n-vertex graph with at least n edges contains a cycle.
Proof 1 (induction on n). A graph with one vertex that has an edge has
a loop, which is a cycle. For the induction step, suppose that n > 1. If our
graph G has a vertex v with degree at most 1, then G −v has n −1 vertices
and at least n −1 edges. By the induction hypothesis, G −v contains a
cycle, and this cycle appears also in G. If G has no vertex of degree at
most 1, then every vertex of G has degree at least 2. Now Lemma 1.2.25
guarantees that G contains a cycle.
Proof 2 (use of cut-edges). If G has no cycle, then by Theorem 1.2.14 ev-
ery edge is a cut-edge, and this remains true as edges are deleted. Deleting
all the edges thus produces at least n + 1 components, which is impossible.
1.2.39. If G is a loopless graph and δ(G) ≥3, then G has a cycle of even
length. An endpoint v of a maximal path P has at least three neighbors on
P. Let x, y, z be three such neighbors of v in order on P. Consider three
v, y-paths: the edge vy, the edge vx followed by the x, y-path in P, and the
edge vz followed by the z, y-path in P.
These paths share only their endpoints, so the union of any two is a
cycle. By the pigeonhole principle, two of these paths have lengths with
the same parity. The union of these two paths is an even cycle.
•
•
•
•
•
•
v
x
y
z
1.2.40. If P and Q are two paths of maximum length in a connected graph
G, then P and Q have a common vertex. Let m be the common length of P
and Q. Since G is connected, it has a shortest path R between V (P) and
V (Q). Let l be the length of R. Let the endpoints of R be r ∈V (P) and
r′ ∈V (Q). The portion P′ of P from r to the farther endpoint has length at
least m/2. The portion Q′ of Q from r to the farther endpoint has length at
least m/2. Since R is a shortest path, R has no internal vertices in P or Q.
If P and Q are disjoint, then P′ and Q′ are disjoint, and the union of
P′, Q′, and R is a path of length at least m/2 + m/2 + l = m + l. Since the
maximum path length is m, we have l = 0. Thus r = r ′, and P and Q have
a common vertex.
The graph consisting of two edge-disjoint paths of length 2k sharing
their midpoint is connected and hence shows that P and Q need not have
a common edge.
1.2.41. A connected graph with at least three vertices has two vertices x, y
such that 1) G −{x, y} is connected and 2) x, y are adjacent or have a com-
mon neighbor. Let x be a endpoint of a longest path P in G, and let v be

35
Chapter 1: Fundamental Concepts
Section 1.3: Vertex Degrees and Counting
36
its neighbor on P. Note that P has at least three vertices. If G −x −v
is connected, let y = v. Otherwise, a component cut off from P −x −v in
G −x −v has at most one vertex; call it w. The vertex w must be adjacent
to v, since otherwise we could build a longer path. In this case, let y = w.
1.2.42. A connected simple graph having no 4-vertex induced subgraph that
is a path or a cycle has a vertex adjacent to every other vertex. Consider a
vertex x of maximum degree. If x has a nonneighbor y, let x, v, w be the
begining of a shortest path to y (w may equal y). Since d(v) ≤d(x), some
neighbor z of x is not adjacent to v. If z ↔w, then {z, x, v, w} induce C4;
otherwise, {z, x, v, w} induce P4. Thus x must have no nonneighbor.
1.2.43. The edges of a connected simple graph with 2k edges can be parti-
tioned into paths of length 2. The assumption of connectedness is necessary,
since the conclusion does not hold for a graph having components with an
odd number of edges.
We use induction on e(G); there is a single such path when e(G) = 2.
For e(G) > 2, let P = (x, y, z) be an arbitrary path of length two in G,
and let G′ = G −{xy, yz}. If we can partition E(G) into smaller connected
subgraphs of even size, then we can apply the induction hypothesis to each
piece and combine the resulting decompositions. One way to do this is to
partition E(G′) into connected subgraphs of even size and use P.
Hence we are ﬁnished unless G′ has two components of odd size (G′
cannot have more than three components, since an edge deletion increases
the number of components by at most one). Each odd component contains
at least one of {x, y, z}. Hence it is possible to add one of xy to one odd
component and yz to the other odd component to obtain a partition of G
into smaller connected subgraphs.
1.3. VERTEX DEGREES & COUNTING
1.3.1. A graph having exactly two vertices of odd degree must contain a
path from one to the other. The degree of a vertex in a component of G is
the same as its degree in G. If the vertices of odd degree are in different
components, then those components are graphs with odd degree sum.
1.3.2. In a class with nine students where each student sends valentine
cards to three others, it is not possible that each student sends to and receives
cards from the same people. The sending of a valentine can be represented
as a directed edge from the sender to the receiver. If each student sends to
and receives cards from the same people, then the graph has x →y if and
only if y →x. Modeling each opposed pair of edges by a single unoriented
edge yields a 3-regular graph with 9 vertices. This is impossible, since
every graph has an even number of vertices of odd degree.
1.3.3. If d(u) + d(v) = n + k for an edge uv in a simple graph on n vertices,
then uv belongs to at least k triangles. This is the same as showing that
u and v have at least k common neighbors. Let S be the neighbors of u
and T the neighbors of v, and suppose |S ∩T | = j.
Every vertex of G
appears in S or T or none or both. Common neighbors are counted twice,
so n ≥|S| + |T | −j = n + k −j. Hence j ≥k. (Almost every proof of this
using induction or contradiction does not need it, and is essentially just
this counting argument.)
1.3.4. The graph below is isomorphic to Q4. It sufﬁces to label the vertices
with the names of the vertices in Q4 so that vertices are adjacent if and
only if their labels differ in exactly one place.
•
•
•
•
1111
1101
1100
1110
•
•
•
•
0011
0001
0000
0010
•
•
•
•
•
•
•
•
0111
1011
1001
0101
0100
1000
1010
0110
1.3.5. The k-dimensional cube Qk has
 k
2

2k copies of P3.
Proof 1. To specify a particular subgraph isomorphic to P3, the 3-
vertex path, we can specify the middle vertex and its two neighbors. For
each vertex of Qk, there are
 k
2

ways to choose two distinct neighbors, since
Qk is a simple k-regular graph. Thus the total number of P3’s is
 k
2

2k.
Proof 2. We can alternatively choose the starting vertex and the next
two. There are 2k ways to pick the ﬁrst vertex. For each vertex, there are
k ways to pick a neighbor. For each way to pick these vertices, there are
k −1 ways to pick a third vertex completing P3, since Qk has no multiple
edges. The product of these factors counts each P3 twice, since we build it
from each end. Thus the total number of them is 2kk(k −1)/2.
Qk has
 k
2

2k−2 copies of C4.
Proof 1 (direct counting). The vertices two apart on a 4-cycle must
differ in two coordinates. Their two common neighbors each differ from
each in exactly one of these coordinates. Hence the vertices of a 4-cycle

37
Chapter 1: Fundamental Concepts
Section 1.3: Vertex Degrees and Counting
38
must use all 2-tuples in two coordinates while keeping the remaining coor-
dinates ﬁxed. All such choices yield 4-cycles. There are
 k
2

ways to choose
the two coordinates that vary and 2k−2 ways to set a ﬁxed value in the
remaining coordinates.
Proof 2 (prior result). Every 4-cycle contains four copies of P3, and ev-
ery P3 contains two vertices at distance 2 in the cube and hence extends to
exactly one 4-cycle. Hence the number of 4-cycles is one-fourth the number
of copies of P3.
1.3.6. Counting components. If G has k components and H has l compo-
nents, then G + H has k + l components. The maximum degree of G + H
is max{1(G), 1(H)}.
1.3.7. Largest bipartite subgraphs. Pn is already bipartite. Cn loses one
edge if n is odd, none if n is even. The largest bipartite subgraph of Kn is
K⌊n/2⌋,⌈n/2⌉, which has

n2/4

edges.
1.3.8. The lists (5,5,4,3,2,2,2,1), (5,5,4,4,2,2,1,1), and (5,5,5,3,2,2,1,1) are
graphic, but (5,5,5,4,2,1,1,1) is not.
The answers can be obtained from
the Havel-Hakimi test; a list is graphic if and only if the list obtained by
deleting the largest element and deleting that many next-largest elements
is graphic. Below are graphs realizing the ﬁrst three lists, found by the
Havel-Hakimi algorithm.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
From the last list, we test (4, 4, 3, 1, 0, 1, 1), reordered to (4, 4, 3, 1, 1, 1, 0),
then (3, 2, 0, 0, 1, 0). This is not the degree list of a simple graph, since a
vertex of degree 3 requires three other vertices with nonzero degree.
1.3.9. In a league with two divisions of 13 teams each, no schedule has
each team playing exactly nine games against teams in its own division and
four games against teams in the other division. If this were possible, then
we could form a graph with the teams as vertices, making two vertices
adjacent if those teams play a game in the schedule. We are asking for
the subgraph induced by the 13 teams in a single division to be 9-regular.
However, there is no regular graph of odd degree with an odd number of
vertices, since for every graph the sum of the degrees is even.
1.3.10. If l, m, n are nonnegative integers with l + m = n ≥1, then there
exists a connected simple n-vertex graph with l vertices of even degree and m
vertices of odd degree if and only if m is even, except for (l, m, n) = (2, 0, 2).
Since every graph has an even number of vertices of odd degree, and the
only simple connected graph with two vertices has both degrees odd, the
condition is necessary.
To prove sufﬁciency, we construct such a graph G. If m = 0, let G = Cl
(except G = K1 if l = 1). For m > 0, we can begin with K1,m−1, which has
m vertices of odd degree, and then add a path of length l beyond one of the
leaves. (Illustration shows l = 3, m = 4.)
Alternatively, start with a cycle of length l, and add m vertices of degree
one with a common neighbor on the cycle. That vertex of the cycle has even
degree because m is even. Many other constructions also work. It is also
possible to prove sufﬁciency by induction on n for n ≥3, but this approach
is longer and harder to get right than an explicit general construction.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
1.3.11. If C is a closed walk in a simple graph G, then the subgraph con-
sisting of the edges appearing an odd number of times in C is an even graph.
Consider an arbitrary vertex v ∈V (G). Let S be the set of edges incident
to v, and let f (e) be the number of times an edge e is traversed by C. Each
time C passes through v it enters and leaves. Therefore, P
e∈S f (e) must
be even, since it equals twice the number of times that C visits v. Hence
there must an even number of odd contributions to the sum, which means
there are an even number of edges incident to v that appear an odd num-
ber of times in C. Since we can start a closed walk at any of its vertices,
this argument holds for every v ∈V (G).
1.3.12. If every vertex of G has even degree, then G has no cut-edge.
Proof 1 (contradiction). If G has a cut-edge, deleting it leaves two
induced subgraphs whose degree sum is odd. This is impossible, since the
degree sum in every graph is even.
Proof 2 (construction/extremality). For an edge uv, a maximal trail in
G −uv starting at u can only end at v, since whenever we reach a vertex
we have use an odd number of edges there. Hence a maximal such trail is
a (u, v)-trail. Every (u, v)-trail is a (u, v)-walk and contains a (u, v)-path.
Hence there is still a (u, v)-path after deletion of uv, so uv is not a cut-edge.
Proof 3 (prior results). Let G be an even graph. By Proposition 1.2.27,
G decomposes into cycles. By the meaning of “decomposition”, every edge

39
Chapter 1: Fundamental Concepts
Section 1.3: Vertex Degrees and Counting
40
of G is in a cycle. By Theorem 1.2.14, every edge in a cycle is not a cut-edge.
Hence every edge of G is not a cut-edge.
For k ∈N, some (2k + 1)-regular simple graph has a cut-edge.
Construction 1. Let H, H ′ be copies of K2k,2k with partite sets X, Y
for H and X ′, Y ′ for H ′. Add an isolated edge vv′ disjoint from these sets.
To H + H ′ + vv′, add edges from v to all of X and from v′ to all of X ′, and
add k disjoint edges within Y and k disjoint edges within Y ′. The resulting
graph Gk is (2k + 1)-regular with 8k + 2 vertices and has vv′ as a cut-edge.
Below we sketch G2; the graph G1 is the graph in Example 1.3.26.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
Y
X
v
Y ′
X′
v′
Construction 2a (inductive). Let G1 be the graph at the end of Exam-
ple 1.3.26 (or in Construction 1). This graph is 3-regular with 10 vertices
and cut-edge xy; note that 10 = 4 · 1 + 6. From a (2k −1)-regular graph
Gk−1 with 4k + 2 vertices such that Gk−1 −xy has two components of order
2k +1, we form Gk. Add two vertices for each component of Gk−1 −xy, adja-
cent to all the vertices of that component. This adds degree two to each old
vertex, gives degree 2k + 1 to each new vertex, and leaves xy as a cut-edge.
The result is a (2k + 1)-regular graph Gk of order 4k + 6 with cut-edge xy.
Construction 2b (explicit). Form Hk from K2k+2 by removing k pair-
wise disjoint edges and adding one vertex that is adjacent to all vertices
that lost an incident edge. Now Hk has 2k + 2 vertices of degree 2k + 1
and one of degree 2k. Form Gk by taking two disjoint copies of Hk and
adding an edge joining the vertices of degree 2k. The graphs produced in
Constructions 2a and 2b are identical.
1.3.13. Meeting on a mountain range. A mountain range is a polygonal
curve from (a, 0) to (b, 0) in the upper half-plane; we start A and B at
opposite endpoints. Let P be a highest peak; A and B will meet there. Let
the segments from P to (a, 0) be x1, . . . , xr, and let the segments from P
to (b, 0) be y1, . . . , ys. We deﬁne a graph to describe the positions; when
A is on xi and B is on yj, the corresponding vertex is (i, j). We start at
the vertex (r, s) and must reach (1, 1). We introduce edges for the possible
transitions. We can move from (i, j) to (i, j + 1) if the common endpoint of
yj and yj+1 has height between the heights of the endpoints of xi. Similarly,
(i, j) is adjacent to (i + 1, j) if the common endpoint of xi and xi+1 has
height between the heights of the endpoints of xj. To avoid triviality, we
may assume that r + s > 2.
We prove that (r, s) and (1, 1) are the only vertices of odd degree in
G. This sufﬁces, because every graph has an even number of vertices of
odd degree, which implies that (r, s) and (1, 1) are in the same component,
connected by a path.
The possible neighbors of (i, j) are the pairs obtained by changing i
or j by 1. Let X and Y be the intervals of heights attained by xi and yj,
and let I = X ∩Y. If the high end of I is the high end of exactly one of X
and Y, then exactly one neighboring vertex can be reached by moving past
the end of the corresponding segment. If it is the high end of both, then
usually one or three neighboring vertices can be reached, the latter when
both segments reach “peaks” at their high ends. However, if (i, j) = (1, 1),
then the high end of both segments is P and there is no neighbor of this
type. Similarly, the low end of I generates one or three neighbors, except
that when (i, j) = (r, s) there is no neighbor of this type.
No neighbor of (i, j) is generated from both the low end and the high
end of I. Since the contributions from the high and low end of I to the
degree of (i, j) are both odd, each degree is even, except for (r, s) and (1, 1),
where exactly one of the contributions is odd.
1.3.14. Every simple graph with at least two vertices has two vertices of
equal degree.
The degree of a vertex in an n-vertex simple graph is in
{0, . . . , n −1}. These are n distinct values, so if no two are equal then all
appear. However, a graph cannot have both an isolated vertex and a vertex
adjacent to all others.
This does not hold for graphs allowing loops. In the 2-vertex graph
with one loop edge and one non-loop edge, the vertex degrees are 1 and 3.
This does not hold for loopless graphs. In the 3-vertex loopless graph
with pairs having multiplicity 0, 1, 2, the vertex degrees are 1, 3, 2.
1.3.15. Smallest k-regular graphs. A simple k-regular graph has at least
k +1 vertices, so Kk+1 is the smallest. This is the only isomorphism class of
k-regular graphs with k +1 vertices. With k +2 vertices, the complement of
a k-regular graph must be 1-regular. There is one such class when k is even
((k + 2)/2 isolated edges), none when k is odd. (Two graphs are isomorphic
if and only if their complements are isomorphic.)
With k + 3 vertices, the complement is 2-regular. For k ≥3, there are
distinct choices for such a graph: a (k + 3)-cycle or the disjoint union of a
3-cycle and a k-cycle. Since these two 2-regular graphs are nonisomorphic,
their complements are nonisomorphic k-regular graphs with k + 3 vertices.
1.3.16. For k ≥2 and g ≥2, there exists a k-regular graph with girth g.
We use strong induction on g. For g = 2, take the graph consisting of two
vertices and k edges joining them.
For the induction step, consider g > 2. Here we use induction on k.
For k = 2, a cycle of length g sufﬁces. For k > 2, the induction hypothesis

41
Chapter 1: Fundamental Concepts
Section 1.3: Vertex Degrees and Counting
42
provides a (k −1)-regular graph H with girth g. Since ⌈g/2⌉< g, the global
induction hypothesis also provides a graph G with girth ⌈g/2⌉that is n(H)-
regular. Replace each vertex v in G with a copy of H; each vertex in the
copy of H is made incident to one of the edges incident to v in G.
Each vertex in the resulting graph inherits k −1 incident edges from
H and one from G, so the graph is k-regular. It has cycles of length g in
copies of H. A cycle C in G is conﬁned to a single copy of H or visits more
than one such copy. In the ﬁrst case, its length is at least g, since H has
girth g. In the second case, the copies of H that C visits correspond to a
cycle in G, so C visits at least ⌈g/2⌉such copies. For each copy, C must
enter on one edge and then move to another vertex before leaving, since
the copy is entered by only one edge at each vertex. Hence the length of
such a cycle is at least 2 ⌈g/2⌉.
1.3.17. Deleting a vertex of maximum degree cannot increase the average
degree, but deleting a vertex of minimum degree can reduce the average de-
gree. Deleting any vertex of a nontrivial regular graph reduces the average
degree, which proves the second claim. For the ﬁrst claim, suppose that G
has n vertices and m edges, and let a and a′ be the average degrees of G
and G −x, respectively. Since G −x has m −d(x) edges and degree sum
2m −2d(x), we have a′ = na−2d(x)
n−1
≤(n−2)a
n−1
< a if d(x) ≥a > 0. Hence delet-
ing a vertex of maximum degree in nontrivial graph reduces the average
degree and cannot increase it.
1.3.18. If k ≥2, then a k-regular bipartite graph has no cut-edge. Since
components of k-regular graphs are k-regular, it sufﬁces to consider a con-
nected k-regular X, Y-bigraph. Let uv be a cut-edge, and let G and H be the
components formed by deleting uv. Let m = |V (G) ∩X| and n = |V (G) ∩Y|.
By symmetry, we may assume that u ∈V (G) ∩Y and v ∈V (H) ∩X.
We count the edges of G. The degree of each vertex of G in X is k, so G
has mk edges. The degree of each vertex of G in Y is k except for dG(u) =
k −1, so G has nk −1 edges. Hence mk = nk −1, which is impossible because
one side is divisible by k and the other is not. The proof doesn’t work if
k = 1, and the claim is false then.
If vertex degrees k and k + 1 are allowed, then a cut-edge may exist.
Consider the example of 2Kk,k plus one edge joining the two components.
1.3.19. A claw-free simple graph with maximum degree at least 5 has a 4-
cycle. Consider ﬁve edges incident to a vertex v of maximum degree in such
a graph G. Since G has no induced claw, the neighbors of v must induce at
least three edges. Since these three edges have six endpoints among the
ﬁve neighbors of v, two of them must be incident, say xy and yz. Adding
the edges xv and zv to these two completes a 4-cycle.
There are arbitrarily large 4-regular claw-free graphs with no 4-cycles.
Consider a vertex v in such a graph G. Since v has degree 4 and is not
the center of an induced claw and does not lie on a 4-cycle, the subgraph
induced by v and its neighbors consists of two edge-disjoint triangles shar-
ing v (a bowtie). Since this happens at each vertex, G consists of pairwise
edge-disjoint triangles, with each vertex lying in two of them. Hence each
triangle has three neighboring triangles. Furthermore, two triangles that
neighbor a given triangle in this way cannot neighbor each other; that
would create a 4-cycle in the graph.
Deﬁne a graph H with one vertex for each triangle in G; let vertices be
adjacent in H if the corresponding triangles share a vertex in G. Now H is
a 3-regular graph with no 3-cycles; a 3-cycle in H would yield a 4-cycle in
G using two edges from one of the corresponding triangles. Also H must
have no 4-cycles, because a 4-cycle in G could be built using one edge from
each of the four triangles corresponding to the vertices of a 4-cycle in H.
Note that e(G) = 2n(G) and n(H) = e(G)/3 = 2n(G)/3.
On the other hand, given any 3-regular graph H with girth at least 5,
reversing the construction yields G with the desired properties and 3n(H)/2
vertices. Hence it sufﬁces to show that there are arbitrarily large 3-regular
graphs with girth at least 5. Disconnected such examples can be formed
by taking many copies of the Petersen graph as components. The graph G
is connected if and only if H is connected. Connected instances of H can be
obtained from multiple copies of the Petersen graph by applying 2-switches
(Deﬁnition 1.3.32).
Alternatively, arbitrarily large connected examples can be constructed
by taking two odd cycles (say length 2m + 1) and joining the ith vertex
on the ﬁrst cycle to the 2ith vertex (modulo 2m + 1) on the second cycle
(this generalizes the Petersen graph). We have constructed a connected
3-regular graph. Since we add disjoint edges between the cycles, there is
no triangle. A 4-cycle would have to alternate edges between the two odd
cycles with one edge of each, but the neighbors of adjacent vertices on the
ﬁrst cycle are two apart on the second cycle.
1.3.20. Kn has (n −1)!/2 cycles of length n, and Kn,n has n!(n −1)!/2 cycles
of length 2n. Each cycle in Kn is a listing of the vertices. These can be listed
in n! orders, but we obtain the same subgraph no matter where we start
the cycle and no matter which direction we follow, so each cycle is listed
2n times. In Kn,n, we can list the vertices in order on a cycle (alternating
between the partite sets), in 2(n!)2 ways, but by the same reasoning each
cycle appears (2n) · 2 times.
1.3.21. Km,n has 6
 m
3
 n
3

6-cycles. To extend an edge in Km,n to a 6-cycle, we
choose two more vertices from each side to be visited in order as we follow
the cycle. Hence each edge in Kn,n appears in (m −1)(n −1)(m −2)(n −2)

43
Chapter 1: Fundamental Concepts
Section 1.3: Vertex Degrees and Counting
44
6-cycles. Since each 6-cycle contains 6 edges, we conclude that Kn,n has
mn(m −1)(n −1)(m −2)(n −2)/6 6-cycles.
Alternatively, each 6-cycle uses three vertices from each partite set,
which we can choose in
 m
3
 n
3

ways. Each such choice of vertices induces
a copy of K3,3 with 9 edges. There are 3! = 6 ways to pick three disjoint
edges to be omitted by a 6-cycle, so each K3,3 contains 6 6-cycles.
1.3.22. Odd girth and minimum degree in nonbipartite triangle-free n-
vertex graphs. Let k = δ(G), and let l be the minimum length of an odd
cycle in G. Let C be a cycle of length l in G.
a) Every vertex not in V (C) has at most two neighbors in V (C).
It
sufﬁces to show that any two neighbors of such a vertex v on C must have
distance 2 on C, since having three neighbors would then require l = 6.
Since G is triangle-free, v does not have consecutive neighbors on C.
If v has neighbors x and y on C separated by distance more than 2 on C,
then the detour through v can replace the x, y-path of even length on C to
form a shorter odd cycle.
b) n ≥kl/2 (and thus l ≤2n/k). Since C is a shortest odd cycle, it has
no chords (it is an induced cycle). Since δ(G) = k, each vertex of C thus has
at least k −2 edges to vertices outside C. However, each vertex outside C
has at most two neighbors on C. Letting m be the number of edges from
V (C) to V (G) −V (C), we thus have l(k −2) ≤m ≤2(n −l). Simplifying
the inequality yields n ≥kl/2.
c) The inequality of part (b) is sharp when k is even. Form G from the
cycle Cl by replacing each vertex of Cl with an independent set of size k/2
such that two vertices are adjacent if and only if the vertices they replaced
were adjacent. Each vertex is now adjacent to the vertices arising from the
two neighboring classes, so G is k-regular and has lk/2 vertices. Deleting
the copies of any one vertex of Cl leaves a bipartite graph, since the partite
sets can be labeled alternately around the classes arising from the rest of
Cl. Hence every odd cycle uses a copy of each vertex of Cl and has length
at least l, and taking one vertex from each class forms such a cycle.
1.3.23. Equivalent deﬁnitions of the k-dimensional cube. In the direct def-
inition of Qk, the vertices are the binary k-tuples, with edges consisting of
pairs differing in one place. The inductive deﬁnition gives the same graph.
For k = 0 both deﬁnitions specify K1. For the induction step, suppose k ≥1.
The inductive deﬁnition uses two copies of Qk−1, which by the induction
hypothesis is the “1-place difference” graph of the binary (k −1)-tuples. If
we append 0 to the (k −1)-tuples in one copy of Qk−1 and 1 to the (k −1)-
tuples in the other copy, then within each set we still have edges between
the labels differing in exactly one place. The inductive construction now
adds edges consisting of corresponding vertices in the two copies. This is
also what the direction deﬁnition does, since k-tuples chosen from the two
copies differ in the last position and therefore differ in exactly one position
if and only if they are the same in all other positions.
e(Qk) = k2k−1 . By the inductive deﬁnition, e(Qk) = 2e(Qk−1)+2k−1 for
k ≥1, with e(Q0) = 0. Thus the inductive step for a proof of the formula is
e(Qk) = 2(k −1)2k−2 + 2k−1 = kk−1
2
.
1.3.24. K2,3 is the smallest simple bipartite graph that is not a subgraph
of the k-dimensional cube for any k. Suppose the vectors x, y, a, b, c are the
vertices of a copy of K2,3 in Qk. Any one of a, b, c differs from x in exactly one
coordinate and from y in another (it can’t be the same coordinate, because
then x = y). This implies that x and y differ in two coordinate i, j. Paths
from x to y in two steps can be formed by changing i and then j or changing
j and then i; these are the only ways.
In a cube two vertices have at
most two common neighbors. Hence K2,3 is forbidden. Any bipartite graph
with fewer vertices or edges is contained in K2,3 −e or K1,5, but K2,3 −e
is a subgraph of Q3, and K1,5 is a subgraph of Q5, so K2,3 is the smallest
forbidden subgraph.
1.3.25. Every cycle of length 2r in a hypercube belongs to a subcube of
dimension at most r, uniquely if r ≤3. Let C be a cycle of length 2r in
Qk; V (C) is a collection of binary vectors of length k. Let S be the set of
coordinates that change at some step while traversing the vectors in V (C).
In order to return to the ﬁrst vector, each position must ﬂip between 0 and
1 an even number of times. Thus traversing C changes each coordinate in
S at least twice, but only one coordinate changes with each edge. Hence
2 |S| ≤2r, or |S| ≤r. Outside the coordinates of S, the vectors of V (C) all
agree. Hence V (C) is contained in a |S|-dimensional subcube.
As argued above, at most two coordinates vary among the vertices of
a 4-cycle; at least two coordinates vary, because otherwise there are not
enough vectors available to have four distinct vertices. By the same rea-
soning, exactly three three coordinates vary among the vertices of any
6-cycle; we cannot ﬁnd six vertices in a 2-dimensional subcube. Thus the
r-dimensional subcube containing a particular cycle is unique when r ≤3.
Some 8-cycles are contained in 3-dimensional subcubes, such as 000x,
001x, 011x, 010x, 110x, 111x, 101x, 100x, where x is a ﬁxed vector of
length n −3. Such an 8-cycle is contained in n −3 4-dimensional subcubes,
obtained by letting some position in x vary.
1.3.26. A 3-dimensional cube contains 16 6-cycles, and the k-dimensional
cube Qk contains 16
 k
3

2k−3 6-cycles. If we show that every 6-cycle appears
in exactly one 3-dimensional subcube, then multiplying the number of 3-
dimensional subcubes by the number of 6-cycles in each subcube counts
each 6-cycle exactly once.

45
Chapter 1: Fundamental Concepts
Section 1.3: Vertex Degrees and Counting
46
For any set S of vertices not contained in a 3-dimensional subcube,
there must be four coordinates in the corresponding k-tuples that are not
constant within S. A cycle through S makes changes in four coordinates.
Completing the cycle requires returning to the original vertex, so any co-
ordinate that changes must change back. Hence at least eight changes
are needed, and each edge changes exactly one coordinate. The cycle has
length at least 8; hence 6-cycles are contained in 3-dimensional subcubes.
Furthermore, there are only four vertices possible when k −2 coor-
dinates are ﬁxed, so every 6-cycle involves changes in three coordinates.
Hence the only 3-dimensional subcube containing the 6-cycle is the one
that varies in the same three coordinates as the 6-cycle.
By Example 1.3.8, there are
 k
3

2k−3 3-dimensional subcubes, so it re-
mains only to show that Q3 has 16 cycles of length 6. We group them by
the two omitted vertices. The two omitted vertices may differ in 1, 2, or
3 coordinates. If they differ in one place (they are adjacent), then delet-
ing them leaves a 6-cycle plus one edge joining a pair of opposite vertices.
Since Q3 has 12 edges, there are 12 6-cycles of this type. Deleting two com-
plementary vertices (differing in every coordinate) leaves only a 6-cycle.
Since Q3 has four such pairs, there are four such 6-cycles. The remain-
ing pairs differ in two positions. Deleting such a pair leaves a 4-cycle plus
two pendant edges, containing no 6-cycle. This considers all choices for the
omitted vertices, so the number of 6-cycles in Q3 is 12 + 4.
1.3.27. Properties of the “middle-levels” graph. Let G be the subgraph of
Q2k+1 induced by vertices in which the numbers of 1s and 0s differs by 1.
These are the (2k + 1)-tuples of weight k and weight k + 1, where weight
denotes the number of 1s.
Each vertex of weight k has k + 1 neighbors of weight k + 1, and each
vertex of weight k + 1 has k + 1 neighbors of weight k. There are
 2k+1
k

vertices of each weight. Counting edges by the Degree-Sum Formula,
e(G) = (k + 1) n(G)
2
= (k + 1)
 2k+1
k+1

= (2k + 1)
 2k
k

.
The graph is bipartite and has no odd cycle. The 1s in two vertices of
weight k must be covered by the 1s of any common neighbor of weight k +1.
Since the union of distinct k-sets has size at least k + 1, there can only be
one common neighbor, and hence G has no 4-cycle. On the other hand, G
does have a 6-cycle. Given any arbitary ﬁxed vector of weight k −1 for the
last 2k −2 positions, we can form a cycle of length six by using 110, 100,
101, 001, 011, 010 successively in the ﬁrst three positions.
1.3.28. Alternative description of even-dimensional hypercubes. The sim-
ple graph Q′
k has vertex set {0, 1}k, with u ↔v if and only if u and v agree
in exactly one coordinate. Let the odd vertices be the vertices whose name
has an odd number of 1s; the rest are even vertices.
When k is even, Q′
k ∼= Qk. To show this, rename all odd vertices by
changing 1s into 0s and 0s into 1s. Since k is even, the resulting labels
are still odd. Since k is even, every edge in Q′
k joins an even vertex to
an odd vertex. Under the new naming, it joins the even vertex to an odd
vertex that differs from it in one coordinate. Hence the adjacency relation
becomes precisely the adjacency relation of Qk.
When k is odd, Q′
k ̸∼= Qk, because Q′
k contains an odd cycle and hence is
not bipartite. Starting from one vertex, form a closed walk by successively
following k edges where each coordinate is the coordinate of agreement
along exactly one of these edges. Hence each coordinate changes exactly
k −1 times and therefore ends with the value it had at the start. Thus this
is a closed walk of odd length and contains an odd cycle.
1.3.29. Automorphisms of Qk.
a) A subgraph H of Qk is isomorphic to Ql if and only if it is the sub-
graph induced by a set of vertices agreeing in some set of k −l coordinates.
Let f be an isomorphism from H to Ql, and let v be the vertex mapped to
the vertex 0 of Ql whose coordinates are all 0. Let u1, . . . , ul be the neigh-
bors of v in H mapped to neighbors of 0 in Ql by f . Each ui differs from v
in one coordinate; let S be the set of l coordinates where these vertices dif-
fer from v. It sufﬁces to show that vertices of H differ from v only on the
coordinates of S. This is immediate for l ≤1.
For l ≥2, we prove that each vertex mapped by f to a vertex of Ql
having weight j differs from v in j positions of S, by induction on j. Let
x be a vertex mapped to a vertex of weight j in Ql. For j ≤1, we have
already argued that x differs from v in j positions of S. For j ≥2, let y
and z be two neighbors of x whose images under f have weight j −1 in
Ql. By the induction hypothesis, y and z differ from v in j positions of S.
Since f (y) and f (z) differ in two places, they have two common neighbors
in Ql, which are x and another vertex w. Since w has weight j −2, the
induction hypothesis yields that w differs from v in j −1 positions of S.
Since the images of x, y, z, w induce a 4-cycle in Ql, also x, y, z, w induce
a 4-cycle in H. The only 4-cycle in Qk that contains all of y, z, w adds the
vertex that differs from v in the j −2 positions of S where w differs, plus
the two positions where y and z differ from w. This completes the proof
that x has the desired property.
b) The k-dimensional cube Qk has exactly 2kk! automorphisms. (Part
(a) is unnecessary.) Form automorphisms of Qk by choosing a subset of
the k coordinates in which to complement 0 and 1 and, independently, a
permutation of the k coordinates. There are 2kk! such automorphisms.

47
Chapter 1: Fundamental Concepts
Section 1.3: Vertex Degrees and Counting
48
We prove that every automorphism has this form. Let 0 be the all-0
vertex. Let f be the inverse of an automorphism, and let v be the vertex
mapped to 0 by f . The neighbors of v must be mapped to the neighbors of
0. If these choices completely determine f , then f complements the coor-
dinates where v is nonzero, and the correspondence between the neighbors
of 0 and the neighbors of v determines the permutation of the coordinates
that expresses f as one of the maps listed above.
Suppose that x differs from v in coordinates r1, . . . ,r j. Let u1, . . . , u j be
the neighbors of v differing from v in these coordinates. We prove that f (x)
is the k-tuple of weight j having 1 in the coordinates where f (u1), . . . , f (uj)
have 1. We use induction on j.
For j ≤1, the claim follows by the deﬁnition of u1, . . . , u j. For j ≥2,
let y and z be two neighbors of x that differ from v in j −1 coordinates.
Let w be the common neighbor of y and z that differs from v in j −2 coor-
dinates. By the induction hypothesis, f (y) and f (z) have weight j −1 (in
the appropriate positions), and f (w) has weight j −1. Since f (x) must be
the other common neighbor of f (y) and f (z), it has weight j, with 1s in the
desired positions.
1.3.30. The Petersen graph has twelve 5-cycles.
Let G be the Petersen
graph. We show ﬁrst that each edge of G appears in exactly four 5-cycles.
For each edge e = xy in G, there are two other edges incident to x and two
others incident to y. Since G has no 3-cycles, we can thus extend xy at both
ends to form a 4-vertex path in four ways. Since G has no 4-cycle, the end-
points of each such path are nonadjacent. By Proposition 1.1.38, there is
exactly one vertex to add to such a path to complete a 5-cycle. Thus e is in
exactly four 5-cycles.
When we sum this count over the 15 edges of G, we have counted 60
5-cycles. However, each 5-cycle has been counted ﬁve times—once for each
of its edges. Thus the total number of 5-cycles in G is 60/5 = 12.
•
•
•
•
•
y
x
1.3.31. Combinatorial proofs with graphs.
a) For 0 ≤k ≤n,
 n
2

=
 k
2

+ k(n −k) +
 n−k
2

. Consider the complete
graph Kn, which has
 n
2

edges. If we partition the vertices of Kn into a k-
set and an (n −k)-set, then we can count the edges as those within one
block of the partition and those choosing a vertex from each. Hence the
total number of edges is
 k
2

+
 n−k
2

+ k(n −k).
b) If P ni = n, then P  ni
2

≤
 n
2

. Again consider the edges of Kn, and
partition the vertices into sets with ni being the size of the ith set. The left
side of the inequality counts the edges in Kn having both ends in the same
Si, which is at most all of E(Kn).
1.3.32. For n ≥1, there are 2(
n−1
2 ) simple even graphs with a ﬁxed ver-
tex set of size n. Let A be the set of simple even graphs with vertex set
v1, . . . , vn. Since 2(
n−1
2 ) is the size of the set B of simple graphs with vertex
set v1, . . . , vn−1, we establish a bijection from A to B.
Given a graph in A, we obtain a graph in B by deleting vn. To show
that each graph in B arises exactly once, consider a graph G ∈B. We form
a new graph G′ by adding a vertex vn and making it adjacent to each vertex
with odd degree in G, as illustrated below.
The vertices with odd degree in G have even degree in G′. Also, vn
itself has even degree because the number of vertices of odd degree in G
is even. Thus G′ ∈A. Furthermore, G is the graph obtained from G′ by
deleting vn, and every simple even graph in which deleting vn yields G must
have vn adjacent to the same vertices as in G′.
Since there is a bijection from A to B, the two sets have the same size.
•
•
•
• •
•
•
•
•
• •
•
•
G
G′
vn
1.3.33. Triangle-free graphs in which every two nonadjacent vertices have
exactly two common neighbors.
n(G) = 1 +
 k+1
2

, where k is the degree of a vertex x in G. For every
pair of neighbors of x, there is exactly one nonneighbor of x that they have
as a common neighbor. Conversely, every nonneighbor of x has exactly one
pair of neighbors of x in its neighborhood, because these are its common
neighbors with x. This establishes a bijective correspondence between the
pairs in N(x) and the nonneighbors of x. Counting x, N(x), and N(x), we
have n(G) = 1 + k +
 k
2

= 1 +
 k+1
2

. Since this argument holds for every
x ∈V (G), we conclude that G is k-regular.
Comment: Such graphs exist only for isolated values of k.
Unique
graphs exist for k = 1, 2, 5. Viewing the vertices as x, N(x) = [k], and
N(x) =
 [k]
2

, we have i adjacent to the pair { j, k} if and only if i ∈{ j, k}. The
lack of triangles guarantees that only disjoint pairs in
 [k]
2

can be adjacent,

49
Chapter 1: Fundamental Concepts
Section 1.3: Vertex Degrees and Counting
50
but each pair in
 [k]
2

must have exactly k −2 neighbors in
 [k]
2

. For k =
5, this implies that N(x) induces the 3-regular disjointness graph of
 [5]
2

,
which is the Petersen graph. Since the Petersen graph has girth 5 and
diameter 2, each intersecting pair has exactly one common neighbor in
N(x) in addition to its one common neighbor in N(x), so this graph has the
desired properties.
Numerical conditions eliminate k ≡3 (mod 4), because G would be
regular of odd degree with an odd number of vertices. There are stronger
necessary conditions. After k = 5, the next possibility is k = 10, then 26,
37, 82, etc. A realization for k = 10 is known to exist, but in general the
set of realizable values is not known.
1.3.34. If G is a kite-free simple n-vertex graph such that every pair of
nonadjacent vertices has exactly two common neighbors, then G is regular.
Since nonadjacent vertices have common neighbors, G is connected. Hence
it sufﬁces to prove that adjacent vertices x and y have the same degree. To
prove this, we establish a bijection from A to B, where A = N(x) −N(y)
and B = N(y) −N(x).
Consider u ∈A. Since u ↮y, there exists v ∈N(u) ∩N(y) with v ̸= x.
Since G is kite-free, v ↮x, so v ∈B. Since x and v have common neighbors
y and u, the vertex v cannot be generated in this way from another vertex
of A. Hence we have deﬁned an injection from A to B. Interchanging the
roles of y and x yields an injection from B to A. Since these sets are ﬁnite,
the injections are bijections, and d(x) = d(y).
1.3.35. If every induced k-vertex subgraph of a simple n-vertex graph G has
the same number of edges, where 1 < k < n −1, then G is a complete graph
or an empty graph.
a) If l ≥k and G′ is a graph on l vertices in which every induced k-
vertex subgraph has m edges, then e(G′) = m
 l
k

/
 l−2
k−2

. Counting the edges
in all the k-vertex subgraphs of G′ yields m
 l
k

, but each edge appears in
 l−2
k−2

of these subgraphs, once for each k-set of vertices containing it. (Both
sides of
 l−2
k−2

e(G′) = m
 l
k

count the ways to pick an edge of G′ and a k-set
of vertices in G′ containing that edge. On the right, we pick the set ﬁrst;
on the left, we pick the edge ﬁrst.)
b) Under the stated conditions, G = Kn or G = K n. Given vertices u
and v, let A and B be the sets of edges incident to u and v, respectively. The
set of edges with endpoints u and v is A ∩B. We compute
|A ∩B| = e(G) −
A ∩B
 = e(G) −
A ∪B
 = e(G) −
A
 −
B
 +
A ∩B
 .
In this formula, A and B are the edge sets of induced subgraphs of order
n −1, and A ∩B is the edge set of an induced subgraph of order n −2. By
part (a), the sizes of these sets do not depend on the choice of u and v.
1.3.36. The unique reconstruction of the graph with vertex-deleted sub-
graphs below is the kite.
Proof 1. A vertex added to the ﬁrst triangle may be joined to 0,1,2,
or 3 of its vertices. We eliminate 0 and 1 because no vertex-deleted sub-
graph has an isolated vertex. We eliminate 3 because every vertex-deleted
subgraph of K4 is a triangle. Joining it to 2 yields the kite.
•
•
•
•
•
•
•
•
•
•
•
•
→
•
•
•
•
Proof 2. The graph G must have four vertices, and by Proposition
1.3.11 it has ﬁve edges. The only such simple graph is the kite.
1.3.37. Retrieving a regular graph.
Suppose that H is a graph formed
by deleting a vertex from a regular graph G.
We have H, so we know
n(G) = n(H) + 1, but we don’t know the vertex degrees in G. If G is d-
regular, then G has dn(G)/2 edges, and H has dn(G)/2 −d edges. Thus
d = 2e(H)/(n(G)−2). Having determined d, we add one vertex w to H and
add d −dH(v) edges from w to v for each v ∈V (H).
1.3.38. A graph with at least 3 vertices is connected if and only if at least
two of the subgraphs obtained by deleting one vertex are connected. The
endpoints of a maximal path are not cut-vertices. If G is connected, then
the subgraphs obtained by deleted such vertices are connected, and there
are at least of these.
Conversely, suppose that at least two vertex-deleted subgraphs are
connected. If G −v is connected, then G is connected unless v is an isolated
vertex. If v is an isolated vertex, then all the other subgraphs obtained by
deleting one vertex are disconnected. Hence v cannot be isolated, and G is
connected.
1.3.39. Disconnected graphs are reconstructible. First we show that G is
connected if and only if it has at least two connected vertex-deleted sub-
graphs. Necessity holds, because the endpoints of a maximal path cannot
be cut-vertices. If G is disconnected, then G −v is disconnected unless v is
an isolated vertex (degree 0) in G and G −v is connected. This happens for
at most one vertex in G.
After determining that G is disconnected, we obtain which discon-
nected graph it is from its vertex-deleted subgraphs. We aim to identify
a connected graph M that is a component of G and a vds in the deck that
arises by deleting a speciﬁed vertex u of M. Replacing M −u by M in that
subgraph will reconstruct G.

51
Chapter 1: Fundamental Concepts
Section 1.3: Vertex Degrees and Counting
52
Among all components of all graphs in the deck, let M be one with
maximum order. Since every component H of a potential reconstruction
G appears as a component of some G −v, M cannot belong to any larger
component of G. Hence M is a component of G. Let L be a ﬁxed connected
subgraph of M obtained by deleting a leaf u of some spanning tree of M.
Then L is a component of G −u. We want to reconstruct G by substituting
M for L in G −u; we must identify G −u. There may be several isomorphic
copies of G −u.
As in the disconnected graph G shown above, M may appear as a com-
ponent of every vds G −v. However, since M cannot be created by a vertex
deletion, a vds with the fewest copies of M must arise by deleting a vertex
of M. Among these, we seek a subgraph with the most copies of L as com-
ponents, because in addition to occurrences of L as a component of G, we
obtain an additional copy if and only if the deleted vertex of M can play
the role of u. This identiﬁes G −u, and we obtain G by replacing one of its
components isomorphic to L with a component isomorphic to M.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
1.3.40. Largest graphs of speciﬁed types.
a) Largest n-vertex simple graph with an independent set of size a.
Proof 1. Since there are no edges within the independent set, such a
graph has at most
 n
2

−
 a
2

edges, which equals
 n−a
2

+(n −a)a. This bound
is achieved by the graph consisting of a copy H of Kn−a, an independent set
S of size a, and edges joining each vertex of H to each vertex of S.
Proof 2. Each vertex of an independent set of size a has degree at most
n −a. Each other vertex has degree at most n −1. Thus P d(v) ≤a(n −a)+
(n −a)(n −1). By the Degree-Sum Formula, e(G) ≤(n −a)(n −1 + a)/2.
This formula equals those above and is achieved by the same graph, since
this graph achieves the bound for each vertex degree.
b) The maximum size of an n-vertex simple graph with k components is
 n−k+1
2

. The graph consisting of Kn−k+1 plus k −1 isolated vertices has k
components and
 n−k+1
2

edges. We prove that other n-vertex graphs with k
components don’t have maximum size. Let G be such a graph.
If G has a component that is not complete, then adding edges to make
it complete does not change the number of components. Hence we may
assume that every component is complete.
If G has components with r and s vertices, where r ≥s > 1, then we
move one vertex from the s-clique to the r-clique. This deletes s −1 edges
and creates r edges, all incident to the moved vertex.
The other edges
remain the same, so we gain r −s + 1 edges, which is positive.
Thus the number of edges is maximized only when every component is
a complete graph and only one component has more than one vertex.
c) The maximum number of edges in a disconnected simple n-vertex
graph is
 n−1
2

, with equality only for K1 + Kn−1.
Proof 1 (using part (b)). The maximum over graphs with k compo-
nents is
 n−k+1
2

, which decreases as k increases. For disconnected graphs,
k ≥2. We maximize the number of edges when k = 2, obtaining
 n−1
2

.
Proof 2 (direct argument). Given a disconnected simple graph G, let
S be the vertex set of one component of G, and let t = |S|. Since no edges
join S and S, e(G) ≤
 n
2

−t(n −t). This bound is weakest when t(n −t) is
smallest, which for 1 ≤t ≤n −1 happens when t ∈{1, n −1}. Thus always
e(G) ≤
 n
2

−1(n −1) =
 n−1
2

, and equality holds when G = K1 + Kn−1.
Proof 3 (induction on n). When n = 2, the only simple graph with
e(G) >
 1
2

= 1 is K2, which is connected. For n > 2, suppose e(G) >
 n−1
2

.
If 1(G) = n −1, then G is connected. Otherwise, we may select v with
d(v) ≤n −2. Then e(G −v) >
 n−1
2

−n + 2 =
 n−2
2

. By the induction
hypothesis, G −v is connected. Since e(G) >
 n−1
2

and G is simple, we have
d(v) > 0, so there is an edge from v to G −v, and G is also connected.
Proof 4 (complementation). If G is disconnected, then G is connected,
so e(G) ≥n −1 and e(G) ≤
 n
2

−(n −1) =
 n−1
2

. In fact, G must contain
a spanning complete bipartite subgraph, which is as small as n −1 edges
only when G = K1,n−1 and G = K1 + Kn−1.
1.3.41. Every n-vertex simple graph with maximum degree ⌈n/2⌉and mini-
mum degree ⌊n/2⌋−1 is connected. Let x be a vertex of maximum degree. It
sufﬁces to show that every vertex not adjacent to x has a common neighbor
with x. Choose y /∈N(x). We have |N(x)| = ⌈n/2⌉and |N(y)| ≥⌊n/2⌋−1.
Since y ↮x, we have N(x), N(y) ⊆V (G) −{x, y}. Thus
|N(x) ∩N(y)| = |N(x)|+|N(y)|−|N(x) ∪N(y)| ≥⌈n/2⌉+⌊n/2⌋−1−(n−2) = 1.
1.3.42. Strongly independent sets. If S is an independent set with no com-
mon neighbors in a graph G, then the vertices of S have pairwise-disjoint
closed neighborhoods of size at least δ(G) + 1.
Thus there are at most
⌊n(G)/(δ(G) + 1)⌋of them. Equality is achievable for the 3-dimensional
cube using S = {000, 111}.
Equality is not achievable when G = Q4, since with 16 vertices and
minimum degree 4 it requires three parwise-disjoint closed neighborhoods
of size 5. If v ∈S, then no vertex differing from v in at most two places is
in S. Also, at most one vertex differing from v in at least three places is in

53
Chapter 1: Fundamental Concepts
Section 1.3: Vertex Degrees and Counting
54
S, since such vertices differ from each other in at most two places. Thus
only two disjoint closed neighborhoods can be found in Q4.
1.3.43. Every simple graph has a vertex whose neighbors have average de-
gree as large as the overall average degree. Let t(w) be the average degree of
the neighbors of w. In the sum P
w∈V (G) t(w) = P
w∈V (G)
P
y∈N(w) d(y)/d(w),
we have the terms d(u)/d(v) and d(v)/d(u) for each edge uv.
Since
x/y + y/x ≥2 whenever x, y are positive real numbers (this is equiva-
lent to (x −y)2 ≥0), each such contribution is at least 2. Hence P t(w) ≥
P
uv∈E(G)
d(u)
d(v) + d(v)
d(u) ≥2e(G). Hence the average of the neighborhood av-
erage degrees is at least the average degree, and the pigeonhole principle
yields the desired vertex.
It is possible that every average neighborhood degree exceeds the av-
erage degree.
Let G be the graph with 2n vertices formed by adding a
matching between a complete graph and an independent set. Since G has
 n
2

+ n edges and 2n vertices, G has average degree (n + 1)/2. For each
vertex of the n-clique, the neighborhood average degree is n −1 + 1/n. For
each leaf, the neighborhood average degree is n.
1.3.44. Subgraphs with large minimum degree. Let G be a loopless graph
with average degree a.
a) If x ∈V (G), then G′ = G −x has average degree at least a if and only
if d(x) ≤a/2. Let a′ be the average degree of G′, and let n be the order of
G. Deleting x reduces the degree sum by 2d(x), so (n −1)a′ = na −2d(x).
Hence (n −1)(a′ −a) = a −2d(x). For n > 1, this implies that a′ ≥a if and
only if d(x) ≤a/2.
Alternative presentation. The average degree of G is 2e(G)/n(G). Since
G′ has e(G) −d(x) edges, the average degree is at least a if and only if
2[e(G)−d(x)]
n(G)−1
≥a.
Since e(G) = n(G)a/2, we can rewrite this as n(G)a −
2d(x) = 2e(G) −2d(x) ≥an(G) −a. By canceling n(G)a, we ﬁnd that the
original inequality is equivalent to d(x) ≤a/2.
b) If a > 0, then G has a subgraph with minimum degree greater than
a/2. Iteratively delete vertices with degree at most half the current av-
erage degree, until no such vertex exists. By part (a), the average degree
never decreases. Since G is ﬁnite, the procedure must terminate. It ends
only by ﬁnding a subgraph where every vertex has degree greater than a/2.
c) The result of part (b) is best possible. To prove that no fraction of
a larger than 1
2a can be guaranteed, let Gn be an n-vertex tree. We have
a(Gn) = 2(n −1)/n = 2 −2/n, but subgraphs of Gn have minimum degree
at most 1. Given β > 1
2, we can choose n large enough so that 1 ≤βa(Gn).
1.3.45. Bipartite subgraphs of the Petersen graph.
a) Every edge of the Petersen graph is in four 5-cycles. In every 5-cycle
through an edge e, the edge e is the middle edge of a 4-vertex path. Such
a path can be obtained in four ways, since each edge extends two ways
at each endpoint. The neighbors at each endpoint of e are distinct and
nonadjacent, since the girth is 5.
Since the endpoints of each such P4 are nonadjacent, they have ex-
actly one common neighbor.
Thus each P4 yields one 5-cycle, and each
5-cycle through e arises from such a P4, so there are exactly four 5-cycles
containing each edge.
b) The Petersen graph has twelve 5-cycles. Since there are 15 edges,
summing the number of 5-cycles through each edge yields 60. Since each
5-cycle is counted ﬁve times in this total, the number of 5-cycles is 12.
c) The largest bipartite subgraph has twelve edges.
Proof 1 (breaking odd cycles). Each edge is in four 5-cycles, so we
must delete at least 12/4 edges to break all 5-cycles. Hence we must delete
at least three edges to have a bipartite subgraph. The illustration shows
that deleting three is enough; the Petersen graph has a bipartite subgraph
with 12 edges (see also the cover of the text).
•
•
•
•
•
•
•
•
•
•
A
A
B
B
A
A
B
A
A
B
Proof 2 (study of bipartite subgraphs). The Petersen graph G has
an independent set of size 4, consisting of the vertices {ab, ac, ad, ae} in
the structural description. The 12 edges from these four vertices go to the
other six vertices, so this is a bipartite subgraph with 12 edges.
Let X and Y be the partite sets of a bipartite subgraph H. If |X| ≤
4, then e(H) ≤12, with equality only when X is an independent 4-set
in G.
Hence we need only consider the case |X| = |Y| = 5.
To obtain
e(G) > 10, some vertex x ∈X must have three neighbors in Y. The two
nonneighbors of x in Y have common neighbors with x, and these must lie
in N(x), which is contained in Y. Hence e(G[Y]) ≥2. Interchanging X and
Y in the argument shows that also e(G[X]) ≥2. Hence e(H) ≤11.
1.3.46. When the algorithm of Theorem 1.4.2 is applied to a bipartite graph,
it need not ﬁnd the bipartite subgraph with the most edges. For the bipar-
tite graph below, the algorithm may reach the partition between the upper
vertices and lower vertices.
•
•
•
•
•
•
•
•

55
Chapter 1: Fundamental Concepts
Section 1.3: Vertex Degrees and Counting
56
This bipartite subgraph with eight edges has more than half of the
edges at each vertex, and no further changes are made.
However, the
bipartite subgraph with the most edges is the full graph.
1.3.47. Every nontrivial loopless graph G has a bipartite subgraph con-
taining more than half its edges. We use induction on n(G). If n(G) = 2,
then G consists of copies of a single edge and is bipartite. For n(G) > 2,
choose v ∈V (G) that is not incident to all of E(G) (at most two vertices can
be incident to all of E(G)). Thus e(G −v) > 0. By the induction hypothesis,
G −v has a bipartite subgraph H containing more than e(G)/2 edges.
Let X, Y be a bipartition of H. If X contains at least half of NG(v),
then add v to Y; otherwise add v to X. The augmented partition captures
a bipartite subgraph of G having more than half of E(G −v) and at least
half of the remaining edges, so it has more than half of E(G).
Comment. The statement can also be proved without induction. By
Theorem 1.3.19, G has a bipartite subgraph H with at least e(G)/2 edges.
By the proof of Theorem 1.3.19, equality holds only if dH(v) = dG(v)/2 for
every v ∈V (G). Given an edge uv, each of u and v has exactly half its neigh-
bors in its own partite set. Switching both to the opposite set will capture
those edges while retaining the edge uv, so the new bipartite subgraph has
more edges.
1.3.48. No fraction of the edges larger than 1/2 can be guaranteed for the
largest bipartite subgraph. If Gn is the complete graph K2n, then e(Gn) =
 2n
2

= n(2n −1), and the largest bipartite subgraph is Kn,n, which has n2
edges. Hence limn→∞f (Gn)/e(Gn) = limn→∞
n2
2n2−n = 1
2. For large enough
n, the fraction of the edges in the largest bipartite subgraph is arbitrarily
close to 1/2. (In fact, in every graph the largest bipartite subgraph has
more than half the edges.)
1.3.49. Every loopless graph G has a spanning k-partite subgraph H such
that e(H) ≥(1 −1/k)e(G).
Proof 1 (local change). Begin with an arbitrary partition of V (G) into
k parts V1, . . . , Vk, and consider the k-partite subgraph H containing all
edges of G consisting of two vertices from distinct parts. Given a partition
of V (G), let V (x) denote the part containing x. If in G some vertex x has
more neighbors in Vj than in some other part, then shifting x to the other
part increases the number of edges captured by the k-partite subgraph.
Since G has ﬁnitely many edges, this shifting process must terminate.
It terminates when for each x ∈V (G) the number |N(x) ∩Vi| is minimized
by Vi = V (x). Then dG(x) = P
i |NG(x)∩Vi| ≥k|NG(x)∩V (x)|. We conclude
that |NG(x) ∩V (x)| ≤(1/k)dG(x), and hence dH(x) ≥(1 −1/k)dG(x) for all
x ∈V (G). By the degree-sum formula, e(H) ≥(1 −1/k)e(G).
Proof 2 (induction on n). We prove that when G is nontrivial, some
such H has more than (1 −1/k)e(G) edges.
This is true when n = 2.
We procede by induction for n > 2. Choose a vertex v ∈V (G). By the
induction hypothesis, G −v has a spanning k-partite subgraph with more
than (1 −1/k)e(G −v) edges. This subgraph partitions V (G −v) into k
partite sets. One of these sets contains at most 1/k neighbors of v. Add
v to that set to obtain the desired k-partite subgraph H.
Now e(H) >
(1 −1/k)e(G −v) + (1 −1/k)dG(v) = (1 −1/k)e(G).
1.3.50. For n ≥3, the minimum number of edges in a connected n-vertex
graph in which every edge belongs to a triangle is ⌈3(n −1)/2⌉. To achieve
the minimum, we need only consider simple graphs. Say that connected
graphs with each edge in a triangle are good graphs. For n = 3, the only
such graph is K3, with three edges.
When n is odd, a construction with the claimed size consists of (n−1)/2
triangles sharing a common vertex. When n is even, add one vertex to the
construction for n −1 and make it adjacent to both endpoints of one edge.
For the lower bound, let G be a smallest n-vertex good graph. Since G
has fewer than 3n/2 edges (by the construction), G has a vertex v of degree
2. Let x and y be its neighbors. Since each edge belongs to a triangle, x ↔
y. If n > 3, then we form G′ by deleting v and, if xy have no other neighbor,
contracting xy. Every edge of G′ belongs to a triangle that contained it
in G. The change reduces the number of vertices by 1 or 2 and reduces
the number of edges by at least 3/2 times the reduction in the number of
vertices. By the induction hypothesis, e(G′) ≥

3(n(G′) −1)/2

, and hence
the desired bound holds for G.
1.3.51. Let G be a simple n-vertex graph.
a) e(G) =
P
v∈V (G) e(G−v)
n−2
. If we count up all the edges in all the subgraphs
obtained by deleting one vertex, then each edge of G is counted exactly n−2
times, because it shows up in the n −2 subgraphs obtained by deleting a
vertex other than its endpoints.
b) If n ≥4 and G has more than n2/4 edges, then G has a vertex whose
deletion leaves a graph with more than (n −1)2/4 edges. Since G has more
than n2/4 edges and e(G) is an integer, we have e(G) ≥(n2 + 4)/4 when n
is even and e(G) ≥(n2 + 3)/4 when n is odd (since (2k + 1)2 = 4k2 + 4k + 1,
every square of an odd number is one more than a multiple of 4). Thus
always we have e(G) ≥(n2 + 3)/4.
By part (a), we have P
v∈V (G)
e(G−v)
n−2
≥(n2 + 3)/4. In the sum we have n
terms. Since the largest number in a set is at least the average, there is a
vertex v such that e(G−v)
n−2
≥1
n
n2+3
4 . We rewrite this as
e(G −v) ≥(n2 + 3)(n −2)
4n
= n3 −2n2 + 3n −6
4n
= n2 −2n + 1
4
+ 2n −6
4n

57
Chapter 1: Fundamental Concepts
Section 1.3: Vertex Degrees and Counting
58
When n ≥4, the last term is positive, and we obtain the strict inequality
e(G −v) > (n −1)2/4.
c) Inductive proof that G contains a triangle if e(G) > n2/4. We use
induction on n. When n ≤3, they only simple graph with more than n2/4
edges is when n = 3 and G = K3, which indeed contains a triangle. For
the induction step, consider n ≥4, and let G be an n-vertex simple graph
with more than n2/4 vertices. By part (b), G has a subgraph G −v with
n −1 vertices and more than (n −1)2/4 edges. By the induction hypothesis,
G −v therefore contains a triangle. This triangle appears also in G.
1.3.52. K⌊n/2⌋,⌈n/2⌉is the only n-vertex triangle-free graph of maximum size.
As in the proof of Mantel’s result, let x be a vertex of maximum degree.
Since N(x) is an independent set, x and its non-neighbors capture all the
edges, and we have e(G) ≤(n −1(G))1(G). If equality holds, then sum-
ming the degrees in V (G) −N(x) counts each edge exactly once.
This
requires that V (G)−N(x) also is an independent set, and hence G is bipar-
tite. If G is bipartite and has (n−1(G))1(G) edges, then G = K(n−1(G)),1(G).
Hence e(G) is maximized only by K⌊n/2⌋,⌈n/2⌉.
1.3.53. The bridge club with 14 members (no game can be played if two of
the four people table have previously been partners): If each member has
played with four others and then six additional games have been played,
then the arrival of a new member allows a game to be played. We show that
the new player yields a set of four people among which no two have been
partners. This is true if and only if the previous games must leave three
people (in the original 14) among which no two have been partners.
The graph of pairs who have NOT been partners initially is K14. For
each game played, two edges are lost from this graph. At the breakpoint in
the session, each vertex has lost four incident edges, so 28 edges have been
deleted. In the remaining six games, 12 more edges are deleted. Hence
40 edges have been deleted. Since e(K14) = 91, there remain 51 edges for
pairs that have not yet been partners.
By Mantel’s Theorem (Theorem 1.3.23), the maximum number of edges
in a simple 14-vertex graph with no triangle is

142/4

. Since 51 > 49,
the graph of remaining edges has a triangle. Thus, when the 15th person
arrives, there will be four people of whom none have partnered each other.
1.3.54. The minimum number of triangles t(G) in an n-vertex graph G and
its complement.
a) t(G) =
 n
3

−(n −2)e + P
v∈V (G)
 d(v)
2

. Let d1, . . . , dn denote the vertex
degrees. We prove that the right side of the formula assigns weight 1 to
the vertex triples that induce a triangle in G or G and weight 0 to all
other triples. Among these terms,
 n
3

counts all triples, (n −2)e counts
those determined by an edge of G and a vertex off that edge, and P  di
2

counts 1 for each pair of incident edges. In the table below, we group these
contributions by how many edges the corresponding triple induces in G.
t(G)
in G
 n
3

−(n −2)e
P  di
2

1
3 edges
1
−3
3
0
2 edges
1
−2
1
0
1 edge
1
−1
0
1
0 edges
1
−0
0
b) t(G) ≥n(n −1)(n −5)/24. Begin with the formula for k3(G) + k3(G)
from part (a). Using the convexity of quadratic functions, we get a lower
bound for the sum on the right by replacing the vertex degrees by the av-
erage degree 2e/n. The bound is
 n
3

−(n −2)e + n
 2e/n
2

, which reduces to
 n
3

−2e(
 n
2

−e)/n. As a function of e, this is minimized when e = 1
2
 n
2

. This
substitution and algebraic simpliﬁcation produce t(G) ≥n(n−1)(n−5)/24.
Comment. The proof of part (b) uses two minimizations. These imply
that equality can hold only for a regular graph (di = 2e/n for all i) with
e = 1
2
 n
2

. There is such a regular graph if and only if n is odd and (n −1)/2
is even. Thus we need n = 4k + 1 and G is 2k-regular.
1.3.55. Maximum size with no induced P4. a) If G is a simple connected
graph and G is disconnected, then e(G) ≤1(G)2, with equality only for
K1(G),1(G). Since G is disconnected, 1(G) ≥n(G)/2, with equality only if
G = K1(G),1(G). Thus e(G) = P di/2 ≤n(G)1(G)/2 ≤1(G)2. As observed,
equality when G is disconnected requires G = K1(G),1(G).
b) If G is a simple connected graph with maximum degree D and no
induced subgraph isomorphic to P4, then e(G) ≤D2. It sufﬁces by part (a)
to prove that G is disconnected when G is connected and P4-free. We use
induction on n(G) for n(G) ≥2; it is immediate when n(G) = 2. For the
induction step, let v be a non-cut-vertex of G. The graph G′ = G −v is also
P4-free, so its complement is disconnected, by the induction hypothesis.
Thus V (G) −v has a vertex partition X, Y such that all of X is adjacent to
all of Y in G. Since G is connected, v has a neighbor z ∈X ∪Y; we may
assume be symmetry that z ∈Y. If G is connected, then G has a v, z-path.
Let y be the vertex before z on this path; note that y ∈Y. Also G connected
requires x ∈X such that vx ∈E(G). Now {v, z, x, y} induces P4 in G.
1.3.56. Inductive proof that for P di even there is a multigraph with vertex
degrees d1, . . . , dn.
Proof 1 (induction on P di). If P di = 0, then all di are 0, and the
n-vertex graph with no edges has degree list d. For the induction step,
suppose P di > 0. If only one di is nonzero, then it must be even, and the

59
Chapter 1: Fundamental Concepts
Section 1.3: Vertex Degrees and Counting
60
graph consisting of n −1 isolated vertices plus di/2 loops at one vertex has
degree list d (multigraphs allow loops).
Otherwise, d has at least two nonzero entries, di and dj. Replacing
these with di −1 and dj −1 yeilds a list d′ with smaller even sum. By
the induction hypothesis, some graph G′ with degree list d′. Form G by
adding an edge with endpoints u and v to G′, where dG′(u) = di −1 and
dG′(v) = dj −1.
Although u and v may already be adjacent in G′, the
resulting multigraph G has degree list d.
Proof 2 (induction on n). For n = 1, put d1/2 loops at v1. If dn is even,
put dn/2 loops at vn and apply the induction hypothesis. Otherwise, put an
edge from vn to some other vertex corresponding to positive di (which exists
since P di is even) and proceed as before.
1.3.57. An n-tuple of nonnegative integers with largest entry k is graphic if
the sum is even, k < n, and every entry is k or k −1. Let A(n) be the set of n-
tuples satisfying these conditions. Let B(n) be the set of graphic n-tuples.
We prove by induction on n that n-tuples in A(n) are also in B(n). When
n = 1, the only list in A(n) is (0), and it is graphic.
For the induction step, let d be an n-tuple in A(n), and let k be its
largest element. Form d′ from d by deleting a copy of k and subtracting 1
from k largest remaining elements. The operation is doable because k < n.
To apply the induction hypothesis, we need to prove that d′ ∈A(n −1).
Since we delete an instance of k and subtract one from k other values, we
reduce the sum by 2k to obtain d′ from d, so d′ does have even sum.
Let q be the number of copies of k in d. If q > k + 1, then d′ has ks and
(k −1)s. If q = k + 1, then d′ has only (k −1)s. If q < k + 1, then d′ has
(k −1)s and (k −2)s. Also, if k = n −1, then the ﬁrst possibility cannot
occur. Thus d′ has length n −1, its largest value is less than n −1, and its
largest and smallest values differ by at most 1. Thus d′ ∈A(n −1), and we
can apply the induction hypothesis to d′.
The induction hypothesis (d′ ∈A(n −1)) ⇒(d′ ∈B(n −1)) tells us that
d′ is graphic. Now the Havel-Hakimi Theorem implies that d is graphic.
(Actually, we use only the easy part of the HH Theorem, adding a vertex
joined to vertices with desired degrees.)
1.3.58. If d is a nonincreasing list of nonnegative integers, and d ′ is ob-
tained by deleting dk and subtracting 1 from the k largest other elements,
then d is graphic if and only if d′ is graphic. The proof is like that of the
Havel–Hakimi Theorem. Sufﬁciency is immediate. For necessity, let w be
a vertex of degree dk in a simple graph with degree sequence d. Alter G by
2-switches to obtain a graph in which w has the dk highest-degree other ver-
tices as neighbors. The argument to ﬁnd a 2-switch increasing the number
of desired neighbors of w is as in the proof of the Havel–Hakimi Theorem.
1.3.59. The list d = (d1, . . . , d2k) with d2i = d2i−1 = i for 1 ≤i ≤k is graphic.
This is the degree list for the bipartite graph with vertices x1, . . . , xk and
y1, . . . , yk deﬁned by xr ↔ys if and only if r +s > k. Since the neighborhood
of xr is {yk, yk−1, . . . , yk−r+1}, the degree of xr is r. Thus the graph has two
vertices of each degree from 1 to k.
1.3.60. Necessary and sufﬁcient conditions for a list d to be graphic when d
consists of k copies of a and n−k copies of b, with a ≥b ≥0. Since the degree
sum must be even, the quantity ka + (n −k)b must be even. In addition,
the inequality ka ≤k(k −1) + (n −k) min{k, b} must hold, since each vertex
with degree b has at most min{k, b} incident edges whose other endpoint
has degree a. We construct graphs with the desired degree sequence when
these conditions hold. Note that the inequality implies a ≤n −1.
Case 1: b ≥k and a ≥n −k. Begin with Kk,n−k, having partite sets
X of size k and Y of size n −k. If k(a −n + k) and (n −k)(b −k) are even,
then add an (a −n + k)-regular graph on X and a (b −k)-regular graph on
Y. To show that this is possible, note ﬁrst that 0 ≤a −n + k ≤k −1 and
0 ≤b −k ≤a −k ≤n −k −1. Also, when pq is even, a q-regular graph on
p vertices in a circle can be constructed by making each vertex adjacent to
the ⌊q/2⌋nearest vertices in each direction and also to the opposite vertex
if q is odd (since then p is even).
Note that k(a−n+k) and (n−k)(b−k) have the same parity, since their
difference ak −(n −k)b differs from the given even number ka + (n −k)b by
an even amount. If they are both odd, then we delete one edge from Kk,n−k,
and now one vertex in the subgraph on X should have degree a −n + k + 1
and one in the subgraph on Y should have degree b−k +1. When pq is odd,
such a graph on vertices v0, . . . , vp−1 in a circle (q-regular except for one
vertex of degree q + 1) can be constructed by making each vertex adjacent
to the (q −1)/2 nearest vertices in each direction and then adding the edges
{vivi+(p−1)/2: 0 ≤i ≤(p −1)/2. Note that all vertices are incident to one of
the added edges, except that v(p−1)/2 is incident to two of them.
Case 2: k −1 ≤a < n −k. Begin by placing a complete graph on a set
S of k vertices. These vertices now have degree k −1 and will become the
vertices of degree a, which is okay since a ≥b. Put a set T of n−k additional
vertices in a circle. For each vertex in S, add a−k +1 consecutive neighbors
in T , starting the next set immediately after the previous set ends. Since
a ≤n −1, each vertex in S is assigned a −k + 1 distinct neighbors in T .
Since k(a −k + 1) ≤(n −k)b and the edges are distributed nearly equally
to vertices of T , there is room to add these edges.
For the subgraph induced by T , we need a graph with n −k vertices
and [(n −k)b −k(a −k + 1)]/2 edges and degrees differing by at most 1.
The desired number of edges is integral, since ka + (n −k)b is even, and it

61
Chapter 1: Fundamental Concepts
Section 1.3: Vertex Degrees and Counting
62
is nonnegative, since k(a −k + 1) ≤(n −k)b. The largest degree needed is
⌈(n −k)b −k(a −k + 1)⌉n −k. This is at most b, which is less than n −k
since b ≤a < n −k. The desired graph now exists by Exercise 1.3.57.
Case 3: b < k and a ≥n −k. Put the set S of size k in a circle. For
each vertex in the set T of size n −k, assign b consecutive neighbors in
S; these are distinct since b < k. Since a ≥n −k, no vertex of S receives
too many edges. On S we put an almost-regular graph with k vertices and
[ak −b(n −k)]/2 edges. Again, this number of edges is integral, and in
the case speciﬁed it is nonnegative. Existence of such a graph requires
a −b(n −k)/k ≤k −1, which is equivalent to the given inequality k(a −k +
1) ≤(n −k)b. Now again Exercise 1.3.57 provides the needed graph.
Case 4: b < k and a < min{k −1, n −k}. Since a < n −k, also b < n −k.
Therefore, we can use the idea of Case 1 without the complete bipartite
graph. Again take disjoint vertex sets X of size k and Y of size n −k. If ka
and (n −k)b are even, then we use an a-regular graph on X and a b-regular
graph on Y. As observed before, these exist.
Note that ka and (n −k)b have the same parity, since their sum is
given to be even. If they are both odd, then we put min{k, n −k} disjoint
edges with endpoints in both X and Y. We now complete the graph with
a regular graph of even degree on one of these sets and an almost-regular
graph guaranteed by Exercise 1.3.57 on the other.
1.3.61. If G is a self-complementary n-vertex graph and n is odd, then G
has a vertex of degree (n −1)/2. Let d1, . . . , dn be the degree list of G in
nonincreasing order. The degree list of G in nonincreasing order is n −
1 −dn, . . . , n −1 −d1. Since G ∼= G, the lists are the same. Since n is
odd, the central elements in the list yield d(n+1)/2 = n −1 −d(n+1)/2, so
d(n+1)/2 = (n −1)/2.
1.3.62. When n is congruent to 0 or 1 modulo 4, there is an n-vertex simple
graph G with 1
2
 n
2

edges such that 1(G) −δ(G) ≤1. This is satisﬁed by the
construction given in the answer to Exercise 1.1.31.
More generally, let G be any 2k-regular simple graph with 4k + 1 ver-
tices, where n = 4k + 1. Such a graph can be constructed by placing 4k + 1
vertices around a circle and joining each vertex to the k closest vertices in
each direction. By the Degree-Sum Formula, e(G) = (4k + 1)(2k)/2 = 1
2
 n
2

.
For the case where n = 4k, delete one vertex from the graph con-
structed above to form G′. Now e(G′) = e(G) −2k = (4k −1)(2k)/2 = 1
2
 n
2

.
1.3.63. The non-negative integers d1 ≥· · · ≥dn are the vertex degrees of a
loopless graph if and only if P di is even and d1 ≤d2 + · · · + dn. Necessity.
If such a graph exists, then P di counts two endpoints of each edge and
must be even. Also, every edge incident to the vertex of largest degree
has its other end counted among the degrees of the other vertices, so the
inequality holds.
Sufﬁciency. Specify vertices v1, . . . , vn and construct a graph so that
d(vi) = di.
Induction on n has problems:
It is not enough to make
dn edges join v1 and vn degrees and apply the induction hypothesis to
(d1 −dn), d2, . . . , dn−1. Although d1 −dn ≤d2 + · · · + dn−1 holds, d1 −dn
may not be the largest of these numbers.
Proof 1 (induction on P di). The basis step is P di = 0, realized by
an independent set. Suppose that P di > 0; we consider two cases. If d1 =
Pn
i=2 di, then the desired graph consists of d1 edges from v1 to v2, . . . , vn. If
d1 < Pn
i=2 di, then the difference is at least 2, because the total degree sum
is even. Also, at least two of the values after d1 are nonzero, since d1 is the
largest. Thus we can subtract one from each of the last two nonzero values
to obtain a list d′ to which we can apply the induction hypothesis (it has
even sum, and the largest value is at most the sum of the others. To the
resulting G′, we add one edge joining the two vertices whose degrees are
the reduced values. (This can also be viewed as induction on (Pn
i=2 di)−d1.)
Proof 2 (induction on P di). Basis as above. Consider P di > 0. If
d1 > d2, then we can subtract 1 from d1 and from d2 to obtain d′ with smaller
sum. Still d1 −1 is a largest value in d′ and is bounded by the sum of the
other values. If d1 = d2, then we subtract 1 from each of the two smallest
values to form d′. If these are d1 and d2, then d′ has the desired properties,
and otherwise Pn
i=2 di exceeds d1 by at least 2, and again d′ has the desired
properties. In each case, we can apply the induction hypothesis to d ′ and
complete the proof as in Proof 1.
Proof 3 (local change). Every nonnegative integer sequence with even
sum is realizable when loops and multiple edges are allowed. Given such a
realization with a loop, we change it to reduce the number of loops without
changing vertex degrees. Eliminating them all produces the desired real-
ization. If we have loops at distinct vertices u and v, then we replace two
loops with two copies of the edge uv. If we have loops only at v and have an
edge xy between two vertices other than v, then we replace one loop and
one copy of xy by edges vx and vy. Such an edge xy must exist because the
sum of the degrees of the other vertices is as large as the degree of v.
1.3.64. A simple graph with degree sequence d1 ≤d2 ≤· · · ≤dn is connected
if dj ≥j for all j such that j ≤n −1 −dn. Let V (G) = {v1, . . . , vn}, with
d(vi) = di, and let H be the component of G containing vn; note that H
has at least 1 + dn vertices. If G is not connected, then G has another
component H ′. Let j be the number of vertices in H ′. Since H has at least
1 + dn vertices, we have j ≤n −1 −dn. By the hypothesis, dj ≥j. Since H ′
has j vertices, its maximum degree is at least dj. Since dj ≥j, there are at

63
Chapter 1: Fundamental Concepts
Section 1.3: Vertex Degrees and Counting
64
least j + 1 vertices in H ′, which contradicts the deﬁnition of j. Hence G is
in fact connected.
1.3.65. If D = {ai} is a set of distinct positive integers, with 0 < a1 < · · · <
ak, then there is a simple graph on ak + 1 vertices whose set of vertex degrees
(repetition allowed) is D.
Proof 1 (inductive construction). We use induction on k. For k = 1,
use Ka1+1. For k = 2, use the join Ka1 ∨K a2−a1+1. That is, G consists of a
clique Q with a1 vertices, an independent set S with a2 −a1 + 1 vertices,
and all edges from Q to S. The vertices of S have degree a1, and those of Q
have degree a2.
For k ≥2, take a clique Q with a1 vertices and an independent set
S with ak −ak−1 vertices.
Each vertex of S has neighborhood Q, and
each vertex of Q is adjacent to all other vertices.
Other vertices have
a1 neighbors in Q and none in S, so the degree set of G −Q −S should
be {a2 −a1, . . . , ak−1 −a1}. By the induction hypthesis, there is a simple
graph H with ak−1 −a1 + 1 vertices having this degree set (the degree set
is smaller by 2). Using H for G −Q −S completes G as desired.
Proof 2 (induction and complementation). Again use induction on k,
using Ka1+1 when k = 1. For k > 1 and 0 < a1 · · · < ak, the complement
of the desired graph with a1 + 1 vertices has degree set {ak −a1, . . . , ak −
ak−1, 0}. By the induction hypothesis, there is a graph of order ak −a1 + 1
with degree set {ak −a1, · · · , ak −ak−1}. Add a1 isolated vertices and take
the complement to obtain the desired graph G.
1.3.66. Construction of cubic graphs not obtainable by expansion alone. A
simple cubic graph G that cannot be obtained from a smaller cubic graph by
the expansion operation is the same as a cubic graph on which no erasure
can be performed, since any erasure yielding a smaller H from G could be
inverted by an expansion to obtain G from H. An edge cannot be erased by
this operation if and only if one of the subsequent contractions produces a
multiple edge. This happens if the other edges incident to the edge being
erased belong to a triangle, or in one other case, as indicated below.
•
•
•
•
•
•
→
•
•
•
•
and
•
•
•
•
→
•
•
Finally, we need only provide a simple cubic graph with 4k vertices
where every edge is non-erasable in one of these two ways. To do this place
copies of G1, . . . , Gk of K4 −e (the unique 4-vertex graph with 5 edges)
around in a ring, and for each consecutive pair Gi, Gi+1 add an edge joining
a pair of vertices with degree two in the subgraphs, as indicated below,
where the wraparound edge has been cut.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
1.3.67. Construction of 3-regular simple graphs
a) A 2-switch can be performed by performing a sequence of expansions
and erasures. We achieve a 2-switch using two expansions and then two
erasures as shown below. If the 2-switch deletes xy and zw and introduces
xw and yz, then the ﬁrst expansion places new vertices u and v on xy and
zw, the second introduces s and t on the resulting edges ux and vz, the ﬁrst
erasure deletes su and its vertices, and the second erasure deletes tv and its
vertices. The resulting vertices are the same as in the original graph, the
erasures were legal because they created only edges that were not present
originally, and we have deleted xy and zw and introduced xw and yz.
•
•
•
•
x
y
z
w
→
•
•
•
•
•
•
→
x
y
z
w
u
v
•
•
•
•
•
•
•
•
x
y
z
w
u
v
s
t
→
•
•
•
•
•
•
x
y
z
w
v
t
→
•
•
•
•
x
y
z
w
b) Every 3-regular simple graph can be obtained from K4 by a sequence
of expansions and erasures. Erasure is allowed only if no multiple edges
result. Suppose H is the desired 3-regular graph. Every 3-regular graph
has an even number of vertices, at least four. Any expansion of a 3-regular
graph is a 3-regular graph with two more vertices. Hence successive ex-
pansions from K4 produce a 3-regular graph G with n(H) vertices. Since G
and H have the same vertex degrees, there is a sequence of 2-switches from
G to H. Since every 2-switch can be produced by a sequence of expansions
and erasures, we can construct a sequence of expansions and erasures from
K4 to H by going through G.
1.3.68. If G and H are X, Y-bigraphs, then dG(v) = dH(v) for all v ∈X ∪Y
if and only if there is a sequence of 2-switches that transforms G into H
without ever changing the bipartition. The condition is sufﬁcient, since 2-
switches do not change vertex degrees. For necessity, assume that dG(v) =
dH(v) for all v. We build a sequence of 2-switches transforming G to H.
Proof 1 (induction on |X|). If |X| = 1, then already G = H, so we
may assume that |X| > 1. Choose x ∈X and let k = d(x). Let S be a
selection of k vertices of highest degree in Y. If N(x) ̸= S, choose y ∈S
and y′ ∈Y −S so that x ↮y and x ↔y′. Since d(y) ≥d(y′), there exists
x′ ∈X so that y ↔x′ and y′ ↮x′. Switching xy′, x′y for xy, x′y′ increases

65
Chapter 1: Fundamental Concepts
Section 1.4: Directed graphs
66
|N(x) ∩S| with the same bipartition. Iterating this reaches N(x) = S; let
G′ be the resulting graph.
Doing the same in H yields graphs G′ from G and H ′ from H such that
NG′(x) = NH ′(x). Deleting x and applying the induction hypothesis to the
graphs G∗= G′ −x and H ∗= H ′ −x completes the construction of the
desired sequence of 2-switches.
Proof 2 (induction on number of discrepancies). Let F be the X, Y-
bigraph whose edges are those belonging to exactly one of G and H. Let
d = e(F). Since G and H have identical vertex degrees, each vertex of F
has the same number of incident edges from E(G)−E(H) and E(H)−E(G).
When d > 0, F therefore has a cycle alternating between E(G) and E(H)
(when we enter a vertex on an edge of one type, we can exit on the other
type, we can’t continue forever, and all cycles have even length).
Let C be a shortest alternating cycle in F, with ﬁrst xy ∈E(G) −E(H)
and then yx′ ∈E(H) −E(G) and x′y′ ∈E(G) −E(H). We consider a 2-
switch involving {x, y, x′, y′}. If y′x ∈E(H) −E(G), then the 2-switch in
G reduces d by 4. If y′x ∈E(G) −E(H), then we would have a shorter
cycle in F. If y′x /∈E(G) ∪E(H), then we perform the 2-switch in G; if
y′x ∈E(G) ∪E(H), then we perform the 2-switch in H. Each of these last
two cases yields a new pair of graphs with d reduced by 2, and the induction
hypothesis applies to this pair to provide the rest of the exchanges.
1.4. DIRECTED GRAPHS
1.4.1. Digraphs in the real world. Many digraphs based on temporal order
have no cycles. For example, given a set of football games, we can put an
edge from game x to game y if game x ends before game y begins. The
relation “is a parent of” also works.
Asymmetric digraphs without cycles often arise from tournaments.
Each team plays every other team, and there is an edge for each game from
the winner to the loser. The result can be without cycles, but usually cycles
exist. Another example is the relation “has sent a letter to”.
1.4.2.
If the ﬁrst switch becomes disconnected from the wiring in the
lightswitch system of Application 1.4.4, then the digraph for the resulting
system is that below.
DU+
UU+
U D−
DD−
DU+
UU−
U D+
DD+
1.4.3. Every u, v-walk in a digraph contains a u, v-path. The shortest u, v-
walk contained in a u, v-walk W is a u, v-path, since the shortest walk has
no vertex repetition.
1.4.4. Every closed walk of odd length in a digraph contains the edges of an
odd cycle. The proof follows that of the corresponding statement for graphs
in Lemma 1.2.15, given that the deﬁnitions of walk and cycle require the
head of each edge to be the tail of the next edge.
We use induction on the length l of a closed odd walk W. Basis step:
l = 1. A closed walk of length 1 traverses a cycle of length 1.
Induction step: l > 1. Assume the claim for closed odd walks shorter
than W. If W has no repeated vertex (other than ﬁrst = last), then W itself
forms a cycle of odd length. If vertex v is repeated in W, then we view W as
starting at v and break W into two v, v-walks. Since W has odd length, one
of these is odd and the other is even. The odd one is shorter than W. By
the induction hypothesis, it contains an odd cycle, and this cycle appears
in order in W.
1.4.5. A ﬁnite directed graph contains a (directed) cycle if every vertex is
the tail of at least one edge (has positive outdegree). (The same conclusion
holds if every vertex is the head of at least one edge.) Let G be such a
graph, let P be a maximal (directed) path in G, and let x be the ﬁnal vertex
of P. Since x has at least one edge going out, there is an edge xy. Since
P cannot be extended, y must belong to P. Now xy completes a cycle with
the y, x-subpath of P.
1.4.6. The De Bruijn graphs D2 and D3.
•
•
0
1
•
•
•
•
01
10
00
11

67
Chapter 1: Fundamental Concepts
Section 1.4: Directed graphs
68
1.4.7. In an orientation of a simple graph with 10 vertices, the vertices can
have distinct outdegrees. Take the orientation of the complete graph with
vertices 0, . . . , 9 by orienting the edge i j from i to j if i > j. In this digraph,
the outdegree of vertex i is i.
1.4.8. There is an n-vertex tournament with d+(v) = d−(v) for every vertex
v if and only if n is odd. If n is even, then d+(v) + d−(v) = n −1 is odd,
so the summands can’t be equal integers. For odd n, we construct such a
tournament.
Proof 1 (explicit construction). Place the n vertices equally spaced
around a circle, and direct the edges from v to the (n −1)/2 vertices that
follow v in the clockwise direction. After doing this for each vertex, the
(n −1)/2 nearest vertices in the counterclockwise direction from v have
edges directed to v, and each edge has been oriented.
Proof 2 (inductive construction). When n = 1, the 1-vertex tourna-
ment satisﬁes the degree condition. For k > 1, suppose that T is a tourna-
ment with 2k −1 vertices that satisﬁes the condition. Partition V (T ) into
sets A and B with |A| = k and |B| = k −1. Add two vertices x and y. Add
all edges from x to A, from A to y, from y to B, and from B to x. Each ver-
tex in V (T ) now has one predecessor and one successor in {x, y}. We have
d+(x) = k, d−(x) = k −1, d+(y) = k −1, d−(y) = k. Complete the con-
struction of T ′ by adding the edge yx. Now T ′ is a tournament with 2k + 1
vertices that satisﬁes the degree condition.
Proof 3 (Eulerian graphs). When n is odd, Kn is a connected even
graph and hence is Eulerian. Orienting edges of Kn in the forward direction
while following an Eulerian circuit yields the desired tournament.
1.4.9. For each n, there is an n-vertex digraph in which the vertices have
distinct indegrees and distinct outdegrees. Using vertices v1, . . . , vn, let the
edges be {vivj: 1 ≤i < j ≤n}. Now d−(vi) = i −1 and d+(vi) = n −i. Thus
the indegrees are distinct, and the outdegrees are distinct.
1.4.10. A digraph is strongly connected if and only if for each partition of
the vertex set into nonempty sets S and T , there is an edge from S to T .
Given that D is strong, choose x ∈S and y ∈T . Since D has an x, y-path,
the path must leave S and enter T and do so along some edge.
Conversely, if there is such an edge for every partition, let S be the set
of all vertices reachable from vertex x. If S ̸= V (D), then the hypothesis
yield an edge leaving S, which adds a vertex to S. Since x was arbitrary,
each vertex is reachable from every other, and D is strongly connected.
1.4.11. In every digraph, some strong component has no entering edges,
and some strong component has no exiting edges.
Proof 1 (using cycles). Given a digraph D, form a digraph D∗with
one vertex for each strong component of D. Let the strong components of
D be X1, . . . , Xk, with corresponding vertices x1, . . . , xk in D∗. Put an edge
from xi to xj in D∗if in D there is an edge from some vertex of Xi to some
vertex of X j. The problem is to show that D∗has a vertex with indegree 0
and a vertex with outdegree 0.
If such vertices do not exist, then D∗has a cycle (by Lemma 1.4.23). If
D∗has a cycle, then the union of the strong components of D corresponding
to the vertices of the cycle is a strongly connected subgraph of D containing
all those components. This is a contradiction, because they were maximal
strong subgraphs.
Proof 2 (extremality). For a vertex v in D, let R(v) be the set of ver-
tices reachable from v. Let u be a vertex minimizing |R(u)|. If v ∈R(u),
then R(v) ⊆R(u), so R(v) = R(u). Since u ∈R(u), also u is reachable from
v. Thus R(u) induces a strong subdigraph. By the deﬁnition of R(u), no
edges leave it, so it is a strong component. Applying the same argument to
the reverse digraph yields a strong component with no entering edge.
1.4.12. In a digraph the connection relation is an equivalence relation, and
its equivalence classes are the vertex sets of the strong components. We are
deﬁning x to be connected to y if the digraph has both an x, y-path and
a y, x-path.
The reﬂexive property holds using paths of length 0.
The
symmetric property holds by the deﬁnition.
For transitivity, consider an x, y-path P1 and a y, z-path P2. Let w be
the ﬁrst vertex of P1 that belongs to P2. Following P1 from x to w and P2
from w to z yields an x, z-path, by the choice of w. Applying this to obtain
paths in both directions shows that the connection relation is transitive.
Since a strong component is a strongly connected subdigraph, its pairs
of vertices satisfy the connection relation. Hence every strong component
is contained in an equivalence class of the connection relation. In order to
show that every equivalence class is contained in a strong component, we
show that when x is connected to y, there is an x, y-path using only vertices
of the equivalence class.
Let P be an x, y-path, and let Q be a y, x-path. The concatenation of Q
with P is a closed walk in the digraph; let S be its vertex set. By following
the walk, we ﬁnd a u, v-walk for all u, v ∈S. Such a walk contains a u, v-
path. The same argument yields a v, u-path in the walk. Hence all pairs
of vertices on it satisfy the connection relation, and we have found an x, y-
path (and y, x-path) witin the equivalence class. Hence the subdigraph
induced by the equivalence class is strongly connected.
1.4.13. Strong components.
a) Two maximal strongly connected subgraphs of a directed graph share
no vertices. If strong components D1, D2 of D share a vertex v, then for all

69
Chapter 1: Fundamental Concepts
Section 1.4: Directed graphs
70
x ∈V (D1) and y ∈V (D2), the union of an x, v-path in D1 and a v, y-path in
D2 contains an x, y-path in D. Similarly, D has a y, x-path. Thus D1 ∪D2
is strongly connected.
b) The digraph D∗obtained by contracting the strong components of a
digraph D is acyclic (D∗has a vertex vi for each strong component Di, with
vi →vj if and only if i ̸= j and D has an edge from Di to Dj). If D∗has a cycle
with vertices d0, . . . , dl−1, then D has strong components D0, . . . , Dl−1 such
that D has an edge uivi+1 from Dito Di+1, for each i (modulo l). If x ∈Di and
y ∈Dj, this means that D contains an x, y-walk consisting of the concate-
nation of paths with successive endpoints x, ui, vi+1, ui+1, vi+2, . . . , uj−1, vj,
y. This walk contains an x, y-path. Since x, y were chosen arbitrarily from
D0 ∪· · ·∪Dl−1, we conclude that D0 ∪· · ·∪Dl−1 is strongly connected, which
contradicts D0, . . . , Dl−1 being maximal strongly connected subgraphs.
1.4.14. If G is an n-vertex digraph with no cycles, then the vertices of G can
be ordered as v1, . . . , vn so that if vivj ∈E(G), then i < j. If G has no cycles,
then some vertex v has outdegree 0. Put v last in the ordering. Now G −v
also has no cycles, and we proceed iteratively. When we choose vj, it has no
successors among v1, . . . , v j−1, so the desired condition on the edges holds.
1.4.15. In the simple digraph with vertex set {(i, j) ∈Z2: 0 ≤i ≤m and 0 ≤
n} and an edge from (i, j) to (i ′, j′) if and only if (i ′, j′) is obtained from (i, j)
by adding 1 to one coordinate, there are
 m+n
n

paths from (0, 0) to (m, n).
Traversing each edge adds one to each coordinate, so every such path has
m + n edges. We can record such a path as a 0, 1-list, recording 0 when we
follow an edge that increases the ﬁrst coordinate, 1 when we follow an edge
that increases the second coordinate. Each list with m 0s and n 1s records
a unique path. Since there are
 m+n
n

ways to form such a list by choosing
positions for the 1s, the bijection implies that the number of paths is
 m+n
n

.
1.4.16. Fermat’s Little Theorem. Let Zn denote the set of congruence classes
of integers modulo a PRIME NUMBER n (the ﬁrst printing of the second
edition omitted this!). Multiplication by a positive integer a that is not
a multiple of n deﬁnes a permutation of Zn, since ai ≡aj (mod n) yields
a( j −i) ≡0 (mod n), which requires n to divide j −i when a and n are rel-
atively prime. The functional digraph consists of pairwise disjoint cycles.
a) If G is the functional digraph with vertex set Zn for the permutation
deﬁned by multiplication by a, then all cycles in G (except the loop on n) have
length l −1, where l is the least natural number such that al ≡a (mod n).
This is the length of the cycle containing the element 1. Traversing a cycle
of length k (not the cycle consisting of n) yields xak ≡x (mod n), or x(ak −
1) ≡0 (mod n), for some x not divisible by n. Since n is prime, this requires
ak ≡1 (mod n), and hence k ≥l −1. On the other hand xal−1 = x, and
hence k ≤l −1.
b) an−1 ≡1 (mod n). Since all nontrivial cycles have the same length,
l −1 divides n −1. Let m = (n −1)/(l −1). Now an−1 = a(l−1)m = (al−1)m ≡
1m ≡1 (mod n).
1.4.17. A (directed) odd cycle is a digraph with no kernel. Let S be a kernel
in an odd cycle C. Every vertex must be in S or have a successor in S. Since
S is an independent set, exactly one of these two conditions holds at each
vertex. Hence we must alternate between vertices in S and vertices not in
S as we follow the C. We cannot alternate two conditions as we follow an
odd cycle, so there is no kernel.
A digraph having an odd cycle as an induced subgraph and having a
kernel. To an odd cycle, add one new vertex as a successor of each vertex
on the cycle. The new vertex forms a kernel by itself.
1.4.18. An acyclic digraph D has a unique kernel.
Proof 1 (parity of cycles). By Theorem 1.4.16, a digraph with no odd
cycles has at least one kernel. We show that a digraph with no even cycles
has at most one kernel, by proving the contrapositive.
If K and L are
distinct kernels (each induces no edges), then every vertex of K −L has a
successor in L −K, and every vertex of L −K has a successor in K −L.
Proof 2 (induction on n(D)). In a digraph with one vertex and no cycle,
the vertex is a kernel. When n(D) > 1, the absence of cycles guarantees a
vertex with outdegree 0 (Lemma 1.4.23). Such a vertex lies in every kernel,
since it has no successor. Let S′ = {v ∈V (D): d+(v) = 0}. Note that S′
induces no edges. Let D′ be the subdigraph obtained from D by deleting S′
and all vertices having successors in S′. The digraph D′ has no cycles; by
the induction hypothesis, D′ has a unique kernel S′′.
Let S = S′ ∪S′′. Since there are no edges from V (D′) to S′, the set S
is a kernel in D. Furthermore, S is the only kernel. We have argued that
all of S′ is present in every kernel, and independence of the kernel implies
that no other vertex outside V (D′) is present. The lack of edges from V (D′)
to S′ implies that the remainder of the kernel must be a kernel in D′, and
there is only one such set.
1.4.19. A digraph is Eulerian if and only if d+(v) = d−(v) for every vertex
v and the underlying graph has at most one nontrivial component.
Necessity. Each passage through a vertex by a circuit uses an entering
edge and an exiting edge; this applies also to the “last” and “ﬁrst” edges of
the circuit. Also, two edges can be in the same trail only when they lie in
the same component of the underlying graph.
Sufﬁciency. We use induction on the number of edges, m. Basis step:
When m = 0, a closed trail consisting of one vertex contains all the edges.

71
Chapter 1: Fundamental Concepts
Section 1.4: Directed graphs
72
Induction step: Consider m > 0. With equal indegree and outdegree,
each vertex in the nontrivial component of the underlying graph of our
digraph G has outdegree at least 1 in G. By Lemma 1.2.25, G has a cycle
C. Let G′ be the digraph obtained from G by deleting E(C).
Since C has 1 entering and 1 departing edge at each vertex, G′ also
has equal indegree and outdegree at each vertex. Each component of the
underlying graph H ′ of G′ is the underlying graph of some subgraph of
G′. Since G′ has fewer than m edges, the induction hypothesis yields an
Eulerian circuit of each such subgraph of G′.
To form an Eulerian circuit of G, we traverse C, but when a component
of H ′ is entered for the ﬁrst time we detour along an Eulerian circuit of the
corresponding subgraph of G′, ending where the detour began. When we
complete the traversal of C, we have an Eulerian circuit of G.
1.4.20. A digraph is Eulerian if and only if indegree equals outdegree at
every vertex and the underlying graph has at most one nontrivial compo-
nent. The conditions are necessary, since each passage through a vertex
uses one entering edge and one departing edge.
For sufﬁciency, suppose that G is a digraph satisfying the conditions.
We prove ﬁrst that every non-extendible trail in G is closed. Let T be a non-
extendible trail starting at u. Each time T passes through a vertex v other
than u, it uses one entering edge and one departing edge. Thus upon each
arrival at v, T has used one more edge entering v than departing v. Since
d+(v) = d−(v), there remains an edge on which T can continue. Hence a
non-extendible trail can only end at v and must be closed.
We now show that a trail of maximal length in G must be an Eulerian
circuit. Let T be a trail of maximum length; T must also be non-extendible,
and hence T is closed. Suppose that T omits some edge e of G. Since the
underlying graph of G has only one nontrivial component, it has a shortest
path from e to the vertex set of T . Hence some edge e′ not in T is incident
to some vertex v of T . It may enter or leave v.
Since T is closed, there is a trail T ′ that starts and ends at v and uses
the same edges as T . We now extend T ′ along e′ (forward or backward
depending on whether e leaves or enters v) to obtain a longer trail than T .
This contradicts the choice of T , and hence T traverses all edges of G.
1.4.21. A digraph has an Eulerian trail if and only if the underlying graph
has only one nontrivial component and d−(v) = d+(v) for all vertices or for
all but two vertices, in which case in-degree and out-degree differ by one for
the other two vertices. Sufﬁciency: since the total number of heads equals
the total number of tails, the vertices out of balance consist of x with an
extra head and y with an extra tail. Add the directed edge xy and apply
the characterization above for Eulerian digraphs.
1.4.22. If D is a digraph with d−(v) = d+(v) for every vertex v, except that
d+(x)−d−(x) = k = d−(y)−d+(y), then D contains k pairwise edge-disjoint
x, y-paths. Form a digraph D′ by adding k edges from y to x. Since indegree
equals outdegree for every vertex of D′, the “component” of D′ containing x
and y is Eulerian. Deleting the added edges from an Eulerian circuit cuts
it at k places; the resulting k directed trails are x, y-trails in the digraph
D. As proved in Chapter 1, the edge set of every x, y-trail contains an
x, y-path; the proof in Chapter 1 applies to both graphs and digraphs.
1.4.23. Every graph G has an orientation such that |d+(v) −d−(v)| ≤1 for
all v.
Proof 1 (Eulerian circuits). Add edges to pair up vertices of odd de-
gree (if any exist).
Each component of this supergraph G′ is Eulerian.
Orient G′ by following an Eulerian circuit in each component, orienting
each edge forward as the circuit is traversed. The circuit leaves each ver-
tex the same number of times as it enters, so the resulting orientation has
equal indegree and outdegree at each vertex.
Deleting the edges of E(G′) −E(G) now yields the desired orientation
of G, because at most one edge was added at each vertex to pair the vertices
of odd degree. Deleting at most one incident edge at v produces difference
at most one between d+(v) and d−(v).
Proof 2 (induction on e(G)). If e(G) = 0, then the claim holds. For
e(G) > 0, if G has a cycle H, then orient H consistently, with no imbalance
anywhere. If G has no cycle, then ﬁnd a maximal path H and orient it
consistently. This creates imbalance of 1 at the endpoints and 0 elsewhere.
The endpoints have degree 1, so no further imbalance occurs there. In
both cases, delete E(H) and apply the induction hypothesis to complete the
orientation.
1.4.24. Not every graph has an orientation such that for every vertex subset,
the numbers of edges entering and leaving differ by at most one. Let G be a
graph with at least four vertices such that every vertex degree is odd. Let
D be an orientation of G. In D, no vertex of G has the same number of
vertices entering and leaving. Let S = {v ∈V : d+(v) > d−(v)}. Since each
edge within S contributes the same amount to P
v∈S d+(v) and P
v∈S d−(v),
there are P
v∈S d+(v)−P
v∈S d−(v) more edges leaving S than entering. The
difference is at least |S|. Similarly, for S the absolute difference is at least
S
, so always some set has difference at least n(G)/2.
1.4.25. Orientations and P3-decomposition. a) Every connected graph has
an orientation having at most one vertex with odd outdegree.
Proof 1 (local change). Given an orientation of G with vertices x and y
having odd outdegree, ﬁnd an x, y-path P in the underlying graph and ﬂip

73
Chapter 1: Fundamental Concepts
Section 1.4: Directed graphs
74
the orientation of every edge on P. This does not change the parity of the
outdegree for any internal vertex of P, but it changes the parity of the out-
degree for the endpoints, which previously had odd outdegree. Hence this
operation reduces the number of vertices of odd outdegree by 2. We can
apply this operation whenever at least two vertices have odd outdegree, so
we can reduce the number of vertices with odd outdegree to 0 or 1.
Proof 2 (application of Eulerian circuits). Suppose that G has 2k ver-
tices of odd degree. Add edges that pair these vertices to form an Eulerian
supergraph G′.
Follow an Eulerian circuit of G′, starting from u along
uv ∈E(G), producing an orientation of G as follows. Orient uv out from u;
now u has odd outdegree and all other vertices have even outdegree. Sub-
sequently, when the circuit traverses an edge xy ∈E(G), orient it so that
x has even outdegree among the edges oriented so far. At each stage, the
only vertex that can have odd outdegree among edges of G is the current
vertex. The orientation chosen for the edges not in E(G) is unimportant.
b) A simple connected graph with an even number of edges can be de-
composed into paths with two edges. Since the sum of the outdegrees is the
number of edges, the parity of the number of vertices with odd outdegree
is the same as the parity of the number of edges. Hence part (a) implies
that a connected graph with an even number of edges has an orientation
in which every vertex has even outdegree. At each vertex, pair up exiting
edges arbitrarily. Since G is simple, this decomposes G into copies of P3.
1.4.26. De Bruijn cycle for binary words of length 4, avoiding 0101 and
1010. Make a vertex for each of the 8 sequences of length 3 from the alpha-
bet S = {0, 1}. Put an edge from sequence a to sequence b, with label α ∈S,
if b is obtained from a by dropping the ﬁrst letter of a and appending α to
the end. Traveling this edge from a corresponds to having α in sequence
after a. We want our digraph to have 14 edges corresponding to the de-
sired 14 words, and we want an Eulerian circuit through them to generate
the cyclic arrangement of labels. The difference between this digraph and
the De Bruijn digraph in Application 1.4.25 is omitting the two edges join-
ing 010 and 101. The resulting digraph still has indegree = outdegree at
every vertex, so it is Eulerian. One arrangement of labels generated by an
Eulerian circuit is 00001001101111.
1.4.27. De Bruijn cycle for any alphabet and length. When A is an alphabet
of size k, there exists a cyclic arrangement of kl characters chosen from A
such that the kl strings of length l in the sequence are all distinct.
Idea: The indegree and outdegree is k at each vertex of the digraph
constructed in the matter analogous to that for k = 2. Thus the digraph
is Eulerian, and recording the edge labels along an Eulerian circuit yields
the desired sequence. Below we repeat the details.
Deﬁne a digraph Dk,l whose vertices are the (l −1)-tuples with ele-
ments in A. Place an edge from a to b if the last n −2 entries of a agree
with the ﬁrst n −2 entries of b. Label the edge with the last entry of b. For
each vertex a, there are k ways to append a element of A to lengthen its
name, and hence there are k edges leaving each vertex.
Similarly, there are k choices for a character deleted from the front of a
predecessor’s name to obtain name b, so each vertex has indegree k. Also,
we can reach b = (b1, . . . , bn−1) from any vertex by successively following
the edges labeled b1, . . . , bn−1. Since Dk,l is strongly connected and has in-
degree equal to outdegree at every vertex, the characterization of Eulerian
digraphs implies that Dk,l is Eulerian.
Let C be an Eulerian circuit of Dk,l. When we are at the vertex with
name a = (a1, . . . , an−1) while traversing C, the most recent edge had label
an−1, because the label on an edge entering a vertex agrees with the last
digit of the sequence at the vertex. Since we delete the front and shift
the rest to obtain the rest of the label at the head, the successive earlier
labels (looking backward) must have been an−2, . . . , a1 in order. If C next
traverses an edge with label an, then the subsequence consisting of the n
most recent edge labels at that time is a1, . . . , an.
Since the kl−1 vertex labels are distinct, and the edges leaving each
vertex have distinct labels, and we traverse each edge from each vertex
exactly once along C, the kl strings of length l in the circular arrangement
given by the edge labels along C are distinct.
1.4.28. De Bruijn cycle for length 4 without the constant words. Make a
vertex for each of the m3 sequences of length 3 from the alphabet S. Put
an edge from sequence a to sequence b, with label α ∈S, if b is obtained
from a by dropping the ﬁrst letter and appending α to the end. Since there
are m ways to append a letter, the out-degree of each vertex is m. For each
sequence, there are m possible letters that could have been deleted to reach
it, so the in-degree of each vertex is m.
Deleting the loops at the m constant vertices (aaa, bbb, etc.) reduces
the indegree and outdegree at those vertices by 1, so the resulting digraph
has equal indegree and outdegree at every vertex. Also the underlying
graph is connected, since vertex abc can be reach from any other vertex by
following the edge labeled a, then b, then c.
Thus an Eulerian circuit exists. Recording the edge labels while fol-
lowing an Eulerian circuit yields the desired arrangement.
The 4-digit
strings obtained are those formed by the 3-digit name of a vertex plus the
label on an exiting edge. These m4 −m strings are distinct and avoid the
constant words, since the loops were deleted from the digraph.
Alternative proof. If we know (from Exercise 1.4.27, for example) that

75
Chapter 1: Fundamental Concepts
Section 1.4: Directed graphs
76
there exists a De Bruijn cycle including the constant words, then we can
simply delete one letter from each string of four consecutive identical let-
ters, without using graph theory.
1.4.29. A strong orientation of a graph that has an odd cycle also has an
odd (directed) cycle. Suppose that D is a strong orientation of a graph G
that has an odd cycle v1, . . . , v2k+1. Since D is strongly connected, for each
i there is a vi, vi+1-path in D. If for some i every such path has even length,
then the edge between vi and vi+1 points from vi+1 to vi, since the other
orientation would be a vi, vi+1-path of length 1 (odd). In this case, we have
an odd cycle through vi and vi+1. Otherwise, we have a path of odd length
from each vi to vi+1. Combining these gives a closed trail of odd length.
In a digraph as well as in a graph (by the same proof), a closed odd trail
contains the edges of an odd cycle.
1.4.30. The maximum length of a shortest spanning closed walk in a
strongly-connected n-vertex digraph is

(n + 1)2/4

if n ≥3. For the lower
bound, let G consist of a u, v-path P of n −l vertices, plus l vertices with
edges from v and to u. When leaving a vertex not on P, P must be reached
and traversed before the next vertex off P. Hence G requires l(n −l + 1)
steps to walk through every vertex, maximized by setting l = ⌊(n + 1)/2⌋.
The length of the walk is then

(n + 1)2/4

.
For any strongly-connected n-vertex digraph G, we obtain a spanning
closed walk of length at most

(n + 1)2/4

. Let m be the maximum length
of a path in G; from each vertex to every other, there is a path of length at
most m. Begin with a path P of length m; this visits m + 1 vertices. Next
use paths to reach each of the remaining vertices in turn, followed by a
path returning to the beginning of P. In this closed walk, 1+(n −m −1)+1
paths have been followed, each of length at most m. The total length is at
most m(n + 1 −m), which is bounded by

(n + 1)2/4

.
1.4.31. The smallest nonisomorphic pair of tournaments with the same
score sequences have ﬁve vertices.
At least ﬁve vertices are needed. The score sequence (outdegrees) of an
n-vertex tournament can have only one 0 or n −1. Nonisomorphic tour-
naments with such a vertex must continue to be nonisomorphic when that
vertex is deleted. Hence a smallest nonisomorphic pair has no vertex with
score 0 or n −1. The only such score sequences with fewer than 5 vertices
are 111 and 2211. The ﬁrst is realized only by the 3-cycle. For 2211, name
the low-degree vertices as v1 and v2 such that v1 ←v2, and name the high-
degree vertices as v3 and v4 such that v3 ←v4. The only way to complete a
tournament with this score sequence is now N +(v1) = {v4}, N +(v2) = {v1},
N +(v3) = {v1, v2}, and N +(v4) = {v2, v3}.
Five vertices sufﬁce, by construction. On ﬁve vertices, the sequences to
consider are 33211, 32221, and 22222. There is only one isomorphic class
with score sequence 22222, but there are more for the other two sequences.
In fact, there are 3 nonisomorphic tournaments with score sequence 32221.
They may be characterized as follows: (1) the bottom player beats the top
player, and the three middle players induce a cyclic subtournament; (2) the
top player beats the bottom player, and the three middle players induce a
cyclic subtournament; (3) the top player beats the bottom player, and the
three middle players induce a transitive subtournament.
•
•
•
•
•
2
2
1
3
2
•
•
•
•
•
2
2
1
3
2
•
•
•
•
•
2
2
1
3
2
Five vertices sufﬁce, by counting. Each score sequence sums to 10 and
has maximum outdegree at most 4; also there is at most one 4 and at
most one 0. The possibilities are thus 43210, 43111, 42220, 42211, 33310,
33220, 33211, 32221, 22222. There are 210 tournaments on ﬁve vertices; we
show that they cannot ﬁt into nine isomorphism classes. The isomorphism
class consisting of a 5-cycle plus edges from each vertex to the vertex two
later along the cycle occurs 4! times; once for each cyclic ordering of the
vertices. Each of the other isomorphism classes occurs at most 5! times.
Hence the nine isomorphism classes contain at most 24 + 8 · 120 of the 210
tournaments. Since 1024 > 984, there must be at least 10 isomorphism
classes among the nine score sequences.
1.4.32. Characterization of bigraphic sequences. With p = p1, . . . , pm and
q = q1, . . . , qn, the pair (p, q) is bigraphic if there is a simple bipartite
graph in which p1, . . . , pm are the degrees for one partite set and q1, . . . , qn
are the degrees for the other.
If p has positive sum, then (p, q) is bigraphic if and only if (p′, q′)
is bigraphic, where (p′, q′) is obtained from (p, q) by deleting the largest
element 1 from p and subtracting 1 from each of the 1 largest elements of
q. We follow the method of Theorem 1.3.31. Sufﬁciency of the condition
follows by adding one vertex to a realization of the smaller pair.
For necessity, choose indices in a realization G so that p1 ≥· · · ≥pm,
q1 ≥· · · ≥qn, d(xi) = pi, and d(yj) = qj.
We produce a realization in
which x1 is adjacent to y1, . . . , yp1. If yj ↮x1 for some j ≤p1, then yk ↔
x1 for some k > p1. Since qj ≥qk, there exists xi with i > 1 such that
xi ∈N(yj) −N(yk). We perform the 2-switch to replace {x1yk, xi yj} with
{x1yj, xi yk}. This reduces the number of missing neighbors, so we can obtain
the desired realization. (Comment: the statement also holds when m = 1.)

77
Chapter 1: Fundamental Concepts
Section 1.4: Directed graphs
78
1.4.33. Bipartite 2-switch and 0,1-matrices with ﬁxed row and column
sums. With a simple X, Y-bigraph G, we associate a 0,1-matrix B(G) with
rows indexed by X and columns indexed by Y. The matrix has a 1 in po-
sition i, j if and only if xi ↔yj. Applying a 2-switch to G that exchanges
xy, x′y′ for xy′, x′y (preserving the bipartition) affects B(G) by interchang-
ing the 0’s and 1’s in the 2 by 2 permutation submatrix induced by rows x, x ′
and columns y, y′. Hence there is a sequence of 2-switches transforming G
to H without changing the bipartition if and only if there is a sequence of
switches on 2 by 2 permutation submatrices that transforms B(G) to B(H).
Furthermore, G and H have the same bipartition and same vertex de-
grees if and only if B(G) and B(H) have the same row sums and the same
column sums. Therefore, in the language of bipartite graphs the statement
about matrices becomes “all bipartite graphs with the same bipartition and
vertex degrees can be reached from each other using 2-switches preserv-
ing the bipartition.” We prove either statement by induction. We use the
phrasing of bipartite graphs.
Proof 1 (induction on m). If m = 1, then already G = H. For m > 1,
let G be an X, Y-bigraph.
Let x be a vertex of maximum degree in X,
with d(x) = k. Let S be a set of k vertices of highest degree in Y. Using
bipartition-preserving 2-switches, we transform G so that N(x) = S. If
N(x) ̸= S, we choose y ∈S and y′ ∈Y −S so that x ↮y and x ↔y′. Since
d(y) ≥d(y′), we have x′ ∈X so that y ↔x′ and y′ ↮x′. Switching xy′, x′y
for xy, x′y′ increases |N(x)∩S|. Iterating this reaches N(x) = S. We can do
the same thing in H to reach graphs G′ from G and H ′ from H such that
NG′(x) = NH ′(x). Now we can delete x and apply the induction hypothesis
to the graphs G∗= G′ −x and H ∗= H ′ −x to complete the construction of
the desired sequence of 2-switches.
Proof 2 (induction on number of discrepancies). Let F be the bipartite
graph with the same bipartition as G and H consisting of edges belonging
to exactly one of G and H. Let d = e(F). Orient F by directing each edge of
G −E(H) from X to Y and each edge of H −e(G) from Y to X. Since G, H
have identical vertex degrees, in-degree equals outdegree at each vertex
of F. If d > 0, this implies that F contains a cycle. There is a 2-switch
in G that introduces two edges of E(G) −E(H) and reduces d by 4 if and
only if F has a 4-cycle. Otherwise, Let C be a shortest cycle in F, and
let x, y, x′, y′ be consecutive vertices on C. We have xy ∈E(G) −E(H),
x′y ∈E(H) −E(G), and x′y′ ∈E(G) −E(H). We also have xy′ /∈E(G), else
we could replace these three edges of C by xy′ to obtain a shorter cycle in F.
We can now perform the 2-switch in G that replaces xy, x ′y′ with xy′, x′y.
This reduces d by at least 2.
1.4.34. If G and H are two tournaments on a vertex set V , then d+
G (v) =
d+
H(v) for all v ∈V if and only if G can be turned into H by a sequence of
direction-reversals on cycles of length 3. Reversal of a 3-cycle changes no
outdegree, so the condition is sufﬁcient.
For necessity, let F be the subgraph of G consisting of edges oriented
the opposite way in H. Since d+
G (v) = d+
H(v) and d−
G (v) = d−
H(v) for all v,
every vertex has the same indegree and outdegree in F. Let x be a vertex
of maximum degree in F, and let S = N +
F (x) and T = N −
F (x).
An edge from S to T in G completes a 3-cycle with x whose reversal in
G reduces the number of pairs on which G and H disagree. An edge from
T to S in H completes a 3-cycle with x whose reversal in H reduces the
number of disagreements. If neither of these possibilities occurs, then G
orients every edge of S × T from T to S, and H orients every such edge from
S to T . Also F has edges from T to x. This gives every vertex of T higher
outdegree than x in F, contradicting the choice of x.
1.4.35. p1 ≤· · · ≤pn is the sequence of outdegrees of a tournament if and
only if Pk
i=1 pi ≥
 k
2

and Pn
i=1 pi =
 n
2

. Necessity. A tournament has
 n
2

edges in total, and any k vertices have out-degree-sum at least
 k
2

within
the subtournament they induce.
Sufﬁciency.
Given a sequence p satisfying the conditions, let qk =
Pk
i=1 pk and ek = qk −
 k
2

. We prove sufﬁciency by induction on P ek. The
only sequence p with P ek = 0 is 0, 1, . . . , n −1; this is realized by the
transitive tournament Tn having vk →vj if and only if k > j. If P ek > 0,
let r be the least k with ek > 0, and let s be the least index above r with
ek = 0, which exists since en = 0. We have qs−1 >
 s−1
2

, qs =
 s
2

, and
qs+1 ≥
 s+1
2

. This yields ps+1 ≥s and ps < s −1, or ps+1 −ps ≥2. Similarly,
if r = 1 we have p1 ≥1, and if r > 1 we have pr −pr−1 ≥2.
Hence we can subtract one from pr and add one to ps to obtain a new
sequence p′ that is non-decreasing, satisﬁes the conditions, and reduces
P ek by s −r. By the induction hypothesis, there is a tournament with
score sequence p′. If vs →vr in this tournament, we can reverse this edge
to obtain the score sequence p. If not, then the fact that p′
s ≥p′
r implies
there is another vertex u such that vs →u and u →vr; obtain the desired
tournament by reversing these two edges.
1.4.36. Let T be a tournament having no vertex with indegree 0.
a) If x is a king in T , then T has another king in N −(x). The subdigraph
induced by the vertices of N −(x) is also a tournament; call it T ′. Since every
tournament has a king, T ′ has a king. Let y be a king in T ′. Since x is a
successor of y and every vertex of N +(x) is a successor of x, every vertex of
V (T ) −V (T ′) is reachable from y by a path in T of length at most T . Hence
y is also a king in the original tournament T .
b) T has at least three kings. Since T is a tournament, it has some

79
Chapter 1: Fundamental Concepts
Section 1.4: Directed graphs
80
king, x. By part (a), T has another king y in N −(x). By part (a) again, T
has another king z in N −(y). Since y →x, we have x /∈N −(y), and hence
z ̸= x. Thus x, y, z are three distinct kings in T .
c) For n ≥3, an n-vertex tournament T with no source and only three
kings. Let S = {x, y, z} be a set of three vertices in V (T ). Let the subtour-
nament on S be a 3-cycle. For all edges joining S and V (T ) −S, let the
endpoint in S be the tail. Place any tournament on V (T ) −S. Now x, y, z
are kings, but no vertex outside S is a king, because no edge enters S.
1.4.37. Algorithm to ﬁnd a king in a tournament T : Select x ∈V (T ). If x
has indegree 0, call it a king and stop. Otherwise, delete {x} ∪N +(x) from
T to form T ′, and call the output from T ′ a king in T . We prove the claims
by induction on the number of vertices. The algorithm terminates, because
it either stops by selecting a source (indegree 0) or moves to a smaller
tournament.
By the induction hypothesis, it terminates on the smaller
tournament. Thus in each case it terminates and declares a king.
We prove by induction on the number of vertices that the vertex de-
clared a king is a king. When there is only one vertex, it is a king. Suppose
that n(T ) > 1. If the initial vertex x is declared a king immediately, then
it has outdegree n −1 and is a king. Otherwise, the algorithm deletes x
and its successors and runs on the tournament T ′ induced by the set of
predecessors (in-neighbors) of x.
By the induction hypothesis, the vertex z that the algorithm selects as
king in T ′ is a king in T ′, reaching each vertex of T ′ in at most two steps.
It sufﬁces to show that z is also a king in the full tournament. Since T ′
contains only predecessors of x, z →x. Also, z reaches all successors of x in
two steps through x. Thus z also reaches all discarded vertices in at most
two steps and is a king in T .
1.4.38. Tournaments with all players kings. a) If n is odd, then there is an
tournament with n vertices such that every player is a king.
Proof 1 (explicit construction). Place the players around a circle. Let
each player defeat the (n −1)/2 players closest to it in the clockwise direc-
tion, and lose to the (n −1)/2 players closest to it in the counterclockwise
direction. Since every pair of players is separated by fewer players around
one side of the circle than the other, this gives a well-deﬁned orientation
to each edge. All players have exactly (n −1)/2 wins. Thus every outde-
gree is the maximum outdegree, and we have proved that every vertex of
maximum outdegree in a tournament is a king. It is also easy to construct
explicit paths. Each player beats the next (n −1)/2 players. The remain-
ing (n −1)/2 players all lose to the last of these ﬁrst (n −1)/2 players. The
construction is illustrated below for ﬁve players.
•
•
•
•
•
Proof 2 (induction on n). For n = 3, every vertex in the 3-cycle is a
king. For n ≥3, given a tournament on vertex set S of size n in which every
vertex is a king, we add two new vertices x, y. We orient S →x →y →S.
Every vertex of S reaches x in one step and y in two; x reaches y in one
step and each vertex of S in two. Every vertex is a king. (The resulting
tournaments are not regular.) Note: Since there is no such tournament
when n = 4, one must also give an explicit construction for n = 6 to include
in the basis. The next proof avoids this necessity.
Proof 3 (induction on n). For n = 3, we have the cyclic tournament.
For n = 5, we have the cyclically symmetric tournament in which each
vertex beats the two vertices that follow it on the circle. For n > 5, let T be
an (n−1)-vertex tournament in which every vertex is a king, as guaranteed
by the induction hypothesis. Add a new vertex x.
If n is odd, then partition V (T ) into pairs. For each pair, let a and b be
the tail and head of the edge joining them, and add the edges xa and bx.
If n is even, then among any four vertices of V (T ) we can ﬁnd a triple
{u, v, w} that induces a non-cyclic tournament. Pick one such triple, and
partition the remaining vertices of V (T ) into pairs. Treat the edges joining
x to these pairs as in the other case. Letting u be the vertex of the special
triple with edges to the two other vertices, add edges xu, vx, and wx.
b) There is no tournament with four players in which every player is a
king. Suppose G is such a tournament. A player with no wins cannot be
a king. If some vertex has no losses, then no other vertex can be a king.
Hence every player of G has 1 or 2 wins. Since the total wins must equal
the total losses, there must be two players with 1 win and two players with
2 wins. Suppose x, y are the players with 1 win; by symmetry, suppose x
beats y. Since x has no other win and y has exactly one win, the fourth
player is not reached in two steps from x, and x is not a king.
1.4.39. Every loopless digraph D has a vertex subset S such that D[S] has
no edges but every vertex is reachable from S by a path of length at most 2.
Proof 1 (induction). The claim holds when n(D) = 1 and when there
is a vertex with edges to all others. Otherwise, consider an arbitrary vertex
x, and let D′ = D −x −N +(x). Let S′ be the subset of V (D′) guaranteed by
the induction hypothesis. Observe that S′ ∩N +(x) = ∅. If yx ∈E(D) for

81
Chapter 1: Fundamental Concepts
Section 1.4: Directed graphs
82
some y ∈S′, then x ∪N +(x) is reachable from y within two steps, and S′ is
the desired set S. Otherwise, the set S = S′ ∪{x} works.
Proof 2 (construction). Index the vertices as v1, . . . , vn. Process the list
in increasing order; when a vertex vi is reached that has not been deleted,
delete all successors of vi with higher indices. Next process the list in de-
creasing order; when a vertex vi is reached that has not been deleted (in
either pass), delete all successors of vi with lower indices.
The set S of vertices that are not deleted in either pass is independent.
Every vertex deleted in the second pass has a predecessor in S.
Every
vertex deleted in the ﬁrst pass can be reached from S directly or from a
vertex deleted in the second pass, giving it a path of length at most two
from S. Hence S has the desired properties.
Proof 3 (kernels). By looking at the reverse digraph, it sufﬁces to
show that every loopless digraph D has an independent set S that can be
reached by a path of length at most 2 from each vertex outside S. Given
a vertex ordering v1, . . . , vn, decompose D into two acyclic spanning sub-
graphs G and H consisting of the edges that are forward and backwards in
the ordering, respectively. All subgraphs of G and H are acyclic, and hence
by Theorem 1.4.16 they have kernels. Let S be a kernel of the subgraph of
G induced by a kernel T of H. Every vertex not in T has a successor in T ,
and every vertex in T −S has a successor in S, so every vertex not in S has
a path of length at most 2 to S. (Comment: The set S produced in this way
is the same set produced in the reverse digraph by Proof 2. This proof is
attributed to S. Thomasse on p. 163 of J. A. Bondy, Short proofs of classical
theorems, J. Graph Theory 44 (2003), 159–165.)
1.4.40. The largest unipathic subgraphs of the transitive tournament have

n2/4

edges. If a subgraph of Tn contains all three edges of any 3-vertex
induced subtournament, then it contains two paths from the least-indexed
of these vertices to the highest. Hence a unipathic subgraph must have as
its underlying graph a triangle-free subgraph of Kn. By Mantel’s Theorem,
the maximum number of edges in such a subgraph is

n2/4

, achieved only
by the complete equibipartite graph.
This leaves the problem of ﬁnding unipathic orientations of K⌊n/2⌋,⌈n/2⌉
in Tn. Suppose G is such a subgraph, with partite sets X, Y. If there are
four vertices, say i < j < k < l, that alternate from the two partite sets
of G or have i,l in one set and j, k in the other, then the oriented bipartite
subgraph induced by X, Y as partite sets has two i,l-paths. Hence when
n ≥4 all the vertices of X must precede all the vertices of Y, or vice versa.
To obtain K⌊n/2⌋,⌈n/2⌉, we will have all edges i j such that i ≤⌊n/2⌋and
j > ⌊n/2⌋, or all edges such that i ≤⌈n/2⌉and j > ⌈n/2⌉. Hence for n ≥4
there are two extremal subgraphs when n is odd and only one when n is
even. (There is only one when n = 1, and there are three when n = 3.)
1.4.41. Given any listing of the vertices of a tournament, every sequence of
switchings of consecutive vertices that induce a reverse edge leads to a list
with no reverse edges in at most
 n
2

steps. Under this algorithm, each switch
changes the order of only one pair. Furthermore, the order of two elements
in the list can change only when they are consecutive and induce a reverse
edge. Hence each pair is interchanged at most once, and the algorithm
terminates after at most
 n
2

steps with a spanning path.
1.4.42. Every ordering of the vertices of a tournament that minimizes the
sum of lengths of the feedback edges puts the vertices in nonincreasing order
of outdegree. For the ordering v1, . . . , vn, the sum is the sum of j −i over
edges vjvi such that j > i. Consider the interchange of vi and vi+1. If some
vertex is a successor of both or predecessor of both, then the contribution
to the sum from the edges involving it remains unchanged. If x ∈N +(vi) −
N +(vi+1), then the switch increases the contribution from these edges by 1.
If x ∈N +(vi+1) −N +(vi), then the switch decreases the contribution from
these edges by 1. If vi →vi+1, then the switch increases the cost by 1,
otherwise it decreases. Hence the net change in the sum of the lengths of
feedback edges is d+(vi) −d+(vi+1).
This implies that if the ordering has any vertex followed by a vertex
with larger outdegree, then the sum can be decreased. Hence minimizing
the sum puts the vertices in nonincreasing order of outdegree. Further-
more, permuting the vertices of a given outdegree among themselves does
not change the sum of the lengths of feedback edges, so every ordering in
nonincreasing order of outdegree minimizes the sum.

83
Chapter 2: Trees and Distance
Section 2.1: Basic Properties
84
2.TREES AND DISTANCE
2.1. BASIC PROPERTIES
2.1.1. Trees with at most 6 vertices having speciﬁed maximum degree or
diameter. For maximum degree k, we start with the star K1,k and append
leaves to obtain the desired number of vertices without creating a vertex
of larger degree. For diameter k, we start with the path Pk+1 and append
leaves to obtain the desired number of vertices without creating a longer
path. Below we list all the resulting isomorphism classes.
For k = 0, the only tree is K1, and for k = 1, the only tree is K2 (diame-
ter or maximum degree k). For larger k, we list the trees in the tables. Let
Ti, j denote the tree with i + j vertices obtained by starting with one edge
and appending i −1 leaves to one endpoint and j −1 leaves at the other
endpoint (note that T1,k = K1,k for k ≥1). Let Q be the 6-vertex tree with
diameter 4 obtained by growing a leaf from a neighbor of a leaf in P5. Let
n denote the number of vertices.
maximum degree k
diameter k
k
2
3
4
5
n
3
P3
4
P4
K1,3
5
P5
T2,3
K1,4
6
P6
T3,3, Q
T2,4
K1,5
k
2
3
4
5
n
3
P3
4
K1,3
P4
5
K1,4
T2,3
P5
6
K1,5
T2,4, T3,3
Q
P6
2.1.2. Characterization of trees.
a) A graph is tree if and only if it is connected and every edge is a cut-
edge. An edge e is a cut-edge if and only if e belongs to no cycle, so there
are no cycles if and only if every edge is a cut-edge. (To review, edge e = uv
is a cut edge if and only if G −e has no u, v-path, which is true if and only
if G has no cycle containing e.)
b) A graph is a tree if and only if for all x, y ∈V (G), adding a copy
of xy as an edge creates exactly one cycle. The number of cycles in G + uv
containing the new (copy of) edge uv equals the number of u, v-paths in G,
and a graph is a tree if and only if for each pair u, v there is exactly one
u, v-path. Note that the speciﬁed condition must also hold for addition of
extra copies of edges already present; this excludes cliques.
2.1.3. A graph is a tree if and only if it is loopless and has exactly one
spanning tree. If G is a tree, then G is loopless, since G is acyclic. Also, G is
a spanning tree of G. If G contains another spanning tree, then G contains
another edge not in G, which is impossible.
Let G be loopless and have exactly one spanning tree T . If G has a
edge e not in T , then T + e contains exactly one cycle, because T is a tree.
Let f be another edge in this cycle. Then T + e −f contains no cycle. Also
T +e−f is connected, because deleting an edge of a cycle cannot disconnect
a graph. Hence T + e −f is a tree different from T . Since G contains no
such tree, G cannot contain an edge not in T , and G is the tree T .
2.1.4. Every graph with fewer edges than vertices has a component that is
a tree—TRUE. Since the number of vertices or edges in a graph is the sum
of the number in each component, a graph with fewer edges than vertices
must have a component with fewer edges than vertices. By the properties
of trees, such a component must be a tree.
2.1.5. A maximal acyclic subgraph of a graph G consists of a spanning tree
from each component of G. We show that if H is a component of G and
F is a maximal forest in G, then F ∩H is a spanning tree of H. We may
assume that F contains all vertices of G; if not, throw the missing ones in
as isolated points to enlarge the forest. Note that F ∩H contains no cycles,
since F contains no cycles and F ∩H is a subgraph of F.
We need only show that F ∩H is a connected subgraph of H. If not,
then it has more than one component. Since F is spanning and H is con-
nected, H contains an edge between two of these components. Add this
edge to F and F ∩H. It cannot create a cycle, since F previously did not
contain a path between its endpoints. We have made F into a larger for-
est (more edges), which contradicts the assumption that it was maximal.
(Note: the subgraph consisting of all vertices and no edges of G is a span-
ning subgraph of G; spanning means only that all the vertices appear, and
says nothing about connectedness.
2.1.6. Every tree with average degree a has 2/(2 −a) vertices. Let the tree
have n vertices and m edges. The average degree is the degree sum divided
by n, the degree sum is twice m, and m is n −1.
Thus a = P di/n =
2(n −1)/n. Solving for n yields n = 2/(2 −a).
2.1.7. Every n-vertex graph with m edges has at least m −n +1 cycles. Let k
be the number of components in such a graph G. Choosing a spanning tree

85
Chapter 2: Trees and Distance
Section 2.1: Basic Properties
86
from each component uses n −k edges. Each of the remaining m −n + k
edges completes a cycle with edges in this spanning forest. Each such cycle
has one edge not in the forest, so these cycles are distinct. Since k ≥1, we
have found at least m −n + 1 cycles.
2.1.8. Characterization of simple graphs that are forests.
a) A simple graph is a forest if and only if every induced subgraph has
a vertex of degree at most 1. If G is a forest and H is an induced subgraph of
G, then H is also a forest, since cycles cannot be created by deleting edges.
Every component of H is a tree, which is an isolated vertex or has a leaf (a
vertex of degree 1). If G is not a forest, then G contains a cycle. A shortest
cycle in G has no chord, since that would yield a shorter cycle, and hence a
shortest cycle is an induced subgraph. This induced subgraph is 2-regular
and has no vertex of degree at most 1.
b) A simple graph is a forest if and only if every connected subgraph
is an induced subgraph. If G has a connected subgraph H that is not an
induced subgraph, then G has an edge xy not in H with endpoints in V (H).
Since H contains an x, y-path, H +xy contains a cycle, and G is not a forest.
Conversely, if G is not a forest, then G has a cycle C, and every subgraph
of G obtained by deleting one edge from C is connected but not induced.
c) The number of components is the number of vertices minus the num-
ber of edges. In a forest, each component is a tree and has one less edge than
vertex. Hence a forest with n vertices and k components has n −k edges.
Conversely, every component with ni vertices has at least ni −1 edges,
since it is connected. Hence the number of edges in an n-vertex is n minus
the number of components only if every component with ni vertices has
ni −1 edges. Hence every component is a tree, and the graph is a forest.
2.1.9. For 2 ≤k ≤n −1, the n-vertex graph formed by adding one vertex
adjacent to every vertex of Pn−1 has a spanning tree with diameter k. Let
v1, . . . , vn−1 be the vertices of the path in order, and let x be the vertex ad-
jacent to all of them. The spanning tree consisting of the path v1, . . . , vk−1
and the edges xvk−1, . . . , xvn−1 has diameter k.
2.1.10. If u and v are vertices in a connected n-vertex simple graph, and
d(u, v) > 2, then d(u) + d(v) ≤n + 1 −d(u, v). Since d(u, v) > 2, we have
N(u) ∩N(v) = ∅, and hence d(u) + d(v) = |N(u) ∪N(v)|. Let k = d(u, v).
Between u and v on a shortest u, v-path are vertices x1, . . . , xk−1. Since this
is a shortest u, v-path, vertices u, v and x2, . . . , xk−2 are forbidden from the
neighborhoods of both u and v. Hence |N(u) ∪N(v)| ≤n + 1 −k.
The inequality fails when d(u, v) ≤2, because in this case u and v can
have many common neighbors. When d(u, v) = 2, the sum d(u) + d(v) can
be as high as 2n −4.
2.1.11.
If x and y are adjacent vertices in a graph G, then always
|dG(x, z) −dG(y, z)| ≤1. A z, y-path can be extended (or trimmed) to reach
x, and hence d(z, x) ≤d(z, y) + 1. Similarly, d(z, y) ≤d(z, x) + 1. Together,
these yield |d(z, x) −d(z, y)| ≤1.
2.1.12. Diameter and radius of Km,n. Every vertex has eccentricity 2 in
Km,n if m, n ≥2, which yields radius and diameter 2. For K1,n, the radius
is 1 and diameter is 2 if n > 1. The radius and diameter of K1,1 are 1. The
radius and diameter of K0,n are inﬁnite if n > 1, and both are 0 for K0,1.
2.1.13. Every graph with diameter d has an independent set of size at least
⌈(1 + d)/2⌉. Let x, y be vertices with d(x, y) = d. Vertices that are non-
consecutive on a shortest x, y-path P are nonadjacent. Taking x and every
second vertex along P produces an independent set of size ⌈(1 + d)/2⌉.
2.1.14. Starting a shortest path in the hypercube. The distance between
vertices in a hypercube is the number of positions in which their names
differ. From u, a shortest u, v-path starts along any edge to a neighbor
whose name differ from u in a coordinate where v also differs from u.
2.1.15. The complement of a simple graph with diameter at least 4 has
diameter at most 2. The contrapositive of the statement is that if G has
diameter at least 3, then G has diameter at most 3. Since G = G, this
statement has been proved in the text.
2.1.16. The “square” of a connected graph G has diameter ⌈diam (G)/2⌉.
The square is the simple graph G′ with x ↔y in G′ if and only if dG(x, y) ≤
2. We prove the stronger result that dG′(x, y) = ⌈dG(x, y)/2⌉for every x, y ∈
V (G). Given an x, y-path P of length k, we can skip the odd vertices along
P to obtain an x, y-path of length ⌈k/2⌉in G′.
On the other hand, every x, y-path of length l in G′ arises from a
path of length at most 2l in G. Hence the shortest x, y-path in G′ comes
from the shortest x, y-path in G by the method described, and dG′(x, y) =
⌈dG(x, y)/2⌉. Hence
diam (G′) = minx,y dG′(x, y) = minx,y
l
dG(x,y)
2
m
=
l
minx,y
dG(x,y)
2
m
=
l
diam (G)
2
m
.
2.1.17. If an n-vertex graph G has n −1 edges and no cycles, then it is
connected. Let k be the number of components of G. If k > 1, then we
adding an edge with endpoints in two components creates no cycles and
reduces the number of components by 1. Doing this k −1 times creates a
graph with (n −1)+(k −1) edges that is connected and has no cycles. Such
a graph is a tree and has n −1 edges. Therefore, k = 1, and the original
graph G was connected.

87
Chapter 2: Trees and Distance
Section 2.1: Basic Properties
88
2.1.18. If G is a tree, then G has at least 1(G) leaves. Let k = 1(G). Given
n > k ≥2, we cannot guarantee more leaves, as shown by growing a path
of length n −k −1 from a leaf of K1,k.
Proof 1a (maximal paths). Deleting a vertex x of degree k produces a
forest of k subtrees, and x has one neighbor wi in the ith subtree Gi. Let
Pi be a maximal path starting at x along the edge xwi. The other end of Pi
must be a leaf of G and must belong to Gi, so these k leaves are distinct.
Proof 1b (leaves in subtrees). Deleting a vertex x of degree k produces
a forest of k subtrees. Each subtree is a single vertex, in which case the
vertex is a leaf of G, or it has at least two leaves, of which at least one is
not a neighbor of x. In either case we obtain a leaf of the original tree in
each subtree.
Proof 2 (counting two ways). Count the degree sum by edges and by
vertices. By edges, it is 2n −2. Let k be the maximum degree and l the
number of leaves. The remaining vertices must have degree at least two
each, so the degree sum when counted by vertices is at least k + 2(n −l −
1) +l. The inequality 2n −2 ≥k + 2(n −l −1) + 1 simpliﬁes to l ≥k. (Note:
Similarly, degree 2(n −1) −k remains for the vertices other than a vertex
of maximum degree. Since all degrees are 1 or at least 2, there must be at
least k vertices of degree 1.)
Proof 3: Induction on the number of vertices. For n ≤3, this follows
by inspecting the unique tree on n vertices. For n > 3, delete a leaf u. If
1(T −u) = 1(T ), then by the induction hypothesis T −u has at least k
leaves. Replacing u adds a leaf while losing at most one leaf from T −u.
Otherwise 1(T −u) = 1(T ) −1, which happens only if the neighbor of u
is the only vertex of maximum degree in T . Now the induction hypothesis
yields at least k −1 leaves in T −u. Replacing u adds another, since the
vertex of maximum degree in T cannot be a leaf in T −u (this is the reason
for putting n = 3 in the basis step).
2.1.19. If ni denotes the number of vertices of degree i in a tree T , then P ini
depends only on the number of vertices in T . Since each vertex of degree
i contributes i to the sum, the sum is the degree-sum, which equals twice
the number of edges: 2n(T ) −2.
2.1.20. Hydrocarbon formulas Ck Hl. The global method is the simplest
one. With cycles forbidden, there are k + l −1 “bonds” - i.e., edges. Twice
this must equal the degree sum. Hence 2(k + l −1) = 4k + l, or l = 2k + 2.
Alternatively, (sigh), proof by induction. Basis step (k = 1): The for-
mula holds for the only example. Induction step (k > 1): In the graph of
the molecule, each H has degree 1. Deleting these vertices destroys no cy-
cles, so the subgraph induced by the C-vertices is also a tree. Pick a leaf
x in this tree. In the molecule it neighbors one C and three Hs. Replac-
ing x and these three Hs by a single H yields a molecule with one less C
that also satisﬁes the conditions. Applying the induction hypothesis yields
l = [2(k −1) + 2] −1 + 3 = 2k + 2.
2.1.21. If a simple n-vertex graph G has a decomposition into k spanning
trees, and 1(G) = δ(G) + 1, then 2k < n, and G has n −2k vertices of degree
2k and 2k vertices of degree 2k −1. Since every spanning tree of G has n −1
edges, we have e(G) = k(n −1). Since e(G) ≤n(n −1)/2 edges, this yields
k ≤n/2. Equality requires G = Kn, but 1(Kn) = δ(Kn). Thus 2k < n.
To determine the degree sequence, let l be the number of vertices of
degree δ(G). By the degree-sum formula, n1(G) −l = 2kn −2k. Both sides
are between two multiples of n. Since 0 < 2k < n and 0 < l < n, the higher
multiple of n is n1(G) = 2kn, so 1(G) = 2k. It then also follows that l = 2k.
Hence there are n−2k vertices of degree 2k and 2k vertices of degree 2k −1.
2.1.22. A tree with degree list k, k −1, . . . , 2, 1, 1, . . . , 1 has 2 +
 k
2

vertices.
Since the tree has n vertices and k −1 non-leaves, it has n −k + 1 leaves.
Since Pk
i=1 i = k(k +1)/2, the degrees of the vertices sum to k(k +1)/2+n −
k. The degree-sum is twice the number of edges, and the number of edges
is n −1. Thus k(k + 1)/2 + n −k = 2n −2. Solving for n yields n = 2 +
 k
2

.
2.1.23. For a tree T with vertex degrees in {1, k}, the possible values of n(T )
are the positive integers that are 2 more than a multiple of k −1.
Proof 1 (degree-sum formula).
Let m be the number of vertices of
degree k. By the degree-sum formula, mk + (n(T ) −m) = 2n(T ) −2, since T
has n(T ) −1 edges. The equation simpliﬁes to n(T ) = m(k −1) + 2. Since
m is a nonnegative integer, n(T ) must be two more than a multiple of k −1.
Whenever n = m(k −1) + 2, there is such a tree (not unique for m ≥4).
Such a tree is constructed by adjoining k −2 leaves to each internal vertex
of a path of length m + 1, as illustrated below for m = 4 and k = 5.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
Proof 2 (induction on m, the number of vertices of degree k). We proof
that if T has m vertices of degree k, then n(T ) = m(k −1) + 2 If m = 0, then
the tree must have two vertices.
For the induction step, suppose that m > 0. For a tree T with m ver-
tices of degree k and the rest of degree 1, let T ′ be the tree obtained by
deleting all the leaves. The tree T ′ is a tree whose vertices all have de-
gree k in T . Let x be a leaf of T ′. In T , x is adjacent to one non-leaf and to
k −1 leaves. Deleting the leaf neighbors of x leaves a tree T ′′ with m −1
vertices of degree k and the rest of degree 1. By the induction hypothesis,

89
Chapter 2: Trees and Distance
Section 2.1: Basic Properties
90
n(T ′′) = (m −1)(k −1) + 2. Since we deleted k −1 vertices from T to obtain
T ′′, we obtain n(T ) = m(k −1) + 2. This completes the induction step.
To prove inductively that all such values arise as the number of ver-
tices in such a tree, we start with K2 and iteratively expand a leaf into a
vertex of degree k to add k −1 vertices.
2.1.24. Every nontrivial tree has at least two maximal independent sets,
with equality only for stars. A nontrivial tree has an edge. Each vertex
of an edge can be augmented to a maximal independent set, and these
must be different, since each contains only one vertex of the edge. A star
has exactly two maximal independent sets; the set containing the center
cannot be enlarged, and the only maximal independent set not containing
the center contains all the other vertices. If a tree is not a star, then it
contains a path a, b, c, d. No two of the three independent sets {a, c}, {b, d},
{a, d} can appear in a single independent set, so maximal independent sets
containing these three must be distinct.
2.1.25. Among trees with n vertices, the star has the most independent sets
(and is the only tree with this many).
Proof 1 (induction on n). For n = 1, there is only one tree, the star.
For n > 1, consider a tree T . Let x be a leaf, and let y be its neighbor. The
independent sets in T consist of the independent sets in T −x and all sets
formed by adding x to an independent set in T −x −y. By the induction
hypothesis, the ﬁrst type is maximized (only) when T −x is a star. The
second type contributes at most 2n−2 sets, and this is achieved only when
T −x −y has no edges, which requires that T −x is a star with center at y.
Thus both contributions are maximized when (and only when) T is a star
with center y.
Proof 2 (counting). If an n-vertex tree T is not a star, then it contains
a copy H of P4. Of the 16 vertex subsets of V (H), half are independent
and half are not. If S is an independent set in T , then S ∩V (H) is also
independent.
When we group the subsets of V (T ) by their intersection
with V (T ) −V (H), we thus ﬁnd that at most half the sets in each group
are independent. Summing over all groups, we ﬁnd that at most half of
all subsets of V (T ), or 2n−1, are independent. However, the star K1,n−1 has
2n−1 + 1 independent sets.
2.1.26. For n ≥3, if G is an n-vertex graph such that every graph obtained
by deleting one vertex of G is a tree, then G = Cn. Let Gi be the graph
obtained by deleting vertex vi. Since Gi has n −1 vertices and is a tree,
e(Gi) = n −2. Thus Pn
i=1 e(Gi) = n(n −2). Since each edge has two end-
points, each edge of G appears in n −2 of these graphs and thus is counted
n −2 times in the sum. Thus e(G) = n.
Since G has n vertices and n edges, G must contain a cycle. Since Gi
has no cycle, every cycle in G must contain vi. Since this is true for all i,
every cycle in G must contain every vertex. Thus G has a spanning cycle,
and since G has n edges it has no additional edges, so G = Cn.
2.1.27. If n ≥2 and d1, . . . , dn are positive integers, then there exists a tree
with these as its vertex degrees if and only if dn = 1 and P di = 2(n −1).
(Some graphs with such degree lists are not trees.) Necessity: Every n-
vertex tree is connected and has n −1 edges, so every vertex has degree at
least 1 (when n ≥2) and the total degree sum is 2(n −1). Sufﬁciency: We
give several proofs.
Proof 1 (induction on n). Basis step (n = 2): The only such list is
(1, 1), which is the degree list of the only tree on two vertices. Induction
step (n > 2): Consider d1, . . . , dn satisfying the conditions. Since P di > n,
some element exceeds 1.
Since P di < 2n, some element is at most 1.
Let d′ be the list obtain by subtracting 1 from the largest element of d
and deleting an element that equals 1. The total is now 2(n −2), and all
elements are positive, so by the induction hypothesis there is a tree on n−1
vertices with d′ as its vertex degrees. Adding a new vertex and an edge
from it to the vertex whose degree is the value that was reduced by 1 yields
a tree with the desired vertex degrees.
Proof 2 (explicit construction). Let k be the number of 1s in the list d.
Since the total degree is 2n −2 and all elements are positive, k ≥2. Create
a path x, u1, . . . , un−k, y. For 1 ≤i ≤n −k, attach di −2 vertices of degree 1
to ui. The resulting graph is a tree (not the only one with this degree list),
and it gives the proper degree to ui. We need only check that we have the
desired number of leaves. Counting x and y and indexing the list so that
d1, . . . , dn ≥, we compute the number of leaves as
2 +
n−k
X
i=1
(di −2) = 2 −2(n −k) +
n
X
i=1
di −
n
X
i=n−k+1
di = 2 −2(n −k) + 2(n −1) −k = k.
Proof 3 (extremality). Because P di = 2(n −1), which is even, there
is a graph with n vertices and n −1 edges that realizes d. Among such
graphs, let G (having k components) be one with the fewest components. If
k = 1, then G is a connected graph with n −1 edges and is the desired tree.
If k > 1 and G is a forest, then G has n −k edges. Therefore, G has a
cycle. Let H be a component of G having a cycle, and let uv be an edge of
the cycle. Let H ′ be another component of G. Because each di is positive,
H ′ has an edge, xy. Replace the edges uv and xy by ux and vy (either uv
or xy could be a loop.) Because uv was in a cycle, the subgraph induced by
V (H) is still connected. The deletion of vy might disconnect H ′, but each
piece is now connected to V (H), so the new graph G′ realizes d with fewer
components than G, contradicting the choice of G.

91
Chapter 2: Trees and Distance
Section 2.1: Basic Properties
92
2.1.28. The nonnegative integers d1 ≥· · · ≥dn are the degree sequence of
some connected graph if and only if P di is even, dn ≥1, and P di ≥2n −2.
This claim does not hold for simple graphs because the conditions P di
even, dn ≥1, and P di ≥2n −2 do not prevent d1 ≥n, which is impossible
for a simple graph. Hence we allow loops and multiple edges. Necessity fol-
lows because every graph has even degree sum and every connected graph
has a spanning tree with n−1 edges. For sufﬁciency, we give several proofs.
Proof 1 (extremality). Since P di is even, there is a graph with de-
grees d1, . . . , dn.
Consider a realization G with the fewest components;
since P di ≥2n −2, G has at least n −1 edges. If G has more than one
component, then some component as many edges as vertices and thus has
a cycle.
A 2-switch involving an edge on this cycle and an edge in an-
other component reduces the number of components without changing the
degrees. The choice of G thus implies that G has only one component.
Proof 2 (induction on n). For n = 1, we use loops. For n = 2, if d1 = d2,
then we use d1 parallel edges. Otherwise, we have n > 2 or d1 > d2. Form
a new list d′
1, . . . , d′
n−1 by deleting dn and subtracting dn units from other
values. If n ≥3 and dn = 1, we subtract 1 from d1, noting that P di ≥2n−2
implies d1 > 1. If n ≥3 and dn > 1, we make the subtractions from any
two of the other numbers. In each case, the resulting sequence has even
sum and all entries at least 1.
Letting D = P di, we have P d′
i = D −2dn. If dn = 1, then D −2dn ≥
2n−2−2 = 2(n−1)−2. If dn > 1, then D ≥ndn, and so D−2dn ≥(n−2)dn ≥
2n −4 = 2(n −1) −2. Hence the new values satisfy the condition stated
for a set of n −1 values. By the induction hypothesis, there is a connected
graph G′ with vertex degrees d′
1, . . . , d′
n−1.
To obtain the desired graph G, add a vertex vn with di −d′
i edges to the
vertex with degree di, for 1 ≤i ≤n −1. This graph G is connected, because
a path from vn to any other vertex v can be construct by starting from vn to
a neighbor and continuing with a path to v in G′.
Proof 3 (induction on P di and prior result). If P di = 2n −2, then
Exercise 2.1.27 applies. Otherwise, P d1 ≥2n. If n = 1, then we use loops.
If n > 1, then we can delete 2 from d1 or delete 1 from d1 and d2 without
introducing a 0. After applying the induction hypothesis, adding one loop
at v1 or one edge from v1 to v2 restores the desired degrees.
2.1.29. Every tree has a leaf in its larger partite set (in both if they have
equal size). Let X and Y be the partite sets of a tree T , with |X| ≥|Y|. If
there is no leaf in X, then e(T ) ≥2 |X| = |X| + |X| ≥|X| + |Y| = n(T ). This
contradicts e(T ) < n(T ).
2.1.30. If T is a tree in which the neighbor of every leaf has degree at least
3, then some pair of leaves have a common neighbor.
Proof 1 (extremality). Let P a longest path in T , with endpoint v
adjacent to u. Since v is a leaf and u has only one other neighbor on P, u
must have a neighbor w off P. If w has a neighbor z ̸= u, then replacing
(u, v) by (u, w, z) yields a longer path. Hence w is a leaf, and v, w are two
leaves with a common neighbor.
Proof 2 (contradiction). Suppose all leaves of T have different neigh-
bors. Deleting all leaves (and their incident edges) reduces the degree of
each neighbor by 1. Since the neighbors all had degree at least 3, every
vertex now has degree at least 2, which is impossible in an acyclic graph.
Proof 3 (counting argument). Suppose all k leaves of T have different
neighbors. The n −2k vertices other than leaves and their neighbors have
degree at least 2, so the total degree is at least k + 3k + 2(n −2k) = 2n,
contradicting P d(v) = 2e(T ) = 2n −2.
Proof 4 (induction on n(T )). For n = 4, the only such tree is K1,3,
which satisﬁes the claim. For n > 4, let v be a leaf of T , and let w be its
neighbor. If w has no other leaf as neighbor, but has degree at least 3,
then T −v is a smaller tree satisfying the hypotheses. By the induction
hypothesis, T −v has a pair of leaves with a common neighbor, and these
form such a pair in T .
2.1.31. A simple connected graph G with exactly two non-cut-vertices is a
path. Proof 1 (properties of trees). Every connected graph has a spanning
tree. Every leaf of a spanning tree is not a cut-vertex, since deleting it
leaves a tree on the remaining vertices. Hence every spanning tree of G
has only two leaves and is a path. Consider a spanning path with vertices
v1, . . . , vn in order. If G has an edge vivj with i < j −1, then adding vivj to
the path creates a cycle, and deleting vj−1vj from the cycle yields another
spanning tree with three leaves. Hence G has no edge off the path.
Proof 2 (properties of paths and distance). Let x and y be the non-cut-
vertices, and let P be a shortest x, y-path. If V (P) ̸= V (G), then let w be a
vertex with maximum distance from V (P). By the choice of w, every vertex
of V (G) −V (P) −{w} is as close to V (P) as w and hence reaches V (P) by a
path that does not use w. Hence w is a non-cut-vertex. Thus V (P) = V (G).
Now there is no other edge, because P was a shortest x, y-path.
2.1.32. Characterization of cut-edges and loops.
An edge of a connected graph is a cut-edge if and only if it belongs to
every spanning tree. If G has a spanning tree T omitting e, then e belongs
to a cycle in T + e and hence is not a cut-edge in G. If e is not a cut-edge
in G, then G −e is connected and contains a spanning tree T that is also a
spanning tree of G; thus some spanning tree omits e.
An edge of a connected graph is a loop if and only if it belongs to no
spanning tree. If e is a loop, then e is a cycle and belongs to no spanning

93
Chapter 2: Trees and Distance
Section 2.1: Basic Properties
94
tree. If e is not a loop, and T is a spanning tree not containing e, then T + e
contains exactly one cycle, which contains another edge f . Now T + e −f
is a spanning tree containing e, since it has no cycle, and since deleting an
edge from a cycle of the connected graph T + e cannot disconnect it.
2.1.33. A connected graph with n vertices has exactly one cycle if and only if
it has exactly n edges. Let G be a connected graph with n vertices. If G has
exactly one cycle, then deleting an edge of the cycle produces a connected
graph with no cycle. Such a graph is a tree and therefore has n −1 edges,
which means that G has n edges.
For the converse, suppose that G has exactly n edges. Since G is con-
nected, G has a spanning tree, which has n −1 edges. Thus G is obtained
by adding one edge to a tree, which creates a graph with exactly one cycle.
Alternatively, we can use induction. If G has exactly n edges, then the
degree sum is 2n, and the average degree is 2. When n = 1, the graph must
be a loop, which is a cycle. When n > 2, if G is 2-regular, then G is a cycle,
since G is connected. If G is not 2-regular, then it has a vertex v of degree
1. Let G′ = G −v. The graph G′ is connected and has n −1 vertices and
n −1 edges. By the induction hypothesis, G′ has exactly one cycle. Since a
vertex of degree 1 belongs to no cycle, G also has exactly one cycle.
2.1.34. A simple n-vertex graph G with n > k and e(G) > n(G)(k −1) −
 k
2

contains a copy of each tree with k edges. We use induction on n. For the
basis step, let G be a graph with k + 1 vertices. The minimum allowed
number of edges is (k + 1)(k −1) −
 k
2

+ 1, which simpliﬁes to
 k
2

. Hence
G = Kk+1, and T ⊆G.
For the induction step, consider n > k +1. If every vertex has degree at
least k, then containment of T follows from Proposition 2.1.8. Otherwise,
deleting a vertex of minimum degree (at most k −1) yields a subgraph G′
on n −1 vertices with more than (n −1)(k −1)−
 k
2

edges. By the induction
hypothesis, G′ contains T , and hence T ⊆G.
2.1.35. The vertices of a tree T all have odd degree if and only if for all
e ∈E(T ), both components of T −e have odd order.
Necessity. If all vertices have odd degree, then deleting e creates two
of even degree. By the Degree-sum Formula, each component of T −e has
an even number of odd-degree vertices. Together with the vertex incident
to e, which has even degree in T −e, each component of T −e has odd order.
Sufﬁciency.
Proof 1 (parity). Given that both components of T −e have odd order,
n(T ) is even. Now consider v ∈V (T ). Deleting an edge incident to v yields
a component containing v and a component not containing v, each of odd
order. Together, the components not containing v when we delete the vari-
ous edges incident to v are d(v) pairwise disjoint subgraphs that together
contain all of V (T ) −{v}. Under the given hypothesis, they all have odd
order. Together with v, they produce an even total, n(T ). Hence the num-
ber of these subgraphs is odd, which means that the number of edges in T
incident to v is odd.
Proof 2 (contradiction). Suppose that such a tree T0 has a vertex v1 of
even degree. Let e1 be the last edge on a path from a leaf to x. Let T1 be the
component of T0 −e1 containing v1. By hypothesis, T1 has odd order, and v1
is a vertex of odd degree in T1. Since the number of odd-degree vertices in
T1 must be even, there is a vertex v2 of T1 (different from v1) having even
degree (in both T1 and T ).
Repeating the argument, given vi of even degree in Ti−1, let ei be the
last edge on the vi−1, vi-path in Ti−1, and let Ti be the component of Ti−1 −ei
containing vi. Also Ti is the component of T0 −ei that contains vi, so Ti has
odd order. Since vi has odd degree in Ti, there must be another vertex vi+1
with even degree in Ti.
In this way we generate an inﬁnite sequence v1, v2, . . . of distinct ver-
tices in T0. This contradicts the ﬁniteness of the vertex set, so the assump-
tion that T0 has a vertex of even degree cannot hold.
2.1.36. Every tree T of even order has exactly one subgraph in which every
vertex has odd degree.
Proof 1 (Induction). For n(T ) = 2, the only such subgraph is T itself.
Suppose n(T ) > 2. Observe that every pendant edge must appear in the
subgraph to give the leaves odd degree. Let x be an endpoint of a longest
path P, with neighbor u. If u has another leaf neighbor y, add ux and uy to
the unique such subgraph found in T −{x, y}. Otherwise, d(u) = 2, since P
is a longest path. In this case, add the isolated edge ux to the unique such
subgraph found in T −{u, x}.
Proof 2 (Explicit construction).
Every edge deletion breaks T into
two components. Since the total number of vertices is even, the two com-
ponents of T −e both have odd order or both have even order. We claim
that the desired subgraph G consists of all edges whose deletion leaves two
components of odd order.
First, every vertex has odd degree in this subgraph. Consider deleting
the edges incident to a vertex u. Since the total number of vertices in T
is even, the number of resulting components other than u itself that have
odd order must be odd. Hence u has odd order in G.
Furthermore, G is the only such subgraph. If e is a cut-edge of G, then
in G −e the two pieces must each have even degree sum. Given that G is
a subgraph of T with odd degree at each vertex, parity of the degree sum
forces G to e if T −e has components of odd order and omit e if T −e has
components of even order.

95
Chapter 2: Trees and Distance
Section 2.1: Basic Properties
96
Comment: Uniqueness also follows easily from symmetric difference.
Given two such subgraphs G1, G2 , the degree of each vertex in the sym-
metric difference is even, since its degree is odd in each Gi. This yields a
cycle in G1 ∪G2 ⊆T , which is impossible.
2.1.37. If T and T ′ are two spanning trees of a connected graph G, and
e ∈E(T ) −E(T ′), then there is an edge e′ ∈E(T ′) −E(T ) such that both
T −e + e′ and T ′ −e′ + e are spanning trees of G. Deleting e from T leaves
a graph having two components; let U,U ′ be their vertex sets. Let the
endpoints of e be u ∈U and u′ ∈U ′. Being a tree, T ′ contains a unique
u, u′-path. This path must have an edge from U to U ′; choose such an edge
to be e′, and then T −e + e′ is a spanning tree. Since e is the only edge of T
between U and U ′, we have e′ ∈E(T ′) −E(T ). Furthermore, since e′ is on
the u, u′-path in T ′, e′ is on the unique cycle formed by adding e to T ′, and
thus T ′ −e′ + e is a spanning tree. Hence e′ has all the desired properties.
2.1.38. If T and T ′ are two trees on the same vertex set such that dT (v) =
d′
T (v) for each vertex v, then T ′ can be obtained from T ′ using 2-switches
(Deﬁnition 1.3.32) with every intermediate graph being a tree. Using induc-
tion on the number n of vertices, it sufﬁces to show when n ≥4 that we can
apply (at most) one 2-switch to T to make a given leaf x be adjacent to its
neighbor w in T ′. We can then delete x from both trees and apply the in-
duction hypothesis. Since the degrees specify the tree when n is at most 3,
this argument also shows that at most n −3 2-switches are needed.
Let y be the neighbor of x in T . Note that w is not a leaf in T , since
dT ′(w) = dT (w) and xw ∈E(T ) and n ≥4. Hence we can choose a vertex z
in T that is a neighbor of w not on the x, w-path in T . Cutting xy and wz
creates three components: x alone, one containing z, and one containing
y, w.
Adding the edges zy and xw to complete the 2-switch gives x its
desired neighbor and reconnects the graph to form a new tree.
2.1.39. If G is a nontrivial tree with 2k vertices of odd degree, then G de-
composes into k paths.
Proof 1 (induction and stronger result). We prove the claim for every
forest G, using induction on k. Basis step (k = 0): If k = 0, then G has no
leaf and hence no edge.
Induction step (k > 0): Suppose that each forest with 2k −2 vertices
of odd degree has a decomposition into k −1 paths. Since k > 0, some
component of G is a tree with at least two vertices. This component has
at least two leaves; let P be a path connecting two leaves. Deleting E(P)
changes the parity of the vertex degree only for the endpoints of P; it makes
them even. Hence G −E(P) is a forest with 2k −2 vertices of odd degree.
By the induction hypothesis, G −E(P) is the union of k −1 pairwise edge-
disjoint paths; together with P, these paths partition E(G).
•
•
•
•
•
•
•
•
•
P
•
•
•
•
•
•
Proof 2 (extremality). Since there are 2k vertices of odd degree, at
least k paths are needed.
If two endpoints of paths occur at the same
vertex of the tree, then those paths can be combined to reduce the number
of paths. Hence a decomposition using the fewest paths has at most one
endpoint at each vertex.
Under this condition, endpoints occur only at
vertices of odd degree. There are 2k of these. Hence there are at most 2k
endpoints of paths and at most k paths.
Proof 3 (applying previous result). A nontrivial tree has leaves, so
k > 0. By Theorem 1.2.33, G decomposes into k trails. Since G has no
cycles, all these trails are paths.
2.1.40. If G is a tree with k leaves, then G is the union of ⌈k/2⌉pairwise
intersecting paths. We prove that we can express G in this way using paths
that end at leaves. First consider any way of pairing the leaves as ends of
⌈k/2⌉paths (one leaf used twice when k is odd). Suppose that two of the
paths are disjoint; let these be a u, v-path P and an x, y-path Q. Let R be
the path connecting P and Q in G. Replace P and Q by the u, x-path and
the v, y-path in G. These paths contain the same edges as P and Q, plus
they cover R twice (and intersect). Hence the total length of the new set of
paths is larger than before.
Continue this process; whenever two of the paths are disjoint, make a
switch between them that increases the total length of the paths. This pro-
cess cannot continue forever, since the total length of the paths is bounded
by the number of paths (⌈k/2⌉) times the maximum path length (at most
n −1). The process terminates only when the set of paths is pairwise in-
tersecting. (We have not proved that some vertex belongs to all the paths.)
Finally, we show that a pairwise intersecting set of paths containing
all the leaves must have union G. If any edge e of G is missing, then G −e
has two components H, H ′, each of which contains a leaf of G. Since e
belongs to none of the paths, the paths using leaves in H do not intersect
the paths using leaves in H ′. This cannot happen, because the paths are
pairwise intersecting.
(Comment: We can phrase the proof using extremality. The pairing
with maximum total length has the desired properties; otherwise, we make
a switch as above to increase the total length.)

97
Chapter 2: Trees and Distance
Section 2.1: Basic Properties
98
•
•
•
•
•
•
v
u
y
x
2.1.41. For n ≥4, a simple n-vertex graph with at least 2n −3 edges must
have two cycles of equal length. For such a graph, some component must
have size at least twice its order minus 3. Hence we may assume that G is
connected. A spanning tree T has n −1 edges and diameter at most n −1.
Each remaining edge completes a cycle with edges of T . The lengths of
these cycles belong to {3, . . . , n}.
Since there are at least n −2 remaining edges, there are two cycles
of the same length unless there are exactly n −2 remaining cycles and
they create cycles of distinct lengths with the edge of T . This forces T to
be a path. Now, after adding the edge e between the endpoints of T that
produces a cycle of length n, the other remaining edges each produce two
additional shorter cycles when added. These 2n −6 additional cycles fall
into the n −3 lengths {3, . . . , n −1}. Since 2n −6 > n −3 when n ≥4, the
pigeonhole principle yields two cycles of equal length.
2.1.42. Extendible vertices. In a nontrivial Eulerian graph G, a vertex is
extendible if every trail beginning at v extends to an Eulerian circuit.
a) v is extendible if and only if G −v is a forest.
Necessity. We prove the contrapositive. If G −v is not a forest, then
G −v has a cycle C. In G −E(C), every vertex has even degree, so the
component of G −E(C) containing v has an Eulerian circuit. This circuit
starts and ends at v and exhausts all edges of G incident to v, so it cannot
be extended to reach C and complete an Eulerian circuit of G.
Sufﬁciency. If G−v is a forest, then every cycle of G contains v. Given a
trail T starting at v, extend it arbitarily at the end until it can be extended
no farther. Because every vertex has even degree, the process can end only
at v. The resulting closed trail T ′ must use every edge incident to v, else it
could extend farther. Since T ′ is closed, every vertex in G −E(T ′) has even
degree. If G −E(T ′) has any edges, then minimum degree at least two in a
component of G −E(T ′) yields a cycle in G −E(T ′); this cycle avoids v, since
T ′ exhausted the edges incident to v. Since we have assumed that G −v
has no cycles, we conclude that G −E(T ′) has no edges, so T ′ is an Eulerian
circuit that extends T . (Sufﬁciency can also be proved by contrapositive.)
b) If v is extendible, then d(v) = 1(G). An Eulerian graph decomposes
into cycles.
If this uses m cycles, then each vertex has degree at most
2m. By part (a) each cycle contains v, and thus d(v) ≥2m. Hence v has
maximum degree.
Alternatively, since each cycle contains v, an Eulerian circuit must
visit v between any two visits to another vertex u. Hence d(v) ≥d(u).
c) For n(G) > 2, all vertices are extendible if and only if G is a cycle. If
G is a cycle, then every trail from a vertex extends to become the complete
cycle. Conversely, suppose that all vertices are extendible. By part (a),
every vertex lies on every cycle. Let C be a cycle in G; it must contain all
vertices. If G has any additional edge e, then following the shorter part of
C between the endpoints of e completes a cycle with e that does not contain
all the vertices. Hence there cannot be an additional edge and G = C.
d) If G is not a cycle, then G has at most two extendible vertices. From
part (c), we may assume that G is Eulerian but not a cycle. If v is ex-
tendible, then G −v is a forest. This forest cannot be a path, since then G
is a cycle or has a vertex of odd degree. Since G −v is a forest and not a
path, G −v has more than 1(G −v) leaves unless G −v is a tree with ex-
actly one vertex of degree greater than two. If G−v has more than 1(G−v)
leaves, all in N(v), then no vertex of G −v has degree as large as v in G,
and by part (b) no other vertex is extendible. In the latter case, the one
other vertex of degree d(v) may also be extendible, but all vertices except
those two have degree 2.
2.1.43. Given a vertex u in a connected graph G, there is a spanning tree of
G that is the union of shortest paths from u to the other vertices.
Proof 1 (induction on n(G)). When n(G) = 1, the vertex u is the entire
tree. For n(G) > 1, let v be a vertex at maximum distance from u. Apply
the induction hypothesis to G −v to obtain a tree T in G −v. Shortest
paths in G from u to vertices other than v do not use v, since v is farthest
from u. Therefore, T consists of shortest paths in G from u to the vertices
other than v. A shortest u, v-path in G arrives at v from some vertex of T .
Adding the ﬁnal edge of that path to T completes the desired tree in G.
Proof 2 (explicit construction). For each vertex other than u, choose an
incident edge that starts a shortest path to u. No cycle is created, since as
we follow any path of chosen edges, the distance from u strictly decreases.
Also n(G) −1 edges are chosen, and an acyclic subgraph with n(G) −1
edges is a spanning tree. Since distance from u decreases with each step,
the v, u-path in the chosen tree is a shortest v, u-path.
Comment: The claim can also be proved using BFS to grow the tree.
Proof 1 is a short inductive proof that the BFS algorithm works. Proof 2 is
an explicit description of the edge set produced by Proof 1.
2.1.44. If a simple graph with diameter 2 has a cut-vertex, then its com-
plement has an isolated vertex—TRUE. Let v be a cut-vertex of a simple

99
Chapter 2: Trees and Distance
Section 2.1: Basic Properties
100
graph G with diameter 2. In order to have distance at most 2 to each ver-
tex in the other component(s) of G −v, a vertex of G −v must be adjacent
to v. Hence v has degree n(G) −1 in G and is isolated in G.
2.1.45. If a graph G has spanning trees with diameters 2 and l, then G has
spanning trees with all diameters between 2 and l.
Proof 1 (local change). The only trees with diameter 2 are stars, so G
has a vertex v adjacent to all others. Given a spanning tree T with leaf u,
replacing the edge incident to u with uv yields another spanning tree T ′.
For every destroyed path, a path shorter by 1 remains. For every created
path, a path shorter by 1 was already present. Hence diam T ′ differs from
diam T by at most 1. Continuing this procedure reaches a spanning tree of
diameter 2 without skipping any values along the way, so all the desired
values are obtained.
Proof 2 (explicit construction). Since G has a tree with diameter 2, it
has a vertex v adjacent to all others. Every path in G that does not contain
v extends to v and to an additional vertex if it does not already contain all
vertices. Hence for k < l there is a path P of length k in G that contains v as
an internal vertex. Adding edges from v to all vertices not in P completes
a spanning tree of diameter k.
2.1.46. For n ≥2, the number of isomorphism classes of n-vertex trees with
diameter at most 3 is ⌊n/2⌋. If n ≤3, there is only one tree, and its diameter
is n −1. If n ≥4, every tree has diameter at least 2. There is one having
diameter 2, the star. Every tree with diameter 3 has two centers, x, y,
and every non-central vertex is adjacent to exactly one of x, y, so d(x) +
d(y) = n. By symmetry, we may assume d(x) ≤d(y). The unlabeled tree is
now completely speciﬁed by d(x), which can take any value from 2 through
⌊n/2⌋. Together with the star, the number of trees is ⌊n/2⌋.
2.1.47. Diameter and radius.
a) The distance function d(u, v) satisﬁes the triangle inequality:
d(u, v) + d(v, w) ≥d(u, w). A u, v-path of length d(u, v) and a v, w-path
of length d(v, w) together form a u, w-walk of length l = d(u, v) + d(v, w).
Every u, w-walk contains a u, w-path among its edges, so there is a u, w-
path of length at most l. Hence the shortest u, w-path has length at most l.
b) d ≤2r, where d is the diameter of G and r is the radius of G. Let
u, v be two vertices such that d(u, v) = d. Let w be a vertex in the center
of G; it has eccentricity r. Thus d(u, w) ≤r and d(w, v) ≤r. By part (a),
d = d(u, v) ≤d(u, w) + d(w, v) ≤2r.
c) Given integers r, d with 0 < r ≤d ≤2r, there is a simple graph with
radius r and diameter d. Let G = C2r ∪H, where H ∼= Pd−r+1 and the
cycle shares with H exactly one vertex x that is an endpoint of H. The
distance from the other end of H to the vertex z opposite x on the cycle is
d, and this is the maximum distance between vertices. Every vertex of H
has distance at least r from z, and every vertex of the cycle has distance r
from the vertex opposite it on the cycle. Hence the radius is at least r. The
eccentricity of x equals r, so the radius equals r, and x is in the center.
•
•
z
x
2.1.48. For n ≥4, the minimum number of edges in an n-vertex graph with
diameter 2 and maximum degree n −2 is 2n −4. The graph K2,n−2 shows
that 2n −4 edges are enough. We show that at least 2n −4 are needed. Let
G be an n-vertex graph with diameter 2 and maximum degree n −2. Let x
be a vertex of degree n −2, and let y be the vertex not adjacent to x.
Proof 1. Every path from y through x to another vertex has length at
least 3, so diameter 2 requires paths from y to all of V (G) −{x, y} in G −x.
Hence G −x is connected and therefore has at least n −2 edges. With the
n −2 edges incident to x, this yields at least 2n −4 edges in G.
Proof 2. Let A = N(y). Each vertex of N(x) −A must have an edge
to a vertex of A in order to reach y in two steps. These are distinct and
distinct from the edges incident to y, so we have at least |A| + |N(x) −A|
edges in addition to those incident to x. The total is again at least 2n −4.
(Comment: The answer remains the same whenever (2n −2)/3 ≤
1(G) ≤n −5 but is 2n −5 when n −4 ≤1(G) ≤n −3.)
2.1.49. If G is a simple graph with rad G ≥3, then rad G ≤2. The radius
is the minimum eccentricity. For x ∈V (G), there is a vertex y such that
dG(x, y) ≥3. Let w be the third vertex from x along a shortest x, y-path
(possibly w = y). For v ∈V (G) −{x}, if xv /∈E(G), then xv ∈E(G). Now
vw /∈E(G), since otherwise there is a shorter x, y-path. Thus x, w, v is an
x, v-path of length 2 in G. Hence for all v ∈V (G)−{x}, there is an x, v-path
of length at most 2 in G, and we have εG(x) ≤2 and rad (G) ≤2.
2.1.50. Radius and eccentricity.
a) The eccentricities of adjacent vertices differ by at most 1. Suppose
that x ↔y. For each vertex z, d(x, z) and d(y, z) differ by at most 1 (Exer-
cise 2.1.11). Hence
ε(y) = maxz d(y, z) ≤maxz(d(x, z) + 1) = (maxz d(x, z)) + 1 = ε(x) + 1.
Similarly, ε(x) ≤ε(y) + 1.
The statement can be made more general:
|ε(x) −ε(y)| ≤d(x, y) for all x, y ∈V (G).
b) In a graph with radius r, the maximum possible distance from a
vertex of eccentricity r + 1 to the center of G is r. The distance is at most
r, since every vertex is within distance at most r of every vertex in the

101
Chapter 2: Trees and Distance
Section 2.1: Basic Properties
102
center, by the deﬁnitions of center and radius. The graph consisting of a
cycle of length 2r plus a pendant edge at all but one vertex of the cycle
achieves equality. All vertices of the cycle have eccentricity r +1 except the
vertex opposite the one with no leaf neighbor, which is the unique vertex
with eccentricity r. The leaves have eccentricity r + 2, except for the one
adjacent to the center.
•
•
•
•
•
•
•
•
•
•
•
2.1.51. If x and y are distinct neighbors of a vertex v in a tree G, then
2ε(v) ≤ε(x) + ε(y). Let w be a vertex at distance ε(v) from v. The ver-
tex w cannot be both in the component of G −xv containing x and in the
component of G −yv containing y, since this would create a cycle. Hence
we may assume that w is in the component of G −xv containing v. Hence
ε(x) ≥d(x, w) = ε(v) + 1. Also ε(y) ≥d(y, w) ≥d(v, w) −1 = ε(v) −1.
Summing these inequalities yields ε(x) + ε(y) ≥ε(v) + ε(v).
The smallest graph where this inequality can fail is the kite K4 −e. Let
v be a vertex of degree 2; it has eccentricity 2. Its neighbors x and y has
degree 3 and hence eccentricity 1.
2.1.52. Eccentricity of vertices outside the center.
a) If G is a tree, then every vertex x outside the center of G has a neighbor
with eccentricity ε(x) −1. Let y be a vertex in the center, and let w be a
vertex with distance at least ε(x) −1 from x. Let v be the vertex where
the unique x, w- and y, w-paths meet; note that v is on the x, y-path in G.
Since d(y, w) ≤ε(y) ≤ε(x) −1 ≤d(x, w), we have d(y, v) ≤d(x, v). This
implies that v ̸= x. Hence x has a neighbor z on the x, v-path in G.
This argument holds for every such w, and the x, v-path in G is always
part of the x, y-path in G. Hence the same neighbor of x is always chosen
as z. We have proved that d(z, w) = d(x, w)−1 whenever d(x, w) ≥ε(x)−1.
On the other hand, since z is a neighbor of x, we have d(z, w) ≤d(x, w)+1 ≤
ε(x) −1 for every vertex w with d(x, w) < ε(x) −1. Hence ε(z) = ε(x) −1.
b) For all r and k with 2 ≤r ≤k < 2r, there is a graph with radius r in
which some vertex and its neighbors all have eccentricity k. Let G consist of
a 2r-cycle C and paths of length k−r appended to three consecutive vertices
on C. Below is an example with r = 5 and k = 9. The desired vertex is the
one opposite the middle vertex of degree 3; vertices are labeled with their
eccentricities.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
k
k
k
r
2.1.53. The center of a graph can be disconnected and can have components
arbitrarily far apart. We construct graphs center consists of two (marked)
vertices separated by distance k. There are various natural constructions.
The graph G consists of a cycle of length 2k plus a pendant edge at all
but two opposite vertices. These two are the center; other vertices of the
cycle have eccentricity k + 1, and the leaves have eccentricity k + 2.
For even k, the graph H below consists of a cycle of length 2k plus
pendant paths of length k/2 at two opposite vertices. For odd k, the graph
H ′ consists of a cycle of length 2k plus paths of length ⌊k/2⌋attached at
one end to two opposite pairs of consecutive vertices.
•
•
•
•
•
•
•
•
G
•
•
•
•
•
•
•
•
•
•
•
•
•
•
• •
•
•
H
•
•
•
•
•
•
H ′
• •
•
•
2.1.54. Centers in trees.
a) A tree has exactly one center or has two adjacent centers.
Proof 1 (direct properties of trees). We prove that in a tree T any two
centers are adjacent; since T has no triangles, this means it has at most
two centers. Suppose u and v are distinct nonadjacent centers, with ec-
centricity k. There is a unique path R between them containing a vertex
x /∈{u, v}. Given z ∈V (T ), let P, Q be the unique u, z-path and unique
v, z-path, respectively.
At least one of P, Q contains x else P ∪Q is a
u, v-walk and contains a (u, v)-path other than R. If P passes through x,
we have d(x, z) < d(u, z); if Q, we have d(x, z) < d(v, z). Hence d(x, z)
< max{d(u, z), d(v, z)} ≤k. Since z is arbitrary, we conclude that x has
smaller eccentricity than u and v. The contradiction implies u ↔v.
Proof 2 (construction of the center). Let P = x1, . . . , x2 be a longest
path in T , so that D = diam T = d(x1, x2). Let r = ⌈D/2⌉. Let {u1, u2} be
the middle of P, with u1 = u2 if D is even. Label u1, u2 along P so that
d(xi, ui) = r. Note that d(v, ui) ≤r for all v ∈T , else the (v, ui)-path can be
combined with the (ui, xi)-path or the (ui, x3−i)-path to form a path longer
than P. To show that no vertex outside {u1, u2} can be a center, it sufﬁces
to show that every other vertex v has distance greater than r from x1 or x2.

103
Chapter 2: Trees and Distance
Section 2.1: Basic Properties
104
The unique path from v to either x1 or x2 meets P at some point w (which
may equal v). If w is in the u1, x2-portion of P, then d(v, x1) > r. If w is in
the u2, x1-portion of P, then d(v, x2) > r.
b) A tree has exactly one center if and only if its diameter is twice its
radius. Proof 3 above observes that the center or pair of centers is the
middle of a longest path. The diameter of a tree is the length of its longest
path. The radius is the eccentricity of any center. If the diameter is even,
then there is one center, and its eccentricity is half the length of the longest
path. If the diameter is odd, say 2k −1, then there are two centers, and
the eccentricity of each is k, which exceeds (2k −1)/2.
c) Every automorphism of a tree with an odd number of vertices maps at
least one vertex to itself. The maximum distance from a vertex must be pre-
served under any automorphism, so any automorphism of any graph maps
the center into itself. A central tree has only one vertex in the center, so it
is ﬁxed by any automorphism. A bicentral tree has two such vertices; they
are ﬁxed or exchange. If they exchange, then the two subtrees obtained by
deleting the edge between the centers are exchanged by the automorphism.
However, if the total number of vertices is odd, then the parity of the num-
ber of vertices in the two branches is different, so no automorphism can
exchange the centers.
2.1.55. Given x ∈V (G), let s(x) = P
v∈V (G) d(x, v). The barycenter of G is
the subgraph induced by the set of vertices minimizing s(x).
a) The barycenter of a tree is a single vertex or an edge.
Let uv be
an edge in a tree G, and let T (u) and T (v) be the components of G −uv
containing u and v, respectively.
Note that d(u, x) −d(v, x) = 1 if x ∈
V (T (v)) and d(u, x) −d(v, x) = −1 if x ∈V (T (u)). Summing the difference
over x ∈V (G) yields s(u) −s(v) = n(T (v)) −n(T (u)).
As a result, s(ui) −s(ui+1) strictly decreases along any path u1, u2, . . .;
each step leaves more vertices behind. Considering two consecutive steps
on a path x, y, z yields s(x) −s(y) < s(y) −s(z), or 2s(y) < s(x) + s(z)
whenever x, z ∈N(y). Thus the minimum of s cannot be achieved at two
nonadjacent vertices, because it would be smaller at a vertex between them.
b) The maximum distance between the center and the barycenter in a
tree of diameter d is ⌊d/2⌋−1. By part (a), s is not minimized at a leaf
when n ≥2. Since every vertex is distance at most ⌊d/2⌋from the center,
we obtain an upper bound of ⌊d/2⌋−1.
Part (a) implies that to achieve the bound of ⌊d/2⌋−1 we need a tree
having adjacent vertices u, v such that u is the neighbor of a leaf with ec-
centricity d, and the number of leaves adjacent to u is at least as large as
n(T (v)). Since uv lies along a path of length d, we have at least d −1 ver-
tices in T (v). Thus we need at least d vertices in T (u) and at least 2d −1
vertices altogether. We obtain the smallest tree achieving the bound by
merging an endpoint of Pd with the center of the star K1,d−1. In the result-
ing tree, the barycenter u is the vertex of degree d −1, and the distance
between it and the center is ⌊d/2⌋−1.
•
•
•
•
•
v
u
•
•
•
•
2.1.56. Every tree T has a vertex v such that for all e ∈E(T ), the component
of T −e containing v has at least ⌈n(T )/2⌉vertices.
Proof 1 (orientations). For each edge xy ∈E(T ), we orient it from x to
y if in T −xy the component containing y contains at least ⌈n(T )/2⌉vertices
(there might be an edge which could be oriented either way). Denote the
resulting digraph by D(T ).
If D(T ) has a vertex x with outdegree at least 2, then T −x has two
disjoint subtrees each having at least ⌈n(T )/2⌉vertices, which is impossi-
ble. Now, since T does not contain a cycle, D(T ) does not contain a directed
cycle. Hence D(T ) has a vertex v with outdegree 0. Since D(T ) has no
vertex with outdegree at least two, every path in T with endpoint v is an
oriented path to v in D(T ). Thus every edge xy points towards v, meaning
that v is in a component of T −xy with at least ⌈n(T )/2⌉vertices.
The only ﬂexibility in the choice of v is that an edge whose deletion
leaves two components of equal order can be oriented either way, which
yields two adjacent choices for v.
Proof 2 (algorithm). Instead of the existence proof using digraphs,
one can march to the desired vertex. For each v ∈V (T ), let f (v) denote the
minimum over e ∈E(T ) of the order of the component of T −e containing
v. Note that f (v) is achieved at some edge e incident to v.
Select a vertex v. If f (v) < ⌈n(T )/2⌉, then consider an edge e incident
to v such that the order of the component of T −e containing v is f (v). Let
u be the other endpoint of e. The component of T −e containing u has more
than half the vertices. For any other edge e′ incident to u, the component of
T −e′ containing u is strictly larger than the component of T −e containing
v. Hence f (u) > f (v).
If f (u) < ⌈n(T )/2⌉, then we repeat the argument.
Since f cannot
increase indeﬁnitely, we reach a vertex w with f (v) ≥⌈n(T )/2⌉.
Uniqueness is as before; if two nonadjacent vertices have this property,
then deleting edges on the path joining them yields a contradiction.

105
Chapter 2: Trees and Distance
Section 2.1: Basic Properties
106
2.1.57. a) If n1, . . . , nk are positive integers with sum n −1, then Pk
i=1
 ni
2

≤
 n−1
2

. The graph having pairwise disjoint cliques of sizes n1, . . . , nk has
Pk
i=1
 ni
2

edges and is a subgraph of Kn−1.
b) P
v∈V (T ) d(u, v) ≤
 n
2

when u is a vertex of a tree T . We use induction
on n; the result holds trivially for n = 2. Consider n > 2. The graph T −u is
a forest with components T1, . . . , Tk, where k ≥1. Because T is connected,
u has a neighbor in each Ti; because T has no cycles, u has exactly one
neighbor vi in each Ti. If v ∈V (Ti), then the unique u, v-path in T passes
through vi, and we have dT (u, v) = 1 + dTi(vi, v). Letting ni = n(Ti), we
obtain P
v∈V (Ti) dT (u, v) = ni + P
v∈V (Ti) dTi(vi, v).
By the induction hypothesis, P
v∈V (Ti) dTi(vi, v) ≤
 ni
2

. If we sum the
formula for distances from u over all the components of T −u, we obtain
P
v∈V (T) dT (u, v) ≤(n−1)+P
i
 ni
2

. Now observe that P  ni
2

≤
 m
2

whenever
P ni = m, because the right side counts the edges in Km and the left side
counts the edges in a subgraph of Km (a disjoint union of cliques). Hence
we have P
v∈V (T ) dT (u, v) ≤(n −1) +
 n−1
2

=
 n
2

.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
v1
v2
v3
u
T1
T2
T3
2.1.58. If S and T are trees with leaf sets {x1, . . . , xk} and {y1, . . . , yk}, re-
spectively, then dS(xi, xj) = dT (yi, yj) for all 1 ≤i ≤j ≤k implies that S
and T are isomorphic. It sufﬁces to show that the numbers dS(xi, xj) deter-
mine S uniquely. That is, if S is a tree, then no other tree has the same leaf
distances.
Proof 1 (induction on k). If k = 2, then S is a path of length d(x1, x2). If
k > 2, then a tree S with leaf distance set D has a shortest path P from xk to
a junction w. Since P has no internal vertices on paths joining other leaves,
deleting V (P) −{w} leaves a subtree with leaf set {x1, . . . , xk−1} realizing
the distances not involving xk. By the induction hypothesis, this distance
set is uniquely realizable; call that tree S′. It remains only to show that
the vertex w in V (S′) and dS(xk, w) are uniquely determined.
Let t = dS(xk, w). The vertex w must belong to the path Q joining
some leaves xi and xj in S′. The paths from xi and xj to xk in S together
use the edges of Q, and each uses the path P from w to xk.
Thus t =
(dS(xi, xk) + dS(xj, xk) −dS(xi, xj))/2.
For arbitrary xi and xj, this formula gives the distance in S from xk
to the junction with the xi, xj-path. If w is not on the xi, xj-path, then the
value of the formula exceeds t, since w is the closest vertex of S′ to xk. Hence
t = mini, j<k(dS(xi, xk) + dS(xj, xk) −dS(xi, xj))/2. For any i, j that achieves
the minimum, dS′(xi, w) = dS(xi, xk) −t, which identiﬁes the vertex w in S′.
Thus there is only one w where the path can be attached and only one
length of path that can be put there to form a tree realizing D.
Proof 2 (induction on n(S)). When n(S) = 2, there is no other tree with
adjacent leaves. For n(S) > 2, let xk be a leaf of maximum eccentricity; the
eccentricity of a leaf is the maximum among its distances to other leaves.
If some leaf xj has distance 2 from xk, then they have a common neigh-
bor. Deleting xk yields a smaller tree S′ with k −1 leaves, since the neighbor
of xk is not a leaf in S. The deletion does not change the distances among
other leaves. By the induction hypothesis, there is only one way to assem-
ble S′ from the distance information, and to form S we must add xk adjacent
to the neighbor of xj.
If no leaf has distance 2 from xk, then the neighbor of xk in S must
have degree 2, because having two non-leaf neighbors would contradict the
choice of xk as a leaf of maximum eccentricity. Now S −xk has the same
number of leaves but fewer vertices. The leaf xk is replaced by x′
k, and the
distances from the kth leaf to other leaves are all reduced by 1. By the
induction hypothesis, there is only one way to assemble S −xk from the
distance information, and to form S we must add xk adjacent to x′
k.
2.1.59. If G is a tree with n vertices, k leaves, and maximum degree k, then
2 ⌈(n −1)/k⌉≤diam G ≤n −k + 1, and the bounds are achievable, except
that the lower bound is 2 ⌈(n −1)/k⌉−1 when n ≡2 (mod k). Let x be a
vertex of degree k. Consider k maximal paths that start at x; these end
at distinct leaves. If G has any other edge, it creates a cycle or leads to
an additional leaf. Hence G is the union of k edge-disjoint paths with a
common endpoint.
The diameter of G is the sum of the lengths of two
longest such paths.
Upper bound: Since the paths other than the two longest absorb at
least k −2 edges, at most n −k + 1 edges remain for the two longest paths;
this is achieved by giving one path length n −k and the others length 1.
Lower bound: If the longest and shortest of the k paths differ in length
by more than 1, then shortening the longest while lengthening the shortest
does not increase the sum of the two longest lengths. Hence the diameter
is minimized by the tree G in which the lengths of any pair of the k paths
differ by at most 1, meaning they all equal ⌊(n −1)/k⌋or ⌈(n −1)/k⌉. There
must be two of length ⌈(n −1)/k⌉unless n ≡2 (mod k).

107
Chapter 2: Trees and Distance
Section 2.1: Basic Properties
108
2.1.60. If G has diameter d and maximum degree k, then n(G) ≤1 + [(k −
1)d −1]k/(k −2). A single vertex x has at most k neighbors. Each of these
has at most k other incident edges, and hence there are at most k(k −1)
vertices at distance 2 from x. Assuming that new vertices always get gen-
erated, the tree of paths from x has at most k(k −1)i−1 vertices at distance
i from x. Hence n(G) ≤1 + Pd
i=1 k(k −1)i−1 = 1 + k (k−1)d−1
k−1−1 . (Comment: C5
and the Petersen graph are among the very few that achieve equality.)
2.1.61. Every (k, g)-cage has diameter at most g. (A (k, g)-cage is a graph
with smallest order among k-regular graphs with girth at least g; Exercise
1.3.16 establishes the existence of such graphs).
Let G be a (k, g)-cage having two vertices x and y such that dG(x, y) >
g. We modify G to obtain a k-regular graph with girth at least g that has
fewer vertices. This contradicts the choice of G, so there is no such pair of
vertices in a cage G.
The modiﬁcation is to delete x and y and add a matching from N(x) to
N(y). Since d(x, y) > g ≥3, the resulting smaller graph G′ is simple. Since
we have “replaced” edges to deleted vertices, G′ is k-regular. It sufﬁces to
show that cycles in G′ have length at least g. We need only consider cycles
using at least one new edge.
Since dG(x, y) > g, every path from N(x) to N(y) has length at least
g −1. Also every path whose endpoints are within N(x) has length at least
g −2; otherwise, G has a short cycle through x. Every cycle through a new
edge uses one new edge and a path from N(x) to N(y) or at least two new
edges and at least two paths of length at least g −2. Hence every new cycle
has length at least g.
2.1.62. Connectedness and diameter of the 2-switch graph on spanning
trees of G. Let G be a connected graph with n vertices. The graph G′ has
one vertex for each spanning tree of G, with vertices adjacent in G′ when
the corresponding trees have exactly n(G) −2 common edges.
a) G′ is connected.
Proof 1 (construction of path). For distinct spanning trees T and T ′
in G, choose e ∈E(T ) −E(T ′).
By Proposition 2.1.6, there exists e′ ∈
E(T ′)−E(T ) such that T −e+e′ is a spanning tree of G. Let T1 = T −e+e′.
The trees T and T1 are adjacent in G′. The trees T1 and T ′ share more
edges than T and T ′ share. Repeating the argument produces a T, T ′-path
in G′ via vertices T, T1, T2, . . . , Tk, T ′.
Formally, this uses induction on the number m of edges in E(T )−E(T ′).
When m = 0, there is a T, T ′-path of length 0. When m > 0, we generate
T1 as above and apply the induction hypothesis to the pair T1, T ′.
Proof 2 (induction on e(G)). If e(G) = n −1, then G is a tree, and G′ =
K1. For the induction step, consider e(G) > n −1. A connected n-vertex
graph with at least n edges has a cycle C. Choose e ∈E(C). The graph G−e
is connected, and by the induction hypothesis (G −e)′ is connected. Every
spanning tree of G −e is a spanning tree of G, so (G −e)′ is the induced
subgraph of T (G) whose vertices are the spanning trees of G that omit e.
Since (G −e)′ is connected, it sufﬁces to show that every spanning tree
of G containing e is adjacent in G′ to a spanning tree not containing e. If
T contains e and T ′ does not, then there exists e′ ∈E(T ′) −E(T ) such that
T −e + e′ is a spanning tree of G omitting e. Thus T −e + e′ is the desired
tree in G −e adjacent to T in G′.
b) The diameter of G′ is at most n −1, with equality when G has two
spanning trees that share no edges. It sufﬁces to show that dG′(T, T ′) =
E(T ) −E(T ′)
. Each edge on a path from T to T ′ in G′ discards at most
one edge of T , so the distance is at least
E(T ) −E(T ′)
. Since for each
e ∈E(T )−E(T ′) there exists e′ ∈E(T ′)−E(T ) such that T −e +e′ ∈V (G′),
the path built in Proof 1 of part (a) has precisely this length.
Since trees in n-vertex graphs have at most n −1 edges, always
E(T ) −E(T ′)
 ≤n −1, so diam G′ ≤n −1 when G has n vertices. When G
has two edge-disjoint spanning trees, the diameter of G′ equals n −1.
2.1.63. Every n-vertex graph with n + 1 edges has a cycle of length at most
⌊(2n + 2)/3⌋. The bound is best possible, as seen by the example of three
paths with common endpoints that have total length n+1 and nearly-equal
lengths. Note that ⌊(2n + 2)/3⌋= ⌈2n/3⌉.
Proof 1. Since an n-vertex forest with k components has only n −k
edges, an n-vertex graph with n + 1 edges has at least two cycles. Let C be
a shortest cycle. Suppose that e(C) > ⌈2n/3⌉. If G −E(C) contains a path
connecting two vertices of C, then it forms a cycle with the shorter path on
C connecting these two vertices. The length of this cycle is at most
1
2e(C) + (e(G) −e(C) = e(G) −1
2e(C) < n + 1 −n/3 = (2n + 3)/3.
If the length of this cycle is less than (2n+3)/3, then it is at most (2n+2)/3,
and since it is an integer it is at most ⌊(2n + 2)/3⌋.
If there is no such path, then no cycle shares an edge with C. Hence
the additional cycle is restricted to a set of fewer than n + 1−⌈2n/3⌉edges,
and again its length is less than (2n + 3)/3.
Proof 2. We may assume that the graph is connected, since otherwise
we apply the same argument to some component in which the number of
edges exceeds the number of vertices by at least two. Consider a spanning
tree T , using n −1 of the edges. Each of the two remaining edges forms
a cycle when added to T . If these cycles share no edges, then the shortest
has length at most (n + 1)/2.
Hence we may assume that the two resulting cycles have at least one
common edge; let x, y be the endpoints of their common path in T . Deleting

109
Chapter 2: Trees and Distance
Section 2.1: Basic Properties
110
the x, y-path in T from the union of the two cycles yields a third cycle. (The
uniqueness of cycles formed when an edge is added to a tree implies that
this edge set is in fact a single cycle.) Thus we have three cycles, and each
edge in the union of the three cycles appears in exactly two of them. Thus
the shortest of the three lengths is at most 2(n + 1)/3.
2.1.64. If G is a connected graph that is not a tree, then G has a cycle of
length at most 2diam G + 1, and this is best possible. We use extremality
for the upper bound; let C be a shortest cycle in G. If its length exceeds
2diam G + 1, then there are vertices x, y on C that have no path of length
at most diam G connecting them along C. Following a shortest x, y-path P
from its ﬁrst edge off C until its return to C completes a shorter cycle. This
holds because P has length at most k, and we use a portion of P in place
of a path along C that has length more than k. We have proved that every
shortest cycle in G has length at most 2diam G + 1.
The odd cycle C2k+1 shows that the bound is best possible. It is con-
nected, is not a tree, and has diameter k. Its only cycle has length 2k + 1,
so we cannot guarantee girth less than 2k + 1.
2.1.65. If G is a connected simple graph of order n and minimum degree
k, with n −3 ≥k ≥2, then diam G ≤3(n −2)/(k + 1) −1, with equality
when n −2 is a multiple of k + 1. To interpret the desired inequality on
diam G, we let d = diam G and solve for n. Thus it sufﬁces to prove that
n ≥(1+ ⌊d/3⌋)(k + 1)+ j, where j is the remainder of d upon division by 3.
Note that the inequality n −3 ≥k is equivalent to 3(n −2)/(k + 1) −1 ≥2.
Under this constraint, the result is immediate when d ≤2, so we may
assume that d ≥3.
Let ⟨v0, . . . , vd⟩be a path joining vertices at distance d.
For a ver-
tex x, let N[x] = N(x) ∪{x}. Let Si = N[v3i] for 0 ≤i < ⌊d/3⌋, and let
S⌊d/3⌋= N[vd]. Since d ≥3, there are 1 + ⌊d/3⌋such sets, pairwise disjoint
(since we have a shortest v0, vd-path), and each has at least k + 1 vertices.
Furthermore, vd−2 does not appear in any of these sets if j = 1, and both
vd−2 and vd−3 do not appear if j = 2. Hence n is as large as claimed.
To obtain an upper bound on d in terms of n, we write ⌊d/3⌋as (d−j)/3.
Solving for d in terms of n, we ﬁnd in each case that d ≤3(n −2)/(k + 1) −
1 −j[1 −3/(k + 1)]. Since k ≥2, the bound d ≤3(n −2)/(k + 1) −1 is valid
for every congruence class of d modulo 3.
When n −2 is a multiple of k + 1, the bound is sharp. If n −2 = k + 1,
then deleting two edges incident to one vertex of Kn yields a graph with
the desired diameter and minimum degree (also C n sufﬁces). For larger
multiples, let m = (n −2)/(k + 1); note that m ≥2. Begin with cliques
Q1, . . . , Qm such that Q1 and Qm have order k + 2 and the others have
order k + 1. For 1 ≤i ≤m, choose xi, yi ∈Qi, and delete the edge xi yi.
For 1 ≤i ≤m −1, add the edge yixi+1. The resulting graph has minimum
degree k and diameter 3m −1. The ﬁgure below illustrates the construction
when m = 3; the ith ellipse represents Qm −{xi, yi}.
(There also exist
regular graphs attaining the bound.)
•
•
•
•
•
•
k
k−1
k
2.1.66. If F1, . . . , Fm are forests whose union is G, then m ≥maxH⊆G
l
e(H)
n(H)−1
m
.
From a subgraph H, each forest uses at most n(H) −1 edges. Thus at least
e(H)/(n(H) −1) forests are needed just to cover the edges of H, and the
choice of H that gives the largest value of this is a lower bound on m.
2.1.67. If a graph G has k pairwise edge-disjoint spanning trees in G, then
for any partition of V (G) into r parts, there are at least k(r −1) edges of G
whose endpoints are in different parts. Deleting the edges of a spanning
tree T that have endpoints in different parts leaves a forest with at least r
components and hence at most n(G) −r edges. Since T has n(G) −1 edges,
T must have at least r −1 edges between the parts. The argument holds
separately for each spanning tree, yielding k(r −1) distinct edges.
2.1.68. A decomposition into two isomorphic spanning trees. One tree turns
into the other in the decomposition below upon rotation by 180 degrees.
•
•
•
•
•
•
•
•
•
2.1.69. An instance of playing Bridg-it. Indexing the 9 vertical edges as
gi, j and the 16 horizontal/slanted edges as hi, j, where i is the “row” index
and j is the “column” index, we are given these moves:
Player 1:
h1,1
h2,3
h4,2
Player 2:
g2,2
h3,2
g2,1
After the third move of Player 1, the situation is as shown below. The
bold edges are those seized by Player 1 and belong to both spanning trees.
The two moves by Player 2 have cut the two edges that are missing.

111
Chapter 2: Trees and Distance
Section 2.1: Basic Properties
112
•
•
•
•
•
•
•
•
•
•
•
•
•
•
The third move by Player 2 cuts the marked vertical edge. This cuts
off three vertices from the rest of the solid tree. Player 1 must respond by
choosing a dotted edge that can reconnect it. The choices are h1,2, h2,1, h2,2,
h3,1, and h4,1.
2.1.70. Bridg-it cannot end in a tie. That is, when no further moves can be
made, one player must have a path connecting his/her goals.
Consider the graph for Player 1 formed in Theorem 2.1.17. At the end
of the game, Player 1 has bridges on some of these edges, retaining them as
a subgraph H, and the other edges have been cut by Player 2’s bridges. Let
C be the component of H containing the left goal for Player 1. The edges
incident to V (C) that have been cut correspond to a walk built by Player 2
that connects the goals for Player 2. This holds because successive edges
around the outside of C are incident to the same “square” in the graph for
Player 1, which corresponds to a vertex for Player 2. This can be described
more precisely using the language of duality in planar graphs (Chapter 6).
2.1.71. Player 2 has a winning strategy in Reverse Bridg-it. A player build-
ing a path joining friendly ends is the loser, and it is forbidden to stall by
building a bridge joining posts on the same end.
We use the same graph as in Theorem 2.1.17, keeping the auxiliary
edge so that we start with two edge-disjoint spanning trees T and T ′. An
edge e that Player 1 can use belongs to only one of the trees, say T . The
play by Player 1 will add e to T ′. Since e ∈E(T ) −E(T ′), Proposition 2.1.7
guarantees an edge e′ ∈E(T ′)−E(T ) such that T ′+e−e′ is a spanning tree.
Player 2 makes a bridge to delete the edge e′, and the strategy continues
with the modiﬁed T ′ sharing the edge e with T . If the only edge of E(T ′) −
E(T ) available to break the cycle in T ′ +e is the auxiliary edge, then Player
1 has already built a path joining the goals and lost the game. The game
continues always with two spanning trees available for Player 1, and it can
only end with Player 1 completing the required path.
2.1.72. If G1, . . . , Gk are pairwise intersecting subtrees of a tree G, then G
has a vertex in all of G1, . . . , Gk. (A special case is the “Helly property” of
the real line: pairwise intersecting intervals have a common point.)
Lemma: For vertices u, v, w in a tree G, the u, v-path P, the v, w-path
Q, and the u, w-path R in G have a common vertex. Let z be the last vertex
shared by P and R. They share all vertices up to z, since distinct paths
cannot have the same endpoints. Therefore, the z, v-portion of P and the
z, w-portion of R together form a v, w-path. Since G has only one v, w-path,
this is Q. Hence z belongs to P, Q, and R.
Main result.
Proof 1 (induction on k).
For k = 2, the hypothesis is the conclu-
sion. For larger k, apply the inductive hypothesis to both {G1, . . . , Gk−1}
and {G2, . . . , Gk}. This yields a vertex u in all of {G1, . . . , Gk−1} and a ver-
tex v in all of {G2, . . . , Gk}. Because G is a tree, it has a unique u, v-path.
This path belongs to all of G2, . . . , Gk−1. Let w be a vertex in G1 ∩Gk. By
the Lemma, the paths in G joining pairs in {u, v, w} have a common ver-
tex. Since the u, v-path is in G2, . . . , Gk−1, the w, u-path is in G1, and the
w, v-path is in Gk, the common vertex of these paths is in G1, . . . , Gk.
Proof 2 (induction on k). For k = 3, we let u, v, w be vertices of G1∩G2,
G2 ∩G3, and G3 ∩G1, respectively. By the Lemma, the three paths joining
these vertices have a common vertex, and this vertex belongs to all three
subtrees. For k > 3, deﬁne the k −1 subtrees G1 ∩Gk, . . . , Gk−1 ∩Gk. By
the case k = 3, these subtrees are pairwise intersecting. There are k −1
of them, so by the induction hypothesis they have a common vertex. This
vertex belongs to all of the original k trees.
2.1.73. A simple graph G is a forest if and only if pairwise intersecting
paths in G always have a common vertex.
Sufﬁciency. We prove by contradiction that G is acyclic. If G has a
cycle, then choosing any three vertices on the cycle cuts it into three paths
that pairwise intersect at their endpoints. However, the three paths do not
all have a common vertex. Hence G can have no cycle and is a tree.
Necessity. Let G be a forest. Pairwise intersecting paths lie in a sin-
gle component of G, so we may assume that G is a tree. We use induction
on the number of paths. By deﬁnition, two intersecting paths have a com-
mon vertex. For k > 2, let P1, . . . , Pk be pairwise intersecting paths. Also
P1, . . . , Pk−1 are pairwise intersecting, as are P2, . . . , Pk; each consists of
k −1 paths. The induction hypothesis guarantees a vertex u belonging to
all of P1, . . . , Pk−1 and a vertex v belonging to all of P2, . . . , Pk. Since each
of P2, . . . , Pk−1 contains both u and v and G has exactly one u, v-path Q,
this path Q belongs to all of P2, . . . , Pk−1.
By hypothesis, P1 and Pk also have a common vertex z. The unique z, u-
path R lies in P1, and the unique z, v-path S lies in Pk. Starting from z, let
w be the last common vertex of R and S. It sufﬁces to show that w ∈V (Q).
Otherwise, consider the portion of R from w until it ﬁrst reaches Q, the

113
Chapter 2: Trees and Distance
Section 2.1: Basic Properties
114
portion of S from w until it ﬁrst reaches Q, and the portion of Q between
these two points. Together, these form a closed trail and contain a cycle, but
this cannot exist in the tree G. The contradiction implies that w belongs
to Q and is the desired vertex.
2.1.74. Every simple n-vertex graph G with n −2 edges is a subgraph of its
complement. (We need e(G) < n −1, since K1,n−1 ̸⊆K1,n−1.)
We use induction on n. We will delete two vertices in the induction
step, we so we must include n = 2 and n = 3 in the basis. When n = 2, we
have G = K 2 ⊆K2 = G. When n = 3, we have G = K2 + K1 ⊆P3 = G.
For n > 3, let G be an n-vertex graph with n −2 edges. Suppose ﬁrst
that G has an isolated vertex x.
Since e(G) = n −2, the Degree-Sum
Formula yields a vertex y of degree at least 2. Let G′ = G −{x, y}; this
is a graph with n −2 vertices and at most n −4 edges. By the induction
hypotheses, every graph with n −2 vertices and n −4 edges appears in its
complement, so the same holds for smaller graphs (since they are contained
in graphs with n −4 edges). A copy of G′ contained in G −{x, y} extends to
a copy of G in G by letting x represent y and letting y represent x.
Hence we may assume that G has no isolated vertices. Every non-
tree component of G has at least as many edges as vertices, and trees have
one less. Hence at least two components of G are trees. We may therefore
choose vertices x and y of degree 1 with distinct neighbors. Let N(x) = {x ′}
and N(y) = {y′} with x′ ̸= y′. Let G′ = G −{x, y}; this graph has n −2
vertices and n −4 edges. By the induction hypothesis, G′ ⊆G′ = G −x −y.
Let H be a copy of G′ in G −x −y. If x′ or y′ represents itself in H, then
we let x and y switch identities to add their incident edges. Otherwise, we
let x and y represent themselves to add their incident edges.
2.1.75. Every non-star tree is (isomorphic to) a subgraph of its complement.
Proof 1 (loaded induction on n). We prove the stronger statement that,
given an n-vertex tree T other than K1,n−1, the graph Kn with vertex set
{v1, . . . , vn} contains two edge-disjoint copies of T in which the two copies
of each non-leaf vertex of T appear at distinct vertices. The only non-star
tree with at most 4 vertices is the path P4, which is self-complementary via
a map that moves each vertex.
Now consider n > 4. We show ﬁrst that T has a leaf x such that T −x
is not a star. If T is a path, let x be either leaf. Otherwise, T has at least
three leaves; let P be a longest path in T , and let x be a leaf other than the
endpoints of P. In either case, T −x has a path of length at least 3.
Let T ′ = T −x, and let y be the neighbor of x in T . If y is not a leaf
in T ′, then the induction hypothesis yields embeddings of T ′ in Kn−1 in
which y occurs at distinct vertices. We can extend both embeddings to Kn
by placing x at vn in each and adding the distinct edges to the images of y.
In this case the non-leaves of T are the same as the non-leaves of T ′, and
the loaded claim holds for T .
If y is a leaf in T , we use the same argument unless f (y) = g(y),
where f, g are the mappings from V (T ′) to V (Kn−1) for the two embeddings
of T ′ guaranteed by the induction hypothesis. In this case, let z be the
other neighbor of y; we have z as a non-leaf of T ′, and hence f (z) ̸= g(z).
We cannot have both g(z) = f (w) for some w ∈N(z) and f (z) = g(u) for
some u ∈N(z), because then the edge between f (z) and g(z) is used in
both embeddings of T ′. By symmetry, we may assume f (z) ̸= g(w) for all
w ∈N(z). For T , we deﬁne f ′, g′ :
V (T ) →V (Kn) for the edge-disjoint
embeddings of T as follows: If w /∈{x, y, z}, let f ′(w) = f (w) and g′(w) =
g(w). For the other vertices, let f ′(z) = f (z), f ′(y) = f (y), f ′(x) = vn,
g′(z) = vn, g′(y) = g(z), g′(x) = g(y), as illustrated below. By construction
the non-leaves of T have pairs of distinct images. The edges not involving
x, y, z are mapped as before and hence become edge-disjoint subgraphs of
Kn −{vn, f (y), f (z), g(z)}. The path x, y, z is explicitly given edge-disjoint
images under f ′, g′. This leaves only the edges involving z. Those under
f are the same as under f ′. The shift of z from g(z) to g′(z) = vn does not
produce a common edge because f ′(z) = f (z) is not the image under g of
any neighbor of z.
•
•
•
•
vn
g(y)
g(z)
f (y)
f (z)
→
•
•
•
•
g′(z)
g′(x)
g′(y)
f ′(x)
f ′(y)
f ′(z)
Proof 2. (induction on n(T ) by deleting two leaves—proof due to Fred
Galvin). To cover the basis step, we prove ﬁrst that the claim is true when
T has a path P of length at least 3 that includes a endpoint of every edge
(see “caterpillars” in Section 2.2). First we embed P in its complement
so that every vertex moves. If n(P) is even, say n(P) = 2k, then we ap-
ply the vertex permutation
  1,2,...,k,k+1,...,2k
2,4,...,2k,1,...,2k−1

. When n(P) = 2k −1, we use
  1,2,...,k,k+1,...,2k−1
2k−1,2k−3,...,1,2k,...,2

. Now, since every vertex on P has moved, we can place
the remaining leaves at their original positions and add incident edges
from T to make them adjacent to their desired neighbors.
All non-star trees with at most six vertices have such a path P. For the
induction step, consider a tree T with n(T ) > 6. Let u and v be endpoints
of a longest path in T , so d(u, v) = diam T , and let T ′ = T −u −v. Let x
and y be the neighbors of u and v, respectively. If T is not a star and T ′ is a
star, then T is embeddable in its complement using the construction above.

115
Chapter 2: Trees and Distance
Section 2.2: Spanning Trees and Enumeration
116
If T ′ is not a star, then by the induction hypothesis T ′ embeds in T ′.
If the embedding puts x or y at itself, then adding the edges xv and yu
yields a copy of T in T . Otherwise, make u adjacent to the image of x and
v adjacent to the image of y to complete the copy of T in T .
2.1.76. If A1, . . . , An are distinct subsets of [n], then there exists x ∈[n]
such that A1 ∪{x}, . . . , An ∪{x} are distinct. We need to ﬁnd an element x
such that no pair of sets differ by x. Consider the graph G with V (G) =
{A1, . . . , An} and Ai ↔Aj if only if Ai and Aj differ by the addition or
deletion of a single element. Color (label) an edge Ai Aj by the element in
which the endpoints differ. Any color that appears in a cycle of G must
appear an even number of times in that cycle, because as we traverse the
cycle we return to the original set. Hence a subgraph F formed by selecting
one edge having each edge-label that appears in G will contain no cycles
and must be a forest. Since a forest has at most n −1 edges, there must be
an element that does not appear on any edge and can serve as x.
2.2. SPANNING TREES & ENUMERATION
2.2.1. Description of trees by Pr¨ufer codes. We use the fact that the degree
of a vertex in the tree is one more than the number of times it appears in
the corresponding code.
a) The trees with constant Pr¨ufer codes are the stars. The n −1 la-
bels that don’t appear in the code have degree 1 in the tree; the label that
appears n −2 times has degree n −1.
b) The trees whose codes contain two values are the double-stars. Since
n −2 labels don’t appear in the code, there are n −2 leaves in the tree.
c) The trees whose codes have no repeated entries are the paths. Since
n −2 labels appear once and two are missing, n −2 vertices have degree 2,
and two are leaves. All trees with this degree sequence are paths.
2.2.2. The graph K1 ∨C4 has 45 spanning trees. For each graph G in the
computation below, we mean τ(G).
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
=
+
=
+ 2
+
=
•
•
•
•
•
•
•
•
•
•
•
•
3
+
2
+
+
=
3 · 8 + 2 · 5 + 3 · 2 + 5
=
45
2.2.3. Application of the Matrix Tree Theorem. The matrix Q = D −A
for this graph appears on the right below. All rows and columns sum to 0.
If we delete any row and column and take the determinant, the result is
106, which is the number of spanning trees. Alternatively, we could apply
the recurrence. The number of trees not containing the diagonal edge is
2 · 3 · 4 + 3 · 4 · 2 + 4 · 2 · 2 + 2 · 2 · 3, which is 76. The number of trees
containing the diagonal edge is 5 · 6, which is 30.
•
•
•
•
v1
v2
v3
v4


5
−2
−3
0
−2
5
−1
−2
−3
−1
8
−1
0
−2
−4
6


2.2.4. If a graph G with m edges has a graceful labeling, then K2m+1 decom-
poses into copies of G. As in the proof of Theorem 2.2.16, view the vertices
modulo 2m + 1. Let a1, . . . , an be the vertex labels on in a graceful labeling
of G. By deﬁnition, 0 ≤aj ≤m for each j. For 0 ≤i ≤2m, the ith copy of
G uses vertices i + a1, . . . , i + an. Each copy uses one edge from each dif-
ference class, and the successive copies use distinct edges from a class, so
each edge of K2m+1 appears in exactly one of these copies of G.
2.2.5. The graph below has 2000 spanning trees. The graph has 16 vertices
and 20 edges; we must delete ﬁve edges to form a spanning tree.
The
5-cycles are pairwise edge-disjoint; we group the deleted edges by the 5-
cycles. Each 5-cycle must lose an edge; one 5-cycle will lose two. To avoid
disconnecting the graph, one edge lost from the 5-cycle that loses two must
be on the 4-cycle, and thus the 4-cycle is also broken.
Every subgraph satisfying these rules is connected with 15 edges, since
every vertex has a path to the central 4-cycle, and there is a path from one
vertex to the next on the 4-cycle via the 5-cycles that lose just one edge).
Hence these are the spanning trees. We can pick the 5-cycle that loses two
edges in 4 ways, pick its second lost edge in 4 ways, and pick the edge lost
from each remaining 5-cycle in ﬁve ways, yielding a total of 4 · 4 · 5 · 5 · 5
spanning trees. The product is 2000.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•

117
Chapter 2: Trees and Distance
Section 2.2: Spanning Trees and Enumeration
118
2.2.6. The 3-regular graph that is a ring of m kites (shown below for m = 6)
has 2m8m spanning trees.
Call the edges joining kites the “link edges”.
Deleting two link edges disconnects the graph, so each spanning tree omits
at most one link edge.
If a spanning tree uses m −1 link edges, then it also contains a span-
ning tree from each kite. By Example 2.2.6, each kite has eight spanning
trees. (Each such spanning tree has three edges; each choice of three edges
works except the two forming triangles, and 8 =
 5
2

−2.)
To form a spanning tree of this type, we pick one of the m link edges to
delete and pick a spanning tree from each kite in 8k ways. Thus there are
m8k−1 spanning trees of this sort.
The other possibility is to use all m link edges. Now we must have
exactly one kite where the vertices of degree 2 in the kite are not connected
by a path within the kite. Since we avoid cycles and spanning trees but
must connect the two 3-valent vertices of the kite out to the rest of the
graph, we retain exactly two edge from the kite that is cut. Each way of
choosing two edges to retain works exept the two that form a path between
the 2-valent vertex through one 3-valent vertex: 8 =
 5
2

−2.
Since we pick one kite to cut in m ways, pick one of 8 ways to cut it,
and pick one of 8 spanning trees in each other kite, there are m8m spanning
trees of this type, for 2m8m spannning trees altogether.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
2.2.7. Kn −e has (n −2)nn−3 spanning trees.
Proof 1 (symmetry and Cayley’s Formula—easiest!). By Cayley’s For-
mula, there are nn−2 spanning trees in Kn. Since each has n −1 edges,
there are (n −1)nn−2 pairs (e, T ) such that T is a spanning tree in Kn and
e ∈E(T ). When we group these pairs according to the
 n
2

edges in Kn, we
divide by
 n
2

to obtain 2nn−3 as the number of trees containing any given
edge, since by symmetry each edge of Kn appears in the same number of
spanning trees.
To count the spanning trees in Kn −e, we subtract from the total num-
ber of spanning trees in Kn the number that contain the particular edge
e. Subtracting t = 2nn−3 from nn−2 leaves (n −2)nn−3 spanning trees in Kn
that do not contain e.
Proof 2 (Pr¨ufer correspondence). Given vertex set [n], we count the
trees not containing the edge between n −1 and n. In the algorithm to
generating the Pr¨ufer code of a tree with vertex set [n], we never delete
vertex n. Also, we do not delete vertex n −1 unless n −1 and n are the only
leaves, in which case the remaining tree at that stage is a path (because it
is a tree with only two leaves).
If the tree contains the edge (n −1, n), then (n −1, n) will be the ﬁnal
edge, and the label last written down is n −1 or n. If not, then the path
between n −1 and n has at least two edges, and we will peel off vertices
from one end until only the edge containing n remains. The label n is never
recorded during this process, and neither is n −1.
Thus a Pr ¨ufer code
corresponds to a tree not containing (n −1, n) if and only if the last term of
the list is not n −1 or n, and there are (n −2)nn−3 such lists.
Proof 3 (Matrix Tree Theorem). For Kn −e, the matrix D −A has
diagonal n −1, . . . , n −1, n −2, n −2, with positions n −1, n and n, n −1
equal to 0 and all else −1. Delete the last row and column and take the
determinant to obtain the number of spanning trees. To compute the de-
terminant, apply row and column operations as follows: 1) add the n −2
other columns to the ﬁrst so the ﬁrst column becomes 1, . . . , 1, 0. 2) sub-
tract the ﬁrst row from all but the last, so the ﬁrst row is 1, −1, . . . , −1, the
last is 0, −1, . . . , −1, n −2, and the others are 0 except for n on the diago-
nal. The interior rows can then be used to reduce this to a diagonal matrix
with entries 1, n, . . . , n, n −2, whose determinant is (n −2)nn−3.
2.2.8. With vertex set [n], there are
 n
2

(2n−2 −2) trees with n −2 leaves and
n!/2 trees with 2 leaves. Every tree with two leaves is a path (paths along
distinct edges incident to a vertex of degree k leads to k distinct leaves, so
having only two leaves in a tree implies maximum degree 2). Every tree
with n −2 leaves has exactly two non-leaves. Each leaf is adjacent to one
of these two vertices, with at least one leaf neighbor for each of the two
vertices. These trees are the “double-stars”.
To count paths directly, the vertices of a path in order form a permu-
tation of the vertex set. Following the path from the other end produces
another permutation. On the other hand, every permutation arises in this
way. Hence there are two permutations for every path, and the number of
paths is n!/2.
To count double-stars directly, we pick the two central vertices in one
of
 n
2

ways and then pick the set of leaves adjacent to the lower of the two
central vertices. This set is a subset of the n −2 remaining vertex labels,
and it can be any subset other than the full set and the empty set. The
number of ways to do this is the same no matter how the central vertices
is chosen, so the number of double-stars is
 n
2

(2n−2 −2).

119
Chapter 2: Trees and Distance
Section 2.2: Spanning Trees and Enumeration
120
To solve this using the Pr ¨ufer correspondence, we count Pr ¨ufer codes
for paths and for double-stars. In the Pr ¨ufer code corresponding to a tree,
the labels of the leaves are the labels that do not appear.
For paths (two leaves), the other n −2 labels must each appear in the
Pr¨ufer code, so they must appear once each. Having chosen the leaf labels
in
 n
2

ways, there are (n −2)! ways to form a Pr ¨ufer code in which all the
other labels appear. The product is n!/2.
For double-stars (n −2 leaves), exactly two labels appear in the Pr ¨ufer
code. We can choose these two labels in
 n
2

ways. To form a Pr¨ufer code (and
thus a tree) with these two labels as non-leaves, we choose an arbitrary
nonempty proper subset of the positions 1, . . . , n −2 for the appearances
of the ﬁrst label. There are 2n−2 −2 ways to do this step. Hence there are
 n
2

(2n−2 −2) ways to form the Pr¨ufer code.
2.2.9. There are (n!/k!)S(n −2, n −k) trees on a ﬁxed vertex set of size n that
have exactly k leaves. Consider the Pr ¨ufer sequences of trees. The leaves of
a tree are the labels that do not appear in the sequence. We can choose the
labels of the leaves in
 n
k

ways. Given a ﬁxed set of leaves, we must count
the sequences of length n −2 in which the remaining n −k labels all appear.
Each label occupies some set of positions in the sequence. We partition the
set of positions into n −k nonempty parts, and then we can assign these
parts to the labels in (n −k)! ways to complete the sequence. The number
of ways to perform the partition, by deﬁnition, is S(n −2, n −k). Since these
operations are independent, the total number of legal Pr ¨ufer sequences is
 n
k

(n −k)!S(n −2, n −k).
2.2.10. K2,m has m2m−1 spanning trees. Let X, Y be the partite sets, with
|X| = 2. Each spanning tree has one vertex of Y as a common neighbor
of the vertices in X; it can be chosen in m ways. The remaining vertices
are leaves; for each, we choose its neighbor in X in one of two ways. Every
spanning tree is formed this way, so there are m2m−1 trees.
Alternatively, note that K2,m is obtained from the two-vertex multi-
graph H with m edges by replacing each edge with a path of 2 edges. Since
H itself has m spanning trees, Exercise 2.2.12 allows the spanning trees of
K2,m to be counted by multiplying m by a factor of 2e(H)−n(H)+1 = 2m−1.
K2,m has ⌊(m + 1)/2⌋isomorphism classes of spanning trees. The ver-
tices in X have one common neighbor, and the isomorphism class is deter-
mined by splitting the remaining m −1 vertices between them as leaves.
We attach k leaves to one neighbor and m −1 −k to the other, where
0 ≤k ≤⌊(m −1)/2⌋. Hence there are ⌊(m + 1)/2⌋isomorphism classes.
2.2.11. τ(K3,m) = m23m−1. Let X, Y be the partite sets, with |X| = 3. A
spanning tree must have a single vertex in Y adjacent to all of X or two
vertices in Y forming P5 with X. In each case, the remaining vertices of Y
are distributed as leaf neighbors arbitrarily to the three vertices of X; each
has a choice among the three vertices of X for its neighbor. Hence there
are m3m−1 spanning trees of the ﬁrst type and [3m2(m −1)/2]3m−2 trees of
the second type. and then the remaining vertices in the other
2.2.12. The effect of graph transformations on the number τ of spanning
trees. Let G be a graph with n vertices and m edges.
a) If H is obtained from G by replacing every edge with k parallel edges,
then τ(H) = kn−1τ(G).
Proof 1 (direct combinatorial argument). Each spanning tree T of G
yields kn−1 distinct spanning trees of H by choosing any one of the k copies
of each edge in T . This implies τ(H) ≥kn−1τ(G). Also, every tree arises in
this way. A tree T in H uses at most one edge between each pair of vertices.
Since T is connected and acyclic, the edges in G whose copies are used in
T form a spanning tree of G that generates T . Hence τ(H) ≤kn−1τ(G).
Proof 2 (induction on m using the recurrence for τ). If m = 0, then
τ(G) = τ(H) = 0, unless n = 1, in which case 1 = k0 · 1. If m > 0, choose
e ∈E(G). Let H ′ be the graph obtained from H by contracting all k copies
of e. Let H ′′ be the graph obtained from H by deleting all k copies of e. The
spanning trees of H can be grouped by whether they use a copy of e (they
cannot use more than one copy). There are k ×τ(H ′) of these trees that use
a copy of e and τ(H ′′) that do not. We can apply the induction hypothesis
to H ′ and H ′′, since each arises from a graph with fewer than m edges by
having k copies of each edge: H ′ from G · e and H ′′ from G −e. Thus
τ(H) = k × τ(H ′) + τ(H ′′) = k · kn−2τ(G · e) + kn−1τ(G −e)
= kn−1[τ(G · e) + τ(G −e)] = kn−1τ(G).
Proof 3 (matrix tree theorem). Let Q, Q′ be the matrices obtained
from G, G′, from which we delete one row and column before taking the
determinant. By construction, Q′ = kQ. When we take the determinant of
a submatrix of order n −1, we thus obtain τ(G′) = kn−1τ(G).
b) If H is obtained from G by replacing each e ∈E(G) with a path P(e)
of k edges, then τ(H) = km−n+1τ(G).
Proof 1 (combinatorial argument).
A spanning tree T of G yields
km−n+1 spanning trees of H as follows. If e ∈E(T ), include all of P(e). If
e /∈E(T ), use all but one edge of P(e). Choosing one of the k edges of P(e)
to omit for each e ∈E(G)−E(T ) yields km−n+1 distinct trees (connected and
acyclic) in H. Again we must show that all spanning trees have been gen-
erated. A tree T ′ in H omits at most one edge from each path P(e), else
some vertex in P(e) would be separated from the remainder of H. Let T
be the spanning subgraph of G with E(T ) = {e ∈E(G): P(e) ⊆T ′}. If T ′

121
Chapter 2: Trees and Distance
Section 2.2: Spanning Trees and Enumeration
122
is connected and has no cycles, then the same is true of T , and T ′ is one of
the trees generated from T as described above.
Proof 2 (induction on m). The basis step m = 0 is as in (a). For m > 0,
select an edge e ∈E(G). The spanning trees of H use k or k −1 edges
of P(e). These two types are counted by τ(H ′) and τ(H ′′), where H ′ is the
graph obtained from H by contracting all edges in P(e), and H ′′ is the graph
obtained from H by deleting P(e) (except for its end-vertices). Since these
graphs arise from G · e and G −e (each with m −1 edges) by replacing each
edge with a path of length k, applying the induction hypothesis yields
τ(H) = τ(H ′) + k · τ(H ′′) = k(m−1)−(n−1)+1τ(G · e) + k[k(m−1)−n+1τ(G −e)]
= km−n+1[τ(G · e) + τ(G −e)] = km−n+1τ(G).
2.2.13. Spanning trees in Kn,n. For each spanning tree T of Kn,n, a list f (T )
of pairs of integers (written vertically) is formed as follows: Let u, v be the
least-indexed leaves of the remaining subtree that occur in X and Y. Add
the pair
 a
b

to the sequence, where a is the index of the neighbor of u and b
is the index of the neighbor of v. Delete {u, v} and iterate until n −2 pairs
are generated and one edge remains.
a) Every spanning tree of Kn,n has a leaf in each partite set, and hence
f is well-deﬁned. If each vertex of one partite set has degree at least 2,
then at least 2n edges are incident to this partite set, which are too many
to have in a spanning tree of a graph with 2n vertices.
b) f is a bijection from the set of spanning trees of Kn,n to the set of
n −1-element lists of pairs of elements from [n], and hence Kn,n has n2n−2
spanning trees.
We use an analogue of Pr ¨ufer codes. Consider Kn,n with
partite sets X = {x1, . . . , xn} and Y = {y1, . . . , yn}. For each spanning tree
T , we form a sequence f (T ) of n −1 pairs of integers chosen from [n] by
recording at each step the ordered pair of subscripts of the neighbors of the
least-indexed leaves of T remaining in X and Y, and then deleting these
leaves. What remains is a spanning tree in a smaller balanced biclique, so
by part (a) the process is well-deﬁned.
Since there n2n−2 such lists, it sufﬁces to show that f establishes a
bijection from the set of spanning trees of Kn,n to the set of lists.
From a list L of n −1 pairs of integers chosen from [n], we generate a
tree g(L) with vertex set X ∪Y. We begin with X ∪Y, no edges, and each
vertex unmarked. At the ith step, when the ith ordered pair is
 a(i)
b(i)

, let
u be the least index of an unmarked vertex in Y that does not appear in
ﬁrst coordinates of L at or after position i, and let v be the least index of an
unmarked vertex in X that does not appear in second coordinates of L at
or after position i. We add the edges xa(i)yu and yb(i)xv, and then we mark
xv and yu to eliminate them from further consideration. After n −1 pairs,
we add one edge joining the two remaining unmarked vertices.
After the ith step, we have 2n −2i components, each containing one
unmarked vertex.
This follows by induction on i; it holds when i = 0.
Since indices cannot be marked until after they no longer appear in the list,
the two edges created in the ith step join pairs of unmarked vertices. By
the induction hypothesis, these come from four different components, and
the two added edges combine these into two, each keeping one unmarked
vertex. Thus adding the last edge completes the construction of a tree.
In computing f (T ), a label no longer appears in the sequence after it
is deleted as a leaf. Hence the vertices marked at the ith step in computing
g(L) are precisely the leaves deleted at the ith step in computing f (g(L)),
which also records
 a(i)
b(i)

. Thus L = f (g(L)). Similarly, the leaves deleting
at the ith step in computing f (T ) are the vertices marked at the ith step
in computing g( f (T )), which yields T = g( f (T )). Hence each maps inverts
the other, and both are bijections.
2.2.14. The number of trees with vertices 1, . . . ,r + s that have partite sets
of sizes r and s is
 r+s
s

sr−1rs−1 if r ̸= s.
It sufﬁces to count the Pr ¨ufer
codes for such trees. The factor
 r+s
r

counts the assignments of labels to
the two partite sets (half that amount if r = s). When deleting a vertex
in computing the Pr¨ufer code, we record a vertex of the other partite set.
Since an edge remains at the end of the construction, the ﬁnal code has
s −1 entries from the r-set and r −1 entries from the s-set.
It sufﬁces to show that the sublists formed from each partite set de-
termine the full list, because there are sr−1rs−1 such pairs of sublists. In
reconstructing the code and tree from the pair of lists, the next leaf to be
“ﬁnished” by receiving its last edge is the least label that is unﬁnished and
doesn’t appear in the remainder of the list. The remainder of the list is the
remainder of the two sublists. We know which set contains the next leaf
to be ﬁnished. Its neighbor comes from the other set. This tells us which
sublist contributes the next element of the full list. Iterating this merges
the two sublists into the full Pr ¨ufer code.
When r = s, the given formula counts the lists twice.
2.2.15. For n ≥1, the number of spanning trees in the graph Gn with 2n
vertices and 3n −2 edges pictured below satisﬁes the recurrence tn = 4tn−1 −
tn−2 for n ≥3, with t1 = 1 and t2 = 4.
•
•
•
•
•
•
•
•
•
•
•
•
· · ·
· · ·
e

123
Chapter 2: Trees and Distance
Section 2.2: Spanning Trees and Enumeration
124
(Comment: The solution to the recurrence is tn =
1
2
√
3[(2 +
√
3)n −(2 −
√
3)n].) Using the recurrence, this follows by induction on n.) We derive
the recurrence. Let tn = τ(Gn).
Proof 1 (direct argument for recurrence). Each spanning tree in Gn
uses two or three of the three rightmost edges. Those with two of the right-
most edges are obtained by adding any two of those edges to any spanning
tree of Gn−1. Thus there are 3tn−1 such trees. To prove the recurrence
tn = 4tn−1 −tn−2, it sufﬁces to show that there are tn−1 −tn−2 spanning trees
that contain the three rightmost edges.
Such trees cannot contain the second-to-last vertical edge e. Therefore,
deleting the three rightmost edges and adding e yields a spanning tree
of Gn−1. Furthermore, each spanning tree of Gn−1 using e arises exactly
once in this way, because we can invert this operation. Hence the number
of spanning trees of Gn containing the three rightmost edges equals the
number of spanning trees of Gn−1 containing e. The number of spanning
trees of Gn−1 that don’t contain e is tn−2, so the number of spanning trees
of Gn−1 that do contain e is tn−1 −tn−2.
Proof 2 (deletion/contraction recurrence). Applying the recurrence in-
troduces graphs of other types. Let Hn be the graph obtained by contracting
the rightmost edge of Gn, and let Fn−1 be the graph obtained by contracting
one of the rightmost edges of Hn. Below we show G4, H4, and F3.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
By using τ(G) = τ(G −e)+τ(G ·e) on a rightmost edge e and observing
that a pendant edge appears in all spanning trees while a loop appears in
none, we obtain
τ(Gn) = τ(Gn−1) + τ(Hn)
τ(Hn) = τ(Gn−1) + τ(Fn−1)
τ(Fn) = τ(Gn) + τ(Hn−1)
Substituting in for τ(Hn) and then for τ(Fn−1) and then for τ(Hn−1)
yields the desired recurrence:
τ(Gn) = τ(Gn−1) + τ(Gn−1) + τ(Fn−1) = 2τ(Gn−1) + τ(Gn−1) + τ(Hn−2)
= 3τ(Gn−1) + τ(Gn−1) −τ(Gn−2) = 4τ(Gn−1) −τ(Gn−2).
2.2.16. Spanning trees in K1 ∨Pn. The number an of spanning trees sat-
isﬁes an = an−1 + 1 + Pn−1
i=1 ai for n > 1, with a1 = 1. Let x1, . . . , xn be the
vertices of the path in order, and let z be the vertex off the path. There are
an−1 spanning trees not using the edge zxn; they combine the edge xn−1xn
with a spanning tree of K1 ∨Pn−1. Among trees containing zxn, let i be the
highest index such that all of the path xi+1, . . . , xn appears in the tree. For
each i, there are ai such trees, since the speciﬁed edges are combined with
a spanning tree of K1 ∨Pi. The term 1 corresponds to i = 0; here the entire
tree is Pn ∪zxn. This exhausts all possible spanning trees.
2.2.17. Cayley’s formula from the Matrix Tree Theorem. The number of
labeled n-vertex trees is the number of spanning trees in Kn. Using the
Matrix Tree Theorem, we compute this by subtracting the adjacency ma-
trix from the diagonal matrix of degrees, deleting one row and column, and
taking the determinant. All degrees are n −1, so the initial matrix is n −1
on the diagonal and −1 elsewhere. Delete the last row and column. We
compute the determinant of the resulting matrix.
Proof 1 (row operations).
Add every row to the ﬁrst row does not
change the determinant but makes every entry in the ﬁrst row 1. Now add
the ﬁrst row to every other row. The determinant remains unchanged, but
every row below the ﬁrst is now 0 everywhere except on the diagonal, where
the value is n. The matrix is now upper triangular, so the determinant is
the product of the diagonal entries, which are one 1 and n −2 copies of n.
Hence the determinant is nn−2, as desired.
Proof 2 (eigenvalues). The determinant of a matrix is the product of
its eigenvalues. The eigenvalues of a matrix are shifted by λ when λI is
added to the matrix. The matrix in question is nIn−1 −Jn−1, where In−1 is
the n −1-by-n −1 identity matrix and Jn−1 is the n −1-by-n −1 matrix with
every entry 1. The eigenvalues of −Jn−1 are −(n−1) with multiplicity 1 and
0 with multiplicity n −2. Hence the eigenvalues of the desired matrix are
1 with multiplicity 1 and n with multiplicity n −2. Hence the determinant
is nn−2, as desired.
2.2.18. Proof that τ(Kr,s) = sr−1rs−1 using the Matrix Tree Theorem. The
adjacency matrix of Kr,s is
 0 1
1 0

, where 0 and 1 denote matrices of all 0s and
all 1s, and both the row partition and the column partition consist of r in
the ﬁrst block and s in the second block. The diagonal matrix of degrees is
 sIr
0
0 r Is

, where In is the identity matrix of order n. Hence we may delete the
ﬁrst row and column to obtain Q∗=
 sIr−1
−1
−1
r Is

.
We apply row and column operations that do not change the determi-
nant. We subtract column r −1 (last of the ﬁrst block) from the earlier
columns and subtract column r (ﬁrst of the second block) from the later
columns. This yields the matrix on the left below, where the values outside
the matrix indicate the number of rows or columns in the blocks. Now, we
add to row r −1 the earlier rows and add to row r the later rows, yielding
the matrix on the right below.

125
Chapter 2: Trees and Distance
Section 2.2: Spanning Trees and Enumeration
126


r −2
1
1
s −1
r −2
sIr−2
0
−1
0
1
−s1
s
−1
0
1
0
−1
r
−r1
s −1
0
−1
0
r Is−1




r −2
1
1
s −1
r −2
sIr−2
0
−1
0
1
0
s
−r + 1
0
1
0
−s
r
0
s −1
0
−1
0
r Is−1


Adding row r −1 to row r now makes row r all zero except for a single
1 in position r (on the diagonal). Adding row r to the ﬁrst r −2 rows (and
r −1 times row r to row r −1) now leaves the 1 in row r as the only nonzero
entry in column r. Also, the s in column r −1 of row r −1 is now the only
nonzero entry in row r −1. Hence we can add 1/s times row r −1 to each of
the last s −1 rows to eliminate the other nonzero entries in column r −1.
The resulting matrix is diagonal, with diagonal entries consisting of
r −1 copies of s, one copy of 1, and s −1 copies of r. Since adding a mul-
tiple of a row or column to another does not change the determinant, the
determinant of our original matrix equals the determinant of this diagonal
matrix. The determinant of a diagonal matrix is the product of its diagonal
entries, so the determinant is sr−1rs−1.
2.2.19. The number tn of labeled trees on n vertices satisﬁes the recurrence
tn = Pn−1
k=1 k
 n−2
k−1

tktn−k. For an arbitrary labeled tree on n vertices, delete the
edge incident to v2 on the path from v2 to v1. This yields labeled trees on k
and n −k vertices for some k, where v1 belongs to the tree on k vertices and
v2 to the tree on n −k vertices. Each such pair arises from exactly k
 n−2
k−1

labeled trees on n vertices. To see this, reverse the process. First choose
the k −1 other vertices to be in the subtree containing v1. Next, choose
a tree on k labeled vertices and a tree on n −k labeled vertices (any such
choice could arise by deleting the speciﬁed edge of a tree on n vertices).
Finally, reconnect the tree by adding an edge from v2 to any one of the
k vertices in the tree containing v1. This counts the trees such that the
subtree containing v1 has k vertices, and summing this over k yields tn.
2.2.20. A d-regular graph G has a decomposition into copies of K1,d if and
only if G is bipartite. If G has bipartition X, Y, then for each x ∈X we
include the copy of K1,d obtained by taking all d edges incident to x. Since
every edge has exactly one endpoint in X, and every vertex in X has degree
d, this puts every edge of G into exactly one star in our list.
If G has a K1,d-decomposition, then we let X be the set of centers of the
copies of K1,d in the decomposition. Since G is d-regular, each copy of K1,d
uses all edges incident to its center. Since the list is a decomposition, each
edge is in exactly one such star, so X is an independent set. Since every
edge belongs to some K1,d centered in X, there is no edge with both end-
points outside X. Thus the remaining vertices also form an independent
set, and G has bipartition X, X.
Alternative proof of sufﬁciency. If G is not bipartite, then G contains
an odd cycle. When decomposing a d-regular graph into copies of K1,d, each
subgraph used consists of all d edges incident to a single vertex. Hence
each vertex occurs only as a center or only as a leaf in these subgraphs.
Also, every edge joins the center and the leaf in the star containing it.
These statements require that centers and leaves alternate along a cycle,
but this cannot be done in an odd cycle.
2.2.21. Decomposition of K2m−1,2m into m spanning paths. We add a vertex
to the smaller partite set and decomposition K2m,2m into m spanning cycles.
Deleting the added vertex from each cycle yields pairwise edge-disjoint
spanning paths of K2m−1,2m.
Let the partite sets of K2m,2m be x1, . . . , x2m and y1, . . . , y2m. Let the kth
cycle consist of the edges of the forms xi yi+2k−1 and xi yi+2k, where subscripts
above 2m are reduced by 2m. These sets are pairwise disjoint and form
spanning cycles.
2.2.22. If G is an n-vertex simple graph having a decomposition into k span-
ning trees, and 1(G) = δ(G) + 1, then G has n −2k vertices of degree 2k
and 2k vertices of degree 2k −1. Each spanning tree has n −1 edges, so
e(G) = k(n −1). Note that k < n/2, since G is simple and is not Kn (since
it is not regular). If G has r vertices of minimum degree and n −r of maxi-
mum degree, then the Degree-Sum Formula yields 2k(n −1) = n1(G) −r.
Since 1 ≤r ≤n, we conclude that 1(G) = 2k = r.
2.2.23. If the Graceful Tree Conjecture holds and e(T ) = m, then K2m de-
composes into 2m −1 copies of T . Let T ′ = T −u, where u is a leaf of T with
neighbor v. Let w be a vertex of K2m. Construct a cyclic T ′-decomposition
of K2m −w using a graceful labeling of T ′ as in the proof of Theorem 2.2.16.
Each vertex serves as v in exactly one copy of T ′. Extend each copy of T ′
to a copy of T by adding the edge to w from the vertex serving as v. This
exhausts the edges to w and completes the T -decomposition of G.
•
•
•
•
•
0
4
2
3
1
•
•
•
•
•
•
•
•
•
0
1
2
3
4
5
6
7
8
•
•
•
•
•
•
0
4
2
3
1
v
•
•
•
•
•
•
•
•
•
0
1
2
3
4
5
6
7
8
•
v
2.2.24. Of the nn−2 trees with vertex set {0, . . . , n −1}, how many are grace-
fully labeled by their vertex names? This question was incorrectly posed. It

127
Chapter 2: Trees and Distance
Section 2.2: Spanning Trees and Enumeration
128
should be of the graphs with vertex set {0, . . . , n −1} that have n −1 edges,
how many are gracefully labeled by their vertex names? Such a graph has k
choices for the placement of the edge with difference n −k, since the lower
endpoint can be any of {0, . . . , k−1}. Hence the number of graphs is (n−1)!.
2.2.25. If a graph G is graceful and Eulerian, then e(G) is congruent to 0
or 3 mod 4. Let f be a graceful labeling. The parity of the sum of the labels
on an edge is the same as the parity of their difference. Hence the sum
P
v∈V (G) d(v) f (v) has the same parity as the sum of the edge differences.
The ﬁrst sum is even, since G is Eulerian. The second has the same parity
as the number of odd numbers in the range from 1 to e(G). This is even if
and only if e(G) is congruent to 0 or 3 mod 4, which completes the proof.
2.2.26. The cycle Cn is graceful if and only if 4 divides n or n + 1. The ne-
cessity of the condition is a special case of Exercise 2.2.25. For sufﬁciency,
we provide a construction for each congruence class. We show an explicit
construction (n = 16 and n = 15) and a general construction for each class.
In the class where n + 1 is divisible by 4, we let n′ denote n + 1. When n is
divisible by 4, let n′ = n.
The labeling uses a base edge joining 0 and n′/2, plus two paths. The
bottom path, starting from 0, alternates labels from the top and bottom to
give the large differences: n, n−1, and so on down to n′/2+1. The top path,
starting from n′/2, uses labels working from the center to give the small
differences: 1, 2, and so on up to n′/2 −1. The label next to n′/2 is n′/2 −1
when 4 divides n, otherwise n′/2 + 1. When chosen this way, the two paths
reach the same label at their other ends to complete the cycle: n/4 in the
even case, 3n′/4 in the odd case. Checking this ensures that the intervals
of labels used do not overlap. Note that the value 3n/4 is not used in the
even case, and n′/4 is not used in the odd case.
•
•
•
•
•
•
•
•
0
16
1
15
8
7
9
6
•
•
•
•
•
•
•
•
2
14
3
13
10
5
11
4
•
•
•
•
•
•
•
•
0
n
1
n −1
n
2
n
2 −1
n
2 + 1
n
2 −2
· · ·
· · ·
•
•
•
•
•
•
•
•
n
4 −2
3n
4 + 2
n
4 −1
3n
4 + 1
3n
4 −2
n
4 + 1
3n
4 −1
n
4
•
•
•
•
•
•
•
•
0
15
1
14
8
9
7
10
•
•
•
•
•
•
•
2
13
3
12
6
11
5
•
•
•
•
•
•
•
•
0
n
1
n −1
n′
2
n′
2 + 1
n′
2 −1
n′
2 + 2
· · ·
· · ·
•
•
•
•
•
•
•
n′
4 −2
3n′
4 + 1
n′
4 −1
3n′
4
n′
4 + 2
3n′
4 −1
n′
4 + 1
2.2.27. The graph consisting of k copies of C4 with one common vertex is
graceful. The construction is illustrated below for k = 4. Let x be the
central vertex. Let the neighbors of x be y0, . . . , y2k−1, and let the remaining
vertices be z0, . . . , zk−1, such that N(zi) = {y2i, y2i+1}.
Deﬁne a labeling f by f (x) = 0, f (yi) = 4k −2i, and f (zi) = 4i +
1. The labels on y1, . . . , y2k are distinct positive even numbers, and those
on z1, . . . , zk are distinct odd numbers, so f is injective, as desired. The
differences on the edges from x are the desired distinct even numbers.
The differences on the remaining edges are odd and less than 2k; it
sufﬁces to show that their values are distinct. Involving zi, the differences
are 4k −1−8i and 4k −3−8i. Starting from z0 through increasing i, these
are 4k −1, 4k −3, 4k −9, 4k −11, . . .. Starting from zk−1 through decreasing
i, these are −4k + 5, −4k + 7, −4k + 13, −4k + 15, . . .. The absolute values
are distinct, as needed.
•
•
•
•
•
•
•
•
•
0
16
14
12
10
8
6
4
2
•
•
•
•
1
5
9
13
2.2.28. Given positive integers d1, . . . , dn, there exists a caterpillar with
vertex degrees d1, . . . , dn if and only if P di = 2n −2. If there is such a
caterpillar, it is a tree and has n −1 edges, and hence the vertex degrees
sum to n −2. Hence the condition is necessary. There are various proofs of
sufﬁciency, which construct a caterpillar with these degrees given only the
list d1, . . . , dn of positive numbers with sum 2n −2.
Proof 1 (explicit construction). We may assume that d1 ≥· · · ≥dk >
1 = dk+1 = · · · = dn.
Begin with a path of length k + 1 with vertices
v0, . . . , vk+1.
Augment these vertices to their desired degrees by adding
di −2 edges (and leaf neighbors) at vi, for 1 ≤i ≤k. This creates a cater-
pillar with vertex degrees d1, . . . , dk for the nonleaves. We must prove that
it has n −k leaves, which is the number of 1s in the list.
Including v0 and vk+1, the actual number of leaves in the caterpillar we
constructed is 2 + Pk
i=1(di −2). This equals 2 −2k + (Pn
i=1 di) −Pn
i=k+1 di.
Since Pn
i=1 di = 2n −2, the number of leaves is (2 −2k) + (2n −2) −(n −
k) = n −k, as desired. We have created an n-vertex caterpillar with vertex
degrees d1, . . . , dn.
Proof 2 (induction on n). Basis step (n = 2): the only list is 1, 1, and
the one graph realizing this is a caterpillar. Induction step (n > 2): n pos-
itive numbers summing to 2n −2 must include at least two 1s; otherwise,
the sum is at least 2n −1. If the remaining numbers are all 2s, then Pn
is a caterpillar with the desired degrees. Otherwise, some di exceeds 2; by

129
Chapter 2: Trees and Distance
Section 2.2: Spanning Trees and Enumeration
130
symmetry, we may assume that this is d1. Let d′ be the list obtained by re-
ducing d1 by one and deleting one of the 1s. The list d′ has n −1 entries, all
positive, and it sums to 2n −4 = 2(n −1) −2. By the induction hypothesis,
there is a caterpillar G′ with degree list d′.
Let x be a vertex of G′ with degree d′
1. Since d1 > 2, we have d′
1 ≥2,
and hence x is on the spinal path. Growing a leaf at x yields obtain a larger
caterpillar G with degree list d. This completes the induction step.
2.2.29. Every tree transforms to a caterpillar with the same degree list by
operations that delete an edge and add another rejoining the two compo-
nents. Let P be a longest path in the current tree T . If P is incident to
every edge, then T is a caterpillar. Otherwise a path P ′ of length at least
two leaves P at some vertex x. Let uv be an edge of P′, with u between x
and v, and let y be a neighbor of x on P.
Cut xy and add yu. Now cut uv and add vx. Each operation has the
speciﬁed type, and together they form a 2-switch preserving the vertex de-
grees. Also, the new tree has a path whose length is that of P plus dT (x, u).
Since the length of a path cannot exceed the number of vertices, this
process terminates. It can only terminate when the longest path is incident
to all edges and the tree is a caterpillar.
2.2.30. A connected graph is a caterpillar if and only if it can be drawn on
a channel without edge crossings.
Necessity. If G is a caterpillar, let P be the spine of G. Draw P on
a channel by alternating between the two sides of the channel. The re-
maining edges of G consist of a leaf and a vertex of P. If u, v, w are three
consecutive vertices on P, then v has an “unobstructed view” of the other
side of the channel between the edges vu and vw. Each leaf x adjacent to
v can be placed in that portion of the other bank, and the edge vx can then
be drawn straight across the channel without crossing another edge.
Sufﬁciency. Suppose that G is drawn on a channel. The endpoints
of an edge e cannot both have neighbors in the same direction along the
channel, since that would create a crossing. Hence G has no cycle, since a
cycle would leave an edge and return to it via the same direction along the
channel. We conclude that G is a tree.
If G contains the 7-vertex tree that is not a caterpillar, then let v be its
central vertex. The three neighbors of v occur on the other side of the chan-
nel in some order; let u be the middle neighbor. The other edge incident to
u must lie in one direction or the other from uv, contradicting the preceding
paragraph. Hence G avoids the forbidden subtree and is a caterpillar.
(Alternatively, we can prove this directly by moving along the channel
to extract the spine, observing that the remainder of the tree must be leaves
attached to the spine.)
2.2.31. Every caterpillar has an up/down labeling. Constructive proof.
Let P = v0, . . . , vk be a longest path in a caterpillar G with m edges; by the
argument above P is the spine of G. We iteratively construct a graceful
labeling f for G. Deﬁne two parameters l, u that denote the biggest low
label and smallest high label used; after each stage the unused labels are
{l + 1, . . . , u −1}. Let r denote the lowest edge difference achieved; after
each stage r, . . . , m have been achieved.
Begin by setting f (v0) = 0 and f (v1) = m; hence l = 0, u = m, r =
m.
Before stage i, we will have { f (vi), f (vi−1)} = {l, u}; this is true by
construction before stage 1. Suppose this is true before stage i, along with
the other claims made for l, u, d. Let d = dG(vi). In stage i, label the d −1
remaining neighbors of vi with the d −1 numbers nearest f (vi−1) that have
not been used, ending with vi+1. Since we start with | f (vi) −f (vi−1)| =
u −l = r, the new differences are r −1, . . . ,r −d + 1, which have not yet
been achieved. To ﬁnish stage i, reset r to r −d + 1; also, if f (xi−1) = l
reset l to l + d −1, but if f (xi−1) = u reset u to u −d + 1. Now stage i is
complete, and the claims about l, u,r are satisﬁed as we are ready to start
stage i +1: { f (vi+1), f (vi)} = {l, u}, r = u −l, and the edge differences so far
are r, . . . , m. After stage k −1, we have assigned distinct labels in {0, . . . , m}
to all m + 1 vertices, and the differences of labels of adjacent vertices are
all distinct, so we have constructed a graceful labeling.
The 7-vertex tree that is not a caterpillar has no up/down labeling. In
an up/down labeling of a connected bipartite graph, one partite set must
have all labels above the threshold and the other have all labels below
the threshold. Also, we can interchange the high side and the low side
by subtracting all labels from n −1. Hence for this 7-vertex tree we may
assume the labels on the vertices of degree 2 are the high labels 4,5,6.
Since 0,6 must be adjacent, this leaves two cases: 0 on the center or 0 on
the leaf next to 6. In the ﬁrst case, putting 1 or 2 next to 6 gives a difference
already present, but with 3 next to 6 we can no longer obtain a difference
of 1 on any edge. In the second case, we can only obtain a difference of 5 by
putting 1 on the center, but now putting 2 next to 5 gives two edges with
difference 3, while putting 2 next to 4 and 3 next to 5 give two edges with
difference 2. Hence there is no way to complete an up/down labeling.
2.2.32. There are 2n−4 + 2⌊(n−4)/2⌋isomorphism classes of n-vertex caterpil-
lars. We describe caterpillars by binary lists. Each 1 represents an edge on
the spine. Each 0 represents a pendant edge at the spine vertex between
the edges corresponding to the nearest 1s on each side. Thus n-vertex cater-
pillars correspond to binary lists of length n −1 with both end bits being 1.
We can generate the lists for caterpillars from either end of the spine;
reversing the list yields a caterpillar in the same isomorphism class. Hence

131
Chapter 2: Trees and Distance
Section 2.3: Optimization and Trees
132
we count the lists, add the symmetric lists, and divide by 2. There are 2n−3
lists of the speciﬁed type. To make a symmetric list, we specify ⌈(n −3)/2⌉
bits. Thus the result is (2n−3 + 2⌈(n−3)/2⌉)/2.
2.2.33. If T is an orientation of a tree such that the heads of the edges are
all distinct, then T is a union of paths from the root (the one vertex that is
not a head), and each each vertex is reached by one path from the root. We
use induction on n, the number of vertices. For n = 1, the tree with one
vertex satisﬁes all the conditions. Consider n > 1. Since there are n −1
edges, some vertex is not a tail. This vertex v is not the root, since the root
is the tail of all its incident edges. Since the heads are distinct, v is incident
to only one edge and is its head. Hence T −v is an orientation of a smaller
tree where the heads of the edges are distinct. By the induction hypothesis,
it is a tree of paths from the root (one to each vertex), and replacing the
edge to v preserves this desired conclusion for the full tree.
2.2.34. An explicit de Bruijn cycle of length 2n is generated by starting
with n 0’s and subsequently appending a 1 when doing so does not repeat
a previous string of length n (otherwise append a 0). A de Bruijn cycle is
formed by recording the successive edge labels along an Eulerian circuit in
the de Bruijn digraph. The vertices of the de Bruijn digraph are the 2n−1
binary strings of length n −1. From each vertex two edges depart, labeled
0 and 1. The edge 0 leaving v goes to the vertex obtained by dropping the
ﬁrst bit of v and appending 0 at the end. The edge 1 leaving v goes to the
vertex obtained by dropping the ﬁrst bit of v and appending 1 at the end.
Let v0 denote the all-zero vertex, and let e be the loop at v0 labeled
0. The 2n−1 −1 edges labeled 0 other than e form a tree of paths in to v0.
(Since a path along these edges never reintroduces a 1, it cannot return to a
vertex with a 1 after leaving it.) Starting at v0 along edge e means starting
with n 0’s. Algorithm 2.4.7 now tells us to follow the edge labeled 1 at every
subsequent step unless it has already been used; that is, unless appending
a 1 to the current list creates a previous string of length n. Theorem 2.4.9
guarantees that the result is an Eulerian circuit.
2.2.35. Tarry’s Algorithm (The Robot in the Castle). The rules of motion
are: 1) After entering a corridor, traverse it and enter the room at the other
end. 2) After entering a room whose doors are all unmarked, mark I on
the door of entry. 3) When in a room having an unmarked door, mark O
on some unmarked door and exit through it. 4) When in a room having all
doors marked, ﬁnd one not marked O (if one exists), and exit through it. 5)
When in a room having all doors marked O, STOP.
When in a room other than the original room u, the number of entering
edges that have been used exceeds the number of exiting edges. Thus an
exiting door has not yet been marked O. This implies that the robot can
only terminate in the original room u.
The edges marked I grow from u a tree of paths that can be followed
back to u. The rules for motion establish an ordering of the edges leaving
each room so that the edge labeled I (for a room other than u) is last.
In order to terminate in u or to leave a room v by the door marked I,
every edge entering the room must have been used to enter it, including
all edges marked I at the other end. Therefore, for every room actually
entered, the robot follows all its incident corridors in both directions.
Thus it sufﬁces to show that every room is reached. Let V be the set of
all rooms, and let S be the set of rooms reached in a particular robot tour. If
S ̸= V , then since the castle is connected there is a corridor joining rooms
s ∈S and r /∈S (the shortest path between S and S. Since every reached
vertex has its incidence corridors followed in both directions, the corridor
sr is followed, and r is also reached. The contradiction yields S = V .
Comment. Consider a digraph in which each corridor becomes a pair
of oppositely-directed edges. Thus indegree equals outdegree at each ver-
tex. The digraph is Eulerian, and the edges marked I form an intree to the
initial vertex. The rules for the robot produce an Eulerian circuit by the
method in Algorithm 2.4.7.
The portion of the original tour after the initial edge e = uv is not a
tour formed according to the rules for a tour in G−e, because in the original
tour no door of u is ever marked I. If e is not a cut-edge, then tours that
follow e, follow G −e from v, and return along e do not include tours that
do not start and end with e. There may be such tours, as illustrated below,
so such a proof falls into the induction trap.
•
•
•
•
•
u
v
e
2.3. OPTIMIZATION AND TREES
2.3.1. In an edge-weighting of Kn, the total weight on every cycle is even if
and only if the total weight on every triangle is even. Necessity is trivial,
since triangles are cycles. For sufﬁciency, suppose that every triangle has
even weight. We use induction on the length to prove that every cycle C
has even weight. The basis step, length 3, is given by hypothesis. For the

133
Chapter 2: Trees and Distance
Section 2.3: Optimization and Trees
134
induction step, consider a cycle C and a chord e. The chord creates two
shorter cycles C1, C2 with C. By the induction hypothesis, C1 and C2 have
even weight. The weight of C is the sum of their weights minus twice the
weight of e, so it is still even.
2.3.2. If T is a minimum-weight spanning tree of a weighted graph G, then
the u, v-path in T need not be a minimum-weight u, v-path in G. If G is a
cycle of length of length at least 3 with all edge weights 1, then the cheapest
path between the endpoints of the edge omitted by T has cost 1, but the
cheapest path between them in T costs n(G) −1.
2.3.3. Computation of minimum spanning tree.
The matrix on the left
below corresponds to the weighted graph on the right. Using Kruskal’s
algorithm, we iteratively select the cheapest edge not creating a cycle.
Starting with the two edges of weight 3, the edge of weight 5 is forbidden,
but the edge of weight 7 is available. The edge of weight 8 completes the
minimum spanning tree, total weight 21. Note that if the edge of weight
8 had weight 10, then either of the edges of weight 9 could be chosen to
complete the tree; in this case there would be two spanning trees with the
minimum value.


0
3
5
11
9
3
0
3
9
8
5
3
0
∞
10
11
9
∞
0
7
9
8
10
7
0


•
•
•
•
•
1
2
3
4
5
3
5
11
9
3
9
8
10
7
2.3.4. Weighted trees in K1 ∨C4. On the left, the spanning tree is unique,
using all edges of weights 1 and 2. On the right it can use either edge of
weight 2 and either edge of weight 3 plus the edges of weight 1.
•
•
•
•
•
1
1
2
2
3
3
4
4
•
•
•
•
•
1
4
3
1
3
4
2
2
2.3.5. Shortest paths in a digraph. The direct i to j travel time is the entry
ai, j in the ﬁrst matrix below. The second matrix recordes the least i to j
travel time for each pair i, j. These numbers were determined for each i
by iteratively updating candidate distances from i and then selecting the
closest of the unreached set (Dijkstra’s Algorithm). To do this by hand,
make an extra copy of the matrix and use crossouts to update candidate
distances in each row, using the original numbers when updating candidate
distances. The answer can be presented with more information by drawing
the tree of shortest paths that grows from each vertex.


0
10
20
∞
17
7
0
5
22
33
14
13
0
15
27
30
∞
17
0
10
∞
15
12
8
0


→


0
10
15
25
17
7
0
5
20
24
14
13
0
15
25
30
25
17
0
10
22
15
12
8
0


2.3.6. In an integer weighting of the edges of Kn, the total weight is even
on every cycle if and only if the subgraph consisting of the edges with odd
weight is a spanning complete bipartite subgraph.
Sufﬁciency.
Every cycle contains an even number of edges from a
spanning complete bipartite subgraph.
Necessity. Suppose that the total weight on every cycle is even. We
claim that every component of the spanning subgraph consisting of edges
with even weight is a complete graph. Otherwise, it has two vertices x, y
at distance 2, which induce P3 with their common neighbor z. Since xy has
odd weight, x, y, z would form a cycle with odd total weight.
If the spanning subgraph of edges with even weight has at least three
components, then selecting one vertex from each of three components yields
a triangle with odd weight. Hence there are at most two components. This
implies that the complement (the graph of edges with odd weight) is a
spanning complete bipartite subgraph of G.
2.3.7. A weighted graph with distinct edge weights has a unique minimum-
weight spanning tree (MST).
Proof 1 (properties of spanning trees). If G has two minimum-weight
spanning trees, then let e be the lightest edge of the symmetric difference.
Since the edge weights are distinct, this weight appears in only one of the
two trees. Let T be this tree, and let T ′ be the other. Since e ∈E(T )−E(T ′),
there exists e′ ∈E(T ′) −E(T ) such that T ′ + e −e′ is a spanning tree. By
the choice of e, w(e′) > w(e). Now w(T ′ + e −e′) < w(T ′), contradicting the
assumption that T ′ is an MST. Hence there cannot be two MSTs.
Proof 2 (induction on k = e(G) −n(G) + 1). If k = 0, then G is a
tree and has only one spanning tree. If k > 0, then G is not a tree; let e
be the heaviest edge of G that appears in a cycle, and let C be the cycle
containing e. We claim that e appears in no MST of G. If T is a spanning
tree containing e, then T omits some edge e′ of C, and T −e+e′ is a cheaper
spanning tree than T . Since e appears in no MST of G, every MST of G is
an MST of G −e. By the induction hypothesis, there is only one such tree.

135
Chapter 2: Trees and Distance
Section 2.3: Optimization and Trees
136
Proof 3 (Kruskal’s Algorithm). In Kruskal’s Algorithm, there is no
choice if there are no ties between edge weights. Thus the algorithm can
produce only one tree. We also need to show that Kruskal’s Algorithm can
produce every MST. The proof in the text can be modiﬁed to show this; if e
is the ﬁrst edge of the algorithm’s tree that is not in an MST T ′, then we
obtain an edge e′ with the same weight as e such that e′ ∈E(T ′) −E(T )
and e′ is available when e is chosen. The algorithm can choose e′ instead.
Continuing to modify the choices in this way turns T into T ′.
2.3.8. No matter how ties are broken in choosing the next edge for Kruskal’s
Algorithm, the list of weights of a minimum spanning tree (in nondecreas-
ing order) is unique. We consider edges in nondecreasing order of cost. We
prove that after considering all edges of a particular cost, the vertex sets of
the components of the forest built so far is the same independent of the or-
der of consideration of the edges of that cost. We prove this by induction on
the number of different cost values that have been considered. At the start,
none have been considered and the forest consists of isolated vertices.
Before considering the edges of cost x, the induction hypothesis tells
us that the vertex sets of the components of the forest are ﬁxed. Let H be a
graph with a vertex for each such component, and put two vertices adjacent
in H if G has an edge of cost x joining the corresponding two components.
Suppose that H has k vertices and l components. Independent of the order
in which the algorithm consider the edges of cost x, it must select some
k −l edges of cost x in G, and it cannot select more, since this would create
a cycle among the chosen edges.
2.3.9. Among the cheapest spanning trees containing a spanning forest F is
one containing the cheapest edge joining components of F. Let T be a cheap-
est spanning tree containing F. If e /∈E(T ), then T +e contains exactly one
cycle, since T has exactly one u, v-path. Since u, v belong to distinct com-
ponents of F, the u, v-path in T contains another edge e′ between distinct
components of F. If e′ costs more than e, then T ′ = T −e′ + e is a cheaper
spanning tree containing F, which contradicts the choice of T . Hence e′
costs the same as e, and T ′ contains e and is a cheapest spanning tree con-
taining F. Applying this statement at every step of Kruskal’s algorithm
proves that Kruskal’s algorithm ﬁnds a minimum weight spanning tree.
2.3.10. Prim’s algorithm produces a minimum-weight spanning tree. Let
v1 be the initial vertex, let T be the tree produced, and let T ∗be an optimal
tree that agrees with T for the most steps. Let e be the ﬁrst edge chosen for
T that does not appear in T ∗, and let U be the set of vertices in the subtree
of T that has been grown before e is added. Adding e to T ∗creates a cycle
C; since e links U to U, C must contain another edge e′ from U to U.
Since T ∗+ e −e′ is another spanning tree, the optimality of T ∗yields
w(e′) ≤w(e). Since e′ is incident to U, e′ is available for consideration
when e is chosen by the algorithm; since the algorithm chose e, we have
w(e) ≤w(e′). Hence w(e) = w(e′), and T ∗+ e −e′ is a spanning tree with
the same weight as T ∗. It is thus an optimal spanning tree that agrees
with T longer than T ∗, which contradicts the choice of T ∗.
•
•
•
•
U
U
e′
e
2.3.11. Every minimum-weight spanning tree achieves the minimum of the
maximum weight edge over all spanning trees. Let T be a minimum-weight
spanning tree, and let T ∗be one that minimizes the maximum weight edge.
If T does not, then T has an edge e whose weight is greater than the weight
of every edge in T ∗. If we delete e from T , Then we can ﬁnd an edge e∗∈
E(T ∗) that joins the components of T −e, since T ∗is connected.
Since
w(e) > w(e∗), the weight of T −e + e′ is less than the weight of T , which
contradicts the minimality of T . Thus T has the desired property.
2.3.12. The greedy algorithm cannot guarantee minimum weight span-
ning paths. This fails even on four vertices with only three distinct vertex
weights. If two incident edges have the minimum weight a, such as a = 1,
the algorithm begins by choosing them. If the two edges completing a 4-
cycle with them have maximum weight c, such as c = 10, then one of those
must be chosen to complete a path of weight 2a + c. However, if the other
two edges have intermediate weight b, such as b = 2, there is a path of
weight 2b + a, which will be cheaper whenever b < (a + c)/2. For n > 4,
the construction generalizes in many possible ways using three weights
a < b < c. A path of length n −2 having weight a for each edge and weight
c for the two edges completing the cycle yields a path of weight (n −2)a + c
by the greedy algorithm, but if all other weights equal b there is a path of
weight 2b + (n −3)a, which is cheaper whenever b < (a + c)/2.
2.3.13. If T and T ′ are spanning trees in a weighted graph G, with T having
minimum weight, then T ′ can be changed into T by steps that exchange one
edge of T ′ for one edge of T so that the edge set is always a spanning tree and
the total weight never increases. It sufﬁces to ﬁnd one such step whenever
T ′ is different from T ; the sequence then exists by using induction on the
number of edges in which the two trees differ.

137
Chapter 2: Trees and Distance
Section 2.3: Optimization and Trees
138
Choose any e′ ∈E(T ′) −E(T ). Deleting e′ from T ′ creates two com-
ponents with vertex sets U, U ′. The path in T between the endpoints of e′
must have an edge e from U to U ′; thus T ′ −e′ + e is a spanning tree. We
want to show that w(T ′ −e′ + e) ≤w(T ′).
Since e is an edge of the path in T between the endpoints of e′, the edge
e belongs to the unique cycle in T created by adding e′ to T . Thus T + e′ −e
is also a spanning tree. Because T −e + e′ is a spanning tree and T has
minimum weight, w(e) ≤w(e′). Thus T ′ −e′ + e moves from T ′ toward T
without increasing the weight.
2.3.14. When e is a heaviest edge on a cycle G in a connected weighted
graph G, there is a minimum spanning tree not containing e. Let T be a
minimum spanning tree in G. If e ∈E(T ), then T −e has two components
with vertex sets U and U ′. The subgraph C −e is a path with endpoints in
U and U ′; hence it contains an edge e′ joining U and U ′. Since w(e′) ≤w(e)
by hypothesis, T −e + e′ is a tree as cheap as T that avoids e.
Given a weighted graph, iteratively deleting a heaviest non-cut-edge
produces a minimum spanning tree. A non-cut-edge is an edge on a cycle.
A heaviest such edge is a heaviest edge on that cycle.
We have shown
that some minimum spanning tree avoids it, so deleting it does not change
the minimum weight of a spanning tree. This remains true as we delete
edges. When no cycles remain, we have a connected acyclic subgraph. It
is the only remaining spanning tree and has the minimum weight among
spanning trees of the original graph.
2.3.15. If T is a minimum spanning tree of a connected weighted graph G,
then T omits some heaviest edge from every cycle of G.
Proof 1 (edge exchange). Suppose e is a heaviest edge on cycle C. If
e ∈E(T ), then T −e is disconnected, but C −e must contain an edge e′
joining the two components of T −e. Since T has minimum weight, T −e+e′
has weight as large as T , so w(e′) ≥w(e). Since e has maximum weight on
C, equality holds, and T does not contain all the heaviest edges from C.
Proof 2 (Kruskal’s algorithm). List the edges in order of increasing
weight, breaking ties by putting the edges of a given weight that belong
to T before those that don’t belong to T . The greedy algorithm (Kruskal’s
algorithm) applied to this ordering L yields a minimum spanning tree, and
it is precisely T . Now let C be an arbitrary cycle in G, and let e1, . . . , ek be
the edges of C in order of appearance in L; ek = uv is a heaviest edge of C.
It sufﬁces to show that ek does not appear in T . For each earlier edge ei of
C, either ei appears in T or ei is rejected by the greedy algorithm because it
completes a cycle. In either case, T contains a path between the endpoints
of ei. Hence when the algorithm considers ek, it has already selected edges
that form paths joining the endpoints of each other edge of C. Together,
these paths form a u, v-walk, which contains a u, v-path. Hence adding ek
would complete a cycle, and the algorithm rejects ek.
2.3.16. Four people crossing a bridge. Name the people 10, 5, 2, 1, respec-
tively, according to the number of minutes they take to cross when walking
alone. To get across before the ﬂood, they can ﬁrst send {1, 2} in time 2.
Next 1 returns with the ﬂashlight in time 1, and now {5, 10} cross in time
10. Finally, 2 carries the ﬂashlight back, and {1, 2} cross together again.
The time used is 2 + 1 + 10 + 2 + 2 = 17. The key is to send 5 and 10
together to avoid a charge of 5.
To solve the problem with graph theory, make a vertex for each possible
state. A state consists of a partition of the people into the two banks, along
with the location of the ﬂashlight. There is an edge from state A to state
B if state A is obtained from state B by moving one or two people (and the
ﬂashlight) from the side of A that has the ﬂashlight to the other side. The
problem is to ﬁnd a shortest path from the initial state (10, 5, 2, 1, F|∅) to
the ﬁnal state (∅|10, 5, 2, 1, F). Dijkstra’s algorithm ﬁnds such a path.
There are many vertices and edges in the graph of states. The path
corresponding to the solution in the ﬁrst paragraph passes through the ver-
tices (10, 5|2, 1, F), (10, 5, 1, F|2), (1|10, 5, 2, F), (2, 1, F|10, 5), (10, 5, 2, 1).
2.3.17. The BFS algorithm computes d(u, z) for every z ∈V (G). The algo-
rithm declares vertices to have distance k when searching vertices declared
to have distance k −1. Since vertices are searched in the order in which
they are found, all vertices declared to have distance less than k −1 are
searched before any vertices declared to have distance k −1.
We use induction on d(u, z). When d(u, z) = 0, we have u = z, and
initial declaration is correct.
When d(u, z) > 0, let W be the set of all
neighbors of z along shortest z, u-paths. Since d(u, W) = d(u, z) −1, the
induction hypothesis implies that the algorithm computes d(u, v) correctly
for all v ∈W. Also, the preceding paragraph ensures that z will not be
found before any vertices of W are searched. Hence when a vertex of W is
searched, z will be found and assigned the correct distance.
2.3.18. Use of Breadth-First Search to compute the girth of a graph. When
running BFS, reaching a vertex that is already in the list of vertices already
reached creates a second path from the root to that vertex. Following one
path and back the other is a closed path in which the edges reaching the
new vertex occur only once, so they lie on a cycle.
When the root is a vertex of a shortest cycle, the sum of the two lengths
to the reached vertex is the length of that cycle. The sum can never be
smaller. Thus we run BFS from each vertex as root until we ﬁnd a vertex
repeatedly, record the sum of the lengths of the two paths, and take the
smallest value of this over all choices of the root.

139
Chapter 2: Trees and Distance
Section 2.3: Optimization and Trees
140
2.3.19. Computing diameter of trees. From a arbitrary vertex w, we ﬁnd
a maximally distant vertex u (via BFS), and then we ﬁnd a vertex v maxi-
mally distant from u (via BFS). We show that d(y, z) ≤d(u, v) for all y, z ∈
V (T ). Because v is at maximum distance from u, this holds if u ∈{y, z}, so
we may assume that u /∈{y, z}.
We use that each vertex pair in a tree is connected by a unique path.
Let r be the vertex at which the w, y-path separates from the w, u-path.
Let s be the vertex at which the w, z-path separates from the w, u-path.
By symmetry, we may assume that r is between w and s. Since d(w, u) ≥
d(w, z), we have d(s, u) ≥d(s, z). Now
d(y, z) = d(y,r)+d(r, s)+d(s, z) ≤d(y,r)+d(r, s)+d(s, u) = d(y, u) ≤d(v, u).
•
•
•
•
y
u
z
w
r
s
2.3.20. Minimum diameter spanning tree. An MDST is a spanning tree
in which the maximum length of a path is as small as possible. Intuition
suggests that running Dijkstra’s algorithm from a vertex of minimum ec-
centricity (a center) will produce an MDST, but this may fail.
a) Construct a 5-vertex example of an unweighted graph (edge weights
all equal 1) in which Dijkstra’s algorithm can be run from some vertex of
minimum eccentricity and produce a spanning tree that does not have min-
imum diameter. Answer: the chin of the bull.
(Note: when there are multiple candidates with the same distance
from the root, or multiple ways to reach the new vertex with minimum dis-
tance, the choice in Dijkstra’s algorithm can be made arbitrarily.)
b) Construct a 4-vertex example of a weighted graph such that Dijk-
stra’s algorithm cannot produce an MDST when run from any vertex.
2.3.21. Algorithm to test for bipartiteness. In each component, run the BFS
search algorithm from a given vertex x, recording for each newly found
vertex a distance one more than the distance for the vertex from which
it is found.
By the properties of distance, searching from a vertex v to
ﬁnd a vertex w may discover d(x, w) = d(x, v) −1 or d(x, w) = d(x, v) or
d(x, w) = d(x, v) + 1 (if w is not yet in the set found).
If the second case ever arises, then we have adjacent vertices at the
same distance from x, and there is an odd cycle in the graph. Otherwise,
at the end we form a bipartition that partions the vertices according to the
parity of their distance from x.
2.3.22. The Chinese Postman Problem in the k-dimensional cube Qk, with
every edge having weight 1. If k is even, then no duplicate edges are needed,
since Qk is k-regular; total cost is k2k−1. If k is odd, then a duplicated edge
is needed at every vertex. It sufﬁces to duplicate the matching across the
last coordinate. Thus the total cost in this case is (k + 1)2k−1.
2.3.23. The Lazy Postman. The postman’s trail must cover every edge and
contribute even degree to each vertex except the start P and end H. In
the example given, C,D,G,H have the wrong parity. Hence the duplicated
edges must consist of two paths that pair these vertices (with least total
distance), since this will change the degree parity only for the ends of the
paths. If we pair them as DG and CH, then the shortest paths are DEIFG
and CBEIH, totaling 18 extra (obviously not optimal since both use EI). If
CG and DH, then the paths are (CBEIFG or CPAFG) and DEIH, totaling
18 in either case. If CD and GH, then the paths are CBED and GFIH,
totaling 15. Hence the edges in the paths CBED and GFIH are traveled
twice; all others are traveled once.
2.3.24. Chinese Postman Problem. Solving the Chinese Postman problem
on a weighted graph with 2k vertices of odd degree requires duplicating
the edges in a set of k trails that pair up the vertices of odd degree as
endpoints. The only vertices of a trail that have odd degree in the trail are
its endpoints. If some u, v-trail T in the optimal solution is not a path, then
it contains a u, v-path P. In P, every vertex degree is even, except for the
endpoints. Hence using P instead of T to join u and v does not change the
parity on any vertex and yields smaller total weight.
Since no edge need be used thrice, the duplicated trails in an optimal
solution are pairwise edge-disjoint. As in the example below, they need not
be vertex-disjoint. With four vertices of odd degree, two paths are required,
and the cheapest way is to send both through the central vertex.
•
•
•
•
•
1 1
1
1
3
3
3
3
2.3.25. If G is an n-vertex rooted plane tree in which every vertex has 0 or
k children, then n = tk + 1 for some integer t.
Proof 1 (Induction). We use induction on the number of non-leaf ver-
tices. When there are no such vertices, the root is the only vertex, and the
formula works with t = 0. When the tree T is bigger, ﬁnd a leaf at maxi-
mum distance from the root, and let x be its parent. By the choice of x, all

141
Chapter 2: Trees and Distance
Section 2.3: Optimization and Trees
142
children of x are leaves. Deleting the children of x yields a tree T ′ with one
less non-leaf vertex and k fewer total vertices. By the induction hypothesis,
n(T ′) = tk + 1 for some t, and thus n(T ) = (t + 1)k + 1.
Proof 2 (Degree counting). If T has n vertices, then it has n −1 edges,
and the degree-sum is 2n −2. If n > 1, then the root has degree l, the other
t −1 non-leaf vertices each have degree k + 1, and the n −t leaves each
have degree 1. Thus 2n −2 = k + (t −1)(k + 1) + (n −t). This simpliﬁes to
n = tk + 1.
2.3.26. A recurrence relation to count the binary trees with n +1 leaves. Let
an be the desired number of trees. When n = 0, the root is the only leaf.
When n > 0, each tree has some number of leaves, k, in the subtree rooted
at the left child of the root, where 1 ≤k ≤n. We can root any binary tree
with k leaves at the left child and any binary tree with n−k+1 leaves at the
right child. Summing over k counts all the trees. Thus an = Pn
k=1 ak−1an−k
for n > 0, with a0 = 1. (Comment: These are the Catalan numbers.)
2.3.27. A recurrence relation for the number of rooted plane trees with n
vertices. Let an be the desired number of trees. When n = 1, there is one
tree. When n > 1, the root has a child. The subtree rooted at the leftmost
child has some number of vertices, k, where 1 ≤k ≤n −1. The remainder
of the tree is a rooted subtree with the same root as the original tree; it has
n −k vertices. We can combine any tree of the ﬁrst type with any tree of the
second type. Summing over k counts all the trees. Thus an = Pn−1
1=k akan−k
for n > 1, with a1 = 1. (Comment: This is the same sequence as in the
previous problem, with index shifted by 1.)
2.3.28. A code with minimum expected length for messages with relative
frequencies 1,2,3,4,5,5,6,7,8,9. Iteratively combining least-frequent items
and reading paths from the resulting tree yields the codes below. Some
variation in the codes is possible, but not in their lengths. The average
length (weighted by frequency!) is 3.48.
frequency
1
2
3
4
5
5
6
7
8
9
code
00000
00001
0001
100
101
110
111
001
010
011
length
5
5
4
3
3
3
3
3
3
3
2.3.29. Computation of an optimal code. Successive combination of the
cheapest pairs leads to a tree. For each letter, we list the frequency and
the depth of the corresponding leaf, which is the length of the associated
codeword. The assignment of codewords is not unique, but the set (with
multiplicities) of depths for each frequency is. Given frequencies fi, with
associated lengths li and total frequency T , the expected length per char-
acter is P fili/T . For the given frequencies, this produces expected length
of (7 · 4 + 6 · 19 + 5 · 21 + 4 · 26 + 3 · 30)/100 = 4.41 bits per character, which
is less than the 5 bits of ASCII.
A B C D
E
F G H I
J K L M N O P Q R S T U V W
X Y
Z ∅
9
2
2
4 12 2
3
2 9 1
1
4
2
6
8
2
1
6 4 6
4
2
2
1
2 1
2
3
6
6
5
3
6
5
6 3 7
7
5
6
4
4
6
7
4 5 4
5
6
6
7
6 6
5
2.3.30. Optimal code for powers of 1/2.
a) the two smallest probabilities are equal. Let pn, pn−1 be smallest
and second smallest probabilities in the distribution.
Each probability
other than pn is a multiple of pn−1. If pn < pn−1, then the sum of all the
probabilities is not a multiple of pn−1. This contradicts Pn
i=1 pi = 1, since
1 is a multiple of pn−1.
b) The expected message length of the optimal (Huffman) code for such
a distribu tion is −P pi lg pi. We use induction on n to prove that each
item with probability (1/2)k is assign to a leaf at length k from the root; this
yields the stated formula. For n = 1 and p1 = 1, the one item has message
length 0, as desired. For larger n, the Huffman tree is obtained by ﬁnding
the optimal tree for the smaller set q1, . . . , qn−1 (where qn−1 = pn + pn−1
and qi = pi for 1 ≤i ≤n) and extending the tree at the leaf for qn−1 to
leaves one deeper for pn−1 and pn. By part (a), qn−1 = 2pn−1 = 2pn. By
the induction hypothesis, the depth of the leaf for qn−1 is −lg qn−1, and
for p1, . . . , pn−2 it is as desired. The new leaves for pn−1, pn have depth
+1 −lg qn−1 = −lg pn−1 = −lg pn, as desired.
2.3.31. For every probability distribution {pi} on n messages and every bi-
nary code for these messages, the expected length of a code word is at least
−P pi lg pi. Proof by induction on n. For n = 1 = p1, the entropy and the
expected length for the optimal code both equal 0; there is no need to use
any digits. For n > 1, let W be the words in an optimal code, with W0, W1
denoting the sets of code words starting with 0,1, respectively. If all words
start with the same bit, then the code is not optimal, because the code ob-
tained by deleting the ﬁrst bit of each word has smaller expected length.
Hence W0, W1 are codes for smaller sets of messages. Let q0, q1 be the sum
of the probabilities for the messages in W0, W1. Normalizing the pi’s by q0
or q1 gives the probability distributions for the smaller codes. Because the
words within W0 or W1 all start with the same bit, their expected length is
at least 1 more than the optimal expected length for those distributions.
Applying the induction hypothesis to both W0 and W1, we ﬁnd that the
expected length for W is at least q0[1−P
i∈W0
pi
q0 lg pi
q0 ] + q1[1−P
i∈W1
pi
q1 lg pi
q1 ]
= 1 −P
i∈W0 pi(lg pi −lg q0) −P
i∈W1 pi(lg pi −lg q1) = 1 + q0 lg q0 + q1 lg q1 −
P pi lg pi. It sufﬁces to prove that 1+q0 lg q0+q1 lg q1 ≥0 when q0+q1 = 1.
Because f (x) = x lg x is convex for 0 < x < 1 (since f ′′(x) = 1/x > 0), we
have 1 + f (x) + f (1 −x) ≥1 + 2 f (.5) = 0.

143
Chapter 3: Matchings and Factors
Section 3.1: Matchings and Covers
144
3.MATCHINGS AND FACTORS
3.1. MATCHINGS AND COVERS
3.1.1. Examples of maximum matchings. In each graph below, we show a
matching in bold and mark a vertex cover of the same size. We know that
the matching has maximum size and the vertex cover has minimum size
because the size of every matching in a graph is at most the size of every
vertex cover in the graph.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
3.1.2. The minimum size of a maximal matching in Cn is ⌈n/3⌉. Suppose
that Cn has a matching of size k. The n −2k unmatched vertices fall into
k “buckets” between matched edges around the cycle.
The matching is
maximal if and only if none of the buckets contain two vertices. By the
pigeonhole principle, there must be some such bucket if n −2k ≥k + 1;
hence a matching of size k cannot be maximal if k ≤(n −1)/3.
On the other hand, if n −2k ≤k and k ≤n/2, then we can match two
vertices and skip one until we have skipped n−2k, which avoids having two
vertices in one bucket. Hence Cn has a maximal matching of size k ≤n/2
if and only if 3k ≥n. We conclude that the minimum size of a maximal
matching in Cn is ⌈n/3⌉.
3.1.3. If S ⊆V (G) is saturated by some matching in G, then S is saturated
by some maximum matching. If M saturates S, then the characterization
of maximum matchings implies that a maximum matching M ∗can be ob-
tained from M by a sequence of alternating path augmentations. Although
edges may be lost in an augmentation, each augmentation continues to sat-
urated all saturated vertices and enlarges the saturated set by 2. Thus S
remains saturated in M∗
When S ⊆V (G) is saturated by some matching in G, it need not be true
that S is saturated by every maximum matching. When G is an odd cycle,
all maximum matchings omit distinct vertices.
3.1.4. Let G be a simple graph.
α(G) = 1 if and only if G is a complete graph.
The independence
number is 1 if and only if no two vertices are nonadjacent.
α′(G) = 1 if and only if G consiste of isolated vertices plus a triangle
or nontrivial star. Deleting the vertices of one edge in such a graph leaves
no edges remaining. Conversely, suppose that α′(G) = 1, and ignore the
isolated vertices. Let v be a vertex of maximum degree. If every edge is
incident to v, then G is a star. Otherwise, an edge e not incident to v shares
an endpoint with every edge incident to v. Since e has only two endpoints,
d(v) = 2, and there is only one such edge e. Thus G is a triangle.
β(G) = 1 if and only if G is a nontrivial star plus isolated vertices. The
vertex cover number is 1 if and only if one vertex is incident to all edges.
β′(G) = 1 if and only if G = K2. Since every edge covers two vertices,
β′(G) = 1 requires that n(G) = 2, and indeed β′(K2) = 1.
3.1.5. α(G) ≥
n(G)
1(G)+1 for every graph G. Form an independent set S by
iteratively selecting a remaining vertex for S and deleting that vertex and
all its neighbors. Each step adds one vertex to S and deletes at most 1(G)+
1 vertices from G. Hence we perform at least n(G)/(1(G) + 1) steps and
obtain an independent set at least that big.
3.1.6. If T is a tree with n vertices and independence number k, then α′(T ) =
n −k. The vertices outside a maximum independent set form a vertex cover
of size n −k. Since trees are bipartite, the K¨onig–Egerv´ary Theorem then
applies to yield α′(T ) = β(T ) = n −α(T ) = n −k.
3.1.7. A graph G is bipartite if and only if α(H) = β′(H) for every subgraph
H having no isolated vertices. If G is bipartite, then every subgraph H of
G is bipartite, and by K¨onig’s Theorem the number of edges of H needed
to cover V (H) equals α(H) if H has no isolated vertices. If G is not bipar-
tite, then G contains an odd cycle H, and this subgraph H has no isolated
vertices and requires α(H) + 1 edges to cover its vertices.
3.1.8. Every tree T has at most one perfect matching.
Proof 1 (contradiction). Let M and M′ be perfect matchings in a tree.
Form the symmetric difference of the edge sets, M△M ′. Since the matchings
are perfect, each vertex has degree 0 or 2 in the symmetric difference, so
every component is an isolated vertex or a cycle. Since the tree has no
cycle, every vertex must have degree 0 in the symmetric difference, which
means that the two matchings are the same.
Proof 2 (induction). For the basis step, a tree with one vertex has no
perfect matching; a tree with two vertices has one. For the induction step,
consider an arbitrary tree T on n > 2 vertices, and consider a leaf v. In any
perfect matching, v must be matched to its neighbor u. The remainder of

145
Chapter 3: Matchings and Factors
Section 3.1: Matchings and Covers
146
any matching is a matching in T −{u, v}. Since each perfect matching in
T must contain the edge uv, the number of perfect matchings in T equals
the number of perfect matchings in T −{u, v}.
Each component of T −{u, v} is a tree; by the induction hypothesis,
each component has at most one perfect matching. The number of perfect
matchings in a graph is the product of the number of perfect matchings in
each component, so the original T has at most one perfect matching. (More
generally, a forest has at most one perfect matching.)
3.1.9. Every maximal matching in a graph G has size at least α′(G)/2.
Proof 1 (counting and contrapositive). Let M ∗be a maximum match-
ing, and let M be another matching.
We show that if |M| < α′(G)/2,
then M is not a maximal matching. Since M saturates 2 |M| vertices and
|M| < α′(G)/2, we conclude that M saturates fewer than α′(G) vertices.
This means that M cannot saturate a vertex of every edge of M ∗, and there
is some edge of M∗that can be added to enlarge M.
Proof 2 (augmenting paths). Let M be a maximal matching, and let M ∗
be a maximum matching. Consider the symmetric difference F = M△M ∗.
Since the number of edges from M and M∗in a component of F differ by at
most one, the symmetric difference contains at least |M∗|−|M| augmenting
paths. Since M is maximal, each augmenting path must contain an edge
of M (an M-augmenting path of length one is an edge that can be added to
M). Thus |M∗| −|M| ≤|M|, and we obtain |M| ≥|M∗| /2 = α′(G)/2.
Proof 3 (vertex covers). When M is a maximal matching, then the
vertices saturated by M form a vertex cover (if an edge had no vertex in
this set, then it could be added to M). Since every vertex cover has size at
least α′(G), we obtain 2 |M| ≥β(G) ≥α′(G).
3.1.10. If M and N are matchings in a graph G and |M| > |N|, then there
are matchings M′ and N ′ in G such that
M′ = |M| −1,
N ′ = |N| + 1,
M′ ∩N ′ = M ∩N, and M′ ∪N ′ = M ∪N. Consider the subgraph F of G
consisting of the edges in the symmetric difference M△N; this consists of
all edges belonging to exactly one of M and N. Since each of M and N is
a matching, every vertex has at most one incident edge in M and at most
one incident edge in N. Hence the degree of every vertex in F is at most 2.
The components of a graph with maximum degree 2 are paths and
cycles. A path or cycle in F alternates edges between M and N. Since
|M| > |N|, F has a component with more edges of M than of N. Such a
component can only be a path P that starts and ends with an edge of M.
Form M′ from M by replacing M ∩E(P) with N ∩E(P); this reduces the
size by one. Form N ′ from N by replacing N ∩E(P) with M ∩E(P); this
increases the size by one. Since we have only switched edges belonging to
exactly one of the sets, we have not changed the union or intersection.
3.1.11. If C and C′ are cycles in a graph G, then C△C′ decomposes into
cycles.
Since even graphs decompose into cycles (Proposition 1.2.27), it
sufﬁces to show that C△C′ has even degree at each vertex. The set of edges
in a cycle that are incident to v has even size (2 or 0).
The symmetric
difference of any two sets of even size has even size, since always |A△B| =
|A| + |B| −2 |A ∩B|.
3.1.12. If C and C′ are cycles of length k in a graph with girth k, then C△C ′
is a single cycle if and only if C ∩C′ is a single nontrivial path.
Sufﬁciency. If C ∩C′ is a single path P, then the other paths in C and
C′ between the endpoints of P share only their endpoints, and hence C△C ′
is their union and is a single cycle.
Necessity. We know that C ∩C′ must have an edge, since otherwise
C and C′ are edge-disjoint and C△C′ has two cycles. Also we may assume
that C and C′ are distinct, since otherwise C△C′ has no edges.
Suppose that P and P′ are distinct maximal paths in C ∩C ′. Now C
is the union of four paths P, Q, P′, Q′, and C′ is the union of four paths
P, R, P′, R′. Note that Q and Q′ may share edges with R and R′. By sym-
metry, we may assume that P′ is no longer than P and that Q and R share
the same endpoint of P.
If Q and R also share the same endpoint of P′, then Q ∪R and Q′ ∪R′
both form closed walks in which (by the maximality of P and P ′) some edge
appears only once. If Q and R do not share the same endpoint of P ′, then
P′ ∪Q ∪R and P′ ∪Q′ ∪R′ both form closed walks in which the edges of
P′ appear only once. In each case, the two closed walks each each contain
a cycle, and the sum of their lengths is less than 2k. This yields a cycle of
length less than k in G, which is impossible.
Comment:
The statement can fail for longer cycles.
In the 3-
dimensional cube Q3, there are two 6-cycles through antipodal vertices,
and their symmetric difference consists of two disjoint 4-cycles.
3.1.13. In an X, Y-bigraph G, if S ⊆X is saturated by a matching M and
T ⊆Y is saturated by a matching M′, then there is a matching that sat-
urates both S and T . Let F be a subgraph of G with edge set M ∪M ′.
Since each vertex has at most one incident edge from each matching, F has
maximum degree 2. Each component of F is an alternating path or an al-
ternating cycle (alternating between M and M ′). From a component that
is an alternating cycle or an alternating path of odd length, we can choose
the edges of M or of M′ to saturate all the vertices of the component.
Let P be a component of F that is a path of even length. The edge
at one end of P is in M; the edge at the other end is in M ′. Also P starts
and ends in the same partite set. If it starts and ends in X, then the ends
cannot both be in S, because only one endpoint of P is saturated by M.

147
Chapter 3: Matchings and Factors
Section 3.1: Matchings and Covers
148
Choosing the edges of M in this component will thus saturate all vertices
of S and T contained in V (P). Similarly, choosing the edges of M ′ from
any component of F that is a path of even length with endpoints in Y will
saturate all the vertices of S ∪T in that component.
3.1.14. Matchings in the Petersen graph.
Deleting any perfect matching leaves C5+C5. Deleting a perfect match-
ing leaves a 2-regular spanning subgraph, which is a disjoint union of cy-
cles. Since the Petersen graph has girth 5, the only possible coverings of
the vertices by disjoint cycles are C5 + C5 and C10.
If a 10-cycle exists, with vertices [v1, . . . , v10] in order, then the remain-
ing matching consists of chords. Two consecutive vertices cannot neighbor
their opposite vertices on the cycle, since that creates a 4-cycle. Similarly,
the neighbors must be at least four steps away on the cycle. Hence we may
assume by symmetry that v1 ↔v5. Now making v10 adjacent to any of
{v6, v5, v4} creates a cycle of length at most 4, so there is no way to insert
the remaining edges.
a) The Petersen graph has twelve 5-cycles. Each edge extends to P4 in
four ways by picking an incident edge at each endpoint. Since the graph has
diameter two and girth 5, every P4 belongs to exactly one 5-cycle through an
additional vertex. Since there are 15 edges, we have generated 60 5-cycles,
but each 5-cycle is generated ﬁve times.
b) The Petersen graph has six perfect matchings. Since the Petersen
graph has girth ﬁve, the ﬁve remaining edges incident to any 5-cycle form a
perfect matching, and deleting them leaves a 5-cycle on the complementary
vertices. Hence the 5-cycles group into pairs of 5-cycles with a matching
between them. Since every matching leaves C5 +C5, every matching arises
in this way, and by part (b) there are six of them.
3.1.15. Matchings in k-dimensional cubes.
a) For k ≥2, if M is a perfect matching of Qk, then there are an even
number of edges in M whose endpoints differ in coordinate i. Let V0 and
V1 be the sets of vertices having 0 and 1 in coordinate i, respectively. Each
has even size. Since the vertices of Vr not matched to V1−r must be matched
within Vr, the number of vertices matched by edges to V1−r must be even.
b) Q3 has nine perfect matchings. There are four edges in each such
matching, with an even number distributed to each coordinate. The pos-
sible distributions are (4, 0, 0) and (2, 2, 0). There are three matchings of
the ﬁrst type. For the second type, we pick a direction to avoid crossing,
pick one of the two matchings in one of the 4-cycles, and then the choice of
the matching in the other 4-cycle is forced to avoid making all four edges
change the same coordinate. Hence there are 3 · 2 · 1 perfect matchings of
the second type.
3.1.16. When k ≥2, the k-dimensional hypercube Qk has at least 2(2k−2)
perfect matchings.
Proof 1 (induction on k). Let mk denote the number of perfect match-
ings. Note that m2 = 2, which satisﬁes the inequality. When k > 2, we
can choose matchings independently in each of two disjoint subcubes of di-
mension k −1. The number of such matchings is m2
k−1. By the induction
hypothesis, this is at least (22k−3)2, which equals 22k−2.
Comment: Since we could choose the two disjoint subcubes in k ways,
we can recursively form km2
k−1 perfect matchings in this way, some of which
are counted more than once.
Proof 2 (direct construction). Pick two coordinates. There are 2k−2
copies of Q2 in which those two coordinates vary, and two choices of a per-
fect matching in each copy of Q2. This yields 22k−2 perfect matchings. (Since
we can choose the two coordinates in
 k
2

ways, we can generate
 k
2

22k−2 per-
fect matchings, but there is some repetition.)
3.1.17. In every perfect matching in the hypercube Qk, there are exactly
 k−1
i

edges that match vertices with weight i to vertices with weight i + 1,
where the weight of a vertex is the number of 1s in its binary k-tuple name.
Proof 1 (induction on i). Since the vertex of weight 0 must match to a
vertex of weight 1, the claim holds when i = 0. For the induction step, the
induction hypothesis yields
 k−1
i−1

vertices of weight i −1 matched to vertices
of weight i. The remaining vertices of weight i must match to vertices of
weight i + 1. Since
 k
i

−
 k−1
i−1

=
 k−1
i

, the claim follows.
Proof 2 (canonical forms). Let M∗be the matching where every edge
matches vertices with 0 and 1 in the last coordinate. The number of edges
matching weight i to weight i + 1 is the number of choices of i ones from
the ﬁrst k −1 positions, which is
 k−1
i

.
It now sufﬁces to prove that every perfect matching M has the same
weight distribution as M∗. The symmetric difference of M and M∗is a
union of even cycles alternating between M and M ∗, plus isolated vertices
saturated by the same edge in both matchings. It sufﬁces to show that the
weight distribution on each cycle is the same for both matchings.
The edges joining vertices of weights i and i + 1 along a cycle C alter-
nate appearing with increasing weight and with decreasing weight, since
weight changes by 1 along each edge. For the same reason, the number of
edges along C from a vertex to the next appearance of a vertex with the
same weight is even. Since C alternates between M and M ∗, this means
that the edges joining vertices of weights i and i+ alternate between M
and M∗. Hence there is the same number of each type, as desired.
3.1.18. The game of choosing adjacent vertices, where the last move wins.
Suppose that G has a perfect matching M.
Whenever the ﬁrst player

149
Chapter 3: Matchings and Factors
Section 3.1: Matchings and Covers
150
chooses a vertex, the second player takes its mate in M. This vertex is
available, because after each move of the second player the set of vertices
visited forms a set of full edges in M, and the ﬁrst player cannot take two
vertices at a time. Thus with this strategy, the second player can always
make a move after any move of the ﬁrst player and never loses.
If G has no perfect matching, then let M be a maximum matching in G.
The ﬁrst player starts by choosing a vertex not covered by M. Thereafter,
whenever the second player chooses a vertex x, the ﬁrst player chooses the
mate of x in M. The vertex x must be covered by M, else x completes an
M-augmenting path using all the vertices chosen thus far. Thus the ﬁrst
player always has a move available and does not lose.
3.1.19. A family A1, . . . , Am of subsets of Y has a system of distinct represen-
tatives if and only if

S
j∈S Ai
 ≥|S| for every S ⊆[m]. Form an X, Y-bigraph
G with X = {1, . . . , m} and Y = {y1, . . . , yn}. Include the edge iyj if and only
if yj ∈Ai. A set of edges in G is a matching if and only if its endpoints in
Y form a system of distinct representatives for the sets indexed by its end-
points in X. The family has a system of distinct representatives if and only
if G has a matching that saturates X.
It thus sufﬁces to show that the given condition is equivalent to Hall’s
condition for saturating X. If S ⊆X, then NG(S) = S
i∈S Ai, so |N(S)| ≥|S|
if and only if
S
i∈S Ai
 ≥|S|.
3.1.20. An extension of Hall’s Theorem using stars with more than two
vertices. We form an X, Y-bigraph G with partite sets X = x1, . . . , xn for
the trips and Y = y1, . . . , ym for the people, and edge set {xi yj: person j
likes trip i}. To ﬁll each trip to its capacity ci, we seek a subgraph whose
components are stars, with degree ci at xi.
Form an X ′, Y-bigraph G′ by making ni copies of each vertex xi. Now
G has the desired stars if and only if G′ has a matching that saturates X ′.
Thus the desired condition for G should become Hall’s Condition for G′.
In G′, the neighborhoods of the copies of a vertex of x are the same.
Hence Hall’s Condition will hold if and only if it holds whenever S ⊆X ′
consists of all copies of each vertex of X for which it includes any copies.
That is, Hall’s Condition reduces to requiring |N(T )| ≥P
xi∈T ci for all T ⊆
X. This condition is necessary, since the trips in T need this many distinct
people. It is sufﬁcient, because it implies Hall’s Condition for G′.
3.1.21. If G is an X, Y-bigraph such that |N(S)| > |S| whenever ∅̸= S ⊂X,
then every edge of G belongs to some matching that saturates X. Let xy be
an edge of G, with x ∈X and y ∈Y, and let G′ = G −x −y. Each set
S ⊆X −{x} loses at most one neighbor when y is deleted. Combining this
with the hypothesis yields |NG′(S)| ≥|NG(S)| −1 ≥|S|. Thus G′ satisﬁes
Hall’s Condition and has a matching that saturates X −{x}. With the edge
xy, this completes a matching in G that contains xy and saturates X.
3.1.22. A bipartite graph G has a perfect matching if and only if |N(S)| ≥
|S| for all S ⊆V (G). This conclusion does not hold for non-bipartite graphs.
In an odd cycle, we obtain neighbors for a set of vertices by taking the
vertices immediately following them on the cycle. Thus |N(S)| ≥|S| for all
S ⊆V , but the graph has no perfect matching. Complete graphs of odd
order also form counterexamples. For bipartite graphs, we give two proofs.
Proof 1 (graph transformation). Let G′ be a bipartite graph consisting
of two disjoint copies of G, where each partite set in G′ consists of one copy
of X and one copy of Y; call these X ′ and Y ′. Then G′ has a perfect matching
if and only if G has a perfect matching. Since
X′ =
Y ′, G′ has a perfect
matching if and only if it has a matching that completely saturates X ′.
By Hall’s Theorem, G′ has a matching saturating X ′ if and only if
N(S′)
 ≥
S′ for all S′ ⊆X′. Given S′ ⊆X′, let T1 = S′ ∩X and T2 = S′ −T1.
Let S ⊆V (G) be the set of vertices consisting of T1 in X plus the vertices
of Y having copies in T2. This establishes a bijection between subsets S′
of X′ and subsets S of V (G), with
S′ = |S|. Also
N(S′)
 = |N(S)|, by the
construction of G′.
Hence Hall’s condition is satisﬁed for G′ if and only if the condition of
this problem holds in G. In summary, we have shown
[G has a 1-factor] ⇔G′ has a 1-factor ⇔
N(S′)
 ≥
S′ for all S′ ⊆X′ ⇔|N(S)| ≥|S| for all S ⊆V (G).
Proof 2 (by Hall’s Theorem). Necessity: Let M be a perfect matching,
and let S be a subset of V (G). Vertices of S are matched to distinct vertices
of N(S) by M, so |N(S)| ≥|S|. Sufﬁciency: If |N(S)| ≥|S| for all S ⊆V ,
then |N(A)| ≥|A| for all A ⊆X. By Hall’s Theorem, the graph thus has a
matching M that saturates X. Thus |Y| ≥|X|, and the condition |N(Y)| ≥
|Y| yields |X| ≥CY. Thus |Y| = |X|, and M is a perfect matching.
3.1.23. Alternative proof of Hall’s Theorem. Given an X, Y-bigraph G, we
prove that Hall’s Condition sufﬁces for a matching that saturates X. Let
m = |X|. For m = 1, the statement is immediate.
Induction step: m > 1.
If |N(S)| > |S| for every nonempty proper
subset S ⊂X, select any neighbor y of any vertex x ∈X. Deleting y reduces
the size of the neighborhood of each subset of X −{x} by at most 1. Hence
Hall’s Condition holds in G′ = G −x −y. By the induction hypothesis, G′
has a matching that saturates X −{x}, which combines with xy to form a
matching that saturates X.
Otherwise, |N(S)| = |S| for some nonempty proper subset S ⊂X. Let
G1 = G[S ∪N(S)], and let G2 = G −V (G1). Because the neighbors of

151
Chapter 3: Matchings and Factors
Section 3.1: Matchings and Covers
152
vertices in S are conﬁned to N(S), Hall’s Condition for G implies Hall’s
Condition for G1. For G2, consider T ⊆X −S. Since |NG(T ∪S)| ≥|T ∪S|,
we obtain
NG2(T ) = NG(T ∪S) −NG(S) ≥|T ∪S| −|S| = |T |.
Thus Hall’s Condition holds for both G1 and G2. By the induction hypoth-
esis, G1 has a matching that saturates S, and G2 has a matching that
saturates X −S. Together, they form a matching that saturates X.
3.1.24. A square matrix of nonnegative integers is a sum of k permutation
matrices if and only if each row and column sums to k. If A is the sum of k
permutation matrices, then each matrix adds one to the sum in each row
and column, and each row or column of A has sum k.
For the converse, let A be a square matrix with rows and columns
summing to k. We use induction on k to express A as a sum of k permutation
matrices. For k = 1, A is a permutation matrix.
For k > 1, form a bipartite graph G with vertices x1, . . . , xn and
y1, . . . , yn so that the number of edges joining xi and yj is ai, j. The graph G
is bipartite and regular, so by the Marriage Theorem it has a perfect match-
ing. Let bi, j = 1 if xi yj belongs to this matching and bi, j = 0 otherwise; the
resulting matrix B is a permutation matrix. Each row and column of B
has exactly one 1. Thus A′ = B −A is a nonnegative integer matrix whose
rows and columns sum to k −1. Applying the induction hypothesis to A′
yields k −1 additional permutation matrices that with B sum to A.
3.1.25. A nonnegative doubly stochastic matrix can be expressed as a convex
combination of permutation matrices. For simplicity, we allow multiples of
doubly stochastic matrices and prove a superﬁcially more general state-
ment. We use induction on the number of nonzero entries to prove that if
Q is a matrix of nonnegative entries in which every row and every column
sums to t, then Q can be expressed as a linear combination of permutation
matrices with nonnegative coefﬁcients summing to t.
If Q has exactly n nonzero entries, then Q is t times a permutation
matrix, because Q must have at least one nonzero entry in every row and
column. If Q has more nonzero entries, begin by deﬁning a bipartite graph
G with xi ↔yj if and only if Qi, j > 0. If G has a perfect matching, then the
edges xi yσ(i) of the matching correspond to a permutation σ with permuta-
tion matrix P.
Let ε be the minimum (positive) value in the positions of Q corre-
sponding to the 1’s in P. The matrix Q′ = Q −εP is a nonnegative matrix
with fewer nonzero entries than Q, and row and column sums t −ε. By
the induction hypothesis, we can express Q′ as a nonnegative combination
Pm
i=1 ci Pi, with Pm
i=1 ci = t −ε. Hence Q = P ci Pi + εP. With cm+1 = ε and
Pm+1 = P, we have expressed Q in the desired form.
It remains to prove that G has a perfect matching; we show that it
satisﬁes Hall’s condition. If S is a subset of X corresponding to a particular
set of rows in Q, we need only show that these rows have nonzero entries
in at least |S| columns altogether. This follows because the total nonzero
amount in the rows S is t |S|. Since each column contains only a total of t,
it is not possible to contain a total of t |S| in fewer than |S| columns.
Comment. When the entries of Q are rational, the result follows di-
rectly from the Marriage Theorem. Multiplying Q by the least common
denominator d of its positive entries converts it to an integer matrix in
which all rows and columns sum to d. The entry in position i, j now is
the number of edges joining xi and yj in a d-regular bipartite graph (mul-
tiple edges allowed). The Marriage Theorem implies that the graph has
a perfect matching. By induction on d, it can be decomposed into perfect
matchings. These matchings correspond to permutation matrices. In the
expression of Q as a convex combination of these matrices, we give weight
a/d to a permutation matrix arising a times in the list of matchings.
3.1.26. Achieving columns with all suits. The cards in an n by m array
have m values and n suits, with each value on one card in each suit.
a) It is always possible to ﬁnd a set of m cards, one in each column,
having the m different values. Form a X, Y-bigraph in which X represents
the columns and Y represents the values, with r edges from x ∈X to y ∈Y
if value y appears r times in column x. Since each column contains n cards
and each value appears in n positions (once in each suit), the multigraph is
n-regular. By the Marriage Corollary to Hall’s Theorem, every nontrivial
regular bipartite graph has a perfect matching. (This applies also when
multiple edges are present, which can occur here.)
A perfect matching
selects m distinct values occurring in the m columns.
(Using Hall’s Theorem directly, a set S of k columns contains nk cards.
Since there are n cards of each value, S contains cards of at least k values.
Hence the graph satisﬁes Hall’s condition and has a perfect matching.)
b) By a sequence of exchanges of cards of the same value, the cards
can be rearranged so that each column consists of n cards of distinct suits.
Making each column consist of n cards of different suits is equivalent to
spreading each suit across all columns. The full result follows by induction
on n, with n = 1 as a trivial basis step.
For the induction step, when n > 1, use part (a) to ﬁnd cards of distinct
values representing the m columns. Then perform at most one exchange for
each value to bring the values in a single suit to those positions. Positions
within a column are unimportant, so we can treat the other suits as an

153
Chapter 3: Matchings and Factors
Section 3.1: Matchings and Covers
154
instance of the problem with n−1 suits. We apply the induction hypothesis
to ﬁx up the remaining suits.
The problem can always be solved using at most mn −P
k≤n ⌈m/k⌉
exchanges. The worst case requires at least ⌊m/n⌋n(n −1)/2 exchanges.
3.1.27. The second player can force a draw in a positional game if a ≥
2b, where a is the minimum size of a winning set and b is the maximum
number of winning sets containing a particular position. Let P be the set
of positions, and let W1, . . . , Wm be the winning sets of positions.
With
|P| = n, let G be the bipartite graph on n + 2m vertices with partite sets
P = {p1, . . . , pn} and W = {w1, . . . , wm}∪{w′
1, . . . , w′
m} by creating two edges
piwj and piw′
j for each incidence pi ∈Wj of a position in a winning set.
If G has a matching M that saturates W, then Player 2 can use M
to force a draw. When the position taken by Player 1 on a given move is
matched to one of {wi, w′
i in M, Player 2 responds by taking the position
matched to the other one of these two elements. Player 1 thus can never
obtain all the positions of a winning set. (If Player 1 takes an unmatched
position, Player 2 can respond by taking any available position.)
The existence of such a matching follows from a ≥2b by Hall’s condi-
tion. If S ⊆W, then S has representatives (w or w′) of at least |S| /2 winning
sets. Since each position appears in at most b winning sets, the number
of positions in the union of these winning sets is at least a(|S| /2)/b ≥|S|.
Thus |N(S)| ≥|S| for every S ⊆W.
3.1.28. A graph with no perfect matching.
Proof 1 (vertex cover). The graph has 42 vertices, so a perfect match-
ing would have 21 edges. The marked vertices form a vertex cover of size
20. The edges of a matching must be covered by distinct vertices in a vertex
cover, so there is no matching with more than 20 edges.
Proof 2 (Hall’s condition).
Using two labels X and Y, we obtain a
bipartition of the graph. Partite set X consists of the marked vertices in
the left half of the picture and the unmarked vertices in the right half. This
is an independent set of size 21, and the remaining vertices also form an
independent set Y of size 21.
Hall’s Condition is a necessary condition for a perfect matching; we
show that Hall’s Condition does not hold. Let S be the subset of X con-
sisting of the 11 unmarked vertices in the right half of the graph. The
neighbors of vertices in S are the 10 marked vertices in the right half of
the graph. Thus |N(S)| < |S|.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
Proof 3 (other dual problems). In every graph α′(G) + β′(G) = n(G),
so it sufﬁces to show that at least 22 edges are needed to cover V (G). Also
β′(G) ≥α(G) always, since distinct edges are needed to cover the vertices
of an independent set. Thus it sufﬁces to show that G has an independent
set of size at least 22. Such a set is given by the unmarked vertices above
(the complement of a vertex cover).
Proof 4 (augmenting paths). Having found a matching M of size 20,
one can prove that there is no perfect matching by following all possible
M-alternating paths from one M-unsaturated vertex to show that none
reaches the other unsaturated vertex.
In this particular example, this
method is not too difﬁcult.
Proof 5 (symmetry and case analysis). The graph has two edges whose
deletion leaves two isomorphic components of order 21. Since 21 is odd, a
perfect matching must use exactly one of the two connecting edges. By sym-
metry, we may assume it is the one in bold above. This forces a neighboring
vertex of degree 2 to be matched to its other neighbor, introducing other
bold edge. Repeating this argument yields a path of bold edges forced into
the matching. As soon as this leaves a vertex with no available neighbor,
we have proved that a perfect matching cannot be completed.
3.1.29. Every bipartite graph G has a matching of size at least e(G)/1(G).
Each vertex of G covers at most 1(G) edges. Since all edges must be covered
in a vertex cover, this yields β(G) ≥e(G)/1(G). By the K¨onig–Egerv´ary
Theorem, α′(G) = β(G) when G is bipartite. Thus α′(G) ≥e(G)/1(G).
Every subgraph of Kn,n with more than (k −1)n edges has a matching
of size at least k. Such a graph G is a simple bipartite graph with partite
sets of size n.
Thus 1(G) ≤n, and we compute α′(G) ≥e(G)/1(G) >
(k −1)n/n = k −1. Thus G has a matching of size k.
3.1.30. The maximum number of edges in a simple bipartite graph that has
no matching with k edges and no star with l edges is (k −1)(l −1). If G
is a bipartite graph having no matching with k edges, then G has a vertex
cover using at most k −1 vertices. If G is a simple graph having no star

155
Chapter 3: Matchings and Factors
Section 3.1: Matchings and Covers
156
with l edges, then each vertex covers at most l −1 edges. Hence the vertex
cover covers at most (k −1)(l −1) edges, which must be all the edges of G.
The bound is achieved by (k −1)K1,l−1.
3.1.31. Hall’s Theorem from the K¨onig–Egerv´ary Theorem. By the K¨onig–
Egerv´ary Theorem, an X, Y-bigraph G fails to have a matching that satu-
rates X if and only if G has a vertex cover of size less than |X|. Let Q be
such a cover, with R = Q ∩X and T = Q ∩Y. Because Q is a vertex cover,
there is no edge from X −R to Y −T , which means that N(X −R) ⊆T .
This yields
|N(X −R)| ≤|T | = |Q| −|R| < |X| −|R| = |X −R|.
We have used the K¨onig–Egerv´ary Theorem to show that absence of
a matching that saturates X yields a violation of Hall’s Condition. Thus
Hall’s Condition is sufﬁcient for such a matching.
Similarly, if |N(S)| < |S| for some S ⊆X, then N(S) ∪X −S is a vertex
cover of size less than |X|, and there is no matching of size |X|. Hence
Hall’s Condition also is necessary.
3.1.32. If G is a bipartite graph with partite sets X, Y, then α′(G) = |X| −
maxS⊆X(|S| −|N(S)|). Let d = max(|S| −|N(S)|). The case S = ∅implies
that d ≥0. Choose T ⊆X such that |T | −|N(T )| = d. Because saturated
vertices of T must have distinct neighbors in any matching and only |T |−d
neighbors are available, every matching leaves at least d vertices (of T )
unsaturated. Thus α′(G) ≤|X| −d.
To prove that G has a matching as large as |X| −d, we form a new
graph G′ by adding d vertices to the partite set Y and making all of them
adjacent to all of X. This adds d vertices to N(S) for each S ⊆X, which
yields |NG′(S)| ≥|S| for all S ⊆X. By Hall’s Theorem, G′ has a matching
saturating all of X. When we delete the new vertices of G′, we lose at most
d edges of the matching. Hence what remains is a matching of size at least
|X| −d in G, as desired.
3.1.33. K¨onig–Egerv´ary from Exercise 3.1.32. Always α′(G) ≤β(G), so it
sufﬁces to show that a bipartite graph G has a matching and a vertex cover
of the same size. Consider an X, Y-bigraph G in which S is a subset of X
with maximum deﬁciency. By part (a), α′(G) = |X| −|S| + |N(S)|.
Let R = (X −S) ∪(N(S)). By the deﬁnition of N(S), there are no edges
joining S and Y −N(S). Therefore, R is a vertex cover of G. The size of R is
|X| −|S| + |N(S)|, which equals α′(G). Thus G has a matching and a vertex
cover of the same size, as desired.
3.1.34. When G is an X, Y-bigraph with no isolated vertices and the deﬁ-
ciency of a set S is |S|−|N(S)|, the graph G has a matching that saturates X
if and only if each subset of Y has deﬁciency at most |Y| −|X|. Using Hall’s
Theorem, it sufﬁces to show that |N(S)| ≥|S| for all S ⊆X if and only if
|T | −|N(T )| ≤|Y| −|X| for all T ⊆Y.
We rewrite the latter condition as |X| −|N(T )| ≤|Y| −|T |. Since every
vertex of X −N(T ) has no neighbor in T , we have N(X −N(T )) ⊆Y −T .
If Hall’s Condition holds, then applying it with S = X −N(T ) yields |X| −
|N(T )| = |S| ≤|N(S)| ≤|Y| −|T |, which is the desired condition.
Conversely, suppose that |X| −|N(T )| ≤|Y| −|T | for all T ⊆Y. Given
S ⊆X, let T = Y −N(S). Since T omits all neighbors of vertices in S, we
have S ⊆X −N(T ). Now |S| ≤|X| −|N(T )| ≤|Y| −|T | = |N(S)|. Hence
Hall’s Condition holds.
3.1.35. A bipartite graph G in K X,Y fails to have (k + 1)K2 as an induced
subgraph if and only if each S ⊆X has a subset of size at most k with
neighborhood N(S). For any S ⊆X, let T be a minimal subset of S with
neighborhood N(S). By the minimality of T , G has an induced matching
of size |T |. Hence if G has no induced matching of size k, each S ⊆X has
a subset of size at most k with neighborhood N(S). Conversely, if k + 1K2
does occur as an induced subgraph, then the set of its vertices in X have
no subset of size at most k with the same neighborhood.
3.1.36. If a bipartite graph G has a matching saturating a partite set X of
size m, then at most
 m
2

edges of G belong to no matching of size m. There
are at least three distinguishable ways to get the bound. The most direct
one, and the one that suggests the extremal graph proving that no smaller
bound is possible, considers pairs of vertices.
Proof 1. First note that, after renumbering the vertices so the edges
of the given matching are {xi yi}, every edge involving any other vertex
of Y belongs to a perfect matching, so it sufﬁces to restrict attention to
the subgraph induced by X and y1, . . . , ym. Consider the edges xi yj and
xj yi, for j < i ≤m. If both edges are present, then neither belongs to no
maximum matching, since they can be exchanged for xi yi and xj yj in the
original matching. Taking one from each such pair bounds the number of
unmatchable edges by
 m
2

. On the other hand, taking all xi yj with j < i ≤
m yields a graph in which {xi yi} is the unique maximum matching. If any
edge xi yi is deleted from this graph, then |Adj ({x1, . . . , xi})| = i −1.
Proof 2. Induction on m. As before, reduce attention to the edges be-
tween X and y1, . . . , ym. Among X, let x be the vertex of maximum degree
in this subgraph. It has degree at most m, and its deletion leaves a graph
satisfying the hypotheses for m −1. Allowing for the matched edge involv-
ing x, this gives a bound of
 m−1
2

+ m −1 =
 m
2

on the unmatchable edges.
Note that x coresponds to xm in the example above.
Proof 3. Let S be an arbitrary subset of X. If |N(S)| > |S| for ev-

157
Chapter 3: Matchings and Factors
Section 3.1: Matchings and Covers
158
ery proper nonempty subset S of X, then every edge belongs to a perfect
matching. To show this, delete the endpoints of an edge xy. This reduces
the adjacency set of any S not containing x by at most 1, so the reduced
graph has a perfect matching, and replacing xy yields a perfect match-
ing of the original graph containing xy. So, assume there is an S with
|N(S)| = |S| = s, and let N(S) = T . Then the subgraphs induced by S ∪T ,
(X −S) ∪T , and (X −S) ∪(Y −T ) partition the edges of G. The ﬁrst and
last have perfect matchings, and an edge there fails to appear in a perfect
matching of G if and only if it appears in no perfect matching of the sub-
graph. No edge of the middle graph appears in a perfect matching of G.
By induction and the fact that |T | = |S|, the bound on the number of edges
that appear in no perfect matching of G is
 s
2

+ s(m −s) +
 m−s
2

=
 m
2

.
3.1.37. Let G be an X, Y-bigraph having a matching that saturates X.
a) If S, T ⊆X are sets such that |N(S)| = |S| and |N(T )| = |T |, then
|N(S ∩T )| = |S ∩T |.
Proof 1 (manipulation of sets). Since G has a matching that saturates
X, |N(S ∩T )| ≥|S ∩T |, and |N(S ∪T )| ≥|S ∪T |. Also N(S ∪T ) = N(S) ∪
N(T ) and N(S ∩T ) ⊆N(S) ∩N(T ). Together, these statements yield
|S ∪T | + |S ∩T | ≤|N(S ∪T )| + |N(S ∩T )| ≤|N(S) ∪N(T )| + |N(S) ∩N(T )|
= |N(S)| + |N(T )| = |S| + |T |
Since the two ends of this string of expressions are equal, the inequalities
along the way hold with equality. In particular, |N(S ∩T )| = |S ∩T | and
|N(S ∪T )| = |S ∪T |.
Proof 2 (characterization of sets with no excess neighbors). If M is a
matching that saturates X, then |N(S)| = |S| if and only if every vertex of
N(S) is matched by M to a vertex of S. If |N(S)| = |S| and |N(T )| = |T |,
then every vertex of N(S) is matched into S and every vertex of N(T ) is
matched into T . Since N(S ∩T ) ⊆N(S) ∩N(T ), we conclude that every
vertex of N(S ∩T ) is matched into S ∩T , and therefore |N(S ∩T )| = |S ∩T |.
b) There is a vertex x ∈X such that every edge incident to x belongs to
some matching that saturates X. We use induction on |X|. If |N(S)| > |S|
for every nonempty proper subset of X, then Hall’s Condition holds for the
graph obtained by deleting the endpoints of any edge.
Thus each edge
can be combined with a matching saturating what remains of X in the
graph obtained by deleting its endpoints, so every edge of G belongs to
some matching saturating X.
In the remaining case, there is a nonempty proper subset S ⊆X such
that |N(S)| = |S|. Let G1 be the subgraph of G induced by S ∪N(S), and
let G2 be the subgraph obtained by deleting S ∪N(S). As in the proof of
Hall’s Theorem, the graph G2 obtained by deleting S ∪N(S) satisﬁes Hall’s
Condition (the proof of
NG2(T )
 ≥|T | follows from |NG(T ∪S)| ≥|T ∪S|).
Thus G2 has a matching saturating X −S.
The subgraph G1 also satisﬁes Hall’s condition, since it retains all
neighbors of each vertex of S. By the induction hypothesis, S has a vertex
x such that every edge incident to x belongs to a matching in G1 that sat-
urates S. These matchings can be combined with a single matching in G2
that saturates X −S to obtain matchings in G that saturate X. Hence the
vertex x serves as the desired vertex in G.
It appears that part (a) is not needed to solve part (b).
3.1.38. Pairing up farms and hunting ranges. Suppose the unit of area is
the size of one range. Let G be the bipartite graph between hunting ranges
and farms formed by placing an edge between a hunting range and a farm
if the area of their intersection is at least ε, where ε = 4/(n + 1)2 if n is odd
and ε = 4/[n(n + 2)] if n is even. We prove that this graph has a perfect
matching, which yields the desired assignments.
Let H be the union of some set of k hunting ranges. Let f1 ≥· · · ≥fn
be the areas of intersection with H of the farms, and let F be the set of k
farms having largest intersection with H. If fk = α, then the area of H is
bounded by Pk−1
i=1 gi + α(n + 1 −k) ≤k −1 + α(n + 1 −k). It also equals k,
so we have α ≥1/(n + 1 −k). Since we have k farms meeting H with area
at least 1/(n + 1 −k), we ﬁnd for each farm in F a hunting range contained
in H that intersects the farm with area at least 1/[k(n + 1 −k)] ≥ε. Hence
any set of k hunting ranges has at least k neighbors in G, which guarantees
the matching.
Note that ε is the largest possible guaranteed minimum intersection.
Let k = ⌈n/2⌉. With hunting ranges in equal strips, we can arrange that
some set of k −1 farms intersects each of the ﬁrst k hunting ranges with
area 1/k, and the remaining farms intersect each of the ﬁrst k hunting
ranges with area ε, since (k −1)/k + (n + 1 −k)ε = 1. Now one of the ﬁrst
k hunting ranges must be matched with area ε.
3.1.39. α(G) ≤n(G)−e(G)/1(G). Let S be an independent set of size α(G).
Since V (G) −S is a vertex cover, summing the vertex degrees in V (G) −S
provides an upper bound on e(G). Thus e(G) ≤(n(G) −α(G))1(G), which
is equivalent to the desired inequality.
If G is regular, then α(G) ≤n(G)/2. In the previous inequality, set
e(G) = n(G)1(G)/2.
3.1.40. If G is a bipartite graph, then α(G) = n(G)/2 if and only if G has
a perfect matching. Since α(G) = n(G) −β(G) = n(G) −α′(G) by Lemma
3.1.21 and the K¨onig–Egerv´ary Theorem, we have α(G) = n(G)/2 if and
only if α′(G) = n(G)/2.

159
Chapter 3: Matchings and Factors
Section 3.1: Matchings and Covers
160
3.1.41. (corrected statement) If G is a nonbipartite n-vertex graph with
exactly one cycle C, then α(G) ≥(n −1)/2, with equality if and only if
G −V (C) has a perfect matching. The cycle C must have odd length, say
k. Let e be an edge of C, and let G′ = G −e. The graph G′ is bipartite, so
α(G −e) ≥n/2. An independent set S in G −e is also independent in G
unless it contains both endpoints of e. If |S| > n/2, then we can afford to
drop one of these vertices. If |S| = n/2, then we can take the other partite
set instead to avoid the endpoints of e. In each case, α(G) ≥(n −1)/2.
If G −V (C) has a perfect matching, then an independent set is limited
to (k−1)/2 vertices of C and (n−k)/2 vertices outside C, so α(G) ≤(n−1)/2
and equality holds.
For the converse, observe that deleting E(C) leaves a forest F in which
each component has a vertex of G. Let H be a component of F, with x being
its vertex on C, and let r be its order. If H −x has no perfect matching,
then α′(H −x) ≤r/2−1 (that is, it cannot equal (r −1)/2). Now β(H −x) ≤
r/2 −1, by K¨onig-Egerv´ary, and α(H −x) ≥r/2, since the complement of
a vertex cover is an independent set. Since this independent set does not
use x, we can combine it with an independent set of size at least (n −r)/2
in the bipartite graph G −V (H) to obtain α(G) ≥n/2. Since this holds
for each component of F, α(G) = (n −1)/2 requires a perfect matching in
G −V (C). (This direction can also be proved by induction on n −k.)
3.1.42. The greedy algorithm produces an independent set of size at least
P
v∈V (G)
1
d(v)+1 in a graph G. The algorithm iteratively selects a vertex of
minimum degree in the remaining graph and deletes it and its neighbors.
We prove the desired bound by induction on the number of vertices.
Basis step: n = 0. When there are no vertices, there is no contribution
to the independent set, and the empty sum is also 0.
Induction step n > 0. Let x be a vertex of minimum degree, let S =
{x} ∪N(x), and let G′ = G −S. The algorithm selects x and then seeks an
independent set in G′. We apply the induction hypothesis to G′ to obtain a
lower bound on the contribution that the algorithm obtains from G′. Thus
the size of the independent set found in G is at least 1 + P
v∈V (G′)
1
dG′(v)+1.
Note that {x} ∪N(x) is a set of size dG(x) + 1, and the choice of x as a
vertex of minimum degree implies that each vertex in this set contributes
at most dG(x) + 1 to the desired sum. Thus
1 +
X
v∈V (G′)
1
dG′(v) + 1 =
X
v∈S
1
dG(x) + 1 +
X
v∈V (G)−S
1
dG−S(v) + 1
≥
X
v∈S
1
dG(v) + 1 +
X
v∈V (G)−S
1
dG(v) + 1 .
Thus the algorithm ﬁnds an independent set at least as large as desired.
3.1.43. Consequences of Gallai’s Theorem (G has no isolated vertices).
a) A maximal matching M is a maximum matching if and only if it
is contained in a minimum edge cover. If M is a maximal matching, then
the smallest edge cover L containing M adds one edge to cover each M-
unsaturated vertex, since no edge covers two M-unsaturated vertices. We
have |L| = |M| + (n −2 |M|) = n −|M|. By Gallai’s Theorem (Theorem
3.1.22), |M| = α′(G) if and only if |L| = β′(G).
b) A minimal edge cover L is a minimum edge cover if and only if it
contains a maximum matching. As observed in proving Theorem 3.1.22,
every minimal edge cover consists of disjoint stars. The largest matching
contained in a disjoint union of stars consists of one edge from each com-
ponent. The size of this matching is n −|L|. Hence a minimal edge cover L
has size n −α′(G) if and only if L contains a matching of size α′(G).
3.1.44. If G is a simple graph in which the sum of the degrees of any k
vertices is less than n −k, then every maximal independent set in G has
more than k vertices. Let S be an independent set. If |S| ≤k, then the
sum of the degrees of the vertices in S is less than n −k. This means that
some vertex x outside S is not a neighbor of any vertex in S, and hence
x can be added to form an independent set containing S. Thus maximal
independent sets must have more than k vertices.
3.1.45. If xy and xz are α-critical edges in G and y ↮z, then G contains an
induced odd cycle (through xy and xz). Let Y, Z be maximum stable sets in
G −xy and G −xz, respectively. Since Y, Z are not independent in G, we
have x, y ∈Y and x, z ∈Z.
Proof 1. Let H = G[Y △Z]. Since x ∈Y ∩Z, H is a bipartite graph
with bipartition Y −Z, Z −Y. If some component of H has partite sets of
different sizes, then we can substitute the larger for the smaller in Y or Z
to obtain a stable set in G of size exceeding α(G).
If y and z belong to different components Hy and Hz of H, then let S be
the union of V (Hy) ∩Z, V (Hz) ∩Y, one partite set of each other component
of H, and Y ∩Z. Since x ∈Y ∩Z and y, z /∈S, the set S is independent in G.
Also, |S| = |Y| = |Z| > α(G). Hence y and z belong to the same component
of H. A shortest y, z-path in H is a chordless path of odd length in G, and
it completes a chordless odd cycle with zx and xy.
Proof 2. Let H ′ = G[(Y △Z)] ∪{x}. Note that |Y △Z| is even, since
|Y| = |Z|. Let 2k = |Y △Z|. If H ′ is bipartite, then it has an independent set
of size at least k+1, which combines with Y ∩Z −{x} to form an independent
set of size α(G) + 1 in G. Hence H ′ has an odd cycle. Since H is bipartite,
this cycle passes through x. Since NH ′(x) = {y, z}, the odd cycle contains
the desired edges.

161
Chapter 3: Matchings and Factors
Section 3.1: Matchings and Covers
162
3.1.46. A graph has domination number 1 if and only if some vertex neigh-
bors all others. This is immediate from the deﬁnition of dominating set.
3.1.47. The smallest tree where the vertex cover number exceeds the dom-
ination number is P6. In a graph with no isolated vertices, every vertex
cover is a dominating set, since every vertex is incident to an edge, and at
least one endpoint of that edge is in the set. Hence γ (G) ≤β(G). We want
a tree where the inequality is strict.
If γ (G) = 1, then a single vertex is adjacent to all others, and since G is
a tree there are no other edges, so β(G) = 1. Hence we need γ (G) ≥2 and
β(G) ≥3. A tree is bipartite, so al′(G) = β(G) ≥3. A matching of size 3
requires at least 6 vertices. There are two isomorphism classes of 6-vertex
trees with perfect matchings, and P6 is the only one having a dominating
set of size 2. (Smaller trees can also be excluded by case analysis instead
of using the K¨onig–Egerv´ary Theorem.)
•
•
•
•
•
•
•
•
•
•
•
•
3.1.48. γ (Cn) = γ (Pn) = ⌈n/3⌉. With maximum degree 2, vertices can
dominate only two vertices besides themselves. Therefore, ⌈n/3⌉is a lower
bound. Picking every third vertex starting with the second (and using the
last when n is not divisible by 3) yields a dominating set of size ⌈n/3⌉.
3.1.49. In a graph G without isolated vertices, the complement of a minimal
dominating set is a dominating set, and hence γ (G) ≤n(G)/2. Let S be
a minimal dominating set. Every vertex of S has a neighbor in S, and by
minimality this fails when a vertex is omitted from S. For each x ∈S, there
is thus a vertex of S whose only neighbor in S is x. In particular, every
x ∈S has a neighbor in S, which means that S is a dominating set.
Since S and S are disjoint dominating sets, one of them has size at
most n(G)/2.
3.1.50. If G is a n-vertex graph without isolated vertices, then γ (G) ≤n −
β′(G) ≤n/2.
Proof 1. Since every edge covers at most two vertices, always β′(G) ≥
n/2.
As discussed in the proof of Theorem 3.1.22, the components of a
minimum edge cover are stars, and the number of stars is n −β′(G). Since
the union of these stars is a spanning subgraph, choosing the centers of
these stars yields a dominating set.
Proof 2. Since α′(G) = n −β′(G) by Theorem 3.1.22, it sufﬁces to
show that γ (G) ≤α′(G). In a maximum matching M, the two endpoints
of an edge in M cannot have distinct unsaturated neighbors. Also the un-
saturated neighbors all have saturated neighbors. Therefore, picking from
each edge of M the endpoint having unsaturated neighbor(s) (or either if
neither has such a neighbor) yields a dominating set of size α′(G).
Construction of n-vertex graphs with domination number k, for 1 ≤k ≤
n/2. Form G from a matching of size k by selecting one vertex from each
edge and adding edges to make these vertices pairwise adjacent.
3.1.51. Domination in an n-vertex simple graph G with no isolated vertices.
a) ⌈n/(1 + 1(G)⌉≤γ (G) ≤n −1(G). Each vertex takes care of itself
and at most 1(G) others; thus γ (G)(1 + 1(G)) ≥n. For the upper bound,
note that the set consisting of all vertices except the neighbors of a vertex
of maximum degree is a dominating set.
b) (1 + diam G)/3 ≤γ (G) ≤n −⌈2diam G/3⌉.
Let P be a short-
est u, v-path, where d(u, v) = diam G. Taking the vertices at distances
1, 4, 7, . . . along P from u yields a set that dominates all the vertices of P
(v is also needed if diam G is divisible by 3. Even if all the vertices off P
are needed to augment this to a dominating set, we still have used at most
n −⌈2diam G/3⌉vertices.
For the lower bound, the vertices at distances 0, 3, 6, . . . from u along
P must be dominated by distinct vertices in a dominating set; a vertex
dominating two of them would yield a shorter u, v-path. This yields the
lower bound.
Both bounds hold with equality for the path Pn.
3.1.52. If the diameter of G is at least 3, then γ (G) ≤2. Let u and v be
two vertices such that dG(u, v) = 3. The set {u, v} is a dominating set in G,
because u and v have no common neighbors in G. For x ∈V (G) −{u, v}, at
least one of {u, v} is nonadjacent to x in G and therefore adjacent to it in G.
3.1.53. Examples with speciﬁed domination number.
A 5k-vertex graph with domination number 2k and minimum degree
2. Begin with kC5 and add edges to form a cycle using one vertex from
each 5-cycle. Two vertices must be used from each original 5-cycle, and
this sufﬁces for a dominating set.
A 3-regular graph G with γ (G) = 3n(G)/8. In a 3-regular graph, each
vertex dominates itself and three others. In the 8-vertex graph below, dele-
tion of any vertex and its neighbors leaves P4, which cannot be dominated
by one additional vertex. Hence the domination number is 3.
•
•
•
•
•
•
•
•

163
Chapter 3: Matchings and Factors
Section 3.1: Matchings and Covers
164
3.1.54. The Petersen graph has domination number 3 and total domination
number 4. Each vertex dominates itself and three others, so at least three
vertices are needed. Since the graph has diameter 2, the neighbors of a
single vertex form a dominating set.
A total dominating set S must include a neighbor of every vertex in S.
Hence S must contain two adjacent vertices. This pair leaves four undom-
inated vertices. Adding a neighbor of the original pair dominates at most
three of these, since the graph is 3-regular. Hence |S| ≥4. One vertex and
its neighbors form a total dominating set of size four.
3.1.55. Dominating sets in the hypercube Q4. Since Q4 is 4-regular, each
vertex dominates itself and four others. Now n(Q4) = 16 yields γ (Q4) ≥
⌈16/5⌉= 4. Since {0000, 0111, 1100, 1011} is an independent dominating
set and {0000, 0001, 1110, 1111} is a total dominating set, the domination,
independent domination, and total domination numbers all equal 4.
Adding two vertices to this total dominating set of size 4 completes
a connected dominating set of size 6. We show there is no smaller con-
nected dominating set. A connected 5-vertex subgraph contains two inci-
dent edges. Let S be the set of three vertices in two such edges. The set
T of vertices undominated by S has size 6. Each neighbor of a vertex of S
dominates at most two vertices in T . Each vertex of T dominates at most
three vertices in T , except for one vertex that dominates itself and four oth-
ers (For example, if S = {0000, 0001, 0010}, then the high-degree vertex of
Q4[T ] is 1111.) To dominate T with only two additional vertices, we must
therefore use the high-degree vertex of T . However, its distance to S is 3,
so it cannot be used to complete a connected set of size 5.
3.1.56. Five pairwise non-attacking queens can control an 8-by-8 chess-
board. As shown below, they can also control a 9-by-9 chessboard. Five
queens still sufﬁce for an 11-by-11 chessboard, but this conﬁguration does
not exist on the 8-by-8 board.
•
•
•
•
•
•
•
•
•
•
3.1.57. An n-vertex tree with domination number 2 in which the minimum
size of an independent dominating set is ⌊n/2⌋. Consider the tree of diam-
eter 3 with two central vertices u and v in which one central vertex has
⌊(n −2)/2⌋leaf neighbors and the other has ⌈(n −2)/2⌉leaf neighbors. The
set {u, v} is a dominating set, but these cannot both appear in an indepen-
dent dominating set. If u does not appear in a dominating set, then all its
leaf neighbors must appear. We also must include at least one vertex from
the set consisting of v and its leaf neighbors, since these are not dominated
by the other leaves. Hence the independent dominating set must have at
least ⌊(n −2)/2⌋+ 1 vertices.
3.1.58. Every K1,r-free graph G has an independent dominating set of size
at most (r −2)γ (G) −(r −3). Let S be a minimum dominating set in G.
Let S′ be a maximal independent subset of S. Let T = V (G) −R, where
R is the set N(S′) ∪S′ of vertices dominated by S′. Let T ′ be a maximal
independent subset of T .
Since T ′ contains no neighbor of S′, S′ ∪T ′ is independent. Since S′ is
a maximal independent subset of S, every vertex of S −S′ has a neighbor
in S′. Similarly, T ′ dominates T −T ′. Hence S′ ∪T ′ is a dominating set.
It remains to show that
S′ ∪T ′ ≤(r −1)γ (G) −(r −3). Each vertex
of S −S′ has at most r −2 neighbors in T ′, since it has a neighbor in S′, and
S′∪T ′ is independent, and G is K1,r-free. Since S is dominating, each vertex
of T ′ has at least one neighbor in S −S′. Hence
T ′ ≤(r −2)
S −S′, which
yields
S′ ∪T ′ ≤(r −2) |S| −(r −3)
S′. Since |S| = γ (G) and
S′ ≥1, we
conclude that
S′ ∪T ′ ≤(r −2)γ (G) −(r −3).
3.1.59. In a graph G of order n, the minimum size of a connected dominat-
ing set is n minus the maximum number ℓof leaves in a spanning tree. For
the upper bound, deleting the leaves in a spanning tree with ℓleaves yields
a connected dominating set of size n −ℓ.
For the lower bound, we form a spanning tree T of G by taking a span-
ning tree in the subgraph induced by a connected dominating set S and
adding each remaining vertex as a neighbor of one of these. Thus |S| is n
minus the number of leaves in T . Since this number of leaves is at most ℓ,
we have |S| ≤n = ℓ.
3.1.60. A graph with minimum degree k and no connected dominating set
of size less than 3n(G)/(k + 1) −2. Form G from a cyclic arrangement of
3m pairwise-disjoint cliques of sizes ⌈k/2⌉, ⌊k/2⌋, 1, ⌈k/2⌉, ⌊k/2⌋, 1, · · · in
order by making each vertex adjacent to every vertex in the clique before
it and the clique after it. Each vertex is adjacent to all but itself in its own
clique and the two neighboring cliques, so G is k-regular.

165
Chapter 3: Matchings and Factors
Section 3.2: Algorithms & Applications
166
A graph has a connected dominating set of size r if and only if it has a
spanning tree with at most r non-leaf vertices (Exercise 3.1.59). Hence we
show that spanning trees in G must have many non-leaves. Let S be the
set of vertices in the cliques of size 1 in the construction.
In a subgraph of G having all pairs of nearest vertices in S joined by
paths through the two intervening cliques, there is a cycle. If at least two
such pairs are not joined by such paths, then the subgraph is disconnected.
Therefore, every spanning tree of G contains a path P directly connecting
all but one of the successive pairs, as shown below.
At least one endpoint of P must be a non-leaf. If one endpoint of P
is a leaf, then the other endpoint of P and some vertex in the untouched
clique next to it must be non-leaves. In either case, we have obtained at
least 3m −2 non-leaves. Since m = n/(k + 1), we have the desired bound.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
3.2. ALGORITHMS AND APPLICATIONS
3.2.1. A weighted graph with four vertices where the maximum weight
matching is not a maximum size matching.
Let G = P4, and give the
middle edge greater weight than the sum of the other weights.
3.2.2. Use of the Hungarian Algorithm to test for the existence of a perfect
matching in a bipartite graph G. Given that the partite sets of G have size
n, form a weighted matching problem on Kn,n in which the edges of G have
weight 1 and the edges not in G have weight 0. There is a perfect matching
in G if and only if the solution to the weighted matching problem is n.
3.2.3. Multiplicity of stable matchings.
With men u, v and women a, b,
there may be two stable matching. Suppose the preferences are u : a > b,
v : b > a, a : v > u, b : u > v. If both men get their ﬁrst choices, then
they prefer no one to their assigned partner, so the matching is stable. The
same argument applies when the women get their ﬁrst choices. However,
the matchings with men getting their ﬁrst choices and women getting their
ﬁrst choices are different.
3.2.4. Stable matchings under proposal algorithm. Consider the prefer-
ence orders listed below.
Men {u, v, w, x, y, z}
Women {a, b, c, d, e, f }
u : a > b > d > c > f > e
a : z > x > y > u > v > w
v : a > b > c > f > e > d
b : y > z > w > x > v > u
w : c > b > d > a > f > e
c : v > x > w > y > u > z
x : c > a > d > b > e > f
d : w > y > u > x > z > v
y : c > d > a > b > f > e
e : u > v > x > w > y > z
z : d > e > f > c > b > a
f : u > w > x > v > z > y
When men propose, the steps of the algorithm are as below. For each
round, we list the proposals by u, v, w, x, y, z in order, followed by the re-
sulting rejections.
Round 1: a, a, c, c, c, d; a × v, c × w, c × y.
Round
2: a, b, b, c, d, d; b × v, d × z.
Round 3: a, c, b, c, d, e; c × x.
Round 4:
a, c, b, a, d, e; a × u. Round 5: b, c, b, a, d, e; b × u. Round 6: d, c, b, a, d, e;
d×u. Round 7: c, c, b, a, d, e; c×u. Round 8: f, c, b, a, d, e; stable matching.
When women propose, the steps of the algorithm are as below. For
each round, we list the proposals by a, b, c, d, e, f in order, followed by the
resulting rejections. Round 1: z, y, v, w, u, u; u × e. Round 2: z, y, v, w, v, u;
v × e. Round 3: z, y, v, w, x, u; stable matching.
Note that the pairs u f and vc occur in both results, and in all other
cases the women are happier when the women propose and the men are
happier when the men propose.
3.2.5. Maximum weight transversal. For each matrix below, we underscore
a maximum weight transversal, and the labels on the rows and columns
form a cover whose total cost equals the weight of the transversal.
For every position (i, j), the label on row i plus the label on column
j is at least the entry in position (i, j) in the matrix. Hence the labeling
is feasible for the dual problem. Equality between the sum of the labels
in a feasible labeling and the sum of the entries of a transversal implies
that the transversal is one of maximum weight and feasible labeling is one
of minimum weight, because every feasible labeling has sum as large as
the weight of every matching (since the positions in the matching must be
covered disjointly by the labels).


0
0
1
0
2
4
4
4
4
3
6
3
1
1
4
3
4
4
1
4
5
3
5
7
5
6
4
7
9
8
5
3
6
8
3




3
1
2
1
0
7
7
8
9
8
7
6
8
7
6
7
6
6
9
6
5
4
6
5
8
5
7
6
4
5
7
6
5
5
5




0
0
1
1
2
3
1
2
3
4
5
7
6
7
8
7
2
3
1
3
4
4
5
7
3
6
2
8
7
4
4
1
3
5
4



167
Chapter 3: Matchings and Factors
Section 3.2: Algorithms & Applications
168
Review of the “Hungarian Algorithm” for maximum weighted matching
in the assignment problem. Find a feasible vertex labeling for the dual, i.e.
weights l(v) such that l(xi) + l(yi) ≥w(i j). (This can be done by using the
maximum in each row as the row label, with 0’s for the columns.) Subtract
out to ﬁnd the “excess value” matrix l(xi) + l(yj) −w(i j). Find a maximum
matching and minimum cover in the equality subgraph (0’s in the excess
matrix). If this is a perfect matching, its value equals the dual value Pl(v)
being minimized, hence is optimal. If not, let S be the set of rows not in the
cover, T the set of columns in the cover, and ε the minimum excess value
in the uncovered positions. Subtract ε from the row labels in S, add ε to
the row labels in T , readjust the excess matrix, and iterate. (Note: any
minimum cover can be used, and we know from the proof of the K¨onig–
Egerv´ary Theorem that we can obtain a minimum cover by using T ∪(X −
S), where T and S are the subsets of Y and X reachable by alternating
paths from the unsaturated vertices in the row-set X.)
If the matching was not complete, then |S| > |T | and Pl(v) decreases,
which guarantees the ﬁniteness of the algorithm. The positions are of four
types, corresponding to edges from S to T , X −S to T , S to Y −T , and X −S to
Y −T . The change to the excess in the four cases is 0, +ε, −ε, 0, respectively.
Note that ε was deﬁned to be the minimum excess corresponding to edges
from S to Y −T , so every excess remains positive. For the ﬁrst matrix above,
the successive excess matrices computed in the algorithm could look like
those below. These are not unique, because different matchings could be
chosen in the equality subgraphs. The entries in the matching and the rows
and columns in the cover (X −S and T ) are indicated with underscores.


0
0
0
0
0
6
2
2
2
3
0
4
3
3
0
1
0
5
4
1
0
2
0
9
4
3
5
2
0
8
3
5
2
0
5

→


0
0
1
0
1
5
1
1
2
2
0
3
2
2
0
0
0
4
3
0
0
1
0
8
3
2
5
1
0
8
3
5
3
0
6

→


0
0
1
0
2
4
0
0
1
1
0
3
2
2
0
0
1
4
3
0
0
1
1
7
2
1
4
0
0
8
3
5
3
0
7


3.2.6. Finding a transversal of minimum weight. Let the rows correspond
to vertices x1, . . . , x5, the columns to vertices y1, . . . , y5, and let the weight
of edge xi yj be the value in position i j. Optimality of the answer can be
proved by exhibiting an optimal matching and exhibiting a feasible labeling
for the dual problem that has the same total value.
Alternatively, ﬁnding a minimum transversal is the same as ﬁnding a
minimum weight perfect matching in the corresponding graph, which cor-
responds to a maximum weight matching in the weighted graph obtained
by subtracting all the weights from a ﬁxed constant. In the example given,
we could subtract the weights from 13, and then the answer would be 5·13
minus the maximum weight of a transversal in the resulting matrix.
In the direct approach, the dual problem is to maximize Pl(v) subject
to l(xi)+l(yj) ≤w(xi yj). Subtracting the labels from the weights yields the
“reduced cost” matrix. At each iteration, we determine the equality sub-
graph and ε as before, but this time add ε to the labels of vertices in S (rows
not in the cover) and subtract ε from the labels of vertices in T (columns in
the cover). Since |S| > |T |, Pl(v) increases. Every matching has weight at
least Pl(v). When Gl contains a complete matching, min P w and max Pl
are attained and equal.
In the matrix below, the underscored positions form a minimum-weight
transversal; the weight is 30. In the dual problem, the indicated labeling
has total value 30, and the labels l(xi) and l(yj) sum to at most the matrix
entry wi, j. Hence these solutions are optimal.


0
1
3
5
2
4
4
5
8
10
11
2
7
6
5
7
4
4
8
5
12
9
6
5
6
6
13
10
7
4
4
5
7
9
8


3.2.7. The Bus Driver Problem. Bus drivers are paid overtime for the time
by which their routes in a day exceed t. There are n bus drivers, n morn-
ing routes with durations x1, . . . , xn, and n afternoon routes with durations
y1, . . . , yn. Assign to the edge aibj the weight wi, j = max{0, xi + yj −t}. The
problem is then to ﬁnd the perfect matching of minimum total weight. In-
dex the morning runs so that x1 ≥· · · ≥xn. Index the afternoon runs so
that y1 ≥· · · ≥yn. A feasible solution matches ai to bσ(i) for some permuta-
tion σ of [n]. If there exists i < j with σ(i) > σ( j), then we have
α = wi,σ(i) + wj,σ( j) = max{0, xi + yσ(i) −t} + max{0, xj + yσ( j) −t}
β = wi,σ( j) + wj,σ(i) = max{0, xi + yσ( j) −t} + max{0, xj + yσ(i) −t}
It sufﬁces to prove that α ≥β, because then there exists a minimizing
permutation with no inversion. The nonzero terms in the maximizations
have the same sum for each pair. Also,
xi + yσ(i) −t ≥xi + yσ( j) −t ≥xj + yσ( j) −t
xi + yσ(i) −t ≥xj + yσ(i) −t ≥xj + yσ( j) −t

169
Chapter 3: Matchings and Factors
Section 3.2: Algorithms & Applications
170
If the central terms in the inequalities are both positive, then α is at least
their sum, which equals β. If both are nonpositive, then α ≥0 = β. If the
ﬁrst is positive and the second nonpositive, then
α = xi + yσ(i) −t ≥xi + yσ( j) −t = β.
If instead the second is positive, then
α = xi + yσ(i) −t ≥xj + yσ(i) −t = β.
3.2.8. When the weights in a matrix are the products of nonnegative num-
bers associated with the rows and columns, a maximum weight transversal
is obtained by pairing the row having the kth largest row weight with the
column having the kth largest column weight, for each k. We show that
all other pairings are nonoptimal. If the weights are not matched in or-
der, then there exist indices i, j such that ai > aj but the weight b matched
with ai is less than the weight b′ matched with aj. To show that switching
these assignments increases the total weight, we compute
aib′ + ajb = aib + ai(b′ −b) + aj(b −b′) + ajb′
= aib + ajb′ + (ai −aj)(b′ −b) > aib + ajb′
When the weights in a matrix are the sums of nonnegative numbers as-
sociated with the rows and columns, every transversal has the same weight.
Since a transversal uses one element in each row and each column, wi, j =
ai + bj means that every transversal has total weight P ai + P bj.
3.2.9. One-sided preferences. There are k seminars and n students, each
student to take one seminar. The ith seminar will have ki students, where
P ki = n. Each student ranks the seminars; we seek a stable assignment
where no two students can both improve by switching.
Form an X, Y-bigraph where X is the set of students and Y has ki
vertices for each vertex i. For each edge from student xj to a vertex rep-
resenting the ith seminar, let the weight be k minus the rank of the ith
seminar in the preference of xj.
A maximum weight matching in this weighting is a stable assignment,
since if two students can both improve by trading assignments, then the
result would be a matching of larger weight.
3.2.10. Weighted preferences need not be stable. Consider men {x1, x2, x3}
and women {y1, y2, y3}. Each assigns 3 −i points to the ith person in his or
her preference list. Hence we indicate a preference order by a triple whose
entries are 0, 1, 2 in some order, with the position of the integer i being the
index of the person of the opposite sex to whom this person assigns i points.
In the matrix below, the preference vectors of the men and women la-
bel the rows and coloumns, respectively. An entry in the matrix is the sum
of the points assigned to that potential edge by the two people. The under-
lined diagonal is the only matching that uses the maximum entry in each
row and column, so it is the only maximum-weight matching. However, it
is not a stable matching, because man x1 and woman y1 prefer each other
to their assigned mates.


120
120
210
120
2
3
3
021
1
4
2
120
2
2
0


The example can be extended for all larger numbers of men and women by
adding pairs who are each other’s ﬁrst choice and are rated last by the six
people in this example.
3.2.11. In the result of the Gale-Shapley Proposal Algorithm with men
proposing, every man receives a mate at least as high on his list as in any
other stable matching. We prove that under the G-S Algorithm with men
proposing, no man is ever rejected by any woman who is matched to him
in any stable matching. This yields the result, since each man’s sequence
of proposals proceeds downward from the top of his list, and he can only
wind up with a woman less desirable than his most desirable match over
all stable matchings if he is rejected by some women who matches him in
some stable matching.
Consider the ﬁrst time when some man x is rejected by a woman a
to whom he is matched in some stable matching M. The rejection occurs
because a has a proposal from a man y higher than x on her list. In M,
man y is matched to some woman b. Since M is stable, y cannot prefer
a to b. Thus b appears above a on the list for y. But now the decreasing
property of proposals from men implies that y has proposed to b in the G-
S Algorithm before proposing to a. If y is now proposing to a, then y was
previously rejected by b. Since y is matched to b in M, this contradicts our
hypothesis that a rejecting x was the ﬁrst rejection involving a pair that
occurs in some stable matching.
3.2.12. The Stable Roommates Problem deﬁned by the preference orderings
below has no stable matching. There are only three matchings to consider:
ab|cd, ac|bd, and ad|bc. In each, two non-paired people prefer each other
to their current roommates. The problematic pairs are {b, c}, {a, b}, {a, c}
in the three matchings, respectively.
a : b > c > d
b : c > a > d
c : a > b > d
d : a > b > c

171
Chapter 3: Matchings and Factors
Section 3.3: Matchings in General Graphs
172
3.2.13. In the stable roommates problem, suppose that each individual
declares a top portion of the preference list as “acceptable”. Deﬁne the
acceptability graph to be the graph whose vertices are the people and whose
edges are the pairs of people who rank each other as acceptable. Prove that
all sets of rankings with acceptability graph G lead to a stable matching if
and only if G is bipartite. (Abeledo–Isaak [1991]).
In the stable roommates problem with each individual declaring a top
portion of the preference list as “acceptable”, and the acceptability graph be-
ing the graph on the people whose edges are the mutually acceptable pairs,
all sets of rankings with acceptability graph G allow stable matchings if
and only if G is bipartite. If G is bipartite, then we view the two partite
sets as the two groups in the classical stable matching problem (isolated
vertices may be added to make the partite sets have equal size). The un-
acceptable choices for an individual x may be put in any order, since they
are all (equally) unacceptable, so we can ensure that all choices for x that
are in the same partite set appear at the bottom of the preference order for
x. In the outcome of the Gale-Shapley Proposal Algorithm, there is no pair
(x, a) from opposite partite sets such that a and x prefer each other to their
assigned mates. Also no x prefers an individual in its own partite set to
the person assigned to x, since all individuals in its own partite set are un-
acceptable. Hence the stable matching produced for the bipartite version
is also stable in the original problem.
If G is not bipartite, then G has an odd cycle [x1, . . . , xk]. Deﬁne a set of
rankings such that xi prefers xi+1 to xi−1 (indices modulo k), and xi prefers
xi−1 to all others. The preferences of people not on the cycle are irrelevant.
Since the cycle has odd length, the people on the cycle cannot be paired up
using edges of the cycle. Given a candidate matching M, we may assume
by symmetry that x1 is not matched to x2 or to xk in M. Now x1 prefers
x2 to M-mate of x1, and x2 prefers x1 to the M-mate of x2 (which might be
x3). Hence the matching M is not stable. Thus there is no stable matching
for these preferences, which means that this acceptability graph does not
always permit a stable matching.
3.2.14. In the Proposal Algorithm with men proposing, no man is every
rejected by all the women.
Proof 1. By Theorem 3.2.18, the Proposal Algorithm succeeds, so it
ends with each men being accepted before being rejected by all women.
Proof 2. Once a woman has received a proposal, she thereafter re-
ceives a proposal on each round, since the key observation is her sequence
of “maybe”s is nondecreasing in her list. If a round has j rejections and n−j
“maybe”s, then the n −j unrejected men are distinct, since men propose to
exactly one woman on each round.
When a man has been rejected by k women, those k women have re-
ceived proposals, and thereafter by the remarks above they always receive
proposals from k distinct men. In particular, when a man has been rejected
by n −1 women, on the next round they receive proposals from n −1 dis-
tinct men other than him, and he proposes to the remaining women, so the
algorithm ends successfully on that step.
3.3. MATCHINGS IN GENERAL GRAPHS
3.3.1. The graph G below has no 1-factor. Deleting the four vertices with
degree 3 leaves six isolated vertices; thus o(G −S) > |S| for this set S.
•
•
•
•
•
•
•
•
•
•
3.3.2. The maximum size of a matching in the graph G below is 8. A match-
ing of size 8 is shown. Since n(G) = 18, it sufﬁces to show that G has no
perfect matching. For this we present a set S such that o(G −S) > |S|, vio-
lating Tutte’s condition. Such a set S is marked. (Note: the smallest vertex
cover has size 9, so duality using vertex cover is not adequate.)
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
3.3.3. k-factors in the 4-regular graph below. The full graph is a 4-factor,
and the spanning subgraph with no edges is a 0-factor. There is a 2-factor
consisting of the outer 4-cycle and the 6-cycle on the remaining vertices.
Since these cycles have even length, taking alternating edges from both
cycles yields a 1-factor. Deleting the edges of the 1-factor leaves a 3-factor.

173
Chapter 3: Matchings and Factors
Section 3.3: Matchings in General Graphs
174
•
•
•
•
•
•
•
•
•
•
3.3.4. A k-regular bipartite graph is r-factorable if and only if r divides k.
The edges incident to a single vertex demonstrate necessity. For sufﬁciency,
a k-regular bipartite graph has a perfect matching, and hence by induction
on k is 1-factorable; take unions of the 1-factors in groups of r.
3.3.5. Join of graphs G and H. As long as G and H have at least one vertex
each, G ∨H is connected (it has Kn(G),n(H) as a spanning subgraph).
In forming G ∨H, every vertex of G gains n(H) neighbors in H,
and every vertex in H gains n(G) neighbors in G.
Hence 1(G ∨H) =
max{1(G) + n(H), 1(H) + n(G)}.
3.3.6. A tree T has a perfect matching if and only if o(T −v) = 1 for every
v ∈V (T ). Necessity. Let M be a perfect matching in T in which u is the
vertex matched to v. Each component of T −v not containing u must have
a perfect matching and hence even order. The component containing u is
matched by M except for u, so it has odd order.
Sufﬁciency. Proof 1 (construction of matching). Suppose that o(T −
v) = 1 for all v ∈V (T ). Each vertex has a neighbor in one component of odd
order. We claim that pairing each w to its neighbor in the odd component
of T −w yields a matching. It sufﬁces to prove that if u is the neighbor of
v in the unique odd component T1 of T −v, then v is the neighbor of u in
the unique odd component T2 of T −u. Since o(T −v) = 1, the components
of T −v other than T1 have even order. The subtree T2 consists of these
components and edges from these to v. Hence T2 includes some even vertex
sets and {v}, and T2 thus has odd order.
Proof 2 (induction on n(T )). The claim is immediate for n(T ) = 2. If
n(T ) > 2 and o(T −v) = 1 for all v, then the neighbor w of any leaf u has
only one leaf neighbor. Let T ′ = T −{u, w}. The components of T ′ −v are
the same as the components of T −v, except that one of them in T −v
includes {u, w} and the corresponding component of T ′ −v omits them.
Hence the parities are the same, and o(T ′ −v) = 1 for all v ∈V (T ′). By the
induction hypothesis, T ′ has a perfect matching, and adding the edge uw
to this completes a perfect matching in T .
(Comment: It is also possible to do the induction step by deleting an
arbitrary vertex, but it is then a bit more involved to prove that every
component T ′ of the forest left by matching v to its neighbor in the odd
component of T −v satisﬁes the condition o(T ′ −x) = 1 for all x.
Proof 2a (induction and extremality). The basis again is n(T ) = 2.
For n(T ) > 2, let P be a longest path. Let x be an endpoint of P, with
neighbor y. Since o(T −y) = 1 and P is a longest path, dT (y) = 2. Deleting
x and y yields a tree T ′ such that o(T ′ −v) = o(T −v) = 1 for all v ∈V (T ′),
since x and y lie in the same component of T ′ −v. Hence the induction
hypothesis yields a perfect matching in T ′, which combines with xy to form
a perfect matching in T .
Proof 3 (Tutte’s Condition). By Tutte’s Theorem, it sufﬁces to prove
for all S ⊆V (T ) that o(T −S) ≤|S|. We prove this by induction on |S|. Since
o(T −v) = 1, we have n(T ) even, and hence o(T −∅) = 0. When |S| = 1,
the hypothesis o(T −v) = 1 yields the desired inequality for S = {v}.
For the induction step, suppose that |S| > 1. Let T ′ be the smallest
subtree of T that contains all of S. Note that all leaves of T ′ are elements
of S. Let v be a leaf of T ′, and let S′ = S −{v}. By the induction hypothesis,
o(T −S′) ≤
S′ = |S| −1. It sufﬁces to show that when we delete v from
T −S′, the number of odd components increases by at most 1.
Let T ′′ be the component of T −S′ containing v. Deleting v from T −S′
replaces T ′′ with the components of T ′′ −v. We worry only if T ′′ −v has
at least two odd components. Since v is a leaf of T ′, all of S′ lies in one
component of T −v. Hence the components of T ′′ −v are the same as the
components of T −v except for the one component of T −v containing S′.
Since o(T −v) = 1, we can have two odd components in T ′′ −v only if
the one odd component of T −v is a component of T ′′ −v and the component
of T ′′ −v that is not a component of T −v is also odd. Since the remaining
components of T ′′−v are even, this means that T ′′ itself has odd order (it in-
cludes v and the two odd components of T ′′−v). Therefore, the replacement
of T ′′ with the components of T ′′ −v increases the number of odd compo-
nents only by one. We conclude that o(T −S) ≤o(T −S′)+1 ≤
S′+1 = |S|,
which completes the induction step.
3.3.7. There exist k-regular simple graphs with no perfect matching. When
k is even, Kk+1 is a k-regular graph with no perfect matching, since it has
an odd number of vertices. When k is odd, there are two usual types of
constructions.
Construction 1. Begin with k disjoint copies of Kk+1. Delete (k −1)/2
disjoint edges from each copy, which drops the degree of k −1 vertices
in each copy to k −1. Add a new vertex vi to the ith copy, joining it to
each of these vertices of degree k −1.
Add one ﬁnal vertex x joined to
v1, . . . , vk.
The graph has been constructed to be k-regular.
Deleting x
leaves k components of order k + 2 (odd); hence the graph fails Tutte’s

175
Chapter 3: Matchings and Factors
Section 3.3: Matchings in General Graphs
176
condition and has no perfect matching.
A slight variation is to start with k copies of Kk−1,k, add a matching of
size (k −1)/2 to the larger side in each copy, and join the leftover vertices
from each larger side to a ﬁnal vertex x.
Construction 2. Begin with k disjoint copies of Kk+1. Subdivide one
edge in each copy, which introduces k new vertices of degree 2. To raise
their degree to k, add an independent set of k −2 additional vertices in the
center joined to each of these k vertices. Deleting the k −2 vertices in the
center violates Tutte’s condition.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
3.3.8. No graph with a cut-vertex is 1-factorable. Suppose v is a cut-vertex
of G. If G is 1-factorable, then G has even order, and G −v has a compo-
nent H of odd order. For any 1-factor using an edge incident to v whose
other endpoint is not in H, the vertices of H cannot all be matched. The
contradiction implies there is no 1-factorization.
A 3-regular simple graph having a 1-factor and connectivity 1.
•
•
•
•
•
•
•
•
•
•
3.3.9. Every graph G with no isolated vertices has a matching of size at
least n(G)/(1 + 1(G)). We use induction on the number of edges. In the
induction step, we will delete an edge whose endpoints have degree at least
2 (other edge deletions would isolate a vertex). This tells us what we need
to cover in the basis step.
Basis step: every edge of G is incident to a vertex of degree 1. In such
a graph, every component has at most one vertex of degree exceeding 1,
and thus each component is a star. We form a matching using one edge
from each component. Since the number of vertices in each component is 1
plus the degree of the central vertex, the number of components is at least
n(G)/(1 + 1(G)).
Induction step: G has an edge e whose endpoints have degree at least
2. Since G′ = G −e has no isolated vertex, we can apply the induction
hypothesis to obtain α′(G) ≥α′(G′) ≥n(G′)/(1+1(G′)) ≥n(G)/(1+1(G)).
3.3.10. The maximum possible value of β(G) in terms of α′(G) is 2α′(G).
If G has a maximal matching of size k, then the 2k endpoints of these
edges form a set of vertices covering the edges, because any uncovered edge
could be added to the matching. Hence β(G) ≤2α′(G). A graph consisting
of k disjoint triangles has α′ = k and β = 2k, so the inequality is best
possible. These values also hold for the graph K2k+1, since we cannot omit
two vertices from a vertex cover of K2k+1. More generally, every disjoint
union of cliques of odd order satisﬁes β(G) = 2α′(G).
3.3.11. A graph G has a matching that saturates a set T ⊆V (G) if and
only if for all S ⊆V (G), the number of odd components of G −S contained
in G[T ] is at most |S|.
Necessity.
Saturating T requires saturating each vertex in the odd
components of G[T ], which uses a vertex of S for each such component.
Sufﬁciency. Form G′ by adding a set U of n(G) new vertices adjacent to
each other and to every vertex of G −T . We claim that G′ satisﬁes Tutte’s
Condition. Each S′ ⊆V (G′) that contains all of U has size at least n(G).
Since G′ −S′ has at most n(G) vertices, it has at most
S′ odd components.
When U ̸⊆S′, what remains of G′ outside of T is a single component.
Letting S = V (G) ∩S′, the number of odd components in G′ −S′ is thus at
most one more than the number of odd components of G −S contained in
T . This yields o(G′ −S′) ≤
S′ + 1, which sufﬁces since n(G′) is even.
Since G′ satisﬁes Tutte’s Condition, G′ has a perfect matching. The
edges used to saturate T all lie in G, since no edges were added from T to
U. Hence these edges form a matching in G that saturates T .
3.3.12. Extension of K¨onig–Egerv´ary to general graphs. A generalized cover
of G is a collection of vertex subsets S1, . . . , Sk and T such that each Si has
odd size and every edge of G has one endpoint in T or both endpoints in
some Si. The weight of a generalized cover is |T | + P(|Si| −1)/2.
The minimum weight β∗(G) of a generalized cover equals the maximum
size α′(G) of a matching. Always α′(G) ≤β∗(G), because a matching uses
at most (|Si|−1)/2 edges within Si and at most |T | edges incident to T , and
there are no edges not of this type when S1, . . . , Sk and T form a generalized
cover. For equality, it sufﬁces to exhibit a generalized cover with weight
equal to α′(G).
The Berge–Tutte formula says that 2α′(G) = minT {n −d(T )}, where
d(T ) = o(G −T)−|T | is the deﬁciency of a vertex set T . Let T be a maximal

177
Chapter 3: Matchings and Factors
Section 3.3: Matchings in General Graphs
178
set among those having maximum deﬁciency. For this choice of T , there are
no components of (positive) even order in G −T , since we could add to T a
leaf of a spanning tree of such a component to obtain a larger set T ′ with the
same deﬁciency. Let S1, . . . , Sk be the vertex sets of the components of G−T .
By construction, this is a generalized cover. Because 2α′(G) = n −d(T), we
have k = |T | + d(T ). Thus
β∗(G) = |T | + Pk
i=1(|Si| −1)/2 = (n + |T | −k)/2 = α′(G).
3.3.13. Proof of Tutte’s Theorem from Hall’s Theorem. Given a graph G
such that o(G −S) ≤|S| for all S ⊆V (G), we prove that G has a perfect
matching. Let T be a maximal vertex subset such that o(G −T ) = |T |.
a) Every component of G −T is odd, and T ̸= ∅. If G −T has an even
component C, then let v be a leaf of a spanning tree of C. Now |T ∪{v}| =
|T |+1 = o(G −T )+1 = o(G −(T ∪{v})), which contradicts the maximality
of T . Thus G −T has no even components.
Since o(G −∅) ≤0, the graph G has no odd components. Since G −T
has no even components, we have |T | > 0, and G −T is smaller than G.
b) If C is a component of G −T , then Tutte’s Condition holds for every
subgraph of C obtained by deleting one vertex. Since C −x has even order,
a violation requires o(C −x −S) ≥|S| + 2. Adding this inequality to |T | =
o(G −T ) and |{x}| = 1 yields
|T ∪x ∪S| ≤o(G −T ) −1 + o(C −x −S) = o(G −T −x −S),
which contradicts the maximality of T .
c) The bipartite graph H formed from G by contracting the components
of G−T (and deleting edges within T ) satisﬁes Hall’s Condition for a match-
ing that saturates the partite set opposite T . There is an edge from a vertex
t ∈T to a component C of G −T if and only if NG(t) contains a vertex of
C. For A ⊂C, let B = NH(A). The elements of A are odd components of
G −B; hence |A| ≤o(G −B). Since Tutte’s condition yields o(G −B) ≤|B|,
we have |NH(A)| ≥|A|.
d) The ﬁnal proof. By Hall’s Theorem and part (c), H has a matching
that saturates C. This matching yields o(G −T ) = |T | pairwise disjoint
edges from odd components of G −T to T . By part (a), these are all the com-
ponents of G −T These edges saturates one vertex from each component
of G −T . By part (c) and the induction hypothesis, the vertices remain-
ing in each component of G −T are saturated by a perfect matching of that
subgraph. The union of the matchings created is a perfect matching of G.
3.3.14. If G is a simple graph with δ(G) ≥k and n(G) ≥2k, then α′(G) ≥k.
Let n = n(G). By the Berge–Tutte Formula, it sufﬁces to show that the
deﬁciency o(G −S) −|S| is at most n −2k for every S ⊆V (G). We prove
this by contradiction; suppose that o(G −S) −|S| > n −2k.
Let s = |S|. We have o(G −S) > n −2k + s. Thus there are more than
n −2k + s vertices outside S. Together with S, we have n > n −2k + 2s.
Thus s < k. With s < k, a vertex outside S has fewer than k neighbors in S,
and δ(G) ≥k implies that no odd components of G −S are single vertices.
Indeed, every component of G −S has at least 1 + k −s vertices. Thus
we can improve our earlier inequality: (1 + k −s)(n −2k + s + 1) + s ≤n.
This simpliﬁes to (k −s)(n −2k + s −1) < 0. Since n ≥2k, both factors on
the left are positive, which yields a contradiction.
3.3.15. Every 3-regular graph G with at most two cut-edges has a 1-factor.
Since G has at most two cut-edges, at most two odd components of G −S
have one edge to S; the remainder have at least three edges to S (using the
parity of degrees). With
[S, S]
 = m, this yields 3 |S| ≥m ≥3o(G −S) −4.
Thus |S| ≥o(G −S) −4/3. Since n(G) is even, |S| and o(G −S) have the
same parity, which means that o(G −S) exceeds |S| only if is greater by
at least 2. This contradicts o(G −S) ≤|S| + 4/3. Hence Tutte’s condition
holds, and Tutte’s Theorem implies that G has a 1-factor.
3.3.16. If G is k-regular and remains connected when any k −2 edges are
deleted, then G has a 1-factor.
By Tutte’s Theorem, it sufﬁces to show
that o(G −S) ≤|S| for every S ⊆V (G). This follows for S = ∅from the
assumption that n(G) is even; hence we may assume that S ̸= ∅. Let H
be an odd component of G −S, and let m be the number of edges joining H
to S. In the subgraph H, the sum of the degrees is kn(H) −m. Since this
must be even and n(H) is odd, k and m must have the same parity.
By the hypothesis, there are at least k −1 edges between H and S.
The requirement of equal parity thus yields m ≥k.
Summing over all
odd components of G −S yields at least k · o(G −S) edges between S and
V (G) −S. Since the degree sum of the vertices in S is exactly k |S|, we
obtain k · o(G −S) ≤k |S|, or o(G −S) ≤|S|.
3.3.17. Under the conditions of Exercise 3.3.16, each edge belongs to some
1-factor in G. We want to show that G′ = G−x −y has a 1-factor. By Tutte’s
Theorem, since G has even order, it sufﬁces to show that o(G′−S′) ≤
S′+1
for all S′ ⊂V (G′). Equivalently, o(G −S) ≤|S| −1 for all S ⊆V (G) that
contain {x, y}.
Let l be the number of edges between S and an odd component H of
G −S; the hypothesis yields l ≥k −1. The sum kn(H) −m of the vertex
degrees in H must be even, but n(H) is odd, so k and m must have the same
parity; we conclude that l ≥k. Summing over all odd components of G −S,
we have m ≥k · o(G −S), where m is the number of edges between S and
the rest of the graph. Since G is k-regular and G[S] contains the edge xy,
we have m ≤k |S| −2. Thus o(G −S) ≤|S| −2/k. Since o(G −S) and |S|
are integers, we have the needed inequality.

179
Chapter 3: Matchings and Factors
Section 3.3: Matchings in General Graphs
180
3.3.18. Construction of a k-regular graph with no 1-factor (when k is odd),
such that deleting any k −3 edges leaves a connected graph. We make the
graph simple and connected under the deletion of any k −3 vertices, which
is a stronger requirement.
The Tutte set S will have size k −2, leaving k components in G −S.
Each component of G −S consists of Kk−2,k−1 plus a cycle added through
the vertices in the larger partite set. This gives those vertices degree k.
Add a matching from the vertices in the smaller partite set to S. Now G is
k-regular and has a Tutte set, so it has no 1-factor.
When any k −3 vertices are deleted to form G′, what remains in each
component H of G −S is connected, due to the spanning biclique. Also
some edge from H to S remains. If exactly one vertex of S remains, then G′
is now connected. If more than one vertex of S remains, then any two are
connected in G′ by a path through some component of G −S.
3.3.19. Every 3-regular simple graph with no cut-edge decomposes into
copies of P4 (the 4-vertex path). By Petersen’s Theorem, a 3-regular simple
graph G with no cut-edge has a 1-factor M. Deleting the edges of M from
G leaves a 2-factor H, which is a disjoint union of cycles. Choose an orien-
tation D for the 2-factor so that each vertex has one edge in and one edge
out (that is, make the components of the 2-factor into directed cycles).
We let each edge of M be the central edge in a copy of P4. The other
two edges in the copy of P4 containing uv ∈M are the edges leaving u and
v in D; let these be uw and vz. These three edges form P4 if w ̸= z. We
have w ̸= z because each vertex has only one entering edge in D.
The central edges of these P4’s are precisely the n(G)/2 edges of M.
Each edge of H appears in exactly one of the constructed P4’s, since every
edge outside M follows exactly one vertex in D.
Thus the copies of P4
formed in this way are pairwise edge-disjoint and cover E(G).
3.3.20. A 3-regular simple graph G has a 1-factor if and only if it decom-
poses into copies of P4.
Necessity. Deleting the edges of a 1-factor M from G leaves a 2-factor
H, which is a disjoint union of cycles. Choose an orientation D for the
2-factor by choosing a consistent orientation around each cycle.
Let each edge of M be the central edge in a copy of P4. The other two
edges in the copy of P4 containing uv ∈M are the edges leaving u and v in
D; let these be uw and vz. These three edges form P4 when w ̸= z, which
holds since each vertex has only one entering edge in D.
The central edges of these P4s are the n(G)/2 edges of M. Each edge
of the 2-factor also appears in exactly one constructed P4, since each such
edge is the tail of exactly one vertex in D. Thus these copies of P4 are
pairwise edge-disjoint and cover E(G).
Sufﬁciency.
A P4-decomposition of a 3-regular graph G has n(G)/2
subgraphs, since e(G) = 3n(G)/2 and e(P4) = 3. No edge-disjoint copies of
P4 have a common internal vertex v, since that would give v degree at least
4. Hence the middle edges in the subgraphs of the decomposition form a
matching of size n(G)/2 and hence a 1-factor.
3.3.21. If G is a 2m-regular graph, and T is a tree with m edges and diame-
ter less than the girth of G, then G decomposes into copies of T . We prove a
stronger result. Consider an arbitrary labeling of V (T ) with {1, . . . , m + 1}.
We prove by induction on m that G has a T -decomposition such that each
vertex of G appears in m + 1 copies of T , once with each label. Call this a
labeled T-decomposition of G. The trivial necessary degree conditions are
satisﬁed because the sum of the vertex degrees in T is 2m. There will be
n(G) copies of T , independent of the value of m.
For m = 0 (or m = 1), the claim is immediate. For m ≥1, let H be a 2-
factor of G, and let i be a leaf of T , with neighbor j. Note that the distance
in T from j to any other vertex of T is at most diam (T ) −1. The induction
hypothesis guarantees a labeled T −i-decomposition of G −E(H). For each
vertex w in each cycle in H, we add to the copy of T −i with j at w by
adding the edge to the next vertex in the cycle, which will then receive
label i. This vertex does not already appear in this copy of T −i, because
the girth of G exceeds the diameter of T .
3.3.22. Hall’s Theorem follows from Tutte’s Theorem.
Given an X, Y-
bigraph G, let H be the graph obtained from G by adding one vertex to
Y if n(G) is odd and then adding edges to turn Y into a clique.
a) G has a matching of size |X| if and only if H has a 1-factor. Each
edge of a matching in G has one vertex of X and one vertex of Y. Since
H[Y] is a clique, we can pair the remaining vertices arbitrarily to obtain a
1-factor in H from a matching of size |X| in G. Conversely, if H has a 1-
factor, it must use |X| edges to saturate X, since H[X] is an independent
set. These edges from the desired matching in G.
b) If G satisﬁes Hall’s Condition (|N(S)| ≥|S| for all S ⊆X), then H
satisﬁes Tutte’s Condition (o(H −T ) ≤|T | for all T ⊆V (H)). Since H[Y ∩T ]
is a clique, the odd components obtained by deleting T are the vertices of
X whose neighbors all lie in T and perhaps the one large remaining com-
ponent. Let S = {x ∈X: N(x) ⊆T ∩Y}. Since G satisﬁes Hall’s Condition,
|S| ≤|T ∩Y| ≤|T |. Thus o(H −T ) ≤|T | + 1. Since n(H) is even, o(H −T )
and |T | have the same parity, and thus o(H −T ) ≤|T |. Thus H satisﬁes
Tutte’s Condition.
c) Tutte’s Theorem implies Hall’s Theorem. The necessity of Hall’s con-
dition is immediate (any subset of X must have as many neighbors as
elements to be completely matched). For sufﬁciency as a consequence of

181
Chapter 3: Matchings and Factors
Section 3.3: Matchings in General Graphs
182
Tutte’s Theorem, we form H from G as described above. Since G satis-
ﬁes Hall’s Condition, part (b) implies that H satisﬁes Tutte’s Condition.
Tutte’s Theorem now implies that H has a 1-factor. Part (a) now implies
that G has a matching saturating X.
3.3.23. Consider a connected claw-free graph G of even order.
a) In a spanning tree of G generated by Breadth-First Search, any two
vertices with a common parent other than the root are adjacent. Let r be
the root, and let u, v be children of s, with s ̸= r. In a Breadth-First Search
tree, the path from the root to any vertex is a shortest such path. We have
d(u,r) = d(v,r) = d(s,r) + 1. An edge from u or v to the parent t of s would
establish a shorter path to the root of length d(s,r). Hence there is no such
edge. To avoid having s, t, u, v induce a claw, u and v must be adjacent.
b) G has a 1-factor. We use induction on n(G). Basis step (n(G) = 2):
G must be K2.
Induction step (n(G) > 2): Let T be a Breadth-First Search tree from
r. Let u be a vertex at maximum distance from r, and let s be the parent of
v. If s has no other child, then T ′ = T −{u, s} is connected. if s has another
child v, then let T ′ = T −{u, v}.
In each case, T ′ is connected, so G′[V (T ′)] is a smaller connected claw-
free graph of even order. The induction hypothesis guarantees a perfect
matching in G′. To this matching we add the edge between the two vertices
we deleted to obtain G′ (in the ﬁrst case, the edge us exists because s is the
parent of u; in the second case, the edge uv exists by part (a).)
3.3.24. Maximum number of edges with no 1-factor. A maximal n-vertex
graph with no 1-factor consists of m vertices of degree n −1, with the re-
maining n −m vertices inducing a union of m +2 cliques of odd order. Since
adding an edge cannot reduce α′ or increase it by more than one, we may
assume that α′(G) = n/2 −1.
Hence maxS⊆V {o(G −S) −|S|} = 2; the
maximum matching omits 2 vertices. Let S be a set achieving equality, so
o(G −S) = |S| + 2. Each component of G −S must induce a clique, G −S
has no component of even order (else add edges from even to odd compo-
nents), and vertices of S have degree n −1, all because adding the edges
that would be missing if any of these failed would not reduce the deﬁciency
of S. This completely describes the maximal graphs.
The maximum number of edges in a graph with minimum degree
k < n/6 −2 and no 1-factor is
 k
2

+ k(n −k) +
 n−2k−1
2

.
We assume n
is even. Let G be a maximal n-vertex graph with no 1-factor. Let f (k) =
 k
2

+ k(n −k) +
 n−2k−1
2

. We ﬁrst observe that there is a maximal graph
having no 1-factor that has f (k) edges and minimum degree k; the graph is
Kk ∨((k + 1)K1 + Kn−2k−1). This is an example of the structure above with
m = k. This construction is valid when n −2k −1 > 0, which requires only
k ≤n/2 −1. Nevertheless, f (k) is not always the maximum size of a graph
H with minimum degree k and no 1-factor. For n ≥8, we can build coun-
terexamples when k < n/2 −1 and k is at least n/6 (approximately). The
smallest counterexample occurs when n = 8 and k = 2. We have f (2) = 16
and f (3) = 18. We obtain a graph with minimum degree 2, no 1-factor,
and 17 edges by deleting one edge from K3 ∨(5K1).
Suppose H has a vertex of degree k < n/6−2 and has no perfect match-
ing; we obtain an upper bound on e(H). Augment H by adding edges to
obtain a maximal supergraph G having no 1-factor; note that δ(G) = l ≥k.
By direct computation, f (t + 1) −f (t) = 3t −n + 4. If t ≥n/2, then there is
no graph with minimum degree at least t that has no 1-factor. Since f (t) is
a parabola centered at t = (n −4)/3 and δ(G) < n/2, we have f (k) ≥f (l)
if k < n/6 −2. Therefore, it sufﬁces to prove that if δ(G) = k and G has the
form described above, then e(G) ≤f (k).
If v does not have degree n −1, then v belongs to a clique of size d(v) −
m +1 in G −S, which is odd. If any two components of G −S have sizes p ≥
q ≥k −m +3, then we gain 2p and lose 2q −4 edges by moving two vertices
from the smaller to the larger clique in G −S, still maintaining the same
minimum degree. Hence for ﬁxed m, e(G) is maximized by using cliques of
size k −m + 1 for all but one component of G −S. Now the degree sum in G
is m(n−1)+(k−m+1)(m+1)k+[n−(k−m+1)(m+1)][n−(k−m+1)(m+1)].
If m < k/2, then replacing m by k −m increases this, since only the ﬁrst
term changes. Hence we may assume m ≥k/2. If k > m ≥k/2 −1, then
we can increase m by moving two vertices from a small clique to S, since
2(m + 1) ≥2(k −m −1) guarantees that we can then take vertices from the
other small components to make new components of size k −m −1. This
increases the number of edges (computation omitted), so we may assume
m = k. Now e(G) = f (k).
3.3.25. A graph G is factor-critical if and only if n(G) is odd and o(G −S) ≤
|S| for all nonempty S ⊆V (G). Necessity. Factor-critical graphs are those
where every subgraph obtained by deleting one vertex has a 1-factor. Thus
factor-critical graphs have odd order. Given a nonempty subset S of V (G),
let v be a member of S, and let G′ = G −v. Since G′ has a 1-factor and
G −S = G′ −S′, we have o(G −S) = o(G′ −S′) ≤
S′ = |S| −1. Thus the
desired inequality holds for S.
Sufﬁciency.
Suppose that n(G) is odd and o(G −S) ≤|S| for all
nonempty S ⊆V (G).
Given a vertex v ∈V (G), let G′ = G −v.
Con-
sider S′ ⊆V (G′), and let S = S′ ∪{v}. Since G has odd order, the quantities
|S| and o(G−S) have different parity. The hypothesis thus yields o(G−S) ≤
|S|−1. Since G′ −S′ = G −S, we have o(G′ −S′) = o(G −S) ≤|S|−1 =
S′.
By Tutte’s Theorem, G −v has a 1-factor.

183
Chapter 3: Matchings and Factors
Section 3.3: Matchings in General Graphs
184
3.3.26. If M is a matching in a graph G, and u is an M-unsaturated vertex,
and G has no M-augmenting path that starts at u, then u is unsaturated in
some maximum matching in G. We use induction on the difference between
|M| and α′(G). If the difference is 0, then already u is unsaturated in some
maximum matching. If M is not a maximum matching, then there is an
M-augmenting path P. Since u is not an endpoint of P, then M△E(P) is a
larger matching M′ that does not saturate u.
If no M′-augmenting path starts at u, then by the induction hypoth-
esis u is unsaturated in some maximum matching. Suppose that an M ′-
augmenting path P′ starts at u. Since no M-augmenting path starts at u,
P′ shares an edge with P. Form an M-alternating path by following P ′ from
u until it ﬁrst reaches a vertex of P; this uses no edges of M ′ −M. Then
follow P to the end in whichever direction continues the M-alternating
path.
Since both endpoints of P are M-unsaturated, this completes an
M-augmenting path starting at u, which contradicts the hypothesis.
3.3.27. Proof of Tutte’s 1-Factor Theorem from correctness of the Blosson
Algorithm.
a) If G has no perfect matching, and M is a maximum matching in G,
and S and T are the sets generated when running the Blossom Algorithm
from u, then |T | < |S| ≤o(G −T ). Since M is a maximum matching, no M-
augmenting path is found. At the start of the algorithm, |T | = 0 < 1 = |S|.
As the algorithm proceeds, exploring a vertex v ∈S leads to consideration
of a neighbor y of v that is not in T . If y is unsaturated in M, then an
M-augmenting path is found; this case is forbidden by hypothesis. If y is
saturated but not yet in S, then y is added to T and its mate is added to S.
This augments both T and S by one element, maintaining |S| = |T | + 1.
Finally, if y is saturated and lies in S, then a blossom is established.
Every matched edge in the blossom has one vertex of T and one vertex of
S, and the blossom is shrunk into the single vertex of S on it that is not
matched to another vertex along the blossom. Hence the “current” S and
T shrink by the same number of vertices. Therefore, we always maintain
|S| = |T | + 1.
Now consider the second inequality. When the algorithm ends, the cur-
rent S is an independent set with no edges to vertices that have not been
reached, because if an edge has been found between vertices of S, then
a blossom would have been shrunk, and an edge to an unreached vertex
would have been explored. Hence deleting T leaves at least |S| odd compo-
nents. (There may be more among the unreached vertices; the algorithm
does not explore unsaturated edges from T .)
These isolated vertices in the ﬁnal S correspond to odd components
of G −T in the original graph, because shrinking of a blossom loses an
even number of vertices. Since all edges leaving the blossom are explored,
the ﬁnal T disconnects everything in the blossom from what is outside of
it.
Since also the blossom corresponds to an odd number of vertices in
the original graph, deleting T from the original graph must leave an odd
component among these vertices. One such set exists for each vertex in the
ﬁnal S (at the end of the algorithm).
b) Proof of Tutte’s 1-Factor Theorem. If o(G −T ) ≤|T | for every vertex
subset T , then the algorithm cannot end by ﬁnding a set T such that |T | <
|S| ≤o(G −T ). Hence it can only end by ﬁnding an augmentation, and this
continues until a 1-factor is found.
3.3.28. a) Reduction of the f -factor problem to the f -solubility problem. It
sufﬁces to prove that G has an f -factor if and only if the graph H obtained
by replacing each edge by a path of length 3 is f ′-soluble, where f ′ is the
extension of f obtained by deﬁning f ′ to equal 1 on all the new vertices.
Suppose that x, a, b, y is the path in H representing the edge xy in G.
If G has an f -factor, then H is f ′-soluble by giving weights 1, 0, 1 or 0, 1, 0
to the successive edges on the path depending on whether xy is or is not in
the f -factor.
Conversely, if H is f ′-soluble, then because every edge of H is incident
to a vertex with f ′ = 1, every edge is used with weight 1 or 0, and the
weights along the 3-edge path representing an edge xy must be 1, 0, 1 or
0, 1, 0. At a vertex x there must be exactly f (x) paths of the ﬁrst type, so
we obtain an f -factor of G by using the edges corresponding to these paths.
b) Reduction of f -solubility to 1-factor. Let H be the graph formed
from G by replacing each vertex v ∈V (G) with an independent set of f (v)
vertices. Now G is f -soluble if and only if H has a 1-factor; collapsing or
expanding the vertices turns the solution of one problem into the solution
of the other.
3.3.29. Tutte’s f -factor condition and graphic sequences. For disjoint sets
Q, T , let e(Q, T ) denote the number of edges from Q to T . For a function h
deﬁned on V (G), let h(S) = P
v∈S h(v) for S ⊆V (G).
For f : V (G) →N0, Tutte proved that G has an f -factor if and only if
q(S, T ) + f (T ) −dG−S(T ) ≤f (S)
for all choices of disjoint subsets S, T ⊆V (G), where q(S, T ) is the number
of components Q of G −S −T such that e(Q, T ) + f (V (Q)) is odd.
a)
The Parity Lemma. The quantity δ(S, T ) has the same parity as f (V ) for
disjoint sets S, T ⊆V (G), where δ(S, T ) = f (S) −f (T ) + dG−S(T ) −q(S, T ).
We use the observation that the parity of the number of odd values in a set
of integers equals the parity of the sum of the set.

185
Chapter 3: Matchings and Factors
Section 3.3: Matchings in General Graphs
186
We ﬁx S and use induction on |T |.
When T = ∅, we have f (T ) −
dG−S(T ) = 0. Also m(Q, T ) = 0 for each component Q of G −S −T , so we
can sum over the components to obtain q(S, ∅) ≡f (S) (mod 2). Signs don’t
matter, so δ(S, ∅) ≡f (S) −f (S) ≡f (V (G)) (mod 2).
For T ̸= ∅, we compare δ(S, T ) and δ(S, T −x); it sufﬁces to show that
the difference is even. Let T ′ = T −x. In computing the difference, the
contributions of −f (S) cancel, as do the sums over T ′. This leaves
δ(S, T ) −δ(S, T ′) = q(S, T ) −q(S, T ′) + f (x) −dG−S(x).
The contributions to q(S, T ) and q(S, T ′) from components of G −S −T
having no neighbors of x also cancel. The components having neighbors of
x combine with x to form one large component in G −S −T ′ with vertex
set Q′ ∪{x}. Our initial observation about parity yields
q(S, T ) −q(S, T ′) ≡f (Q′) + m(Q′, T ) −[ f (Q′ ∪{x}) + m(Q′ ∪{x}, T ′)] (mod 2).
The edges from x to Q′ count in m(Q′, T ), the edges from x to T ′ count
in m(Q′∪{x}, T ′), and the edges from Q′ to T ′ count in both. Thus m(Q′, T )−
m(Q′ ∪{x}, T ′) ≡dG−S(x) (mod 2), and we have q(S, T ) −q(S, T ′) ≡f (x) +
dG−S(x) (mod 2). This has the same parity as the rest of the difference,
yielding δ(S, T ) −δ(S, T ′) ≡0 (mod 2).
•
•
•
T ′
x
Q′
T
Q1
Q2
Q3
b) Let d1, . . . , dn be nonnegative integers with P di even and d1 ≥· · · ≥
dn. If G = Kn and f (vi) = di, then G has an f -factor if and only if Pk
i=1 di ≤
(n −1 −s)k + Pn
i=n+1−s di for all k, s with k + s ≤n.
Such an f -factor
exists if and only if f (V ) = P di is even and Tutte’s condition holds. Since
dKn−S(v) = n −1 −|S| for all v ∈T , the f -factor condition requires that
f (T ) ≤f (S) + (n −1 −|S|) |T | −q(S, T ) for any disjoint sets S, T ⊆V (G).
With |T | = k and |S| = s, the condition becomes f (T ) ≤f (S) + (n −1 −
s)k −q(S, T ).
Necessity. Applied with the k vertices of largest degree in T and the s
vertices of smallest degree in S and using q(S, T ) ≥0, the f -factor condi-
tion yields the desired inequality.
Sufﬁciency. It sufﬁces to establish inequality shown above to be equiv-
alent to the f -factor condition.
Since Kn −S −T is connected, always
q(S, T ) ≤1. Since P f (vi) is even, the two sides of the inequality have
the same parity, by the Parity Lemma. It therefore sufﬁces to prove that
f (T ) ≤f (S) + (n −1 −s)k when S and T are disjoint. With s = |S| and
k = |T |, it sufﬁces to prove the inquality when T consists of the k vertices
of largest degree and S consists of the s vertices of smallest degree. It then
becomes the given inequality for d1, . . . , dn.
c) Nonnegative integers d1, . . . , dn with d1 ≥· · · ≥dn are the vertex
degrees of a simple graph if and only if P di is even and Pk
i=1 di ≤k(k −
1) + Pn
i=k+1 min{k, di} for 1 ≤k ≤n. Any realization can be viewed as an
f -factor of Kn, where f (vi) = di. Thus it sufﬁce to show that this condition
is equivalent to the condition in part (b).
For ﬁxed |S| , |T |, this inequality is always satisﬁed if and only if it is
satisﬁed when T = {xi, . . . , xk} and S = {xn+1−s, . . . , xn}, in which case it
becomes Pk
i=1 fi ≤Pn
i=n+1−s fi + (n −1 −s)k = (n −1)k + Pn
i=n+1−s( fi −k).
This is always satisﬁed if and only if it is satisﬁed when the right side
attains its minimum over 0 ≤s ≤n −k, which happens when n + 1 −s =
min{i: i > k and fi < k}. Since (n −1)k = k(k −1) + (n −k)k, the value is
then k(k −1) + Pn
i=k+1 min{k, fi}.

187
Chapter 4: Connectivity and Paths
Section 4.1: Cuts and Connectivity
188
4.CONNECTIVITY AND PATHS
4.1. CUTS AND CONNECTIVITY
4.1.1. Statements about connectedness.
a) Every graph with connectivity 4 is 2-connected—TRUE. If the min-
imum number of vertices whose deletion disconnects G is 4, then deletion
of fewer than two vertices leaves G connected. Also, K5 is 2-connected.
b) Every 3-connected graph has connectivity 3—FALSE. Every graph
with connectivity greater than 3, such as K4,4, is 3-connected.
c) Every k-connected graph is k-edge-connected—TRUE. Always κ ′(G) ≥
κ(G), which means that every disconnecting set of edges in a k-connected
graph has size at least k.
d) Every k-edge-connected graph is k-connected—FALSE. The graph
consisting of two k + 1-cliques sharing a single vertex (K1 ∨2Kk) is k-edge-
connected but not k-connected.
4.1.2. If e is a cut-edge of G, then e contains a cut-vertex of G unless e
is a component of G. If e is a component of G, then the vertices of e are
not cut-vertices; deleting a vertex of degree 1 cannot disconnect a graph.
Otherwise, e has an endpoint v with degree greater than one; we claim
v is a cut-vertex. Let u be the other endpoint of e, and let w be another
neighbor of v. Then G has a u, w-path through v, but every u, w path in G
uses e, so G has no u, w-path in G −v.
4.1.3. If a simple graph G is not a complete graph and is not k-connected,
then G has a separating set of size k −1.
Proof 1 (verifying deﬁnition). Since G′ arises by adding edges to G,
it is connected. If G′ has a cut-vertex v, then v is also a cut-vertex in G,
since G −v is a spanning subgraph of G′ −v. Since neighbors of v in G
are adjacent in G′, they cannot be in different components of G′ −v. Hence
G′ −v has only one component.
Proof 2 (weak duality).
Let x, y be vertices of G.
Since G is con-
nected, it has an x, y-path v0, . . . , vk.
In G′, both v0, v2, v4, . . . , vk and
v0, v1, v3, . . . , vk are x, y-paths, and they are internally disjoint. Thus at
least two vertices must be deleted to separate x and y.
4.1.4. A graph G is k-connected if and only if G ∨Kr is k + r-connected. To
separate G ∨Kr, one must delete all of the added vertices, since they are
adjacent to all vertices. Since deleting them leaves G, a set is a separating
set in G ∨Kr if and only if it contains the r vertices outside G and the
remainder is a separating set in G. Thus the minimum size of a separating
set in G ∨Kr is r more than the minimum size of a separating set in G.
4.1.5. If G′ is obtained from a connected graph G by adding edges joining
pairs of vertices whose distance in G is 2, then G′ is 2-connected.
Proof 1 (deﬁnition of 2-connected). Since G′ is obtained by adding
edges to G, G′ is also connected. If G′ has a cut-vertex v, then v is also a cut-
vertex in G, since G −v is a spanning subgraph of G′ −v. By construction,
neighbors of v in G are adjacent in G′, and hence they cannot be in different
components of G′ −v. Hence G′ −v has only one component.
Proof 2 (weak duality).
Let x, y be vertices of G.
Since G is con-
nected, it has an x, y-path v0, . . . , vk.
In G′, both v0, v2, v4, . . . , vk and
v0, v1, v3, . . . , vk are x, y-paths, and they are internally disjoint. Thus at
least two vertices must be deleted to separate x and y.
Proof 3 (induction on n(G)). When n(G) = 3, G′ = K3, which is 2-
connected. When n(G) > 3, let v be a leaf of a spanning tree in G. Since
G −v is connected and G′ −v = (G −v)′, the induction hypothesis implies
that G′ −v is 2-connected. Since v has at least two neighbors in G′, the
Expansion Lemma implies that G′ also is 2-connected.
4.1.6. A connected graph with blocks B1, . . . , Bk has
Pk
i=1 n(Bi)

−k + 1
vertices. We use induction on k. Basis step: k = 1. A graph that is a single
block B1 has n(B1) vertices.
Induction step: k > 1. When G is not 2-connected, there is a block
B that contains only one of the cut-vertices; let this vertex be v, and in-
dex the blocks so that Bk = B. Let G′ = G −(V (B) −{v}). The graph
G′ is connected and has blocks B1, . . . , Bk−1. By the induction hypothesis,
n(G′) =
Pk−1
i=1 n(Bi)

−(k −1)+1. Since we deleted n(Bk)−1 vertices from
G to obtain G′, the number of vertices in G is as desired.
4.1.7. The number of spanning trees of a connected graph is the product of
the numbers of spanning trees of each of its blocks. We use induction on k.
Basis step: k = 1. In a graph that is a single block, the spanning trees of
the graph are the spanning trees of the block.
Induction step: k > 1. Let v be a cut-vertex of G. The graph G is the
union of two graphs G1, G2 that share only v. A subgraph is a spanning tree
of G if and only if it is the union of a spanning tree in G1 and a spanning tree

189
Chapter 4: Connectivity and Paths
Section 4.1: Cuts and Connectivity
190
in G2. Since we can combine any spanning tree of G1 with any spanning
tree of G2 to make a spanning tree of G, the number of spanning trees of
G is the product of the number in G1 and the number in G2.
Also the blocks of G are the blocks of G1 together with the blocks of G2.
Applying the induction hypothesis, we take the product of the numbers of
spanning trees in the blocks of G1 and multiply it by the product of the
numbers of spanning trees in the blocks of G2 to obtain the number of
spanning trees of G.
4.1.8. For the graph G on the left below, κ(G) = 2, κ′(G) = 4, and δ(G) = 4.
For the graph H on the right, κ(H) = κ′(H) = δ(H) = 4. The vertices all
have degree 4, except that the vertices in the “center” of the drawing of G
have degree 7.
In G, these two vertices form a separating set, and the graph has no
cut-vertex, so κ(G) = 2. By Corollary 4.1.13, if there is an edge cut with
fewer than four edges, it must have at least ﬁve vertices on each side.
Proposition 4.1.12 states that
[S, S]
 = [P
v∈S d(v)] −2e(G[S]). Since one
of the sides has at least one of the vertices of degree 7, we may assume that
P
v∈S d(v) ≥23. To obtain
[S, S]
 ≤3, this requires 2e(G[S]) ≥20. Thus
the subgraph induced by S must be K5, but G does not contain K5.
In H, it sufﬁces to show that there is no separating set S of size 3,
since κ(H) ≤κ′(H) ≤δ(H) = 4. To show this, let x, y be two nonadjacent
vertices of H −S. By a small case analysis, one shows that in each direction
around the central portion of the graph, there are two x, y-paths sharing no
internal vertices. Thus four vertices must be deleted to break all x, y-paths.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
4.1.9. Given nonnegative integers with l ≤m ≤n, there is a simple graph
with κ = l, κ′ = m, and δ = n. Begin with two disjoint copies of Kn+1. This
yields δ = n, and we will add a few more edges. Pick l vertices from the
ﬁrst clique and m vertices from the second. Add m edges between them in
such a way that each of the special vertices belongs to at least one of the
new edges. The construction is illustrated below with m = 3 and l = 5.
Deleting the m special edges disconnects the graph, as does deleting
the l special vertices in the ﬁrst copy of Kn+1. Since we are using n + 1
vertices in each of the complete subgraphs, l ≤m ≤n guarantees that the
minimum degree remains n and that there really are two components re-
maining after the deletions. No smaller set disconnects the graph, because
the connectivity of the complete subgraphs is n.
Kn+1
•
•
•
Kn+1
•
•
•
•
•
4.1.10. The graph below is the smallest 3-regular simple graph with con-
nectivity 1. Since the graph below is 3-regular and has connectivity 1, it
sufﬁces to show that every 3-regular simple graph with connectivity 1 has
at least 10 vertices.
Proof 1 (case analysis). Let v be a cut-vertex of a 3-regular simple
graph G with connectivity 1. Each component H of G −v has one or two
neighbors of v. Since the neighbors of v have degree 3, H also has a vertex
u not adjacent to v. Since d(u) = 3, n(H) ≥4. Since G has at least two
such components plus v, we have n(G) ≥4 + 4 + 1 = 9. By the degree-sum
formula, no 3-regular graph has order 9, so n(G) ≥10.
Proof 2 (using edge-connectivity). Since κ = κ′ for 3-regular graphs,
we seek the smallest 3-regular connected graph G having a cut-edge e. The
graph G −e has two components, each having one vertex of degree 2 and
the rest of degree 3. Since it has a vertex of degree 3, such a component
has at least four vertices. Since it has an even number of vertices of degree
3, each component has at least ﬁve vertices.
•
•
•
•
•
•
•
•
•
•
4.1.11. κ′ = κ when 1(G) ≤3. Let S be a minimum vertex cut (|S| = κ(G)).
Since κ(G) ≤κ′(G) always, we need only provide an edge cut of size |S|. Let
H1 and H2 be two components of G −S. Since S is a minimum vertex cut,
each v ∈S has a neighbor in H1 and a neighbor in H2. Since 1(G) ≤3, v
cannot have two neighbors in H1 and two in H2. For each such v, delete the
edge to a member of {H1, H2} in which v has only one neighbor. These κ(G)
edges break all paths from H1 to H2 except in the case drawn below, where
a path can come into S via v1 and leave via v2. Here we simply choose the
edge to H1 for each vi.

191
Chapter 4: Connectivity and Paths
Section 4.1: Cuts and Connectivity
192
•
•
v1
v2
H1
H2
4.1.12. A k-regular k-connected graph when k is odd. For n > k = 2r +
1 and r ≥1, we show that the Harary graph Hk,n is k-connected.
The
graph consists of n vertices v0, . . . , vn−1 spaced equally around a circle, with
each vertex adjacent to the r nearest vertices in each direction, plus the
“special” edges vivi+⌊n/2⌋for 0 ≤i ≤⌊(n −1)/2⌋. When n is odd, v⌊n/2⌋has
two incident special edges.
To prove that κ(G) = k, consider a separating set S. Since G −S is
disconnected, there are nonadjacent vertices x and y such that every x, y-
path passes through S. Let C(u, v) denote the vertices encountered when
moving from u to v clockwise along the circle (omitting u and v). The cut
S must contain r consecutive vertices from each of C(x, y) and C(y, x) in
order to break every x, y-path (otherwise, one could start at x and always
take a step in the direction of y). Hence |S| ≥k unless S contains exactly r
consecutive vertices in each of C(x, y) and C(y, x).
In this case, we claim that there remains an x, y-path using a special
edge involving x or y. Let x′ and y′ be the neighbors of x and y along the
special edges, using v0 as the neighbor when one of these is v⌊n/2⌋. Label x
and y so that C(x, y) is smaller than C(y, x) (diametrically opposite vertices
require n even and are adjacent). Note that
C(x′, y′)
 ≥|C(x, y)| −1 (the
two sets have different sizes when n is odd if x = vi and y = vj with 0 ≤
j < ⌊n/2⌋≤i ≤n −1). Because |C(x, y)| ≥r, we have
C(x′, y′)
 ≥r −
1. Therefore, when we delete r consecutive vertices from C(y, x), all of
C(y, x′) ∪{x′} or {y′} ∪C(y′, x) remains. Therefore at least one of the two
x, y-paths with these sets as the internal vertices remains in G −S.
•
•
•
•
x
y′
x′
y
4.1.13. Numerical argument for edge-connectivity of Km,n.
a) Size of [S, S]. Let X and Y be the partite sets of Km,n, with |X| = m
and |Y| = n. Consider S ⊆V (Km,n) such that |S ∩X| = a and |S ∩Y| = b.
Now [S, S] consists of the edges from S ∩X to S ∩Y and from S ∩Y to S ∩X.
There are a(n −b) + b(m −a) such edges.
b) κ′(Km,n) = min{m, n}. If m + n = 1, then the answer is 0, by conven-
tion, as desired. Otherwise, we assume that m ≤n and consider an edge
cut [S, S]. In the notation of part (a), we have 0 ≤a ≤m and 0 ≤b ≤n and
0 < a+b < m+n. If 0 < a < m, then a(n−b)+b(m−a) ≥(n−b)+b = n ≥m.
If a = 0, then b > 0 and a(n −b) + b(m −a) = bm ≥m. If a = m, then b < n
and a(n −b) + b(m −a) = m(n −b) ≥m. Thus a(n −b) + b(m −a) ≥m in
all cases, with equality when a = 0 and b = 1.
c) K3,3 has no edge cut with seven edges. Since K3,3 has six vertices,
every connected spanning subgraph of K3,3 has at least ﬁve edges. Hence
deleting any ﬁve or more edges of K3,3 leaves a disconnected subgraph.
No set of seven edges is an edge cut, because 7 does not occur in the set
of values of a(3 −b) + b(3 −a). Writing this in the form 3(a + b) −2ab,
achieving 7 requires a + b ≥3. Also, a, b must also have different parity,
since 2ab even implies that a + b must be odd to obtain 7. The remaining
cases, (1, 2), (0, 3), (2, 3), do not yield 7.
4.1.14. If G is a connected graph and for every edge e there are cycles C1 and
C2 such that E(C1) ∩E(C2) = {e}, then G is 3-edge-connected. It sufﬁces to
show that no set of two edges disconnects G. Consider e, e′ ∈E(G). Since
G has two cycles through e′, G −e′ is connected. Since G has two cycles that
share only e, at least one of these cycles still exists in G −e′. Therefore, e
lies on a cycle in G −e′ and is not a cut-edge of G −e′. We have proved that
deleting both e′ and e leaves a connected subgraph. The argument holds
for each edge pair, so G is 3-edge-connected.
The Petersen graph satisﬁes this condition (hence is 3-edge-connected).
Proof 1 (symmetry and disjointness description). The underlying set
[5] is in the disjointness deﬁnition of the Petersen graph can be permuted to
turn each edge into any other. Hence it sufﬁces to prove that the condition
holds for one edge. In particular, the edge (12, 34) is the only common edge
in the two 5-cycles (12, 34, 51, 23, 45) and (12, 34, 52, 14, 35).
Proof 2 (properties of the graph). Alternatively, let x and y be the end-
points of an edge in the Petersen graph. Since the girth is 5, the neighbors
u, v of x and w, z of y form an independent set of size 4. Let a be the unique
common neighbor of u and w, and let b be the common neighbor of v and
y; these are distinct since the girth is 5. Since a, b, x, y, u, v, w, z are eight
distinct vertices, we have constructed cycles with vertices (u, x, y, w, a) and
(v, x, y, z, b) that share only xy.
4.1.15. The Petersen graph is 3-connected. Since the Petersen graph G
is 3-regular, it sufﬁces by Theorem 4.1.11 to prove that G is 3-edge-
connected.
Let [S, S] be a minimum edge cut.
If
[S, S]
 < 3, then

193
Chapter 4: Connectivity and Paths
Section 4.1: Cuts and Connectivity
194
[P
v∈S d(v)] −2e(G[S]) ≤2, by Proposition 4.1.12. We may compute this
from either side of the cut, so we may assume that |S| ≤
S
.
Since G has no cycle of length less than 5, when |S| < 5 we have
e(G[S]) ≤|S| −1. This yields 3 |S| −2(|S| −1) ≤2, which simpliﬁes to |S| ≤
0. This is impossible for nonempty S. For |S| = 5, we obtain 3 |S|−2 |S| ≤2,
which again is false. Hence no edge cut has size less than 3.
4.1.16. The Petersen graph has an edge cut of size m if and only if 3 ≤m ≤
12. Since the graph has 10 vertices, we consider edge cuts of the form [S, S]
for 1 ≤|S| ≤5. Since
[S, S]
 = P
v∈S d(v) −2e(G[S]) = 3 |S| −2e(G[S]),
we consider the number of edges in G[S]. Since the girth is 5, all induced
subgraphs with at most four vertices are forests.
The independent sets with up to four vertices yield cuts of sizes
3, 6, 9, 12. Deleting two adjacent vertices and their neighbors leaves 2K2,
so there induced subgraphs with two to four vertices that have one edge,
yielding cuts of sizes 4, 7, 10. Deleting the vertices of a P3 and their neigh-
bors leaves 2K1, so there are induced subgraphs with three to ﬁve vertices
that have two edges, yielding cuts of sizes 5, 8, 11.
Let e(S) denote e(G[S]). An edge cut of size less than 3 requires 3 |S| −
2e(S) ≤2, or e(S) ≥(3/2) |S| −1. Since e(S) ≤|S| −1 when |S| ≤4, we
combine the two inequalities to obtain |S| ≤0, which is impossible. (For
|S| = 5, e(S) ≤|S| yields |S| ≤2, again a contradiction.)
Similarly, an edge cut of size more than 12 requires 2e(S) ≤3 |S| −
13. With |S| ≤5, this yields 2e(S) ≤2, but there is no 5-vertex induced
subgraph with only one edge.
4.1.17. Deleting an edge cut of size 3 in the Petersen graph isolates a vertex.
Proposition 4.1.12 yields
[S, S]
 = 3 |S| −2e(G[S]). Thus
[S, S]
 = 3 re-
quires S and S to have odd size. Let S be the smaller side of the cut. When
|S| = 5, the induced subgraph has at most 5 edges, and the cut has size at
least 3 · 5 −2 · 5 = 5. When |S| = 3, the induced subgraph has at most 2
edges, and the cut has size at least 3 · 3 −2 · 2 = 5. Hence |S| = 1 for a cut
of size 3.
4.1.18. Every triangle-free simple graph with minimum degree at least 3
and order at most 11 is 3-edge-connected. Let [S, S] be an edge cut of size
less than 3, with |S| ≤
S
. Let k = |S|. Since δ(G) ≥3 and [S, S] ≤2, the
Degree-Sum Formula yields e(G[S]) ≥(3k −2)/2. Since G[S] is triangle-
free, Mantel’s Theorem (Section 1.3) yields e(G[S]) ≤

k2/4

. Hence k2/4 ≥
(3k −2)/2. For positive integer k, this inequality is valid only when k ≥6.
Since the smaller side of the cut has at most ﬁve vertices, we obtain a
contradiction, and there is no edge cut of size at most 2.
The bound of 11 is sharp. The 12-vertex 3-regular triangle-free graph
below is not 3-edge-connected.
•
•
•
•
•
•
•
•
•
•
•
•
4.1.19. a) If δ(G) ≥n −2 for a simple n-vertex graph G, then κ(G) = δ(G).
If δ = n −1, then G = Kn, which has connectivity n −1. If δ = n −2,
then when u and v are nonadjacent the other n −2 vertices are all common
neighbors of u and v. It is necessary to delete all common neighbors of
some pair of vertices to separate the graph, so κ ≥n −2 = δ.
b) Construction of graphs with δ = n −3 and κ < δ. For any n ≥4, let
G = Kn −E(C4); i.e., G is formed by deleting the edges of a 4-cycle from a
clique. The subgraph induced by these four vertices is 2K2, so deleting the
other n −4 vertices of G disconnects the graph. However, G has 4 vertices
of degree n −3 and n −4 of degree n −1, so κ(G) < δ(G).
4.1.20. Every simple n-vertex graph G with δ(G) ≥(n + k −2)/2 is k-
connected, and this is best possible. We do not consider k = n, because we
have adopted the convention that no n-vertex graph is n-connected. To see
that the result is best possible, consider Kk−1 ∨(K⌊(n−k+1)/2⌋+ K⌈(n−k+1)/2⌉).
This graph has a separating set of size k −1, and its minimum degree is
k −1 + ⌊(n −k + 1)/2⌋−1 = ⌊(n + k −3)/2⌋. There are several ways to
prove that δ ≥(n + k −2)/2 ensures k-connectedness.
Proof 1 (stronger statement, common neighbors). If x ↮y, then x, y
have a total of at least n+k−2 edges to the n−2 other vertices, which means
they have at least k common neighbors (using |A ∩B| = |A| + |B| −|A ∪B|
for A = N(x) and B = N(y)). Thus at least k vertices must be deleted to
make some vertex unreachable from another.
Proof 2 (contradiction). If G is not k-connected, then the deletion of
some k −1 vertices S leaves a disconnected subgraph H. Consider v ∈
V (H); since v has at most k −1 neighbors in S, we have dH(v) ≥δ(G) −k +
1 ≥(n −k)/2. Therefore, each component of H has at least 1 + (n −k)/2
vertices. Since H has at least two components, H has at least n −k + 2
vertices. However, n = n(G) = n(H) + |S| ≥(n −k + 2) + (k −1) > n. The
contradiction implies that G is k-connected.
Proof 3 (induction on k). For k = 1, δ(G) ≥(n −1)/2 forces every
pair of nonadjacent vertices to have degree-sum at least n −1; hence they
have a common neighbor among the remaining n −2 vertices, and G is
connected. For k > 1, let v be a vertex of a minimum separating set S.

195
Chapter 4: Connectivity and Paths
Section 4.1: Cuts and Connectivity
196
Deleting v removes at most one edge to each other vertex, so δ(G −v) ≥
[(n −1) + (k −1) −2]/2. Using the induction hypothesis, we conclude that
G−v is (k−1)-connected. Since S−v separates G−v, we have |S−v| ≥k−1
and hence |S| ≥k, and G is k-connected.
4.1.21. If G is a simple n-vertex graph with n ≥k + l and δ(G) ≥n+l(k−2)
l+1
,
and G −S has more than l components, then |S| ≥k. Proof by contradiction.
Suppose G −S has more than l components and |S| = k −1 (if there is a
smaller cut, we can add to it from components of the remainder that have
at least 2 vertices until the cut reaches size k −1). Let H be a smallest
component of G −S; we have n(H) ≤n −k +1)/(l +1). A vertex of H has at
most (n −k + 1)/(l + 1) −1 neighbors in H and k −1 neighbors in S, which
yields δ(G) ≤n−(k−2)−1
l+1
+ (k −2) = n−l(k−2)−1
l+1
.
To prove that the result is best possible, partition n −k + 1 vertices
into l + 1 sets of sizes
 n−k+1
l+1

and
 n−k+1
l+1

. Place cliques on these sets, and
form the join of this graph with Kk−1. The minimum degree is n−l(k−2)−1
l+1
.
4.1.22. a) If the vertex degrees d1 ≤· · · ≤dn of a simple graph G satisfy
dj ≥j + k whenever j ≤n −1 −dn−k, then G is (k + 1)-connected. Let S be
a vertex cut; we will prove that |S| ≥k + 1. Let U be the set of vertices in
the smallest component of G −S, and let j = |U|. Only vertices of S can
have degree exceeding n −1 −j. Since there are at most |S| such vertices,
dn−|S| ≤n −1 −j. If |S| ≤k, then j ≤n −1 −dn−|S| ≤n −1 −dn−k, and the
hypothesis applies. If v ∈U, then dG(v) ≤j −1 + |S|. Since this yields j
vertices with degree at most j −1 + |S|, we have dj ≤j −1 + |S|. Since the
hypothesis applies, dj ≥j + k, and we conclude that |S| ≥k + 1.
U
S
V −S −U
b) The result is sharp. Let G = Kk ∨(Kj + Ki), where i + j + k = n;
we may assum that j ≤i.
There are j vertices of degree j + k −1, i
vertices of degree i + k −1, and k vertices of degree n −1. When i and j
are positive, κ(G) = k. Since j ≤i and G has k vertices of degree n −1, we
have dj = j + k −1 and dn−k = n −j −1. Thus the condition in part (a)
does not hold. However, it just barely fails, since dj′ = j + k −1 ≥j′ + k for
j′ < j. Thus the result is sharp in the sense that it cannot be weakened by
applying the requirement only when j ≤n −2 −dn−k.
4.1.23. If n(G) is even, κ(G) ≥r, and G is K1,r+1-free, then G has a 1-factor.
We verify Tutte’s 1-factor condition. When |S| = ∅, the only component of
G −S has even order. When 1 ≤|S| ≤r −1, there is only one component
of G −S. For |S| ≥r, we prove that G −S has at most |S| components.
Each component H of G −S sends edges to at least r distinct vertices
in S, since κ(G) = r. For each such H, choose edges to r distinct vertices in
S. Given v ∈S, we have chosen at most one edge from v to each component
of G −S. If G −S has more than |S| components, then we have chosen
more than r |S| edges to S. By the pigeonhole principle, some x ∈S appears
in more than r of these edges. Since we chose at most one edge from x to
each component of G −S, the chosen edges containing x have endpoints in
distinct components of G −S, which creates the forbidden induced K1,r+1.
This result is best possible: it is not enough to assume that G is r-
edge-connected or that G is r −1-connected. Both graphs below have even
order, no induced K1,4, and no 1-factor (deleting a set of size 4 leaves 6 odd
components). The graph on the left is 3-edge-connected, and the graph on
the right is 2-connected.
•
•
•
• •
•
•
•
•
• •
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
1
2
3
4
12
13
23
14
24
34
4.1.24. Degree conditions for κ′ = δ in a simple n-vertex graph G.
a) δ(G) ≥⌊n/2⌋implies κ′(G) = δ(G), and this is best possible.
If
κ′(G) < δ(G) and F is a minimum edge cut, then the components of G −F
have more than δ(G) vertices (Proposition 4.1.10). Since δ(G) ≥⌊n/2⌋, this
yields n(G) ≥2(⌊n/2⌋+1) ≥n+1, which is impossible. Hence κ′(G) = δ(G).
To show that the inequality δ ≥⌊n/2⌋cannot be weakened when n ≥3,
consider G = K⌊n/2⌋+ K⌈n/2⌉(the disjoint union of two cliques). This G is
disconnected, so κ′(G) = 0, and δ(G) = ⌊n/2⌋−1. The smallest case where
this yields κ′(G) < δ(G) is n = 4, δ = 1, G = 2K2.
b) κ′(G) = δ(G) if each nonadjacent pair of vertices has degree sum at
least n−1, and this is best possible. The example G = Km+1 + Kn−m−1 shows
that n −1 cannot be replaced by n −2 in the hypothesis; the conclusion fails
spectacularly with κ′(G) = 0 even though d(x)+d(y) = m −1+n −m −1 =
n −2 when x ↮y. To prove the claim, suppose [S, S] is a minimum edge
cut, with size k = κ′(G) < δ(G). This forces |S| , |S| > δ(G) (Proposition
4.1.10). With degree-sum at least n(G) −1, any two nonadjacent vertices
have a common neighbor. Hence if S has a vertex x with no neighbor in
S, then every vertex in S must have a neighbor in S.
Now |S| > δ(G)
imples k > δ(G). Otherwise, every vertex of S has a neighbor in S, and now
|S| > δ(G) implies k > δ(G). We conclude that k = δ(G).

197
Chapter 4: Connectivity and Paths
Section 4.1: Cuts and Connectivity
198
4.1.25. κ′(G) = δ(G) for diameter 2. Suppose that G is a simple graph with
diameter 2. Let [S, S] be a minimum edge cut with s = |S| ≤
S
, and let
k = |[S, S]| = κ′(G).
a) Every vertex of S has a neighbor in S. If S has a vertex x with no
neighbor in S, then d(x) ≤s −1 < n/2, and diam G = 2 implies that every
vertex of S has a neighbor in S. In this case δ(G) < n/2 ≤k. Hence every
vertex of S has a neighbor in S.
b) κ′(G) = δ(G). Since κ′(G) ≤δ(G) always, part (a) yields s ≤δ(G).
Each vertex of S has at least δ(G) −s + 1 neighbors in S, so k ≥s(δ(G) −
s + 1). Since κ′(G) ≤δ(G), we have 0 ≥(s −1)(δ(G) −s), which requires
s = 1 or s ≥δ(G). We conclude that s = 1 or s = δ(G).
Consider the case s = δ(G). Since we have proved that each vertex of
S has a neighbor in S, from k ≤δ(G) we conclude that each vertex of S has
exactly one neighbor in S. Hence each vertex of S has δ(G) −1 neighbors
in S. We conclude that S induces a clique and that κ′(G) = δ(G).
4.1.26. A set F of edges in G is an edge cut if and only if F contains an even
number of edges from every cycle in G. Necessity. A cycle must wind up on
the same side of an edge cut that it starts on, and thus it must cross the
cut an even number of times.
Sufﬁciency. Given a set F that satisﬁes the intersection condition with
every cycle, we construct a set S ⊆V (G) such that F = [S, S]. Each com-
ponent of G −F must be all in G[S] or all in G[S], but we must group them
appropriately. Deﬁne a graph H whose vertices correspond to the compo-
nents of G −F; for each e ∈F, we put an edge in H whose endpoints are
the components of G −F containing the endpoints of e.
We claim that H is bipartite. From a cycle C in H, we can obtain a
cycle C′ in G as follows. For v ∈V (C) let e, f be the edges of C incident
to v (not necessarily distinct), and let x, y be the endpoints of e, f in the
component of G −F corresponding to v. We expand v into an x, y-path in
that component. Since C visits each vertex at most once, the resulting C ′
is a cycle in G. The number of edges of F in C ′ is the length of C. Hence
the length of C is even.
We conclude that H is bipartite. Let S be the set of vertices in the
components of G −F corresponding to one partite set in a bipartition of H.
Now F is the edge cut [S, S].
4.1.27. Every edge cut is a disjoint union of bonds. Using induction on the
size of the cut, it sufﬁces to prove that if [S, S] is not a bond, then [S, S]
is a disjoint union of smaller edge cuts. First suppose G is disconnected,
with components G1, . . . , Gk. If [S, S] cuts more than one component, we
express [S, S] as a union of edge cuts that cut only one component: let the
ith cut be [S ∩V (Gi), S ∩V (Gi)]. This cut consists of the edges of [S, S]
in Gi, because the vertices of the other components are all on one side of
the cut. Hence we may assume that [S, S] cuts only one component of G or
(equivalently) that G is connected.
An edge cut of a connected graph is a bond if and only if the subgraphs
induced by the sets of the vertex partition are connected. Hence if [S, S]
is not a bond, we may assume that G[S] is not connected. Let {Gi} be the
components of the induced subgraph G[S], and let Si = V (Gi). Since there
are no edges between components of G[S], [S, S] is the disjoint union of the
edge cuts [Si, Si]. Since G is connected, each of these is non-empty, so we
have expressed [S, S] as a disjoint union of smaller edge cuts.
4.1.28. The symmetric difference of two edge cuts is an edge cut. The sym-
metric difference of [S, S] and [T, T ] is [U,U], where U = (S ∩T ) ∪(S ∩T )
and U = (S ∩T ) ∪(S ∩T ), as sketched below. The other edges of the union
are those within U or within U and appear in both of the original edge cuts.
S ∩T
S ∩T
S ∩T
S ∩T
4.1.29. A spanning subgraph H of G is a spanning tree of G if and only
if G −E(H) contains no bond of G and adding any edge of H creates a
subgraph containing exactly one bond of G.
Necessity: If H is a spanning tree, then H is connected, so G −E(H)
contains no edge cut. Also, H −e is disconnected, with exactly two com-
ponents having vertex sets S and S. Let G′ be the subgraph obtained by
adding e to G −E(H). Note that G′ contains all of [S, S] (and perhaps addi-
tional edges). Since S, S induce connected subgraphs of G, [S, S] is a bond
of G (Proposition 4.1.15). Since adding any edge of [S, S] to H −e creates
a spanning tree of G, an edge cut contained in G′ must include all of [S, S],
and hence [S, S] is the only bond in G′.
Sufﬁciency: Suppose that G −E(H) contains no bond of G and each
subgraph obtained by adding one edge of H contains exactly one bond. Now
H is obtained by deleting a set of edges from G that does not disconnect G,
and H is connected. Similarly, deleting any additional edge from G does
contain a bond, so each H −e is disconnected. Hence H is a tree.

199
Chapter 4: Connectivity and Paths
Section 4.1: Cuts and Connectivity
200
4.1.30. The graph with vertex set {1, . . . , 11} in which i ↔j if and only if i
and j have a common factor bigger than 1 has six blocks. Vertices 1, 7, 11
are isolated and hence are blocks by themselves. The remaining vertices
form a single component with blocks that are complete subgraphs. The
vertex sets of these are {3, 6, 9}, {2, 4, 6, 8, 10}, and {5, 10}. Vertices 6 and
10 are cut-vertices.
4.1.31. The maximum number of edges in a simple n-vertex cactus G is
⌊3(n −1)/2⌋. A cactus is a connected graph in which every block is an edge
or a cycle. The bound is achieved by a set of ⌊(n −1)/2⌋triangles sharing
a single vertex, plus one extra edge to a leaf if n is even.
Proof 1 (induction on the number of blocks). Let k be the number of
blocks. If k = 1, then e(G) = n(G) −1 if n(G) ≤2, and e(G) = n(G) if
n(G) > 2. In either case, e(G) ≤⌊3(n(G) −1)/2⌋.
A graph that has more than one block is not a single block, so it has
a cut-vertex v. Let S be the vertex set of one component of G −v. Let
G1 = G[S ∪{v}], and let G2 = G −S.
Both G1 and G2 are cacti, and
every block of G is a block in exactly one of {G1, G2}. Thus each has fewer
blocks than G, and we can apply the induction hypothesis to obtain e(Gi) ≤
⌊3(n(Gi) −1)/2⌋.
If |S| = m, then n(G1) = m + 1 and n(G2) = n(G) −m, since v belongs
to both graphs. We thus have
e(G) = e(G1) + e(G2) ≤
j
3(m+1−1)
2
k
+
j
3(n(G)−m−1)
2
k
≤
j
3(n(G)−1)
2
k
.
Proof 2 (summing over blocks). Let G be a simple n-vertex cactus
with k blocks that are cycles and l blocks that are single edges. When we
describe G by starting with one block and iteratively adding neighboring
blocks, each time we add a block the number of vertices increases by one
less than the number of vertices in the block, since one of those vertices (the
shared cut-vertex) was already in the graph. If the blocks are B1, . . . , Bk+l,
then n(G) = (P n(Bi)) −(k + l −1).
On the other hand, e(G) = P e(Bi). We have e(Bi) = n(Bi) if Bi is a
cycle, and e(Bi) = n(Bi) −1 if Bi is an edge. Therefore,
e(G) = P e(Bi) = (P n(Bi)) −l = n(G) + k −1.
This implies that we maximize the number of edges by maximizing k, the
number of blocks that are cycles. Viewing the cactus again as grown by
adding blocks, observe that we add at least two vertices every time we add
a block that is a cycle, since cycles have at least three vertices. Starting
from a single vertex, the maximum number of cycles we can form is thus
⌊(n −1)/2⌋. This bound on k yields e(G) ≤⌊3(n −1)/2⌋.
Proof 3 (local change). If the blocks are all triangles, except for at most
one that is K2 or one that is a 4-cycle, then the number of edges equals the
given formula.
Hence it sufﬁces to show that a cactus not having this
description cannot have the maximum number of edges.
If a block is a cycle of length more than 4, then deleting one edge e and
replacing it with two edges joining the endpoints of e to another vertex on
the cycle creates a new cactus on the same vertices having one more edge.
If each of two blocks is a single edge or a 4-cycle, then the blocks can be
rearranged by “cutting and pasting” so that the sizes of the blocks are the
same as before, but these two special blocks share a vertex. Now a change
can be made to increase the number of edges as shown below.
•
•
•
•
•
•
↓
•
•
•
•
•
↓
•
•
•
•
•
•
•
•
•
•
•
•
↓
•
•
•
•
•
•
•
Proof 4 (spanning trees). An n-vertex cactus is a connected graph, so
it has a spanning tree with n −1 edges. Each additional edge completes a
cycle using at least two edges in the tree. Each edge of the tree is used in
at most one such cycle. Hence there are at most (n −1)/2 additional edges,
and the total number of edges is at most n + ⌊(n −1)/2⌋.
4.1.32. Every vertex of G has even degree if and only if every block of G is
Eulerian. Sufﬁciency. If every block is Eulerian, then each vertex receives
even degree from each block containing it. The blocks partition the edges,
so the total degree at each vertex is even.
Necessity. Since every block is connected, it sufﬁces to show that each
vertex has even degree in each block. Certainly this holds for a vertex
appearing in only one block. For a cut-vertex v, let G′ be the subgraph
consisting of one component of G −v together with its edges to v. Each
block containing v appears in one such subgraph. Every vertex of G′ other
than v has even degree in G′, since it retains all of its incident edges from
G. By the Degree-Sum Formula, also v has even degree in G′. Hence v has
even degree in the block of G containing v that is contained in G′.
4.1.33. A connected graph is k-edge-connected if and only if each of its
blocks is k-edge-connected. We show that a set F of edges is a disconnect-
ing set in a graph G if and only if it disconnects some block. If deleting F
leaves each block of G connected, then the full graph remains connected. If

201
Chapter 4: Connectivity and Paths
Section 4.1: Cuts and Connectivity
202
deleting F disconnects some block B, then the remainder of G cannot con-
tain a path between distinct components of B −F, because then B would
not be a maximal subgraph having no cutvertex.
With this claim, the edge-connectivity of G is the minimum of the edge-
connectivities of its blocks, which yields the desired statement.
4.1.34. The block-cutpoint tree. Given a graph G with connectivity 1, let
B(G) be the bipartite graph whose partite sets correspond to the blocks and
the cut-vertices of G, with x ↔B if B is a block of G containing x.
a) B(G) is a tree. If G = K2, then B(G) = K1. Otherwise G has at
least two blocks, and every cut-vertex belongs to a block. Hence to show
B(G) is connected it sufﬁces to establish a B, B′-path in B(G), where B, B′
are blocks of G. Since G is connected, G has a u, v-path, for any choice of
vertices u ∈B, v ∈B′. This path visits some sequence of blocks from B to
B′, moving from one to the next via a cut-vertex of G belonging to both of
them. This describes a B, B′-path in B(G).
We prove by contradiction that B(G) also has no cycles and hence is a
tree. Suppose x is a cut-vertex of G on a cycle C in B(G). Let B, B′ be the
neighbors of x on C. The B, B′ path C −x provides a route from B −x to
B′ −x without using x. This is impossible, since when B, B′ are two blocks
of G containing cut-vertex x, every path between B −x and B′ −x in G
must pass through x.
b) If G is not a block, then at least two blocks of G each contain exactly
one cut-vertex of G. Each cut-vertex of G belongs to at least two blocks of
G. Hence the leaves of B(G) all arise from blocks of G, not cut-vertices of
G. If G is not a block, then B(G) has at least two leaves, and the leaves of
B(G) are the desired blocks in G.
c) G has exactly k + P
v∈V (G)(b(v) −1) blocks, where k is the number of
components of G and b(v) is the number of blocks containing v.
Proof 1 (explicit count). Since we can count the blocks separately in
each component, it sufﬁces to show that a connected graph has 1+P(b(v)−
1) blocks. Select a block in a connected graph G and view it as a root; this
corresponds to the 1 in the formula. Each vertex v in this block leads us
to b(v) −1 new blocks. For each new block, each vertex v other than the
one that leads us there leads us to b(v) −1 new blocks. This process stops
when we have counted b(v) −1 for each vertex of G.
This tree-like exploration gives the desired count of blocks as long as
two facts hold: 1) no two blocks intersect in more than one vertex, and
2) no block can be reached in more than one way from the root. These
guarantee that we don’t count blocks more than once. If either happens,
we get a cycle of blocks, B1, . . . , Bn, B1, with n ≥2, so that successive blocks
share a vertex. Then there is no vertex whose deletion will disconnect the
subgraph that is the union of these blocks, which is impossible since blocks
are maximal subgraphs with no cut-vertex.
Proof 2 (induction on the number of blocks). We need only prove the
formula for connected graphs, since both the number of blocks and the
value of the formula are sums over the components of G. If G is a block,
then every vertex of G appears in one block, and the formula holds.
If G has a cutvertex, then by part (a) this component has a block B
containing only one cutvertex, u. Delete all vertices of B −u to obtain a
graph G′. The blocks of G′ are the blocks of G other than u, u appears in
one less block than before, and all other terms of the formula are the same
except that for G′ we have left out the value 0 for the other vertices of B.
The induction hypothesis now yields
#blocks(G) = #blocks(G′) + 1 = [1 +
X
v∈V (G′)
(bG′(v) −1)] + 1
= 1 +
X
v∈V (G′)
(b(v) −1).
d) Every graph has fewer cut-vertices than blocks. In the formula of
part (c), there is a positive contribution for each cut-vertex. Thus the num-
ber of blocks is bigger than the number of cut-vertices, each yielding a term
that contributes at least one to the sum.
4.1.35. If H and H ′ are distinct maximal k-connected subgraphs of G, then
H and H ′ have at most k −1 vertices in common. Proof by contradiction;
suppose H and H ′ share at least k vertices. Consider F = H ∪H ′, and let
S be an arbitrary subset of V (F) with fewer than k vertices. It sufﬁces to
show that F −S is connected, because then H ∪H ′ is k-connected, contra-
dicting the hypothesis that H and H ′ are maximal k-connected subgraphs.
Since |S| < k and H, H ′ are k-connected, H −S and H ′ −S are connected.
If H, H ′ share at least k vertices, then some common vertex x remains, and
every vertex that remains has a path to x in H −S or H ′ −S.
4.1.36. Algorithm 4.1.23 correctly computes blocks of graphs. We use in-
duction on n(G). For K2, the algorithm correctly identiﬁes the single block
(K1 is a special case). For larger graphs, it sufﬁces to show that the ﬁrst set
identiﬁed as a block is indeed a block B sharing one vertex w with the rest
of the graph, since when w ̸= x the remaining blocks are the blocks of the
graph obtained by deleting B −w from G, and the sets identiﬁed as blocks
in running the algorithm on G(B −w) are the sets identiﬁed as blocks in
the remainder of running the algorithm on G.
When the vertex designated as ACTIVE is changed from v to its par-
ent, w, we check whether any vertex in the subtree T ′ rooted at v has a
neighbor above w. This is easy to do, given that in step 1B when we mark

203
Chapter 4: Connectivity and Paths
Section 4.2: k­connected Graphs
204
an edge to an ancestor explored, we record for the vertices on the path in
T between them that there is an edge from a descendant to an ancestor.
When w becomes active again, we check whether it was ever so marked.
With v and w as above, in any rooted subtree of T ′ there is an edge from
a descendant of the root to an ancestor of the root. Hence no proper subset
of T ′(v) induces a block, because an additional vertex can be added via a
path to an ancestor and then down through T , without introducing a cut-
vertex. On the other hand, since there is no edge joining T ′ to an ancestor of
w, then w is a cut-vertex, and hence G[V (T ′) ∪{w}] is a maximal subgraph
having no cut-vertex.
4.1.37. An algorithm to compute the strong components of a digraph. The
algorithm is the same as Algorithm 4.1.23, except that all edges mentioned
there are treated as directed edges, from tail to head in the order named
there, and “block” changes to “strong component”.
The proof that the algorithm works is essentially the same as Exer-
cise 4.1.36. If there is a path from S to S that visits a vertex outside S,
then S cannot be the vertex set of a strong component. When w becomes
active from below with no edge from a descendant to an ancestor, all edges
involving V (T ′) ∪{w} and the remaining vertices are directed in toward
V (T ′) ∪{w}. Thus a strong component is discovered.
4.2. k­CONNECTED GRAPHS
4.2.1. In the graph below, κ(u, v) = 3 and κ′(u, v) = 5. Deleting the vertices
marked 1, 2, 3 or the edges marked a, b, c, d, e makes v unreachable from u.
These prove the upper bounds. Exhibiting a set of three pairwise internally
disjoint u, v-paths proves κ(u, v) ≥3, since distinct vertices must be deleted
to cut the paths. Exhibiting a set of ﬁve pairwise edge-disjoint u, v-paths
proves κ′(u, v) ≥5, since distinct edges must be deleted to cut the paths.
Lacking colors, we have not drawn these paths.
•
•
•
•
•
•
•
•
•
2
1
3
a
b
•
•
•
•
•
c
d
e
u
v
4.2.2. If G is 2-edge-connected and G′ is obtained from G by subdividing an
edge of G, then G′ is 2-edge-connected. Let G′ be obtained by subdividing
an edge e, introducing a new vertex w. A graph is 2-edge-connected if and
only if every edge lies on a cycle. This holds for G. If also holds for G′,
since every cycle in G containing e can be replaced with a cycle using the
two edges incident to w instead of e.
Every graph having a closed-ear decomposition is 2-edge-connected. A
cycle is 2-edge-connected; we show that adding ears and closed ears pre-
serves 2-edge-connectedness. An ear or closed ear can be added by adding
an edge joining existing endpoints or a double edge joining an old vertex to
a new vertex, following by subdividing to lengthen the ear.
We have shown that subdivision preserves 2-edge-connectedness. The
other operations preserve old cycles. When we add an edge, the new edge
form a cycle with a path joining its endpoints. When we add two edges
with the same endpoints, together they form a cycle. Hence the additions
also preserve 2-edge-connectedness.
4.2.3. An example of digraph connectivity. In the digraph G with vertex
set [12] deﬁned by i →j if and only if i divides j, κ(1, 12) is undeﬁned and
κ′(1, 12) = 5. Because 1 →12, there is no way to make 12 unreachable
from 1 by deleting other vertices. Because there are pairwise edge-disjoint
paths from 1 to 12 through 2,3,4,6 and directly, it is necessary to delete at
least ﬁve edges to make 12 unreachable from 1. Deleting the ﬁve edges
entering 12 accomplishes this.
•
•
•
•
•
•
•
•
•
•
•
•
1
2
3
4
5
6
7
8
9
10
11
12
4.2.4. If P is a u, v-path in a 2-connected graph G, then there need not
be a u, v-path internally disjoint from P. The graph G = K4 −uv with
V (G) = {u, v, x, y} is 2-connected (connected and no cut-vertex), but it has
no u, v-path internally disjoint from the u, v-path P that visits vertices
u, x, y, v in order.
4.2.5. If G be a simple graph, and H is the graph with vertex set V (G) such
that uv ∈E(H) if and only if u, v appear on a common cycle in G, then H is

205
Chapter 4: Connectivity and Paths
Section 4.2: k­connected Graphs
206
a complete graph if and only if G is 2-connected. A graph G is 2-connected
if and only if for all u, v ∈V (G), there is a cycle containing u and v.
4.2.6. A simple graph G is 2-connected if and only if G can be obtained from
C3 by a sequence of edge additions and edge subdivisions. We have shown
that edge addition and edge subdivision preserve 2-connectedness, so the
condition is sufﬁcient. For necessity, observe that every 2-connected graph
has an ear decomposition. The initial cycle arises from C3 by edge subdivi-
sions, and then each ear addition consists of an edge addition followed by
edge subdivisions.
4.2.7. If xy is an edge in a digraph G, then κ(G −xy) ≥κ(G) −1. Since
every separating set of G is a separating set of G −xy, we have κ(G −xy) ≤
κ(G). Equality holds unless G −xy has a separating set S that is smaller
than κ(G) and hence is not a separating set of G. Since G −S is strongly
connected, G −xy −S has two induced subdigraphs G[X] and G[Y] such
that X ∪Y = V (G) and xy is the only edge from X to Y.
If |X| ≥2, then S∪{x} is a separating set of G, and κ(G) ≤κ(G−xy)+1.
If |Y| ≥2, then again the inequality holds. In the remaining case, |S| =
n(G) −2. Since we have assumed that |S| < κ(G), |S| = n(G) −2 implies
that κ(G) ≥n(G) −1, which holds only when each ordered pair of distinct
vertices is the head/tail for some edge.
Thus κ(G −xy) = n(G) −2 =
κ(G) −1, as desired.
4.2.8. A graph is 2-connected if and only if for every ordered triple (x, y, z)
of vertices, there is an x, z-path through y. If G is 2-connected, then for any
y ∈V (G) and set U = {x, z}, there is a y,U-fan. The two paths of such a fan
together form an x, z-path through y. Conversely, if the condition holds,
then clearly G is connected. Furthermore, G has no cut-vertex, because for
any vertex x and any pair y, z, the condition as stated implies that G −x
has an y, z-path.
4.2.9. A graph G with at least 4 vertices is 2-connected if and only if for
every pair of disjoint sets of vertices X, Y ⊂V (G) with |X| , |Y| ≥2, there
exist two completely disjoint paths P1, P2 in G such that each path has an
endpoint in X and an endpoint in Y and no internal point in X or Y.
Sufﬁciency: If we apply the condition with X, Y being the endpoints of
an arbitrary pair of edges, we ﬁnd that every pair of edges lies on a cycle, so
G is 2-connected. Alternatively, if G were disconnected or had a cut-vertex
v, then we could select X and Y from separate components (of G −v), but
then every path between X and Y passes through v.
Necessity: Form a graph G′ be add an edge within X, if none exists, and
within Y, if none exists. Since we only add edges, G′ is still 2-connected.
Hence there is a cycle containing an arbitrary pair of edges in G′; in par-
ticular, containing an edge within X and one within Y. For each portion
of this cycle between the two edges, take the path between the last time it
uses a vertex of X and the ﬁrst time it uses a vertex of Y. This yields the
desired completely disjoint paths in G.
4.2.10. (•) A greedy ear decomposition of a 2-connected graph is an ear de-
composition that begins with a longest cycle and iteratively adds a longest
ear from the remaining graph. Use a greedy ear decomposition to prove
that every 2-connected claw-free graph G has ⌊n(G)/3⌋pairwise-disjoint
copies of P3. (Kaneko–Kelmans–Nishimura [2000])
Comment. The proof takes many steps and several pages. It is too
difﬁcult for inclusion in this text, and the exercise will be deleted in the
next edition.
4.2.11. For a connected graph G with at least three vertices, the following
are equivalent.
A) G is 2-edge-connected.
B) Every edge of G appears in a cycle.
C) G has a closed trail containing any speciﬁed pair of edges.
D) G has a closed trail containing any speciﬁed pair of vertices.
A⇔B. A connected graph is 2-edge-connected if and only if it has no
cut-edges. Cut-edges are precisely the edges belonging to no cycles.
A⇒D. By Menger’s Theorem, a 2-edge-connected graph G has two
edge-disjoint x, y-paths, where x, y ∈V (G). Following one path and re-
turning on the other yields a closed trail containing x and y. (Without
using Menger’s Theorem, this can be proved by induction on d(x, y).)
D⇒B. Let xy be an edge. D yields a closed trail containing x and y.
This breaks into two trails with endpoints x and y. At least one of them,
T , does not contain the edge xy. Since T is an x, y-walk, it contains an
x, y-path. Since T does not contain xy, this path completes a cycle with xy.
B⇒C. Choose e, f ∈E(G); we want a closed trail through e and f .
Subdivide e and f to obtain a new graph G′, with x, y being the new ver-
tices. Subdividing an edge does not destroy paths or cycles, although it
may lengthen them. Thus G′ is connected and has every edge on a cy-
cle, because G has these properties. Because we have already proved the
equivalence of B and D, we know that G′ has a closed trail containing x
and y. Replacing the edges incident to x and y on this trail with e and f
yields a closed trail in G containing e and f .
C⇒D. Given a pair of vertices, choose edges incident to them. A closed
trail containing these edges is a closed trail containing the original vertices.
4.2.12. κ(G) = κ′(G) when G is 3-regular, using Menger’s Theorem. By
Menger’s Theorem, for each x, y there are κ′(G) pairwise edge-disjoint x, y-
paths.
Since G is 3-regular, these paths cannot share internal vertices

207
Chapter 4: Connectivity and Paths
Section 4.2: k­connected Graphs
208
(that would force four distinct edges at a vertex). Hence for each x, y there
are κ′(G) pairwise internally disjoint x, y-paths. This implies that κ(G) ≥
κ′(G), and it always holds that κ(G) ≤κ′(G).
4.2.13. Given a 2-edge-connected graph G, deﬁne a relation R on E(G) by
(e, f ) ∈R if e = f or if G −e −f is disconnected.
a) (e, f ) ∈R if and only if e and f belong to the same cycles. Suppose
that (e, f ) ∈R. If e = f , then e and f belong to the same cycles. If G −e−f
is disconnected, then f is a cut-edge in G −e, whence f belongs to no edges
in G −e, and thus every cycle in G containing f must also contain e. Since
similarly e is a cut-edge in G −f , we conclude also that f belongs to every
cycle containing e. Thus e and f belong to the same cycles.
If G −e −f is connected, then f is not a cut-edge in G −e and thus
belongs to a cycle in G −e; this is a cycle in G that does not contain e.
b) R is an equivalence relation on E(G). The reﬂexive property holds
by construction: (e, e) ∈R for all e ∈E(G). The symmetric property holds
because G−f −e is disconnected if G−e−f is disconnected. The transitive
property holds by part (a): if (e, f ) ∈R and ( f, g) ∈R, then e and f belong
to the same cycles, and f and g belong to the same cycles, and thus e and
g belong to the same cycles (those containing f ), and therefore (e, g) ∈R.
c) Each equivalence class is contained in a cycle. We prove the stronger
statement that a cycle contains an element of a class if and only if it con-
tains the entire class. If some cycle contains some element e of the class
and omits some other element f , then e and f do not belong to the same
cycles, which contradicts (a).
d) For each equivalence class F, G −F has no cut-edge. If e is a cut-
edge in G −F, then e lies in no cycle in G −F, so every cycle in G containing
e contains some element of F. By the stronger statement in (c), every such
cycle contains all of F.
Deleting a single edge f ∈F breaks all cycles
containing F. Thus G −e −f is disconnected, which yields (e, f ) ∈R,
which prevent e and f from being in different classes.
4.2.14. A graph G is 2-edge-connected if and only if for all u, v ∈V (G) there
is a u, v-necklace in G, where a u, v-necklace is a list of cycles C1, . . . , Ck
such that u ∈C1, v ∈Ck, consecutive cycles share one vertex, and non-
consecutive cycle are disjoint. The condition is sufﬁcient, because a u, v-
necklace has two edge-disjoint u, v-paths, and these cannot both be cut by
deleting a single edge. Conversely, suppose that G is 2-edge-connected. We
obtain a u, v-necklace.
Proof 1 (induction on d(u, v)). Basis step (d(u, v) = 1): A u, v-path in
G −uv combines with the edge uv to form a u, v-necklace in G.
Induction step (d(u, v) > 1). Let w be the vertex before v on a shortest
u, v-path; note that d(u, w) = d(u, v) −1. By the induction hypothesis, G
has a u, w-necklace. If v lies on this u, w-necklace, then the cycles up to the
one containing v form a u, v-necklace.
Otherwise, let R be a u, v-path in G −wv; this exists since G is 2-
edge-connected. Let z be the last vertex of R on the u, w-necklace; let Cj
be the last cycle containing z in the necklace. The desired u, v-necklace
consists of the cycles before Cj in the u, w-necklace together with a ﬁnal
cycle containing v. The ﬁnal cycle consists of the remainder of R from z
to v, the edge vw, a path from w to Cj in the u, v-necklace, and the path
on Cj from there to z that contains the vertex of Cj ∩Cj−1. The choice of z
guarantees that this is a cycle.
•
•
•
•
•
•
u
w
v
z
Cj
Comment. There is also a proof by induction on the number of ears in
an ear decomposition, but showing that all pairs still have necklaces when
an open ear is added still involves a discussion like that above. Another
inductive proof involves showing that the union of a necklace from u to w
and an necklace from w to v contains a necklace from u to v.
Proof 2 (extremality). Since G is 2-edge-connected, there exist two
edge-disjoint u, v-paths. Among all such pairs of paths, choose a pair P1, P2
whose lengths have minimum sum. Let S be the set of common vertices of
P1 and P2. If the vertices of S occur in the same order on P1 and P2, then
P1 ∪P2 is a u, v-necklace. Otherwise, let x, y be the ﬁrst vertices of P1 in
S that occur in the opposite order on P2, with x before y in P1 and after y
in P2. In the ﬁgure, P1 is the straight path. Form two new u, v-paths: Q1
consists of the portion of P1 up to x and the portion of P2 after x, and Q2
consists of the portion of P2 up to y and the portion of P1 after y. Neither of
Q1, Q2 uses any portion of P1 or P2 between x and y, so we have found edge-
disjoint u, v-paths with shorter total length. This contradiction completes
the proof.
•
•
•
•
•
•
x
y
4.2.15. If G is a 2-connected graph and v ∈V (G), then v has a neighbor u
such that G −u −v is connected.
Proof 1 (structure of blocks). Because G is 2-connected, G −v is con-
nected. If G −v is 2-connected, then we may let u be any neighbor of v. If
G −v is not 2-connected, let B be a block of G −v containing exactly one

209
Chapter 4: Connectivity and Paths
Section 4.2: k­connected Graphs
210
cutvertex of G −v, and call that cutvertex x. Now v must have a neighbor
in B −x, else G −x is disconnected, with B −x as a component. Let u be a
neighbor of v in B −x. Since B −u is connected, G −v −u is connected.
Proof 2 (extremality) If v has no such neighbor, then for every u ∈
N(v), the graph G −v −u is disconnected. Choose u ∈N(v) such that
G −v −u has as small a component as possible; let H be the smallest
component of G −v −u. Since G is 2-connected, v and u have neighbors in
every component of G −v −u. Let x be a neighbor of v in H. If G −v −x
is disconnected, then it has a component that is a proper subgraph of H.
This contradicts the choice of u, so G −v −x is connected.
4.2.16. If G is a 2-connected graph, and T1 and T2 are two spanning trees
of G, then T1 transforms into T2 by a sequence of operations in which a leaf
is removed and reattached using another edge of G. Let T be a largest
tree contained in both T1 and T2; this is nonempty, since each single vertex
is such a tree. We use induction on the number of vertices of G omitted
by T . If none are omitted, then T1 = T2 and the sequence has length 0.
If one vertex is omitted, then it is a leaf in both T1 and T2, and a single
reattachment sufﬁces.
Otherwise, for i ∈{1, 2} let xi yi be an edge of Ti with xi ∈V (T ) and
yi /∈V (T ). If y1 ̸= y2, then enlarge T + x1y1 + x2y2 to a spanning tree T ′
of G. Since T ′ shares more with T1 than T does, the induction hypothesis
yields a sequence of leaf exchanges that turns T1 into T ′.
Similarly, it
yields a sequence that turns T ′ into T2. Together, they complete the desired
transformation.
Hence we may assume that y1 = y2 (this may be necessary even when
T omits many vertices of G). We generate another edge x3y3 with x3 ∈V (T )
and y3 ∈V (G −y1) (this is possible since G is 2-connected). Now enlarge
T + x1y1 + x3y3 to a spanning tree T ′ and T + x2y2 + x3y3 to a spanning
tree T ′′. For each pair (T1, T ′), (T ′, T ′′), or (T ′′, T2), there is now a common
subtree consisting of T and one additional edge. Hence we can use the
induction hypothesis to turn T1 into T ′, then T ′ into T ′′, and ﬁnally T ′′ into
T2, completing the desired transformation.
(Note: Induction also yields the statement that the common subtree T
is never changed during the transformation.)
4.2.17. The smallest graph with connectivity 3 having a pair of nonadjacent
vertices joined by 4 internally-disjoint paths.
“Smallest” usually means
least number of vertices, and within that the least number of edges. Let
x, y be the nonadjacent pair joined by 4 internally disjoint paths. Each such
path has at least one vertex and two edges, so we have at least four more
vertices {a, b, c, d}. We construct a graph achieving this. Since G must
be 3-connected, G −{x, y} is connected, so if we add no more vertices we
must have a tree on the other four vertices. We add the path a, b, c, d. To
complete the prove, we need only show that the graph we have constructed
has connectivity 3. Deleting {b, x, y} separates a from {c, d}. To see that G
is 3-connected, observed that for each v, G −v contains a spanning cycle
and hence is 2-connected, so G is 3-connected.
•
•
•
•
•
•
a
b
c
d
x
y
4.2.18. If a graph G has no isolated vertices and no even cycles, then every
block of G is an edge or a cycle. A block with two vertices is an edge (if
there are no even cycles, then there are no multiple edges). A block H
with more than two vertices is 2-connected and has an ear decomposition.
If H is not a single cycle, then the addition of the ﬁrst ear to the ﬁrst
cycle creates a subgraph in which a pair of vertices is connected by three
pairwise internally-disjoint paths. By the pigeonhole principle, two of the
paths have length of the same parity (both odd or both even), and their
union is an even cycle. Hence H must be a single cycle.
4.2.19. Membership in common cycles.
a) Two distinct edges lie in the same block of a graph if and only if they
belong to a common cycle. Choose e, f ∈E(G). If e and f lie in a cycle,
then this cycle forms a subgraph with no cut-vertex; by the deﬁnition of
block, the cycle lies in a single block. Conversely, consider edges e and f
in a block B. If e and f have the same endpoints, then they form a cycle of
length 2. Otherwise, B has at least three vertices and is 2-connected. In
a 2-connected graph, for every edge pair e, f , there is a cycle containing e
and f .
b) If e, f, g ∈E(G), and G has a cycle through e and f and a cycle
through f and g, then G also has a cycle through e and g. By part (a), e and
f lie in the same block. By part (a), f and g lie in the same block. Since the
blocks partition the edges, this implies that e and g lie in the same block.
By part (a), this now implies that some cycle in G contains e and g.
4.2.20. k-connectedness of the hypercube Qk by explicit paths. We use in-
duction on k to show that for x, y ∈V (Qk), there are k pairwise internally
disjoint x, y-paths for each vertex pair x, y ∈V (Qk). When k = 0, the claim
holds vacuously.
For k > 1, consider vertex x and y as binary k-tuples. Suppose ﬁrst
that they agree in some coordinate. If they agree in coordinate j, then let Q
be the copy of Qk−1 in Qk whose vertices all have that value in coordinate
j, and let Q′ be the other copy of Qk−1. By the induction hypothesis, Q

211
Chapter 4: Connectivity and Paths
Section 4.2: k­connected Graphs
212
contains k −1 pairwise internally disjoint x, y-paths. Let x ′ and y′ be the
neighbors of x and y in Q′. Combining an x′, y′-path in Q′ with the edges
xx′ and yy′ yields the kth path, since it has no internal vertices in Q.
If x and y agree in no coordinate, then we deﬁne k paths explicitly as
follows. The jth path begins from x by ﬂipping the jth coordinate, then the
j + 1st, j + 2nd, etc., cyclically (ﬂipping the ﬁrst coordinate after the kth).
After k steps, the path reaches y. The vertices on the jth path agree with
y for a segment of positions starting with coordinate j and agree with x
for a segment ending with coordinate j −1, so the paths share no internal
vertices.
4.2.21. If G is 2k-edge-connected and has at most two vertices of odd degree,
then G has a k-edge-connected orientation. It sufﬁces to orient the edges
so that at least k edges leave each nonempty proper subset of the vertices.
When k = 0, the statement is trivial, so we may assume that k > 0.
Since G has at most two vertices of odd degree, G has an Eulerian
trail. Choose an Eulerian trail T . Let D be the orientation obtained by
orienting each edge of G in the direction in which T traverses it. Let [S, S]
be an edge cut of G. When crossing the cut, the trail alternately goes from
one side and then from the other, so it alternately orients edges leaving
or entering S. Since G is 2k-connected,
[S, S]
 ≥2k, and the alternation
means that at least k edges leave each side in the orientation.
4.2.22. If κ(G) = k and diam G = d, then n(G) ≥k(d −1) + 2 and α(G) ≥
⌈(1 + d)/2⌉, and these bounds are best possible. Let G be a k-connected
graph with diameter d, in which d(x, y) = d.
Since G is k-connected,
Menger’s Theorem guarantees k pairwise internally disjoint x, y-paths in
G.
With x and y, these paths form a set of k(d −1) + 2 vertices in G.
The vertices consisting of all vertices having even distance from x along a
shortest x, y-path form an independent set of size ⌈(1 + d)/2⌉.
For optimality of the bounds, let V0, . . . , Vd be “level sets” of size k,
except that |V0| = |Vd| = 1.
Form G on these k(d −1) + 2 vertices by
making each vertex adjacent to the vertices in its own level and the two
neighboring levels. The graph G has order k(d −1)+2 and diameter d. Also
it is k-connected; if fewer than k vertices are deleted, then each internal set
still has an element, so paths remain from each remaining vertex to each
neighboring layer. The vertex set is covered by ⌈(1 + d)/2⌉cliques (each
consisting of two consecutive levels), so α(G) ≤⌈(1 + d)/2⌉.
•
•
4.2.23. K¨onig-Egerv´ary from Menger. Let G be an X, Y-bigraph. Form a
digraph G′ by adding a vertex x with edges to X and a vertex y with edges
from Y, and direct the edges of G from X to Y in G′.
The idea is that
internally disjoint x, y-paths in G′ correspond to edges of a matching in G.
Menger’s Theorem states that the condition for having a set of k internally
disjoint x, y-paths in G′ (and hence a matching of size k in G) is that every
x, y-separating set R has size at least k.
If we delete the endpoints from a set of internally disjoint x, y-paths
in G′, we obtain a set of edges in G with no common endpoints. Hence
α′(G) ≥λG′(x, y).
An x, y-separating set R in G′ consists of some vertices in X and some
vertices in Y. In order to break all x, y-paths in G′, such a set must contain
an endpoint of every edge in G. Hence R is a vertex cover in G. Applying
this to a smallest x, y-separating set yields κG′(x, y) ≥β(G).
By Menger’s Theorem, we now have α′(G) ≥λG′(x, y) = κG′(x, y) ≥
β(G). Since weak duality yields α′(G) ≤β(G) for every graph G, we have
α′(G) = β(G) (K¨onig-Egerv´ary Theorem).
4.2.24. If G is k-connected, and S, T are disjoint subsets of V (G) with size
at least k, then there exist k pairwise disjoint S, T -paths. By the Expan-
sion Lemma, we can add a vertex x adjacent to each vertex of S and a
vertex y adjacent to each vertex of T , and the resulting graph will also be
k-connected. Menger’s Theorem then yields k disjoint x, y-paths, and since
x is adjacent to all X and y to all Y we may assume each path has only one
vertex of X and only one vertex of Y. If we delete x and y from these paths,
we obtain k pairwise disjoint S, T -paths in G.
4.2.25. Dirac’s Theorem that every k vertices in a k-connected graph lie on a
cycle is best possible. Kk,k+1 is a k-connected graph where the k + 1 vertices
of the larger partite set do not lie on a cycle.
4.2.26. For k ≥2, a graph G with at least k + 1 vertices is k-connected if
and only if for every T ⊆S ⊆V (G) with |S| = k and |T | = 2, there is a cycle
in G that contains T and avoids S −T .
Necessity. If G is k-connected, then G −(S −T ) is 2-connected, since
|S −T | = k −2. In a 2-connected graph, every pair of vertices (such as T )
lies on a cycle. Since S −T has been discarded, the cycle avoids it.
Sufﬁciency. We prove the contrapositive. If G is not k-connected, then
G has a separating set U of size k −1. Let T consist of one vertex from
each of two components of G −U. Let S = T ∪U. The condition now fails,
since deleting S −T leaves no cycle through both vertices of T .
4.2.27. A vertex k-split of a graph G is a graph H obtained from G by

213
Chapter 4: Connectivity and Paths
Section 4.2: k­connected Graphs
214
replacing one vertex x ∈V (G) by two adjacent vertices x1, x2 such that
dH(xi) ≥k and that NH(x1) ∪NH(x2) = NG(x) ∪{x1, x2}.
a) If G is a k-connected graph, and G′ is a graph obtained from G by
replacing one vertex x ∈V (G) with two adjacent vertices x1, x2 such that
NH(x1) ∪NH(x2) = NG(x) ∪{x1, x2} and dH(xi) ≥k, then G is k-connected.
Suppose S is a separating j-set of H, where j < k, and let X = {x1, x2}.
Note that H −S cannot have x1, x2, or X as a component, because dH(xi) ≥k
and X has edges to at least k distinct vertices of H −X. If |S ∩X| = 2, then
H −S = G −(S −X ∪x), and S −X ∪x is a separating j −1-set of G. If
|S∩X| = 1, then S∪X separates H, since X −S is not a component of H −S.
Hence S −X ∪x is a separating j-set of G, which requires j ≥k. Finally,
suppose S ∩X = ∅. Now {x1, x2} must belong to the same component of
H −S. Contracting an edge of a component in a disconnected graph leaves
a disconnected graph, so in this case S separates G.
b) Every graph obtained from a “wheel” Wn = K1 ∨Cn−1 by a sequence
of edge additions and vertex 3-splits on vertices of degree at least 4 is 3-
connected. Since wheels are 3-connected, part (a) implies that every graph
arising from wheels by 3-splits and edge additions is also 3-connected. The
Petersen graph arises by successively splitting off vertices from the central
vertex of the wheel K1∨C6. Each newly-split vertex acquires two neighbors
on the outside and remains adjacent to the central vertex.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
••
• •
•
•
•
•
•
•
•
•
4.2.28. If X and Y are disjoint vertex sets in a k-connected graph G and
are assigned nonnegative integer weights with P
x∈X u(x) = P
y∈Y w(y) = k,
then G has k pairwise internally disjoint X, Y-paths from X to Y such that
u(x) of them start at x and w(y) of them end at y. We may assume that all
weights are positive, since otherwise we delete vertices of weight 0 from X
and Y and apply the argument to the sets that remain.
We construct a related G′ and apply Menger’s Theorem. Add copies of
vertices in X and Y, with each new vertex having the same neighborhood
as the vertex it copies. Since G is k-connected, these neighborhoods have
size at least k, and by the Expansion Lemma the new graph is k-connected.
We do this until there are u(x) copies of each x and w(y) copies of each y.
Next add two additional vertices s and t joined to the copies of all x ∈X
and the copies of all y ∈Y, respectively. Note that s and t each have degree
k in this ﬁnal graph G′. By the Expansion Lemma, G′ is k-connected. By
Menger’s Theorem, there are k pairwise internally disjoint s, t-paths in G′.
These must depart s via its k distinct neighbors and reach t via its k distinct
neighbors, so each path connects a copy of some x ∈X to a copy of some
y ∈Y, and no x or y appears in one of these paths except at endpoints.
Collapsing G′ to G by identifying the copies of each original vertex turns
these into the desired paths, since there are u(x) copies of each x and w(y)
copies of each y and one path at the original vertex arising from each copy
of it in G′.
4.2.29. Graph connectivity from connectivity in the corresponding symmet-
ric digraph. From a graph G, we form D be by replacing each edge with two
oppositely-directed edges. Given two vertices a, b on a path P, let P(a, b)
denote the a, b-path along P.
If κ′
D(x, y) = λ′
D(x, y), then κ′
G(x, y) = λ′
G(x, y).
It sufﬁces to prove
that λ′
G(x, y) ≥λ′
D(x, y) and κ′
G(x, y) ≤κ′
D(x, y), since the weak duality
λ′
G(x, y) ≤κ′
G(x, y) holds always.
Let F be a family of λ′
D(x, y) pairwise edge-disjoint x, y-paths in D. If
there is some vertex pair u, v such that uv appears in a path P in F and
vu appears in another path Q in F, then we modify F. Let P ′ be path
consisting of P(x, u) followed by Q(u, y), and let Q′ be the path consisting
of Q(x, v) followed by P(v, y). Replacing P and Q with P ′ and Q′ in F
reduces the number of edges that used in both directions. Repeating this
replacement yields a family F′ with no such doubly-used pair.
Now F′
becomes a family of λ′
D(x, y) pairwise edge-disjoint x, y-paths in G using
the same succesion of vertices, and hence λ′
G(x, y) ≥λ′
D(x, y).
Let R be a set of κ′
D(x, y) edges in D whose removal makes y unreach-
able from x. By the construction of D from G, every x, y-path in G must
use an edge having a copy in R. Hence the corresponding edges in G form
an x, y-disconnecting set, and κ′
G(x, y) ≤κ′
D(x, y).
If x ̸→y in D and κD(x, y) = λD(x, y), then κG(x, y) = λG(x, y). It
sufﬁces to prove that λG(x, y) ≥λD(x, y) and κG(x, y) ≤κD(x, y), since the
weak duality λG(x, y) ≤κG(x, y) holds always.
Let F be a family of λD(x, y) pairwise internally-disjoint x, y-paths in
D. Since these pairs pairwise share no vertices other than their endpoints,
there is no pair u, v such that the edges uv and vu are both used. In par-
ticular, the paths (listed by vertices) in F also form a family of λD(x, y)
pairwise internally-disjoint x, y-paths in G, and λG(x, y) ≥λD(x, y).
Let R be a set of κD(x, y) vertices in D whose removal makes y unreach-
able from x. By the construction of D from G, every x, y-path in G uses a
vertex of R. Hence R is an x, y-separating set in G, and κG(x, y) ≤κD(x, y).
4.2.30. Expansion preserves 3-connectedness. Suppose that G′ is obtained
from G by expansion (subdividing xy and wz and adding an edge st join-
ing the two new vertices). It sufﬁces to show that if G is 3-connected, then

215
Chapter 4: Connectivity and Paths
Section 4.2: k­connected Graphs
216
deleting a vertex from G′ always leaves a 2-connected graph. If v ∈V (G),
then we can obtain an ear decomposition of G′ −v from an ear decompo-
sition of G −v by making the ear a bit longer when the edge xy or wz is
added and adding the edge st at the end. To obtain an ear decomposition
of G′ −t, observe that G −wz is 2-connected (deleting an edge reduces con-
nectivity by at most 1). Use an ear decomposition of G −wz, lengthening
the ear when xy is added, and then add two ears through t. (There are
many other proofs.)
To obtain the Petersen graph from K4 by expansions, perform expan-
sion on the three pairs of nonincident edges in K4, independently.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
4.2.31. Longest cycles in k-connected graphs.
a) In a k-connected graph (for k = 2, 3), any two longest cycles have at
least k vertices in common. (The claim is false for k = 1, as shown by two
cycles joined by a single cut edge.) Let l(H) denote the length of a cycle or
path H, let C, D be two longest cycles, and let S = V (C) ∩V (D). The proof
is by contradiction; if |S| < k, it sufﬁces to construct two other cycles C ′, D′
such that l(C′) + l(D′) > l(C) + l(D), because then C and D are not longest
cycles in G.
Consider k = 2. Let e be an edge of C, and e′ an edge of D, chosen to
share the vertex of S if |S| = 1. Since G is 2-connected, there is a cycle R
containing both e and e′. The two portions of R between e and e′ contain
paths P, Q that travel from V (C) to V (D) with no vertices of V (C) ∪V (D)
along the way. (If |S| = 1, then one of these paths is a single vertex and has
length 0.) Note that since R is a cycle, P and Q are disjoint. The vertices
where P and Q intersect C and D partition C and D into paths C1, C2 and
D1, D2, respectively. Let C′ = C1 ∪P ∪D1 ∪Q and D′ = C2 ∪P ∪D2 ∪Q;
we have l(C′) + l(D′) = l(C) + l(D) + 2l(P) + 2l(Q) > l(C) + l(D).
••
•
•
••
C1
C2
e
D1
D2
e′
P
Q
•
•
•
•
C1
C2
C3
D1
D2
D3
x
y
P
Consider k = 3. Since G is also 2-connected, we may assume by the
argument above that |S| = 2. Now G −S is connected and has a shortest
path P between C −S and D −S. The vertices where P meets C and D,
together with the vertices S = {x, y}, partition C and D into three paths
C1, C2, C3 and D1, D2, D3, where C1, D1 are y, x-paths, C2, D2 are x, V (P)-
paths, and C3, D3 are y, V (P)-paths. Let C′ = C1 ∪C2 ∪P ∪D3 and D′ =
D1 ∪D2 ∪P ∪C3. Now l(C′) + l(D′) = l(C) + l(D) + 2l(P) > l(C) + l(D).
b) For k ≥2, one cannot guarantee more than k common vertices. The
graph Kk,2k is k-connected and has two cycles sharing only the smaller
partite set.
4.2.32. Given k ≥2, let G1 and G2 be disjoint k-connected graphs, with
v1 ∈V (G1) and v2 ∈V (G2). If B is a bipartite graph with parts NG1(v1) and
NG2(v2) that has no isolated vertex and has a matching of size at least k,
then (G1−v1)∪(G2−v2)∪B is k-connected. Let G = (G1−v1)∪(G2−v2)∪B.
It sufﬁces to show that for distinct vertices x, y ∈V (G), there is a family of
k independent x, y-paths.
If x, y ∈V (G1), then there are k such paths from G1, except that one
of them may pass through v. If x ′ and y′ are the neighbors of v along this
path, then we replace ⟨x′, v, y′⟩with a path through G2, using edges in B
incident to x′ and y′. The argument is symmetric when x, y ∈V (G2).
If x ∈V (G1) and y ∈V (G2), then let X ⊆NG1(v1) and Y ⊆NG2(v2)
be the partite sets of a matching M of size k in B.
Deleting v1 from k
independent x, v1-paths in G1 leaves an x, X-fan. Similarly, deleting v2
from k independent y, v2-paths in G2 leaves an y, Y-fan.
Combining M
with these two fans yields the desired x, y-paths.
The claim fails for k = 1. If G1 and G2 are stars, with centers v1 and
v2, then the resulting graph G is simply the bipartite graph B. The only
requirement on B is that it have no isolated vertices. In particular, it need
not be connected.
4.2.33. Ford-Fulkerson CSDR Theorem implies Hall’s Theorem. Given an
X, Y-bigraph G with X = {x1, . . . , xm}, let Ai = Bi = N(xi). If the systems
A1, . . . , Am and B1, . . . , Bm have a common CSDR, then A1, . . . , Am has an
SDR, and thus G has a matching saturating X. Thus it sufﬁces to show
that Hall’s Condition on G implies the Ford-Fulkerson condition for these
systems.
Let I, J ⊆[m] be sets of indices. Since S
j∈J Bj = S
j∈J Aj, we have
S
i∈I Ai ∩S
j∈J Bj
 =
(S
i∈I Ai) ∩S
j∈J Aj)
 ≥
S
i∈I∩J Ai
.
By Hall’s Condition,
S
i∈I∩J Ai
 ≥|I ∩J| ≥|I| + |J| −m. Thus the Ford-
Fulkerson condition holds in G, as desired.

217
Chapter 4: Connectivity and Paths
Section 4.2: k­connected Graphs
218
If A1, . . . , Am and B1, . . . , Bm are partitions of a set E into sets of size
s, then the two systems have a CSDR. It sufﬁces to show that the systems
satisfy the Ford-Fulkerson condition. By the deﬁning condition,
S
i∈I Ai
 =
|I| s and
S
j∈J Bj
 = |J| s. Thus

[
i∈I
Ai ∩
[
j∈J
Bj
 ≥

[
i∈I
Ai
 +

[
j∈J
Bj
 −ms = |I| s + |J| s −ms
= s(|I| + |J| −m) ≥|I| + |J| −m.
4.2.34. Every minimally 2-connected graph has a vertex of degree 2. Con-
sider an ear decomposition of a minimally 2-connected graph G. If the last
ear adds just one edge e, then G −e also has an ear decomposition and is
2-connected. Hence the last ear added contains a vertex of degree 2.
A minimally 2-connected graph G with at least 4 vertices has at most
2n(G)−4 edges, with equality only for K2,n−2. The graph K2,n−2 is minimally
2-connected and has 2n −4 vertices. For the upper bound, we use induction
on n(G). When n(G) = 4, K2,2 is the only minimally 2-connected graph.
When n(G) > 4, consider an ear decomposition of G. If G is only a cycle,
then the bound holds, with strict inequality. Otherwise, delete the last
added ear from G to obtain G′. This deletes k vertices and k + 1 edges,
where k ≥1 as observed above.
The graph G′ is also minimally 2-connected, since if G′ −e is 2-
connected, then also G −e is 2-connected.
Hence e(G′) ≤2n(G′) −4,
by the induction hypothesis. In terms of G, this states that e(G) −k −1 ≤
2n(G) −2k −4, which simpliﬁes to e(G) ≤2n(G) −k −3 ≤2n(G) −4.
Equality requires k = 1, and by the induction hypothesis also G′ = K2,n−3.
The only way to add an ear of length two to K2,n−3 and obtain a minimally
2-connected graph is to add it connecting the two vertices of high degree.
4.2.35. A 2-connected graph is minimally 2-connected if and only if no cycle
has a chord. Suppose that G is 2-connected. We show that G −xy is 2-
connected if and only if x and y lie on a cycle in G −xy. If G −xy is not
2-connected, then there is a vertex v whose deletion separates x and y,
and thus all x, y-paths in G −xy pass through v and G −xy has no cycle
containing x and y. Conversely, if G −xy is 2-connected, then every pair of
vertices (including x, y) lies on a cycle.
If a cycle in G has a chord x, y, then this argument shows that G −xy
is still 2-connected, and hence G is not minimally 2-connected. If no cycle
has a chord, then for any edge xy, the graph G −xy has no cycle containing
x and y, and so G −xy is not 2-connected.
4.2.36. If X, Y ⊆V (G), then d(X ∩Y) + d(X ∪Y) ≤d(X) + d(Y), where
d(S) is the number of edges leaving S. With respect to the sets X, Y, there
are four types of vertices, belonging to none, either, or both of the two sets.
Between pairs of the four sets X ∩Y, X −Y, Y −X, X ∩Y, there are six types
of edges. We list the contribution of each type to the counts on both sides of
the desired inequality. Each edge contributes at least as much to the right
side as to the left side of the inequality. This proves the inequality; note
that equality holds if and only if [X −Y, Y −X] is empty.
endpoints
d(X ∩Y)
d(X ∪Y)
d(X)
d(Y)
X ∩Y, X −Y
•
•
X ∩Y, Y −X
•
•
X ∩Y, X ∩Y
•
•
•
•
X −Y, X ∩Y
•
•
Y −X, X ∩Y
•
•
X −Y, Y −X
•
•
X −Y
X
X
Y −X
Y
Y
X ∩Y
X ∩Y
4.2.37. Every minimally k-edge-connected graph G has a vertex of degree
k.
Let d(X) =
[S, S]
.
If d(X) > k whenever ∅̸= X ⊂V (G), then
G −e is k-edge-connected for each e ∈E(G), and G is not minimally k-edge-
connected. Hence we may assume that d(X) = k for some set X.
Suppose that G[X] has an edge xy.
Since G −xy is not k-edge-
connected, there is a nonempty Z ⊂V (G) (containing exactly one of {x, y})
such that k −1 ≥dG−xy(Z) = d(Z) −1.
Since G is k-edge-connected,
d(Z) ≥k, so equality holds.
Now k-edge-connectedness of G and submodularity of d (the result of
Exercise 4.2.36 yield
k + k ≤d(X ∩Z) + d(X ∪Z) ≤d(X) + d(Z) = k + k.
Since G is k-edge-connected, we obtain d(X ∩Z) = k. Since Z contains
exactly one of {x, y}, the set X ∩Z is smaller than X.

219
Chapter 4: Connectivity and Paths
Section 4.3: Network Flow Problems
220
Hence a minimal set X such that d(X) = k must be an independent
set. Since each vertex of X has at least k incident edges leaving X, we have
|X| = 1, and this is the desired vertex of degree k.
4.2.38. Every 2k-edge-connected graph has a k-edge-connected orientation.
To prove this theorem of Nash-Williams, we are given Mader’s Shortcut
Lemma: “If z is a vertex of a graph G such that dG(z) /∈{0, 1, 3} and
z is incident to no cut-edge, then z has neighbors x and y such that
κG−xz−yz+xy(u, v) = κG(u, v) for all u, v ∈V (G) −{z}.”
We use induction on n(G). For the basis step, consider two vertices
joined by at least 2k edges, and orient at least k in each direction.
For the induction step, let G be a 2k-edge-connected graph with n(G) >
2. We discard edges to obtain a minimal 2k-edge-connected graph; we may
later orient the deleted edges arbitrarily. By Exercise 4.2.37, the resulting
graph has a vertex z of degree 2k, which is even. Mader’s Shortcut Lemma
iteratively ﬁnds shortcuts of z until we reduce the degree of z to 0. Through-
out this process, we maintain 2k-edge-connectedness for pairs of points not
including z. At the end, we delete z to obtain a 2k-edge-connected graph G′
with n(G) −1 vertices.
By the induction hypothesis, G′ has a k-edge-connected orientation.
Orient G by replacing each shortcut edge uv with the path u, z, v or v, z, u,
oriented consistently with uv in G′. For X ̸= {z}, lifting uv preserves d(X) ≥
k in the orientation; the only edge lost is uv, and if uv leaves X, then uz or
zv is a new edge leaving X, depending on whether z ∈X. The set X = {z}
itself reaches d(X) = k after all k lifts.
4.3. NETWORK FLOW PROBLEMS
4.3.1. Listing of feasible integer s, t-ﬂows in a network.
This problem
demonstrates the value of integer min-max relations in escaping exhaus-
tive computation.
•
•
•
•
•
•
s
3
3
1
2
1
a
b
c
d
2
2
t
3
3
A feasible ﬂow is an assignment of a ﬂow value to each edge.
It
is not an assignment of ﬂow paths.
Every network has a feasible ﬂow
of value 0.
In this network, there is a cycle ba, ac, cb with positive
capacity, which makes it possible to “add” to a ﬂow without adding
to the value of the ﬂow.
In particular, there are two feasible integer
ﬂows of value 0, eight of value 1, and four of value 2.
We can spec-
ify each ﬂow by the vector of values on the edges.
We list these as
( f (sa), f (sb), f (ba), f (ac), f (bd), f (cb), f (cd), f (ct), f (dt)), with each col-
umn of the matrix below corresponding to one ﬂow.
sa
0
0
1
1
1
0
0
0
0
0
1
0
1
0
sb
0
0
0
0
0
1
1
1
1
1
1
2
1
2
ba
0
1
0
0
0
1
1
1
0
1
0
1
0
1
ac
0
1
1
1
1
1
1
1
0
1
1
1
1
1
bd
0
0
0
0
1
0
0
1
1
1
1
1
1
1
cb
0
1
0
0
1
0
0
1
0
1
0
0
0
0
cd
0
0
0
1
0
0
1
0
0
0
0
0
1
1
ct
0
0
1
0
0
1
0
0
0
0
1
1
0
0
dt
0
0
0
1
1
0
1
1
1
1
1
1
2
2
value
0
0
1
1
1
1
1
1
1
1
2
2
2
2
Since the network has four internal vertices, there are 24 = 16 ways to
specify a source-sink cut [S, T ]. In general, the resulting edge cuts might
not be distinct as sets of edges, but for this network they are distinct. In-
cidence vectors for the cuts appear in the columns below; a 1 for edge e in
column [S, T ] means that e belongs to the cut [S, T ]. The cut [sab, cdt] with
capacity equal to the maximum ﬂow value is suggested by dashed lines in
the ﬁgure. Exhibiting a ﬂow and a cut of equal value proves that the ﬂow
value is maximal and the cut capacity is minimal; this is a shorter and
more reliable proof of ﬂow optimality than listing all feasible ﬂows.
S
s
sa
sb
sc
sd
sab
sac
sad
sbc
sbd
scd
sabc
sabd
sacd
sbcd
sabcd
T
abcdt
bcdt
acdt
abdt
abct
cdt
bdt
bct
adt
act
abt
dt
ct
bt
at
t
sa
1
0
1
1
1
0
0
0
1
1
1
0
0
0
1
0
sb
1
1
0
1
1
0
1
1
0
0
1
0
0
1
0
0
ba
0
0
1
0
0
0
0
0
1
1
0
0
0
0
1
0
ac
0
1
0
0
0
1
0
1
0
0
0
0
1
0
0
0
bd
0
0
1
0
0
1
0
0
1
0
0
1
0
0
0
0
cb
0
0
0
1
0
0
1
0
0
0
1
0
0
1
0
0
cd
0
0
0
1
0
0
1
0
1
0
0
1
0
0
0
0
ct
0
0
0
1
0
0
1
0
1
0
1
1
0
1
1
1
dt
0
0
0
0
1
0
0
1
0
1
1
0
1
1
1
1
capac
6
4
6
13
9
2∗
10
7
11
8
14
6
4
11
11
6
4.3.2. In the network with edge capacities as indicated below, the ﬂow val-
ues listed in parentheses form a maximum feasible ﬂow.
By inspection, they satisfy the capacity constraints and the conserva-
tion constraints. The value of the ﬂow is 17. To prove that the ﬂow is

221
Chapter 4: Connectivity and Paths
Section 4.3: Network Flow Problems
222
optimal, we exhibit a solution to the dual (min cut) problem that has the
same value. This proves optimality because the value of every feasible ﬂow
is at most the capacity of this cut. The cut has source set {s, h, i, d, a} and
sink set {e, f, b, t}. The edges of the cut are {i f, h f, he, db, ab} with total
capacity 17; the edge ed does not belong to this cut.
•
•
•
•
•
•
•
•
•
(5)5
(3)4
(12)14
(7)13
(5)5
(4)4
(3)3
(0)4
(0)6
(3)5
(2)2
(5)6
(2)3
(5)6
(3)3
(12)12
a
b
t
d
e
f
s
h
i
4.3.3. A maximum ﬂow problem. Add a source X with edges of inﬁnite
capacity to the true sources A and B. The optimal net ﬂow from source to
sink is 34. This is optimal because the cut [X ABE, C DFGH] has capacity
9+5+5+10+5=34, and no ﬂow can have value larger than the capacity of
any cut. The optimal ﬂow values on the various edges are indicated in
parentheses on the edges below. (The edges from X ABE to C DFGH are
saturated; those going back have zero ﬂow.)
•
•
•
•
•
•
•
•
A
B
C
D
E
F
G
H
A
(5)5
(7)7
(10)10
(9)9
(27)40
(10)12
(0)3 (1)3
(12)12
(0)25
(18)25
(5)5
(3)4
(5)5
(0)3
4.3.4. Maximum ﬂow in a network with lower bounds. When the lower
bounds equal 0, we have an ordinary network, and the ordinary Ford-
Fulkerson labeling algorithm begins with the feasible 0 ﬂow. In a network
with lower bound l(uv) on the ﬂow in each edge uv (and upper bound c(uv)),
the labeling algorithm generalizes when we are given a feasible ﬂow.
We seek an augmenting path to obtain a ﬂow of larger value. In the
statement of the algorithm, we still use the same deﬁnition of excess capac-
ity when exploring vw from v. For an edge uv entering v, the requirement
for reducing ﬂow along uv to extend the potential augmenting path to u is
“excess ﬂow”: f (uv) > l(uv). Under either condition, we place the other
endpoint of the edge involving v in the set R of “reached vertices”. If we
reach the sink, we have an augmenting path, and we let ε be the mini-
mum value of the excess capacities (c(uv) −f (uv)) along the forward edges
in the path and the excess ﬂows ( f (vu) −l(vu)) along the backward edges
in the path. We adjust the values of f along the path by ε (up for forward
edges, down for backward edges), again obtaining a feasible ﬂow with value
ε larger than f .
If we do not reach the sink after searching from all vertices of R,
then the ﬁnal searched set S provides a source/sink cut [S, S] that proves
there is no larger feasible ﬂow. Proving this needs a more general def-
inition of cut capacity.
The capacity of a source/sink partition (S, S) is
P
vw∈[S,S] c(vw) −P
uv∈[S,S] l(uv). This is an upper bound on the net ﬂow
from S to S. Termination without reaching the sink in the algorithm above
requires that the ﬂow equals c(vw) whenever vw ∈[S, S] and equals l(uv)
whenever uv ∈[S, S]. Hence the net ﬂow across this cut equals the gener-
alized capacity of the cut.
The conservation constraints force the value of a ﬂow f to equal the
net ﬂow across any source/sink cut. Thus the value of the ﬁnal ﬂow equals
the generalized capacity of the resulting cut. Since edge cut establishes
an upper bound on the value of each feasible ﬂow, this equality shows that
both the ﬂow and the cut are optimal.
4.3.5. Menger for vertices in digraphs, from Ford-Fulkerson. Consider a di-
graph G containing vertices x, y, with xy /∈E(G). As usual, the deﬁnitions
of κ(x, y) and λ(x, y) yield κ(x, y) ≥λ(x, y) (weak duality), so the problem
is to use the Ford-Fulkerson theorem to prove the opposite inequality. We
want to design a suitable network G′ so that
λ(x, y) ≥max val f = min cap(S, T ) ≥κ(x, y).
In designing a suitable network G′, we want to obtain pairwise
internally-disjoint x, y-paths in G from units of ﬂow in G′. Thus we have
the problem of limiting the total ﬂow through a vertex to 1. Since we can
only limit ﬂow via edge capacities, we expand vertex v into two vertices v−
and v+ joined by an edge v−v+ of capacity 1 (for v /∈{x, y}). Call these the
intra-vertex edges.

223
Chapter 4: Connectivity and Paths
Section 4.3: Network Flow Problems
224
To complete the network, v−inherits the edges entering v and v+ in-
herits those leaving v. More precisely, an edge uv in G becomes an edge
u+v−in G′ (we think of the source x as x+ and the sink y as y−. The net-
work also needs capacities on these edges. To simplify our later discussion
of the cut, we assign huge capacities to these edges. We may view this as
inﬁnite capacity; any integer larger than n(G) sufﬁces.
•
•
•
v
v−
v+
→
∞
∞
1
∞
∞
The equality is by the max-ﬂow min-cut theorem. Let k be the com-
mon optimal value for the ﬂow problem and the cut problem. For the ﬁrst
inequality, we convert a maximum ﬂow of value k into k pairwise internally-
disjoint x, y-paths in G; thus λ(x, y) ≥k. The integrality theorem breaks
the x, y-ﬂow into x, y-paths of unit ﬂow, and these correspond to x, y-paths
in G when we shrink the intra-vertex edges. Since each intra-vertex edge
has capacity is 1, each vertex of G appears in at most one such path.
For the ﬁnal inequality, we convert a minimum source/sink cut [S, T ]
of capacity k into k vertices in G that break all x, y-paths; these yields
κ(x, y) ≤k. If S = x ∪{v−: v ̸= x, y} and T = y ∪{v+: v ̸= x, y}, then
cap(S, T ) = n −2 < n(G). Thus no minimum capacity cut has an edge from
S to T that is not an intra-vertex edge (this is the reason for assigning the
other edges large capacity). As a result, the capacity of every minimum cut
equals the number of vertices v ∈V (G) such that the intra-vertex edge for v
belongs to [S, T ]. Since deleting the edges of the cut leaves no capacity from
S to T , these edges break all x, y-paths in G′, and thus the corresponding k
vertices form an x, y-separating set in G.
4.3.6. Menger for edge-disjoint paths in graphs, from Ford-Fulkerson. Con-
sider a graph G containing vertices x, y. The deﬁnitions of κ ′(x, y) and
λ′(x, y) yield κ′(x, y) ≥λ′(x, y) (weak duality), so the problem is to use
the Ford-Fulkerson theorem to prove the opposite inequality. We design a
suitable network G′ so that
λ′(x, y) ≥max val f = min cap(S, T ) ≥κ′(x, y).
In designing a suitable network G′ with source x and sink y, we want
to obtain pairwise edge-disjoint x, y-paths in G from units of ﬂow in G′.
An edge can be used in either direction. Thus we obtain G′ from G by
replacing each undirected edge uv with a pair of oppositely directed edges
with endpoints u and v, as suggested below. We give each capacity 1 to
each resulting edge.
•
•
•
•
u
v
→
u
v
The Integrality Theorem guarantees a maximum ﬂow from x to y in
which all values are integers. If this assigns nonzero ﬂow to two oppositely
directed edges, then it assigns 1 to each. Replacing these values with 0
preserves the conservation conditions and does not change the value of the
ﬂow. Hence we may assume that in our maximum ﬂow each edge from G
is used in at most one direction. Now the Integrality Theorem breaks the
ﬂow into units of ﬂow from x to y. These yield val f pairwise edge-disjoint
x, y-paths in G, thereby proving the ﬁrst part of the displayed inequality.
For any cut [S, T ] in G′ each edge of G between S and T is counted
exactly once, in the appropriate direction. Hence cap(S, T ) = |[S, T ]|. Since
[S, T ] is an edge cut, the last part of the displayed inequality also holds.
We have proved the needed inequality λ′(x, y) ≥κ′(x, y).
4.3.7. Menger’s Theorem for nonadjacent vertices in graphs: κ(x, y) =
λ(x, y).
Let x and y be vertices in a graph G.
An x, y-separating set
has a vertex of each path in a set of pairwise internally-disjoint x, y-paths,
so κ(x, y) ≥λ(x, y). It sufﬁces to show that some x, y-separating set and
some set of pairwise internally-disjoint x, y-paths have the same size.
Starting with G, ﬁrst replace each edge uv with two directed edges uv
and vu, as on the right below. Next, replace each vertex w outside {x, y}
with two vertices w−and w+ and an edge of unit capacity from w−to w+, as
on the left below; call these internal edges. Every edge that had the form
uv before this split now is replaced with the edge u+v−, having capacity
n(G). Let D be the resulting network, with source x and sink y. (We often
write “∞” as a capacity to mean a sufﬁciently large capacity to keep those
edges out of minimum cuts. Here n(G) is enough.)
•
•
•
v
v−
v+
→
n(G)
n(G)
1
n(G)
n(G)
•
•
•
•
u
v
→
u
v
By the Max-Flow Min-Cut Theorem, the maximum value of a feasible
ﬂow in D equals the minimum value of a source/sink cut in D. Let k be
the common value. We show that G has k pairwise internally disjoint x, y-
paths and has an x, y-separating set of size k.
By the Integrality Theorem, there is a ﬂow of value k that has integer
ﬂow on each edge. Since only the internal edge leaves v−, with capacity 1,
at most one edge into v−has nonzero ﬂow, and that ﬂow would be 1. Since
only the internal edge enters v+, with capacity 1, at most one edge leaving

225
Chapter 4: Connectivity and Paths
Section 4.3: Network Flow Problems
226
v+ has nonzero ﬂow, and that ﬂow would be 1. Hence the k units of ﬂow
transform back into k x, y-paths in G, and the restriction of capacity 1 on
v−v+ ensures that these paths are internally disjoint. (This includes the
observation that we cannot have one path use the edge from u to v and
another from v to u; one can see explicitly that the capacity of 1 on the
internal edges directly prevents this, as illustrated below.)
•
•
•
•
u−
1
u+
v−
1
v+
Since the capacity of every edge of the form v+w−is n(G), every
source/sink cut [S, T ] that has some such edge has capacity at least n(G).
On the other hand, the cut that has x and all internal vertices of the form
u−in S and has y−and all internal vertices of the form u+ in T has capac-
ity n(G)−2. Therefore, in every cut with minimum capacity the only edges
from S to T are edges of the form u−u+. If such a set of edges [S, T ] breaks
all x, y-paths in D, then {u ∈V (G): u−u+ ∈[S, T ]} is a set of k vertices in
G that breaks all x, y-paths in G.
4.3.8. Networks to model vertex capacities. Let G be a digraph with source
x, sink y, and vertex capacities l(v) for v ∈V (G). To ﬁnd maximum fea-
sible ﬂow from x to y in G, we deﬁne an ordinary network N and use the
maximum ﬂow labeling algorithm. For each v ∈V (G), create two vertices
v−, v+ in N, with an edge from v−to v+ having capacity l(v). For each
uv ∈E(G), create an edge u+v−∈E(N) with inﬁnite capacity.
Consider a maximum x+, y−-ﬂow in N, where x, y are the source and
sink of G. Contracting all edges of the form v−v+ in N transforms any
feasible ﬂow in N into a vertex-feasible ﬂow in G with the same value.
Similarly, any feasible ﬂow in the vertex-capacitated network G “expands”
into a feasible ﬂow in N with the same value. Therefore, the max ﬂow
algorithm in N solves the original problem.
4.3.9. Use of Network Flow to characterize connected graphs. Given a graph
G, form a digraph D by replacing each edge uv of G with the directed edges
uv and vu, and give each edge capacity 1. Then G has an x, y-path if and
only if the network D with source x and sink y has a ﬂow of value at least
1. By the Max Flow = Min Cut Theorem, this holds if and only every cut
S, T with x ∈S and y ∈T has capacity at least 1, i.e. an edge from S to T .
If all partitions S, T have such an edge in G, then for every choice of x and
y there is an x, y-path. If for every pair x, y there is a path, the to explore
the partition S, T we choose x ∈S and y ∈T , and then the corresponding
network problem guarantees that the desired edge exists.
4.3.10. K¨onig-Egerv´ary from Ford-Fulkerson. Let G be a bipartite graph
with bipartition X, Y. Construct a network N by adding a source s and
sink t, with edges of capacity 1 from s to each x ∈X and from each y ∈Y
to t. Orient each edge of G from X to Y in N, with inﬁnite capacity. By
the integrality theorem, there is a maximum ﬂow f with integer value at
each edge. The edges of capacity one then force the edges between X and Y
receiving nonzero ﬂow in f to be a matching. Furthermore, val ( f ) is the
number of these edges, since the conservation constraints require the ﬂow
along each such edge to extend by edges of capacity 1 from s and to t. We
have constructed a matching of size val ( f ), so α′(G) ≥val ( f ).
A minimum cut must have ﬁnite capacity, since [s, V (N) −s] is a cut
of ﬁnite capacity. Let [S, T ] be a minimum cut in N, and let X ′ = S ∩X and
Y ′ = T ∩Y. A cut of ﬁnite capacity has no edge of inﬁnite capacity from S to
T . Hence G has no edge from S ∩X to T ∩Y. This means that (X −S)∪(Y −
T ) is a set of vertices in G covering every edge of G. Furthermore, the cut
[S, T ] consist of the edges from s to X ∩T = X −S and from Y ∩S = Y −T
to t. The capacity of the cut is the number of these edges, which equals
|(X −S) ∪(Y −T )|. We have constructed a vertex cover of size ∩(S, T ), so
β(G) ≤∩(S, T ).
By the Max ﬂow-Min cut Theorem, we now have β(G) ≤∩(S, T ) =
val ( f ) ≤α′(G).
But α′(G) ≤β(G) in every graph, so equality holds
throughout, and we have α′(G) = β(G) for every bipartite graph G.
4.3.11. The Augmenting Path Algorithm for bipartite graphs (Algorithm
3.2.1) is a special case of the Ford-Fulkerson Labeling Algorithm. Call these
algorithms AP and FF, respectively.
Given an X, Y-bigraph G, construct a network N by directing each edge
of G from X to Y, adding vertices s and t with edges sx for all x ∈X and yt
for all y ∈Y, and making all capacities 1. A matching M in G determines
a ﬂow f in N by letting f (sx) = f (xy) = f (yt) = 1 if xy ∈M, and f be 0
on all other edges.
We run AP on a matching M and FF on the corresponding ﬂow f . AP
starts BFS from the unsaturated vertices U ⊆X. Similarly, FF starts by
adding U to the reached set {s}, since the sx arcs for x ∈U are exactly those
leaving s with ﬂow less than capacity.
Let W be the set of all y ∈Y adjacent to some x ∈U. AP next reaches
all of W. Similarly, FF adds W to R (since again the edges reaching them
have ﬂow less than capacity) and moves U to S. Next AP moves back to
X along edges of M. FF will do so also when searching from W, because
these are entering backward edges with ﬂow equal to capacity. Note that
FF cannot move forward to t since vertices of W are saturated by M, and
thus the edges from W to t have ﬂow equal to capacity.

227
Chapter 4: Connectivity and Paths
Section 4.3: Network Flow Problems
228
Iterating this argument shows that AP and FF continue to search the
same vertices and edges until one of two things happens. If AP terminates
by reaching an unsaturated vertex y ∈Y and returns an M-augmenting
path, then when FF searches y it ﬁnds that f (yt) = 0 and reaches t. It also
stops and returns the corresponding f -augmenting path.
If AP terminates without ﬁnding an augmenting path and instead re-
turns a minimal cover Q, then FF terminates at this time and returns
an s, t-cut [S, T ] with capacity |Q|. It sufﬁces to show that each v ∈G
contributes 0 to both |Q| and cap [S, T ] or contributes 1 to both.
Let F be the search forest created by AP. By what we have shown, the
corresponding tree F′ of potential f -augmenting paths for FF is F with s
attached as a root to the vertices of U. Consider v = x ∈X. If x ∈V (F),
then x ̸∈Q and x contributes 0 to |Q|. Since x ∈V (F′), also x ∈S. There is
no edge xy with y ∈Y ∩T , since if there were then FF would have entered
x from y. It follows that x contributes nothing to cap [S, T ].
If on the other hand x ̸∈V (F), then x ∈Q, and x contributes 1 to |Q|.
Also x ̸∈V (F′), so x ∈T . Hence the only arc from S to T ending at x is sx,
and x contributes 1 to cap [S, T ]. Similar considerations prove the claim
when v = y ∈Y.
4.3.12. Let [S, S] and [T, T ] be source/sink cuts in a network N.
a) cap(S ∪T, S ∪T ) + cap(S ∩T, S ∩T ) ≤cap([S, S]) + cap(T, T ). Con-
sider the contributions to the two new cuts, as suggested in the diagram
below. Let a, b, c, d, e, f, g be the total capacities of the edges in [S∩T, S∩T ],
[S ∩T, S ∩T ], [S ∩T , S ∩T ], [S ∩T, S ∩T ], [S ∩T, S ∩T ], [S ∩T , S ∩T ], and
[S ∩T, S ∩T ], respectively. We have
cap[S ∩T, S ∩T ] + cap[S ∪T, S ∪T ] = (a + b + e) + (c + d + e),
cap[S, S] + cap[T, T ] = (b + c + e + f ) + (a + d + e + g).
Hence the desired inequality holds.
b) If [S, S] and [T, T ] are minimum cuts, then [S ∪T, S ∪T ] and [S ∩
T, S ∩T ] are also minimum cuts, and no edge between S −T and T −S
has positive capacity. When [S, S] and [T, T ] are minimum cuts, we obtain
equality in the inequality of part (a). Neither summand on the left can
be smaller, so both must equal the minimum. As shown in part (a), the
difference between the two sides is f + g, which equals cap[S ∩T , S ∩T ] +
cap[S ∩T, S ∩T ]. Equality requires that the difference be 0, so no edge
between S −T and T −S has positive capacity.
•
x
•y
S ∩T
S ∩T
S ∩T
S ∩T
a
b
c
d
e
4.3.13. Modeling by network ﬂows. Several companies send delegates to
a meeting; the ith company sends mi delegates. The conference features
simultaneous networking groups; the jth group can accommodate up to n j
delegates. The organizers want to schedule all delegates into groups, but
delegates from the same company must be in different groups. The groups
need not all be ﬁlled.
a) Use of network ﬂow to test feasibility. Establish a network with a
source s, sink t, vertex xi for the ith company, and vertex yj for the jth
networking group. For each i, add an edge from s to xi with capacity mi.
For each j, add an edge from yj to t with capacity nj. For each i, j, add xi yj
with capacity 1.
With integer capacities, the integrality theorem guarantees that some
maximum ﬂow breaks into paths of unit capacity. All s, t-paths have the
form s, xi, yj, t and thus correspond to sending a delegate from company
i to group j. The capacity on sxi limits the ith company to mi delegates.
The capacity on yjt limits the jth group to nj delegates. The capacity on
xi yj ensures that only one delegate from company i attends group j. The
conditions of the problem are satisﬁable if and only if this network has a
ﬂow of value P mi. A ﬂow of that value assigns, for each i, mi delegates
from company i to distinct groups.
b) A necessary and sufﬁcient condition for successful construction is
k(q −l) + Pl
j=1 nj ≥Pk
i=1 mi for all 0 ≤k ≤p and 0 ≤l ≤q, where
m1 ≥· · · ≥m p and n1 ≤· · · ≤nq.
Proof 1 (network ﬂows). By the Max-ﬂow/min-cut Theorem, there is
a ﬂow of value P mi if and only if there is no cut of capacity less than
P mi. Let [S, T ] be a source/sink cut, with k = |S ∩{x1, . . . , xm}| and l =
|S ∩{y1, . . . , yn}|. The capacity of the cut is P
i: xi∈T mi +P
j: yj∈S nj +k(q −l).
The network has a ﬂow of value P mi if and only if this sum is at least
P mi for each cut [S, T ]. This will be true if and only if it is true when T
has the p −k companies with fewest participants and S has the l smallest
groups. That is,

229
Chapter 4: Connectivity and Paths
Section 4.3: Network Flow Problems
230
p
X
i=k+1
mi +
lX
j=1
nj + k(q −l) ≥
p
X
i=1
mi,
which is equivalent to the speciﬁed inequality.
Proof 2 (bigraphic lists). The assignment of delegates to groups can
be modeled by a bipartite graph. We may assume that P nj ≥P mi, since
this is necessary to accommodate all the delegates. Let t = P
j nj −P
i mi.
We add t phantom companies with one delegate each to absorb the excess
capacity in the groups. Now there is a feasible assignment of delegates if
and only if the pair (n, m) of lists is bigraphic, since each company sends at
most one delegate to each group.
Note ﬁrst that the given condition holds for all l if and only if it holds
when nl ≤k and nl+1 ≥k. The reason is that reducing l will cause terms
smaller than k to contribute k and increasing l will cause contribution ex-
ceeding k from terms that contributed k.
By the Gale–Ryser Theorem, (n, m) is bigraphic if and only if
Pq
i=1 min{ni, k} ≥Pk
j=1 mj for all 0 ≤k ≤p + t. For k > p, we gain 1
with each increase in k on the right and at least 1 on the left unless we
already have everything, so the inequality holds for all k if and only if it
holds for 0 ≤k ≤p. Since we have indexed n1, . . . , nq in increasing order,
the left side equals k(q −l) + Pl
j=1 nj when nl ≤k and nl+1 ≥k. Thus the
speciﬁed condition is equivalent to the condition in the Gale-Ryser Theo-
rem and is necessary and sufﬁcient for the existence of the bipartite graph
and the assignment of delegates.
4.3.14. A network ﬂow solution to choosing k/3 assistant professors, k/3 as-
sociate professors, and k/3 full professors, one to represent each department.
We design a maximum ﬂow problem with a node for each department, each
professor, and each professorial rank. Let unit edges be edges of capacity 1.
The source node s sends a unit edge to each departmental node. Each de-
partmental node sends an edge to each of its professors’ nodes; these may
have inﬁnite capacity. Each professorial node sends a unit edge to the node
for that professor’s rank. Finally, there is an edge of capacity k/3 from each
rank to the sink t.
Each unit of ﬂow selects a professor on the committee. The edges from
the source to the departments ensure that each department is represented
at most once. Since capacity one leaves each professor, the professor can
represent only one department. The capacities on the three edges into the
sink enforce balanced representation across ranks. The desired committee
exists if and only if the network has a feasible ﬂow of value k.
The network has a feasible ﬂow of value k if and only if every
source/sink cut has capacity at least k. Using edges with inﬁnite capacity
simpliﬁes the analysis of ﬁnite cuts; such cuts [S, T ] cannot have an edge
of inﬁnite capacity from S to T . Any capacity at least 1 on the edges from
a department to its professors yields the same feasible ﬂows.
4.3.15. Spanning trees and cuts. The value of a spanning tree T is the
minimum weight of its edges, and the cap from an edge cut [S, S] is the
maximum weight of its edges. Since every spanning tree contains an edge
from every cut, the value of a tree T is at most the cap from [S, S].
Let m be the minimum cap from edge cuts in a connected graph G; thus
every edge cut has an edge with weight at least m. Let H be the subgraph
of G consisting of all edges with weight at least m. Since H has an edge
from every edge cut in G, H is a spanning connected subgraph of G. Let
T be a spanning tree of H. Since every edge in H has weight at least m,
the minimum edge weight in T is at least m. Also T is a spanning tree of
G. Hence equality holds between maximum value of a spanning tree and
minimum cap from edge cuts.
4.3.16. If x is a vertex of maximum outdegree in a tournament G, then G
has a spanning directed tree rooted at x such that every vertex has distance
at most 2 from x and every vertex other than x has outdegree at most 2, as
sketched below.
•
•
•
•
•
•
•
•
•
•
•
x
We create a network with source x. We keep the edges of G from x
to N +(x) and edges from N +(x) to N −(x), and then we add a sink z and
edges from N −(x) to z. The edges leaving x have capacity 2, the edges from
N +(x) to N −(x) have inﬁnite capacity, and the edges from N −(x) to z have
capacity 1.
The Integrality Theorem yields an integer-valued maximum ﬂow con-
sisting of x, z-paths with unit ﬂow, arriving at z from distinct vertices of
N −(x). Since the capacity on edges out of x is 2, each successor of x is on at
most two such paths. Hence a ﬂow of value d−
G (x) yields the desired span-
ning tree, since successors of x belonging to none of the paths can be added
freely as leaves of the tree.
The Max ﬂow–Min cut Theorem guarantees that such a ﬂow exists if
we show that every cut has value at least d−
G (x). A cut of ﬁnite value has
no edge from N +(x) to N −(x). Consider a source/sink cut [S, T ], and let
T ′ = T ∩N −(x). Let Q be the set of vertices in N +(x) having successors in
T ∩N −(x); such vertices must also be in T . Let q = |Q| and t =
T ′. The
capacity of this cut is at least 2q + d−(x) −t.

231
Chapter 4: Connectivity and Paths
Section 4.3: Network Flow Problems
232
Every vertex in T ′ has as successors x and all of N +(x) −Q; a total of
d+(x)−q+1 vertices. Also, some vertex of T ′ has outdegree at least (t −1)/2
in the subtournament induced by T ′. Since x has maximum outdegree, we
thus have d+(x) −q + 1 + (t −1)/2 ≤d+(x). This yields 2q −t ≥1 when T ′
is nonempty. Hence every cut other than the trivial cut [S, T ] that isolates
z has capacity strictly greater than d−(x), and the desired ﬂow exists.
Comment: Because the nontrivial cuts have capacity strictly greater
than d−(x) in this argument, we still obtain a spanning tree of the desired
form even under the additional restricted that any one desired successor
of x be required to have outdegree at most 1.
4.3.17. There is no simple bipartite graph for which the vertices in each
partite set have degrees (5,4,4,2,1). In any bipartite graph, the ith vertex on
the side with degrees {pi} has at most min{pi, k} neighbors among any set
of k vertices on the other side. If we take the k largest degrees on the other
side, their incident edges must come from somewhere, so P min{pi, k} ≥
Pk
j=1 qj. The example given here violates this necessary condition when
k = 3, because 3 + 3 + 3 + 2 + 1 = 12 < 13 = 5 + 4 + 4.
4.3.18. Given lists r1, . . . ,rn and s1, . . . , sn, there is a digraph D with ver-
tices v1, . . . , vn such that each ordered pair occurs at most once as an edge
and d+(vi) = ri and d−(vi) = si for all i if and only if 6ri = 6sj and, for
1 ≤k ≤n, the sum Pn
i=1 min{ri, k} is at least the sum of the largest k values
in s1, . . . , sn.
We transform this question into that of realization of degree lists by a
simple bipartite graph. Splitting each vertex v into two vertices v−and v+
such that v−inherits edges leaving v and v+ inherits edges entering v turns
such a digraph into a simple bipartite graph with degree lists r1, . . . ,rn and
s1, . . . , sn for the partite sets.
Conversely, a simple bipartite graph with vertices u1, . . . , un and
w1, . . . , wn such that d(ui) = ri and d(wj) = sj becomes a digraph as de-
scribed if we orient each edge uiwj from ui to wj and then merge ui and wi
into vi for each i.
Thus the desired condition is the necessary and sufﬁcient condition for
r1, . . . ,rn and s1, . . . , sn to be bigraphic. The condition is the Gale–Ryser
condition, found in Theorem 4.3.18.
4.3.19. A consistent rounding of the data in the matrix A below appears in
matrix B. Every row permutation of B is a consistent rounding of A, as are
some matrices with larger total sum, so the answer is far from unique.
A =
 .55
.6
.6
.55
.65
.7
.6
.65
.7
!
B =
 1
1
0
0
0
1
0
0
1
!
4.3.20. Every 2-by-2 matrix can be consistently rounded. We need only
consider the fractional part of each entry. That is, we may assume that
entries are at least 0 and are less than 1. A consistent rounding is now
obtained by rounding each entry other than .5 to the nearest integer and,
for each entry equal to .5, rounding down when the sum of the indices is
odd and up when the sum of the indices is even. The resulting change in
a column or row total is strictly less than 1. Hence it cannot be moved far
enough to make the resulting total not be a rounding of the original total.
4.3.21. If every entry in an n-by-n matrix is strictly between 1/n and 1/(n −
1), then the possible consistent roundings are the 0, 1-matrices of order n
with one or two 1s in each row and column. Each entry in the rounding
must be 0 or 1. Each row and column sum in the original is larger than 1
and less than n/(n −1).
4.3.22. A network D with conservation constraints at every node has a fea-
sible circulation if and only if P
e∈[S,S] l(e) ≤P
e∈[S,S] u(e) for every S ⊆V (D).
We have lower and upper bounds l(e) and u(e) for the ﬂow f (e) on each
edges e. The conservation constraints require that the net ﬂow out of each
vertex is 0, and hence the net ﬂow across any cut is 0. Thus
P
e∈[S,S] l(e) ≤P
e∈[S,S] f (e) = P
e∈[S,S] f (e) ≤P
e∈[S,S] u(e),
and hence the condition is necessary.
For sufﬁciency, we convert the circulation problem into a transporta-
tion network as in Solution 4.3.20. Let b(v) = l−(v) −l+(v), where l−(v)
and l+(v) are the totals of the lower bounds on edges entering and depart-
ing v, respectively; note that P
v b(v) = 0. We require l(e) ≤f (e) ≤u(e) on
each edge e; we transform this to 0 ≤f ′(e) ≤c(e), where c(e) = u(e) −l(e).
Since the ﬂow on each edge is adjusted in passing between f and f ′, the
difference between the net out of v under these two functions is b(v). If b(v)
is positive, then f sends b(v) more into v than f ′ does when we alter f ′ by
adding l(e) on each edge e. Therefore, we want f ′ to produce net outﬂow
b(v) from v.
If b(v) ≥0, then we make v a source and set σ(v) = b(v); otherwise,
we make v a sink and set ∂(v) = −b(v). Since P b(v) = 0, the only way
to satisfy all the demands at the sinks is to use up all the supply at the
sources. If f ′ solves this transportation problem, then adding l(e) to f ′(e)
to obtain f (e) on each edge e will solve the circulation problem with net
outﬂow 0 at each node.
By Theorem 4.3.17, a transportation network with source set X and
sink set Y is feasible if for every set T of vertices, the capacity of edges

233
Chapter 4: Connectivity and Paths
Section 4.3: Network Flow Problems
234
entering T is at least ∂(Y ∩T ) −σ(X ∩T ); that is, the demand of T minus
the supply in T .
Given a set T of vertices, the total capacity on entering edges is
c(T , T ) = P
e∈[T ,T ] c(e) = P
e∈[T ,T ][u(e) −l(e)].
For the supplies and demands, we compute
∂(Y ∩T ) −σ(X ∩T ) =
X
v∈Y∩T
[l+(v) −l−(v)] −
X
v∈X∩T
[l−(v) −l+(v)]
=
X
v∈T
[l+(v) −l−(v)] =
X
e∈[T,T ]
l(e) −
X
e∈[T ,T ]
l(e)
The given condition P
e∈[S,S] l(e) ≤P
e∈[S,S] u(e) for every S ⊆V (D) now im-
plies that the condition for feasibility of the transportation problem holds.
Hence there is a feasible solution to the transportation problem, and we
showed earlier that such a solution produces a circulation in the original
problem.
4.3.23. A (k + l)-regular graph is (k,l)-orientable (it has an orientation in
which each in-degree is k or l) if and only if there is a partition X, Y of V (G)
such that for every S ⊆V (G),
(k −l)(|X ∩S| −|Y ∩S|) ≤
[S, S]
.
Note ﬁrst that the characterization implies that every (k,l)-orientable
with k > l is also (k −1,l + 1)-orientable, since (k −1) −(l + 1) ≤k −l; that
is, the condition becomes easier to fulﬁll.
Note also that when k = l the condition is always satisﬁed, and a con-
sistent orientation of an Eulerian circuit is an orientation with the desired
property. Hence we may assume that k > l.
Necessity. Given that G is (k,l)-orientable, let D be a suitable orien-
tation of G. Let X = {v ∈V (G): d−
D(v) = l} and Y = {v ∈V (G): d−
D(v) =
k}. For a given set S ⊆V (D), the total indegree of the vertices in S is
l |X ∩S| + k |Y ∩S|. The total outdegree in S is k |X ∩S| + l |Y ∩S|. Of the
total outdegree, the amount generated by edges within S is at most the
total outdegree minus the total indegree in S. Thus the left side of the dis-
played inequality is a lower bound on the number of edges in D that depart
from S. The right side is an upper bound on that quantity.
Sufﬁciency. We are given a partition X, Y of V (G) such that the dis-
played inequality holds for every S ⊆V (G). We create a transportation
problem in which a feasible ﬂow will provide the desired orientation. Re-
place each edge of G with a pair of opposing edges, each with unit capacity.
Let X be the set of sources, and let Y be the set of sink. Let each supply and
demand value be k −l. The given condition is now precisely the necessary
and sufﬁcient condition in Theorem 4.3.17 for the existence of a feasible
solution to the transportation problem.
Since such a feasible solution is found by network ﬂow methods, we
may assume from the Integrality Theorem that there is a feasible solution
in which the ﬂow on each edge is 0 or 1.
Also, we can cancel ﬂows in
opposing edges if they both equal 1. The edges that now have ﬂow 1 specify
an orientation of a subgraph of G. In this subgraph, d+(v) −d−(v) = k −l
for v ∈X, and d+(v) −d−(v) = l −k for v ∈Y.
The degree remaining at a vertex v is k + l −(d+(v) + d−(v)). Always
this value is even. A consistent orientation of an Eulerian circuit of each
component of the remaining graph completes the desired orientation of G.

235
Chapter 5: Coloring of Graphs
Section 5.1: Vertex Coloring and Upper Bounds
236
5.COLORING OF GRAPHS
5.1. VERTEX COLORING & UPPER BOUNDS
5.1.1. Clique number, independence number, and chromatic number of the
graph G below.
We have ω(G) = 3 (no triangle extends to a 4-clique),
α(G) = 2 (every nonadjacent pair dominates all other vertices), and χ(G) =
4 (a proper 3-coloring would give the top vertex the same color as the bot-
tom two, but they are adjacent). Since there are seven vertices χ(G) ≥
n(G)/α(G) yields χ(G) ≥4. The graph is color-critical; checking each edge
e shows that every χ(G −e) has a proper 3-coloring. By symmetry, there
are only four types of edges to check.
•
•
•
•
•
•
•
5.1.2. The chromatic number of a graph equals the maximum of the chro-
matic numbers of its components. Since there are no edges between compo-
nents, giving each component a proper coloring produces a proper coloring
of the full graph. On the other hand, every proper coloring of the full graph
must restrict to a proper coloring on each component.
5.1.3. The chromatic number of a graph is the maximum of the chromatic
number of its blocks. We use induction on the number of blocks in G. If
G has only one block, then the claim is immediate. Otherwise G is dis-
connected or has a cut-vertex v. In either case, we have subgraphs H1, H2
whose union is G, such that H1, H2 are disjoint (if G is disconnected) or
share only the vertex v (if v is a cut-vertex).
The blocks of G are precisely the blocks of H1 and H2. Each has fewer
blocks than G. Thus the induction hypothesis implies that χ(Hi) is the
maximum of the chromatic numbers of the blocks in Hi. To complete the
proof, it sufﬁces to show that χ(G) = max{χ(H1), χ(H2)}.
The lower bound holds because both H1 and H2 are subgraphs of G.
For the upper bound, assume by symmetry that χ(H1) ≥χ(H2). Starting
with an optimal coloring of H1, we can incorporate an optimal coloring of
H2 by switching a pair of color names to make the coloring agree at v (if G
is connected). This produces a proper coloring of G.
5.1.4. The 5-cycle is a graph G with a vertex v so that χ(G −v) < χ(G) and
χ(G −v) < χ(G). The 5-cycle is self-complementary and 3-chromatic, but
deleting any vertex from C5 (or C5) yields P4, which is 2-colorable.
5.1.5. Always χ(G + H) = max{χ(G), χ(H)} and χ(G ∨H) = χ(G)+χ(H).
A coloring is a proper coloring of G + H if and only if it restricts to a proper
coloring on each of {G, H}, so the number of distinct colors needed is the
maximum of χ(G) and χ(H).
In a proper coloring of G ∨H, the set of colors used on V (G) must be
disjoint from the set of colors used on V (H). On the other hand, proper
colorings of G and H that use disjoint sets of colors combine to form a
proper coloring of G ∨H, so the number of colors needed is the sum of the
numbers needed on G and H.
5.1.6. If χ(G) = ω(G) + 1, and H1 = G and Hk = Hk−1 ∨G for k > 1, then
χ(Hk) = ω(Hk)+k. The union of a clique in F and a clique in H is a clique in
F∨H; hence ω(F∨H) = ω(F)+ω(H). Since distinct colors must be used on
V (F) and V (H) in a proper coloring of F ∨H, also χ(F ∨H) = χ(F)+χ(H).
Now we can prove the claim by induction on k. For k = 1, we are given
χ(H1) = χ(G) = ω(G) + 1 = ω(H1) + 1. For k > 1, we compute
χ(Hk) = χ(Hk−1 ∨G) = χ(Hk−1 + χ(G) = ω(Hk−1 + (k −1) + ω(G) + 1
= ω(Hk−1 + ω(G) + k = ω(Hk) + k
5.1.7. The graph P4 is neither a complete graph nor an odd cycle but has
a vertex ordering relative to which greedy coloring uses 1(P4) + 1 colors.
Although P4 is bipartite, with maximum degree 2, coloring the endpoints
ﬁrst greedily with color 1 forces us to use colors 2 and 3 on the center.
5.1.8. Comparison of χ(G) ≤1 + 1(G) and χ(G) ≤1 + maxH⊆G δ(H). Let
H ′ be a subgraph of G for which the minimum degree attains its maximum
value. We have maxH⊆G δ(H) = δ(H ′) ≤1(H ′) ≤1(G). Hence the second
bound is always at least as good as the ﬁrst bound.
In order for equality to hold, we must have δ(H ′) = 1(H ′) = 1(G).
Hence H ′ is k-regular, where k = 1(G). This requires that no vertex of
H ′ has a neighbor outside H ′. Thus equality holds if and only if G has a
component that is 1(G)-regular.

237
Chapter 5: Coloring of Graphs
Section 5.1: Vertex Coloring and Upper Bounds
238
5.1.9. Optimal (equitable) colorings of K1,3
P3 and C5
C5. The edges in
the second ﬁgure wrap around to complete the 5-cycles in C5
C5.
•
•
•
•
•
•
0
1
0
0
1
0
•
•
•
•
•
•
1
0
1
0
1
0
•
•
•
•
•
2
0
1
2
0
•
•
•
•
•
1
2
0
1
2
•
•
•
•
•
0
1
2
0
1
•
•
•
•
•
2
0
1
2
0
•
•
•
•
•
1
2
0
1
2
5.1.10. The cartesian product graph G
H decomposes into a copies of H
and b copies of G, where n(G) = a and n(H) = b. By the deﬁnition of carte-
sian product, G
H has two types of edges: those whose vertices have the
same ﬁrst coordinate, and those whose vertices have the same second coor-
dinate. The edges joining vertices with a given value of the ﬁrst coordinate
form a copy of H, so the edges of the ﬁrst type form aH. Similarly, the
edges of the second type form bG, and the union is G
H.
5.1.11. Each graph below is isomorphic to C3
C3. We label the vertices
with {1, 2, 3}×{a, b, c} so that vertices are adjacent if and only if their labels
agree in one coordinate and differ in the other.
•
•
•
•
•
•
•
•
•
1a
2b
3c
2c
1c
1b
2b
3b
3a
•
•
•
•
•
•
•
•
•
1a
1b
1c
2c
2a
2b
3b
3c
3a
5.1.12. Every k-chromatic graph G has a proper k-coloring in which some
color class has α(G) vertices—FALSE. In the bipartite graph G below, every
proper 2-coloring has three vertices in each color class, but α(G) = 4.
•
•
•
•
•
•
0
0
1
0
1
1
5.1.13. If G = F ∪H, then χ(G) ≤χ(F)+χ(H)—FALSE. The complement
of K3,3 is 2K3. Hence we can express K6 as the union of K3,3 and 2K3.
However, χ(K6) = 6 > 5 = χ(K3,3) + χ(2K3).
5.1.14. For every graph G, χ(G) ≤n(G)−α(G)+1—TRUE. We can produce
a proper coloring by giving color 1 to a maximum independent set and
giving distinct colors other than 1 to the remaining n(G) −α(G) vertices.
5.1.15. It need not hold that χ(G) ≤1 + d, where d = 2e(G)/n(G) and G
is a connected graph. Form G by adding one edge joining a vertex of Kr
to an endpoint of Ps. The graph G is connected, and χ(G) = r. If s > r,
then the average vertex degree is less than (r + 1)/2. If also r > 2, then
r ≥(r + 3)/2 > 1 + d.
5.1.16. Every tournament has a spanning path. A n-vertex tournament D
is an orientation of G = Kn, which has chromatic number n. By the Gallai–
Roy Theorem, D has a path of length at least χ(G) −1, which equals n −1.
This is a spanning path.
5.1.17. Chromatic number by critical subgraphs. A graph with chromatic
number at least 5 has a 5-critical subgraph, which has minimum degree at
least 4. Since the graph below has only one vertex of degree at least 4, it
has no subgraph with minimum degree at least 4.
A graph with chromatic number at least 4 has a 4-critical subgraph,
which has minimum degree at least 3. Such a graph has at least 4 ver-
tices. Deleting the one vertex with degree less than 2 from the graph below
leaves only three vertices of degree at least 3. Hence there is no 4-critical
subgraph, and χ(G) ≤3.
•
•
•
•
•
•
5.1.18. the number of colors needed to label V (Kn) such that each color
class induces a subgraph with maximum degree at most k is ⌈n/k⌉. With
this many classes, we can partition the vertices into sets of size at most k.
5.1.19. A false argument for Brooks’ Theorem. “We use induction on n(G);
the statement holds when n(G) = 1. For the induction step, suppose that G
is not a complete graph or an odd cycle. Since κ(G) ≤δ(G), the graph G has
a separating set S of size at most 1(G). Let G1, . . . , Gm be the components
of G −S, and let Hi = G[V (Gi)∪S]. By the induction hypothesis, each Hi is

239
Chapter 5: Coloring of Graphs
Section 5.1: Vertex Coloring and Upper Bounds
240
1(G)-colorable. Permute the names of the colors used on these subgraphs
to agree on S. This yields a proper 1(G)-coloring of G.”
Since G[S] need not be a complete graph, it may not be possible to
make the colorings of H1, . . . , Hm agree on S. When x, y are nonadjacent
vertices in S, they may have the same color in all proper 1(G)-colorings of
Hi but have different colors in all proper 1(G)-colorings of Hj.
5.1.20. If the odd cycles in G are pairwise intersecting, then χ(G) ≤5.
Proof 1 (direct). If G has no odd cycle, then χ(G) ≤2, so we may
assume that G has an odd cycle. Let C be a shortest odd cycle in G. If χ(G−
V (C)) ≥3, then we have an odd cycle disjoint from C. Hence χ(G−V (C)) ≤
2.
Since C is a shortest odd cycle, it has no chords, and the subgraph
induced by C is 3-colorable. Thus we can combine a 2-coloring of G −V (C)
with a 3-coloring of C to obtain a 5-coloring of G.
Proof 2 (contrapositive). If χ(G) ≥6, consider an optimal coloring.
The subgraph induced by vertices colored 1,2,3 coloring must have an odd
cycle, else it would be bipartite and we could replace these three colors
by two. Similarly, the subgraph induced by vertices colored 4,5,6 in the
optimal coloring has an odd cycle, and these two odd cycles are disjoint.
5.1.21. If every edge of a graph G appears in at most one cycle, then every
block of G is an edge, a cycle, or an isolated vertex. A block B with at least
three vertices is 2-connected and has a cycle C. We show that B = C.
Proof 1. If B has an edge e not in C, then the properties of 2-connected
graphs imply that e and an edge e′ of C lie in a common cycle (Theorem
4.2.4). Now e′ lies in more than one cycle.
Proof 2. Every 2-connected graph has an ear decomposition. If B is
not a cycle, then adding the next ear completes two cycles sharing a path.
Proof 3. If B has a vertex x of degree at least 3, then consider u, v, w ∈
N(x). Since G −x is connected, it has a u, v-path and a v, w-path. These
complete two cycles containing the edge uv.
For such a graph G, χ(G) ≤3.
Proof 1 (structural property).
By Exercise 5.1.3, χ(G) equal the
largest chromatic number of its blocks. Here the blocks are edges or cycles
and have chromatic number at most 3.
Proof 2 (induction on the number of blocks). If G has one block, then
χ(G) ≤3 since G is a vertex, an edge, or a cycle. Otherwise, we decompose
G into G1 and G2 sharing a cut-vertex x of G. The blocks of G1 and G2
are the blocks of G. Using 3-colorings of G1 and G2 given by the induction
hypothesis, we can permute colors in G2 so the colorings agree at x.
Proof 3 (subdivisions).
Theorem 5.2.20 states that if G is not 3-
colorable, then G contains a subdivision of K4. Edges in such a subgraph
appear in more than one cycle.
5.1.22. The segment graph of a collection of lines in the plane with no three
intersecting at a point is 3-colorable. The vertices of G are the points of
intersection of a family of lines; the edges are the segments on the lines
joining two points of intersection.
Proof 1. By tilting the plane, we can ensure that no two vertices have
the same x-coordinate. On each line, a vertex v has at most one neighbor
with smaller x-coordinate. Thus each vertex has at most two earlier neigh-
bors when V (G) is indexed in increasing order of x-coordinates. Applying
the greedy algorithm to this ordering uses at most three colors.
Proof 2. If H ⊆G, the vertex of H with largest x-coordinate has de-
gree at most 2 in H, for the same reason as above; on each line through
that vertex it has at most one neighbor with smaller x-coordinate and
none with larger x-coordinate.
By the Szekeres–Wilf Theorem, χ(G) ≤
1 + maxH⊆G δ(H) ≤3.
The conﬁgurations below illustrate that the bound does not hold when
more than two lines are allowed to meet at a point. The conﬁguration on
the left has seven lines, of which four meet at a point. The conﬁguration
on the right has eight lines, without four meeting at a point. In each case
the resulting graph is 4-chromatic.
5.1.23. The chromatic number of the graph Gn,k obtained by joining each of
n points on a circle to the 2k points nearest to it is k +1 if k +1 divides n and
k + 2 otherwise, if n ≥k(k + 1). Every set of k + 1 consecutive points forms
a clique, so χ(Gn,k) ≥k +1. If there is a (k +1)-coloring, each string of k +1
points must get distinct colors. Hence the coloring without loss of gener-
ality reads 123 · · · k(k + 1)123 · · · k(k + 1)123 · · · in order around the circle,
since the new point must have the same color as the point just dropped
from the most recent clique to avoid introducing a new color. The color-
ing will be proper if and only if the last vertices have colors 123 · · · k(k + 1)
before starting over, so χ(Gn,k) = k + 1 if and only if k + 1 divides n.
If not, then one more color sufﬁces if n ≥k(k + 1). Suppose n = q(k +
1) + r, where 1 ≤r < k + 1. After q complete stretches of 123 · · · k(k + 1) in
the scheme suggested above there are r vertices remaining to be colored. If
q ≥r, then inserting color k + 2 after k + 1r times will swell the sequence
to ﬁll up all the vertices with a proper coloring. In other words, expressing
n as r(k + 2) + (q −r)(k + 1), we can use 123 · · · (k + 1) in order q −r times

241
Chapter 5: Coloring of Graphs
Section 5.1: Vertex Coloring and Upper Bounds
242
and then 123 · · · (k + 2) in order r times. If n ≥k(k + 1), then q ≥k ≥r, so
the construction works.
If n = k(k+1)−1, then χ(Gn,k) > k+2. If only k+2 colors are available,
then some color must be used k times, since (k −1)(k + 2) = k(k + 1) −2.
Following the n steps around the circle, the minimum separation between
consecutive appearances among the k appearances of this color is less than
k + 1, since the total distance is k(k + 1) −1. Since vertices at most k apart
are adjacent, this prohibits a proper (k + 2)-coloring.
5.1.24. If G is a 20-regular graph with 360 vertices spaced evenly around a
circle so that vertices separated by 1 or 2 angular degrees are nonadjacent
and vertices separated by 3, 4, 5 or 6 degrees are adjacent, then χ(G) ≤19.
We number the vertices 1 through 360 consecutively around the circle, and
show that the greedy coloring algorithm uses at most 19 colors with respect
to that order. Vertices 1, 2, 3 receive color 1, and vertices 4, 5, 6 receive
color 2. Each of vertices 1 through 356 has at most 18 of its predecessors
among its 20 neighbors, so color 20 will not have been assigned to any of
the ﬁrst 356 vertices.
Vertex 357 has 19 of its predecessors among its neighbors, but among
those, vertices 1, 2, 3 have the same color. Hence vertex 357 is assigned a
color 19 or lower, having at most 17 differently colored predecessors. Sim-
ilarly, vertex 358 has at most 18 differently colored predecessors (1, 2, 3
have the same color), 359 has at most 18 (2, 3 and 4, 5 are pairs with the
same color), and 360 has at most 18 (4, 5, 6 have the same color), so their
assigned colors are 19 or lower.
5.1.25. The unit-distance graph in the plane has chromatic number greater
than 3 and at most 7. For the lower bound, suppose the graph has a proper
3-coloring. Consider two equilateral triangles of side-length one that share
an edge. The corners not on the shared edge must have the same color.
The distance between these two points is
√
3. Hence in a proper 3-coloring,
any two points
√
3 apart must have the same color. If C is a circle of radius
√
3, every point on C must have the same color as the center. This cannot
be a proper coloring, since C contains two points that are distance 1 apart.
A 7-coloring can be obtained using regions in a tiling of the plane.
Consider a tiling by hexagons of diameter 1, where each hexagon has two
parallel horizontal edges and the hexagons lie in vertical columns. The in-
terior of each hexagon receives a single color, along with the top half of the
boundary (including the top two corners but not the middle two corners).
The rest of the boundary is colored as part of the top half of neighboring
hexagons. In a single region, the distance between any pair of points is
less than 1; we need only assign colors to regions so that no pair of regions
with the same color contain pairs of points at distance 1. This we achieve
by using colors 1,2,3,4,5,6,7 cyclically in order on the regions in a column,
with the region labeled 1 in a given column nestled between regions labeled
3 and 4 in the column to its left.
The closest points in two regions with the same color are opposite end-
points of a zig-zag of three edges in the tiling; the distance between these
is greater than one. (An 8-coloring can be obtained using a grid of squares
of diameter 1, with colors 1,2,3,4 on the odd columns and colors 5,6,7,8 on
the even columns, cyclically in order, where the pattern in the odd rows
repeats 1,5,3,7 and the pattern in the even rows repeats 2,6,4,8.)
5.1.26. Chromatic number of a special graph. Given ﬁnite sets S1, . . . , Sm,
let V (G) = S1 × · · · × Sm, and deﬁne E(G) by putting u ↔v if and only if u
and v differ in every coordinate.
The chromatic number is mini |Si|. Let k = mini |Si|. We may assume
that Si = {1, . . . , k}. We obtain a clique of size k by letting vi = (i, . . . , i) for
1 ≤i ≤k (when i ̸= j, vi and vj differ in every coordinate). Hence χ(G) ≥k.
To obtain a proper k-coloring, we color each vertex v with its value in
a coordinate j such that
Sj
 = k. The vertices having value i in coordinate
j form an independent set, so this is a proper k-coloring, and χ(G) ≤k.
5.1.27. The complement of the graph in Exercise 5.1.26 has chromatic num-
ber Qm
i=1 |Si| / mini |Si|. Nonadjacency means differing in every coordinate.
Let j be a coordinate such that
Sj
 = mini{|Si|}. The vertices with a
ﬁxed value in coordinate j form a clique of the speciﬁed size.
Let k =
Sj
. To obtain the desired coloring, we partition the vertices
into independent sets of size k. Each must have a vertex with each value
in coordinate j. The vertices with value 1 in coordinate j lie in different
independent sets; use the remainder of the name of each such vertex as
the name for its independent set. The ith vertex in this independent set
has value i in coordinate j. Its value in coordinate r is obtained by adding
i −1 (modulo |Sr|) to the value in coordinate r of the naming vertex.
To ﬁnd the name of the independent set containing a vertex v, we let
i be the value it has in coordinate j and subtract i −1 (modulo |Sr|) from
the value in the rth coordinate, for each r.
5.1.28. The trafﬁc signal controlled by two switches is really controlled by
one of the switches. Each switch can be set in n positions. For each setting
of the switches, the trafﬁc signal shows one of n possible colors. Whenever
the setting of both switches changes, the color changes.
Since the color changes when both coordinates change, assigning the
color that shows to the vector of positions yields a proper n-coloring of the
graph deﬁned in Exercise 5.1.26, where m = 2 and both sets have size n.
Since {(i, i): 1 ≤i ≤n} is a clique of size n, this is an optimal coloring.

243
Chapter 5: Coloring of Graphs
Section 5.1: Vertex Coloring and Upper Bounds
244
Proof 1 (characterization of maximum independent sets). The vertices
having value i in one coordinate form an independent set. This deﬁnes a
proper n-coloring. We claim that every proper n-coloring has this form, and
hence the color is controlled by the value in one coordinate. Every indepen-
dent set has size at most n, since n + 1 vertices cannot have distinct values
among the n possible values in the ﬁrst coordinate. In order to obtain an
n-coloring of the n2 vertices when each independent set has size at most n,
we must use n independent sets of size n.
We claim that every independent set of size n is ﬁxed in one coordinate.
Let S be an independent set in which distinct values r and s appear in the
ﬁrst coordinate. Since these vertices in S are nonadjacent, they must agree
in the second coordinate, so we now have (r, t), (s, t) ∈S. If S has some
vertex not having value t in the second coordinate, then its value in the
ﬁrst coordinate must equal both r and s, since it is nonadjacent to these two
vertices. This is impossible, so the vertices S must agree in one coordinate.
To partition V (G) into n independent sets of size n, the sets must be
parwise disjoint. Hence we cannot used one set ﬁxed in the ﬁrst coordinate
and another set ﬁxed in the second coordinate. Hence all the sets used in
the coloring are constant in the same coordinate, and the color is controlled
by the position in that coordinate.
Proof 2 (induction on n). The claim is trivial for n = 1. Let Gn be the
product graph. For the induction step, note that NGn((n, n)) induces Gn−1.
Also, the color n used on (n, n) cannot be used on that subgraph, so the
coloring of Gn restricts to a proper (n −1)-coloring on that subgraph. By
the induction hypothesis, it is determined by one coordinate. By symmetry,
we may assume that (i, j) has color i when i, j ∈[n −1].
Now (n, j) for 1 ≤j ≤n −1 is adjacent to vertices of the ﬁrst n −1
colors, so it has color n. Now (i, n) is adjacent to vertices of all n colors
except color i, so it has color i.
5.1.29. A 4-critical subgraph in a 4-chromatic graph.
The ﬁgure on the left illustrates a proper 4-coloring. On the right we
show a 4-critical subgraph. Verifying that this is 4-critical also proves the
lower bound to show that the full graph is 4-chromatic.
•
•
•
•
•
•
•
•
1
4
2
3
1
4
2
3
•
•
•
•
•
•
•
x
y
z
a
b
c
d
In any proper 3-coloring of K4 −e, the nonadjacent vertices have the
same color. Thus in a proper 3-coloring of the graph F on the right, y and
z have the same color as x, which is forbidden because they are adjacent.
4-criticality is easy to verify using symmetry; there are only four “types”
of edges. Thus the solution is completed by exhibiting proper 3-colorings
of F −yz, F −zb, F −ab, and F −ax. If we remove any edge of the outer
5-cycle, then we can 2-color its vertices and use the third color on the two
inner vertices. The analogous argument works for the inner 5-cycle. This
leaves only F −ab to consider, where we can obtain a proper 3-coloring by
giving all of {a, b, x, y} the same color.
5.1.30. The chromatic number of the shift graph Gn is ⌈lg n⌉. Here V (Gn) =
 [n]
2

and E(Gn) = {(i j, jk): i < j < k}. It sufﬁces to show that Gn is r-
colorable if and only if [r] has at least n distinct subsets.
Given a map f : V (G) →[r], deﬁne Tj = { f ( jk) : k > j}. The labeling
f is a proper coloring if and only if f (i j) /∈Tj for all i < j. In particular, if
f is proper, then Ti ̸= Tj for all i < j, and thus r must be large enough so
that [r] has n distinct subsets.
Conversely, if [r] has n distinct subsets, we index n such subsets so
that Aj ̸⊆Ai for j > i (start with n and work back, always choosing a
minimal set in the collection of subsets that remain). Now f can be deﬁned
by naming f (i j) for each i < j to be an element of Ai −Aj. This ensures
that i j and jk receive distinct colors when i < j < k.
5.1.31. A graph G is m-colorable if and only if α(G
Km) ≥n(G).
Proof 1 (direct construction). Let V (G) = {vi} and V (Km) = {1, . . . , m},
so the vertices of G
Km are {(vi, j): 1 ≤i ≤n, 1 ≤j ≤m}. If G is m-
colorable, let C1, . . . , Cm be the independent sets in a proper m-coloring of
G. Then {(v, j): v ∈Cj} is an independent set in G
Km of size n(G) (it
contains one copy of each vertex of G).
Conversely, if G
Km has an independent set S of size n(G), then S
can only contain one copy of each vertex of G (since (v, i) and (v, j) are
adjacent), and the elements of S whose pairs use a single vertex of Km
must be an independent set in G. Hence from S we obtain a covering of
V (G) by m independent sets.
Proof 2 (applying known inequalities).
If G is m-colorable, then
χ(G
Km) = max{χ(G), χ(Km)} = m. Because χ(H) ≥n(H)/α(H) for every
graph H, and n(G
Km) = n(G)m, we obtain α(G
Km) ≥n(G)m/m = n(G).
Conversely, α(G
Km) ≥n(G) yields α(G
Km) = n(G), since an in-
dependent set has at most one vertex in each copy of Km. The vertices of
a maximum independent set S have the form (v, i), where v ∈V (G) and
i ∈[m]. By the deﬁnition of cartesian product, adding 1 (modulo m) to the

245
Chapter 5: Coloring of Graphs
Section 5.1: Vertex Coloring and Upper Bounds
246
second coordinate in each vertex of S yields another independent set of size
n(G). Doing this m times yields m pairwise disjoint independent sets cov-
ering all the vertices of G
Km. Therefore, G
Km is m-colorable. Since G
is a subgraph of G
Km, also G is m-colorable.
5.1.32. A graph G is 2k-colorable if and only if G is the union of k bipartite
graphs. View the colors as binary k-tuples. If G has a proper 2k-coloring f ,
let Xi be the set of all v ∈V (G) such that the binary expansion of f (v) has a
0 in the ith coordinate, and let Yi = V (G)−Xi. Deﬁne a bipartite subgraph
Bi of G with bipartition Xi, Yi and edge set [Xi, Yi]. By construction, each
such graph is bipartite. For every edge e in G, the endpoints of e have
different colors in f , so their binary expansions differ in some coordinate,
and thus e appears in one of these subgraphs.
Conversely, suppose that G is the union of k bipartite graphs, with
Xi, Yi being the bipartition of the ith subgraph. We use binary k-tuples as
colors. Assign v the k-tuple that is 0 in the ith coordinate if v ∈Xi, or 1
if v ∈Yi. Since each edge is in one of the bipartite graphs, the k-tuples
assigned to its endpoints are distinct, and this is a proper 2k-coloring.
5.1.33. For each graph G, there is an ordering of V (G) where the greedy
algorithm uses only χ(G) colors. Consider an optimal coloring f . Number
the vertices of G as v1, . . . , vn as follows: start with the vertices of color 1
in f , then those of color 2, and so on. By induction on i, we prove that the
greedy algorithm assigns vi a color at most f (vi).
Certainly v1 gets color 1. For i > 1, the induction hypothesis says that
vj has received color at most f (vj), for every j < i. Furthermore, the only
such vertices vj with f (vj) = f (vi) are those in the same color class with vi
in the optimal coloring, and these are not adjacent to vi. Hence the colors
used on earlier neighbors of vi are in the set {1, . . . , f (vi) −1}, and the
algorithm assigns color at most f (vi) to vi.
5.1.34. There is a tree Tk with maximum degree k having a vertex ordering
such that the greedy algorithm uses k + 1 colors. There are at least three
ways to construct the same tree Tk and essentially the same ordering. In
each, we construct Tk by induction on k along with a vertex ordering such
that the last vertex has degree k and receives color k + 1 under the greedy
algorithm. In each, the tree K1 works as T0 when k = 0.
Construction 1. For k > 0, Tk consists of copies of T0, . . . , Tk−1, with
one additional vertex x joined to the vertex of maximum degree in each Ti.
By the induction hypothesis, each old vertex has degree at most k −1,
and the only one that attains degree k, along with x, is the vertex of max-
imum degree in Tk−1. The vertex ordering uses V (Ti), . . . , V (Tk−1) in order
and puts x last. The ordering within V (Ti) is the ordering guaranteed for it
by the induction hypothesis. The coloring of each Ti happens independently
according to the order for that subtree, because the only edge leaving the
copy of Ti goes to x. By the induction hypothesis, the neighbor of x in Ti,
which is the last vertex of Ti, gets color i + 1. Thus x has earlier neighbors
of colors 1, . . . , k and receives color k + 1.
Construction 2. Build two copies of Tk−1 (T ′ and then T ′′), with the
vertex orderings given by the induction hypothesis. Include in the induc-
tion hypothesis the statement that the last vertex has degree k −1 and
receives color k under the greedy coloring. When the last vertex x of T ′′
is created, make it also adjacent to the last vertex y of T ′. Hence x and y
have degree k in the resulting tree T .
When y is reached in the ordering, it receives color k, by the induction
hypothesis. For the same reason, x is adjacent in T to vertices that have
received colors 1, . . . , k −1 (in T ′′) and also to y. Hence x receives color
k + 1, as desired.
Construction 3. Given Tk−1 and its ordering, form Tk by appending
a leaf to each vertex. In the ordering, place all these leaves ﬁrst. These
form an independent set and receive color 1. After this independent set,
use the ordering for Tk−1 on the vertices in the copy of Tk−1. Since each of
these vertices already has a neighbor with color 1, the colors assigned are 1
higher than the colors assigned under the ordering of Tk−1. Also the degree
of each vertex is larger by 1. Hence this Tk has maximum degree k, and the
given ordering assigns color k + 1 to the last vertex.
Explicit Construction. The tree Tk can be described by letting the
vertices be {0, . . . , 2k −1}. Make i and j adjacent whenever i ≥2k −2r+1
and j = i + 2r for some r. This produces the same tree as above (it can be
proved by induction on k that it is the same tree as in Construction 3), and
the vertex ordering that puts color k + 1 on 2k −1 is 0 . . . , 2k −1.
5.1.35. In a P4-free graph, every greedy coloring is optimal. Consider an
ordering v1, . . . , vn, and suppose that greedy coloring with respect to this
ordering uses k colors. Let i be the smallest integer such that G has a clique
consisting of vertices assigned colors i through k in this coloring. Proving
that i = 1 yields a k-clique in G, which proves that the coloring is optimal.
Let Q = {ui, . . . , uk} be such a clique. If i > 1, then by the greedy
procedure each element of Q has an earlier neighbor with color i −1. If
some such vertex were adjacent to all of Q, then we could reduce i. Let
x be a vertex with color i −1 that is adjacent to the most vertices of Q.
Let z be a nonneighbor of x in Q.
Let w be a neighbor of z with color
i −1.
By the choice of x, w is not adjacent to all neighbors of x in Q;
choose y ∈(N(x) ∩Q) −N(w). Since x and w have the same color, they
are nonadjacent. Now x, y, z, w induces P4. The contradiction implies that
i = 1.

247
Chapter 5: Coloring of Graphs
Section 5.1: Vertex Coloring and Upper Bounds
248
5.1.36. The ordering σ that minimizes the greedy coloring bound f (σ) =
1+maxi dGi(xi) is the “smallest-last” ordering σ ∗in which, for i from n down
to 1, xi is chosen to be a vertex of minimum degree in Gi. Furthermore,
f (σ ∗) = 1 + maxH⊆G δ(H). Let H ∗be a subgraph of G maximizing δ(H).
For a vertex ordering σ, let i be the position in σ where the last vertex of
H ∗is included. We have dGi(xi) ≥δ(H ∗), and thus f (σ) ≥1 + δ(H ∗) =
1 + maxH⊆G δ(H).
When greedy coloring is run with respect to σ ∗, each vi is a vertex of
minimum degree in Gi. Thus f (σ ∗) = 1 + maxi δ(Gi) ≤1 + maxH⊆G δ(H).
By the ﬁrst paragraph, equality holds.
5.1.37.
The vertices of a simple graph G can be partitioned into 1 +
maxH⊆G δ(H)/r classes such that the subgraph induced by the each class
has a vertex of degree less than r. Let vn be a vertex of minimum degree in
G, and for i < n let vi be a vertex of minimum degree in G −{vi+1, . . . , vn}.
Place the vertices v1, . . . , vn in order into the partition. Place vi into the
least-indexed set in which it has fewer than r neighbors already placed.
This produces a partition of the desired form. Let k = maxH⊆G δ(H). Since
the degree of vi in the subgraph induced by v1, . . . , vi is at most k, vi has r
neighbors each in at most k/r classes, and therefore 1 + k classes sufﬁce.
5.1.38. If H is bipartite, then χ(H) = ω(H). If H has isolated vertices,
then in H they increase the clique number, and we may color them with
extra colors. Hence we may assume that H has no isolated vertices.
Proof 1 (min-max relations). Because every independent set induces
a clique in the complement and vice versa, we have ω(H) = α(H). Also
χ(H) is the number of cliques in H needed to cover V (H). If H is bipartite,
then these cliques must be edges. Hence for a bipartite graph H with no
isolated vertices, we have χ(H) = β′(H) = α(H) = ω(H), using K¨onig’s
Theorem that β′(H) = α(H) in a bipartite graph with no isolated vertices.
We could also argue that each color in a proper coloring of H is used
once or twice, since α(H) = 2. If k colors are used twice, then k +(n −2k) =
n −k colors are used. The colors used twice color the edges of a matching
in H, so χ(H) = n −α′(H) = β′(H) as before.
Proof 2 (construction). Let T be a maximum independent set in H,
and let A = X ∩T and B = Y ∩T , where H is an X, Y-bigraph. It sufﬁces to
ﬁnd a matching of Y −B into A and a matching of X −A into B, because the
edges of the matching disappear in H, and this yields a covering of V (H)
using |T | independent sets of sizes 1 and 2. To show that the matching
exists, consider any S ⊆Y −B (the same argument works for X −A).
Because A −N(S) ∪S ∪B is a independent set and A ∪B is a maximum
independent set, we have |N(S)| ≥|S|, which by Hall’s Theorem guarantees
the desired matching.
5.1.39. Every k-chromatic graph has at least
 k
2

edges.
Proof 1. Consider a k-coloring of a k-chromatic G. If e(G) <
 k
2

, then
for some pair i, j of colors, no edge has colors i and j. Thus the vertices
with colors i and j form a single independent set, and V (G) is covered by
k −1 independent sets.
Proof 2. A k-chromatic graph G contains a k-critical subgraph G′. A
k-critical graph has minimum degree at least k −1, and since G′ requires
k colors it has at least k vertices. Hence
e(G) ≥e(G′) ≥n(G′)δ(G′)/2 ≥k(k −1)/2 =
 k
2

.
If G is the union of m cliques of order m, then χ(G) ≤1 + m
√
m −1.
The construction of G implies e(G) ≤m
 m
2

. If χ(G) = k, then
 k
2

≤m
 m
2

, or
k2 −k −m2(m −1) ≤0. Using the quadratic formula and
√
x + 1 < √x + 1
(for x > 0), we have
k ≤1
2(1 +
p
1 + 4m2(m −1)) < 1
2(2 +
p
4m2(m −1) = 1 + m√(m −1).
5.1.40. χ(G) · χ(G) ≥n(G). If a proper coloring partitions n vertices into
k color classes, there must be at least n/k vertices in some class, by the pi-
geonhole principle. These vertices form a clique in the complement, which
forces χ(G) ≥n/k. Hence χ(G) ≥n/χ(G), or χ(G) · χ(G) ≥n.
χ(G) + χ(G) ≥2√n(G). Two numbers with a ﬁxed product x have
smallest sum when they are equal; then their sum is 2√x. Hence the ﬁrst
inequality implies this bound.
For n = m2, the bound is achieved by G = mKm, a disjoint union of √n
cliques of size √n. Since the complement is a complete √n-partite graph,
both graphs have chromatic number √n.
5.1.41. χ(G) + χ(G) ≤n(G) + 1 for every graph G.
Proof 1 (induction on n(G)). The inequality holds (with equality) if
n = 1. For n > 1, choose v ∈V (G), and let G′ = G −v. By the induction
hypothesis, χ(G′) + χ(G′) ≤n.
When we replace v to obtain G and G,
each chromatic number increases by at most 1. We have the desired bound
unless they both increase.
If both increase, then v must have at least χ(G′) neighbors in G (else
we could augment a proper coloring of G′ to include v) and similarly at
least χ(G′) neighbors in G. Since v has altogether n −1 neighbors in G and
G, we conclude that in this case χ(G′) + χ(G′) ≤n −1, and adding 2 again
yields the desired bound χ(G) + χ(G) ≤n + 1.
Proof 2 (greedy coloring bound). When the vertices are colored greed-
ily in nonincreasing order of degree, the color used on the ith vertex is at
most min{di +1, i}. Let k be the index where the maximum of min{di +1, i}

249
Chapter 5: Coloring of Graphs
Section 5.1: Vertex Coloring and Upper Bounds
250
is achieved, so that di + 1 ≤k for i ≥k and di + 1 > k for i < k. Greedy
coloring yields χ(G) ≤k.
Let d′
j denote the jth largest vertex degree in G. Since d′
j = n−1−dn−j,
we have d′
j < n −k for n −j < k and d′
j ≥n −k for n −j ≥k. This becomes
d′
j ≤n −k for j ≥n −k + 1 and d′
j > n −k for j < n −k + 1. Therefore
maxj min{d′
j + 1, j} = n −k + 1, so χ(G) + χ(G) ≤k + (n −k + 1) = n + 1.
Proof 3 (degeneracy). By the Szekeres–Wilf Theorem, it sufﬁces to
show that maxH⊆G δ(H) + maxH⊆G δ(H) ≤n −1. Let H1 and H2 be sub-
graphs of G and G achieving the maximums. Let ki = δ(Hi). Note that
n(Hi) ≥ki +1. If k1 +k2 ≥n, then H1 and H2 have a common vertex v. Now
v must have at least ki neighbors in Hi, for each i, but only n −1 neighbors
are available in total.
5.1.42. Analysis of the ratio of χ(G) to n(G)/α(G).
a) χ(G) · χ(G) ≤(n(G) + 1)2/4, and the ratio of χ(G) to (n + 1)/α(G) is
at most (n + 1)/4. Two numbers with a ﬁxed sum x have largest product
when they are equal, in which case their product is x 2/4. Hence the previ-
ous exercise implies this bound. The ratio of χ(G) to (n + 1)/α(G) equals
χ(G)α(G)/(n + 1).
Since α(G) = ω(G), we have χ(G) ≥α(G).
Hence
χ(G)α(G)/(n + 1) ≤χ(G) · χ(G)/(n + 1) ≤(n + 1)/4.
b) Construction for equality when n is odd.
Let G be the join of a
clique of order (n −1)/2 and a independent set of order (n + 1)/2. Since
the independent set can receive a single color and G has cliques of order
(n + 1)/2, χ(G) = (n + 1)/2. Also α(G) = (n + 1)/2, and equality holds in
the bound χ(G)χ(G) ≤(n + 1)2/4.
5.1.43. Paths and chromatic number in digraphs.
a) χ(F ∪H) ≤χ(F)χ(H).
Let G = F ∪H.
We may assume that
V (F) = V (H), because otherwise we can add vertices in exactly one of
these digraphs as isolated vertices in the other without affecting any of the
chromatic numbers. The chromatic number of a digraph is taken to be the
same as the chromatic number of the underlying undirected graph.
Proof 1 (producing a coloring)
Assign to each vertex of G the “color” that is the pair of colors it gets
in optimal colorings of F and H. Since every edge of G comes from F or H,
no pair of adjacent vertices in G get the same color pair. Since there are
χ(F)χ(H) possible pairs, we have a proper χ(F)χ(H)-coloring of G.
Proof 2 (covering by independent sets) Let U1, . . . , Ur be the color
classes in an optimal coloring of F, and let W1, . . . , Ws be the color classes
in an optimal coloring of H. Each vertex belongs to exactly one class in
each graph, so it belongs to Ui ∩Wj for exactly one pair (i, j). Furthermore,
Ui ∩Wj is an independent set in G, since it is independent in both F and H.
Now the sets of the form Ui ∩Wj for 1 ≤i ≤r = χ(F) and 1 ≤j ≤s = χ(H)
partition V (G) into the desired number of independent sets.
b) If D is an orientation of G, and χ(G) > rs, and each v ∈V (G) is
assigned a real number f (v), then D has a path u0, . . . , ur with f (u0) ≤
· · · ≤f (ur) or a path v0, . . . , vs with f (v0) > · · · > f (vs). Obtain from D two
digraphs F and H deﬁned as follows. Given the edge xy in D, put xy in F
if f (x) ≤f (y), and put xy in H if f (x) > f (y). If D has no nondecreasing
path of length r and no decreasing path of length s, then F has no path of
length r and H has no path of length s. By the Gallai–Roy Theorem, this
implies χ(F) ≤r and χ(H) ≤s. By part (a), we have χ(G) ≤rs, where
G = F ∪H, but this contradicts the hypothesis on G. Hence one of the
speciﬁed long paths exists.
c) Every sequence of rs + 1 distinct real numbers has an increasing
subsequence of size r + 1 or a decreasing subsequence of size s + 1. Let D
be the tournament with vertices v1, . . . , vrs+1 and vi →vj if i > j, and let
f (vi) be the ith value in the sequence σ. Every path in D corresponds to
a subsequence of σ, where the vertex labels are the values in σ. Because
χ(D) = rs + 1, part (b) guarantees an increasing path with r + 1 vertices
or a decreasing path with s + 1 vertices.
5.1.44. Minty’s Theorem. Given an acyclic orientation D of a connected
graph G, let r(D) = maxC ⌈a/b⌉, where a counts the edges of C that are
forward in D and b counts those that are backward in D. Fix a vertex
x ∈V (G), and let W be a walk from x in G. Let g(W) = a −b·r(D), where a
counts the steps along W followed forward in D and b counts those followed
backward in D. For y ∈V (G), let g(y) = max{g(W): W is an x, y-walk}.
a) g(y) is ﬁnite and thus well-deﬁned, and G is 1 + r(D)-colorable.
By the deﬁnition of r, every cycle with a forward edges has at least ra
backward edges. Hence traversing a cycle makes no positive contribution
to g(W), and g(y) = g(W) for some x, y-path W. Thus there are only ﬁnitely
many paths to consider, and g(y) is well-deﬁned.
To obtain a proper coloring of G, let the color of y be the congruence
class of g(y) modulo 1 + r(D). If u →v in D, then g(v) ≥g(u) + 1, since
uv can be appended to an x, u-walk. On the other hand g(u) ≥g(v) −r(D),
since vu can be appended to an x, v-walk. Thus g(u)+1 ≤g(v) ≤g(u)+r(D)
when u and v are adjacent in G, which means that g(u) and g(v) do not lie
in the same congruence class modulo r(D) + 1.
b) χ(G) = minD∈D 1 + r(D), where D is the set of acyclic orientations
of G. The upper bound follows immediately from part (a). For the lower
bound, we present an acyclic orientation D such that r(D) ≤χ(G) −1.
Given an optimal coloring f with colors 1, . . . , χ(G), orient each edge xy
in the direction of the vertex with the larger color. Since colors increase

251
Chapter 5: Coloring of Graphs
Section 5.1: Vertex Coloring and Upper Bounds
252
strictly along every path, the orientation is acyclic and has maximum path
length at most χ(G) −1.
5.1.45. Gallai-Roy Theorem from Minty’s Theorem.
We ﬁrst prove that
1 +l(D) is minimized by an acyclic orientation, to which we can then apply
Minty’s Theorem. If D is an arbitrary orientation, let D′ be a maximal
acyclic subgraph of D. Let xy be an edge of D −D′. Since adding xy to D′
creates a cycle, D′ contains a y, x-path.
Let D∗be the orientation of G obtained from D by reversing the ori-
entation on each edge of D −D′. If D∗contains a cycle C, then for each
reversed edge yx on C corresponding to an edge xy of D −D′, we replace
yx with a y, x-path that exists in D′. The result is a closed (directed) walk
in D′. This yields a cycle in D′, because a shortest closed walk in a digraph
that has a closed walk is a cycle. Since by construction D′ is acyclic, we
conclude that D∗is acyclic.
We also claim that l(D∗) ≤l(D′). Let P be a u, v-path in D∗; some
edges of P may have opposite orientation in D and D∗. For such an edge
yx ∈E(P), there is a y, x-path in D′. When we replace all such edges of
D∗−D in P by paths in D′, we obtain a u, v-walk in D′. This must in fact
be a u, v-path in D′, because D′ is acyclic. Finally, the path we have found
in D′ is at least as long as P, because we replaced each edge of P not in D′
with a nontrivial path in D′.
Since D′ ⊆D, also l(D′) ≤l(D), so l(D∗) ≤l(D), and maximum path
length is minimized over all orientations by an acyclic orientation.
With D∗an acyclic orientation minimizing the maximum path length,
Minty’s Theorem yields χ(G) ≤1 + r(D∗), where r(D∗) is the ﬂoor of the
maximum ratio of forward edges of D∗to backward edges of D∗when
traversing a cycle of G. If a cycle of G achieving the maximum has k back-
ward edges, then it has at least kr(D∗) forward edges, and by the pigeonhole
principle it has r(D∗) consecutive forward edges. Hence l(D∗) ≥r(D∗), and
we obtain the desired inequality χ(G) ≤1 + r(D∗) ≤1 + l(D∗) ≤1 + l(D),
where D is any orientation.
5.1.46. 4-regular triangle-free 4-chromatic graphs. The graph on the left is
isomorphic to the graph in the middle and properly 4-colored on the right.
•
•
•
•
•
8
11
10
6
5
9
0
4
7
2•
•
•
•
•
•
•
1
3
•
•
•
•
•
•
•
•
•
•
•
•
0
1
2
3
4
5
6
7
8
9
10
11
•
•
•
•
•
•
•
•
•
•
•
•
a
b
c
b
c
a
b
a
c
a
d
b
We show that there is no proper 3-coloring. In a proper 3-coloring, the
largest independent set has size at least 4, and the remaing vertices induce
a bipartite subgraph. Thus it sufﬁces to show that deleting a maximal
independent set of size at least 4 always leaves a 3-cycle.
Rotational and reﬂectional symmetries partition the vertices into two
orbits. Using the labeling on the left, class 1 is {2, 5, 8, 11}, and class 2 is
the rest. The subgraph G1 induced by class 1 is a 4-cycle, with the maximal
independent sets consisting of opposite vertices. The subgraph G2 induced
by class 2 is an 8-cycle plus chords joining opposite vertices. The maximal
independent sets have size 3. By symmetries and ﬂips, all such sets are
equivalent by isomorphisms to {0, 7, 9}. This set is adjacent to all vertices
of Class 1 except 2 and 5, and we can add just one of those two.
Therefore, when we use two vertices of Class 1, we can add only two
from class 2. By symmetry, we may assume that 2 and 8 are used from
Class 1. This eliminates all vertices of Class 1 except {4, 6, 10, 0}. The
maximal additions are {4, 6} and {10, 0}, equivalent by symmetry.
Below we list in the ﬁrst column a representative for each type of max-
imal independent set of size at least 4. The second column gives an odd
cycle among the remaining vertices. Hence there is no proper 3-coloring.
{0, 7, 9, 2}
(10, 11, 8, 5, 6)
{0, 7, 9, 5}
(10, 11, 2, 3, 4)
{0, 2, 8, 10}
(3, 4, 5, 6, 7)
Another 4-chromatic graph. This graph is obtained from the graph
above by deleting the 0-6 and 3-9 edges and replacing them with a new
vertex z adjacent to 0, 3, 6, 9. Hence we obtain a proper 4-coloring from the
coloring of the previous graph by using color d on z.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
To show that there is no proper 3-coloring, consider the previous graph.
Vertices 0 and 6 together dominate all but 2, 3, 8, 9, which now induce 2K2.
By rotational symmetry, 3 and 9 also belong to no independent 5-set of old
vertices. Since the new graph has 13 vertices, 3-coloring requires a color
class of size 5, and this must include the new vertex z.

253
Chapter 5: Coloring of Graphs
Section 5.1: Vertex Coloring and Upper Bounds
254
The subgraph induced by the nonneighbors of z is shown on the right
above. The four vertices of degree 2 are not independent, so a vertex of de-
gree 3 is needed to form an independent 4-set. However, deleting a vertex
of degree 3 leaves 2K2, and only two additional vertices can be chosen.
We have shown that the 13-vertex graph has no independent 5-set, so
its chromatic number is 4.
5.1.47. Brooks’ Theorem and the following statement (*) are equivalent:
every (k −1)-regular k-critical graph is a complete graph or an odd cycle.
Suppose ﬁrst that Brooks’ Theorem is true. Let G be a (k −1)-regular k-
critical graph. Thus 1(G) = k −1 and χ(G) = k. By Brooks’ Theorem, G
must be a complete graph or an odd cycle. Hence (*) follows.
Conversely, assume (*): every (k −1)-regular k-critical graph is a com-
plete graph or an odd cycle. Let G be a connected graph with chromatic
number k. In order to prove Brooks’ Theorem, we must show that 1(G) ≥k
unless G is a complete graph or an odd cycle.
Let H be a k-critical subgraph of G. Since H is k-critical, δ(H) ≥k −1.
If 1(G) < k, then k −1 ≤δ(H) ≤1(H) ≤1(G) < k, which requires H
to be (k −1)-regular. By (*), H is a complete graph or an odd cycle. If
also 1(G) = k −1, then no vertex of H has an additional incident edge
in G. This means that H is a component of G, so it is all of G, since G
is connected. We have shown that if 1(G) < χ(G), then G is a complete
graph or an odd cycle. Hence (*) implies Brooks’ Theorem.
5.1.48. A simple graph G with maximum degree at most 3 and no compo-
nent isomorphic to K4 has a bipartite subgraph with at least e(G) −n(G)/3
edges. By Brooks’ Theorem, G is 3-colorable. In a proper 3-coloring, let red
be the smallest color class, with green and blue being the other two. By
the pigeonhole principle, there are at most n(G)/3 red vertices.
Each red vertex v has three neighbors. By the pigeonhole principle,
blue or green appears at most once in N(v). If blue appears at most once,
then we delete the edge from v to its blue neighbor (if it has one) and change
the color of v to blue. If green appears at most once, then we delete the
edge to the green neighbor (if it has one) and make v green.
This alteration deletes at most n(G)/3 edges and eliminates the color
red. Thus it produces the desired bipartite subgraph.
5.1.49. The Petersen graph can be 2-colored so that each color class induces
only isolated edges and vertices. Such a coloring appears on the front cover
of the text. One color class is an independent set of size 4. Deleting an
independent 4-set from the Petersen graph leaves 3K2.
5.1.50. Improvement of Brooks’ Theorem.
a) For any graph G and parameters D1, . . . , Dt such that P Di ≥
1(G) −t + 1, V (G) can be partitioned into t classes such that the sub-
graph Gi induced by the ith class has 1(Gi) ≤Di.
Proof 1 (extremality). Given a partition V1, . . . , Vt of V (G), let ei =
e(G[Vi]) for each i, and let di(x) = |N(x) ∩Vi|. We claim that a partition
minimizing f = P ei/Di has the desired property. If di(x) > Di for some
x ∈Vi, then |N(x) −Vi| ≤d(x) −Di ≤1(G) −Di ≤P
j̸=i(Dj + 1). Thus for
some j other than i, we have dj(x) ≤Dj. Moving x from Vi to Vj reduces f
by di(x)/Di −dj(x)/Dj, which is positive. Thus when f is minimized each
induced subgraph meets its degree bound.
Proof 2 (induction on t). For t = 2, we claim that the partition mini-
mizing D1e(G2)+ D2e(G1) satisﬁes the desired bounds. If not, then there is
a vertex x, say x ∈V (G1), such that dG1(x) > D1; x has at most D2−1 neigh-
bors in V (G2). Moving x to the other part gains less than D1D2 and loses
more than D2D1, which contradicts the optimality of the original partition.
For t > 2, let D = D1+· · · Dt−1+(t−2). We have D+Dt ≥1(G)−1, and
the hypothesis for 2 parameters guarantees a vertex partition where the
induced subgraphs have maximum degrees bounded by D and Dt. Since
D1 + · · · + Dt−1 = D −t + 2, the hypothesis for t −1 parameters yields the
rest of the desired partition.
b) (general case). If G contains no r-clique, where 4 ≤r ≤1(G) + 1,
then χ(G) ≤
 r−1
r (1(G) + 1)

. Let D1 = · · · = Dt−1 = r −1, and require
Dt ≥r −1 and P Di = 1(G)−t +1. Thus t = ⌊(1(G) + 1)/r⌋. By (a), V (G)
partitions into t classes such that 1(Gi) ≤Di. Since G has no r-clique,
Brooks’ Theorem implies χ(Gi) ≤Di. Coloring the subgraphs with disjoint
color sets, we have χ(G) ≤P χ(Gi) ≤P Di = 1(G) + 1 −t.
b) (special case). If G contains no K4 and 1(G) = 7, then χ(G) ≤6.
Letting t = 2 and D1 = D2 = 3, we have D1 + D2 = 1(G) −t + 1 Applying
part (a), we are guaranteed a partition of V (G) into two sets such that the
subgraph induced by each set has maximum degree at most 3. Since G has
no K4, Brooks’ Theorem guarantees that both subgraphs are 3-colorable.
Coloring the two subgraphs with disjoint color sets, we have χ(G) ≤6.
5.1.51. If G is a k-colorable graph, and P is a set of vertices in G such
that d(x, y) ≥4 whenever x, y ∈P, then every coloring of P with colors
from [k + 1] extends to a proper k + 1 coloring of G. Let c: P →[k + 1]
be the coloring on the precolored set P, and let f : V (G) →[k] be a proper
k-coloring of G. We deﬁne an (k + 1)-coloring g of G by
g(u) =
( c(u)
u ∈P
k + 1
u ∈N(v), v ∈P, and f (u) = c(v)
f (u)
otherwise
Since the neighbors of v ∈P having color c(v) under f must form an
independent set and vertices of P are separated by distance at least 4,

255
Chapter 5: Coloring of Graphs
Section 5.1: Vertex Coloring and Upper Bounds
256
{u: g(u) = r + 1} is independent. A color among the ﬁrst r is used only
on P or on vertices receiving that color under f . The latter type form an
independent set, and when a color is used on a vertex v ∈P, all neighbors
of P explicitly receive a color different from that. Hence each color class in
g is an independent set, and g is a proper coloring that extends c.
5.1.52. Every graph G can be ⌈(1(G) + 1)/j⌉-colored so that each color
class induces a subgraph having no j-edge-connected subgraph. A j-edge-
connected subgraph has minimum degree at least j. Hence it sufﬁces to
color V (G) so that when each vertex is assigned a color, it has fewer than j
neighbors among vertices already colored. In this way, no j-edge-connected
subgraph is ever completed within a color class.
Color vertices according to some order σ. When a vertex is reached, it
has at most 1(G) earlier neighbors. Since ⌈(1(G) + 1)/j⌉colors are avail-
able, by the pigeonhole principle some color has been used on fewer than j
earlier neighbors. We assign such a color to the new vertex.
No smaller number of classes sufﬁces if G is an j-regular j-edge-
connected graph or an n-clique with n ≡1 (mod j) (or an odd cycle when
j = 1). If G is a j-regular j-edge-connected graph, then two colors are
needed. If G = Kn with n ≡1 (mod j), then we can give each color to at
most j vertices, and thus ⌈n/j⌉colors are needed. If j = 1 and G is an odd
cycle, then 3 colors are needed. In each case, the needed number of colors
equals ⌈(1(G) + 1)/j⌉.
5.1.53. Relaxed colorings of the 2k-regular graph Gn,k of Exercise 5.1.23.
For k ≤4, we seek n such that there is a 2-coloring in which each color
class induces a subgraph with maximum degree at most k.
Of the 2k neighbors of a vertex v, at most half can have the same color
as v.
When n is even, alternating colors works, and when n is odd we
can insert one additional vertex with either color. This solution is trivial
because the problem was improperly stated: “at most k” should be “less
than k”. Say that a 2-coloring is good if each vertex has at most k −1
neighbors of its own color. We solve the intended problem.
If n is even and k is odd, then alternating the colors around C gives an
good 2-coloring of Gn,k, since each vertex has exactly (k −1)/2 neighbors
with its own color in each direction. More generally, let n be a multiple of
2 j, and 2-color Gn,k using runs of j consecutive vertices with the same color.
Suppose that k = q · 2 j + r, where j ≤r < 2 j. Consider the ith vertex in a
run. Following it, this vertex has ( j −i) + qj + [r −j −( j −i)] neighbors
of its own color; preceding it, this vertex has (i −1) + qj + [r −j −(i −1)]
neighbors of its own color. Altogether, then, every vertex has fewer than k
neighbors of its own color, since q(2 j)+2r −2 j = k +r −2 j < k. Thus there
is a good 2-coloring when n is a multiple of 2 j and j is a positive integer
such that the k is congruent modulo 2 j to a value in { j, . . . , 2 j −1}. For
k ∈{1, 3}, this permits all even n. For k = 2, it permits multiples of 4. For
k = 4, it permits multiples of 6 or 8. Let T denote this set of values of n.
When k ≤4, we show that the set T consists of all values of n that
permit good 2-colorings.
Consider a good 2-coloring of Gn,k for n not in
this set. Obviously there is no run of length at least k + 1 in the same
color; each vertex neighbors all others in a run of length k + 1. If there
is a run of length k, then since n is not a multiplie of 2k there is a run of
length k followed by a shorter run. Now the last vertex of the k-run has
k −1 neighbors of its own color in that run and another neighbor after the
subsequent run, which is forbidden.
Hence we may assume that all runs have length less than k. If they
all have the same length j, then n is a multiple of 2 j. If k = q · 2 j + r with
0 ≤r < j, then the last vertex of a run has qj neighbors of its own color
following it and qj −1+r +1 neighbors of its own color preceding it. These
sum to k, so such a coloring is not good.
Hence we may assume that the coloring has adjacent runs of different
sizes, each each less than k. For k ≤2, this is impossible. If the coloring
has a (k −1)-run A, then the absence of k-runs implies that the ﬁrst vertex
has of A has an earlier neighbor in its own color. Since it also has k −2
neighbors in A, the run following A must have length at least 2. Thus runs
of length k −1 are surrounded by runs of length at least 2. For k = 3, this
forbids runs of distinct length and therefore completes the proof.
Now consider k = 4. If the coloring has a 3-run, then the preceding ar-
gument and the requirement of having runs of different lengths allows us
to assume colors abbbaab in order on v0, . . . , v6. Now successively examin-
ing the neighborhoods of v3 and v4 allows us to conclude that f (v7) = a and
then f (v8) = b. Next the neighborhood of v6 leads us to f (v9) = f (v10) = a,
but now v7 has four neighbors of its own color.
The only remaining possibility is that the largest run has size 2. With
runs of different lengths, we may assume collors abbab on v0, . . . , v4. Since
v5 has a later neighbor of its own color, f (v5) = a. Since there is no 3-
run, v2 has two earlier neighbors of its own color b, and thus f (v6) =
a.
Since there is no 3-run, f (v7) = a.
Now v4 has three neighbors in
its own color, which forces f (v8) = a. We have produced the pattern of
f (v0), . . . , f (v4) on vertices v4, . . . , v8, with the colors exchanged. Hence
the pattern abba baab abba baab, continues. This is a good coloring, but it
requires n to be a multiple of 8, and these values of n are already in T .
Comment. West–Weaver [1994] conjectured that T contains all n for
which Gn,k has a good coloring is not valid for larger k. This was disproved
by Brad Friedman, who discovered other values of n with good colorings
for all larger k.

257
Chapter 5: Coloring of Graphs
Section 5.2: Structure of k­chromatic Graphs
258
5.1.54. Let f be a proper coloring of a graph G in which the colors are nat-
ural numbers. The color sum is P
v∈V (G) f (v). Minimizing the color sum
may require using more than χ(G) colors. In the tree below, for exam-
ple, the best proper 2-coloring has color sum 12, while there is a proper
3-coloring with color sum 11. Construct a sequence of trees in which the
kth tree Tk use k colors in a proper coloring that minimizes the color sum.
(Kubicka–Schwenk [1989])
•
•
•
•
•
•
•
•
1
2
2
2
2
1
1
1
•
•
•
•
•
•
•
•
3
2
1
1
1
1
1
1
5.1.55. Chromatic number is bounded by one plus longest odd cycle length.
a) If G is a 2-connected non-bipartite graph containing an even cycle
C, then there exist vertices x, y on C and an x, y-path P internally disjoint
from C such that dC(x, y) ̸= dP(x, y) (mod 2). Let C′ be an odd cycle in G.
Since G is 2-connected, G has a cycle containing an edge of C and an edge
of C′. Using edges of this and C′, we can form an odd cycle D containing
at least two vertices of C. Let x1, . . . , xt be the common vertices of C and
D, indexed in order of their appearance on D. Letting xt+1 = x1, we have
Pt
i=1 dD(xi, xi+1) ≡1 (mod 2), since D is an odd cycle. On the other hand,
since C is an even cycle, it has a bipartition, and dC(xi, xi+1) is even if xi and
xi+1 are on the same side of the bipartition of C, odd if they are on opposite
sides. Hence Pt
i=1 dC(xi, xi+1) ≡0 (mod 2). Therefore, for some value of i
we have dD(xi, xi+1) ̸≡dC(xi, xi+1), and we use this portion of D as P.
b) If δ(G) ≥2k and G has no odd cycle longer than 2k −1, then G has
a cycle of length at least 4k. Let P = x1, . . . , xt be a maximal path in G, so
N(x1) ⊆V (P). Let xr be the neighbor of x1 farthest along P; d(x1) ≥2k
implies r ≥2k + 1. By the odd cycle condition, r is even, and neither x2i+1
nor xr−2i+1 can belong to N(x1) if i ≥k. If {2i + 1: i ≥k} and {xr−2i+1: 2 ≥k}
are disjoint, then together with N(x1) we have at least r −2k + 2k = r
vertices with indices from 2 to r.
This is impossible, so we must have
2k + 1 ≤r −2k + 1, implying r ≥4k.
c) If G is a 2-connected graph having no odd cycle longer than 2k −1,
then χ(G) ≤2k. We use induction on n(G). For n(G) = 2, the claim holds
using k = 1. For the induction step, suppose n(G) = n > 2 and the claim
holds for graphs with fewer than n vertices. Since χ(G) is the maximum
chromatic number of its blocks, we may assume G is 2-connected. Suppose
the longest odd cycle in G has length 2k −1, but χ(G) > 2k.
For any
x ∈V (G), the induction hypothesis implies χ(G −x) ≤2k. Hence G is
vertex-(2k + 1)-critical, which implies δ(G) ≥2k. By part (b), G has a cycle
C of length at least 4k. By part (a), G has a path P joining two vertices x, y
of C such that P together with either x, y-path along C forms an odd cycle.
The sum of the lengths of these two odd cycles is at least 4k + 2. Hence
one of them has length at least 2k + 1, contradicting the hypothesis. The
contradiction yields χ(G) ≤2k.
5.2. STRUCTURE OF k­CHROMATIC GRAPHS
5.2.1. If χ(G −x −y) = χ(G) −2 for all pairs x, y of distinct vertices, then
G is a complete graph. If x ↮y, then a proper coloring of G −x −y can be
augmented with one new color on x and y to obtain a proper coloring of G.
This yields χ(G) ≤χ(G −x −y) + 1, so the given condition forces x ↔y
for all x, y ∈V (G).
5.2.2. A simple graph is a complete multipartite graph if and only if it has
no induced three-vertex subgraph with one edge. If a connected graph is not
a clique, then the shortest of all paths between nonadjacent pairs of ver-
tices has length two, and the three vertices of this path induce a subgraph
with exactly two edges. Hence each successive pair of the following state-
ments are equivalent: (1) G has no induced 3-vertex subgraph with one
edge. (2) G has no induced 3-vertex subgraph with two edges. (3) Every
component of G is a clique. (4) G is a complete multipartite graph.
5.2.3. The smallest k-critical graphs.
a) If x, y are vertices in a color-critical graph G, then N(x) ⊆N(y) is
impossible, and hence there is no k-critical graph with k + 1 vertices. If G
is k-critical, then G −x is (k −1)-colorable, but N(x) ⊆N(y) would allow
us to return x with the same color as y to obtain a (k −1)-coloring of G. If
n(G) = k + 1, then we have δ(G) < k since Kk+1 is not k-critical, and we
have δ(G) ≥k −1 by the properties of k-critical graphs. Hence δ(G) = k −1,
which implies that nonadjacent vertices x, y have the same set of neighbors
(the remaining k −1 vertices), which contradicts the statement just proved.
Hence there is no k-critical graph with k + 1 vertices.
b) χ(G ∨H) = χ(G) + χ(H), and G ∨H is color-critical if and only
if both G and H are color-critical, and hence there is a k-critical graph
with k + 2 vertices. Coloring G and H optimally from disjoint sets yields
a proper coloring of G ∨H, so χ(G ∨H) ≤χ(G) + χ(H). The colors used
on the subgraph of G ∨H arising from G must be disjoint from the colors
on the copy of H, since each vertex of the former is adjacent to each of the
latter; hence χ(G ∨H) ≥χ(G) + χ(H).
For criticality, consider an arbitrary edge xy ∈E(G ∨H).
If xy ∈
E(G), then (G ∨H) −xy = (G −xy) ∨H, and hence χ(G ∨H) −xy =

259
Chapter 5: Coloring of Graphs
Section 5.2: Structure of k­chromatic Graphs
260
χ(G ∨H) −1 if and only if χ(G −xy) = χ(G) −1. Similarly for xy ∈E(H).
Hence G ∨H being color-critical implies that G and H are color-critical.
For the converse, assume that G and H are color-critical. We have already
considered G ∨H −xy for xy ∈E(G) ∪E(H); we must also consider xy ∈
E(G ∨H) with x ∈V (G) and y ∈V (H). By the properties of color-critical
graphs, we know that G and H have optimal colorings in which x and y,
respectively, are the only vertices in their color classes. In G ∨H −xy, we
use these colorings but change the color of y to agree with x. This uses
χ(G) + χ(H) −1 colors.
Since C5 is 3-critical and Kk−3 is (k −3)-critical, we conclude that C5 ∨
Kk−3 is a k-critical graph with k + 2 vertices.
5.2.4. Blocks and coloring in a special graph. Let G be the graph with
vertex set {v0, . . . , v3n} deﬁned by vi ↔vj if and only if |i −j| ≤2 and i + j
is not divisible by 6.
a) The blocks of G. Because consecutive integers sum to a number that
is odd and hence not divisible by 6, the vertices v0, . . . , v3n form a path in
order. Edges of the form {vi, vi+2} are added when i is congruent to one of
{0, 1, 3, 4} modulo 6, but not when i is congrent to 2 or 5 modulo 6. Thus G
is the graph below, and there are n blocks. The blocks are the subgraphs
induced by {v3i−3, v3i−2, v3i−1, v3i} for 1 ≤i ≤n.
•
•
•
•
•
•
•
•
•
•
0
1
2
3
4
5
6
7
8
9
b) Adding the edge v0v3n to G creates a 4-critical graph. In a proper 3-
coloring of G, the induced kites force successive vertices whose indices are
multiples of 3 to have the same color. When the edge v0v3n is added to form
G′, the graph is no longer 3-colorable.
If an edge in the ith kite is deleted, then giving its endpoints the same
color permits properly 3-coloring the remainder of the subgraph induced by
{v3i−3, v3i−2, v3i−1, v3i} so that v3i−3 and v3i have different colors. Continuing
the proper 3-coloring in both directions gives v0 the color of v3i−3 and gives
v3n the color of v3i. Thus the edge v0v3n is also properly colored. We have
shown that for each edge e, the graph G′−e is 3-colorable, so G′ is 4-critical.
5.2.5. A subdivision of K4 in the Gr¨otzsch graph. The subgraph in bold
below is a subdivision of K4.
•
•
•
•
•
•
•
•
•
•
•
5.2.6. The minimum number of edges in a connected n-vertex graph with
chromatic number k is
 k
2

+ n −k. Equality holds for the graph obtained
by identifying a vertex of Kk with an endpoint of Pn−k+1. The desired lower
bound on e(G) when k = 2 is n −1 and holds trivially for connected graphs,
so we may assume that k ≥3.
Proof 1 (critical subgraph). Let G be a connected k-chromatic n-vertex
graph. Let H be a k-critical subgraph of G. If H has t vertices, then e(H) ≥
(k −1)t/2, since δ(H) ≥k −1. With H and the remaining n −t vertices of
G as n −t + 1 components, we must add at least n −t additional edges to
reduce the number of components to 1. Hence
e(G) ≥(k −1)t/2 + n −t = (k −3)t/2 + n.
Since n ≥t ≥k, this is minimized when t = k, yielding the desired value.
Proof 2 (induction on n). For n = k, the bound again is trivial. For
n > k, let G be a minimal connected k-chromatic n-vertex graph. By the
choice of G, deletion of any edge disconnects G or reduces k.
If G −e is disconnected for some e ∈E(G), then it has two components.
At least one of these must be k-chromatic, else we can recolor G with fewer
than k colors. Letting l be the number of vertices in a k-chromatic compo-
nent of G −e, the induction hypothesis yields
e(G) ≥
 k
2

+ l −k

+ 1 + (n −l −1) =
 k
2

+ n −k,
where the additional terms count e itself and the edges of a spanning tree
of the other component.
In the remaining case, χ(G −e) < k for all e ∈E(G). Hence G is
k-critical, which requires δ(G) ≥k −1. Hence
e(G) ≥n(k −1)/2 = n + n(k −3)/2 > n + k(k −3)/2 = n −k +
 k
2

.
5.2.7. In an optimal coloring of a graph, for each color there is a vertex of
that color that is adjacent to vertices of all other colors. Let C be the set
of vertices of color i, and consider v ∈C. If v has no neighbor of color j,
then we can switch the color of v to j. Since we are changing colors only
for vertices in C, moving several of them to color j in this way creates no

261
Chapter 5: Coloring of Graphs
Section 5.2: Structure of k­chromatic Graphs
262
conﬂicts, since C is an independent set. After relabeling all vertices of C,
we have obtained a proper coloring without using color i. Hence C must
have some “unmovable” vertex, adjacent to vertices of every other color.
5.2.8. Critical subgraph approach to χ(G) ≤maxi min{di + 1, i}. If χ(G) =
k, then G has a k-critical subgraph, which has at least k vertices of degree
at least k −1. These vertices also have degree at least k in G, so dk ≥k −1.
Hence χ(G) = k = min{dk + 1, k} ≤maxi min{di + 1, i}.
5.2.9. If G is a color-critical graph, then the graph G′ generated from it by
applying Mycielski’s construction is also color-critical. We use properties of
a k-critical graph G obtained in Proposition 5.2.13a: a) For v ∈V (G), there
is a proper k-coloring of G in which color k appears only at v, and b) For
e ∈E(G), every proper (k −1)-coloring of G −e uses the same color on the
endpoints of e.
Given V (G) = {v1, . . . , vn}, let G′ be as in Mycielski’s construction, with
V (G′) = V (G)∪{u1, . . . , un}∪{w}. Suppose that G is k-critical. The proof of
Theorem 5.2.2 yields χ(G′) = k +1; thus it sufﬁces to show that χ(G′ −e) =
k for e ∈E(G′).
For e = wuj, let f be a proper k-coloring of G with color k appearing
only on vj. Extend f to G′ −e by setting f (ui) = f (vi) for 1 ≤i ≤n and
f (w) = f (vj).
For e = vrvs, let f be a proper (k −1)-coloring of G −e, which exists
because G is k-critical. Extend f to G′ −e by letting f (ui) = k for 1 ≤i ≤n
and f (w) = 1.
For e = vrus, let f be a proper (k −1)-coloring of G −vrvs. By Propo-
sition 5.2.13b, f (vr) = f (vs). Extend f to G′ −e by letting f (ui) = f (vi)
for 1 ≤i ≤n and f (w) = k. This uses k colors and uses color k only on
w, but this is not a proper coloring of G′ −e, because the endpoints of the
edges vrvs and urvs have received the same color. We correct this to a proper
coloring by changing the color of vs to k.
5.2.10. Given H ⊆G with V (G) = {v1, . . . , vn}, if G′′ is obtained from G by
applying Mycielski’s construction and adding the edges {uiuj: vivj ∈E(H)},
then χ(G′′) = χ(G) + 1 and ω(G′′) = max{ω(G), ω(H) + 1}. Since G′′ is a
supergraph of the result G′ of Mycielski’s construction, χ(G′′) ≥χ(G′) =
χ(G) + 1. On the other hand, the proper coloring of G′ that uses a proper
χ(G)-coloring on v1, . . . , vn, copies the color of vi onto ui for each i, and
assigns a new color to w, is still a proper coloring of G′′, so χ(G′′) = χ(G)+1.
Since ui and vi remain nonadjacent for all i, every complete graph
induced by {v1, . . . , vn} ∪{u1, . . . , un} is a copy of a complete subgraph of G,
using at most one of {vi, ui} for each i. Every complete graph involving w
is an edge wui or consists of w together with a complete subgraph in H.
Hence ω(G′′) = max{ω(G), ω(H) + 1}.
5.2.11. If G has no induced 2K2, then χ(G) ≤
 ω(G)+1
2

. To prove the upper
bound, we deﬁne k +
 k
2

independent sets that together cover V (G).
Let Q = {v1, . . . , vk} be a maximum clique in G. Let Si be the set of
vertices in G that are adjacent to all of Q except vi. This set is independent,
since two adjacent vertices in Si would form a (k + 1)-clique with Q −{vi}.
Let Ti, j be the set of vertices in G that are adjacent to neither of {vi, vj}.
This set is independent, since two adjacent vertices in Ti, j would form an
induced 2K2 with {vi, vj}.
Every vertex of G has at least one nonneighbor in Q, since Q is a
maximum clique. Thus every vertex of G is in some Si or in some Ti, j, and
we have covered V (G) with the desired number of independent sets.
5.2.12. Zykov’s construction. Let G1 = K1. For k > 1, construct Gk from
G1, . . . , Gk−1 by taking the disjoint union G1 + · · · + Gk−1 and adding a set
T of Qk−1
i=1 n(Gi) additional vertices, one for each way to choose exactly one
vertex vi from each Gi. Let the vertex of T corresponding to a particular
choice of v1, . . . , vk−1 have those k −1 vertices as its neighborhood.
a) ω(Gk) = 2 and χ(Gk) = k. Giving all of T a single color k and using
an i-coloring from {1, . . . , i} on each copy of Gi yields a proper k-coloring of
Gk. Since the neighbors of each vertex of T are in distinct components of
Gk −T , the edges to T introduce no triangle.
Suppose that Gk has a proper (k −1)-coloring. Because χ(Gi) = i,
some color is used on G1, some other color is used on G2, some third color
used on G3, and so on. Thus vertices can be selected from the subgraph
G1+· · ·+Gk−1 having all k−1 colors. By the construction of Gk, some vertex
of T has these as neighbors, and the proper coloring cannot be completed.
b) Zykov’s construction produces color-critical graphs. We must show
that, for any edge xy, Gk −xy has a proper (k −1)-coloring. Suppose this
has been shown for G1, . . . , Gk−1, and consider an edge xy of Gk. If x, y /∈T ,
then xy is an edge of Gt for some t < k. Color each Gi with colors 1, . . . , i
for i ̸= t, but color Gt −xy with colors 1, . . . , t −1. Each vertex of T has
k −1 neighbors, but it is not possible for each of the colors 1, . . . , k −1
to appear among the neighbors of any vertex of T , because its neighbors
in {G1, . . . , Gt} have received only t −1 colors. Hence there is a color in
{1, . . . , k −1} available for any vertex of T .
Finally, suppose we delete an edge xy with x ∈T , y /∈T , and let S =
N(x). By the criticality of G1, . . . , Gk−1, each Gi has a proper i-coloring
with colors 1, . . . , i in which the only vertex of color i is the neighbor of x in
Gi; use these colorings to color Gk −T . In order to choose one vertex from
each Gi and obtain a set with colors 1, . . . , k −1, we must choose the vertex
with color i from Gi; the only way to do this is to choose S. Since x is the
only vertex of T with these neighbors, for every other vertex of T there is

263
Chapter 5: Coloring of Graphs
Section 5.2: Structure of k­chromatic Graphs
264
a color in {1, . . . , k −1} available for it. Finally, if the other endpoint y of
the deleted edge xy is the neighbor of x in Gi, we can give color i to x to
complete the proper (k −1)-coloring of G −xy.
5.2.13. Inductive construction of k-chromatic graphs of girth at least six.
Given G with girth at least 6 and χ(G) = k, form G′ by taking
 kn(G)
n(G)

copies
of G and an independent set S with kn(G) vertices, with each subset of n
vertices in S joined by a matching to one copy of G (distinct subsets match
to different copies of G). Since G is k-colorable, G′ has a proper (k + 1)-
coloring where all of S has color k + 1. If G′ is k-colorable, then any proper
k-coloring of G′ gives the same color to at least n(G) vertices of S with the
same color, by the pigeonhole principle. This color is forbidden from the
copy of G matched to this n(G)-subset of S. Now the coloring cannot be
completed, since proper coloring of this copy of G require at least k colors.
Since G has girth at least 6, any cycle of length less than 6 must use at
least two vertices of S. However, S is independent, and vertices of S have
no common neighbors, so it must take at least 3 edges to go from one vertex
of S to another.
S
G
G
G
G
5.2.14. Chromatic number and cycle lengths.
a) If v is a vertex in a graph G, and T is a spanning tree that maximizes
P
u∈V (G) dT (u, v), then every edge of G joins vertices belonging to a path in
T starting at v. View v as the root of T . If u is on the v, w-path in T ,
then w is a descendant of u. Suppose that xy is an edge in G such that
neither of {x, y} is a descendant of the other in T . We may assume that
dT (v, x) ≤dT (v, y). Now cutting the edge reaching x on the v, x-path in T
and replacing it with yx increases the distance from v to x and to all its
descendants. This contradicts the choice of T , so there is no such edge.
b) If χ(G) > k, then G has a cycle whose length is one more than a
multiple of k. Deﬁne T as in part (a). Deﬁne a coloring of G by letting
the color assigned to each vertex x be the congruence class modulo k of
dT (v, x). This is a proper coloring unless G has an edge xy outside T that
joins vertices of the same color. By part (a), x or y is a descendant of the
other, and the length of the x, y-path in T is a multiple of k. If G has no
cycle with length one more than a multiple of k, then there is no such edge,
and the coloring is proper. We have proved the contrapositive of the claim.
5.2.15. Every triangle-free n-vertex graph G has chromatic number at most
2√n. Since G is triangle-free, every vertex neighborhood is an independent
set. Iteratively use a color on a largest remaining vertex neighborhood
and delete those vertices. After
√n

iterations, the maximum degree in
the remaining subgraph is less than √n. Otherwise, we have deleted at
least √n vertices
√n

times, and there are at most √n vertices remaining.
Since the maximum degree of the remaining subgraph is less than √n, we
can use √n additional colors to properly color what remains.
5.2.16. A simple n-vertex graph with no Kr+1 has at most (1 −1
r ) n2
2 edges.
Proof 1 (induction on r). Basis step: If r = 1, then G has no edges,
as claimed. Induction step: For r > 1, let x be vertex of maximum degree,
with d(x) = k. Since G has no (r + 1)-clique, the subgraph G′ induced by
N(x) has no r-clique. Hence G′ has at most r−2
r−1k2/2 edges, by the induc-
tion hypothesis. The remaining edges are incident to the remaining n −k
vertices; since each such vertex has degree at most k, there are at most
k(n −k) such edges.
Summing the two types of contributions, we have
e(G) ≤k(n −ak), where a = r/(2r −2). The function k(n −ak) is maximized
by setting k =
n
2a , where it equals n2
4a . Hence e(G) ≤n2
4a = (1 −1
r ) n2
2 .
Proof 2 (by Tur´an’s Theorem). By Tur´an’s Theorem, the maximum
number of edges in a graph with no (r + 1)-clique is achieved by the com-
plete r-partite graph with no two part-sizes differing by more than one. If
the part-sizes are {ni}, the degree-sum is Pr
i=1 ni(n −ni) = n2 −Pr
i=1 n2
i .
By the convexity of the squaring function, the sum of the squares of
numbers summing to n is minimized when they all equal n/r. Hence if G
has no (r + 1)-clique, we have 2e(G) ≤(1 −1
r )n2.
5.2.17. Lower bounds on ω(G) and α(G) for n-vertex graphs with m edges.
a) ω(G) ≥

n2/(n2 −2m)

, and this is sometimes sharp. Let r be the
number of vertices in the largest clique in G. By Exercise 5.2.16, m ≤(1 −
1/r)n2/2. This is equivalent by algebraic manipulation to n2/(n2 −2m) ≤r.
This bound is sometimes best possible. Let r =

n2/(n2 −2m)

. Since
m ≤
 n
2

, we have r ≤n. For the bound to be sharp, it sufﬁces to show that
Tn,r has at least m edges and that m ≥
 r
2

. If these two statements are true,
then we can discard edges from Tn,r to obtain a graph G with n vertices and
m edges such that χ(G) = ω(G) = r.
If r is an integer that divides n, then e(Tn,r) = (1 −1/r)n2/2 = m and
the desired properties hold. However, when n = 12 and m = 63, there are

265
Chapter 5: Coloring of Graphs
Section 5.2: Structure of k­chromatic Graphs
266
three edges in G. We have

n2/(n2 −2m)

= 8, but every 12-vertex simple
graph with only three edges in the complement has clique number 9.
b) α(G) ≥

n2/(n + 2m)

vertices, and this is sometimes sharp. We can
transform this question into an instance of part (a) by taking complements.
Every clique in G becomes an independent set in G, and vice versa. Let
H = G. Let m′ =
 n
2

−m be the number of edges in H. If the largest
independent set in G has s vertices, then the largest clique in H has s
vertices. From part (b), we have s ≥

n2/(n2 −2m′)

. Substituting m′ =
 n
2

−m yields s ≥

n2/(n + 2m)

. Since this lower bound for s is achieved for
some m, n by letting H be the appropriate Tur´an graph, it is also achieved
by letting G be the complement of that graph.
5.2.18. Counting edges in the Tur´an graph. Let Tn,r denote the r-partite
Tur´an graph on n vertices, and let a = ⌊n/r⌋and b = n −ra.
a) e(Tn,r) = (1 −1/r)n2/2 −b(r −b)/(2r). By the degree-sum formula,
we need only show that the vertex degrees sum to (1 −1/r)n2 −b(r −b)/r.
Every vertex has degree n −a or n −a −1, with (r −b)a of the former
and b(a + 1) of the latter. Hence the degree sum is n(n −a) −b(a + 1).
Substituting a = (n −b)/r yields n2 −n(n −b)/r−b(n −b + r)/r, which
equals the desired formula.
b) The least r where e(Tn,r) can differ from

(1 −1/r)n2/2

is r = 8,
and e(Tn,8) <

(1 −1/r)n2/2

whenever n ≡4 (mod 8). In general, e(Tn,r) <

(1 −1/r)n2/2

if and only if b(r −b)/(2r) ≥1. Since e(Tn,r) is an integer,
the formula for e(Tn,r) in part (a) differs from

(1 −1/r)n2/2

if and only
if the difference between (1 −1/r)n2/2 and e(Tn,r) is at least 1. Hence the
condition is b(r −b)/(2r) ≥1. For ﬁxed r, the left side is maximized by
b = r/2, where it equals r/8. Hence the condition occurs if and only if r ≥8,
and when r = 8 it occurs if and only if b = 4.
5.2.19. Comparison of the Tur´an graph Tn,r with the graph K a + Kn−a yields
e(Tn,r) =
 n−a
2

+ (r −1)
 a+1
2

. Here a = ⌊n/r⌋. The initial graph K a + Kn−a
has
 n−a
2

edges.
We transform it into Tn,r and study the change in the
number of edges. Let A be the independent set of size a. We create Tn,r by
iteratively removing the edges within a set of size a or a + 1 to make it one
of the desired partite sets, replacing these edges by edges to A.
→
The number of edges from A to a new partite set B is a |B|. Whether
|B| is a or a + 1, this numerically equals
 |B|
2

+
 a+1
2

. Thus replacing the
edges of the clique on B with these edges gains
 a+1
2

edges. Repeating this
r −1 times to create the other partite sets gains (r −1)
 a+1
2

edges, and thus
e(Tn,r) =
 n−a
2

+ (r −1)
 a+1
2

.
5.2.20. For positive integers n and k, if q = ⌊n/k⌋, r = n −qk, s =
⌊n/(k + 1)⌋, and t = n −s(k + 1), then
 q
2

k + rq ≥
 s
2

(k + 1) + ts. The
Tur´an graph Tn,k has partite sets of sizes q and q + 1, with r of the lat-
ter.
Hence its complement has
 q
2

k + rq edges.
Similarly, T n,k+1 has
 s
2

(k + 1) + ts edges. To prove the desired inequality, it thus sufﬁces to
show that e(T n,k) ≥e(T n,k+1), or e(Tn,k) ≤e(Tn,k+1).
This follows from Tur´an’s Theorem. Since e(Tn,k+1) is the maximum
number of edges in an n-vertex graph not containing Kk+2, and Tn,k is such
a graph, we have e(Tn,k) ≤e(Tn,k+1).
5.2.21. Tn,r is the unique n-vertex Kr+1-free graph of maximum size. We use
induction on r. The statement is immediate for r = 1. For the induction
step, suppose r > 1. Let G be an n-vertex Kr+1-free graph, and let x be a ver-
tex of maximum degree in x. Let G′ = G[N(x)]. Let H ′ = Td(x),r−1, and let
H = K n−d(x) ∨H ′. Since G′ has no r-clique, the induction hypothesis yields
e(H ′) ≥e(G′), with equality only if G′ = H ′. Let S = V (G) −N(x). Since
e(G)−e(G′) ≥P
v∈S dG(v) and e(H)−e(H ′) = (n −d(x))d(x) = |S| 1(G), we
have e(H) −e(H ′) ≥e(G) −e(G′). Hence e(H) ≥e(G), with equality only if
equality occurs in both transformations.
We have seen (by the induction hypothesis) that equality in the ﬁrst
transformation requires G′ = H ′. Equality in the second transformation
requires each edge of E(G) −E(G′) to have exactly one endpoint in S and
requires each vertex of S to have degree d(x). Thus every vertex of S is
adjacent to every vertex of N(x) and to no other vertex of S, which means
that G is the join of G′ with an independent set. Since G′ is a complete
(r −1)-partite graph, this makes G a complete r-partite graph. Finally, we
know by shifting vertices between partite sets that Tn,r is the only n-vertex
complete r-partite graph that has the maximum number of edges.
5.2.22. Vertices of high degree. We have 18 vertices in a region of diameter
4, with E(G) consisting of the pairs at most 3 units apart. Since 3 > 4/
√
2,
Application 5.2.11 (in particular the absence of independent 4-sets) guar-
antees that G lacks at most 108 edges of its 153 possible edges and thus
has at least 45 edges. If at most one vertex has degree at least ﬁve, then
the degree-sum is at most (17)4+(1)17 = 85, which only permits 42 edges.

267
Chapter 5: Coloring of Graphs
Section 5.2: Structure of k­chromatic Graphs
268
The result can be strengthened by a more detailed argument (commu-
nicated by Fred Galvin). Let S be the set of vertices with degree less than
5. Because there cannot be four vertices that are pairwise separated by at
least 3 units, the subgraph induced by S has no independent set of size 4.
Thus |S| ≤15, since the edges incident to the vertices of a maximal inde-
pendent set in S must cover all the vertices in S. This shows among any 17
vertices there must be two with degree at least 5.
Furthermore, consider a set with 16 vertices. If |S| < 15, then again
we have two vertices with degree at least 5. If |S| = 15, let T be an inde-
pendent 3-set in S, and let z be the vertex outside S. Since the vertices of
S −T have degree at most 4, they have degree-sum at most 48. However,
Theorem 1.3.23 or the absence of independent 4-sets guarantees that S −T
has at least 18 edges. Adding the 12 edges to S and at least ﬁve edges to z
yields degree-sum at least 53. The contradiction implies that at least two
vertices have degree at least ﬁve.
The result for 16 is sharp, because 15 vertices can be placed in three
clumps forming cliques, and then all vertices have degree four.
5.2.23. Tur´an’s proof of Tur´an’s Theorem.
a) Every maximal simple graph with no (r + 1)-clique has an r-clique.
If making x and y adjacent creates an (r + 1)-clique, then the graph must
already have a clique of r −1 vertices all adjacent to both x and y. Thus x
or y forms an r-clique with these vertices.
b) e(Tn,r) =
 r
2

+ (n −r)(r −1) + e(Tn−r,r). Since n and n −r have the
same remainder under division by r, the size of the ith largest partite set of
Tn−r,r is one less than the size of the ith largest partite set of Tn,r, for each i.
Hence deleting one vertex from each partite set of Tn,r leaves a copy of Tn−r,r
as an induced subgraph. The deleted edges form a complete subgraph on
the vertices removed plus an edge from each of the n −r remaining vertices
to all but one of the deleted vertices. The terms in the claimed equation
directly count these contributions.
c) The Tur´an graph Tn,r is the unique simple graph with the most edges
among n-vertex graphs without Kr+1. We use induction on n. Basis step:
n ≤r. We can include all edges without forming Kr+1. Thus the maximum
graph is Kn, and this is Tn,r.
Induction step: n > r. Let G be a largest simple n-vertex graph avoid-
ing Kr+1. By part (a), G contains Kr; let S be an r-vertex clique in G. Since
G avoids Kr+1, every vertex not in S has at most r −1 neighbors in S.
Therefore, deleting S loses at most
 r
2

+ (n −r)(r −1) edges. The remain-
ing graph G′ avoids Kr+1. By the induction hypothesis, e(G′) ≤e(Tn−r,r),
with equality only for Tn−r,r.
Since e(G) ≤
 r
2

+ (n −r)(r −1) + e(G′), part (b) implies that e(G) ≤
e(Tn,r). To achieve equality, G′ must be Tn−r,r, and each vertex of G′ must
have exactly r −1 neighbors in S. If some vertex of S has a neighbor in
each partite set of G′, then G contains Kr+1. Hence each vertex of S has
neighbors at most r −1 partite sets of G′. Since each vertex of G′ is adjacent
to r −1 vertices in S, the vertices of S miss different partite sets in G′. Thus
the vertices of S can be added to distinct partite sets in G′ to form Tn,r.
5.2.24. An n-vertex graph having tr(n) −k edges and an (r + 1)-clique has
at least fr(n) −k + 1 such cliques, where fr(n) = n −r −⌈n/r⌉and k ≥0.
Let G be a graph with exactly one (r +1)-clique Q; we ﬁrst use Tur´an’s
Theorem to bound e(G). Note that e(G −Q) ≤tr(n−r −1), and furthermore
each v ∈V (G) −Q has at most r −1 neighbors in Q. Thus
e(G) ≤tr(n −r −1) + (r −1)(n −r −1) +
 r+1
2

.
To express this in terms of tr(n), we compute tr(n) −tr(n −r −1). First,
deleting one vertex from each partite set in Tn,r loses the edges among them
plus an edge from each remaining vertex to r −1 deleted vertices. Hence
tr(n) −tr(n −r) =
 r
2

+ (r −1)(n −r). Also, Tn−r,r becomes Tn−r−1,r when
we delete a vertex from a largest partite set, which has degree n −r −
⌈(n −r)/r⌉. Thus tr(n −r) −tr(n −r −1) = (n −r) −⌈(n −r)/r⌉. Hence
tr(n) −tr(n −r −1) =
 r
2

+ r(n −r) −⌈n/r⌉+ 1.
Together,
e(G) ≤tr(n) −
 r
2

−r(n −r) + ⌈n/r⌉−1 + (r −1)(n −r −1) +
 r+1
2

= tr(n) −(n −r −⌈n/r⌉) = tr(n) −fr(n).
Suppose now that G has tr(n) −k edges and s ≥1 copies of Kr+1. By
iteratively deleting an edge that does not belong to every (r + 1)-clique,
we can delete fewer than s edges from G to obtain a graph G′ with exactly
one (r + 1)-clique. By the preceding argument, e(G′) ≤tr(n) −fr(n). Since
e(G) −e(G′) ≤s −1, we have tr(n) −k = e(G) ≤tr(n) −fr(n) + s −1, or
s ≥fr(n) −k + 1.
5.2.25. Bounds on ex(n, K2,m).
a) If G is simple and P
v∈V
 d(v)
2

> (m −1)
 n
2

, then G contains K2,m. If
any pair of vertices has m common neighbors, then G contains K2,m. Since
there are
 n
2

pairs of vertices {x, y}, this means by the pigeonhole principle
that a graph with no K2,m has at most (m −1)
 n
2

selections (v, {x, y}) such
that v is a common neighbor of x and y. Counting such selections by v
shows that there are exactly P
v∈V
 d(v)
2

of them, which completes the proof.
b) If G has e edges, then P
v∈V
 d(v)
2

≥e(2e/n −1). Because
 x
2

is a
convex function of x,
 x
2

+
 y
2

≥2
 (x+y)/2
2

. Hence P
v∈V
 d(v)
2

is minimized

269
Chapter 5: Coloring of Graphs
Section 5.2: Structure of k­chromatic Graphs
270
over ﬁxed degree sum (number of edges) by setting all d(v) = P d(v)/n =
2e/n, in which case the sum is e(2e/n −1).
c) A graph with more than 1
2(m −1)1/2n3/2 + n
4 edges contains K2,m.
Since this edge bound implies 2e/n −1 > (m −1)1/2n1/2 −1
2, we conclude
e
2e
n −1

> 1
2
h
(m −1)1/2n3/2 + n
2
i 
(m −1)1/2n1/2 −1
2

= 1
2(m −1)n2 −n
8 > (m −1)
n
2

.
By (b), this implies the hypothesis of (a) (if m ≥2), and then (a) implies
that G contains K2,m.
d) Among n points in the plane, there are at most
1
√
2n3/2 + n
4 pairs with
distance exactly one. Let V (G) be the n points, with edges corresponding to
the pairs at distance 1. If G has more than the speciﬁed number of edges,
then (c) with m = 3 implies that G contains K2,3. However, no two points
in the plane have three points at distance exactly 1 from each of them.
5.2.26. Every n-vertex graph G with more than 1
2n
√
n −1 edges has girth
at most 4. The sum P
v∈V (G)
 d(v)
2

counts the triples u, v, w such that v is
a common neighbor of u and w. If G has no 3-cycle and no 4-cycle, then
we can bound the common neighbors of pairs u, w. If u ↔w in G, then
they have no common neighbor. If u ↮w in G, then they have at most one
common neighbor. Thus P
v∈V (G)
 d(v)
2

≤
 n
2

−e(G).
Since the vertex degrees have the ﬁxed sum 2e(G), we also have a
lower bound on P
v∈V (G)
 d(v)
2

due to the convexity of x(x −1)/2.
When
P d(v) = 2e(G), the sum P  d(v)
2

is numerically minimized when d(v) =
2e(G)/n for each v. Letting m = e(G), we now have n(m/n)(2m/n −1) ≤
n(n −1)/2 −m. Clearing fractions yields the quadratic inequality 2m(2m −
n) ≤n2(n −1) −2mn, which simpliﬁes to m ≤1
2n
√
n −1.
5.2.27. For n ≥6, the maximum number of edges in a simple n-vertex graph
not having two edge-disjoint cycles is n+3. We argue ﬁrst that K3,3 does not
have two edge-disjoint cycles. Deleting the edges of a 6-cycle leaves 3K2,
and deleting the edges of a 4-cycle leaves a connected spanning subgraph,
which must therefore use the remaining ﬁve edges. Thus every cycle other
than the deleted one shares an edge with the deleted one.
The number of edges in K3,3 exceeds the number of vertices by 3. This
is preserved by subdividing edges, and the property that every two cycles
have a common edge is also preserved by subdividing edges. Hence every
n-vertex subdivision of K3,3 is a graph of the desired form with n + 3 edges.
This establishes the lower bound.
For the upper bound, consider an n-vertex graph G without two edge-
disjoint cycles. We may assume that G is connected, since otherwise we
can add an edge joining two components without adding any cycles. To
prove that e(G) ≤n + 3, we may assume that G has a cycle C. Let H be
a maximal unicyclic subgraph of G containing C. That is, we add edges
from G to C without creating another cycle. Since G is connected, H is a
spanning subgraph and has n edges. In addition to C, the rest of H forms
a spanning forest H ′, with components rooted at the vertices of C.
Each edge of G −E(H) joins two components of H ′, since otherwise
it creates a cycle edge-disjoint from C using the path joining its endpoints
in H ′. Furthermore, for any two such edges xy and uv, with endpoints in
components of H ′ having roots x′, y′, u′, v′ on C, it must be that C does not
contain an x′, y′-path and a u′, v′-path that are disjoint, since these would
combine with xy, uv, and the x, x ′-, y, y′-, u, u′-, and v, v′-paths in H ′ to
form edge-disjoint cycles. Therefore, the x ′, y′- and u′, v′-paths on C must
alternate endpoints (or share one endpoint).
Suppose that there are four such extra edges, say {st, uv, wx, yz}, such
that the corresponding roots on C in order are s′, u′, w′, y′, t′, v′, x′, z′ (con-
secutive vertices in the list may be identical, and any a may equal a′). Sup-
pose that these vertices in order split into distinct pairs, such as s′ ̸= u′,
w′ ̸= y′, t′ ̸= v′, and x′ ̸= z′. We now build edge-disjoint cycles by taking
the cycle through s′, s, t, t′, y′, y, z, z′ indicated in bold below and the analo-
gous cycle through u′, u, v, v′, x′, x, w, w′ (note that t′ = y′, etc., is possible).
If for example s′ = u′, so that these two cycles are not edge-disjoint, then
edge-disjoint cycles can be extracted in other ways (we omit the details).
We conclude that only three additional edges are possible, which limits
e(G) to n + 3.
•
•
•
•
•
•
•
•
s′
u′
w′
y′
t′
v′
x′
z′
•
•
•
•
•
•
•
•
s
u
w
y
t
v
x
z
5.2.28. For n ≥6, the maximum number of edges in a simple n-vertex graph
G not having two disjoint cycles is 3n −6. To construct such a graph, form

271
Chapter 5: Coloring of Graphs
Section 5.2: Structure of k­chromatic Graphs
272
a triangle on a set S of three vertices, and let S be the neighborhood of each
remaining vertex. Each cycle uses at least two vertices from S, so there
cannot be two disjoint cycles. The graph has 3 + 3(n −3) = 3n −6 edges.
For the upper bound, we use induction on n. Basis step (n = 6): G has
at most two missing edges. We ﬁnd one triangle incident to all the missing
edges, and then the remaining three vertices also form a triangle.
Induction step (n > 6): If G has a vertex v of degree at most 3, then
the induction hypothesis applied to G −v yields the claim. Thus we may
assume that δ(G) ≥4. Since e(G) ≥n, there is a cycle in G. Let C be a
shortest cycle in G, and let H = G −V (C). We may assume that H is a
forest, since otherwise we have a cycle disjoint from C.
Since δ(G) ≥4, every leaf or isolated vertex in H has at least three
neighbors on C. This yields a shorter cycle than C unless C is a triangle.
Hence we may assume that C is a triangle, and now δ(G) ≥4 implies that
H has no isolated vertices.
Since every leaf of H is adjacent to all of V (C), two leafs in a single
component of H plus one additional leaf yield two disjoint cycles. Hence
we may assume that H is a single path. Thus every internal vertex of H
has at least two neighbors in C, and there is at least one such vertex since
n > 6. We now have two disjoint triangles: the ﬁrst two vertices of the
path plus one vertex of C, and the last vertex of the path plus the other
two vertices of C.
5.2.29. Let G be a claw-free graph (no induced K1,3).
a) The subgraph induced by the union of any two color classes in a
proper coloring of G consists of paths and even cycles. Let H be such a
subgraph. Since H is 2-colorable, it is triangle-free. Hence a vertex of
degree 3 in H is the center of a claw. Since G is claw-free, every induced
subgraph of G is claw-free. Hence 1(H) ≤2. Every component of a graph
with maximum degree at most 2 is a path or a cycle. Since H is 2-colorable,
the cycle components have even order.
b) If G has a proper coloring using exactly k colors, then G has a proper
k-coloring where the color classes differ in size by at most one. Consider a
proper k-coloring of G. If some two color classes differ in size by more than
1, then we alter the coloring to reduce the size of a largest color class A
and increase the size of a smallest color class B. Consider the subgraph
H induced by A ∪B. By part (a), the components of H are paths and even
cycles. The even cycles have the same number of vertices from A and B.
Since |A| ≥|B| + 2, there must be a component of H that is a path P with
one more vertex from A than from B. Switching the colors on P brings the
two color classes closer together in size. Iterating this procedure leads to
all pairs of classes differing in size by at most 1.
5.2.30. If G has a proper coloring in which each color class has at least two
vertices, then G has a χ(G)-coloring in which each color class has at least
two vertices. (Note that C5 doesn’t have either type of coloring.)
Proof 1 (induction on χ(G); S. Rajagopalan). The statement is imme-
diate if χ(G) = 1. If χ(G) > 1, let f be an optimal coloring of G, and let
g: V (G) →N be a coloring in which each class has at least two vertices.
If f has a singleton color set {x}, let S = {v ∈V (G): g(v) = g(x)}, and let
G′ = G −S. Since f restricts to a (χ(G) −1)-coloring of G′ (because x is
omitted) and g restricts to a coloring of G′ in which every color is used at
least twice (because only vertices with a single color under G were omit-
ted), the induction hypothesis implies that G′ has a (χ(G) −1)-coloring in
which every color is used at least twice. Replacing S as a single color class
yields such a coloring for G.
Proof 2 (algorithmic version). Deﬁne f and g as above. if x is a sin-
gleton color in the current χ(G)-coloring f , change all vertices in {v: g(v) =
g(x)} to color f (x). The new coloring is proper, since f (x) appeared only on
x and since the set of vertices with color g(x) in g is independent. No new
colors are introduced, so the new coloring is optimal. Vertices that have
been recolored are never recolored again, so the procedure terminates af-
ter at most χ(G) steps. It can only terminate with an optimal coloring in
which each color is used at least twice.
5.2.31. If G is a connected graph that is not a complete graph or a cycle
whose length is an odd multiple of 3, then in every minimum proper coloring
of G there are two vertices of the same color with a common neighbor. For
odd cycles, if every two vertices having the same color are at least three
apart, then the coloring must be 1, 2, 3, 1, 2, 3, · · ·, cyclically, so the length
is an odd multiple of 3. For other graphs, Brooks’ Theorem yields χ(G) ≤
1(G). Since only 1(G) −1 colors are available for the neighborhood of a
vertex of maximum degree, the pigeonhole principle implies that a vertex
of maximum degree has two neighbors of the same color in any optimal
coloring.
5.2.32. The Haj´os construction. Applied to graphs G and H sharing only
vertex v, with vu ∈E(G) and vw ∈E(H), the Haj´os construction produces
the graph F = (G −vu) ∪(H −vw) ∪uw.
a) If G and H are k-critical, then F is k-critical.
A proper (k −1)-
coloring of F contains proper (k −1)-colorings of G −vu and H −vw. Since
G and H are k-critical, every (k −1)-coloring of F gives the same color to v
and u and gives the same color to v and w. Since this gives the same color
to u and w, there is no such coloring of F.
Thus χ(F) ≥k, and equality holds because we can combine proper
(k −1)-colorings of G −vu and H −vw and change w to a new color.

273
Chapter 5: Coloring of Graphs
Section 5.2: Structure of k­chromatic Graphs
274
Finally, for e ∈E(F) we show that F −e is (k −1)-colorable.
For
F −uw, the coloring described above is proper. Let xy be another edge of
F; by symmetry, we may assume that xy ∈E(G). Since G is k-critical, we
have a proper (k −1)-coloring f of G −xy. Since uv is an edge in G −xy,
this coloring gives distinct colors to u and v. In a proper (k −1)-coloring of
H −vw that gives v and w the same color, we can permute labels so this
color is f (v). Combining these colorings now yields a proper (k−1)-coloring
of F −xy.
b) For k ≥3, a k-critical graph other than Kk. Apply the Haj´os con-
struction to the graph consisting of two edge-disjoint k-cliques sharing one
vertex v. This deletes one edge incident to v from each block and then
adds an edge joining the two other vertices that lost an incident edge. The
resulting graph is (k −1)-regular except that v has degree 2k −4.
c) Construction of 4-critical graphs with n vertices for all n ≥6. Since
the join of color-critical graphs is color-critical, we can use C2k+1∨K1, which
yields 4-critical graphs for all even n. In particular, this works for n ∈
{4, 6, 8}, which has a member of each congruence class modulo 3.
If we apply the Haj´os construction to a 4-critical graph G with 2l ver-
tices and the 4-critical graph H = K4, we obtain a 4-critical graph F with
2l + 3 vertices.
Thus we obtain a 4-critical n-vertex graph whenever n
exceeds one of {4, 6, 8} by a multiple of 3. This yields all n ≥4 except n = 5.
5.2.33. a) If a k-critical graph G has a 2-cut S = {x, y}, then 1) x ↮y, 2)
G has exactly two S-lobes, and 3) we may index them as G1 and G2 such
that G1 + xy and G2 · xy are k-critical. Since no vertex cut of a k-critical
graph induces a clique, we have x ↮y. By k-criticality, every S-lobe of G
is (k −1)-colorable. If each S-lobe has a proper (k −1)-coloring where x, y
have the same color, then colors can be permuted within S-lobes so they
agree on {x, y}, so G is (k −1)-colorable.
The same can be done if each S-lobe has a proper (k −1)-coloring where
x, y have different colors. Hence there must be an S-lobe G1 such that u, v
receive the same color in every proper (k −1)-coloring and an S-lobe G2
such that u, v receive the different colors in every proper (k −1)-coloring.
Deletion of any other S-lobe would therefore leave a graph that is not (k −
1)-colorable, so criticality implies that there is no other S-lobe.
Since every proper (k −1)-coloring of G1 gives x and y the same color,
G1 + xy is not (k −1)-colorable. Since every proper (k −1)-coloring of G2
gives x and y different colors, G2 · xy is not (k −1)-colorable. To see that
G1 + xy is k-critical, let G′ = G1 + xy and consider edge deletions. First
G′ −xy = G1, which is (k −1)-colorable. For any other edge e of G′, G −e
has a proper (k −1)-coloring that contains a proper (k −1)-coloring of G2,
hence it gives distinct colors to x and y. Therefore the colors it uses on
the vertices of G1 form a proper (k −1)-coloring of G′ −e. The analogous
argument holds for G2 · xy.
b) Every 4-chromatic graph contains a K4-subdivision. Part (a) can be
used to shorten the proof of this. We use induction on n(G), with the basis
n(G) = 4 and K4 itself. Given n(G) > 4, let G′ be a 4-critical subgraph of
G. We know G′ has no cutvertex. If G′ is not 3-connected, then we have
a 2-cut S{x, y}. Part (a) guarantees an S-lobe G1 such that G1 + xy is 4-
critical. By the induction hypothesis, G1 + uv contains a subdivision of K4;
if this subdivision uses the edge uv, then this edge can be replaced by a
path through G2 to obtain a subdivision of K4 in G. If G′ is 3-connected,
the proof is as in the text.
5.2.34. In a 4-critical graph G with a separating set S of size 4, e(G[S]) ≤4.
If e(G[S]) = 6, then S is a 4-clique, and G is not 4-critical. If e(G[S]) = 5,
then G[S] is a kite. Every proper 3-coloring of the S-lobes of G assigns
one color to the vertices of degree 2 in the kite and two other colors to the
vertices of degree 3 in the kite. Hence the names of colors in the proper 3-
colorings of the S-lobes can be permuted so that the coloring agree on S.
This yields a proper 3-coloring of G. The contradiction implies that G[S]
cannot have ﬁve edges.
5.2.35. Alternative proof that k-critical graphs are (k −1)-edge-connected.
a) If G is k-critical, with k ≥3, then for any e, f ∈E(G) there is a
(k −1)-critical subgraph of G containing e but not f . Any (k −1)-coloring
φ of G −e assigns the same color to both endpoints of e. The endpoints of
f get distinct colors under φ; by renumbering colors, we may assume one
of them gets color k −1. Let S = {v : φ(v) = k −1}; note that G −e −S
is (k −2)-colored by φ. However, G −S is (k −1)-chromatic, since S is an
independent set, so any (k −1)-critical subgraph of G −S must contain e
and be the desired graph. (Toft [1974])
b) If G is k-critical, with k ≥3, then G is (k −1)-edge-connected. Since
the 3-critical graphs are the odd cycles, this is true for k = 3, and we pro-
ceed by induction. For k > 3, consider an edge cut with edge set F. If
|F| = 1, we permute colors in one component of G −F to obtain a (k −1)-
coloring of G from a (k −1)-coloring of G −F, so we may assume |F| ≥2.
Choose e, f ∈F. By part (a), there is a (k −1)-critical subgraph G′ con-
taining e but not f . Deleting F −f from G′ separates it, since it separates
the endpoints of e. By the induction hypothesis, |F −f | ≥k −2, and thus
|F| ≥k −1.
5.2.36. If G is k-critical and every (k −1)-critical subgraph of G is isomor-
phic to Kk−1, then G = Kk (if k ≥4). Since Kk is k-critical, a k-critical graph
cannot properly contain Kk, so if we can ﬁnd Kk in G, then G = Kk. Let G
have the speciﬁed properties; since k ≥4, G has a triangle x, y, z. Toft’s crit-

275
Chapter 5: Coloring of Graphs
Section 5.2: Structure of k­chromatic Graphs
276
ical graph lemma says that for any edges e, f , G contains a (k −1)-critical
subgraph that contains e and avoids f .
Let G1 be such a graph that contains xy but omits yz. Since every
(k −1)-critical subgraph is a clique, by hypothesis, G1 cannot contain z
at all. Similarly, let G2 be a (k −1)-critical graph that contains yz but
omits x. Both G1 and G2 are (k −1)-cliques, so a proper (k −2)-coloring
of G1 −xy must give x and y the same color, and a proper (k −2)-coloring
of G2 −yz must give y and z the same color. This means that the graph
H = (G1 −xy) ∪(G2 −yz) ∪xz is not (k −2)-colorable, so it contains some
(k −1)-critical subgraph H ′, which by hypothesis is a (k −1)-clique.
Furthermore, the set of vertices common to G1 and G2 induce a clique,
which means that the (k −2)-colorings of G1 and G2 can be made to agree
on their intersection. This means that H −xz is (k −2)-colorable, which
implies that xz ∈H ′. By construction, NH(x) = V (G1) −y and NH(z) =
V (G2) −y. Since H ′ is a clique containing x, z, this forces G1, G2 to have
k −3 common vertices other than y. We add x, y, z to these to obtain a
k-clique in G, which as noted earlier implies that G = Kk.
5.2.37. Vertex-color-critical graphs.
a) Every color-critical graph is vertex-color-critical. Every proper sub-
graph of a color-critical graph has smaller chromatic number, including
those obtained by deleting a vertex, which is all that is needed for vertex-
color-critical graphs.
b) Every 3-chromatic vertex-color-critical graph G is color-critical.
Since it needs 3 colors, G is not bipartite, but G −v is bipartite for ev-
ery v ∈V (G). Hence every vertex of G belongs to every odd cycle of G; let
C be a spanning cycle of G. If G has any edge e not on C, then e creates a
shorter odd cycle with a portion of C, leaving out some vertices. Since G is
vertex-color-critical, this cannot happen, and G is precisely an odd cycle.
c) the graph below is vertex-color-critical but not color-critical. This
graph G is obtained from the Gr¨otzsch graph by adding an edge, so χ(G) ≥
4. An explicit coloring shows that χ(G) = 4. Hence G is not color-critical.
Explicit 3-colorings of the graphs obtained by deleting one vertex show that
G is vertex-color-critical.
•
•
•
•
•
•
•
•
•
•
•
5.2.38. Every nontrivial simple graph with at most one vertex of degree less
than 3 contains a K4-subdivision. Call a vertex with degree less than 3 a
deﬁcient vertex. By considering the larger class of graphs that may have
one deﬁcient vertex, we obtain a stronger result than δ(G) ≥3 forcing a
K4-subdivision, but one that is easier to prove inductively.
We use induction on n(G); the only graph with at most four vertices
that satisﬁes the hypothesis is K4 itself. For the induction step, we seek
a graph G′ having at most one deﬁcient vertex and having n(G′) < n(G).
If G contains G′ or a G′-subdivision, we obtain a K4-subdivision in G, be-
cause the K4-subdivision in G′ guaranteed by the induction hypthesis is a
subgraph of G or yields a subgraph of G by subdividing additional edges.
If G is disconnected, let G′ be a component of G. If G has a cut-vertex
x, then some {x}-lobe of G has at most one deﬁcient vertex; let this be G′.
Hence we may assume G is 2-connected. If G is 3-connected, then as in the
proof of Theorem 5.2.20 we ﬁnd a cycle C in G −x and an x, V (C)-fan in G
to complete a subdivision of K4.
Hence we may assume that κ(G) = 2, with S a separating 2-set. Only
one S-lobe of G can have a vertex outside S that is deﬁcient in G. Let H be
an S-lobe of G containing no vertex outside S that is deﬁcient in G.
Note that x and y each have degree at least 1 in H, since κ(G) = 2,
and in fact they must have distinct neighbors in V (H) −S. If x or y has
degree at least 3 in H, then let G′ = H.
If dH(x) = dH(y) = 1, then x and y cannot be adjacent. Merge x and
y to form G′ from H; degrees of other vertices don’t change, since x and y
have no common neighbors in H. Also G contains a subdivision of G′ by
undoing the merging and adding an x, y-path through another S-lobe.
Hence we may assume that dH(x) = 2. If xy /∈E(G), then add the edge
xy to H to form G′; only y can now be deﬁcient. Also G contains a subdivi-
sion of G′ by replacing the added edge with an x, y-path through another
S-lobe. If xy ∈E(G), then y has a neighbor in H other that the neighbor of
x (and it is the only neighbor of y other than x). Now we contract xy to ob-
tain G′, with the new vertex having degree 2. Now H is a subdivision of G′
that is a subgraph of G.
5.2.39. For n ≥3, the maximum number of edges in a simple n-vertex graph
G having no K4-subdivision is 2n −3. If G has at least 2n −2 edges, then
n ≥4; we prove by induction on n that G has a K4-subdivision. For n = 4,
G has (at least) 6 edges and must be K4. For n > 4, if δ(G) ≥3, then Dirac’s
Theorem guarantees that G has a K4-subdivision.
When δ(G) < 3, let x be vertex of minimum degree. The graph G −x
has at least 2(n −1) −2 edges; by the induction hypothesis, G −x has a
K4-subdivision, and this subgraph appears also in G.

277
Chapter 5: Coloring of Graphs
Section 5.2: Structure of k­chromatic Graphs
278
To show this is the best bound, we observe that K2∨(n−2)K1 has 2n−3
edges but no K4-subdivision. It cannot have a K4-subdivision because it
has only two vertices with degree at least 3. Another example is K1 ∨Pn−1,
but it requires induction to show that this example with 2n −3 edges has
no K4-subdivision.
5.2.40. For G7 = C5[K3, K2, K3, K2, K3] and G8 = C5[K3, K3, K3, K3, K3],
the graph Gk is k-chromatic but contains no Kk-subdivision. In these con-
structions, the vertices substituted for two successive vertices of C5 (call
these groups) induce a clique. For G7, we use colors 123, 45, 671, 23, 456
in the successive cliques. For G8, we use 123, 456, 781, 234, 567.
In these graphs, one cannot take two vertices from the same group or
adjacent groups in an independent set. Thus each graph has independence
number 2. Thus χ(G7) ≥n(G7)/2 = 6.5 and χ(G8) ≥n(G8)/2 = 7.5. Since
χ(G) is always an integer, we have χ(Gk) ≥k.
If Gk has a Kk-subdivision H, then H must have two vertices u, v of
degree k −1 in nonadjacent groups, since adjacent groups together have
size at most k −2. Since there must be k −1 pairwise internally disjoint
u, v-paths in H, this is impossible when Gk has a u, v-separating set of size
k −2. In all cases except one, Gk has such a u, v-separating set consisting
of two groups. The exception is u, v chosen from the groups of size 2 in G7.
In this exceptional case, we have forbidden the high-degree vertices of
H from the consecutive groups of size 3, since that would yield the case
already discussed. Thus the seven high-degree vertices must consist of the
two groups of size 2 and the triangle between them. Now the four needed
paths connecting the two groups of size 2 must use the two consecutive
groups of size 3, but only three paths can do this.
5.2.41. If m = k(k + 1)/2, then Km,m−1 contains no subdivision of K2k. In
Km,m there is such a subdivision: place k branch vertices in each partite set,
and then there remain
 k
2

unused vertices in each partite set to subdivide
edges joining the branch vertices in the other partite set. We prove that if
an X, Y-bigraph G contains a subdivision of K2k, then n(G) ≥2m.
Proof 1 (counting argument). The paths representing edges of K2k
are pairwise internally-disjoint. When a partite set has a “branch vertices”
(degree more than two in the subdivision), the other partite set has at
least
 a
2

vertices that are not branch vertices. If the subdivision of K2k
has a branch vertices in X, we thus need at least
 a
2

+ 2k −a +
 2k−a
2

+ a
vertices. Using the identity
 a
2

+a(n −a)+
 n−a
2

=
 n
2

, the formula becomes
 2k
2

+ 2k −a(2k −a). Since a(2k −a) ≤k2, the number of required vertices
is at least
 2k+1
2

−k2. This quantity is k(k + 1) = 2m.
Proof 2 (extremal bipartite subgraphs). In a subdivision of K2k within
a graph G, there are 2k branch vertices. The maximum number of edges in
a bipartite graph with 2k vertices is k2. Hence if more than k2 edges joining
branch vertices are left unsubdivided, then the subgraph of G induced by
these vertices will not be bipartite. Since we require the host graph (G =
Km,m−1) to be bipartite, at least
 2k
2

−k2 edges must be subdivided. This
requires k2 −k additional vertices. Together with the branch vertices, a
bipartite graph containing a subdivision of K2k must have at least k2 + k
vertices. (Comment: The uniqueness of the 2k-vertex bipartite graph with
k2 edges leads to the uniqueness of Km,m as a graph with k2 + k vertices
having a subdivision of K2k.)
5.2.42. If F is a forest with m edges, and G is a simple graph such that
δ(G) ≥m and n(G) ≥n(F), then F ⊆G. We may assume that F has no
isolated vertices, since those could be added at the end.
Let F′ be a subgraph of F obtained by deleting one leaf from each
nontrivial component of F. Let R be the set of neighbors of the deleted
vertices. Map R onto an m-set X ⊆V (G) that minimizes e(G[X]). Since
δ(G) ≥m and n(F′) = m, we can extend X to a copy of F ′ in G (each vertex
has at least m neighbors, but fewer than m of its neighbors are used already
in F′ when we need to add a neighbor to it).
To extend this copy of F′ to become a copy of F, we show that G con-
tains a matching from X into the set Y of vertices not in this copy of F ′.
Let H be the maximal bipartite subgraph of G with bipartition X, Y. By
Hall’s Theorem, the desired matching exists unless there is a set S ⊆X
such that |NH(S)| < |S|. Consider t ∈S and u ∈Y −NH(S). Outside S, t
has at most (n(F′) −|X|) + |NH(S)| neighbors in G. Since δ(G) ≥m, we
have |NG(t) ∩S| ≥|X| −|NH(S)|. On the other hand, since u /∈NH(S), we
have |NG(u) ∩X| ≤|X| −|S|. Since |NH(S)| < |S|, replacing t with u in X
reduces the size of the subgraph induced by X. This contradicts the choice
of X, and hence Hall’s condition holds.
5.2.43. Every proper k-coloring of a k-chromatic graph contains each labeled
k-vertex tree as a labeled subgraph. We use induction on k, with trivial ba-
sis k = 1. For k > 1, let f be the coloring, and let Ci = {v ∈V (G): f (v) = i}.
Suppose that x is a leaf of T with neighbor y and that we seek label p for
x and q for y. Let S ⊂Cq be the vertices in Cq adjacent to no vertex of Cp.
We have S ̸= Cq, else we can combine color classes in f .
The vertices of S cannot be used in the desired embedding of T , so we
will discard them. Let G′ = G −(S ∪Cp). We have χ(G′) ≤k −1 because
we have discarded all vertices of color p in f , and we have χ(G′) ≥k −1
because S ∪Cp is an independent set in G. By the induction hypothesis, G′
has T −x as a labeled subgraph H, and the image of y in H belongs to Cq.
We have retained in Cq −S only vertices having a neighbor with color p in

279
Chapter 5: Coloring of Graphs
Section 5.3: Enumerative Aspects
280
f (by part (a), this set is non-empty). Hence G has a vertex in Cp that we
can use as the image of x to obtain T as a labeled subgraph.
5.2.44. Every k-chromatic graph with girth at least 5 contains every k-vertex
tree as an induced subgraph. If χ(G) = k and d(x) < k −1 for some x ∈
V (G), then χ(G −x) = k, so it sufﬁces to prove the claim for graphs in
which the minimum degree is at least k −1. In fact, with this condition, we
do not need the condition on the chromatic number. For k ≤2, the result
is obvious; we proceed by induction for k > 2.
Suppose T is a k-vertex tree, x is a leaf of T with neighbor y, and
T ′ = T −x. By the induction hypothesis, G has T as an induced subgraph
f (T ′); let u = f (y). It sufﬁces to show that S = N(u) −f (T ′) contains a
vertex adjacent to no vertex of f (T ′) except u. Each vertex in f (N(y)) has
no neighbor in S, because G has no triangles. Each vertex in f (T −N[y])
has at most one neighbor in S, else it would complete a 4-cycle in G with
two such vertices and u. Hence S has at most n(T ′) −1 −d(y) unavailable
vertices. Since |S| ≥k −1 −d(y), there remains an available vertex in S to
assign to x.
5.3. ENUMERATIVE ASPECTS
5.3.1. The chromatic polynomial of the graph below is k(k −1)2(k −2). The
graph is chordal, and the polynomial follows immediately from a simplicial
elimination ordering. It can also be obtained from the recurrence, from the
inclusion-exclusion formula, etc.
•
•
•
•
5.3.2. The chromatic polynomial of an n-vertex tree is k(k −1)n−1, by the
chromatic recurrence. We use induction on n. For n = 1, the polynomial is k,
as desired. Contracting an edge of an n-vertex tree leaves a tree with n −1
vertices. Deleting the edge leaves a forest of two trees, with orders m and
n −m for some m between 1 and n −1. The polynomial for a disconnected
graph is the porduct of the polynomials for the components. We use the
induction hypothesis and the chromatic recurrence and extract the factors
k and (k −1)n−2 to obtain the polynomial
k(k −1)m−1k(k −1)n−m−1 −k(k −1)n−2 = k(k −1)n−2(k −1) = k(k −1)n−1.
5.3.3. k4 −4k3 + 3k2 is not a chromatic polynomial. In χ(G; k), the degree
is n(G), and the second coefﬁcient is −e(G). Hence we need a 4-vertex
graph with four edges. The only such graphs are C4 and the paw, which
have chromatic polynomials k(k −1)(k2 −3k + 3) and k(k −1)(k −2)(k −1),
each with nonzero linear term. (Note: The linear term of the chromatic
polynomial of a connected graph is nonzero; see Exercise 5.3.12.)
Alternatively, observe that the value at 2 is negative, so it cannot count
the proper 2-colorings in any graph.
5.3.4. a) The chromatic polynomial of the n-cycle is (k −1)n + (−1)n(k −
1). Proof 1 (induction on n). The chromatic polynomial of the loop (C1)
is 0, which the formula reduces to when n = 1. Those considering only
simple graphs can start with χ(C3; k) = k(k −1)(k −2) = (k −1)3 −(k −
1).
For larger n, the chromatic recurrence yields χ(Cn; k) = χ(Pn; k) −
χ(Cn−1; k).
By the induction hypothesis and the formula for trees, this
equals k(k −1)n−1 −(k −1)n−1 −(−1)n−1(k −1) = (k −1)n + (−1)n(k −1).
Proof 2 (Whitney’s formula). We use χ(G; k) = P
S⊆E(G)(−1)|S|kc(G(S)).
For every set S of size j, the number of components of G(S) is n −j, except
that for S = E(G) the number of components is 1, not 0. Since there are
 n
j

sets with j edges, we obtain χ(Cn; k) = (Pn−1
j=0(−1) j n
j

kn−j) + (−1)nk.
By the binomial theorem, (k −1)n = (Pn−1
j=0(−1) j n
j

kn−j) + (−1)n. Thus we
obtain χ(Cn; k) from (k −1)n by adding (−1)nk and subtracting (−1)n.
b) If H = G ∨K1, then χ(H; k) = kχ(G; k −1). Let x be the vertex
added to G to obtain H. In every proper coloring, the color used on x is
forbidden from the rest of H. Each of the k ways to color x combines with
each of the χ(G; k −1) ways to properly color the rest of H to form a proper
coloring of H. Hence χ(H; k) = kχ(G; k −1);in particular, χ(Cn ∨K1; k) =
k(k −2)n + (−1)nk(k −1).
5.3.5. If Gn = K2
Pn, then χ(Gn; k) = (k2 −3k + 3)n−1k(k −1).
Proof 1 (induction on n). Since G1 is a 2-vertex tree, χ(G1; k) = k(k −
1). For n > 1, let un, vn be the two rightmost vertices of Gn. The proper
colorings of Gn are obtained from proper colorings of Gn−1 by assigning
colors also to un and vn. Each proper coloring f of Gn−1 satisﬁes f (un−1) ̸=
f (vn−1). Thus each such f extends to the same number of colorings of Gn.
There are (k −1)2 ways to specify f (un) and f (vn) so that f (un) ̸=
f (un−1) and f (vn) ̸= f (vn−1). Of these extensions, k −2 give un and vn the
same color, and we delete them. Since (k −1)2 −(k −2) = k2 −3k + 3, the
induction hypothesis yields
χ(Gn; k) = (k2 −3k + 3)χ(Gn−1; k) = (k2 −3k + 3)n−1k(k −1).

281
Chapter 5: Coloring of Graphs
Section 5.3: Enumerative Aspects
282
Proof 2 (induction plus chromatic recurrence). Again χ(G1; k) = k(k −
1). Let e = unvn. For n > 1, observe that χ(Gn −e; k) = χ(Gn−1; k)(k −1)2
and χ(Gn · e; k) = χ(Gn−1; k)(k −2), by counting the ways to extend each
coloring of Gn−1 to the last column. Thus
χ(Gn; k) = χ(Gn −unvn; k) −χ(Gn · unvn; k)
= χ(Gn−1; k)[(k −1)2 −(k −2)] = (k2 −3k + 3)n−1k(k −2).
5.3.6. Non-inductive proof that the coefﬁcient of kn(G)−1 in χ(G; k) is −e(G).
Let n be the number of vertices in G.
By Proposition 5.3.4, χ(G; k) =
Pn
r=1 prk(r), where pr is the number of partitions of G into exactly r
nonempty independent sets. Since k(r) is a polynomial in k of degree r,
contributiong to the coefﬁcient of kn−1 in χ(G; k) can arise only from the
terms for r = n and r = n −1.
The only partition of V (G) into n independent sets is the one with each
vertex in a set by itself, so pn = 1. When partitioning V (G) into n −1
independent sets, there must be one set of size 2 and n −2 sets of size
1. Thus each such partition is determined by choosing two nonadjacent
vertices. There are
 n
2

−e(G) such pairs (G is simple), so pn−1 =
 n
2

−e(G).
The term involving kn−1 in k(n−1) arises only by choosing the term k
from each factor when expanding the product. Thus the coefﬁcient of kn−1
in k(n−1) is 1. Contributions to the coefﬁcient of kn−1 in k(n) arise by choos-
ing the term k from n −1 factors and the constant from the remaining
term. Thus the contributions are −1, −2, . . . , −(n −1), and the coefﬁcient
is −Pn−1
i=0 i, which equals −
 n
2

.
Combining these computations yields the coefﬁcient of kn−1 in χ(G; k)
as 1 · [−
 n
2

] + [
 n
2

−e(G)] · 1.
5.3.7. Roots of chromatic polynomials.
a) The chromatic polynomial χ(G; k) of an arbitrary graph G is a non-
negative linear combination of chromatic polynomials of cliques with at
most n(G) vertices. This holds trivially when G itself is a clique, which is
the situation where e(G) = 0. This is the basis step for a proof by induc-
tion on e(G). For e(G) > 0, let G′ be the graph obtained by adding the
edge e = uv and contracting it; we have χ(G; k) = χ(G + uv; k) + χ(G′; k)
by the chromatic recurrence. To apply the induction hypothesis, note that
e(G + uv) = e(G) −1 and e(G′) = e(G) −1 −|N(u) ∩N(v)|, where e = uv.
Hence we can express χ(G′; k) and χ(G′ · e; k) as nonnegative linear com-
binations of the polynomials χ(K j; k) for j ≤n.
b) The chromatic polynomial of a graph on n vertices has no real root
larger than n −1. The combinatorial deﬁnition of the chromatic polyno-
mial as the function of k that counts the proper colorings of G using at
most k colors guarantees that the value cannot be 0 for k ≥n, because
we can arbitrarily assign the vertices distinct colors to obtain at least
k(k −1) · · · (k −n + 1) > 0 proper colorings. However, this argument ap-
plies only to integers.
To forbid all real roots exceeding n, we use part
(a). Observe that χ(Kj; x) is the product of positive real numbers when-
ever x > j −1; hence these polynomials have no real roots larger than
j −1. Since any chromatic polynomial is a nonnegative linear combination
of these for j ≤n, its value at any x > n −1 is the sum of at most n positive
numbers and therefore is also positive.
5.3.8. The number of proper k-colorings of a connected graph G is less than
k(k −1)n−1 if k ≥3 and G is not a tree. If G is connected but not a tree, let
T be a spanning tree contained in G, and choose e ∈E(G) −E(T ). Every
proper coloring of G must be a proper coloring of the subgraph T , and there
are exactly k(k −1)n−1 proper k-colorings of T . It sufﬁces to show that at
least one of these is not a proper k-coloring of G. Since T is bipartite and
k ≥3, we can construct such a coloring by using a 2-coloring of T and then
changing the endpoints of e to a third color. This is still a proper k-coloring
of T , but it is not a proper k-coloring of G.
If k = 2, then T has exactly two proper k-colorings, and these are both
proper colorings of G if G is bipartite. Thus the statement fails when k = 2
if G is bipartite (if G is not bipartite, then it still holds when k = 2).
5.3.9. χ(G; x + y) = P
U⊆V (G) χ(G[U]; x)χ(G[U]; y) . Polynomials of degree
n that agree at n +1 points are equal everywhere. Hence it sufﬁces to prove
the claim when x and y are nonnegative integers. We show that then each
side counts the proper (x + y)-colorings of G.
In each proper (x + y)-coloring, the ﬁrst x colors are used on some
subset U ⊆V (G), and U receives colors among the remaining y colors.
Since there is no interference between the colors, we can put an arbitrary
x-coloring on G[U] and an arbitrary y-coloring on G[U] and form such a
coloring in P
U⊆V (G) χ(G[U]; x)χ(G[U]; y) ways. Furthermore, the set U
that receives colors among the ﬁrst x colors is uniquely determined by the
coloring. Hence summing over U counts each coloring exactly once. The
left side by deﬁnition is the total number of colorings.
5.3.10. If G is a connected n-vertex graph with χ(G; k) = Pn−1
i=0 (−1)ian−ikn−i,
then ai ≥
 n−1
i−1

for 1 ≤i ≤n. In order to prove this inductively using the
chromatic recurrence, we must guarantee that the graphs in the recur-
rence are connected and appear “earlier”. We use induction on n, and to
prove the induction step we use induction on e(G) −n + 1.
The statement holds for the only 1-vertex graph, so consider n > 1.
If e(G) = n −1 and G is connected, then G is a tree and has chromatic

283
Chapter 5: Coloring of Graphs
Section 5.3: Enumerative Aspects
284
polynomial k(k −1)n−1. The term involving ki is k
 n−1
i−1

ki−1(−1)n−i, so the
magnitude of the coefﬁcient is
 n−1
i−1

, as desired.
Now consider e(G) > n −1.
If G is connected and has more than
n −1 edges, then G has a cycle, and deleting any edge of the cycle leaves
a connected graph. Let e be such an edge, and deﬁne {bi}, {ci} in the chro-
matic polynomials by χ(G −e; k) = Pn−1
i=0 (−1)ibn−ikn−i and χ(G · e; k) =
Pn−1
i=0 (−1)icn−1−ikn−1−i.
The recurrence χ(G; k) = χ(G −e; k)−χ(G ·e; k) implies that (−1)n−iai
is the sum of the coefﬁcients of ki in the other two polynomials. Since G −e
and G ·e are connected, the induction hypothesis implies ai = bi −(−1)ci =
bi + ci ≥
 n−1
i−1

+
 n−2
i−1

>
 n−1
i−1

for 1 ≤i ≤n −1. Indeed, equality holds in
the bound for any of these coefﬁcients only if G is a tree.
5.3.11. The coefﬁcients of χ(G; k) sum to 0 unless G has no edges. The sum
of the coefﬁcients of a polynomial in k is its value at k = 1. The value of
χ(G; 1) is the number of proper 1-colorings of G. This is 0 unless G has no
edges. (The inductive proof from the chromatic recurrence is longer.)
5.3.12. The exponent in the last nonzero term in the chromatic polynomial
of G is the number of components of G. We use induction on e(G). When
e(G) = 0, we have χ(G; k) = kn(G), and G has n(G) components. Let c(G)
count the components in G. Both G −e and G · e have fewer edges than G.
Also G ·e has the same number of components as G, and G −e has the same
number or perhaps one more. Since n(G · e) = n(G −e) −1 and coefﬁcients
alternate signs, the coefﬁcients of kc(G) have opposite signs in χ(G · e; k)
and χ(G −e; k). Thus we have positive α and nonnegative α′ such that
χ(G −e; k):
kn −[e(G) −1]kn−1+
· · ·
+(−1)n−c(G)αkc(G)
−χ(G · e; k):
−(
kn−1−
· · ·
+(−1)n−c(G)−1α′kc(G)
)
= χ(G; k):
kn
−e(G)kn−1+
· · ·
+(−1)n−c(G)(α + α′)kc(G)
Since α + α′ > 0, the last coefﬁcient of χ(G; k) is as claimed.
Alternatively, one can reduce to the case of connected graphs by ob-
serving that the chromatic polynomial of a graph is the product of the
chromatic polynomials of its components. Since an n-vertex tree has chro-
matic polynomial k(k −1)n−1, its last nonzero term is the linear term. For a
connected graph that is not a tree, the chromatic recurrence can be applied
as above to obtain the result inductively.
If p(k) = kn −akn−1+· · ·±ckr with a >
 n−r+1
2

, then p is not a chromatic
polynomial. If p is a chromatic polynomial of a (simple) graph G, then G
has n vertices, a edges, and r components. The maximum number of edges
in a simple graph with n vertices and r components is achieved by r −1
isolated vertices and one clique of order n −r + 1. This has
 n−r+1
2

edges
(Exercise 1.3.40), which is less than a.
5.3.13. Chromatic polynomials and clique cutsets. Let F = G ∪H, with
S = V (G) ∩V (H) being a clique. Every proper k-coloring of F yields proper
k-colorings of G and H, and proper k-colorings of G and H together yield a
proper k-coloring of F if they agree on S. Since S induces a clique, in every
proper k-coloring of G or H the vertices of S have distinct colors. Therefore,
given a proper k-coloring of G ∩H, the number of ways to extend it to a
proper k-coloring of H [or G, or F] is independent of which proper k-coloring
of G ∩H is used.
For each k ≥0, the value of the chromatic polynomial simply counts
proper colorings.
We have partitioned the proper k-colorings of these
graphs into equal-sized classes that agree on S.
For a ﬁxed coloring f
of G ∩H, the number of ways to extend it to a coloring of G, H, or F
is thus χ(G; k)/χ(G ∩H; k), χ(H; k)/χ(G ∩H; k), or χ(F; k)/χ(G ∩H; k),
respectively. Since every extension of f to G is compatible with every ex-
tension of f to H to yield an extension of f to F, the product of the ﬁrst two
of these equals the third, and χ(G ∪H; k) = χ(G; k)χ(H; k)/χ(G ∩H; k).
(Comment: 1) When G and H intersect in a clique, it need not be true that
χ(G; k) = χ(G −G ∩H; k)χ(G ∩H; k); for example, let G and H be 4-cycles
sharing a single vertex.)
When G ∩H is not a clique, this argument breaks down. For example,
consider G = H = P3, F = G ∪H = C4, G ∩H = 2K1. We have
χ(F; k)χ(G ∩H; k) = k3(k −1)(k2 −3k + 3) ̸= k2(k −1)4 = χ(G; k)χ(H; k)
5.3.14. Minimum vertex partitions of the Petersen graph into independent
sets.
Let P be the Petersen graph.
The Petersen graph P has odd cy-
cles, so it requires 3 colors, and it is easy to partition the vertices into 3
independent sets using color classes of size 4,3,3, as described below.
a) If S is an independent 4-set, then P −S = 3K2. The three neighbors
of a vertex have among them an edge to every other vertex, so S cannot
contain all the neighbors of a vertex. Hence P −S has no isolated vertex.
Deleting S deletes 12 edges, so P −S has 3 edges and 6 vertices. With no
isolated vertices, this yields P −S = 3K2.
b) P has 20 partitions into three independent sets.
Since P has 10
vertices, every such partition has an independent set of size at least four.
There is no independent 5-set, because we have seen that every indepen-
dent 4-set has two edges to each remaining vertex. For each independent
4-set S, there are 4 ways to partition the vertices of the remaining 3K2 into
two independent 3-sets. Hence it sufﬁces to count the independent 4-sets
and multiply by 4. The number of independent 4-sets containing a speciﬁed
vertex is 2, since deleting that vertex and its neighbors leaves C6, which
has two independent 3-sets. Summing this over all vertices counts each

285
Chapter 5: Coloring of Graphs
Section 5.3: Enumerative Aspects
286
independent 4-set four times. Hence there are 2 · 10/4 = 5 independent
4-sets and 20 partitions of the vertices.
c) If r = χ(G), then V (G) has χ(G;r)/r! partitions into r independent
sets. Each such partition can be converted into a coloring in exactly r! ways.
5.3.15. A graph with chromatic number k has at most kn−k vertex parti-
tions into k independent sets, with equality achieved only by Kk + (n −k)K1
(complete graph plus isolated vertices. For Kk + (n −k)K1, the sets of the
partition are identiﬁed by the vertex of the clique that they contain, and
the isolated vertices can be assigned to these sets arbitrarily, so this is the
correct number of vertex partitions for this graph.
If G has only k vertices, then G has be a k-clique, and there is only
one partition. If n > k, choose a vertex v ∈V (G). We consider two cases;
χ(G −v) = k and χ(G −v) = k −1.
If χ(G −v) = k, then partitions of G −v can be extended to partitions
of G by putting v in any part to which it has no edges. Thus it extends in
at most k ways, with equality only if v is an isolated vertex.
If χ(G −v) = k −1, then G has a k-partition in which v is by itself and
is adjacent to vertices X = {x1, . . . , xk−1} of the other parts. Let R be the
independent set containing v in an arbitrary k-partition, and suppose |R| =
1 + r. Note that χ(G −R) = k −1. By the induction hypothesis, G −R has
at most (k −1)n−r−k partitions into k −1 independent sets. Allowing R to be
an arbitary subset of G −(X ∪{v}), we obtain at most Pn−k
r=0
 n−k
r

(k −1)n−k−r
partitions of G into k independent sets, which equals kn−k by the binomial
theorem. For equality, we must have N(v) = X and G−(X ∪{v}) = (n−k)K1
for each such choice of v, which again yields G = Kk + (n −k)K1.
5.3.16. If G is a simple graph with n vertices and m edges, then G has at
most 1
3
 m
2

triangles. Each triangle has three pairs of incident edges, and
each edge pair of incident edges appears in at most one triangle. Hence
the number of triangles is at most 1/3 of the number of pairs of edges.
The coefﬁcient of kn−2 in χ(G; k) is positive unless G has at most one
edge. In the expression for the chromatic polynomial in Theorem 5.3.10,
contributions to the coefﬁcient of kn−2 arise from spanning subgraphs with
n −2 components. These include all ways to choose two edges (weighted
positively) and all ways to choose three edges forming a triangle (weighted
negatively). With m edges and t triangles, the coefﬁcient is
 m
2

−t. Since
t ≤1
3
 m
2

, the coefﬁcient is positive unless G has at most one edge.
5.3.17. Chromatic polynomial via the inclusion-exclusion principle. In the
universe of all k-colorings of G, let Ai be the set of colorings that assign
the same color to the endpoints of edge ei. The proper k-colorings of G are
the k-colorings outside all the sets Ai. By the inclusion-exclusion formula,
the number of these is P
S⊆E(G)(−1)|S|g(S), where g(S) is the number of
k-colorings in T
ei∈S Ai.
These are the colorings in which every edge in
S has its endpoints given the same color. To count these, we can choose
a color independently for each component of the spanning subgraph of G
with edge set S. Hence g(S) = kc(G(S)), where c(G(S)) is the number of these
components. We have obtained the formula of Theorem 5.3.10.
5.3.18. Two chromatic polynomials.
•
•
•
•
•
•
e
•
•
•
•
•
•
e
a) The graphs G, H above have the same chromatic polynomial. Ap-
plying the chromatic recurrence using the edge labeled e shows that each
of these graphs has a chromatic polynomial that is the difference of the
chromatic polynomials of the two graphs below.
•
•
•
•
•
•
•
•
•
•
•
b) The chromatic polynomial of G. The ﬁrst graph G is G′ −e′, where
G′ is the graph on the left below and e′ is the indicated edge. The graph
G′ · e′ appears on the right. Each of these graphs is chordal, as shown by
exhibiting a simplicial eliminationordering. For each, the chromatic poly-
nomial is a product of linear factors arising from the reverse of a simplicial
elimination ordering. Thus
χ(G; k) = χ(G′ −e′; k) = χ(G′; k) + χ(G′ · e; k)
= k(k −1)(k −2)2(k −3)2 + k(k −1)2(k −2)2
= k(k −1)(k −2)2(k2 −5k + 8)
•
•
•
•
•
•
e′
•
•
•
•
•

287
Chapter 5: Coloring of Graphs
Section 5.3: Enumerative Aspects
288
5.3.19. The chromatic polynomial of the graph G obtained from K6 by sub-
dividing one edge is a product of linear factors, although G is not a chordal
graph. Let v be the vertex of degree 2 in G, and let e be an edges incident
to e. The cycle consisting of v, its incident edges, and the edges from its
neighbors to one other vertex form a chordless 4-cycle, so G is not chordal.
To compute χ(G; k), observe that G −e consists of a 5-clique Q, an
additional vertex w adjacent to four vertices of Q, and v adjacent to w.
Hence G −e is a chordal graph, with χ(G −e; k) = k(k −1)(k −2)(k −
3)(k −4)(k −4)(k −1). Let f (k) = Q4
i=0(k −i). The graph G · e is K6, with
χ((; K)6) = f (k)(k −5). Thus
χ(G; k) = χ(G −e; k) −χ(G · e; k) = f (k)[(k −4)(k −1) −(k −5)]
= f (k)[k2 −6k + 9] = k(k −1)(k −2)(k −3)(k −4)(k −3)2
5.3.20. Properties of a chordal graph G with n vertices.
a) G has at most n maximal cliques, with equality if and only if G has
no edges. As each vertex v is added in the reverse of a simplicial elimination
ordering, it creates one new maximal clique (containing v) if N(v) is not
already a maximal clique. If N(v) is already a maximal clique, then the
clique grows. No other maximal clique appears or changes. Thus there is
at most one new maximal clique for each vertex. The ﬁrst time an edge is
added, a maximal clique is enlarged, not created, so there is a new clique
at most n −1 times if G has an edge. (Comment: A more formal version of
this argument uses the language of induction on n.)
b) Every maximal clique of G that contains no simplicial vertex of G is
a separating set of G.
b) Every maximal clique of G that contains no simplicial vertex of G is
a separating set of G.
Proof 1 (construction ordering, following part (a).) When a maximal
clique Q of G acquires its last vertex v in the construction ordering, v is
then simplicial. If all vertices of Q that are simplicial when Q is created are
not simplicial in G, then the rest of the construction gives them additional
neighbors that are separated by Q from each other and from the vertices
of G −Q that are earlier than v. If there are no such earlier vertices, then
Q has at least two simplicial vertices at the time it is formed; each of these
acquires a later neighbor, so Q separates those later neighbors.
Proof 2 (induction on n.) When G = Kn, there is no separating set,
but all the vertices are simplicial, so the statement holds. When G ̸= Kn,
let Q be a maximal clique containing no simplicial vertex of G.
Every
chordal graph that is not a complete graph has two nonadjacent simplicial
vertices (this follows, for example, from Lemma 5.3.16). Let u and v be
such vertices. Note that Q cannot contain both u and v; we may assume
that v /∈Q. Hence Q is a maximal clique in G −v.
If Q contains no simplicial vertex of G −v, then the induction hypoth-
esis implies that Q separates G −v. All neighbors of v in G lie in one
component of G −v −Q, since N(v) is a clique in G −v. Hence Q is also a
separating set in G.
If Q contains at least one simplicial vertex of G −v, then all such
vertices lie in N(v), since they are not simplicial in G. Therefore u /∈Q,
and Q separates v from u.
5.3.21. A graph G is chordal if and only if s(H) = ω(H) for every induced
subgraph H of G, where s(H) is the Szekeres–Wilf number of H, deﬁned to
be 1 + maxH⊆G δ(H).
Sufﬁciency. We prove the contrapositive. If G is not chordal, then G
has a chordless cycle with length at least 4. Such a cycle is an induced
subgraph. Its clique number is 2, and its Szekeres–Wilf number is 3.
Necessity. Since every induced subgraph of a chordal graph is chordal,
it sufﬁces to show that s(G) = ω(G) (the argument for G also applies to
each induced subgraph). Since always s(G) ≥ω(G), it sufﬁces to show that
s(G) ≤ω(G).
Let H be an induced subgraph of G such that δ(H) = maxG′⊆G δ(G′),
so s(G) = 1 + δ(H). Let x be the ﬁrst vertex of H that is deleted in some
simplicial elimination ordering of G. Since the neighbors of x in H complete
a clique with x, we have ω(H) ≥1 + dH(x) ≥1 + δ(H) = s(G).
5.3.22. If kr(G) is the number of r-cliques in a connected chordal graph G,
then P
r≥1(−1)r−1kr(G) = 1. We use induction on n(G). When n(G) = 1, the
only graph is K1, which has one 1-clique and no larger clique; this satisﬁes
the formula.
For n(G) > 1, we know that G has a simplicial elimination order-
ing.
Let v be a simplicial vertex in G.
By the induction hypothesis,
P
n≥1(−1)r−1kr(G −v) = 1.
All cliques in G −v appear also in G, so
the contribution to the sum from these cliques is the same in G. Thus it
sufﬁces to show that the net contribution from cliques containing v is 0.
Each clique of size r containing v consists of v and r −1 vertices from
N(v). Since v is simplicial, N(v) is a clique, and thus every selection of r −1
vertices from N(v) forms an r-clique with v. Therefore, the contribution
from these cliques is P
r≥1(−1)r−1 d(v)
r−1

.
The binomial theorem states that (1 + x)m = Pm
s=1 xs m
s

. Setting m =
d(v) and x = −1 yields our sum on the right; on the left it yields 0 (since
m > 0). Thus the contribution from cliques containing v is 0, as desired.
5.3.23. If C is a cycle of length at least 4 in a chordal graph G, then G
has a cycle whose vertex set is V (C) minus one vertex. Given a simplicial

289
Chapter 5: Coloring of Graphs
Section 5.3: Enumerative Aspects
290
elimination ordering of G, let v be the ﬁrst vertex of C that is deleted.
Since the remaining neighbors of v at the time of deletion form a clique,
the neighbors of v on C are adjacent. Hence deleting v from the cyclic order
of vertices on C yields a shorter cycle.
5.3.24. If e is an edge of a cycle C in a chordal graph, then e forms a triangle
with a third vertex of C. We use induction on the length of C. If C is a
triangle, then we have nothing to do. If C is longer, then because the graph
is chordal there is a chord f of C. This splits C into two paths, one of which
contains e. Combining this path with f yields a shorter cycle containing
e, with all its vertices still in C. Applying the induction hypothesis to this
shorter cycle yields the desired vertex of C.
5.3.25. If Q is a maximal clique in a chordal graph G and G −Q is con-
nected, then Q contains a simplicial vertex. (Equivalently, a maximal clique
containing no simplicial vertex is a separating set.) We use induction on
n(G). When n(G) ≤2, G is a union of disjoint cliques, and the claim holds.
For n(G) ≥3, let Q be a maximal clique of G containing no simplicial ver-
tex. Let v be a simplical vertex of G, and consider G −v. Still Q is a
maximal clique in G −v.
If Q contains no simplicial vertex of G −v, then by the induction hy-
pothesis Q is a separating set of G −v. If Q is not a separating set of G,
then v has a neighbor in each component of G −v −Q, which contradicts
v being simplicial in G.
Hence we may assume that Q contains a simplicial vertex u of G −v
that is not simplicial in G. This requires v ↔u. If Q is not a separating
set, then also v has a neighbor x outside Q. Since u ↔v and v is simplicial
in G, also x ↔u. Now since x, u ∈V (G −v) and u is simplicial in G −v,
all of Q must also be adjacent to x. This contradicts the maximality of Q.
Hence Q must indeed be a separating set in G.
5.3.26. Chromatic polynomials of chordal graphs.
a) If G∪H is a chordal graph, then χ(G∪H; k) = χ(G;k)χ(H;k)
χ(G∩H;k) , regardless
of whether G ∩H is a complete graph. We use induction on n(G ∪H); the
claim is immediate when there is one vertex. When G ∪H is larger, let
v be a simplicial vertex in G ∪H.
By symmetry, we may assume that
v ∈V (G). Since NG∪H(v) is a clique, it cannot intersect both V (G) −V (H)
and V (H) −V (G), since G ∪H) has no edges joining these two sets. Hence
we may assume that NG∪H(v) ⊆V (G).
Since v is simplicial, we have χ(G ∪H; k) = (k −d(v))χ((G ∪H)−v; k).
Note that (G ∪H) −v = (G −v) ∪(H −v) and (G ∩H) −v = (G −v) ∩
(H −v).
Since (G ∪H) −v is chordal, the induction hypothesis yields
χ((G ∪H) −v; k) = χ(G−v;k)χ(H−v;k)
χ((G−v)∩(H−v);k) . Since NG∪H(v) ⊆V (G), we have χ(G −
v; k) = χ(G; k)/(k −d(v)).
If v ∈V (G) ∩V (H), then dH(v) = dG∩H(v), and v is simplicial in every
induced subgraph of G ∪H containing it, so χ(H; k)/χ(G ∩H; k) = χ(H −
v; k)/χ((G ∩H) −v; k). If v ∈V (G) −V (H), then this ratio also holds,
because in this case H −v = H and (G ∩H) −v = G ∩H.
Hence we have
χ(G ∪H; k) = (k −d(v))χ((G ∪H) −v; k)
= (k −d(v))χ(G −v; k)χ(H −v; k)
χ((G ∩H) −v; k)
= χ(G; k)χ(H; k)
χ(G ∩H; k)
b) If x is a vertex in a chordal graph G, then
χ(G; k) = χ(G −x; k)k χ(G[N(x)]; k −1)
χ(G[N(x)]; k)
.
We apply part (a) with G = F ∪H, where H = G[N(x) ∪x] and F = G −x.
Observe that F ∩H = G[N(x)]. Also, since x is adjacent to all other vertices
in H, we form all proper colorings of H by choosing a color for x and then
forming a proper coloring of H from the remaining k −1 colors. Hence
χ(H; k) = kχ(H −x; k −1) = kχ(G[N(x)]; k). Now we simply substitute
these expressions into the formula from part (a).
5.3.27. Characterization of chordal graphs by minimal vertex separators,
where a minimal vertex separator in a graph G is a set S ⊆V (G) that for
some pair x, y is a minimal set whose deletion separates x and y.
a) If every minimal vertex separator in G is a clique, then the same
property holds in every induced subgraph of G. Let H be an induced sub-
graph of G. If S is a minimal x, y-separator in H, then S ∪(V (G) −V (H))
separates x and y in G. Hence S ∪(V (G) −V (H)) contains a minimal x, y-
separator of G. Such a set T must contain S, since otherwise G−T contains
an x, y-path within H. By hypothesis, T is a clique in G, and hence S is a
clique in H.
b) A graph G is chordal if and only if every minimal vertex separator is
a clique. Necessity. For two vertices u, v in a minimal x, y-separator S, ﬁnd
shortest u, v-paths through the components of G −S containing x and y.
The union of these paths is a cycle of length at least 4, and its only possible
chord is uv. Hence the vertices in S are pairwise adjacent.
Sufﬁciency. By part (a) and induction on n(G), it sufﬁces to show that
G has a simplicial vertex if every minimal vertex separator of G is a clique.
By induction on n(G), we prove the stronger statement that if every mini-
mal vertex separator of G is a clique and G is not a clique, then G has two
nonadjacent simplicial vertices. The basis is vacuous (small cliques).
For larger G, let x1, x2 be a nonadjacent pair of vertices in G, let S be
a minimal x1, x2-separator, and let Gi be the S-lobe of G (Deﬁnition 5.2.17)

291
Chapter 5: Coloring of Graphs
Section 5.3: Enumerative Aspects
292
containing xi. Since C holds for induced subgraphs, it holds for Gi. By the
induction hypothesis, Gi has a simplicial vertex ui /∈S (whether or not Gi
is a clique). Since no edge connect V (G1) to V (G2), the vertices u1, u2 are
also simplicial in G, and they are nonadjacent in G.
5.3.28. Every interval graph is a chordal graph and is the complement of a
comparability graph. Consider an interval representation of G, with each
v represented by the interval I (v) = [a(v), b(v)]. Let v be the vertex with
largest left endpoint a(v). The intervals for all neighbors of v contain a(v),
so in the intersection graph the neighbors of v form a clique. Hence v is
simplicial. If we delete v and procede with the remainder of the representa-
tion, which is an interval representation of G −v, we inductively complete
a perfect elimination ordering.
Alternatively, let C be a cycle in G. Let u be the vertex in C whose
right endpoint is smallest, and let v be the vertex whose left endpoint is
largest. If u, v are nonadjacent, then the intervals for the two u, v-paths
in C must cover [b(u), a(v)]. Hence the intersection graph has a chord of C
between them. We conclude that an interval graph has no chordless cycle.
If uv ∈E(G), then I (u) and I (v) are disjoint. Orient the edge uv toward
the vertex whose interval is to the left. This yields a transitive orientation
of G; if I (u) is to the left of I (v), and I (v) is to the left of I (w), then I (u) is
to the left of I (w).
5.3.29. The smallest imperfect graph G such that χ(G) = ω(G). The only
imperfect graph with at most ﬁve vertices is C5. Thus the graph below is
the smallest imperfect graph with χ(G) = ω(G).
•
•
•
•
•
•
5.3.30. An edge in an acyclic orientation of G is dependent if reversing it
yields a cycle.
a) Every acyclic orientation of a connected n-vertex graph G has at least
n −1 independent edges. We use induction on n. When n = 1, we have
no edges and need none. Consider n > 1. Since the orientation has no
cycles, every maximal path starts with a source (indegree 0). Hence G has
a source v. Deﬁne a digraph H with vertex set N +(v) by putting x ↔y
in H if G has an x, y-path. Since a closed walk in the digraph G would
contain a cycle, H must be acyclic. Let x be a source in H. The edge vx is
independent; reversing it cannot create a cycle, since no path in G from v
reaches x except the edge vx itself.
Let G′ = G −v. Edges of G′ are independent if and only if they are also
independent in G, because there is no path in G through v from one vertex
of G′ to another. Also, G′ is acyclic. Hence we can apply the induction
hypothesis to G′ to obtain another n −2 independent edges.
b) If χ(G) is less than the girth of G, then G has an orientation with no
dependent edges. Given an optimal coloring f , orient edge xy from x to y if
and only if f (y) > f (x). The maximum path length in this orientation is
less than χ(G), and hence it is smaller by at least two than the length of
any cycle.
An edge in an acyclic orientation is dependent if and only if there is
another path from its tail to its head. The length of such a path would be
one less than the length of the resulting cycle, but we have shown that our
orientation has no paths this long.
5.3.31. Comparison between acyclic orientations and spanning trees. The
number τ(G) satisﬁes the recurrence τ(G) = τ(G −e) + τ(G · e). This is
the recurrence satisﬁed by a(G), but the initial conditions are different. A
graph with no edges has one acyclic orientation, but it has no spanning
tree unless it has only one vertex. A connected graph containing a loop
has spanning trees but no acyclic orientation. A tree of order n has one
spanning tree and 2n−1 acyclic orientations. A clique of order n has nn−2
spanning trees and n! acyclic orientations; nn−2 > n! if n ≥6.
5.3.32. Compatible pairs: η(G; k) = (−1)nχ(G; −k).
Suppose D is an
acyclic orientation of G and f is a coloring of V (G) from the set [k]. We
say that (D, f ) is a compatible pair if u →v in D implies f (u) ≤f (v). Let
η(G; k) be the number of compatible pairs. If f (u) ̸= f (v) for every adja-
cent pair u, v, then only one orientation is compatible with f . Therefore,
χ(G; k) counts the pairs (D, f ) under a slightly different condition: D is
acyclic and u →v in D implies f (u) < f (v) (equality forbidden). We know
that χ(G; k) = χ(G −e; k) −χ(G · e; k) for any edge of G; we claim that
η(G; k) = η(G −e; k) + η(G · e; k).
The two conditions on pairs being counted are the same when there are
no edges, so the two recurrences have the same boundary conditions: kn =
η(K n; k) = χ(K n; k). From this and the recurrence, we obtain η(G; k) =
(−1)nχ(G; k) by induction on e(G). We compute η(G; k) = η(G −e; k) +
η(G · e; k) = (−1)n(G)χ(G −e; k) + (−1)n(G)−1χ(G · e; k) = (−1)n(G)χ(G; k).
Evaluating η at 1 or χ at −1 yields (−1)nχ(G; −1). Because there is only
one labeling in which all vertices get label 1, and this is compatible with
every acyclic orientation, η(G; 1) is the number of acyclic orientations.
It remains only to prove the recurrence for η. Let e = uv. As in the re-

293
Chapter 5: Coloring of Graphs
Section 5.3: Enumerative Aspects
294
currence for the chromatic polynomial, we begin with the compatible pairs
for G −e and consider the effect of adding e. If (D, f ) is a compatible pair
for G −e such that f (u) ̸= f (v), say f (u) < f (v), then e must be oriented
from u to v to obtain an orientation of G compatible with f . The result
is indeed acyclic, else it has a directed v, u-path along which the value f
must step downward at some point. Conversely, we can delete e from a
compatible pair for G with f (u) ̸= f (v) to obtain a compatible pair for
G −e. Hence the compatible pairs with differing labels for u and v are in
1-1 correspondence in G and G −e.
Now consider pairs with f (u) = f (v). It sufﬁces to show that each
such pair for G −e becomes a compatible pair for G by adding e oriented
in at least one way, and that for η(G · e, k) of these, both orientations of e
yield compatible pairs for G. For the ﬁrst statement, consider an arbitrary
compatible pair (D′, f ) with f (u) = f (v) for G −e, and suppose neither
orientation for e yields a compatible pair for G. This requires D′ to have
both a u, v-path and a v, u-path, which cannot happen since D′ is acyclic.
For the second statement, suppose that (D, f ) is a compatible pair for G
with f (u) = f (v) and that the orientation obtained by reversing e is also
compatible with f . Then D −e has neither a u, v-path nor a v, u-path,
and contracting e yields a compatible pair for G · e. Conversely, given a
compatible pair for G · e, we can split the contracted vertex to obtain a
compatible pair for G −e with f (u) = f (v) so that orienting e in either
direction yields a compatible pair for G.

295
Chapter 6: Planar Graphs
Section 6.1: Embeddings and Euler’s Formula
296
6.PLANAR GRAPHS
6.1. EMBEDDINGS & EULER’S FORMULA
6.1.1. a) Every subgraph of a planar graph is planar—TRUE. Given a pla-
nar embedding of G, deleting edges or vertices does not introduce crossings,
so an embedding of any subgraph of G can be obtained.
b) Every subgraph of a nonplanar graph is nonplanar—FALSE. K3,3 is
nonplanar, but every proper subgraph of K3,3 is planar.
6.1.2. The graphs formed by deleting one edge from K5 and K3,3 are pla-
nar.
•
•
•
•
•
•
•
•
•
•
•
6.1.3. Kr,s is planar if and only if min{r, s} ≤2. If G contains the nonplanar
graph K3,3, then G is nonplanar; hence Kr,s is nonplanar when min{r, s} ≥
3. When min{r, s} = 2, the drawing below suggests the planar embedding,
and K1,s is a subgraph of this.
•
•
•
•
•
•
•
•
· · ·
6.1.4. The number of isomorphism classes of planar graphs that can be
obtained as planar duals of the graph below is 4.
•
•
•
•
•
•
•
The 4-cycle C can be embedded in only one way. Let e be the pendant
edge incident to it, and let f be the pendant edge incident to the triangle D.
We may assume that e immediately follows the edges D when we traverse
C clockwise, because the other choice corresponds to reﬂecting the plane,
and the resulting duals will be isomorphic to these.
We may embed e inside or outside C, we may embed D inside or outside
C, and we may embed f inside or outside D. This yields eight possible
embeddings, all with three faces. These come in pairs yielding the same
dual, because ﬂipping the choices involving C (while maintaining the same
choice of whether f is inside D) has the effect of exchanging the inside and
outside of C without affecting the dual.
In the four pairs, the resulting degree lists for the dual are (9, 4, 3),
(7, 6, 3), (7, 5, 4), and (6, 5, 5). These are distinct, so there are four isomor-
phism classes of duals.
6.1.5. A plane graph has a cut-vertex if and only if its dual has a cut-
vertex—FALSE. There are many counterexamples. The duals of trees and
unicyclic graphs have at most two vertices and hence no cut-vertices. The
duals of disconnected graphs without cut-vertices have cut-vertices.
6.1.6. A plane graph with at least three vertices is 2-connected if and only
if for every face, the bounding walk is a cycle. If multiple edges are being
allowed, the restriction to at least three vertices eliminates the cycle of
length 2.
A disconnected plane graph has a face whose boundary consists of
more than one closed walk, so we restrict our attention to a connected
plane graph G. If G has a cut-vertex x, then considering the edges incident
to x in clockwise order, there must be two consecutive edges in different
{x}-lobes. For the face incident to these two edges, the boundary intersects
more than one {x}-lobe and hence cannot be a cycle.
Now suppose that G is 2-connected. For a vertex x on the boundary of
a face F, there are points inside F near x. By the deﬁnition of “face”, all
the nearby points between two rotationally consecutive incident edges at x
are in F. Let e and e′ be two such edges. Since G is 2-connected e and e′ lie
on a common cycle C.
By the Jordan Curve Theorem and the deﬁnition of “face”, all points
interior to F are inside C, or they are all outside C. In either case, as
we follow the boundary of F after e and e′, C prevents the boundary from
visiting x again. Thus every vertex on the boundary of F is incident to
exactly two edges of the boundary, and the boundary is a cycle.

297
Chapter 6: Planar Graphs
Section 6.1: Embeddings and Euler’s Formula
298
6.1.7. Every maximal outerplanar graph with at least three vertices is 2-
connected. Let G be a planar graph embedded with every vertex on the
unbounded face. If G is not connected, then adding an edge joining vertices
of distinct components still leaves every vertex on the unbounded face. If G
has a cut-vertex v, and u and w are the vertices before and after v in a walk
around the unbounded face, then adding the edge uw still leaves every
vertex on the unbounded face, since v is visited at another point in the
walk. We have shown that an outerplanar graph that is not 2-connected is
not a maximal outerplanar graph.
6.1.8. Every simple planar graph has a vertex of degree at most 5. Every
simple planar graph with n vertices has at most 3n −6 edges (Theorem
6.1.23). Hence the degree sum is at most 6n −12, and by the pigeonhole
principle there is a vertex with degree less than 6.
6.1.9. Every simple planar graph with fewer than 12 vertices has a vertex
of degree at most 4. By Theorem 6.1.23, every simple planar graph with
n vertices has at most 3n −6 edges and degree-sum at most 6n −12. If
12 > n, then this degree sum is less than 5n, and the pigeonhole principle
implies that some vertex has degree at most 4.
6.1.10. There is no simple bipartite planar graph with minimum degree
at least 4—TRUE. Since every face of a simple bipartite planar graph has
length at least 4, it has at most 2n −4 edges and degree sum at most 4n −8.
Hence the average degree of a simple bipartite planar graph is less than 4,
and its minimum degree is less than 4.
6.1.11. The dual of a maximal planar graph is 2-edge-connected and 3-
regular. By deﬁnition, a maximal planar graph G is a simple planar graph
to which no edge can be added without violating planarity. Consider an
embedding of G. Every dual G∗is connected. If G∗has a cut-edge, then
the edge of G corresponding to this edge is a loop in G, which cannot occur
in a simple graph. Thus G∗is 2-connected.
Since G is simple, every face has length at least 3. If some face has
length exceeding 3. Let w, x, y, z be four vertices in order on this face. If
wy is an edge (outside this face), then xz cannot be an edge. Thus we can
add wy or xz, contradicting maximality. This implies that every face has
length 3, which is the statement that the dual is 3-regular.
6.1.12. Drawings of the ﬁve regular polyhedra as planar graphs, with the
octahedron as the dual of the cube and the icosahedron as the dual of the
dodecahedron. The edges incident to the vertex of the icosahedron corre-
sponding to the unbounded face of the dodecahedron are not fully drawn.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
6.1.13. Planar embedding of a graph. The drawing on the right is a planar
embedding of the graph on the left. (Of course, the isomorphism should be
given explicitly.)
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
6.1.14. For each n ∈N, there is a simple connected 4-regular planar graph
with more than n vertices—TRUE. When n ≥3, we can form a simple con-
nected 4-regular plane graph with 2n vertices by using an inner n-cycle,
an outer n-cycle, and a cycle in the region between them that uses all 2n
vertices. Below we show this for n = 8.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
6.1.15. A 3-regular planar graph of diameter 3 with 12 vertices. By inspec-
tion, the graphs below are 3-regular and planar. To show that that they

299
Chapter 6: Planar Graphs
Section 6.1: Embeddings and Euler’s Formula
300
have diameter 3, we conduct a breadth-ﬁrst search (Dijkstra’s Algorithm)
to compute distances from each vertex. By symmetry, this need only by
done for one vertex each of “type” (orbit under automorphisms). In this
sense, the rightmost graph is the best answer, since it is vertex transitive,
and the distances need only be checked from one vertex. The graph on the
left has ﬁve types of vertices, and the graph in the middle has two.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
6.1.16. An Eulerian plane graph has an Eulerian circuit with no crossings.
As the graph on the left below illustrates, it is not always possible to do this
by splitting the edges at each vertex into pairs that are consecutive around
the vertex. The ﬁgure on the right illustrates a non-consecutive planar
splitting. We give several inductive proofs. The result does not require the
graph to be simple.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
Proof 1 (induction on e(G)−n(G)). A connected Eulerian plane graph
G has at least as many edges as vertices; if e(G) = n(G), it is a single cycle
and has no crossings. If e(G) > n(G), then G has a vertex x on the outer face
with degree at least 4. Form G′ by splitting x into two vertices: a vertex y
incident to two consecutive edges of the outer face that were incident to x,
and a vertex z incident to the remaining edges that were incident to x. Lo-
cating y in the unbounded face of G yields a planar embedding of G′. Since
G′ is an even connected plane graph and e(G′) −n(G′) = e(G) −n(G) −1,
the induction hypothesis applies to G′. Since the edges incident to y are
consecutive at x, the resulting Eulerian circuit of G′ translates back into an
Eulerian circuit without crossings in G. This proof converts to an algorithm
for obtaining the desired circuit.
Proof 2 (induction on e(G)). The basis is a single cycle. If G has more
than one cycle, ﬁnd a cycle C with an empty interior. Delete its edges and
apply induction to the resulting components G1, . . . , Gk. For i = 1, . . . , k,
absorb Gi into C as follows. Find a vertex x where Gi intersects C; all
edges incident to x but not in C belong to Gi. Consider a visit e1, x, e2 that
the tour on Gi makes to x using an edge e1 next to an edge f1 of C in the
embedding. Let f2 be the other edge of C at x. Then replace the visits e1, e2
and f1, f2 by e1, f1 and e2, f2. This absorbs Gi into C while maintaining
planarity of the circuit. Each component of G −C is inserted at a different
vertex, so no conﬂicts arise.
Proof 3 (local change). Given an Eulerian circuit that has a crossing
in a plane graph G, we modify it to reduce the number of crossings formed
by pairs of visits to vertices. By symmetry, it sufﬁces to consider four edges
a, b, c, d incident to v in counterclockwise order in the embedding such that
one visit to v enters on a and leaves on c, and a later visit enters on b and
leaves on d. We eliminate this crossing by traversing the portion c, . . . , b
of the circuit in reverse order, as b, . . . , c. Crossings at other vertices are
unchanged by this operation. At v itself, if a passage e, f through v now
crosses a, b, then e, f crossed a, c or b, d before, and if it now crosses a, b
and c, d, then it crossed both a, c and b, d before. Thus there is no increase
in other crossings, and we obtain a net decrease by un-crossing a, b, c, d.
6.1.17. The dual of a 2-connected simple plane graph with minimum degree
3 need not be simple. For the 2-connected 3-regular plane graph G below,
G∗has a double edge joining the vertices of degree 6.
•
•
•
•
•
•
•
•
6.1.18. Duals of connected plane graphs.
a) If G is a plane graph, then G∗is connected. One vertex of G∗is placed
in each face of G. If u, v ∈V (G∗), then any curve in the plane between u and
v (avoiding vertices) crosses face boundaries of G in its passage from the
face of G containing u to the face of G containing v. This yields a u, v-walk
in G∗, which contains a u, v-path in G∗.
b) If G is connected, and G∗is drawn by placing one vertex inside each
face of G and placing each dual edge in G∗so that it intersects only the
corres ponding edge in G, then each face of G∗contains exactly one vertex
of G. The edges incident to a vertex v ∈V (G) appear in some order around
v. Their duals form a cycle in G∗in this order. This cycle is a face of G∗. If
w is another vertex of G, then there is a v, w-path because G is connected,
and this path crosses the boundary of this face exactly once. Hence every

301
Chapter 6: Planar Graphs
Section 6.1: Embeddings and Euler’s Formula
302
face of G∗contains at most one vertex of G. Equality holds because the
number of faces of G∗equals the number of vertices of G: since both G and
G∗are connected, Euler’s formula yields n −e + f = 2 and n∗−e∗+ f ∗= 2.
We have e = e∗and n∗= f by construction, which yields f ∗= n.
c) For a plane graph G, G∗∗∼= G if and only if G is connected. Since G∗∗
is the dual of the plane graph G∗, part (a) implies that G∗∗is connected.
Hence if G∗∗is isomorphic to G, then G is connected.
Conversely, suppose that G is connected. By part (b), the usual draw-
ing of G∗over the picture of G has exactly one vertex of G inside each face
of G∗. Associate each vertex x ∈V (G) with the vertex x ′ of G∗∗contained
in the face of G that contains x; by part (b), this is a bijection.
Consider xy ∈E(G). Because the only edge of G∗crossing xy is the
edge of G∗dual to it, we conclude that the faces of G∗that contain x and
y have this edge as a common boundary edge. When we take the dual
of G∗, we thus obtain x′y′ as an edge.
Hence the vertex bijection from
G to G∗∗that takes x to x′ preserves edges. Since the number of edges
doesn’t change when we take the dual, G∗∗has no other edges and thus is
isomorphic to G.
6.1.19. For a plane graph G, a set D ⊆E(G) forms a cycle in G if and only
if the corresponding set D∗⊆E(G∗) forms a bond in G∗, by induction on
e(G). We prove also that if D forms a cycle, then the two sides of the edge
cut that is the bond in G∗corresponding to D are the sets of dual vertices
corresponding to the sets of faces inside and outside D.
Basis step: e(G) = 1. When G and G∗have one edge, in one it is a loop
(a cycle), and in the other it is a cut-edge (a bond).
Induction step: e(G) > 1. If D is a loop or a cut-edge, then the state-
ment holds. Otherwise, D has more than one edge. If D forms a cycle,
then let e be an edge of the cycle, and let G′ be the graph obtained from G
by contracting e. In G′, the contracted set D′ forms a cycle. Also, the set
of faces in G′ is the same as the set of faces in G; the only change is that
the lengths of the faces bordering e (there are two of them since e is not a
cut-edge) have shrunk by 1.
Since e(G′) = e(G) −1, the induction hypothesis implies that in the
dual (G′)∗, the edges dual to D′ form a bond, and the sets of vertices sepa-
rated by the bond are those corresponding to the faces inside and outside
D. By Remark 6.1.15, the effect of contracting e in G was to delete e∗from
G∗. Since e∗joins vertices for faces that are inside and outside D, replac-
ing it would reconnect G∗. Hence D∗forms a bond as claimed, and the sets
of vertices on the two sides are as claimed.
Now consider the induction step for the converse. We assume that
D∗forms a bond, so D∗−e∗forms a bond in G∗−e∗separating the same
two vertex sets that D∗separates in G∗. By Remark 6.1.15, G∗−e∗is the
dual of G′, and the edges of D∗−e∗are the duals to D′. By the induction
hypothesis, D′ forms a cycle in G′, and the two sides of the bond D∗−e∗in
G∗−e∗correspond to the faces inside and outside D′. Since e∗joins vertices
from these two sets, e (when we re-expand it in G) must bound faces from
these two sets. With D being the boundary between two sets of faces, we
can argue that D is a cycle.
6.1.20. A plane graph is bipartite if and only if every face length is even. A
face of G is a closed walk, and an odd closed walk contains an odd cycle, so
a bipartite plane graph has no face of odd length.
Conversely, suppose that every face length is even; we prove by induc-
tion on the number of faces that G is bipartite. If G has only one face, then
by the Jordan Curve Theorem G is a forest and is bipartite.
If G has more than one face, then G has an edge e on a cycle. This edge
belongs to two faces F1, F2 of even length; these faces are distinct because
the cycle embeds as a closed curve, and by the Jordan Curve Theorem the
regions on the inside and outside are distinct. Thus deleting e yields a
combined face F whose length is the sum of the lengths of F1 and F2, less
two for the absence of e from each. Hence F has even length. Lengths of
other faces remain the same. Thus every face of G −e has even length, and
we apply the induction hypothesis to conclude that G −e is bipartite.
To show that G also is bipartite, we replace e. Since F1 has even length,
there is an odd walk in G −e connecting the endpoints of e, so they lie in
opposite parts of the bipartition of G −e. Hence when we add e to return
to G, the graph is still bipartite.
(Comment: Since we deleted one edge to obtain G −e, we could phrase
this as induction on e(G). Then we must either put all forests into the basis
step or consider the case of a cut-edge in the induction step.)
6.1.21. A set of edges in a connected plane graph G forms a spanning tree
of G if and only if the duals of the remaining edges form a spanning tree of
G∗. Since (G∗)∗= G when G is connected, it sufﬁces to prove one direction
of the equivalence; the other direction is the same statement applied to G∗.
Let T be a spanning tree of G, where G has n vertices and f faces. Let T ∗
be the spanning subgraph of G∗consisting of the duals of the remaining
edges; T ∗has f vertices.
Proofs 1, 2, 3. (Properties of trees). It sufﬁces to prove any two of (1)
T ∗has f −1 edges, (2) T ∗is connected, (3) T ∗is acyclic.
(1) By Euler’s Formula, e(G) = n + f −2; hence if T has n −1 edges
there are f −1 edges remaining.
(2) Since T has no cycles, the edges dual to T contain no bond of G∗(by
Theorem 6.1.14). Hence T ∗is connected.

303
Chapter 6: Planar Graphs
Section 6.1: Embeddings and Euler’s Formula
304
(3) Since T is spanning and connected, the remaining edges contain no
bond of G. Thus T ∗contains no cycle in G∗(by Theorem 6.1.14 for G∗).
Proof 4 (extremality and duality). A spanning tree of a graph is a min-
imal connected spanning subgraph. “Connected” is equivalent to “omits no
bond” (see Exercise 4.1.29). Hence the remaining edges form a maximal
subgraph containing no bond. By Theorem 6.1.14, the duals of the remain-
ing edges form a maximal subgraph of G∗containing no cycle. A maximal
subgraph of G∗containing no cycle is a spanning tree of G∗.
Proof 5 (induction on the number of faces). If G has one face, then G
is a tree, G∗= K1, and T ∗is empty and forms a spanning tree of G∗. If G
has more than one face, then G is not a tree, and hence G has an edge e not
in the given tree T . Since e lies on a cycle (in T + e) and is not a cut-edge,
G −e is a connected plane graph with one less face. Let G′ = G −e.
The induction hypothesis implies that the duals of E(G′) −E(T ) form
a spanning tree in (G′)∗. Note that (G −e)∗= G∗· e∗; we obtain the dual
of G′ by contracting the edge dual to e in G∗. Returning to G keeps e∗in
E(G) −E(T ), so what happens to the duals of the edges outside T is that
the vertex of (G −e)∗representing the two faces that merged when e was
deleted splits into two vertices joined by e∗. This operation turns a tree
into a tree with one more vertex, and it has all the vertices of G∗, so it is a
spanning tree.
6.1.22. The weak dual of an outerplane graph is a forest. A cycle in the
dual graph G∗passes through faces that surround a vertex of G. When
every vertex of G lies on the unbounded face, every cycle of G∗therefore
passes through the vertex v∗of G∗that represents the unbounded face in
G. Hence G∗−v∗is a forest when G is an outerplane graph.
6.1.23. Directed plane graphs. In following an edge from tail to head, the
dual edge is oriented so that it crosses the original edge from right to left.
a) If D is strongly connected, then D∗has no directed cycle. Such a cycle
C∗encloses some region R of the plane. Let S be the set of vertices of D
corresponding to the faces of D∗contained in R. Since C∗has a consistent
orientation, the construction implies that all the edges of D corresponding
to C∗are oriented in the same direction across C ∗(entering R or leaving
R). This contradicts the hypothesis that D is strongly connected.
b) If D is strongly connected, then δ−(D∗) = δ+(D∗) = 0. A ﬁnite acyclic
directed graph has δ−= δ+ = 0, because the initial vertex of a maximal
directed path can have no entering edge, and the terminal vertex of such a
path can have no exiting edge.
c) If D is strongly connected, then D has a face on which the edges form
a clockwise directed cycle and a face on which the edges form a counter-
clockwise directed cycle. A vertex of D∗with indegree 0 corresponds to a
face of D on which the bounding edges must form a clockwise directed cycle,
and a vertex of D∗with outdegree 0 corresponds to a face of D on which
the edges must form a counter-clockwise directed cycle.
6.1.24. Alternative proof of Euler’s Formula.
a) Faces of trees. Given a planar embedding of a tree, let x, y be two
points of the plane not in the embedding. If the segment between them does
not intersect the tree, then x and y are in the same face. If the segment
does intersect the tree, then we create a detour for it closely following the
embedding. Induction on the number of vertices yields a precise proof that
this is possible. Using the detour yields a polygonal x, y-path that does not
cross the embedding, so again x and y are in the same face.
b) Euler by edge-deletion. Euler’s formula states that for a connected
n-vertex plane graph with m edges and f faces, n −m + f = 2. If every
edge of such a graph is a cut-edge, then the graph is a tree. This implies
m = n −1 and f = 1, in which case the formula holds. For an induction
on e, we need only consider graphs that are not trees in the induction step.
Such a graph G has an edge that is not a cut-edge. If e lies on a cycle, then
both the interior and the exterior of the cycle have e on their boundary,
and hence e is on the boundary of two faces. Therefore, deleting e reduces
the number of faces by one but does not disconnect G. By the induction
hypothesis, n −(m −1) + ( f −1) = 2, and hence also n −m + f = 2.
6.1.25. Every self-dual plane graph with n vertices has 2n −2 edges. If
G is isomorphic to G∗, then G must have the same number of vertices as
faces. Euler’s formula then gives n −e + n = 2 (and hence e = 2n −2) if G
is connected. Every self-dual graph is connected, because the dual of any
graph contains a path to the vertex for the outside face of the original.
For every n ≥4, the n-vertex “wheel” is self-dual. This is a cycle on
n −1 vertices, plus an nth vertex joined to all others. The triangular faces
becomes a cycle, and each is adjacent to the remaining face; this is the
same description as the original graph.
•
•
•
•
•
•
•
•
•
•
•
•
•
6.1.26. The maximum number of edges in a simple outerplanar graph of
order n is 2n −3. For the lower bound, we provide a construction. A simple

305
Chapter 6: Planar Graphs
Section 6.1: Embeddings and Euler’s Formula
306
cycle on n vertices together with the chords from one vertex to the n −3
vertices not adjacent to it on the cycle forms an outerplanar graph with
2n −3 edges. For the upper bound, we give three proofs.
a) (induction on n). When n = 2, such a graph has at most 1 edge,
so the bound of 2n −3 holds. When n > 2, recall from the text that every
simple outerplanar graph G with n vertices has a vertex v of degree at most
two. The graph G′ = G −v is an outerplanar graph with n −1 vertices;
by the induction hypothesis, e(G′) ≤2(n −1) −3. Replacing v restores at
most two edges, so e(G) ≤2n −3.
b) (using Euler’s formula). The outer face in an outerplanar graph has
length at least n, since each vertex must be visited in the walk traversing
it. The bounded faces have length at least 3, since the graph is simple.
With { fi} denoting the face-lengths, we have 2e(G) = P fi = n + 3( f −1),
where f is the number of faces. Substituting f = e −n + 2 from Euler’s
formula yields 2e = n + 3(e −n + 1), or e(G) = 2n −3. (Comment: If one
restricts attention to a maximal outerplanar graph, then equality holds in
both bounds: the outer face is a spanning cycle, and the bounded faces are
triangles.)
c) (graph transformation). Add a new vertex in the outer face and an
edge from it to each vertex of G. This produces an n + 1-vertex planar
graph G′ with n more edges than G. Since e(G′) ≤3(n + 1) −6 edges, we
have e(G) ≤3(n + 1) −6 −n = 2n −3.
Comment: If G has no 3-cycles, then the bound becomes (3n −4)/2.
6.1.27. A 3-regular plane graph G with each vertex incident to faces of
lengths 4,6, and 8 has 26 faces. Let n be the number of vertices in the
graph. Since each vertex is incident to one face of length 4, one face of
length 6, and one face of length 8, there are n incidences of vertices with
faces of each length. Since every face of length l is incident with l vertices,
there are thus n/4, n/6, and n/8 faces of lengths 4, 6, 8, respectively. Hence
there are n( 1
4 + 1
6 + 1
8) faces.
Also, the graph is 3-regular, it has 3n/2 edges. By Euler’s formula,
n −3
2n + n 13
24 = 2. Multiplying by 24 yields (−12 + 13)n = 48, so n = 48.
Hence the number of faces is 48 13
24.
6.1.28. When m chords with distinct endpoints and no triple intersections
form p points of intersection inside a convex region, the region is cut into
m+ p+1 smaller regions. Form a planar graph G by establishing a vertex at
each of the p points of intersection and at each endpoint of each chord. The
2m endpoints of chords have degree 3 in G, and the p points of intersection
have degree 4. By the degree-sum formula, G has 3m + 2p edges. Since
it has 2m + p vertices, Euler’s Formula yields m + p + 1 as the number of
bounded regions.
6.1.29. Complements of planar graphs.
a) The complement of each simple planar graph with at least 11 vertices
is nonplanar. A planar graph with n vertices has at most 3n −6 edges.
Hence each planar graph with 11 vertices has at most 27 edges. Since
K11 has 55 edges, the complement of each planar subgraph has at least 28
edges and is non-planar. For n(G) > 11, any induced subgraph with 11
vertices shows that G is nonplanar. There is also no planar graph on 9 or
10 vertices having a planar complement, but the easy counting argument
here is not strong enough to prove that.
b) A self-complementary planar graph with 8 vertices.
•
•
•
•
•
•
•
•
1
2
3
4
5
6
7
8
•
•
•
•
•
•
•
•
6
1
4
7
2
5
8
3
The example below has a different degree sequence.
•
•
•
•
•
•
•
•
d
4
1
a
3
c
b
2
•
•
•
•
•
•
•
•
3
a
c
1
b
4
2
d
The graph below is planar and has the same degree sequence as that
above, but it is not self-complementary.
•
•
•
•
•
•
•
•
6.1.30. A 2-edge-connected n-vertex planar graph G with no cycle of length
less than k has at most (n −2)k/(k −2) edges. Since adding edges will
make G connected without reducing face lengths, we may assume that G is

307
Chapter 6: Planar Graphs
Section 6.1: Embeddings and Euler’s Formula
308
connected. Consider an embedding of G in the plane. Each face length is at
least k, and each edge contributes twice to boundaries of faces. Therefore,
counting the appearances of edges in faces grouped according to the e edges
or according to the f faces yields 2e ≥k f .
Since G is connected, we can apply Euler’s formula, n −e + f = 2.
Substituting for f in the inequality yields 2e ≥k(2 −n + e) and thus e ≤
k(n −2)/(k −2). Note that when k = 2, multiple edges are available, and
there is no limit on the number of edges.
The Petersen graph has 10 vertices, 15 edges, and girth 5. It has girth
5, so the size of a planar subgraph is at most ⌊5 · 8/3⌋, which equals 13.
Since 15 > 13, the Petersen graph is not planar, and at least two edges
must be deleted to obtain a planar subgraph. The ﬁgure below shows that
deleting two edges sufﬁces.
•
•
•
•
•
•
•
•
•
•
6.1.31.
The simple graph G with vertex set v1, . . . , vn and edge set
{vivj: |i −j| ≤3} is a maximal planar graph. The maximal planar graphs
with n vertices are the simple n-vertex planar graphs with 3n −6 edges, so
it sufﬁces to prove by induction that G is a planar graph with 3n −6 edges.
To facilitate the induction, we prove the stronger statement that G has a
planar embedding with all of {vn−2, vn−1, vn} on one face.
Basis step: n = 3. The triangle has 3 · 3 −6 edges and has such an
embedding.
Induction step: n > 3. The graph G′ obtained by deleting vertex n from
G is the previous graph. By the induction hypothesis, it has 3(n −1) −6
edges and has an embedding with {vn−3, vn−2, vn−1} on one face. We add
edges from vn to these vertices to obtain G. Thus e(G) = 3n −6. To embed
G we place vn inside the face of the embedding of G′ having {vn−3, vn−2, vn−1}
on its boundary. When we add the edges from n to those vertices to complete
the embedding, we form a face with {vn−2, vn−1, vn} on the boundary.
The resulting embedding is illustrated below, with the bold path be-
ing v1, . . . , vn in order. The special face remains the outside face as the
induction proceeds.
•
•
•
•
•
•
•
•
•
6.1.32. If G is a maximal plane graph, and S is a separating 3-set of G∗,
then G∗−S has two components. A maximal plane graph is a triangula-
tion and has no loops or multiple edges. Hence its dual is 3-regular and
3-edge-connected. The connectivity of a 3-regular graph equals its edge-
connectivity (Theorem 4.1.11). If G∗has a separating 3-set S, then it is a
minimal separating set, and each vertex of S has a neighbor in each com-
ponent of G∗−S. Extract a portion of a spanning tree in each component of
G∗−S that links the chosen neighbors of S. Combine these with the edges
from S to the chosen neighbors. If G∗−S has at least three components,
then we obtain a subdivision of K3,3. Since G∗is planar, we conclude that
G∗−S has at most two components.
6.1.33. If G is a triangulation, and ni is the number of vertices of degree i
in G, then P(6−i)ni = 12. A triangulation with n vertices has 3n −6 edges
and hence degree-sum 6n −12. The sum P ini also equals the degree-sum.
Hence 6(P ni) −12 = P ini, as desired.
6.1.34. An inﬁnite family of planar graphs with exactly twelve vertices of
degree 5. Begin with (at least two) concentric 5-cycles; call these “rungs”.
For each consecutive pair of rungs, add the edges of a 10-cycle in the region
between the two 5-cycles. Inside the innermost rung, place a single vertex
adjacent to the 5 vertices of the rung. Outside the outermost rung, place a
single vertex adjacent to the 5 vertices of the rung. The vertices of degree
5 are the innermost vertex, the outermost vertex, and the vertices of the
innermost and outermost rungs. The other vertices have degree 6. The
case with exactly two 5-cycles is the icosahedron.
6.1.35. Every simple planar graph with at least four vertices has at least
four vertices with degree less than 6. It sufﬁces to prove the result for max-
imal planar graphs, since deleting an edge from a graph cannot make the
statement become false. Let G be a maximal planar graph with n vertices.

309
Chapter 6: Planar Graphs
Section 6.2: Characterization of Planar Graphs
310
In a maximal planar graph with at least four vertices, every vertex has
degree at least 3.
The sum of the vertex degrees is 6n−12. Therefore, the sum of 6−d(v)
over the vertices with degree less than 6 is at least 12. Since δ(G) ≥3, each
term contributes at most 3, so we must have at least four such vertices.
For each even value of n with n ≥8, there is an n-vertex simple pla-
nar graph G that has exactly four vertices with degree less than 6. By the
analysis above, such a graph must be a triangulation with four vertices of
degree 3 and the rest of degree 6.
The graph sketched below has eight vertices. If we extend the two half-
edges at the left and right to become a single edge, then we have the desired
8-vertex graph. To enlarge the graph, we could instead place vertices at
the ends of the two half-edges, make them adjacent also to the top and
bottom vertices, and extend half-edges from the top and bottom. If those
half-edges become a single edge, then we have the desired 10-vertex graph.
Otherwise, we can continue adding pairs of vertices to obtain the sequence
of examples.
•
•
•
•
•
•
•
•
6.1.36. If S is a set of n points in the plane such that the distance in the
plane between any pair of points in S is at least 1, then there are at most
3n −6 pairs for which the distance is exactly 1. If two unit-distances cross,
then one of the other distances among these four points is less than 1.
Hence the condition implies that the graph of unit distances is a planar
graph with n vertices. A planar graph with n vertices has at most 3n −6
edges.
6.1.37. Given integers k ≥2, l ≥2, and kl even, there is a planar graph
with exactly k faces in which every face has length l. (For l = 1 and k > 2,
this does not work.) When l > 1 and k is even, use two vertices with degree
k joined by k paths of lengths ⌈l/2⌉and ⌊l/2⌋(alternating) through vertices
of degree 2. Each face is formed by a path of length ⌈l/2⌉and a path of
length ⌊l/2⌋. When k is odd, l is even and ⌈l/2⌉= ⌊l/2⌋, so k paths of this
length sufﬁce.
6.2. CHAR’ZN OF PLANAR GRAPHS
6.2.1. The complement of the 3-dimensional cube Q3 is nonplanar. The
vertices of Q3 are the binary triples. Those with an odd number of 1s form
an independent set, as do those with an even number of 1s. Each vertex is
adjacent to three in the other independent set. Hence Q3 consists of two 4-
cliques with a matching between them. This graph contains a subdivision
of K5 in which four branch vertices lie in one of the 4-cliques.
•
•
•
•
•
•
•
•
6.2.2. Nonplanarity of the Petersen graph.
a) via Kuratowski’s Theorem. Since the Petersen graph has no vertices
of degree at least 4, it contains no K5-subdivision. Below we show a K3,3-
subdivision.
•
•
•
•
•
•
•
•
•
•
b) via Euler’s Formula. To apply Euler’s formula, assume a planar
embedding. Since the Petersen graph has no cycle of length less than 5,
each face has at least 5 edges on its boundary. Each edge contributes twice
to boundaries of faces. Counting the appearances of edges in faces grouped
by edges or by faces yields 2e ≥5 f . Since the graph is connected, Euler’s
formula yields n −e + f = 2. Substituting for f in the inequality yields
2e ≥5(2 −n + e), or e ≤(5/3)(n −2). For the Petersen graph, 15 ≤(5/3)8
is a contradiction.
c) via the planarity-testing algorithm. We may start with any cycle.
When we start with a 9-cycle C as illustrated, every C-fragment can go
inside or outside, so we can pick one of the chords and put it inside. Now
the other two chords can only go outside, but after embedding one of them,
the remaining chord cannot go on any face. This occurs because this cycle
has three pairwise crossing chords.

311
Chapter 6: Planar Graphs
Section 6.2: Characterization of Planar Graphs
312
6.2.3. A convex embedding. This is the graph of the icosahedron. It is
3-connected and has a convex embedding in the plane.
•
•
•
•
•
•
•
•
•
•
•
•
6.2.4. Planarity of graphs.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
The ﬁrst graph is planar; a straight-line embedding with every face
convex appears below. The second graph is nonplanar. It has many sub-
graphs that are subdivisions of K3,3; one is shown below.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
6.2.5. The minimum number of edges that must be deleted from the Petersen
graph to obtain a planar subgraph is 2. The drawing on the left below
illustrates a subdivision of K3,3 in the Petersen graph. Since this does not
use every edge of the Petersen graph, the graph obtained by deleting one
edge from the Petersen graph is still nonplanar (all edges are equivalent,
by the disjointness description of the Petersen graph).
Deleting two edges from the Petersen graph yields a planar subgraph
as shown on the right below.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
6.2.6. Fary’s Theorem.
a) Every simple polygon with at most 5 vertices contains a point that
sees every point in the polygon.
In a convex polygon, by deﬁnition, the
segment joining any pair of points lies entirely in the polygon. Hence every
point in a convex polygon sees the entire polygon.
Proof 1. If a 4-gon is not convex, then the vertex opposite the interior
reﬂex angle (exceeding 180 degrees) sees the entire polygon. A non-convex
pentagon has one or two reﬂex angles, and if two they may be consecutive
or not. The cases are illustrated below.
•
•
•
Proof 2. Triangulate the polygon by adding chords between corners
that can see each other. This can be done by adding one chord to a 4-gon
and by adding two to a 5-gon, with cases as illustrated above. The resulting
triangles have one common vertex. Since a corner of a triangle sees the
entire triangle, the common corner sees the entire region.
b) Every planar graph has a straight-line embedding. By induction on
n(G), we prove the stronger statement that the edges of any plane graph
G can be “straightened” to yield a straight-line embedding of G without
changing the order of incident edges at any vertex. The statement is true
by inspection for n(G) ≤3.
For n(G) ≥4, we may assume that G is a triangulation, since any
plane graph can be augmented to a maximal plane graph, and deleting
extra edges in a straight-line embedding of the maximal planar supergraph
yields a straight-line embedding of the original graph. Every planar graph
has a vertex of degree at most 5; let x be such a vertex in G.
Since G is a triangulation, the neighborhood of G is a cycle C, and
G −x has C as a face boundary. By the induction hypothesis, G −x has
a straight-line embedding with C as a polygonal face boundary. By part

313
Chapter 6: Planar Graphs
Section 6.2: Characterization of Planar Graphs
314
(a), we can place x at a point inside C and draw straight lines from x to all
vertices of C without crossings.
6.2.7. G is outerplanar if and only if G contains no subdivision of K4 or
K2,3. Let G′ = G ∨K1 denote the graph obtained by from G by adding a
single vertex x joined to all vertices of G. Then G has an embedding with
all vertices on a single face ⇔G′ is planar ⇔G′ has no subdivision of K5
or K3,3 ⇔G has no subdivision of K4 or K2,3.
Additional details for these statements of equivalence:
1) If G is outerplanar, then we place x in the unbounded face of an out-
erplanar embedding of G and join it to all vertices on the face to obtain a
planar embedding of G′. Conversely, if G′ is planar, then it has a planar
embedding in which x lies on the unbounded face. Deleting x from this
embedding yields an outerplanar embedding of G, because it has an unob-
structed curve from each vertex to the point that had been occupied by x
and is now in the unbounded face.
2) Kuratowski’s Theorem.
3) If G has a subdivision of K4 or K2,3, then adding x as a additional
branch vertex yields a subdivision of K5 or K3,3 in G′. Conversely, if G′ has
a subdivision F of K5 or K3,3, then deleting x destroys at most one branch
vertex or one path of F, which leaves a subdivision of K4 or K2,3 in G.
6.2.8. Every 3-connected graph with at least 6 vertices that contains a sub-
division of K5 also contains a subdivision of K3,3. Let H be a K5-subdivision
in G, with branch vertices x, y, t, u, v. If H itself has only ﬁve vertices, then
G has another vertex p, and G has a p, V (H)-fan of size 3. By symmetry,
we may assume that the paths of the fan arrive at x, y, t. Then G has a
subdivision of K3,3 with branch vertices x, y, t in one partite set and p, u, v
in the other partite set.
If H has more than ﬁve vertices, then by symmetry we may assume
that the x, y-path P in H has length at least two. Since G is 3-connected,
G −{x, y} has a shortest path Q from V (P)−{x, y} to V (H)−V (P). Let the
endpoints of Q be p on P and q in H ′ = H −V (P). If q is on the cycle in H ′
through t, u, v, then by symmetry we may assume q is on the branch path
between u and v and not equal to u. In H ∪Q we now have a subdivision
of K3,3 with branch vertices x, y, q in one partite set and p, t, u in the other
partite set. On the other hand, if q is not on the cycle through t, u, v, then
by symmetry we may assume q is on the x, t-path in H ′ (and not equal to
x). Now H ∪Q has a subdivision of K3,3 with branch vertices x, y, t in one
partite set and p, u, v in the other partite set.
•
•
•
•
•
•
t
y
v
u
x
p
•
•
•
•
•
•
•q
t
y
v
u
x
p
•
•
•
•
•
•
•
q
t
y
v
u
x
p
6.2.9. For n ≥5, the maximum number of edges in a simple planar n-vertex
graph not having two disjoint cycles is 2n −1. For the construction, begin
with a copy of P3 and n −5 isolated vertices. Add two vertices x, y adjacent
to all of these and each other. In a set of pairwise-disjoint cycles, at most
one cycle can avoiding using both x and y, so no two cycles are disjoint.
The number of edges is 2 + 2(n −2) + 1 = 2n −1.
For the upper bound, we use induction on n. Basis step (n = 5): There
is no 5-vertex planar graph with 10 edges, so the bound holds.
Induction step (n ≥6): We need only consider a planar graph G with
exactly 2n edges and no disjoint cycles. If any vertex has degree at most 2,
then we delete it and apply the induction hypothesis to the smaller graph.
Hence δ(G) ≥3. Since G is planar, e(G) ≥2n −4 forces a triangle on some
set S ⊆V (G). Since G does not have disjoint cycles, G −S is a forest H.
If H has three isolated vertices, then δ(G) ≥3 yields a copy of K3,3
with S as a partite set. Hence H has a nontrivial component.
Main case. If x, y are vertices in a nontrivial component of H, and z
is a vertex of H not on the unique x, y-path, and z has two neighbors in S
other than a vertex of N(x) ∩N(y), then we form one cycle using the x, y-
path in H and a vertex of N(x) ∩N(y), and we form a second cycle using z
and the rest of S.
Any two vertices of degree 1 in H have a common neighbor in S. If
H has an isolated vertex z, then using two leaves x, y from a nontrivial
component of H yields the main case. Hence H has no isolated vertex.
Suppose that H has a component with at least three leaves x, y, z. If
x and y both have a neighbor in S outside N(z), then the main case occurs.
Otherwise, symmetry yields N(y) ∩S = N(z) ∩S, and the main case occurs
unless x, y, z all have the same two neighbors in S.
Now G contains a
subdivision of K3,3 with one partite set being {x, y, z} and the other consist
of their two common neighbors in S and the vertex that is the common
vertex of the x, y-, y, z-, and z, x-paths in H. Hence every component of H
is a nontrivial path.
If any component of H has endpoints with a common neighbor in S
distinct from a common neighbor of the endpoints of another component,
then we obtain two disjoint cycles. Hence there is a single vertex t ∈S that

315
Chapter 6: Planar Graphs
Section 6.2: Characterization of Planar Graphs
316
is adjacent to all endpoints of components in H. In each component the
two ends have distinct second neighbors in S; otherwise n(G) ≥6 yields
the main case.
If H has at least two components, we now form one cycle using one
component of H plus t and another cycle using another component of H
plus the rest of S. Hence H is a single path.
If any internal vertex u of H has a neighbor w in S other than t, then
let v be the leaf of H that also neighbors w. We now obtain one cycle using
w and the u, v-path in H, and we obtain another cycle using the other
endpoint of that component of H plus S −{w}. Hence every internal vertex
in H is adjacent only to t in S.
We now have determined H exactly. Every cycle in H contains t or
avoids only t. In fact, G is the wheel Cn−1 ∨K1, where K1 is the vertex
t.
However, this graph has only 2n −2 edges.
This ﬁnal contradiction
completes the proof.
6.2.10. Simple n-vertex graphs containing no K3,3-subdivision. Let f (n) be
the maximum number of edges in such a graph.
a) If n −2 is divisible by 3, then f (n) ≥3n −5. We form G by past-
ing together (n −2)/3 copies of K5 as shown. Since K3,3 is 3-connected, a
subdivision of K3,3 cannot have branch vertices in different S-lobes when
|S| = 2. This conﬁnes the branch vertices to a single S-lobe and yields an
inductive proof that this graph has no K3,3-subdivision.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
b) f (n) = 3n −5 when n −2 is divisible by 3, and otherwise f (n) =
3n −6 (for n ≥2). Note that f (n) ≥3n −6 for all n by using maximal
planar graphs. For the upper bound, we use induction on n, checking the
small cases (2 ≤n ≤5) by inspection.
If e(G) ≥3n −5, then G is nonplanar. By Kuratowski’s Theorem, G
contains a subdivision of K5 or K3,3. If G is 3-connected, then a subdivision
of K5 also yields a subdivision of K3,3, by Exercise 6.2.8. Hence we may
assume that G has a separating 2-set S. We avoid a K3,3-subdivision in G
if and only if each S-lobe with the addition of the edge joining the vertices of
S has no such subdivision. Since we are maximizing e(G), we may assume
that this edge is present in G.
Now the number of edges and existence of K3,3-subdivisions is unaf-
fected by how we add the S-lobes. If there are more than two, then we can
paste one onto an edge in one of the other S-lobes and maintain the same
properties. Hence we may assume that there are only two S-lobes.
Let the two S-lobes have n1 and n2 vertices, repectively. The induction
hypothesis yields e(G) ≤f (n1) + f (n2) −1. Since n1 + n2 = n + 2 and we
count the shared edge only once, this total is 3n −c, where c depends on
the congruence classes of n and n1 modulo 3. If n1 and n2 are congruent to 2
modulo 3, then the sum is 3n1 −5 + 3n2 −5 −1 = 3n −5. In other cases, at
least one of the contributions is smaller by one. Hence 3n −5 is achievable
only when n ≡2 (mod 3), and otherwise 3n −6 is an upper bound.
Comment. When n −2 is divisible by 3, the only way to achieve the
bound is by pasting together copies of K5 at edges.
6.2.11. If 1(H) ≤3, then a graph G contains a subdivision of H if and
only if G contains a subgraph contractible to H. A H-subdivision in G is a
subgraph of G contractible to H, so the condition is necessary.
For the converse, it sufﬁces to show that if H ′ is contractible to H then
H ′ contains a subdivision of H.
Proof 1. In contracting H ′ to H, each vertex of H arises by contracting
the edges in some connected subgraph of H ′. Let Tv be a spanning tree of
the subgraph that is contracted to v. Since 1(H) ≥3, at most three edges
of H depart from Tv. Let T ′
v be the union of the paths in Tv that connect the
vertices of Tv from which edges of H depart. In particular, if x, y, z are the
vertices of departure for the paths leaving Tv, we can let T ′
v be the x, y-path
P in Tv plus the path in Tv from z to P. Discard from H ′ all edges except
those of each T ′
v and those that in the paths that contract to edges of H.
The remaining graph is a subdivision of H in H ′.
Proof 2. An alternative proof follows the process from H (that is, K3,3)
itself back to G, undoing the sequence of deletions and contractions (in the
reverse order), keeping only a graph that is a subdivision of H and at the
end is H ′, a subdivision of H contained in G. Deletions are undone by do-
ing nothing (don’t add the edge back). Undoing a contraction is splitting
a vertex v. At most three edges incident to v have been kept in the cur-
rent subdivision of H. If u and w are the adjacent vertices resulting from
the split, then at least one of them, say w, inherits at most one of these im-
portant edges. Keeping that edge and the edge uw allows u to become the
vertex playing the role of v in the subdivision, with the same number of
paths entering as entered v, going to the same places. If a path went off
along an edge now incident to w, then that path is one edge longer.
Comment. The claim fails for graphs with maximum degree 4. Con-
sider the operation of vertex split, which replaces a vertex x with two new
adjacent vertices x1 and x2 such that each former neighbor of x is adjacent
to x1 or x2. Contracting the edge x1x2 in the new graph produces the origi-
nal graph. In applying a split to a vertex x of degree 4, the two new vertices
may each inherit edges to two of the neighbors of x and thus wind up with

317
Chapter 6: Planar Graphs
Section 6.2: Characterization of Planar Graphs
318
degree 3. If H has maximum degree 4, then applying vertex splits to ver-
tices of maximum degree can produce a graph G in which each new vertex
has degree at most 3. This graph G has H as a minor, but G contain no
H-subdivision since G has no vertex of degree 4.
6.2.12. Wagner’s characterization of planar graphs. The condition is that
neither K5 nor K3,3 can be obtained from G by performing deletions and
contractions of edges.
a) Deletion and contraction of edges preserve planarity. Given an em-
bedding of G, deleting an edge cannot introduce a crossing. Also, there is
a dual graph G∗. Contracting an edge e in G has the effect of deleting the
dual edge e∗in G∗. In other words, G∗−e∗is planar, and G · e is its planar
dual, so G · e is also planar. Alternatively, one can follow the transforma-
tion that shrinks one endpoint of e continuously into the other and argue
that at no point is a crossing introduced.
Since deletion and contraction preserve planarity and K5 and K3,3 are
not planar, we cannot obtain these graphs from a planar graph by deletions
and contractions. Hence the condition is necessary.
b) Kuratowski’s Theorem implies Wagner’s Theorem. We prove sufﬁ-
ciency by proving the contrapositive: if G is nonplanar, then K5 or K3,3 can
be obtained by deletions and contractions.
If G is nonplanar, then by Kuratowski’s Theorem, G contains a sub-
division of K5 or K3,3. Every graph containing a subdivision of a graph F
can be turned into F by deleting and contracting edges (delete the edges
not in the subdivision, then contract edges incident to vertices of degree 2).
Hence K5 or K3,3 can be obtained by deleting and contracting edges.
6.2.13. G is planar if and only if every cycle in G has a bipartite con-
ﬂict graph. The condition is necessary because in any planar embedding
a cycle C separates the plane into two regions, and the C-bridges embed-
ded in each of the regions must form an independent set in the conﬂict
graph. Conversely, if G is non-planar, then by the preceding theorem it is
K5 (with conﬂict graph C5), or it has a cycle C with three crossing chords
that produce a triangle in the conﬂict graph of C.
6.2.14. If x and y are vertices of a planar graph G, then there is a planar
embedding with x and y on the same face if and only if G has no cycle C
avoiding {x, y} such that x and y belong to conﬂicting C-fragments.
If there is a cycle C such that x and y belong to conﬂicting C-fragments,
then in every planar embedding of G, one of these fragments goes inside
G and the other goes outside it. Hence in every embedding, x and y are
separated by C. (This argument applies when C does not contain x or y,
but it sufﬁces to consider such cycles.)
Conversely, suppose there is no such cycle; we show that G + xy is
planar. If not, then G + xy contains a Kuratowski subgraph using xy. If
this is a K3,3-subdivision H with xy on the path between branch vertices
u and v, then x and y belong to fragments with alternating vertices of
attachment on the cycle in H through the other four branch vertices. If
this is a K5-subdivision H with xy on the path between branch vertices u
and v if and only if x and y belong to fragments with three common vertices
of attachment on the cycle in H through the other three branch vertices.
In either case, x and y belong to conﬂicting C-fragments for some cycle C.
6.2.15. A cycle C in a 3-connected plane graph G is the boundary of a face
in G if and only if G has exactly one C-fragment. If G has exactly one C-
fragment, then it must be embedded inside C or outside C, and the other
of these regions is a face with boundary C.
If C is a face boundary, then all C-fragments are embedded on one side
of C, say the inside. This prevents two C-fragments H1, H2 from having
alternating vertices of attachment along C. This means that there is a
path P along C that contains all vertices of attachment of H1 and none of
H2. Now the endpoints of P separate G, which contradicts the assumption
of 3-connectedness.
6.2.16. If G is an n-vertex outerplanar graph and P is a set of n points in
the plane with no three on a line, then G has a straight-line embedding with
its vertices mapped onto P. It sufﬁces to consider maximal outerplanar
graphs. We prove the stronger statement that if v1, v2 are two consecu-
tive vertices of the unbounded face of a maximal outerplanar graph G,
and p1, p2 are consecutive vertices of the convex hull of P, then G has a
straight-line embedding f on P such that f (v1) = p1 and f (v2) = p2.)
The statement is trivial for n = 3; assume n > 3. Let v1, v2, . . . , vn
denote the counterclockwise ordering of the vertices of G on the outside
face in a particular embedding. Let vi be the third vertex on the triangle
containing v1, v2.
Claim: there is a point p ∈P −{p1, p2} with the two properties (a) no
point of P is inside p1 p2 p, and (b) there is a line l through p that separates
p1 from p2, meets P only at p, and has exactly i −2 points of P on the side
of l containing p2. To obtain p, we rotate the line p1 p2 about p2 until we
reach a line l′ = p2 p′ with p′ ∈P such that exactly i −3 points of P are
separated from p1 by l′. Among the points of P −{p1, p2} in the closed
halfplane determined by l′ that contains p1, let p be the point minimizing
the angle p2 p1 p. By this choice, p satisﬁes (a), and there are at most i −2
points of P on the side of p1 p containing p2. If we rotate this line about p,
then before it becomes parallel to l′ it reaches a position l satisfying (b).
Let H1 and H2 denote the closed halfplanes determined by l contain-

319
Chapter 6: Planar Graphs
Section 6.3: Parameters of Planarity
320
ing p1 and p2, respectively. By the induction hypothesis, the subgraphs
of G induced by {v1, v2, . . . , vi} and vi, vi+1, . . . , vn, v1} can be straight-line
embedded on H1 ∩P and H2 ∩P so that v1, v2, vi are mapped to p1, p2, p.
Combining these embeddings yields a straight-line embedding of G with
the desired properties.
•
•
•
•
•
•
•
•
•
p1
p2
p′
p
l′
l
6.3. PARAMETERS OF PLANARITY
6.3.1. A polynomial-time algorithm to properly color a planar graph G.
First ﬁnd an embedding in the plane and augment to a maximal plane
graph G′. Now delete a vertex v of degree at most 5. Recursively ﬁnd a
proper 5-coloring of G′ −v. To extend the coloring to v, use Kempe chains
if necessary to remove a color from the neighborhood of v.
6.3.2. If every subgraph of G has a vertex of degree at most k, then G is k+1-
colorable. We use induction on n(G). For the basis, K1 is k + 1-colorable
whenever k ≥0. For the induction step, let v be a vertex of degree at most
k in a graph G with at least two vertices. By the deﬁnition of k-degenerate,
every subgraph of a k-degenerate graph is k-degenerate. He the induction
hypothesis yields a proper k + 1-coloring of G −v. Extend the coloring to v
by giving v a color that does not appear on its neighbors.
6.3.3. Every outerplanar graph G is 3-colorable, by the Four Color Theorem.
Adding a vertex v adjacent to all of G yields a planar graph G′, which is
4-colorable. A proper 4-coloring of G′ restricts to a proper 3-coloring of G,
because the colors used on the vertices of G must all be different from the
color used on v.
6.3.4. Crossing number of K2,2,2,2, K4,4, and the Petersen graph. Let k =
⌊(n −2)g/(g −2)⌋. The maximum number of edges in a planar n-vertex
graph with girth g is k, so ν(G) ≥e(G) −k if G has girth g. This yields
ν(K2,2,2,2) ≥6 and ν(K4,4) ≥4, and ν(G) ≥2 when G is the Petersen graph.
The drawings below achieve these lower bounds.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
6.3.5. Every planar graph G decomposes into two bipartite graphs. By the
Four Color Theorem, G is 4-colorable. Let the four colors be 0, 1, 2, 3. Let
H consist of all edges of G joining a vertex of odd color with a vertex of even
color. Let H ′ consist of all edges joining two vertices whose color has the
same parity. Now H and H ′ are bipartite and have union G.
6.3.6. Small planar graphs. We use induction on n(G); every graph with
at most four vertices is planar. A planar graph G with at most 12 vertices
has degree-sum at most 6 · 12 −12, with equality only for triangulations.
The bound is 60. Hence δ(G) ≤4 unless G is a 5-regular triangulation.
The only such graph is the icosahedron, which is 4-colorable explicitly.
Hence δ(G) ≤4. The same conclusion holds for graphs with at most
32 edges that have more than 12 vertices: the average vertex degree is at
most 64/13, which is less than 5.
Thus we have δ(G) ≤4. Let v be a vertex of minimum degree. A proper
4-coloring of G can be obtained from a proper 4-coloring of G −v. The case
of d(v) = 4 uses Kempe chain arguments as in the proof in the text that a
minimal 5-chromatic planar graph has no vertex of degree at most 4.
6.3.7. A conﬁguration H in a planar triangulation can be retrieved from
the partially labeled subgraph H ′ obtained by labeling the neighbors of the
ring vertices with their degrees and then deleting the ring vertices.
For
each vertex v on the external face of H ′, the data dH(v) is given. Append
dH(v) −dH ′(v) new edges at v, extending to new vertices in the extremal
face. When H ′ is 2-connected, the new neighbors for vertices of H ′ appear
in the same order cyclically in the outside face of H ′ as the vertices of
H ′ themselves. The requirement that H ′ is a block is necessary for this
reason; when H ′ = P3, it is easy to construct a counterexample to the
desired statement.
For each consecutive pair v, w on the external face of H ′, the edge vw
is on the boundary of a face with a new edge from v and a new edge from
w. Since each face of H is a triangle, the endpoints of these edges other
than {v, w} must merge into a single vertex to complete the face. (When
H ′ = K2, this occurs for both sides of the edge.)

321
Chapter 6: Planar Graphs
Section 6.3: Parameters of Planarity
322
Finally, pass a cycle through the resulting vertices outside H ′ to form
the ring. This is forced, since the bounded faces must all be triangles.
6.3.8. Conﬁgurations with ring size 5 in planar triangulations such that
every internal vertex has degree at least ﬁve.
The intent was to seek a
conﬁguration with more than one internal vertex. For example:
•
•
•
•
•
•
•
•
•
•
•
6.3.9. A minimal non-4-colorable planar graph has no separating cycle of
length at most 4. Let G be a minimal 5-chromatic graph with a vertex cut
S that induces a cycle. Let A and B be the S-lobes of G; A is the subgraph
induced by S and the vertices inside the cycle, and B is the subgraph in-
duced by S and the vertices outside the cycle. By the minimality of G, A
and B are 4-colorable. If |S| = 3, then S receives three distinct colors in
each of these colorings, and we can permute the names to agree on S.
Hence we may assume that S = {v1, v2, v3, v4}, indexed in order around
the cycle.
Let f and g be proper 4-colorings of A + v1v3 and B + v1v3,
respectively. We may rename colors in f and g so that f (vi) = g(vi) = i
for i ∈{1, 2, 3}. If f (v4) = g(v4), then we are ﬁnished. Otherwise we may
assume that f (v4) = 4 and g(v4) = 2. If the subgraph of A induced by
vertices with colors 2 and 4 under f does not have a v2, v4-path, then we
can interchange colors 2 and 4 on the component containing v4 to obtain a
coloring that agrees with g on S.
Otherwise, v1 and v3 are in different components of the subgraph of
A induced by vertices with colors 1 and 3, and we may interchange colors
1 and 3 on the component containing v3 to obtain a new proper 4-coloring
f ′ of A that assigns colors 1,2,1,4 to v1, v2, v3, v4. Now consider B + v2v4;
this planar graph also has a proper 4-coloring g′. Since g′ assigns distinct
colors to v1, v2, v4, we may assume by renaming colors that these are 1,2,4,
respectively. Now g′ agrees with f on S if g′(v3) = 3, and g′ agrees with
f ′ on S if g′(v3) = 1. In either case, we have 4-colorings of A and B that
combine to provide a proper 4-coloring of G.
6.3.10. Triangle-free planar graphs may have independence number ar-
bitrarily close to n(G)/3, so no greater lower bound can be guaran-
teed.
Consider the sequence of graphs Gk deﬁned as follows:
G1 is
the 5-cycle, with vertices a, x0, x1, y1, z1 in order.
For k > 1, Gk is ob-
tained from Gk−1 by adding the three vertices xk, yk, zk and the ﬁve edges
xk−1xk, xk yk, ykzk, zk yk−1, zkxk−2. The graph G3 is shown below. Moving the
edges xi−2zi outside yields a planar embedding.
•
•
•
•
•
•
•
•
•
•
•
x1
x2
x3
x0
y1
y2
y3
a
z1
z2
z3
We prove by induction on k that α(Gk) = k +1 = (n(G)+1)/3 and that,
furthermore, every maximum stable set in Gk contains xk or yk or {zk, xk−1}.
In G1 the maximum stable sets are the nonadjacent pairs of vertices; the
only one not containing x1 or y1 is {z1, x0}, so the stronger statement holds.
Suppose that the claim holds for Gk−1. A maximum stable set S in Gk
uses at least one vertex not in Gk−1. If it uses two, then they are xk and
zk. Since yk−1, xk−1, xk−2 ∈N({xk, zk}), S cannot contain a maximum stable
set from Gk−1, and hence |S| ≤k + 1. Furthermore, when S contains xk it
satisﬁes the stronger statement.
To complete the proof of the stronger statement, we must show that
a stable set S of size k + 1 in Gk that contains zk but not xk also contains
xk−1. Since |S| = k + 1, S must contain a stable set of size k in Gk−1, which
contains xk−1 or yk−1 or {zk−1, xk−2}, by the induction hypothesis. Since zk
is adjacent to xk−2 and yk−1, the only possibility here is xk−1 ∈S, which
completes the proof of the statement.
6.3.11. For the graph Gn deﬁned below, when n is even, every proper 4-
coloring of Gn uses each color on exactly n vertices. Let G1 be C4. For n > 1,
obtain Gn from Gn−1 by adding a new 4-cycle surrounding Gn−1, making
each vertex of the new cycle also adjacent to two consecutive vertices of the
previous outside face.
Each two consecutive “rungs” of Gn form a subgraph isomorphic to G2,
shown below on the left. This graph is 4-chromatic but not 4-critical, since
it contains the 4-chromatic graph shown on the right. Since the remaining
graph after deleting any one vertex still needs four colors, every color must
appear at least twice (and hence exactly twice) in each copy of G2.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•

323
Chapter 6: Planar Graphs
Section 6.3: Parameters of Planarity
324
6.3.12. Every outerplanar graph is 3-colorable. The fact that every induced
subgraph of an outerplanar graph is outerplanar yields inductive proofs.
Proof 1 (induction on n(G)). If every edge of G is on the outside face,
then every block of G is an edge or a cycle, and G is 3-colorable. Other-
wise, suppose xy is an internal edge. Then S = {x, y} is a separating set.
The S-lobes of G are outerplanar; by the induction hypothesis, they are 3-
colorable. Since S induces a clique, we can make these colorings agree on
S, which yields a 3-coloring of G.
Proof 2 (induction on n(G)). Every simple outerplanar graph has a
vertex of degree at most 2 (proved in the text); we can delete such a vertex
x, 3-color G −x by the induction hypothesis, and extend the coloring to x.
Proof 3 (prior results). Every graph with chromatic number at least
4 contains a subdivision of K4 (Dirac’s Theorem), but a graph containing a
subdivision of K4 cannot be outerplanar.
Every art gallery laid out as a polygon with n segments can be guarded
by ⌊n/3⌋guards so that every point of the interior is visible to some guard.
The art gallery is a drawing of an n-cycle in the plane. We add straight-
line segments to obtain a maximal outerplanar graph with n vertices. To
do this, observe that 3-gons are already triangulated without adding seg-
ments. For n > 3, some corner can see some other corner across the interior
of the polygon. We add this segment and proceed inductively on the two
resulting polygons with fewer corners.
Consider a proper 3-coloring of the resulting maximal outerplanar
graph (outerplanar graphs are 3-colorable). Since each bounded region is a
triangle, its vertices are pairwise adjacent and receive distinct colors. Thus
each color class contains a vertex of each triangule. Any point in a trian-
gle, such as a corner, sees all points in the triangle. Thus guards at the
vertices of a color class can see the entire gallery. Since the three classes
partition the set of vertices, the smallest class has at most ⌊n/3⌋elements.
1
3
1
3
2
3
2
1
2
3
2
1
2
The bound of ⌊n/3⌋guards is best possible. The alcoves in the polygon
below require their own guards; no guard can see into more than one of
them. There are ⌊n/3⌋alcoves. When n is not divisible by 3, we can add
the extra vertex (or two) anywhere.
6.3.13. Every art gallery with walls whose outer boundary is an n-gon can
be guarded by ⌊(2n −3)/3⌋guards, where n ≥3, and this is sharp. Adding
walls cannot make it easier to guard the gallery, so we may assume that the
polygon is triangulated by nonintersecting chords. A guard in a doorway
can see the two neighboring triangles; we use such guards and guards on
the outside walls.
The bound is achieved by an art gallery of the type below.
· · ·
Proof 1. The embedded n-gon plus the interior walls form a planar
embedding of an outerplanar graph whose vertices are the corners; it has
n + (n −3) = 2n −3 edges. Every outerplanar graph is 3-colorable (this
can be proved inductively by cutting along chords formed by walls, as in
Thomassen’s proof of 5-choosability, or by using the existence of a vertex of
degree at most 2, which can be proved inductively or by Euler’s Formula.)
From a proper 3-coloring of the vertices of the outerplanar graph, 3-
color the edges of the graph by assigning to each edge the color not used on
its endpoints. Now each triangle has each color appearing on its incident
edges. If we put guards at the edges occupied by the least frequent color,
then each room is guarded, and we have used at most ⌊(2n −3)/3⌋guards.
Proof 2. Again triangulate the region to obtain an outerplanar graph
G.
In the dual graph G∗, let v denote the vertex corresponding to the
unbounded face of G. The graph G∗−v is a tree with n −2 vertices and
maximum degree at most 3. Each edge corresponds to a guard in a doorway,
so an edge cover (a set of edges covering the vertices) corresponds to a set
of guards in doorways that together can see all the rooms.
It sufﬁces to show that a tree T with n −2 vertices and maximum
degree at most 3 has an edge cover with at most (2n −3)/3 edges, for n ≥4.
We study n ∈{4, 5, 6} explicitly. For larger n, consider the endpoint x of
a longest path in T . By the choice of x, its neighbor y has one non-leaf
neighbor and at most two leaf neighbors. We use the pendant edges at y in
the edge cover and delete y and its leaf neighbors to obtain a smaller tree

325
Chapter 6: Planar Graphs
Section 6.3: Parameters of Planarity
326
T ′. We have placed k edges in the cover and deleted k + 1 vertices, where
k ∈{1, 2}. Using the induction hypothesis and k ≤2, we obtain an edge
cover of size at most
2(n−k−1)−3
3
+ k = 2n−3
3
−2(k+1)
3
+ k = 2n−3
3
+ k−2
3
≤2n−3
3 .
6.3.14. A maximal planar graph is 3-colorable if and only if it is Eulerian.
Let G be a maximal plane graph; G is connected, and every face is a tri-
angle. Suppose that G is 3-colorable. The three colors {1, 2, 3} appear on
each face, in order clockwise or counterclockwise. When two faces share
an edge, the colors appear clockwise around one face and counterclockwise
around the other. This deﬁnes a proper 2-coloring of the faces of G, using
the colors “clockwise” and “counterclockwise”. Hence G∗is bipartite. The
degree of a vertex in a connected plane graph G equals the length of the
corresponding face in G∗. Since G∗has no odd cycle, G has even degrees
and is Eulerian.
Conversely, suppose that G is Eulerian, meaning that each vertex has
even degree. Proof 1. We use induction on n(G) to obtain a proper 3-
coloring. The smallest Eulerian triangulation is K3, which is 3-colorable.
A 2-valent vertex in a larger simple triangulation would belong to two tri-
angles, forcing a double edge. Since G is Eulerian, we may thus assume
that δ(G) ≥4. Since K5 is nonplanar, the next smallest Eulerian triangu-
lation is the octahedron, with six vertices of degree 4; this is 3-colorable, as
illustrated below.
For the induction step, suppose that n(G) ≥6. Since every planar
graph has a vertex of degree less than 6, G has a 4-valent vertex. If G has
a triangle T of 4-valent vertices, then G the neighbors of T induce a 3-cycle
containing T , as in the octahedron. Deleting T reduces the degrees of the
neighboring vertices by 2 each, so we can apply the induction hypothesis
to the resulting subgraph G′. The coloring assigns distinct colors to the
neighbors of T , and this proper coloring extends also to T .
•
•
•
•
•
•
•
•
•
•
•
•
1
3
1
3
2
2
↔
•
•
•
•
1
3
2
2
Hence we may assume that when G has two adjacent 4-valent vertices
x, y, their two common neighbors a, b have degree greater than 4. Suppose
G has adjacent 4-valent vertices {x, y}, with u and v being the fourth neigh-
bors of x and y, respectively. Form G′ by deleting {x, y} and adding the edge
uv. Because d(a), d(b) > 4, u and v are not already adjacent. All vertices
still have even degree; hence G′ is an Eulerian triangulation. We apply the
induction hypothesis and extend the resulting coloring to a coloring of G,
as indicated above.
Finally, suppose that G has no adjacent 4-valent vertices. Choose a
4-valent vertex x with neighbor y, and deﬁne a, b, u as before. Form G′
by deleting {x, y} and adding edges from u to all of N(y) −N(x). Because
d(a), d(b) > 4, z is not already adjacent to any vertex of N(y) −N(x). All
vertices still have even degree; hence G′ is an Eulerian triangulation. We
apply the induction hypothesis and extend the resulting coloring to a col-
oring of G, as indicated below.
•
•
•
•
•
•
•
•
2
3
2
3
2
1
3
1
↔
•
•
•
•
•
•
2
3
2
3
2
1
Proof 2. All faces are triangles; we start with an arbitrary 3-coloring
on some face F.
The color of the remaining vertex on any neighboring
face is forced. We claim that iterating this yields a proper 3-coloring f .
Otherwise, a contradiction is reached at some vertex v. This means there
are two paths of faces from F, distinct after some face F ′ (we start at F′ to
obtain disjoint dual paths), that reach v but assigning different colors to v.
Let C be the cycle enclosing the faces on these two paths and the regions
inside them. Choose an example in which C encloses the smallest possible
number of vertices.
The contradiction cannot arise when C encloses only one vertex x. In
this case, the faces causing the conﬂict are only those incident to x, and
C is the cycle through the neighbors of x. Since d(x) is even, the colors
alternate on C when following the path of faces, and there is no conﬂict.
We obtain a contradiction by ﬁnding such a cycle enclosing fewer ver-
tices. Since the initial face starts two distinct paths of faces, one of its
vertices (x below) must be enclosed by C and not on C. Together, the two
paths contain a portion of the faces containing x, say from J to J ′ around
x. We replace these by the other faces involving x, but keeping J, J ′. Be-
cause d(x) is even, the coloring forced on J by f (V (F)) forces onto J ′ the
same coloring that f (V (F)) forced onto J ′ directly. From J, J ′ outward, the
paths of faces lead to the same conﬂict as before. Hence we can start with
one of the inner faces involving x and obtain a conﬂict using paths that
enclose fewer vertices than before (x is no longer inside).

327
Chapter 6: Planar Graphs
Section 6.3: Parameters of Planarity
328
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
F
J
J ′
x
1
3
2
1
3
2
3
2
1
3
2
1
2
2
3
6.3.15. The vertices of a simple outerplanar graph can be partitioned into
two sets so that the subgraph induced by each set is a disjoint union of paths.
Let one set be the set of vertices with even distance from a ﬁxed vertex u,
and let the other set be the remainder; call these “color classes”. Since no
adjacent vertices can have distance from x differing by more than 1, each
component of the graph induced by one color class consists of vertices with
the same distance from u. Let H be such a component.
To show that H is a path, it sufﬁces to show that H has no cycle and
has no vertex of degree at least 3. Given three vertices x1, x2, x3 in H, let Pi
be a shortest xi, u-path in G. Since x1, x2, x3 have the same distance from u,
each Pi has only xi in H. Also, since the paths eventual merge, P1 ∪P2 ∪P3
contains a subdivision of a claw; call this F (note that F need not contain
u, as the paths may meet before reaching u).
If H contains a cycle C, let x1, x2, x3 be three vertices on C. Now F ∪C
is a subdivision of K4. If H contains a vertex w of degree 3, let x1, x2, x3
be neighbors of w. Now F together with the claw having center w and
leaves x1, x2, x3 is a subdivision of K2,3. Since an outerplanar graph has no
subdivision of K5 or K2,3, H is a path.
6.3.16. The 4-dimensional cube Q4 is nonplanar and has thickness 2. The
graph is isomorphic to C4
C4. On the left below, we show a subdivision of
K3,3 in bold. The graph is also isomorphic to Q3
K2, consisting of two 3-
cubes with corresponding vertices adjacent. Taking one of the 3-cubes and
the edges to the other 3-cube from one of its 4-cycles yields a planar graph
that is isomorphic to the subgraph consisting of the remaining edges.
•
•
•
•
•
•
•
•
•
•
•
•
• •
•
•
•
•
•
•
• •
•
•
•
•
•
•
•
•
•
•
6.3.17. Thickness.
a) The thickness of Kn is at least ⌊(n + 1)/6⌋.
Each
planar graph used to form G has at most 3n(G)−6 edges, so the thickness of
G is at least e(G)/[3n(G)−6]. For G = Kn, this yields ⌈n(n −1)/[6(n −2)]⌉,
since thickness must be an integer. We compute n(n −1)/(n −2) = n(1 +
1/(n −2)) = n +n/(n −2) = n +1+2/(n −2). Since ⌈x/r⌉= ⌊(x + r −1)/r⌋,
the thickness is at least ⌈[n + 1 + 2/(n −2)]/6⌉= ⌊[n + 6 + 2/(n −2)]/6⌋=
⌊(n + 7)/6⌋. The last equality holds because there is no integer between
these two arguments to the ﬂoor function. (Comment: this lower is the
exact answer except for n = 9, 10.)
b) A self-complementary planar graph with 8 vertices. See the solution
to Exercise 6.1.29 for examples of self-complementary planar graphs with
8 vertices.
To show that the thickness of K8 is 2, it sufﬁces to present
any 8-vertex planar graph with a planar complement. Many examples are
possible.
A natural approach is to use a triangulation to eliminate the
most possible edges from the complement. An example is C6 ∨2K1, putting
one vertex inside and one vertex outside a 6-cycle.
The complement is
(C3
K2) + K2, which is planar as shown below.
•
•
•
•
•
•
•
•
Since K8 is nonplanar, these examples show that K8 has thickness
2, and that in fact K5, K6, K7 also have thickness 2. The bound in (a)
implies that the thickness of Kn is at least 3 when n ≥11, which is the
same as saying there is no planar graph with more than 10 vertices having
a planar complement. In fact, there is also no planar graph on 9 or 10
vertices having a planar complement, but the counting argument in (a) is
not strong enough to show that.
6.3.18. Decomposition of K9 into three pairwise-isomorphic planar graphs.
View the vertices as the congruence classes of integers modulo 9. Group
them into triples by their congruence class modulo 3. The graph below
consists of a triangle on one triple, a 6-cycle between that and a second
triple, and a matching from the second triple to the third. Rotating the
picture on the left yields three pairwise isomorphic graphs decomposing
K9. The drawing on the right shows that the graph is planar.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•

329
Chapter 6: Planar Graphs
Section 6.3: Parameters of Planarity
330
6.3.19. The chromatic number of the union of two planar graphs is at most
12. Let G be a graph with n vertices that is the union of two planar graphs
H1 and H2. For coloring problems, we may assume that G, H1, H2 are sim-
ple. We claim that G has a vertex of degree at most 11. Since each Hi has
at most 3n −6 edges, G has at most 6n −12 edges. The degree-sum in G is
at most 12n −24, and by the pigeonhole principle G has a vertex of degree
at most 11.
It now follows by induction on n(G) that χ(G) ≤12. This holds trivially
for n(G) ≤12. For n(G) > 12, we delete a vertex x of degree at most 11
to obtain G′. Since G′ = (H1 −x) ∪(H2 −x), we can apply the induction
hypothesis to G′ to obtain a proper 12-coloring. Since d(x) ≤11, we can
replace x and give it one of these 12 colors to obtain χ(G) ≤12.
The chromatic number of the union of two planar graphs may be as
large as 9. The graph C5 ∨K6 has chromatic number 9, since the three
colors on the 5-cycle must be distinct from the six colors on the 6-clique,
and such a coloring is proper. It thus sufﬁces to show that C5 ∨K6 is the
union of two planar graphs. Since C5 ∨K6 contains K8 and K9 −e (for some
edge e) as induced subgraphs, it is reasonable to start with one of these
and then try to add the missing vertices with their desired neighbors to the
two graphs.
Let the vertices of the C5 be a, b, c, d, e in order, and let the vertices
of the K6 be 1, 2, 3, 4, 5, 6. Exercise 6.1.29 requests a self-complementary
graph with 8 vertices; in other words, an expression of K8 as the union of
two planar graphs.
6.3.20. Thickness of Kr,s. Let X, Y be the partite sets of Kr,s, with |X| = r.
The graph K2,s is planar. Taking all of Y and two vertices from X yields a
copy of K2,s. Taking two vertices at a time from X thus yields r/2 planar
subgraphs decomposing Kr,s.
Since Kr,s is triangle-free, a planar subgraph of Kr,s has at most
2(r + s) −4 edges.
Thus the number of planar subgraphs needed in a
decomposition is at least
rs
2r+2s−4 =
r
2+(2r−4)/s . As s increases, the denomi-
nator decreases and the quotient increases. Thus when s > (r −2)2/2, the
value of the lower bound is larger than the result of setting s = (r −2)2/2
in the formula. Since (2r −4)/s = 4/(r −2) when s has this value,our lower
bound is bigger than
r
2+4/(r−2) =
r(r−2)
2r−4+4 = r/2 −1. Since the crossing num-
ber is an integer bigger than r/2 −1 when r is even and s > (r −2)2/2, it
is at least r/2. Hence our construction is optimal.
6.3.21. Crossing number of K1,2,2,2. This simple graph has 7 vertices and
18 edges. The maximum number of edges in a simple planar graph with 7
vertices is 3 · 7 −6 = 15. Hence in any drawing of this graph, a maximal
plane subgraph has at most 15 edges, and the remaining edges each yield at
least one crossing with the maximal plane subgraph. Hence ν(K1,2,2,2) ≥3,
and the drawing of this graph on the left below shows that equality holds.
Crossing number of K2,2,2,2. Deleting any vertex in a drawing of K2,2,2,2
yields a drawing of K1,2,2,2, which must have at least 3 crossings. Doing this
for each vertex yields a total of at least 24 crossings. Since each crossing
is formed by two edges involving 4 vertices, we have counted each crossing
8 −4 = 4 times. Thus the drawing of K2,2,2,2 has at least 6 crossings. We
have proved that ν(K1,2,2,2) ≥6, and the drawing of this graph on the right
below shows that equality holds.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
6.3.22. K3,2,2 has no planar subgraph with 15 edges, and thus ν(K3,2,2) ≥
2. The graph has 16 edges, so it sufﬁces to show that deleting one edge
leaves a nonplanar graph. Let X be the partite set of size 3. Every 6-vertex
induced subgraph containing X contains a copy of K3,3, which is nonplanar.
Since every edge e is incident to a vertex not in X, the 6-vertex induced
subgraph avoiding such an endpoint remains when e is deleted.
6.3.23. The crossing number of the graph Mn obtained from the cycle Cn
by adding chords between vertices that are opposite (if n is even) or nearly
opposite (if n is odd) is 0 if n ≤4 and 1 otherwise. For n ≤4, all n-vertex
graphs are planar. For n = 5, Mn = K5. For n ≥6, the cycle with vertices
v1, . . . , vn plus the chords v1v1+⌊n/2⌋, v2v2+⌊n/2⌋, v3v3+⌊n/2⌋is a subgraph of Mn
that is a subdivision of K3,3, so the crossing number is at least 1.
The
drawings below, by avoiding crossings among the chords and allowing a
crossing within the drawing of the cycle, show that one crossing is enough.
•
•
•
•
•
•
•
•
v1
v2
vn−1
vn
· · ·
•
•
•
•
•
•
•
•
•
v1
v2
vn−1
vn
. . .
6.3.24. a) P3
n is a maximal planar graph. The graph P3
4 is K4, with six
edges. Note that 6 = 3 · 4 −6. Each successive vertex in Pn is adjacent
to the last three of the earlier vertices, so e(P3
n ) = 3n −6. Together with
having 3n −6 edges, showing that P3
n is planar implies that it is a maximal

331
Chapter 6: Planar Graphs
Section 6.3: Parameters of Planarity
332
planar graph. An embedding is obtained by drawing the path in a spiral
as suggested below.
Alternatively, we can prove planarity by proving inductively that there
is a planar embedding with all of {n −2, n −1, n} on the same face. This
holds for an embedding of P3
4 (we could also start with n = 3 as the basis).
For the induction step (n > 4), take such an embedding of P 3
n−1. Since all
of {n −3, n −2, n −1} lie on a single face, we can place n in that face and
draw edges to all three. This yields a planar embedding of Pn with all of
{n −2, n −1, n} on a single face.
b) ν(P4
n ) = n −4. The graph P4
5 is K5, with 10 edges. Each additional
vertex provides four more edges, so e(P4
n ) = 4n −10. In any drawing, a
maximal plane subgraph H has at most 3n −6 edges and thus leaves at
least n −4 edges that each cross an edge of H. That bound is achieved with
equality by adding the second diagonals of the trapezoids in the picture
below, making each vertex adjacent to the vertex four earlier on the path.
•
•
•
•
•
•
•
•
•
(Alternatively, the earlier induction proof can be strengthened to guar-
antee an embedding with all of {n −2, n −1, n} on a single face and n −4 on
an adjacent face across the edge joining n −1 and n −3. That enables the
n −4 additional edges to be added so that each crosses only the speciﬁed
edge of P3
n and no added edges cross each other.)
6.3.25. There are toroidal graphs with arbitrarily large crossing number in
the plane. The cartesian product of two cycles, Cm
Cn, embeds naturally
on the torus; each face is a 4-cycle. The graph has mn vertices and 2mn
edges. View the copies of Cm as vertical slices (columns) and the copies of
Cn as horizontal slices (rows).
A subgraph of Cm
Cn consisting of three full columns and three full
rows is a subdivision of C3 C3. Since C3 C3 contains a subdivision of K3,3,
it is nonplanar. Therefore, a planar subgraph of Cm
Cn cannot contain
three full columns and three full rows. This means it must omit at least
min{m −2, n −2} edges. By Proposition 6.3.13, ν(Cm
Cn) ≥min{m −2, n −
2}. By making m and n at least k +2, we make the crossing number at least
k while having a toroidal graph.
6.3.26. Lower bounds on crossing numbers. As stated correctly in Example
6.3.15 (not stated correctly in this exercise), the crossing number of K6,n is
6 ⌊n/2⌋⌊(n −1)/2⌋. a) ν(Km,n) ≥m m−1
5
 n
2
  n−1
2

. Consider copies of K6,n
in a drawing of Km,n, with the partite set of size 6 in the subgraph selected
from the partite set of size m in the full graph. There are
 m
6

such copies,
and each has at least 6 ⌊n/2⌋⌊(n −1)/2⌋crossings. Each crossing appears
in
 m−2
4

of the subgraphs.
Hence ν(Km,n) ≥
 m
6

6
 n
2
  n−1
2

/
 m−2
4

. Cancellation of common factors
in the numerator and denominator yields the bound claimed.
b) ν(Kp) ≥
1
80 p4 + O(p3). Consider copies of K6,p−6 in a drawing of K p.
There are
 p
6

of these copies, and each has at least 6 ⌊(p −6)/2⌋⌊(p −7)/2⌋
crossings. Each crossing appears in 4
 p−4
4

of these subgraphs, since the
four vertices involved in the crossing can contribute to the smaller partite
set in four ways (assuming that n > 12), and then four vertices not involved
in the crossing must be chosen to ﬁll that partite set.
Hence ν(Kp) ≥
 p
6

6
j
p−6
2
k j
p−7
2
k
/[4
 p−4
4

].
The numerator has four
more linear factors than the denominator, so the growth is quartic. The
leading coefﬁcient is 6
6!
1
2
1
2
4!
4 , which simpliﬁes to 1/80.
6.3.27. If the conjecture that ν(Km,n) =
 m
2
  m−1
2
  n
2
  n−1
2

. holds for
Km,n and m is odd, then the conjecture holds also for Km+1,n. In a drawing
of Km+1,n, there are m + 1 copies of Km,n obtained by deleting a vertex of
the partite set of size m. Each crossing in the drawing of Km+1,n appears in
m −1 of these copies. Hence (m −1)ν(Km+1,n) ≥(m + 1)ν(Km,n).
Since m is odd, ⌊m/2⌋⌊(m −1)/2⌋= (m−1)2/4, and ⌊(m + 1)/2⌋⌊m/2⌋=
(m + 1)(m −1)/4. Therefore,
ν(Km+1,n) ≥m + 1
m −1ν(Km,n) = m+1
2
m−1
2
 n
2
  n−1
2

=
 m+1
2
  m
2
  n
2
  n−1
2

6.3.28. If m and n are odd, then in all drawings of Km,n, the parity of the
number of pairs of edges that cross is the same. (We consider only drawings
where edges cross at most once and edges sharing an endpoint do not cross.)
Any drawing of Km,n can be obtained from any other by moving vertices and
edges. The pairs of crossing edges change only when an edge e is moved
through a vertex v not incident to it (or vice versa). Let S be the set of
edges incident to v other than those also incident to endpoints of e. When
e is moved through v (or vice versa), the set of edges incident to v that e
crosses is exchanged for its complement in S.

333
Chapter 6: Planar Graphs
Section 6.3: Parameters of Planarity
334
Since the degree of each vertex is odd and v is adjacent to exactly one
endpoint of e, the parity of these two sets is the same. Hence the parity of
the number of crossings never changes.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
If m and n are odd, then ν(Km,n) is odd when m−3 and n−3 are divisible
by 4 and even otherwise. In the naive drawing of Km,n with the vertices on
opposite sides of a channel and the edges drawn as segments across the
channel, the number of crossings is
 m
2
 n
2

.
It sufﬁces to determine the
parity of this, since the parity is the same for all other drawings including
those with fewest crossings.
The binomial coefﬁcient r(r −1)/2 is odd if and only if r is congruent to
2 or 3 modulo 4. Since we require m and n odd, the additional requirement
for
 m
2
 n
2

being odd is thus m and n being congruent to 3 modulo 4.
6.3.29. If n is odd, then in all drawings of Kn, the parity of the number of
pairs of edges that cross is the same. (We consider only drawings where
edges cross at most once and edges sharing an endpoint do not cross.) Any
drawing of Km,n can be obtained from any other by moving vertices and
edges. The crossing pairs change only when an edge e moves through a
vertex v not incident to it (or vice versa). Let S be the set of edges incident
to v that are not incident to endpoints of e. When e moves through v (or
vice versa), the set of edges incident to v that e crosses is exchanged for its
complement in S. Since d(v) is even and v is adjacent to both endpoints of
e, we have |S| even, so the sizes of complementary subsets of S have the
same parity. Hence the parity of the number of crossings does not change.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
ν(Kn) is even when n is congruent to 1 or 3 modulo 8 and is odd when n
is congruent to 5 or 7 modulo 8. Since the parity is the same in all drawings
of Kn, we need only look at one, such as the straight-line drawing with the
vertices on a circle. Its number of crossings is
 n
4

, which equals n(n −1)(n −
2)(n −3)/24. When the congruence class is 1 or 3, the numerator has a
multiple of 8 and an odd multiple of 2, so it has four factors of 2, and only
three are canceled by the denominator. Hence
 n
4

is even. When the class
is 5 or 7, the numerator has an odd multiple of 4, an odd multiple of 2, and
two odd factors, so the factors of 2 are canceled out, and
 n
4

is odd.
6.3.30. ν(Cm
Cn) ≤(m −2)n and ν(K4
Cn) ≤3n. For Cm
Cn, we draw
the copies of Cm along concentric circles. The vertices arising from a single
copy of Cn are laid out along a spoke. The “long” edge in each copy of Cn
generates m −2 crossings, as shown below on the left.
For K4
Cn, we make the cycles concentric again, almost: the two
outside cycles weave in and out of each other, as shown on the right below.
We draw each copy of K4 around a spoke, but each copy is the reﬂection
of its neighbors. For each copy of Kn, the two outer cycles cross, and the
central cycle crosses two edges in that copy of Kn.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
The weaving in and out requires n to be even. When n is odd, a special
construction is needed for the case n = 3 (shown below); there is one cross-
ing in a copy of K4, and the inner two triangles and outer two triangle each
provide four crossings. Copies of K4 can then be added in pairs by break-
ing the four edges joining two “neighboring” copies of K4 and inserting two
copies of K4 with six crossings as in the middle of the ﬁgure above.
•
•
•
•
•
•
•
•
•
•
•
•
6.3.31. Crossing number of complete tripartite graphs. Let f (n) = ν(Kn,n,n).
We prove that n3(n −1)/6 ≤f (n) ≤(9/16)n4 + O(n3).
a) 3ν(Kn,n) ≤f (n) ≤3
 n
2
2. The lower bound follows from the existence
of three pairwise edge-disjoint copies of Kn,n in Kn,n,n. The upper bound

335
Chapter 6: Planar Graphs
Section 6.3: Parameters of Planarity
336
follows from a straight-line drawing with the vertices of each part placed
on a ray leaving the origin.
b) ν(K3,2,2) = 2. Lower bounds: Since a triangle-free 7-vertex planar
graph has at most 2n −4 = 10 edges, ν(K3,4) ≥2, and K3,4 is a subgraph
of K3,2,2. Alternatively, a counting argument for the crossings shows both
ν(K3,2,2) ≥2 and ν(K3,3,1) ≥3. Consider each vertex-deleted subgraph
for some embedding; if it contains K3,3, its includes a crossing, and each
crossing is counted n −4 = 3 times.
Hence ν(K3,2,2) ≥⌈4/3⌉= 2 and
ν(K3,3,1) ≥⌈7/3⌉= 3. Extending this approach yields ν(K3,3,2) ≥⌈18/4⌉=
5 and ν(K3,3,3) ≥⌈45/5⌉= 9. Constructions for ν(K3,2,2) ≤2, ν(K3,3,1) ≤3,
ν(K3,3,2) ≤7, and ν(K3,3,3) ≤15 appear below.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
c) Recurrence to improve the lower bound in (a): Kn,n,n has n3 copies
of Kn−1,n−1,n−1.
In totalling this, each crossing formed between vertices
of two parts counts n(n −2)2 times, but each crossing using vertices of
all three parts counts (n −1)2(n −2) times.
We don’t know how many
crossings of each type there may be, but each crossing is counted at most
(n −1)2(n −2) times, so there are at least f (n −1)
n3
(n−1)2(n−2) crossings.
This recursive bound for f (n) expands to a telescoping product:
f (n) ≥
n3
(n−1)2(n−2)
(n−1)3
(n−2)2(n−3) · · ·
53
(5−1)2(5−2)
43
(4−1)2(4−2) f (3). After cancellation, we have
f (n) ≥n3(n −1) f (3)/54.
Since in (b) we found f (3) ≥9, we at least
have f (n) ≥(1/6)n4 + O(n3). If in fact f (3) = 15, then we have f (n) ≥
(5/18)n4+O(n3), which is approximately a factor of 2 from the upper bound
below.
d) Improving the upper bound (3/4)n4 + O(n3) of (a) to
f (n) ≤
(9/16)n4 + O(n3). The layout on the tetrahedron splits the n vertices of
each part into two sets of size n/2 laid out along opposite edges. For the
points on a given edge, the four neighboring edges of the tetrahedron con-
tain all points of the other two parts, to which these points have edges laid
out directly on the surface of the tetrahedron. Crossings on a face of the
tetrahedron are formed by pairs of vertices from two incident edges or by
a pair from one edge with one vertex each from the other two edges. If the
parts have sizes l, m, n and l′ =
 l/2
2

, m′ =
 m/2
2

, n′ =
 n/2
2

, then the total
number of crossings on a single face of the tetrahedron is [l′m′ + l′n′ + m′n′]
+ [l′(m/2)(n/2) + m′(l/2)(n/2) + n′(l/2)(m/2)]. Over the four identical faces,
this sums to
1
16(l2m2 + l2n2 + m2n2 + 2l2mn + 2m2ln + 2n2lm), plus lower
order terms. When l = m = n, this becomes (9/16)n4.
For the other construction, begin with an optimal drawing of Kn. Turn
each vertex into an independent set consisting of one vertex from each part.
When there are three parts, each edge of the original drawing has now
become a bundle consisting of 6 edges. For each crossing in the drawing
of Kn, we get 36 crossings between the two bundles. For each edge in the
drawing of Kn, we get at most 15 crossings within the bundle. Near a vertex
of the original drawing, we get at most 36 crossings (actually slightly less)
between the bundles corresponding to incident edges. There are
 n
2

edges
in Kn, and n
 n−1
2

pairs of incident edges, but always (n4) crossings, so the
other contributions are of smaller order. Therefore, we have only 36ν(Kn)+
O(n3) crossings. With the best known bound of ν(Kn) ≤n4/64 + O(n3), we
get the same constant 9/16. This generalizes easily to
 r
2
2/16n4 for the
complete multipartite graph with r parts of size n.
6.3.32. An embedding of a 3-regular nonbipartite simple graph on the torus
such that every face has even length. It sufﬁces to use K4 as shown below.
Larger examples can be obtained from this.
•
•
•
•
6.3.33. If n is at least 9 and n is not a prime or twice a prime, then there is
a 6-regular toroidal graph with n vertices. Given these conditions, express
n as rs with r and s both at least 3. Now form Cr
Cs; this 4-regular graph
embeds naturally on the torus with each face having length 4.
On the
combinatorial description of the torus as a rectangle, the embedding looks
like the interior of Pr+1
Ps+1, but the top and bottom rows of vertices are
the same, and the left and right columns of vertices are the same.
Now add a chord in each face from its lower left corner in this picture
to its upper right corner. The resulting graph is 6-regular, toroidal, and
has n vertices.
6.3.34. Regular embeddings of K4,4, K3,6, and K3,3 on the torus. The num-
ber of faces times the face-length is twice the number of edges, and the
number of faces is the number of edges minus the number of vertices. For
K4,4, we need eight 4-faces. For K3,6, we need nine 4-faces. For K3,3, we
need three 6-faces. Such embeddings appear below.

337
Chapter 6: Planar Graphs
Section 6.3: Parameters of Planarity
338
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
X
X
X
X
X
X
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
6.3.35. Euler’s Formula for genus γ : For every 2-cell embedding of a graph
on a surface with genus γ , the numbers of vertices, edges, and faces satisfy
n −e + f = 2 −2γ . We use induction on e(G) via contraction of edges.
For the basis step, we need the number of edges required to cut Sγ into
2-cells. Each face in an embedding is a 2-cell; lay it ﬂat. Combining neigh-
boring faces along shared edges yields a large 2-cell R. Identifying shared
edges reassembles the surface. The number of edge-pairs needed on the
boundary of R is at least the number of cuts required to lay the surface ﬂat,
because that is what these boundary edges do.
It takes two cuts to lay a handle ﬂat. If every cut is one edge, then
every cut is a loop and there is only one vertex. So, the only 2-cell embed-
dable graphs on Sγ that have at most 2γ edges are those with 1 vertex and
2γ edges, and the resulting embeddings have 1 face. The polygonal repre-
sentation of the surface is itself such an embedding, if we view the vertices
of the polygonal as copies of the single vertex in the graph, and the edges
of the polygon as paired loops. Since 1 −2γ + 1 = 2 −2γ , all is well.
•
•
•
•
•
•
•
•
or
•
Given a 2-cell embedding with more than 2γ edges, contract an edge e
that is not a loop surrounding another loop of the embedding. If e is not a
loop, then following the boundaries of the face(s) bounded by e shows they
are still 2-cells, and we now have a 2-cell embedding of G · e on the same
surface. The induction hypothesis provides Euler’s Formula for G ·e. Since
G has one more vertex and edge than G · e but the same number of faces,
Euler’s Formula holds also for G. On the other hand, if e is a loop, then
G has one more edge and face than G · e but the same number of vertices;
again the formula holds.
An n-vertex simple graph embeddable on Sγ has at most 3(n −2 + 2γ )
edges. If G embeds on Sγ , then G has a 2-cell embedding on Sγ ′ for some
γ ′ with γ ′ ≤γ , so we may assume that G has a 2-cell embedding on Sγ .
Since the sum of the face-lengths is 2e(G) and each face in an embedding
of a simple graph has length at least three, we have 2e ≥3 f . Substituting
in Euler’s Formula n −e + f = 2 −2γ yields e ≤3(n −2 + 2γ ).
6.3.36. Genus of K3,3,n. Since K3,3,n has n + 6 vertices and 6n + 9 edges,
Euler’s formula yields γ (K3,3,n) ≥1+(6n +9−3n −18)/6 = (n −1)/2. This
can be improved by apply Euler’s Formula to the bipartite subgraph K6,n.
Here the genus is at least 1 + (6n −2n −12)/4, which simpliﬁes to n −2.
For 0 ≤n ≤3, the genus is 1, since K3,3 is nonplanar and K3,3,3 embeds
in the torus. Such an embedding is obtained by adding vertices for the
third part in the faces of a regular embedding of K3,3 as found in Exercise
6.3.34 (each of the three faces in the regular embedding is incident to all six
vertices of K3,3). Alternatively, a pleasing triangular embedding of K3,3,3
can be found directly as shown below.
•
•
•
•
•
•
1
1
1
1
z
b
•
•
•
•
•
•
•
•
•
•
3
x
y
c
x
a
c
y
a
2
6.3.37. For every positive integer k, there exists a planar graph G such
that γ (G
K2) ≥k. Let H = G
K2. The deﬁnition of cartesian product
yields n(H) = 2n(G) and e(H) = 2e(G) + n(G). Since an n-vertex graph
embeddable on Sγ has at most 3(n −2 + 2γ ) edges, we have γ (H) ≥1 +
(e(H) −3n(H))/6 = 1 + (2e(G) −5n(G))/6. If G is a triangulation with n
vertices, then e(G) = 3n −6, and we obtain γ (H) ≥−1 + n/12. It sufﬁces
to choose n ≥12k + 12.

339
Chapter 7: Edges and Cycles
Section 7.1: Line Graphs and Edge­Coloring
340
7.EDGES AND CYCLES
7.1. LINE GRAPHS & EDGE­COLORING
7.1.1. Edge-chromatic number and line graph for the two graphs below.
The labelings are proper edge colorings, the number of colors used is the
maximum degree, so the colorings are optimal.
•
•
•
•
•
•
1
2
3
0
3
0
1
0
2
•
•
•
•
•
•
0
1
2
0
1
2
0
1
2
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
7.1.2. χ′(Qk) = 1(Qk), by explicit coloring.
In the cube Qk, the edges
between vertices differing in coordinate j form a complete matching. Over
the k choices of j, these partition the edges.
7.1.3. χ′(Cn
K2) = 3. The lower bound is given by the maximum degree.
For the upper bound, when n is even colors 0 and 1 can alternate along
the two cycles, with color 2 appearing on the edges between the two copies
of the factor Cn. When n is odd, colors 0 and 1 can alternate in this way
except for the use of one 2. Color 2 appears on all cross edges except those
incident to edges on the cycles with color 2, as shown below.
•
•
•
•
•
•
•
•
•
•
•
•
2
2
0
1
2
2
0
1
2
0
1
0
1
2
0
1
7.1.4. For every graph G, χ ′(G) ≥e(G)/α′(G). In a proper edge-coloring,
each color class has at most α′(G) edges. The lower bound follows because
all e(G) edges must be colored.
7.1.5. The Petersen graph is the complement of L(K5). The vertices of L(K5)
are the edges in K5, which can be named as the 2-element subsets of [5].
Two such pairs are adjacent in the Petersen graph if and only if they are
disjoint, which is the condition for them being nonadjacent in L(K5).
7.1.6. The line graph of the Petersen graph has 10 triangles. For a simple
graph G, there is a triangle in L(G) for every set of three edges in G that
share one common endpoint and for every set of three edges that form
a triangle in G. The Petersen graph has no triangles, so the latter type
does not arise. However, the Petersen graph has 10 triples of edges with a
common endpoint, one for each of its vertices.
7.1.7. P5 is a line graph. The complement of P5 is a 5-cycle with a chord.
It is the line graph of a 4-cycle with a pendant edge.
•
•
•
•
•
•
•
•
•
•
H
P5 = L(H)
7.1.8. The line graph of Km,n is the cartesian product of Km and Kn. For
each edge xi yj in Km,n, we have a vertex (i, j) in L(Km,n); these are also
the vertices of Km
Kn. Pairs (i, j) and (k,l) in V (Km
Kn) are adjacent in
Km
Kn if and only if i = k or j = l. This is the same as the condition for
adjacency in L(Km,n), because xi yj and xk yl share an endpoint in Km,n if and
only if i = k or j = l.
7.1.9. A set of vertices in the line graph of a simple graph G form a clique
if and only if the corresponding edges in G have one common endpoint or
form a triangle. Let S be the corresponding set of edges in G, and choose
e ∈S. If all other elements of S intersect e at the same endpoint of e, we
have one common endpoint. Otherwise, we have edges f and g such that
f shares endpoint x with e and g shares endpoint y with e. Since f and
g must share an endpoint, they share their other endpoint z and complete
a triangle. Since no single vertex lies in all of e, f, g, no additional edge of
the simple graph G can share a vertex with all of these.

341
Chapter 7: Edges and Cycles
Section 7.1: Line Graphs and Edge­Coloring
342
7.1.10. If L(G) is connected and regular, then either G is regular or G is
a bipartite graph in which vertices of the same partite set have the same
degree. If L(G) is connected, then G is connected (except for isolated ver-
tices, which we ignore). For e = uv ∈E(G), the degree of e in L(G) is
d(u) + d(v) −2. If the edges incident to v in G have the same degree in
L(G), then they must join v to vertices of the same degree in G.
If G is not regular, then G has adjacent vertices u, v with different de-
grees, since G is connected. By the observation above about maintaining
constant degree, every walk from v in G must alternate between vertices
of degrees d(v) and d(u). Thus G has no odd walk and is bipartite. Fur-
thermore, the vertices of one partite set have degree d(v), and those of the
other partite set have degree d(u).
7.1.11. Line graphs of simple graphs.
a) e(L(G)) = P
v∈V (G)
 d(v)
2

.
Proof 1 (bijective argument). The edges of L(G) correspond to the
incident pairs of edges in G. Such pairs share exactly one vertex, and each
vertex v ∈V (G) contributes exactly
 d(v)
2

such incident pairs.
Proof 2 (degree-sum formula). The degree in L(G) of the vertex cor-
responding to uv ∈E(G) is dG(u) + dG(v) −2, the number of edges of G
sharing an endpoint with it. When this is summed over all edges of G,
the term dG(u) appears dG(u) times.
Hence the degree sum in L(G) is
P d(v)2 −2e(G), and L(G) has 1
2
P d(u)2 −e(G) edges. Replacing e(G) by
1
2
P di yields P  d(v)
2

.
(Comment: The formula holds also for graphs with multiple edges un-
der the convention that when edges share both endpoints we have two
edges between the corresponding vertices of L(G).)
b) G is isomorphic to L(G) if and only if G is 2-regular.
Sufﬁciency. A 2-regular graph is a disjoint union of cycles. The line
graph of any cycle is a cycle of the same length (successive edges on a cycle
in G turn into successive vertices on a cycle in L(G)).
Necessity.
Proof 1 (numerical argument). If G is isomorphic to L(G), then L(G)
has the same number of vertices and edges as G. Thus n(G) = n(L(G)) =
e(G) = e(L(G)).
By (a), this becomes n(G) = P
v∈V (G)
 d(v)
2

.
Using the
degree-sum formula, P d(v) = 2e(G) = 2n(G).
We have shown that the average degree is 2. When the degrees all
equal 2, the sum P  d(v)
2

equals n(G), as desired. It sufﬁces to show that
when the average degree is 2 but the individual degrees do not all equal 2,
P  d(v)
2

is larger than n(G).
In this case, there is at least one number bigger than 2 (the average)
and one smaller than 2. Since
 r
2

+
 s
2

>
 r−1
2

+
 s+1
2

when r > s +1, we can
iteratively bring the values toward the average while always decreasing
P  d(v)
2

. Hence the equality n(G) = P  d(v)
2

is achieved only when every
vertex degree is 2.
(Comment: This is the discrete version of a calculus argument. Be-
cause
 x
2

is quadratic in x with positive leading coefﬁcient, it is convex. For
a convex function, the sum of values at a set of n arguments with ﬁxed sum
s is minimized by setting each argument to s/n.)
Proof 2 (graph structure). As above, n(G) = P  d(v)
2

. If all degrees
are at least 2, then equality holds only when all equal 2. Hence it sufﬁces
to forbid vertices of degree less than 2.
For a graph H, observe that L(H) is a path if and only if H is a nontriv-
ial path. If G has any component that is a path, then let k be the maximum
number of vertices in such a component. In L(G) there is no component
isomorphic to Pk. Hence G does not have a component that is a path. In
particular, G has no isolated vertex.
Suppose that G has a path (v0, . . . , vl) such that d(v0) ≥3, d(vl) = 1,
and internal vertices have degree 2. Let e1, . . . , el be the edges of P. In
L(G), the vertices e1, . . . , el form a path such that d(e1) ≥3, d(el) = 1,
and internal vertices have degree 2. This path is shorter than P. Also, a
pendant path in L(G) can only arise in this way.
Let m be the maximum length of a path from a vertex of degree at
least 3 through vertices of degree 2 to a vertex of degree 1. By the rea-
soning above, L(G) has no such path of length m. Hence L(G) cannot be
isomorphic to G if G has a vertex of degree 1.
7.1.12. If G is a connected simple n-vertex graph, then e(L(G)) < e(G)
if and only if G is a path.
In the preceding problem, it is shown that
e(L(G)) = P
v∈v(G)
 d(v)
2

and that this is numerically minimized when each
d(v) is 2e(G)/n. Hence we require n
 2e(G)/n
2

< e(G), which simpliﬁes to
e(G) < n. This holds if and only if G is a tree.
Hence it is necessary that G be a tree, but this is not sufﬁcient, be-
cause the degrees may be far from equal (consider L(K1,n−1, for example).
If G has k leaves, then these contribute 0 to P  d(v)
2

. The sum of the other
vertex degrees is 2n −2 −k. Again the sum is smallest when these degrees
are equal. The requirement for the edge inequality becomes (n−k)
  2n−2−k
n−k
2

<
n−1. Since 2n−2−k
n−k
−1 = n−2
n−k , the inequality simpliﬁes to (2n−2−k)
  n−2
n−k

<
2n −2, which further simpliﬁes to (2n −2)
  n−2
n−k −1

< k
  n−2
n−k

and eventu-
ally to k < 4(n −1)/n.
We conclude that k ≤3. If a tree has three leaves, then its actual
degree list must consist of one 3, three 1s, and the rest 2s, and L(G) has
exactly n −1 edges. Hence the only graphs with e(L(G)) < e(G) are paths.

343
Chapter 7: Edges and Cycles
Section 7.1: Line Graphs and Edge­Coloring
344
7.1.13. If G is a simple graph such that G ∼= L(G), then G is C5 or the graph
consisting of a triangle plus a matching from the triangle to an independent
3-set (shown on the right below). Since G and L(G) have the same number
of vertices, e(G) = n(G). Also G has only one nontrivial component, since
otherwise G would be connected while L(G) would not.
If G has an isolated vertex, then G and hence L(G) has a dominating
vertex. Hence G has an edge xy incident to all other edges. Since there
are n(G) edges, the number of common neighbors of x and y is one more
than the number of common nonneighbors. Hence G has a triangle, which
means that G and hence L(G) has an independent set of size 3. Hence G
has three disjoint edges, which contradicts that every edge contains x or y.
Thus we may assume that G is connected. Since e(G) = n(G), there is
exactly one cycle in G (since deleting an edge of a cycle, which must exist,
leaves a tree). Also, e(G) = n(G) implies that the average vertex degree
is 2. If G is 2-regular, then G ∼= L(G) ∼= G. The only 2-regular graph
isomorphic to its complement is C5.
Otherwise, G has a vertex of degree 1. Thus G and hence L(G) has a
vertex adjacent to all but one other vertex. Such a vertex in L(G) corre-
sponds to an edge in G that is incident to all but one other edge; we call
such an edge semidominant. Indeed, we have argued that the number of
semidominant edges in G equals the number of vertices of degree 1. Thus
G has a semidominant edge xy. Since G is unicyclic, x and y have at most
one common neighbor.
First suppose that x and y have no common neighbor. The one edge
not incident to xy now joins neighbors of x and y (creating a 4-cycle) or
joins (by symmetry) two neighbors of x.
In the 4-cycle case, semidominant edges other than xy must be on the
4-cycle and incident to xy, and these work only if there are no pendant
edges incident to the opposite side of the 4-cycle. Thus there cannot be
pendant edges at both x and y, and there must be exactly two pendant
edges at one of them, say x. We have now speciﬁed G completely, as shown
below, but its complement and line graph are not isomorphic.
On the other hand, if an edge zw joins two neighbors of x, all semidom-
inant edges other than xy are incident to x. Since xz and xw are incident
to all edges except the pendant edges at y, there must be at least one pen-
dant edge at y.
If there is exactly one such edge, then xz and xw are
semidominant. If there is more than one, then xy is the only semidomi-
nant edge. Both possibilities contradict the equality between the number
of semidominant edges and the number of vertices of degree 1.
In the remaining case, x and y have a common neighbor, z. The one
edge not incident to xy is incident to z, since G is unicyclic. Since G has
only one triangle, G and L(G) have only one independent set of size 3.
Hence there is only one way to choose three disjoint edges in G. Hence x
and y, like z, have only one neighbor each of degree 1, and the graph is as
shown on the right below.
•
•
•
•
•
•
y
x
•
•
•
•
•
•
x
y
•
•
•
•
•
•
xy
G
G
L(G)
•
•
•
•
•
•
z
y
x
7.1.14.
Connectivity and edge-connectivity of line graphs of k-edge-
connected graphs.
Suppose L(G) has a separating t-set S.
Then S cor-
responds to a set of t edges whose deletion disconnects G, because the line
graph of a connected graph is connected. Therefore t ≥k. This can also be
proved using edge-disjoint paths in G, but not as cleanly.
Now consider edge-connectivity. Since δ(G) ≥k, we have δ(L(G)) ≥
2k −2, since each edge is incident to at least k −1 others at each endpoint.
Let [T, T ′] be a minimum edge cut of L(G), with κ′ edges. Because a mini-
mum edge cut yields only two components, T, T ′ corresponds to a partition
of E(G) into two connected subgraphs, which we call F, F ′, respectively.
There is an edge of L(G) in [T, T ′] each time an edge of F is incident to an
edge of F′.
These incidences take place at vertices of G. At a vertex x ∈V (G),
there are dF(x) edges of F (corresponding to vertices of T ) and dF′(x) edges
of F (corresponding to vertices of T ′). Since each such edge of F is incident
to each such vertex of F′, this vertex x in G yields dF(x)dF′(x) edges in
[T, T ′]. Since dF(x) + dF′(x) = dG(x) ≥k, this product is at least k −1
whenever x is incident to edges of both F and F ′.
Hence it sufﬁces to show that there are at least two vertices of G that
are incident to edges from both F and F ′. If F and F′ are incident at only
one vertex x, then this must be a cut-vertex of G, because any path from F
to F′ that avoids x would yield another vertex where F and F ′ are incident.
Deleting the edges of F incident to x or the edges of F ′ incident to x discon-
nects G. Since G is k-edge-connected, we conclude that dF(x), dF′(x) H ≥k
and
[T, T ′]
 ≥k2 > 2k −2.
7.1.15. Every connected line graph of even order has a perfect matching.
Note that a graph without isolated vertices has the same number of com-
ponents as its line graph. Let S′ be the set of edges in G corresponding to a
set S ⊆V (L(G)). Deleting S from L(G) corresponds to deleting S′ from G,

345
Chapter 7: Edges and Cycles
Section 7.1: Line Graphs and Edge­Coloring
346
but each edge deletion increases the number of components by at most one.
Thus G −S′ (and L(G) −S) have at most 1 + |S| components of any sort,
odd or otherwise. For a graph of even order, o(L(G) −S) ≤1 + |S| implies
Tutte’s condition o(L(G) −S) ≤|S|, since the order is even.
The edges of a connected simple graph of even size can be partitioned
into paths of length two. The paired vertices of a perfect matching in L(G)
correspond in G to paired edges forming paths of length 2. Since the match-
ing saturates V (L(G)), the corresponding paths partition E(G).
7.1.16. If G is a simple graph, then γ (L(G)) ≥γ (G), where γ (G) denotes
the genus of G (Deﬁnition 6.3.20). Consider an embedding of L(G) on a
surface S; it sufﬁces to obtain an embedding of G on the same surface. For
each x ∈V (G), the edges of G with endpoint x form a clique Qx in L(G).
For the embedding of G, locate x at one vertex xx ′ of Qx in the embedding
of L(G). For each edge xy, embed it along the path in the embedding of
L(G) from xx′ to xy to yy′. Since xy is used in only one such path, the edges
of the new embedding of G on this surface have no crossings.
7.1.17. The number of proper 6-edge-colorings of the graph below (from a
speciﬁed set of six colors) is 900 · 512.
•
•
•
•
•
•
It sufﬁces to count the ways to assign pairs of colors to the double edges
so that the pairs at two double edges with a common endpoint are disjoint,
because we can then multiply by 29 to assign the colors within the pairs.
We can view such an assignment as a 3-by-3 matrix in which the entry
in position (i, j) is the pair assigned to the two edges joining the ith top
vertex and the jth bottom vertex. Each color must appear exactly once in
some pair in each row and each column. We can choose entry (1, 1) in
 6
2

ways, and for each such way there are
 4
2

choices for entry (1, 2). Thus
we can choose the ﬁrst row in 90 ways, and for each way the number of
completions will be the same. Let the pairs in the ﬁrst row be {a, b}, {c, d},
and {e, f }, in order.
If entry (2, 1) is one of the pairs in the ﬁrst row, then we have two such
pairs to choose from. By symmetry, let it be {c, d}. Now entry (2, 2) must
be {e, f }, and entry (2, 3) is {a, b}, and the bottom row is determined.
If entry (2, 1) is not one of the pairs in the ﬁrst row, then we ﬁll it using
one element from entry (1, 2) and one element from entry (1, 3); these can
be chosen in 4 ways. For example, suppose that entry (2, 1) is {c, e}. Now
f must appear in entry (2, 2) and d in entry (2, 3), and the second row is
completed by deciding which of {a, b} goes into entry (2, 2) and which goes
into entry (2, 3). There are two ways to make this choice, and again the
bottom row is determined.
Thus after choosing the ﬁrst row, there are two ways to complete the
matrix with entry (2, 1) not being a pair from the ﬁrst row. Since there are
two ways when entry (2, 1) is a pair from the ﬁrst row, the total number of
colorings is 10 · 90 · 29, as claimed.
7.1.18. χ ′(Km,n) = 1(Km,n), by explicit coloring. We may assume that m ≤
n, so the maximum degree is n. If the vertices are X ∪Y with X = x1, . . . , xm
and Y = y1, . . . , yn, we give the edge xi yj the color i + j (mod n). Since
incident edges differ in the index of the vertex in X or the vertex in Y, they
receive different colors.
7.1.19. Every simple bipartite graph G has a 1(G)-regular simple bipartite
supergraph. Let k = 1(G), and let X and Y be the partite sets of G.
Construction 1. A huge simple k-regular supergraph of G can be
constructed iteratively as follows: If G is not regular, add a vertex to X for
each vertex of Y and a vertex to Y for each vertex of X. On the new vertices,
construct another copy of G. For each vertex in G with degree less than k,
join its two copies in the new graph to get G′. Now k is the same as before,
the minimum degree has increased by one, and G′ is a supergraph of G.
Iterating this k −δ(G) times yields the desired simple supergraph H. It is
connected if G was connected.
Construction 2. We may assume that |X| = |Y| by adding vertices
to the smaller side, if necessary. Let M = nk −P
i d(xi); this is the total
“missing degree”. Add M vertices to both X and Y, and place a (k −1)-
regular graph H on these, which may be constructed using successively
tilted matchings as in the natural 1-factorization of K M,M. Now add edges
joining deﬁcient vertices of X and Y to vertices of H on the opposite side.
Each vertex of H receives one such edge, which remedies the M deﬁciencies
in each of X and Y.
7.1.20. Edge-coloring of digraphs. Given a digraph D with indegrees and
outdegrees at most d, form a bipartite graph H as follows. The partite sets
are A = {x−: x ∈V (D)} and B = {x+: x ∈V (D)}. For each edge xy in D,
place an edge x−y+ in H; the vertex x−inherits the edges exiting x and the
vertex x+ inherits the edges entering x. The resulting bipartite graph H is
the “split” of D (Section 1.4).
Since the maximum number of edges entering or exiting a vertex of D
is d, 1(H) = d. Since H is bipartite, χ ′(H) = d. The d-edge-coloring on the
edges of H is the desired coloring of the corresponding edges in D.

347
Chapter 7: Edges and Cycles
Section 7.1: Line Graphs and Edge­Coloring
348
7.1.21. Algorithmic proof of χ ′(G) = 1(G) for bipartite graphs. Let G be a
bipartite graph with maximum degree k. Let f be a proper k-edge-coloring
of a subgraph H of G. Let uv be an edge of G not in H. We produce a proper
1(G)-edge-coloring of the subgraph consisting of H plus the edge uv.
Since uv is uncolored, among the 1(G) available colors there is a color
α not used at u. Similarly, some color β is not used at v. If α is missing at
v or β at u, then we can extend the coloring to uv using α or β. Otherwise,
follow the path P from u that alternates in colors α and β. The path is
well-deﬁned, since each color appears at most once at each vertex.
Since α does not appear at u, the path P ends somewhere and does not
complete a cycle. The path reaches the partite set of v along edges of color
β, and it reaches the partite set of u along edges of color α. Hence P cannot
reach v, where β is missing. We can now interchange colors α and β on the
edges of P to make β available for the edge uv.
7.1.22. If G is a simple graph with maximum degree 3, then χ ′(G) ≤4. Let
H = L(G); since χ ′(G) = χ(L(G)), we seek a bound on χ(H). By making
the same argument for each component, we may assume that G and H
are connected. Since 1(G) = 3, an edge of G intersects at most two other
edges at each end, and hence 1(H) ≤4. If H is 4-regular, then G must be
3-regular. The smallest 3-regular simple graph has 6 edges, so H ̸= K5.
By Brooks’ Theorem, χ(H) ≤1(H) if H is not a clique or odd cycle.
If H is an odd cycle, then χ(H) ≤3. If H is a clique, then it has at most
4 vertices. Otherwise, x′(G) = χ(H) ≤1(H) ≤4. (Note: when 1 = 3,
1 + 1 = 2(1 −1). For larger 1, Brooks’ Theorem is not strong enough to
prove χ ′(G) ≤1(G) + 1.)
7.1.23.
1-factorization of K(p, q), the complete p-partite graph with q
vertices in each partite set.
With G[H] denoting composition, we have
K(p, q) = K(p, d)[K q/d] when d divides q.
a) If G decomposes into copies of F, then G[K m] decomposes into copies
of F[K m]. Expanding a copy of F in the decomposition of G into a copy of
F[K m] uses precisely the copies in G[K m] of the edges in that copy of F.
Thus these expansions exhaust the copies in G[K m] of edges in G. Since
K m is an independent set, there are no other edges to consider.
The relation “G decomposes into spanning copies of F” is transitive. If
G decomposes into spanning copies of F and H decomposes into spanning
copies of G, then the F-decomposition of G can be used on each graph in a
G-decomposition of H to decompose H into spanning copies of F.
b) K(p, q) decomposes into 1-factors when pq is even. When p is even,
Kp has a 1-factorization - a decomposition into copies of (p/2)K2.
By
part (a), Kp[K q] decomposes into spanning copies of (p/2)K2[K q], which
equals (p/2)Kq,q.
Since (p/2)Kq,q is a regular bipartite graph, it has a
1-factorization. By transitivity, K(p, q) also has a 1-factorization.
When p is odd, we have q even, and thus K(p, q) = K(p, 2)[K q/2]. If
K(p, 2) has a 1-factorization (into spanning copies of pK2), then we decom-
pose K(p, q) into spanning copies of pKq/2,q/2 and obtain a 1-factorization
of K(p, q) by transitivity.
It remains only to decompose K(p, 2) into 1-factors when p is odd.
Cliques of odd order decompose into spanning cycles; thus it sufﬁces to
decompose Cp[K 2] into 1-factors. Since this 4-regular graph has an even
number of vertices (2p), it sufﬁces to decompose it into two spanning cycles.
Let the vertices be v0, . . . , vp−1 and u0, . . . , u p−1, with {ui, vi} ↔{ui+1, vi+1}
(indices modulo p). The two desired cycles are
(v0, . . . , vp−1, u0, u p−1, . . . , u1)
(u0, v1, u2, . . . , up−1, v0, vp−1, up−2, . . . , v2, u1).
•
•
•
•
•
•
•
•
•
•
v0
up−1
7.1.24. If χ ′(H) = 1(H), then χ ′(G
H) = 1(G
H). The graph G
H
consists of a copy of G for each vertex of H and a copy of H for each vertex
of G. A vertex (u, v) ∈G
H has neighbors (u, v′) for every v′ ∈NH(v) and
(u′, v) for every u′ ∈NG(u). Hence dG
H(u, v) = dG(u) + dH(v). With u ∈G
and v ∈H having maximum degree, we obtain 1(G
H) = 1(G) + 1(H).
We construct a proper (1(G) + 1(H))-edge-coloring.
Use the same proper (1(G) + 1)-edge-coloring (guaranteed by Vizing’s
Theorem) on each copy of G. With 1(G) + 1 colors allowed, some single
color i is missing from all edges incident to all copies of the vertex u ∈
V (G). To color the copy of H on the vertices with ﬁrst coordinate u, we
need only 1(H) colors.
We use color i and 1(H) −1 additional colors.
Doing this for each u ∈V (G) constructs a proper edge-coloring of G
H
with 1(G) + 1 + 1(H) −1 = 1(G
H) colors.
7.1.25. Kotzig’s Theorem on Cartesian products.
a) χ′(G
K2) = 1(G
K2). By Vizing’s Theorem, we can properly color
E(G) with 1(G) + 1 colors. Use a single such coloring on both copies of
G. The two copies of a vertex of G are joined by an edge, but both are
missing the same color i in the coloring of G, so color i can be assigned to

349
Chapter 7: Edges and Cycles
Section 7.1: Line Graphs and Edge­Coloring
350
the edge between them. Hence G × K2 is (1(G) + 1)-edge-colorable. We
cannot properly color E(G × K2) with 1(G) colors, because χ ′(G
K2) ≥
1(G
K2) = 1(G) + 1.
b) If G1, G2 are edge-disjoint graphs with the same vertex set and H1, H2
are edge-disjoint graphs with the same vertex set, then (G1∪G2) (H1∪H2) =
(G1
H2) ∪(G2
H1). We view G1 and G2 as a red/blue edge-coloring of
G1 ∪G2, and we view H1 and H2 as a yellow/green edge-coloring of H.
Since every edge of G
H is a copy of an edge of G or H, this induces a
red/blue/yellow/green edge-coloring of the product. The spanning subgraph
containing the red and green edges is G1
H2, and the spanning subgraph
containing the blue and yellow edges is G2
H1.
c) G
H is 1-factorable if G and H each have a 1-factor. Let G1 be a 1-
factor of G, G2 = G −E(G1), H1 a 1-factor of H, and H2 = H −E(H1). Since
H1 = mK2, we have G2
H1 = G2
mK2 = m(G2
K2). By part (a), there is
a proper edge-coloring of G2
H1 with 1(G2) + 1 = 1(G) colors. Similarly,
there is a proper edge-coloring of G1
H2 with 1(H) colors. By part (b),
these together yield a proper edge-coloring of G
H with 1(G) + 1(H) =
1(G H) colors. (This result is Kotzig’s Theorem, usually stated for regular
graphs; the proof is from the thesis of J. George.)
7.1.26. If G is a regular graph with a cut-vertex x, then χ ′(G) > 1(G).
Proof 1. Because G is regular, χ ′(G) = 1(G) requires that each color
class be a 1-factor. Hence n(G) is even. Since n(G) −1 is odd, G −x has a
component H of odd order. Let y be a neighbor of x not in H. A 1-factor of
G that contains xy must contain a 1-factor of H, which is impossible since
H has odd order.
Proof 2. Again each color class must be a 1-factor. Let M1 and M2
be color classes containing edges incident to x whose other endpoints are
in different components of G −x. Since these are perfect matchings, their
symmetric difference consists of isolated vertices and even cycles. In par-
ticular, it contains a cycle through x that visits different components of
G −x, but there is no such cycle.
7.1.27. Density conditions for χ ′(G) > 1(G).
a) If G is regular and has 2m + 1 vertices, then χ ′(G) > 1(G). For a
regular graph, being 1(G)-edge-colorable means being 1-factorable, which
is impossible with odd order since such graphs have no 1-factor.
b) If G has 2m + 1 vertices and more than m · 1(G) edges, then χ ′(G) >
1(G). Each color class is a matching, and each matching has size at most
m, so 1 matchings cover at most m1 edges. Since G has more edges than
that, every proper edge-coloring of G requires more than 1 colors.
c) If G arises from a k-regular graph with 2m + 1 vertices by deleting
fewer than k/2 edges, then χ ′(G) > 1(G). Since fewer than k vertices have
lost an edge and k ≤2m, some vertex of degree k remains; hence 1(G) = k.
Also e(G) > (2m + 1)k/2 −k/2 = m1(G), so (b) implies χ ′(G) > 1(G).
7.1.28. The Petersen graph has no overfull subgraph. A subgraph H is
overfull if and only if it has an odd number of vertices and has more than
(n(H) −1)1(G)/2 edges. Subgraphs of order 3, 5, 7, 9 would need more
than 3, 6, 9, 12 edges, respectively. Since the Petersen graph has no cycle
of length less than 5, the smaller cases are excluded. For the last case,
deleting a single vertex leaves a subgraph with 9 vertices and 12 edges,
but 12 is not more than 12.
7.1.29. A non-1-factorable regular graph with high degree. Let G be the
(m −1)-regular connected graph formed from 2Km by deleting an edge from
each component and adding two edges between the components to restore
regularity. If m is odd and greater than 3, then G is not 1-factorable.
To see this, observe that the central edge cut of size 2 leaves an odd
number of vertices on both sides. Hence every 1-factor in G includes an
edge of this cut. If G is 1-factorable, this forces the degree to be at most 2,
and hence m ≤3.
•
•
•
•
Km −e
Km −e
7.1.30. Overfull Conjecture ⇒1-factorization Conjecture. Let G be a k-
regular simple graph of order 2m.
An induced subgraph of G is overfull if and only if the subgraph in-
duced by the remaining vertices is overfull. Let H be the subgraph induced
by vertex set S. We have 2e(H) = kn(H) −
[S, S]
 (Proposition 4.1.12).
Overfullness for H is thus the inequality kn(H) −
[S, S]
 > k(n(H) −1)
(and n(H) odd), since 1(G) = k. This inequality simpliﬁes to
[S, S]
 < k,
and it is satisﬁed for S if and only if it is satisﬁed for S.
If G has an overfull subgraph, then k ≤2 ⌊(m −1)/2⌋. Again, we have
2e(H) = kn(H) −
[S, S]
. If H is overfull, then
[S, S]
 < k, by the computa-
tion in part (a). Also, 2e(H) ≤n(H)[n(H) −1], since G is simple. Together,
these inequalities yield n(H)[n(H) −1] < k[n(H) −1], or k < n(H). By
part (a) we may assume that n(H) ≤m, since both V (H) and V (G) −V (H)
induce overfull subgraphs. Hence we may conclude that k < m. Further-
more, since n(H) is odd when H is overfull, we strengthen this to k < m −1
when m is even.
If the constraint on k fails, then there is no overfull subgraph, so if the
Overfull Conjecture holds, then the 1-factorization Conjecture also holds.

351
Chapter 7: Edges and Cycles
Section 7.1: Line Graphs and Edge­Coloring
352
7.1.31. Optimal edge-colorings.
A k-edge-coloring of a multigraph G is
optimal if it has the maximum possible value of P
v∈V (G) c(v), where c(v) is
the number of distinct colors appearing on edges incident to v.
a) If G does not have a component that is an odd cycle, then G has a 2-
edge-coloring that uses both colors at each vertex of degree at least 2. If G
is Eulerian, we follow an Eulerian circuit, alternating between the colors;
each visit to a vertex enters and leaves on different colors. If e(G) is even,
then the ﬁrst and last edge also contribute both colors to their common
vertex. If e(G) is odd and the starting vertex has degree at least 4, then it
receives both colors from another visit. If G has no vertex of degree at least
4 at which the odd circuit can be started, then G is an odd cycle, which is
the exceptional case and has no such 2-edge-coloring.
If G is not Eulerian, then we add a new vertex x having an edge to
each vertex of G with odd degree. Let C be an Eulerian circuit starting at x
in the new graph G′; alternate the two colors along C. The problem of ﬁrst
and last edge having the same color is irrelevant, because we discard the
edges incident to x. For vertices other than x, the degree in G′ is at least 2,
and there is at most one edge to x. Hence each vertex v of degree at least 2
in G has a visit to it in C using only edges of G, and this visit contributes
edges of both colors at v.
b) If f is an optimal k-edge-coloring of G, having color a at least twice
at u ∈V (G) and color b not at u, then in the subgraph of G consisting of
edges colored a or b, the component containing u is an odd cycle. Let H be
the speciﬁed component, consisting of edges reachable from u using paths
of colors a and b. If H is not an odd cycle, then part (a) allows us to recolor
E(H) with colors a and b so that both colors appear at every vertex of
degree at least 2. Now the number of colors appearing at each vertex of H
is at least as large as before, and at u the number has increased. This new
coloring of G has a larger value of P c(v), which contradicts the optimality
of f . Hence H must be an odd cycle.
c) If G is bipartite, then G is 1(G)-edge-colorable, and G has a δ(G)-
edge-coloring in which each color appears at every vertex.
Consider an
optimal 1(G)-edge-coloring f of G. If f is not a proper edge-coloring, then
some color appears at least twice at some vertex. Since the degree of that
vertex is at most 1(G), some other color must be missing at that vertex.
Since f is optimal, part (b) implies that G has an odd cycle, which cannot
occur in a bipartite graph. Hence f is a proper edge-coloring.
For the second claim, consider an optimal δ-edge-coloring of G. If some
color i is missing at u, then some color j must appear twice, because the
number of edges at u is at least δ. By part (b), this requires an odd cycle
in G. Thus an optimal δ-coloring must have δ different colors appearing at
each vertex of G.
7.1.32. Every bipartite graph G with minimum degree k has a k-edge-
coloring in which at each vertex v, each color appears ⌈d(v)/k⌉or ⌊d(v)/k⌋
times. Modify G to obtain another bipartite graph H by iteratively splitting
each vertex v of G into ⌈dG(v)/k⌉vertices, each inheriting k of the edges in-
cident to v, except for one vertex that may receive fewer. Let the resulting
graph be H; note that 1(H) = k. Since a bipartite graph H has a proper
1(H)-edge-coloring, we can properly color H with the desired number of
colors. Each color is used at each vertex that was split from v except pos-
sibly the one that received fewer incident edges. Hence we recombine the
split vertices to return to G, we have each of the k colors appearing ⌈d(v)/k⌉
or ⌊d(v)/k⌋times at each vertex v. (Comment: The same argument holds
for every k, not only the minimum degree.)
7.1.33. Every simple graph with maximum degree 1 has a proper (1 + 1)-
edge-coloring in which each color is used ⌈e(G)/(1 + 1)⌉or ⌊e(G)/(1 + 1)⌋
times. By Vizing’s Theorem, there is a proper coloring with 1 + 1 colors.
If the total usage of some two colors differs by more than one edge, con-
sider the subgraph formed by the edges with these two colors. Since the
coloring is proper, this consists of components that are paths and/or cycles
alternating between the two colors. The color appearing more often must
occur on the end edges of a path of odd length. Switching colors on such a
path yields a new proper coloring that is less out of balance. Such improve-
ments can be made until the frequencies differ by at most one, at which
point they must all be ⌈e(G)/(1 + 1)⌉or ⌊e(G)/(1 + 1)⌋.
7.1.34. Shannon’s bound on χ ′(G), almost.
a) Every loopless graph G has a 1(G)-regular loopless supergraph.
Given G with vertex set x1, . . . , xn, add another copy of G, disjoint from it,
with vertex set y1, . . . , yn. Add 1(G) −dG(vi) copies of the edge xi yi to com-
plete the construction. (Comment: If G is simple and a simple supergraph
is desired, modify the construction by taking 2(1(G) −δ(G)) copies of G.
Since a complete graph with an even number of vertices is 1-factorable, on
the copies of x ∈V (G) we can add 1(G) −dG(x) edge-disjoint matchings to
raise the degree of these vertices to 1(G)).
b) If G is a loopless graph with even maximum degree, then χ ′(G) ≤
31(G)/2.
By part (a), we can ﬁnd a 1(G)-regular supergraph H of G;
by Petersen’s Theorem, we can partition H into 1(G)/2 2-factors. Since
each 2-factor is a disjoint union of cycles, each 2-factor is 3-edge-colorable.
Hence we can color E(H) with 31(G)/2 colors, and we can delete the edges
of H −G to obtain a proper edge-coloring of G with 31(G)/2 colors.
7.1.35. Bounds on χ ′(G).
Let P denote the set of 3-vertex paths in G,
expressed as edges xy and yz, and let µ(e) denote the multiplicity of edge

353
Chapter 7: Edges and Cycles
Section 7.1: Line Graphs and Edge­Coloring
354
e. the last bound below (Anderson–Goldberg) implies the earlier bounds.
Shannon: χ ′(G) ≤⌊31(G)/2⌋.
Vizing, Gupta: χ ′(G) ≤1(G) + µ(G).
Ore: χ′(G) ≤max{1(G), maxP
 1
2d(x) + d(y) + d(z)

}.
χ′(G) ≤max{1(G), maxP
 1
2(d(x) + µ(xy) + µ(yz) + d(z))

}.
The last implies Ore because µ(xy)+µ(yz) ≤d(y). It implies Vizing–Gupta
because [µ(xy) + mu(yz)]/2 ≤µ(G) and [d(x) + d(z)]/2 ≤1(G). It implies
Shannon because it implies Ore and [d(x) + d(y) + d(z)]/2 ≤31(G)/2.
7.1.36. (+) Line graphs of complete graphs. If n ̸= 8, prove that G = L(Kn)
if and only if G is a (2n −4)-regular simple graph with
 n
2

vertices in which
nonadjacent vertices have four common neighbors and adjacent vertices
have n −2 common neighbors. (When n = 8, there are three exceptional
graphs satisfying the conditions.) (Chang [1959], Hoffman [1960])
7.1.37. (+) Line graphs of complete bipartite graphs. Unless n = m = 4,
prove that G = L(Km,n) if and only if G is an (n + m −2)-regular simple
graph of order mn in which nonadjacent vertices have two common neigh-
bors, n
 m
2

pairs of adjacent vertices have m −2 common neighbors, and
m
 n
2

pairs of adjacent vertices have n −2 common neighbors. (Moon [1963],
Hoffman [1964]) (Comment: for n = m = 4, there is one exceptional graph
- Shrikande [1959].)
7.1.38. Sufﬁciency of van Rooij-Wilf condition for connected graphs con-
taining a double triangle with two even triangles. We claim that the only
possibilities for G in this case are the three graphs appearing below. By
inspection, these graphs are line graphs, being L(K1,3 + e), L(K4 −e), and
L(K4), respectively. Let F be a double triangle of G with two even trian-
gles axy and xyb. If G has another vertex, then G has another edge to
one of {x, y}, say an edge xz, else any edge joining F to G −F creates an
odd triangle in F. Now N(z) ∩{a, b, y} is {y} or {a, b}, but in the former
case {x, a, b, z} induces K1,3. Hence z ↔{a, b}, and the graph induced by
S = {x, y, z, a, b} is the wheel L(Kr −e) in the middle below.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
If x or y has another neighbor w, then by the same argument the other
neighbors of w in F are {a, b}. If the edge is yw, then we must have z ↔w
to avoid making both zxa and zxb odd; this graph is now L(K4) on the right
below. If the edge is xw, then we must have z ↔w to avoid inducing K1,3
on {x, y, z, w}. Now {y, z, w, a, b} induce the expanded 4-cycle, which we
saw earlier is not a line graph; it violates the hypothesis because y makes
both azw and bzw odd. This argument shows that y also has at most one
neighbor not in F. The only remaining way to attach additional vertices is
z ↔v (or, equivalently, w ↔v if y does have a neighbor w outside F), but
then {z, v, a, b} induces K1,3.
7.1.39. Characterization of graphs with the same line graph. A Krausz
decomposition of a simple graph H is a partition of E(H) into complete
graphs such that each vertex of H is used at most twice.
a) For a connected simple graph H, two Krausz decompositions of H
that have a common complete graph are identical. Beginning with the com-
mon complete graph Q1, we iteratively ﬁnd common complete graphs in
the decomposition until no more edges remain. While an edge remains, it
has a path to the subgraph that has been decomposed, since G is connected.
Thus there is an unabsorbed edge incident to a clique that has been ab-
sorbed; call the common vertex v. Since each vertex is used at most twice,
all the unabsorbed edges incident to v must lie in the same complete graph
in each decomposition. Its vertex set must be v together with the neigh-
bors of v along the remaining incident edges, so no other neighbors of v are
available. Hence this complete graph must also be in each decomposition.
b) Distinct Krausz decompositions for the graphs in Exercise 7.1.38.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
c) No connected simple graph except K3 and those in part (b) has two
distinct Krausz decompositions. By part (a), it sufﬁces to show that in any
other graph G, there is some complete graph that appears in every Krausz
decomposition. Call the complete graphs in some Krausz decomposition
K-graphs.
Suppose ﬁrst that G has a clique Q of size at least 4. We may assume
that three vertices of Q appear together in a some K-graph, since otherwise
each vertex of Q is in at least three K-graphs. If three vertices of Q appear
together but not with all of Q, then an omitted vertex of Q, since it is used
only twice, appears in another K-graph with at least two vertices of Q, and
now some edge is covered twice. Therefore, if G has a maximal clique of
size at least 4, it appears in every Krausz decomposition.
If G has an edge in no triangle, then it appears in every Krausz de-
composition. Hence we may assume that every edge of G is in a triangle
and G has no 4-clique. Since there is no 4-clique and every vertex is used
at most twice, no edge appears in three triangles.

355
Chapter 7: Edges and Cycles
Section 7.2: Hamiltonian Cycles
356
Suppose that every edge of G appears in exactly one triangle. If there
are two triangles sharing a vertex, then there are four edges at that vertex
and both triangles appear in every decomposition, since the vertex can only
be used twice. Hence G = K3, which has two decompositions.
Therefore, we may assume that some edge e appears in two triangles
and there are two decompositions. Now e is the common edge of a double
triangle (no K4), and each triangle is used in one decomposition (since the
endpoints are used only once). By symmetry, we may let e = xy, let x, y, z
be the triangle used, and let w be the other vertex of the double triangle.
If w has two other neighbors u and v, then each is adjacent to exactly
one of {x, y}, since w has been used twice and there is no K4. By symmetry,
let these edges be ux and vy. Since we have assumed another decomposi-
tion using x, y, w in a triangle, the edges uw and vw must appear together
in a triangle in that decomposition. But now also yv and yz must lie in a
triangle, and similarly xu and xz. Hence u, v, z form another triangle in
that decomposition. Now every vertex is in two triangles in both decompo-
sitions, there is no room for additional incident edges, and the graph is the
last graph in part (a).
If w has exactly one other neighbor, by symmetry we may assume that
it is u, adjacent to x. Now since x, y, w form a triangle in the other decom-
position, xu and xz must lie in a triangle, so uz is an edge and x, u, z form a
triangle in the other decomposition. There are no other neighbors of w or
y. Another neighbor of u or z would have to form a triangle with uz, but in
the other decomposition these edges could not be absorbed. Hence G is the
5-vertex wheel (the middle graph in part (a)).
Hence w has no other neighbor. This implies that x and y have no other
neighbor, since they are already used twice.
If z has another neighbor,
then we are in one of the cases described above with respect to the other
decomposition where x, y, w is the triangle used. Hence z also has no other
neighbor, and our graph is the kite (the left graph in part (a)).
d) K1,3 and K3 are the only two nonisomorphic simple graphs with iso-
morphic line graphs. When G is the line graph of a graph H, the vertices
of H correspond to complete subgraphs in a Krausz decomposition of G.
Furthermore, given a Krausz decomposition, there is one way to retrieve
H satisfying this correspondence, as in Theorem 7.1.16. Thus if G is the
line graph of two graphs H1 and H2, then G must have distinct Krausz de-
compositions. For the graphs in part (b), the Krausz decompositions are
“isomorphic”, retrieving the same graph as H1 and H2. For K3, the decom-
position using one triangle yields L(K1,3) = K3, and the decomposition into
three edges yields L(K3) = K3. For every other line graph G, there is only
one Krausz decomposition and hence only one solution to L(H) = G.
7.1.40. A simple claw-free graph with has a double triangle with both tri-
angles odd if and only if it some graph below is an induced subgraph.
•
•
•
•
•
F1
•
•
•
•
•
F2
•
•
•
•
•
•
F3
•
•
•
•
•
•
F4
•
•
•
•
•
•
F5
•
•
•
•
•
•
F6
•
•
•
•
•
•
F7
•
•
•
•
•
•
F8
In each graph shown, for each triangle of the double triangle T there is
a vertex with an odd number of neighbors on that triangle. If such a graph
is an induced subgraph of G, then T also has both triangles odd in G.
Conversely, suppose that G has a double triangle T with triangles X
and Y both odd. Let {u, w, z} and {v, w, z} be the vertex sets of X and Y,
respectively. A vertex outside T is adjacent to w or z and to nothing else in
T would yield an induced claw, so G has no such vertex. However, a vertex
can have one neighbor in X or Y and two in the other by being adjacent to
w or z and to u or v. A vertex with exactly one neighbor in X or Y and none
in the other is adjacent only to u or v in T .
A single vertex outside G cannot be adjacent to three vertices in X or
Y and one in the other, but it can be adjacent to one in each or to three in
each, which yield F1 and F2 above.
Otherwise, we use two vertices x and y, respectively, to make X and Y
odd. Suppose ﬁrst that neither x nor y has one neighbor on one triangle
and two on the other. Let a = |N(x) ∩X| and b = |N(y) ∩Y|. If x ↮y,
then we obtain F3, F4, or F5 when (a, b) is (1, 1), ((1, 3) or (3, 1)), or (3, 3),
respectively. If x ↔y and (a, b) = (1, 1), then we obtain F6. If x ↔y and
b = 3, then deleting v yields F1 or F2, depending on whether a is 1 or 3.
In the remaining case, we may assume by symmetry that y has one
neighbor in Y and two neighbors in X, with N(y)∩(X ∪Y) = {z, u}. If x has
one neighbor in X and none in Y, then N(x) ∩(X ∪Y) = {u}, and {u, x, y, w}
induces a claw. If x has three neighbors in X, then {z, x, y, v} induces a
claw if x ↮y, and deleting v leaves F2 if x ↔y.
Hence we may assume that x has one neighbor in X and two neighbors
in Y. Depending on N(x) ∩{y, z}, we have these outcomes:
N(x) ∩{y, z}
∅
{y}
{z}
{y, z}
outcome
F7
G[{v, w, x, y, z}] ∼= F1
G[{z, w, x, y}] ∼= K1,3
F8

357
Chapter 7: Edges and Cycles
Section 7.2: Hamiltonian Cycles
358
7.2. HAMILTONIAN CYCLES
7.2.1. The complete bipartite graph Kr,r is Hamiltonian if and only if r ≥
2. Since K1,1 has no cycle, we exclude it. For r ≥2, we list the vertices
alternately from the two partite sets. Consecutive vertices are adjacent,
and the last is adjacent to the ﬁrst, so we obtain a spanning cycle.
7.2.2. The Gr¨otzsch graph is Hamiltonian.
•
•
•
•
•
•
•
•
•
•
•
7.2.3. Kn,n has n!(n −1)!/2 Hamiltonian cycles. Specifying the order in
which the vertices of each partite set will be visited determines a cycle
starting at a given vertex x. Since there are n vertices in the other partite
set and n −1 remaining to be visited in the same partite set as x, there
are n!(n −1)! ways to specify these orderings. This counts each cycle twice,
since each cycle can be followed in either direction from x.
7.2.4. If a graph G has a Hamiltonian path, then for every vertex set S,
the number of components in G −S is at most |S| + 1. Let c(H) denote the
number of components of a graph H, let P be a Hamiltonian path in G, and
consider S ⊆V (G).
Proof 1 (counting components). Successive deletion of vertices from a
path increases the number of components of the path by at most one each
time, so c(P −S) ≤1 + |S|. Since P is a spanning subgraph of G −S and
adding edges cannot increase the number of components, we have c(G −
S) ≤c(P −S) ≤1 + |S|.
Proof 1′ (following the path).
P starts somewhere and visits each
component of G −S. It must exit all but one of these before it ﬁrst enters
the last such component, and these exits must go to distinct vertices of S.
Hence |S| ≥c(G −S) −1.
Proof 2 (graph transformation). Let u, v be the endpoints of P. If
u ↔v, then G is Hamiltonian, and then c(G −S) ≤|S| < |S| + 1. If uv is
not an edge, then G′ = G+uv is Hamiltonian, which implies c(G′−S) ≤|S|.
However, c(G −S) ≤c(G′ −S) + 1, since adding an edge to a graph reduces
the number of components by at most 1. Hence again c(G −S) ≤|S| + 1.
7.2.5. Every 5-vertex path on the dodecahedron extends to a Hamiltonian
cycle. The dodecahedron has an automorphism taking a given face to any
other face, with any rotation. Thus it sufﬁces to shown that the spanning
cycle shown at the beginning of this section in the text contains all types
of 5-vertex paths relative to a given face. These are 1) four edges on one
face, 2) three edges on one face and an edge extending off it, 3) at most two
edges on every face. Since each pair of successive edges lie on a common
face, there is essentially only one path of type 3 relative to a given central
vertex. Every such path can be mapped to any other because the central
vertex can be mapped to any other with an arbitrary rotation of its three
incidence edges (mapped by an automorphsim, that is).
7.2.6. Matchings in Hamiltonian bipartite graphs.
a) If G is a Hamiltonian bipartite graph, then G −x −y has a complete
matching if and only if x and y are on opposite sides of the bipartition of G.
Let G be an X, Y-bigraph with a Hamiltonian cycle C. Since C alternates
between X and Y, we have |X| = |Y|.
If two vertices are deleted from
one partite set, then the other cannot be saturated by a matching. If we
delete x ∈X and y ∈Y, then each of the two paths forming C −{x, y} must
alternate between colors and have endpoints of opposite colors, since the
endpoints are neighbors of x and y. If the vertices on these two paths are
u1, . . . , u2r and v1, . . . , v2s in order, then the edges u2i−1u2i and v2 j−1v2 j for
all i and j together form the desired matching in G −{x, y}.
b) Defective chessboards (missing two squares) can be covered by domi-
noes (1 by 2 rectangles) if and only if the two missing squares have opposite
colors. By part (a), it sufﬁces to show that the graph G corresponding to
the chessboard is Hamiltonian. This is true for every grid (Pm
Pn) with an
even number of rows, as illustrated below. Follow the rows back and forth,
but reserve one end column to tie together the ﬁrst and last row and com-
plete the cycle. If the number of rows is even, then this path ends on the
same side of the grid in the ﬁrst and last rows.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•

359
Chapter 7: Edges and Cycles
Section 7.2: Hamiltonian Cycles
360
Comment: Without using the result on Hamiltonian bipartite graphs,
there are several other ways to prove that a chessboard missing two squares
of opposite has a tiling by dominoes. Proof 2: prove by induction on n that
the property holds for all n by n chessboards with n even. Proof 3: Explic-
itly construct a matching, given that (i, j) and (k,l) are the two missing
squares. Proof 4: Establish the existence of an alternating path joining
two unsaturated squares whenever a set of dominoes does not fully cover
the defective chessboard. These proofs involve a fair amount of detail and
are not as general as the method above.
7.2.7. A mouse eating cheese. Model this with a graph G on 27 vertices in
which vertices are adjacent if they correspond to adjacent subcubes. We
ask whether G has a Hamiltonian path between the vertex corresponding
to the center cube and a vertex corresponding to a corner cube. The vertices
correspond to the 3-digit vectors with entries 0,1,2. The edges join vectors
that differ by 1 in one position. Since they join vertices with opposite parity
of coordinate-sum, G is bipartite.
If G has the desired Hamiltonian path, then the graph G′ obtained by
adding an edge between the corner cube (0,0,0) and the center cube (1,1,1)
has a Hamiltonian cycle. These vectors lie in opposite partite sets of G, so
G′ is also bipartite. Hence the desired path yields a Hamiltonian cycle in a
bipartite graph with an odd number of vertices, which is impossible.
7.2.8. The 4×n chessboard has no knight’s tour. Let G be the graph having
a vertex for each square and an edge for each pair of squares whose posi-
tions differ by a knight’s move. Every neighbor of a square in the top or
bottom row is in the middle two rows, so the top and bottom squares form
an independent set. Deleting the 2n squares in the middle rows leaves 2n
components remaining; that is not enough to prohibit the tour.
Instead, note that every neighbor of a white square in the top and
bottom rows is a black square in the middle two rows. Therefore, if we
delete the n black squares in the middle two rows, the white squares in
the top and bottom rows become n isolated vertices, and there remain 2n
other vertices in the graph, which must form at least one more component.
Hence we have found a set of n vertices whose deletion leaves at least n + 1
components, which means that G cannot be Hamiltonian. (For most n, the
graph has a Hamiltonian path.)
7.2.9. An inﬁnite family of non-Hamiltonian graphs satisfying the nec-
essary condition of Proposition 7.2.3 for Hamiltonian cycles. It is easy to
generalize the ﬁrst example of a non-Hamiltonian graph satisfying the con-
dition. Begin with a complete graph H with n vertices. Let x, y, z, w be
vertices in H. Add vertices a, b, c and edges xa, yb, zc, wa, wb, wc to form
G. Every separating set includes w and another vertex for each small com-
ponent cut off from the clique, so the condition holds. However, visiting
a, b, c requires three edges incident to w.
7.2.10. Spanning cycles in line graphs.
a) A 2-connected non-Eulerian graph whose line graph is Hamiltonian.
The kite has two vertices of odd degree and hence is not Eulerian. Its line
graph is K1 ∨C4, which is Hamiltonian.
b) L(G) is Hamiltonian if and only if G has a closed trail that includes
a vertex of every edge. If G is a star, then L(G) is Hamiltonian and G has
such a closed trail of length 0. Otherwise, there is no vertex cover of size
1, so a closed trail with a vertex of each edge must be nontrivial.
Sufﬁciency. Let T be such a trail in G, with vertices v1, . . . , vt in order.
Consecutive edges on T are incident in G, so E(T ) in order becomes a cycle
C in L(G). For each edge e ∈E(G) −E(T ), select an endpoint v of e that
occurs in V (T ). Although v may occur repeatedly on T , select one particular
occurrence of v in T as vi. Between the vertices of C corresponding to the
edges vi−1vi and vivi+1 in T , insert the vertices of L(G) for all edges of
E(G) −E(T ) whose selected vertex occurrence is vi. Since these edges all
share endpoint vi, the corresponding vertices replace an edge in L(G) with
a path. Every vertex of L(G) is in the original cycle C or in exactly one of
the paths used to enlarge it, so the result is a spanning cycle of L(G).
Necessity. Given a spanning cycle in L(G), we obtain such a closed
trail in G. First we shorten the cycle. If there are three successive vertices
ei−1, ei, ei+1 on the remaining cycle in L(G) that correspond to edges in G
with a common endpoint, we delete ei from the cycle. Since ei−1 and ei+1
have a common endpoint, what remains is still a cycle in L(G). Each dele-
tion preserves the property that the remaining edges include an endpoint
of every edge in G.
When no more deletions are possible, every three successive vertices
in the resulting cycle C in L(G) correspond to edges in G with no common
endpoint, but two successive vertices on C are incident edges in G. Orient
each such edge in G by letting the tail be the endpoint it shares withits
predecessor on C in L(G); the head is the vertex it shares with its successor
on C. This expresses the edge set in C as the vertex set of a closed trail in
G (and it contains a vertex of every edge in G).
7.2.11. A 3-regular 3-connected graph whose line graph is not Hamilto-
nian. Let G be a non-Hamiltonian 3-regular 3-connected graph, such as
the Petersen graph. Form G′ by replacing each vertex v of G with a trian-
gle Tv. Each original edge uw becomes an edge joining a vertex of Tu with
a vertex of Tw. Observe that G′ is 3-regular. Also, if G′ has a 2-vertex cut,
then deleting the corresponding two or one vertices in G also cuts G. Below
we illustrate the application of the transformation to K4.

361
Chapter 7: Edges and Cycles
Section 7.2: Hamiltonian Cycles
362
Suppose that C is a closed trail in G′ that touches every edge. Since
edges of Tv are incident only to vertices of Tv, the trail C must enter each
Tv. Since only three edges enter Tv, the trail C can enter and leave Tv only
once. Hence contracting C back to G by contracting the triangles yields a
cycle that visits each vertex once. Since G has no spanning cycle, G′ has
no such trail.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
7.2.12. The graph below is Hamiltonian.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
7.2.13. The 3-regular graph obtained from the Petersen graph by expanding
one vertex into a triangle matched to the former neighbors of the deleted
vertex is not Hamiltonian. Since there are only three edges incident to the
triangle, it can only be entered once on a cycle. It must visit all vertices
of the triangle during one visit to the triangle. Therefore, shrinking the
triangle to a single vertex shortens the cycle by two steps and yields a
Hamiltonian cycle in the Petersen graph. There is no such cycle, so the
original cycle also cannot exist.
7.2.14. Every uniquely 3-edge-colorable 3-regular graph is Hamiltonian.
Each color class induces a perfect matching.
Consider the subgraph H
formed by the edges in two of these matchings. It has degree 2 at every
vertex, and thus H a 2-factor, i.e. a union of disjoint cycles. The cycles
have even length, since the two colors alternate on its edges. If H is not
a single (i.e. Hamiltonian) cycle, then we can switch these two colors on
one of the cycles to obtain a 3-edge-coloring with a different partition of the
edges. Thus unique 3-edge-colorability requires that the union of any two
color classes is a Hamiltonian cycle.
7.2.15. C2
n is the union of two disjoint Hamiltonian cycles.
This graph
consists of n vertices in cycle order, with each adjacent to the nearest two in
each direction. Let the points be v1, . . . , vn in order. If we use (v1, . . . , vn) as
one cycle, then the remaining edges form a cycle (v1, v3, ...., vn−2) (traveling
around twice) if n is odd. If n is even, then the remaining edges form two
disjoint cycles of length n/2, and we must make a switch.
In this case
replace the three edges vn−1, vn, v1, v2 in the original cycle by the edges
vn−1, v1, vn, v2; the result is still a cycle. Now the remaining edges form the
cycle (v1, v3, . . . , vn−1, vn, vn−2, . . . , v4, v2). All indices change by two on each
edge of this cycle except the two edges vn−1vn and v2v1 that were switched
out of the original cycle.
7.2.16. The graph Gk obtained from two disjoint copies of Kk,k−2 by adding
a matching between the two “partite sets” of size k is Hamiltonian if and
only if k ≥4. If k = 2, then Gk is disconnected. If k = 3, then deleting the
two centers of claws leaves three components (on the left below).
When k ≥4, ﬁrst take two cycles to cover V (Gk): use two edges of the
middle matching in each cycle, and use one fewer vertex from the outside
parts than from the inside parts (as in the middle below). Then switch a
pair of edges on one side to link the two cycles (as on the right).
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
7.2.17. The Cartesian product of two Hamiltonian graphs is Hamiltonian.
It sufﬁces to show that the product of two cycles is Hamiltonian, because
the product of two Hamiltonian graphs has a spanning subgraph of this
form. Index the vertices of the ﬁrst cycle as 1, . . . , m and those of the second
cycle as 1, . . . , n; the vertices of the product are then {(i, j): 1 ≤i ≤m, 1 ≤
j ≤n}. The product is a grid with m rows and n columns plus a wraparound
edge in each row and column.
If m is even, then we start in the upper left corner (1,1) and follow
rows alternately to the right and left, ﬁnishing in the lower left corner
(m, 1) after visiting all vertices; the wraparound edge in the ﬁrst column
completes the cycle. If m is odd, then we follow the same zigzag from (1, 1)
to traverse the ﬁrst n −1 columns, ending at (m, n −1). We then traverse
the last column from (m, n) to (1, n) and take the wraparound edge from
(1, n) to (1, 1) to complete the cycle.

363
Chapter 7: Edges and Cycles
Section 7.2: Hamiltonian Cycles
364
To show that the hypercube Qk is Hamiltonian, we use induction on k.
Note that Q1 is K2, which is not Hamiltonian. Basis step: For k = 2 and
k = 3, we have explicit constructions. Induction step: For k ≥4, we observe
that Qk ∼= Q2
Qk−2. Since each factor is Ql for some l with 2 ≤l ≤k −2,
the induction hypothesis tells us that both factors are Hamiltonian, and
then the ﬁrst part of the problem yields this for the product.
7.2.18. The product of graphs with Hamiltonian paths has a Hamiltonian
cycle unless both factors have odd order. Since deleting edges never intro-
duces a Hamiltonian path or cycle, it sufﬁces to prove the claim when the
two graphs are paths. In this case the product is the grid Pm
Pn. If the
factors do not both have odd order, then we may assume that the grid has
an even number of rows. Follow the rows back and forth, but reserve one
end column to tie together the ﬁrst and last row and complete the cycle.
Since the number of rows is even, the zigzag path ends on the same side of
the grid in the ﬁrst and last rows.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
The product of two graphs with Hamiltonian paths fails to have a
Hamiltonian cycle if and only if both graphs are bipartite and have odd or-
der, in which case the product has a Hamiltonian path. If both graphs are
bipartite and have odd order, then the product is bipartite and has odd or-
der, so it cannot be Hamiltonian. The discussion above handles the case
where at least one factor has even order. Hence we may assume that both
factors have odd order and at least one is not bipartite. Since paths are
bipartite, the Hamiltonian path in one factor must have an chord that com-
pletes an odd cycle. It thus sufﬁces to construct a Hamiltonian path when
one factor is a path of odd order and the other (the “horizontal” factor in
the grid) is a path of odd order plus a single edge that forms such a chord.
Let P = Pm with vertices v1, . . . , vm in order, and let Q = Pn + e with
vertices u1, . . . , un in order on the path, plus the edge e = urus where s −r
is even and positive. Let Pi, j denote the vi, vj-path in P, and let Qi, j denote
the ui, uj-path in Q (along the path Pn in Q). If P, Q are disjoint paths
such that the last vertex of P is adjacent to the ﬁrst vertex of Q, then
P : Q denotes the path consisting of P followed by Q. Let s1(Pi, j, Qk,l) be
the “back-and-forth” Hamiltonian path of Pi, j
Qk,l that follows the rows,
switching from one row to the next in the end columns corresponding to
uk and ul.
The path starts at (vi, uk).
It ends at (vj, uk) if j −i is odd
and at (vj, ul) if j −i is even. Similarly, s2(Pi, j, Qk,l) is the Hamiltonian
path following using all the column edges, starting at (vi, uk) and ending
at (vi, ul) if l −k is odd and at (vj, ul) if l −k is even.
Recall that urus is the extra edge in the factor H. If r, s are odd (such
as when H is an odd cycle), then
s2(P2,m, Q1,r) : s1(Pm,2, Qs,r+1) : s2(P2,m, Qs+1,n) : (u1
Qn,1)
is a Hamiltonian cycle of G
H. If r, s are even, then
s2(P2,m, Q1,r) : s1(P2,m, Qs,r+1) : s2(Pm,2, Qs+1,n) : (u1
Qn,1)
is a Hamiltonian cycle of G
H. In each case all vertices are listed, and the
last vertex of each segment is adjacent to the ﬁrst vertex of the next.
7.2.19. Construction of a (k −1)-connected k-regular non-Hamiltonian bi-
partite graph for odd k. Let H be the graph with vertex set W ∪X ∪Y ∪Z,
where W, Z have size (k −1)/2 and X, Y have size (k + 1)/2. Add the edges
W × X, X × Y, and Y × Z; now the vertices X, Y have degree k. Take k
copies of H. Add special vertex sets A and B, each of size (k −1)/2. Add
an edge from ai to each of the k copies of wi, for each i; this gives ai degree
k and increases the degree of wi to k. Similarly add an edge from bi to each
of the k copies of zi, for each i. This completes the desired graph Gk. The

365
Chapter 7: Edges and Cycles
Section 7.2: Hamiltonian Cycles
366
set A ∪B has size k −1, and Gk −A −B has k components, all isomorphic to
H. We omit the veriﬁcation that Gk is (k −1)-connected. It is conjectured
that every k-connected k-regular bipartite graph is Hamiltonian.
7.2.20. Hamiltonian cycles in powers of graphs.
a) If G −x has at least three nontrivial components in which x has
exactly one neighbor, then G2 is not Hamiltonian.
Let v1, v2, v3 be the
unique neighbor of x in three such components H1, H2, H3 of G −x. Let
S = {x, v1, v2, v3}. Since each Hi is non-trivial, G2 −S has at least three
components. Within S, only x and vi have neighbors in Hi −vi. A spanning
cycle of G2 must enter and leave Hi −vi via distinct vertices of S; these can
only be x and vi. This forces at least three edges incident to x, one to each
Hi, which is impossible in a Hamiltonian cycle.
b) The cube of each connected graph (with n ≥3) is Hamiltonian. The
cube of a connected graph contains the cube of each of its spanning trees, so
it sufﬁces to prove the claim for trees. We use induction on n(T ) to prove the
stronger result that T 3 has a Hamiltonian cycle such that a speciﬁed pair
x, y of adjacent vertices in T are consecutive on the cycle. For n(T ) = 3, this
is trivial since T 3 is a clique; suppose n(T ) ≥4. The graph T −xy consists
of two disjoint trees R and S containing x and y, respectively. By symmetry,
we may assume n(R) ≤n(S). Choose z ∈NS(y) and, if n(R) > 1, choose
w ∈NR(x). If each subtree has at least three vertices, then the induction
hypothesis provides Hamiltonian cycles of R3 and S3 containing the edges
xw and yz, respectively. Since T 3 contains both R3 and S3, we obtain the
desired Hamiltonian cycle of T 3 by replacing the edges xw and yz with xy
and wz, which exist because dT (w, z) = 3. If n(R) = 2, we replace yz in the
cycle through S3 by y, x, w, z. If n(R) = 1, we replace yz by y, x, z.
7.2.21. Non-Hamiltonian complete k-partite graphs. If m < n/2, then there
is a non-Hamiltonian complete k-partite graph with minimum degree m
and all partite sets nonempty as long as m ≥k −1.
Simply make the
largest partite set X have size n −m, and partition the remaining set S into
k −1 parts. Now G −S has more than |S| components, which violates the
necessary condition for Hamiltonicity.
For the values stated in the text, m = n
2
k−1
k
2l
2l+1 = (k −1)l, and thus
m < n/2 with n = k(2l + 1).
7.2.22. For k, t ≥4, in the class G(k, t) of connected k-partite graphs in
which each partite set has size t and every two parts induce a matching
of size t, there is a graph that is not Hamiltonian. Let V1, . . . , Vk be the
partite sets. To construct G, start with C3t ∪t Kk−3 as follows. Form C3t
with vertices v1, . . . , v3t in order so that vi ∈Vj if and only if i ≡j (mod 3).
For 1 ≤i ≤t, add edges to make a clique consisting of the ith vertex of
each of V4, . . . , Vk. Now we have C3t ∪t Kk−3; let H1, . . . , Ht be the copies
of Kk−3. Each vertex in Hi needs a neighbor in each of V1, V2, V3. Add all
edges joining V (H1) and {v1, v5, v9}; note that v1 ∈V1, v5 ∈V2, v9 ∈V3. Add
all edges joining V (H2) and {v2, v3, v4}. Add all edges joining V (H3) and
{v6, v7, v8}. For 4 ≤j ≤t, add all edges joining V (Hj) and {v3 j−2, v3 j−1, v3 j}.
Since each vertex has exactly one neighbor in each other part, and
the graph is connected, the graph belongs to G(k, t). However, deletion of
{v1, v5, v8} leaves a graph with four components, and hence the graph is not
Hamiltonian.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
v1
v2
v3
v4
v5
v6
v7
v8
v9
v10
v11
v12
v13
v14
v15
H1
H2
H3
H4
H5
. . .
7.2.23. The Petersen graph G has toughness 4/3. We seek the smallest
value of |S| /c(G −S) achieveable by a separating set S, where c(H) counts
the components of H. To separate into two components we need |S| ≥3,
since G is 3-connected.
To separate G into three components, we claim that |S| ≥4. Deleting
any three vertices deletes at most 9 edges, which leaves at least six edges
among the remaining seven vertices. If c(G −S) = 3, then G −S is a forest
with at most four edges unless one component is a 5-cycle, which allows
only ﬁve edges. Hence deleting three vertices cannot create more than two
components. We can separate the graph into three components by deleting
an independent set of size 4, so t ≤4/3.
To separate G into more than three components, we must leave an
independent set T of size 4 with one vertex in each component. Since a
vertex neighborhood in G is a dominating set, T has no three vertices with a
common neighbor. Hence there are six different vertices that are common
neighbors of two vertices in T , and these must all be deleted to leave 4
components. This ratio is 6/4.
After consider all separating sets, we conclude that 4/3 is the smallest
ratio and hence is the toughness.
7.2.24. The toughness t(G) of a K1,3-free graph is half its connectivity. We
may assume that G is connected, since otherwise the toughness and con-
nectivity are 0. Let c(H) denote the number of components of H.

367
Chapter 7: Edges and Cycles
Section 7.2: Hamiltonian Cycles
368
For every connected graph, the toughness is at most half the connec-
tivity, since a minimum vertex cut separates the graph into at least two
components and has size κ(G). The inequality |S| ≥t(G)c(G −S) thus
yields t(G) ≤|S| /c(G −S) ≤|S| /2 = κ(G)/2 when S is a minimum cut.
Now let S be a vertex cut achieving the minimum ratio of |S| /c(G −S);
in other words, t(G) = |S| /c(G −S). Let u be a vertex in a component
C of G −S, and let v be a vertex of S. By Menger’s Theorem, there exist
κ(G) pairwise internally disjoint u, v-paths in G. These paths enter S at
distinct vertices, establishing edges to C from κ(G) distinct vertices of S.
This holds for each component of G −S. Since G is K1,3-free, each vertex of
S has neighbors in at most two components of G −S and hence is incident
to at most 2 of the edges we have generated. This yields the inequality
κ(G)c(G −S) ≤2 |S|, and hence t(G) ≥κ(G)/2.
7.2.25. If G is a simple graph that is not a forest and has girth at least 5,
then G is Hamiltonian. Let H = G. If H satisﬁes Ore’s Condition, then H
is Hamiltonian. Otherwise, H has nonadjacent vertices x and y such that
dH(x)+dH(y) ≤n −1. Thus xy ∈E(G) and dG(x)+dG(y) ≥n −1. Avoiding
cycles of length less than 5 in G yields NG(x) ∩NG(y) = ∅, and also there
is no edge from N(x) to N(y).
We have argued that NG(x) ∪NG(y) induces a tree with at least n −1
vertices. Since G is not a forest, exactly one vertex, z, remains outside this
set. Furthermore, girth at least 5 implies that z has exactly one neighbor a
in NH(x) and one neighbor b in NG(y). No other edge can appear in G. Now
H has a spanning cycle that visits the vertices in the order z, x, b, NH(y) −
{b}, NH(x) −{a}, a, y.
7.2.26. The maximum number of edges in a non-Hamiltonian n-vertex sim-
ple graph is
 n−1
2

+1. The graph consisting of an (n −1)-clique plus a single
pendant edge has
 n−1
2

+1 edges and is not Hamiltonian. To show that this
is the maximum size, suppose that G is not Hamiltonian, and let d1, . . . , dn
be the vertex degrees of G, indexed in nondecreasing order.
Since G must fail Chv´atal’s Condition, there is some i < n/2 such
that di ≤i and dn−i < n −i. Let u be the vertex with the ith smallest
degree, and let v be the vertex with the n −ith smallest degree.
Thus
dG(u) + dG(v) ≤i + (n −i −1) = n −1.
In the complement, we have
dG(u) + dG(v) = (n −1 −dG(u)) + (n −1 −dG(v) ≥2(n −1) −(n −1) = n −1.
Since u and v have degree sum at least n −1 in G, and since a simple
graph has at most one edge joining them (counted twice in the degree sum),
there must be at least n −2 edges in G incident to {u, v}. Hence e(G) ≤
 n
2

−(n −2) =
 n−1
2

+ 1.
7.2.27.
By induction on n, the maximum number of edges in a non-
Hamiltonian n-vertex simple graph is
 n−1
2

+ 1. The graph consisting of
an (n −1)-clique plus a single pendant edge has
 n−1
2

+ 1 edges and is not
Hamiltonian. For n = 2, this graph is K2 and is trivially the largest. For
n = 3, exceeding the bound requires three edges, and the resulting simple
graph can only be K3.
For n > 3, suppose that e(G) >
 n−1
2

+ 1. Thus e(G) < n −2, and G
has a vertex v of degree at most 1. In G, we have d(v) ≥n −2. Since
 n−1
2

−(n −2) =
 n−2
2

, the induction hypothesis provides a Hamiltonian
cycle C in G −v. Since v has at most one nonneighbor in V (G) −{v} and
n −1 ≥3, vertex v has two consecutive neighbors on C. Hence we can
enlarge C to include v and obtain a spanning cycle in G.
7.2.28. Generalization of the edge bound.
a) If f (i) = 2i2−i +(n−i)(n−i −1) and n ≥6k, then on the interval k ≤
i ≤n/2, the maximum value of f (i) is f (k). The derivative is 6i −2n, and
the second derivative is 6. Since the second derivative is always positive,
the maximum occurs only at the endpoints. The minimum is at i = n/3
(where the derivative is 0), and the parabola is symmetric around i = n/3.
Hence to show that f (k) ≥f (n/2) and complete the proof, it sufﬁces to
show that k is farther from the axis n/3 than n/2 is. This is the inequality
n/3 −k ≥n/2 −n/3, which is equivalent to the hypothesis n ≥6k.
b) If δ(G) = k and G has at least 6k vertices and has more than
 n−k
2

+k2
edges, then G is Hamiltonian. By Chv´atal’s Condition, it sufﬁces to show
that di > i or dn−i ≥n −i for every i < n/2, where d1 ≤· · · ≤dn are the
vertex degrees of G. If this condition fails for some i, we have di ≤i; this
requires i ≥k, since every vertex has degree at least k. Hence we may
assume k ≤i < n/2.
The number of edges is half the degree-sum; hence the hypothesis
guarantees a degree-sum greater than (n −k)(n −k −1) + 2k2. If Chv´atal’s
Condition fails for some i, we know that d1 = k, the i −1 next smallest de-
grees are at most i, the degrees di+1, . . . , dn−i are at most n −i −1, and the i
largest degrees are at most n−1. This places an upper bound on the degree-
sum of k +i(i −1)+(n−2i)(n−i −1)+i(n−1) = k +2i 2−i +(n−i)(n−i −1).
We now have 2k2 +(n −k)(n −k −1) < P di ≤k +2i2 −i +(n −i)(n −i −1),
but this contradicts the conclusion f (k) ≥f (i) from part (a).
7.2.29. If G is simple with vertex degrees d1 ≤d2 ≤· · · ≤dn and G has ver-
tex degrees d′
1 ≤d′
2 ≤· · · ≤d′
n, then dm ≥d′
m for all m ≤n/2 guarantees that
G has a Hamiltonian path. Chv´atal proved (Theorem 7.2.17) that if dm ≥m
or dn−m+1 ≥n −m for all m < (n + 1)/2, then G has a Hamiltonian path.
Consider m < (n + 1)/2, which is equivalent to m ≤n/2 when m, n
are integers. We have d′
m = n −1 −dn+1−m. Hence dm ≥d′
m implies that
dm ≥n −1 −dn+1−m, or dm + dn+1−m ≥n −1. If dm ≤m −1, then dn+1−m ≥

369
Chapter 7: Edges and Cycles
Section 7.2: Hamiltonian Cycles
370
n −m. Thus dm ≥m or dn+1−m ≥n −m. Since this holds for all m in the
desired range, we have proved that Chv´atal’s Condition for spanning paths
is satisﬁed by G, and we conclude that G has a Hamiltonian path.
If G is isomorphic to G, then dm = d′
m for all m, and the condition holds.
Thus every self-complementary graph has a Hamiltonian path.
7.2.30. Chv´atal’s Theorem implies Ore’s Theorem. It sufﬁces to show that
Ore’s Condition implies Chv´atal’s Condition, because then Chv´atal’s Theo-
rem implies that the graph is Hamiltonian.
Consider i < n/2. If di ≤i, then a vertex v with degree di has at least
n −1 −i nonneighbors. By Ore’s Condition, each nonneighbor has degree
at least n −i. Hence at least n −1 −i vertices have degree at least n −i.
Thus di+2 ≥n −i. Since i + 2 ≤n/2 + 1 ≤n −i, we have dn−i ≥n −i. Thus
di > i or dn−i ≥n −i, and Chv´atal’s Condition holds.
7.2.31. If G has at least α(G) vertices of degree n(G) −1, then G is Hamil-
tonian. Any set whose deletion separates G must include all vertices of
degree n(G) −1. Hence κ(G) is at least the number of vertices of degree
n(G) −1, and the speciﬁed condition implies κ(G) ≥α(G). This implies
that G is Hamiltonian, by the Chv´atal-Erd˝os Theorem.
7.2.32. Let d1 ≤· · · ≤dn be the degree sequence of an X, Y-bigraph G with
equal-size partite sets. Let G′ be the supergraph of G obtained by adding
edges so that G[Y] = Kn/2.
a) G is Hamiltonian if and only if G′ is Hamiltonian, and the degree
sequence of G′ is formed by adding n/2−1 to the degrees of vertices in Y and
moving them (in order) to the back. Let X, Y be the partite sets. Because
|X| = |Y|, we can add arbitrary edges within Y without affecting whether
G is Hamiltonian; the independence of X forces a Hamiltonian cycle to
alternate between the sets anyway. Hence we add a clique on Y to obtain a
graph G′ that is Hamiltonian if and only if G is Hamiltonian. This raises
the degree of each vertex in Y by n/2 −1.
b) If dk > k or dn/2 > n/2 −k whenever k ≤n/4, then G is Hamiltonian.
By part (a), it sufﬁces to show that this condition on G implies that G′
satisﬁes Chv´atal’s Condition. In G′, the vertices of Y are the n/2 vertices of
largest degree (otherwise, G has a vertex in Y with degree 0 and a vertex
in X with degree n/2, which is impossible). If there is a value k < n/2 such
that G′ has k vertices of degree at most k and n −k vertices of degree less
than n −k, then G has k vertices in X with degree at most k and n/2 −k
vertices in Y with degree less than n/2 −k + 1 (at most n/2 −k). If i =
min{k, n/2−k}, then G has i vertices of degree at most i and i +n/2−i = n/2
vertices of degree at most n/2 −i, contradicting the given condition. Thus
there is no such k, G′ satisﬁes Chv´atal’s condition, and G′ and G are both
Hamiltonian.
7.2.33. If G has n vertices and e(G) ≥
 n−1
2

+ 2, then G is Hamiltonian;
if e(G) ≥
 n−1
2

+ 3, then G is Hamiltonian-connected. We prove the two
statements simultaneously by induction on n. The statements are vacu-
ous for very small graphs. For n = 4, both conditions can hold; K4 −e
is Hamiltonian and K4 is Hamiltonian-connected. For the induction step,
suppose that n > 4. For clarity, we write the conditions as e(G) ≤n −4 for
a Hamiltonian-connected graph and e(G) ≤n −3 for a Hamiltonian graph.
If e(G) ≤n −4, then we seek a Hamiltonian x, y-path, where x, y are
arbitrary vertices of G. If x is not isolated in G, then e(G −x) ≤n −5, and
the induction hypothesis guarantees that G −x is Hamiltonian-connected.
Since at most n −4 edges are missing, we can choose z ∈N(x)−{y} and add
xz to a Hamiltonian z, y-path in G −x to obtain a Hamiltonian x, y-path in
G. If x is isolated in G, then e(G −x) ≤n −4, and the induction hypothesis
guarantees that G −x is Hamiltonian. We break an edge involving y (say
yw) on an arbitrary Hamiltonian cycle in G −x and add the edge wx to
obtain the desired Hamiltonian x, y-path in G.
Since a Hamiltonian-connected graph is Hamiltonian (using a Hamil-
tonian x, y-path when x ↔y), we may assume for the second statement
that e(G) = n −3. Hence 2 ≤δ(G). Since the complement of a matching
is Hamiltonian, we may assume that some vertex x has degree at least 2
in G. Now e(G −x) ≤n −5, and the induction hypothesis guarantees that
G −x is Hamiltonian-connected. Since dG(x) ≥2, we can select y, z ∈N(x)
and add the path z, x, y to a Hamiltonian y, z-path in G −x to complete a
Hamiltonian cycle in G.
7.2.34. Hamiltonian-connected graphs - necessary condition.
a) A Hamiltonian-connected graph G with n ≥4 vertices has at least
⌈3n/2⌉edges.
It sufﬁces to show that δ(G) ≥3, because then e(G) =
P d(v)/2 ≥3n/2; since the number of edges is an integer, this means
e(G) ≥⌈3n/2⌉. If a vertex has degree 0 or 1, there is no Hamiltonian path
or no Hamiltonian path without it as an endpoint. If x has degree 2, then
since there is no Hamiltonian path that has the neighbors of x as the end-
points (when n ≥4), since the two neighbors of x appear immediately next
to x in any Hamiltonian path where x is not the endpoint.
b) If m is odd, then G = Cm
K2 is Hamiltonian-connected. We phrase
the cases for general odd m but illustrate with C7
K2. Express V (G) as
U ∪W, where U = {u0, . . . , um−1} and W = {w0, . . . , wm−1}; thus G[U] =
G[W] = Cm, and the remaining edges are {uiwi: 0 ≤i ≤m −1}.
We
construct a Hamiltonian y, z-path for each pair y, z ∈V (G). Since G is
vertex-transitive, we may assume that y = u0. By up/down symmetry in
the indices, we may assume that z = w2 j when z ∈W and z = u2 j+1 when
z ∈U. (Note: There are many other ways to describe the cases.)

371
Chapter 7: Edges and Cycles
Section 7.2: Hamiltonian Cycles
372
Case 1: A u0, w2 j-path. Begin the path by zig-zagging: u0, w0, w1, u1, . . ..
The step is from U to W on even indices and from W to U on odd indices,
thus ﬁnishing at u2 j−1 after w2 j−1. Now ﬁnish the path by traversing U
from u2 j−1 to um−1 and W from wm−1 to w2 j.
Case 2: A u0, u2 j+1-path. Begin in the same way, stopping the zig-zag
at w2 j. Now ﬁnish the path by traversing W from w2 j to wm−1 and U from
um−1 to u2 j+1.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
7.2.35. Hamiltonian-connected graphs - sufﬁcient condition.
a) A simple n-vertex graph G is Hamiltonian-connected if δ(G) > n/2.
We must guarantee a Hamiltonian path from each vertex to every other;
let u, v be an arbitrary pair of vertices in G. Let G′ be the graph obtained
from G by adding a vertex w and adding the edges wu, wv. Then G has a
Hamiltonian u, v-path if and only if G′ has a Hamiltonian cycle. We prove
that G′ has a Hamiltonian cycle.
A graph is Hamiltonian if and only if its closure is Hamiltonian. The
closure of G′ contains a clique induced by the vertices of G, because dG(x)+
dG(y) ≥n(G) + 1 = n(G′) when x and y are nonadjacent vertices of G.
After adding all the edges on V (G), the degrees are high enough that the
edges to w will also be added. Thus the closure of G′ is a clique and G′ is
Hamiltonian, which yields the spanning u, v-path in G.
b) An n-vertex graph with minimum degree n/2 that is not Hamiltonian-
connected. Let Gn consist of two cliques of order n/2 + 1 sharing an edge
xy. The minimum degree is n/2, and because {x, y} is a separating 2-set,
there is no Hamiltonian path with endpoints x, y.
Another example is Kn/2,n/2. Since a spanning path must alternate
between the partite sets and the total number of vertices is even, there is
no spanning x, y-path when x and y lie in the same partite set.
7.2.36. Las Vergnas’ Condition. The condition, which implies that the n-
closure is complete, is the existence of a vertex ordering v1, . . . , vn for which
there is no nonadjacent pair vi, vj such that i < j, d(vi) ≤i, d(vj) < j,
d(vi) + d(vj) < n, and i + j ≥n.
a) Chv´atal’s Condition implies Las Vergnas’ Condition.
Consider a
vertex ordering with d(vi) = di and d1 ≤· · · ≤dn. If Las Vergnas’ condition
fails, then every ordering (including this one) has a bad pair (i, j) of indices.
Badness requires i < j, i + j ≥n, di ≤i, dj < j, and di + dj < n. Given
such a j, choose a minimal i satisfying these properties.
Since i < j and i + j ≥n, we have j > n/2. If i + j = n, then Chv´atal’s
Condition yields di > i or dj ≥j, a contradiction. If i + j > n, then di = i,
since otherwise di−1 ≤di ≤i −1, and the properties would hold also for the
pair (i −1, j). If i ≥n/2, we now have di + dj ≥n, again a contradiction.
Thus Chv´atal’s Condition yields dn−i ≥n −i. Now the ﬁnal contradiction:
n = i + (n −i) ≤di + dn−i ≤di + dj < n.
b) Las Vergnas’ Condition on small graphs. The smaller graph below
has degree sequence 223344. Chv´atal’s Condition fails at i = n/2 −1 = 2,
since d2 = 2 and d4 < 4. The Hamiltonian closure is complete, because
each 2-valent vertex receives an edge to a non-neighbor of degree 4, and
then minimum degree 3 allows every edge to be added.
To verify Las Vergnas’ Condition, place the vertices in increasing order
of degree, but choose v2 and v4 to be adjacent vertices of degrees 2 and 3. A
violation the condition requires a pair of nonadjacent vertices with degree
sum less than 6 and index sum at least 6. Such degrees must be 2,3 or 2,2.
The index sum for the latter pair is 3. The index sum for the former pair
is at least 6 only for v2 and v4, but these vertices are adjacent.
With degrees 22334455, the larger graph fails Chv´atal’s Condition for
i = n/2 −1 = 3. The closure raises the degrees to 22444466 and then to
33555577, and then all remaining edges can be added. Suppose that Las
Vergnas’ condition holds, with v1, . . . , v8 a suitable ordering. The 2-valent
vertices are independent of the 3-valent vertices and 4-valent vertices.
Since some 2-vertex has index at least 2, no 3-vertex or 4-vertex has index
at least 6. With both 3-vertices and both 4-vertices among the ﬁrst 5, some
2-vertex has index at least 6. Now no 3-vertex has index at least 3, and no
4-vertex has index at least 4. This forces four vertices into the ﬁrst three
positions, which is impossible.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
7.2.37. Lu’s Theorem implies the Chv´atal–Erd˝os Theorem. Lu proved that
if t(S) ≥α(G)/n(G) whenever ∅̸= S ⊂V (G), where t(S) =
S∩N(S)
S
, then
G is Hamiltonian. To show that this implies the Chv´atal–Erd˝os Theorem,
it sufﬁces to show that the condition κ(G) ≥α(G) implies Lu’s Condition.
Let k = κ(G). If |S| ≥n(G) −k, then t(S) = 1. If |S| < n(G) −k, then
t(S) ≥k/(n(G) −|S|). Since n(G) > n(G) −|S|, this yields t(S)n(G) > k =
κ(G). Hence κ(G) ≥α(G) implies θ(G)n(G) ≥α(G).

373
Chapter 7: Edges and Cycles
Section 7.2: Hamiltonian Cycles
374
7.2.38. A connected graph G with δ(G) = k ≥2 and n(G) > 2k has a path
of length at least 2k.
a) The vertices of a maximal path P in G form a cycle in some order
if the path has at most 2k vertices. Let u, v be the endpoints of P, and let
H = G[V (P)]. Since P is maximal, N(u) and N(v) are contained in V (H).
Hence dH(u) + dH(v) ≥2k ≥n(H), and H + uv is Hamiltonian. By Ore’s
Theorem, H is Hamiltonian; that is, the vertices of P form a cycle.
b) G has a path with at least 2k + 1 vertices. Choose a longest path P
in G. If P has at most 2k vertices, then part (a) guarantees a cycle through
V (P). Since G is connected, there is an edge from V (P) to V (G) −V (P).
Together with the vertices of P in the order of the cycle, this gives a longer
path, contradicting the choice of P.
c) Quadratic algorithm for ﬁnding a Hamiltonian cycle if d(u)+d(v) ≥
n(G) whenever u ↮v. Find a maximal path P (greedily, in linear time).
If the endpoints u, v are adjacent, then there is a cycle C through V (P).
Otherwise, the condition d(u) + d(v) ≥n(G) ≥n(P) forces a neighbor of u
following a neighbor of v by the usual switch argument; again we have a
cycle C through V (P). By following P, we ﬁnd C in linear time.
The condition d(u) + d(v) ≥n(G) also forces diameter at most 2. If
V (C) ̸= V (G), we select a vertex not on C. Either it has a neighbor on C,
or it has a neighbor with a neighbor on C. Thus we ﬁnd an edge from V (C)
to V (G) −V (C) in linear time. This gives us a path longer than P, which
we extend greedily through the new vertex. We repeat the process.
Each iteration takes only linear time, and the length of P increases
fewer than n times, so in quadratic time we ﬁnd a spanning cycle of G.
7.2.39. (•) Prove that if a simple graph G has degree sequence d1 ≤· · · ≤dn
and d1 + d2 < n, then G has a path of length at least d1 + d2 + 1 unless G is
the join of n −(d1 + 1) isolated vertices with a graph on d1 + 1 vertices or
G = pKd1 ∨K1 for some p ≥3. (Ore [1967b])
7.2.40. Every 2k-regular simple graph G on 4k + 1 vertices is Hamiltonian
(using Dirac’s theorem that a 2-connected simple graph has a cycle of length
at least 2δ). To apply Dirac’s theorem, we ﬁrst must show that G is 2-
connected. Suppose G has a vertex x whose removal leaves a disconnected
graph (this includes the case where G is not connected). Let H1 be the
smallest component of G −x, and let H2 be another component. H1 has
at most 2k vertices. If any vertex in H1 was not joined to x in G, then it
still has degree 2k in G −x. This is impossible, since H1 has at most 2k
vertices and G is simple. So, H1 must have exactly 2k vertices; all joined
to x. This means that H2 also has at most 2k vertices. The same argument
requires that every vertex of H2 have x as a neighbor in G, but this assigns
4k neighbors to x. This contradiction means there could not have been such
an x, and G is 2-connected.
Dirac’s theorem now implies that G has a cycle C of length at least
4k. If G is not Hamiltonian, let x be the vertex not included in C, and
let X and Y denote the neighbors and non-neighbors of x. If X has two
adjacent vertices on C, then we can visit x between them and augment C
to a Hamiltonian cycle (see ﬁrst ﬁgure below). Since X has half the vertices
on C, C therefore alternates between X and Y. Now, if any two vertices of Y
are adjacent, then it is possible to form a Hamiltonian cycle as indicated in
the second ﬁgure below. On the other hand, if the only neighbors of vertices
in Y ∪{x} are the vertices in X, they must each neighbor every vertex in
X (since there are only 2k of them), and thus every vertex in Y has 2k +
1 neighbors. Since this contradicts 2k-regularity, one of the possibilities
mentioned above, in which G is Hamiltonian, must occur. (Note: the fact
that an (n −1)/2-regular graph is Hamiltonian if n ≡1 (mod 4) is just a
slight improvement over minimum degree n/2. It has in fact been proved
that an n/3-regular graph is Hamiltonian).
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
7.2.41. Scott Smith’s Conjecture (for k ≤4 only).
a) Let G be a 4-regular graph with l vertices that is the union of two
cycles, and suppose that l ≤3. If G′ is a 4-regular graph with l + 2 vertices
obtained from G by subdividing one edge from each of the cycles forming G
and adding a double edge between the two new vertices, then G′ is also the
union of two spanning cycles. Since l ≤3, the two subdivided edges in G
share an endpoint. Hence the new edges can be traversed as detours when
following the subdivided edges on the old cycles, as shown below.
•
→
•
b) For 2 ≤k ≤4, any two longest cycles C and D in a k-connected graph
H have at least k common vertices. Suppose that C and D have l common
vertices, where l < k. Let S = V (C) ∩V (D). Since k > l, there is a path P
from V (C) −S to V (D) −S in H. Discard all edges not in C ∪D ∪P. In the
remaining graph, replace threads (maximal paths whose internal vertices
have degree 2) with single edges. Now C ∪D ∪P is a subdivision of the

375
Chapter 7: Edges and Cycles
Section 7.2: Hamiltonian Cycles
376
resulting graph G′. Also, let G be the graph obtained from C ∪D by the
same replacement operation, so G is a subdivision of C ∪D. Note that G
has l vertices. Now G′ is obtained from G by the operation in part (a). By
part (a), G′ is the union of two cycles. These cycles correspond to cycles in
H whose union is C ∪D ∪P. The total lengths of these two cycle exceeds
that of C and D together. This contradicts the hypothesis that C and D
were longest cycles, so C and D must have k common vertices.
7.2.42. The Eulerian circuit graph is Hamiltonian when 1(G) = 4. For
convenience, we use tour here to mean Eulerian circuit. Let G be a loopless
Eulerian multigraph, and let V ′ be the set of tours of G. We treat tours
as equivalent if they have the same pairs of consecutive edges (hence a
tour and its reversal are equivalent). Two tours are adjacent in G′ if and
only if one can be obtained from the other by reversing the direction of a
proper closed subtour, which is the portion between some two visits to one
vertex. Since every tour passes through a vertex v exactly d(v)/2 times,
each vertex of V ′ thus has P
v∈V (G)
 d(v)/2
2

neighbors in G′, and the Eulerian
circuit graph is regular. (Its degree is generally too small to apply general
results about spanning cycles.)
Using induction on the number of 4-valent vertices, we prove that G′ is
Hamiltonian when 1(G) = 4 and G′ has at least three vertices. The graph
G′ is l-regular, where l is the number of 4-valent vertices in G (there is one
switch available at each 4-valent vertex). If l = 0, then G′ = K1; if l = 1,
then G′ = K2. These graphs have spanning paths. If G has two 4-valent
vertices x and y, then G′ is a 3-cycle when G has four x, y-paths, and G′ is
a 4-cycle when G has two x, y-paths.
To facilitate the induction step, we prove the stronger statement that if
l ≥2, then G′ has a spanning cycle through any speciﬁed edge t1t2, where t1
and t2 are adjacent tours. We have veriﬁed this for l = 2. For the induction
step, consider l ≥3.
Let v be the vertex where the reversal occurs to
obtain t2 from t1. Since 1(G) = 4, we have d(v) = 4, with incident edges
e0, e1, e2, e3 ∈E(G).
Let V ′
i be the subset of V (G′) consisting of tours in which the visit
through v that uses e0 also traverses ei, for i ∈{1, 2, 3}. Each vertex of
G′ lies in exactly one of these sets; call this the v-partition of G′.
Let
G′
i = G′[V ′
i ]. The induced subgraph G′
i is isomorphic to the Eulerian cir-
cuit graph of the graph Gi obtained from G by splitting v into two 2-valent
vertices x, x′, where the edges incident to x are {e0, ei}, and those incident
to x′ are the other two edges at v. For any tour, the tour adjacent to it by
the reversal at v lies in a different set in the v-partition. Reversal at any
other vertex does not change the pairing at v and thus reaches another
tour in the same block of the v-partition. Therefore, the edges of G′ that
join two sets in {V ′
1, V ′
2, V ′
3} form a perfect matching of G′ and correspond to
reversals at v. Call these the cross-edges.
If v is a cut-vertex, then because all vertex degrees are even, v has two
edges to each component of G−v, say e0 and e3 to one component and e1 and
e2 to the other. In this case, G3 is empty and G1 ∼= G2, with corresponding
vertices joined by an edge. That is G′ = G1
K2. Since G1 is Hamiltonian
or is a single edge, G′ has a spanning cycle through any cross-edge (see
Exercise 7.2.17).
If v is not a cut-vertex, then each set in the v-partition is nonempty.
The reason is that G −v is connected, and hence the graph obtained from
G −v by adding vertices x and x ′ whose neighbors are the endpoints of
{e0, ei} and the other neighbors of v, respectively, is connected.
This is
precisely the graph Gi; being even and connected, it is Eulerian. (The sets
Vi need not have the same size, as shown by letting G be the 4-regular
graph consisting of K4 with an extra copy of two disjoint edges, where the
sizes of the Vi are 16,16,6.)
By the induction hypothesis, each Gi has a Hamiltonian cycle through
any speciﬁed edge (or a path through the single edge, if it has two vertices).
Thus it sufﬁces to ﬁnd a cycle C in G′ that contains t1t2 and alternates
between cross-edges and non-cross-edges, using exactly one edge within
each Gi (consecutive cross-edges are acceptable if Gi = K1). Using the
cross-edges on C plus a Hamiltonian path of each Gi joining its vertices on
C yields a Hamiltonian cycle of G containing t1t2
Let t1t2 be the speciﬁed edge, using a reversal at v. We may assume
that t1 ∈G1 and t2 ∈G2. The vertex v cuts t1 into two segments. Since v is
not a cut-vertex, the two segments share another vertex u, which therefore
has degree (at least) 4. The desired cycle C is now obtained by alternating
reversals at v and u.
To list the tours of C explicitly, break t1 into four successive trails with
endpoints v and u; that is, express t1 as [v, Q, u, R, v, S, u, T ], in the sense
that A starts at v and ends at u, etc. We may further assume that Q starts
with e1, R ends with e2, and T ends with e0, so that t1 ∈G1 and t2 ∈G2. Let
Q, R, S, T denote the reversals of these trails. For the six successive tours
on C, we have
t1 = [v, Q, u, R, v, S, u, T ] ∈G1
t4 = [v, S, u, R, v, Q, u, T ] ∈G3
t2 = [v, R, u, Q, v, S, u, T ] ∈G2
t5 = [v, S, u, Q, v, R, u, T ] ∈G3
t3 = [v, R, u, S, v, Q, u, T ] ∈G2
t6 = [v, Q, u, S, v, R, u, T ] ∈G1
With this approach, the construction of the desired Hamiltonian cycle
is easy. The approach also works for the general case without limits on
1(G). For the general problem, Zhang and Guo [1986] use three cases like
this when d(v) = 6 and two cases when d(v) = 2t > 6.

377
Chapter 7: Edges and Cycles
Section 7.2: Hamiltonian Cycles
378
7.2.43. For a graph G, the Eulerian circuit graph G′ of Exercise 7.2.42 is
(P
v∈V (G)
 d(v)/2
2

)-regular, which is not enough to apply general results on
Hamiltonicity of regular graphs. The formula for the degree is obtained in
the ﬁrst paragraph of the solution to Exercise 7.2.42. For a given Eulerian
orientation, Theorem 2.2.28 computes the number of Eulerian circuits as
c Q
v(d(v)/2 −1)!, where c is the number of in-trees or out-trees from any
vertex. Already this number is very much bigger than the degree, and
in addition there are many Eulerian orientations. Summing over all the
orientations and dividing by 2 counts the vertices in G′. Hence n(G′) is
hugely bigger than the degree, not bounded by a factor of 2 or 3 times the
degree, which would be needed to apply general sufﬁciency conditions for
Hamiltonian cycle. This explains why a specialized structural argument is
needed in Exercise 7.2.42.
7.2.44. Every tournament has a Hamiltonian path.
Proof 1. If a directed path P of maximum length omits x, then u →
x →v, where u and v are the origin and terminus of P. Considering the
vertices of P in order, there must therefore be a consecutive pair y, z on P
such that y →x →z. This detour absorbs x to form a longer path. Hence
a path of maximum length in a tournament omits no vertex.
Proof 2. The result follows immediately from the Gallai-Roy Theorem,
since χ(Kn) = n and every tournament is an orientation of Kn.
7.2.45. Strong tournaments are Hamiltonian. We prove ﬁrst that a vertex
on a k-cycle is also on a (k + 1)-cycle, if k < n.
suppose C is a k-cycle
containing u.
If some vertex w not on C has both a predecessor and a
successor on C, then there is a successive pair vi, vi+1 on C such that vi →
w and w →vi+1, and we can detour between them to pick up w and obtain
a longer cycle through u.
Hence we may assume that every vertex off C has no successors on C
or no predecessors on C; let these sets of vertices be S and T , respectively.
Since there is a vertex not on C and the tournament is strong, there must
be an edge wx from S to T . We can leave C at u and detour through wx,
skipping the successor of u on C, to obtain a cycle of length k +1 through u.
•
•
•
•
•
C
S
T
u
w
x
If a tournament is strong, then for every edge uv there is also a v, u-
path, which together with uv completes a cycle through u.
Successive
application of the statement above turns this into a spanning cycle. (In
fact, by considering chords we can ﬁrst get down to a 3-cycle, and then we
obtain a cycle of every length through u).
7.2.46. If G is a 7-vertex tournament in which every vertex has outdegree
3, then G has two disjoint cycles. If G is not strong, then G has a cut [S, S]
with every vertex of S pointing to every vertex of S. Since outdegrees in S
are 3,
S
 ≤3, but now vertices of S don’t have enough successors.
Hence G is strong. By Exercise 7.2.45, G has a 3-cycle C. Let H = G −
V (C). If H has a cycle, we are done. Otherwise, H is a 4-vertex transitive
tournament: vertices v0, . . . , v3 with vi →vj when i < j. Outdegree 3
implies that vi has i successors in V (C), for each i. Let u be the successor
of v1 in V (C); we have a 3-cycle with vertices (v0, v1, u). Since v2 has two
successors in C, we can choose w as the predecessor of v2 in V (C). Now we
obtain a second 3-cycle with vertices (v2, v3, w).
7.2.47. (+) Prove that every tournament has a Hamiltonian path with the
edge between beginning and end directed from beginning to end, except the
cyclic tournament on three vertices and the tournament T5 on ﬁve vertices
drawn below. (Gr¨unbaum, in Harary [1969, p211])
•
•
•
•
•
(Hint: this can be proved by induction, which requires a bit of care for
invoking the induction hypothesis to prove the claim for six vertices. In all
cases, ﬁnd the desired conﬁguration or G = T5.)
7.2.48. Sharpness of Ghouila-Houri’s Theorem. We construct for each even
n a n-vertex digraph D that is not Hamiltonian even though it satisﬁes “at
most one copy of each ordered pair is an edge” and min{δ−(D), δ+(D)} ≥n/2.
Take two sets A and B of size n/2. Add edges A
A and B
B (hence there
is a loop at each vertex and opposed edges joining each pair in one set), and
add a matching from A to B. Each vertex has indegree and outdegree n/2
within its own set, but the full digraph is not strongly connected.
7.2.49. Ghouil`a-Houri’s Theorem implies Dirac’s Theorem for Hamilto-
nian cycles.
Suppose that a simple graph G satisﬁes Dirac’s Condition
δ(G) ≥n(G)/2.
From G we form a digraph D be replacing each edge
with a pair of oppositely directed edges having the same endpoints. Thus

379
Chapter 7: Edges and Cycles
Section 7.3: Planarity, Coloring, and Cycles
380
d+
D(x) = d−
D(x) = dG(x) for all x ∈V (G). Since n(D) = n(G), we obtain
min{δ+
( D), δ−(D)} = δ(G) ≥n(G)/2 = n(D)/2. Hence Ghouil`a-Houri’s The-
orem implies that D is Hamiltonian. Since a Hamiltonian cycle C in D
does not use two oppositely directed edges from G, the edges of G giving
rise to the edges in C also form a Hamiltonian cycle in G.
7.3. PLANARITY, COLORING, & CYCLES
7.3.1. Every Hamiltonian 3-regular graph has a Tait coloring. A 3-regular
graph has even order, so two colors can alternate along a Hamiltonian cycle
C. Deleting E(C) leaves a 1-factor to receive the third color.
7.3.2. Examples of 3-regular simple graphs: a) planar but not 3-edge-
colorable.
b) 2-connected but not 3-edge-colorable.
c) planar with con-
nectivity 2, but not Hamiltonian. For part (b), the Petersen graph is an
example. For (a) and (c), suitable graphs appear below. Regular graphs
with cut-vertices are not 1-factorable, and graphs having 2-cuts that leave
3 components are not Hamiltonian.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
7.3.3. Every maximal plane graph other than K4 is 3-face-colorable. With
fewer than four vertices, the maximal plane graphs have fewer than three
faces. For larger graphs, every face is a triangle, so the dual is 3-regular.
Since the dual is planar, it does not contain K5. Hence the dual is not a
complete graph, and by Brooks’ Theorem it is 3-colorable. This becomes a
proper 3-coloring of the original graph.
7.3.4. Every Hamiltonian plane graph G is 4-face-colorable.
It sufﬁces
to show that the faces inside C can be properly 2-colored, since the same
argument applies to the faces outside C using two other colors. View the
union of C and the edges embedded inside C as an outerplane graph H; all
the vertices are on the outer face.
Proof 1. In the dual H ∗, the bounded faces in H become vertices. We
claim that the subgraph of H ∗induced by these vertices is a tree T ∗. If
they induce a cycle, then that cycle lies inside C in the embedding of G and
encloses a face of H ∗, which in turn contains a vertex of H. This is a vertex
of G that does not lie on the outer face of H, which contradicts C being a
spanning cycle.
Proof 2. We properly 2-color the faces inside C using induction on
the number of edges inside. With no such edges, H has one bounded face
and is 1-colorable.
Otherwise, let e be an inside edge whose endpoints
are as close together as possible on C. By the choice of e, there is a face
whose boundary consists of e and edges of C. This face F is adjacent to
only one other, F′. Deleting e merges F into F′ in a smaller graph H ′. By
the induction hypothesis, H ′ has a proper 2-face-coloring f ′. To obtain the
proper 2-face-coloring f of H, let f give the same color as f ′ for each face
other than F and give F the opposite color from f (F ′).
7.3.5. A 2-edge-connected plane graph is 2-face-colorable if and only if it is
Eulerian. Let G be a 2-edge-connected plane graph; note that (G∗)∗= G.
We have G 2-face-colorable if and only if G∗is bipartite, which by (G∗)∗= G
and Theorem 6.1.16 is equivalent to G being Eulerian.
7.3.6. The graph below is 3-edge-colorable. By Tait’s Theorem, it sufﬁces
to show that the graph is 4-face-colorable.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
0
1
3
2
1
2
0
2
2
1
2
0
2
7.3.7. Let G be a plane triangulation.
a) The dual G∗has a 2-factor. The dual of a plane triangulation is 3-
regular and has no cut-edge (since G has no loop). Hence the dual has
a 1-factor, by Petersen’s Theorem (Corollary 3.3.8). Deleting the 1-factor
leaves a 2-factor.
b) The vertices of G can be 2-colored so that every face has vertices of
both colors. Given the 2-factor F of G∗resulting from part (a), we can 2-
color the faces of the dual by given each face the parity of the number of
cycles in F that contain it. This assigns colors to the vertices of G, which
correspond to the faces of G∗.
Each face of G correspond to a vertex v of G∗, with degree 3. The 2-
factor F uses two edges at v, lying on one cycle of F. Hence each face of G
is entered by one cycle of F. This cycle cuts one of the vertices of F from
the other two, and hence the face has vertices of both colors.

381
Chapter 7: Edges and Cycles
Section 7.3: Planarity, Coloring, and Cycles
382
7.3.8. The icosahedron is Class 1. The graph is 5-regular; we describe a
proper 5-edge-coloring. Show in bold is a 2-factor consisting of even cycles;
on this we use two colors.
For the remaining three colors, we color by
the angle in the picture. Color 0 goes on the six edges that are vertical or
horizontal. Colors 1 and 2 go on the edges obtained by rotating this 1-factor
by 120 or 240 degrees in the picture.
•
•
•
•
•
•
•
•
•
•
•
•
7.3.9. Every proper 4-coloring of the icosahedron uses each color exactly 3
times. The icosahedron has 12 vertices; it sufﬁces to show that it has no
independent set of size 4. In the ﬁgure above, an independent set takes at
most one vertex from the inner triangle, one vertex from the outer triangle,
and at most three from the 6-cycle C between them. If it takes three ver-
tices from C, then they alternate on C and include neighbors of all other
vertices Two opposite vertices on C also kill off the rest. Two vertices at
distance 2 along C kill off one triangle but leave one vertex on the other
triangle that can be added.
7.3.10. By Whitney’s result that every 4-connected planar triangulation is
Hamiltonian, the Four Color Problem reduces to showing that every Hamil-
tonian planar graph is 4-colorable.
The Four Color Problem reduces to
showing that triangulations are 4-colorable. Let S be a minimal separat-
ing set in a triangulation G; we show ﬁrst that |S| ≥3. Each vertex x of
S has a neighbor in each component of G −S. Since there is no edge join-
ing two components of G −S and every face is a triangle, in the embedding
of G edges must emerge from x between edges to different components of
G −S. These edges go to other vertices of S. Hence G[S] has minimum
degree at least two, and |S| ≥3.
If |S| = 3, then δ(G[S]) ≥2 implies that S is a clique. Hence a proper
4-coloring of each S-lobe of G uses distinct colors on S, and we can permute
the names of the colors to agree on S. This yields a proper 4-coloring of G.
Hence a minimal planar triangulation that is not 4-colorable must be 4-
connected. Since every such graph is Hamiltonian, it sufﬁces to show that
Hamiltonian planar graphs are 4-colorable.
7.3.11. Highly connected planar graphs. The icosahedron is 5-connected.
The symmetry of the solid icosahedron is such that two vertices at distance
d in the graph can be mapped into any other pair at distance d by rotating
the solid. Hence it sufﬁces to consider one pair at distance d, for each d,
and show that they are connected by ﬁve pairwise internally disjoint paths.
This can be done on any drawing of the graph.
Since every planar graph has a vertex of degree at most 5, there is no
6-connected planar graph.
7.3.12. A plane triangulation has a vertex partition into two sets inducing
forests if and only if the dual is Hamiltonian. Every plane triangulation F
is connected, so (F∗)∗= F. Let G = F∗.
Let G be a Hamiltonian plane graph. A spanning cycle C is embedded
as a closed curve, and the subgraph H of G consisting of C and all edges
drawn inside C is outerplanar. In the dual of an outerplane graph H, every
cycle contains the vertex for the outer face, since every cycle in H ∗encloses
a vertex, and thus a cycle in H ∗not including the vertex for the outer face
in H would yield a vertex of H not on the outer face. We conclude that in
G∗, the vertices for faces of H induce a forest. The same argument applies
to the graph consisting of C and the edges of G drawn outside G.
Conversely, let F be a plane triangulation with such a vertex partition.
Since F is connected, there exist edges joining components in the union of
these two forests. We add edges joining components, possibly changing the
vertex partition while doing this, until we obtain a vertex partition into
two sets S, S inducing trees.
Adding any edge from S to S yields a spanning tree of G, so [S, S] is a
bond. Hence the duals of the edges in [S, S] form a cycle. We claim that
this is a spanning cycle in the dual. It sufﬁces to show that
[S, S]
 = f .
Since F has 3n −6 edges and we use n −2 edges in the two trees, we have
2n −4 edges from S to S. By Euler’s Formula, this is indeed the number of
faces in a triangulation.
7.3.13. Grinberg’s Theorem. Neither of the graphs below is Hamiltonian.
Grinberg’s Theorem requires P(i −2)(φi −φ′
i) = 0, where φi and φ′
i are
the number of i-faces inside and outside the Hamiltonian cycle. The plane
graph on the left has six 4-faces and one 8-face. Since 2(φ4 −φ′
4) must be
a multiple of 4 and 6(±1) cannot be a multiple of 4, there is no way these
can sum to 0. Similarly, redrawing the graph on the right yields a plane
graph with three 4-faces and six 6-faces. This time 2(φ4 −φ′
4) cannot be a
multiple of 4, but 4(φ6 −φ′
6) must be; again they cannot sum to 0.

383
Chapter 7: Edges and Cycles
Section 7.3: Planarity, Coloring, and Cycles
384
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
7.3.14. A non-Hamiltonian graph.
In any spanning cycle of the graph
below, both edges incident to a vertex of degree 2 must appear. Applying
this to the vertices of degree 2 on the outside face generates a non-spanning
cycle that must appear.
Irrelevance and relevance of Grinberg’s Theorem.
This plane graph
has four 5-faces, three 6-faces, and one 14-face. It is possible to choose
nonnegative integers f ′
i and f ′′
i such that f ′
5 + f ′′
5 = 4, f ′
6 + f ′′
6 = 3, f ′
14 +
f ′′
14 = 1, and P(i −2)( f ′
i −f ′′
i ) = 0. This is achieved by f ′
5 = f ′′
5 = 2, f ′
6 = 3,
f ′′
14 = 1, and f ′′
6 = f ′
14 = 0. Hence the graph does not violate the numerical
conditions of Grinberg’s Theorem.
On the other hand, since the four long horizontal edges in the draw-
ing are incident to vertices of degree 2 and therefore must appear in any
Hamiltonian cycle, subdividing them once each does not affect whether the
graph is Hamiltonian. The new plane graph has seven 6-faces and one 18-
face. Since the difference of two numbers summing to 7 is odd, Grinberg’s
Condition now requires an odd multiple of 4 to equal an even multiple of
4, which is impossible. Hence the graph is not Hamiltonian.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
7.3.15. Proof of Grinberg’s Theorem from Euler’s Formula.
Let C be a
Hamiltonian cycle in a plane graph G, and let f ′
i be the number of faces of
length i inside C. It sufﬁces to prove that P
i(i −2) f ′
i = n −2, since the
same argument applies to the regions outside the cycle. We apply Euler’s
Formula to the outerplanar graph G′ formed by C and the chords inside it.
We can rewrite the desired formula as 2 = n −P
i i f ′
i + 2 P
i f ′
i . Note
that P
i i f ′
i counts every internal edge of G′ twice and every edge on the
cycle once. Thus P
i i f ′
i = 2e −n. Also, P
i f ′
i = f −1, the total number of
bounded faces in G′. Thus we want to prove that 4 = 2n −2e + 2 f , which
follows immediately from Euler’s Formula.
7.3.16. The Grinberg graph is not Hamiltonian. In the plane graph below,
all faces have length 5, except for three of length 8 and the one unbounded
face of length 9. If it is Hamiltonian and f ′
i , f ′′
i denote the number of faces
of length i inside and outside the cycle, respectively, then Grinberg’s Con-
dition requires that 3( f ′
5 −f ′′
5 ) + 6( f ′
8 −f ′′
8 ) + 7( f ′
9 −f ′′
9 ) = 0. This can
happen only when 7( f ′
9 −f ′′
9 ) is divisible by 3, which is impossible since
there is exactly one face of length 9.
•
•
•
•
• • • •
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
7.3.17. The smallest known 3-regular planar non-Hamiltonian graph. The
triangular portion on both ends is the subgraph of the Tutte graph called
H. Since it has three entrance points here, it must be traversed by a span-
ning path connecting the entrance points. Example 7.3.6 in the text shows
that no such path exists joining the top and bottom entrances.
Hence edges a′b′ and ab must be used. By symmetry, we may assume
that bc is used. If cb′ is used, then completion of a cycle will miss d or the
portion on the top. Hence cd is used. Since each copy of H can be visited
only once, de must be used. Now the cycle must traverse the left copy of H,
emerge at b′, and turn up to f . On the other end, the cycle exits the right
copy of H at g. Now the cycle cannot be completed without missing one of
the common neighbors of f and g.
•
•
•
a
b
c
d
e
a′
b′
f
g
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
• • •
• •
•
•
•
•
•
•
•
•
•

385
Chapter 7: Edges and Cycles
Section 7.3: Planarity, Coloring, and Cycles
386
7.3.18. A Hamiltonian path between opposite corners of a grid splits the
squares of the grid into two sets of equal size. Suppose Q is a Hamiltonian
path from the upper-leftmost vertex to the lower-rightmost vertex of Pm Pn.
Adding an edge through the unbounded face from the upper-leftmost vertex
to the lower-rightmost vertex completes a Hamiltonian cycle. Each face
containing the added edge has length m + n −1, and they are on opposite
sides of the cycle.
By Grinberg’s Theorem, then, the number of 4-faces
inside the cycle must equal the number of 4-faces outside the cycle. One of
these measures the area of the regions escaping to the top and right, and
the other measures the area of the regions escaping to the bottom and left.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
B
B
A
A
B
B
B
B
A
A
A
A
7.3.19. The generalized Petersen graph P(n, k) is the graph with vertices
{u1, . . . , un} and {v1, . . . , vn} and edges {uiui+1}, {uivi}, and {vivi+k}, where
addition is modulo n. The usual Petersen graph is P(5, 2) with χ ′ = 4.
a) If k ≡1 (mod 3) with r ≥1, then we can cover S j+k
i= j+1{ui, vi} (k
consecutive pairs) using a single cycle involving the edge vj+kuj+k. For r =
1, the remainder of the cycle is the path u j+4, uj+3, vj+3, vj+1, uj+1, uj+2,
vj+2, vj+4. To obtain the cycle for r + 1 from the cycle for r, we replace the
edge vj+kuj+k with a path through the six new vertices: vj+k, vj+k+2, uj+k+2,
uj+k+3, vj+k+3, vj+k+1, uj+k+1, uj+k. This proves the claim by induction on r.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
u1
u4
u7
u10
b) χ′(P(n, 2)) = 3 if n ≥6. The construction of part (a) produces a
spanning cycle if k ≡1 (mod 3) and k ≥4; since there are 2k vertices, this
is a 2-factor using even cycles. If k ≡2 (mod 3) and k ≥8, then we can
combine a cycle on 4 pairs with a cycle on the remaining k −4 pairs, since
k −4 ≡1 (mod 3) and is at least 4. If k ≡3 (mod 3) and k ≥12, then
we can combine two cycles on 4 pairs each with a cycle on the remaining
k −8 pairs, since k −8 ≡1 (mod 3) and is at least 4. This resolves all
cases except k = 6 and k = 9, for which we present explicit spanning cycles
below. (The Petersen graph P(n, 2) is not 3-edge-colorable.)
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
Alternatively, there is an explicit coloring when k ≡0 (mod 3). Let
c(e) denote the color on edge e. Treating the vertex indices modulo n and
the colors as Z3, we let c(uivi) ≡i (mod 3), c(uiui+1) ≡(i −1) (mod 3), and
c(vivi+2) ≡(i + 1) (mod 3).
7.3.20. If a 3-regular graph is the union of two cycles, then it is 3-edge-
colorable. (Note: The statement is not true with “three” in place of “two”,
since the Petersen graph can be expressed as the union of three cycles.) At
each vertex, each incident edge is in one of the cycles, so one of the edges
must be in both. If C and C′ are the two cycles, then the desired 1-factors
are E(0) −E(C′), E(C′) −E(C), and E(C) ∩E(C′).
7.3.21. The ﬂower snarks: Gk consists of three “parallel” k-cycles with ver-
tex sets {xi}, {yi}, {zi} and vertices w1, . . . , wk such that N(wi) = {xi, yi, zi}
for each i. Hk is obtained from Gk by replacing {xkx1, yk y1} with {xk y1, ykx1}.
a) Gk is Type 1. A proper 3-edge-coloring has distinct color pairs on
the cycle edges at xi, at yi, and at zi, because the three edges to wi have
distinct colors. Thus, if the x, y, z-edges from i −1 to i are colored a, b, c,
then those from i to i + 1 can be colored b, c, a or c, a, b, respectively. We
travel around the k-cycles, always stepping the cyclic permutation forward.
Upon reaching the last set of edges, the forward rotation or the backward
rotation is compatible with both the previous triple and the ﬁrst triple.
b) Hk is Type 2 when k is odd. Again we must have distinct color pairs
on the cycle edges at xi, yi, zi. The x, y, z-edges from i −1 to i cannot have
the same color, because the color pairs at i could not then be distinct. Hence
they are a permutation or one color is omitted. If one color is omitted, then
the fact that each color appears twice among the three pairs implies that
the omitted color appears twice between i and i + 1 (and the color that was
twice is now omitted). Since this argument applies in both directions (and
between k and 1), all triples are permutations or all triples omit one color.
If all triples are permutations, then the permutation must maintain
the same parity. In particular, placing a cyclic permutation of c, b, a next

387
Chapter 7: Edges and Cycles
Section 7.3: Planarity, Coloring, and Cycles
388
to a, b, c produces an incident pair with the same color. When the edges
xk y1, ykx1, zkz1 are reached, the x, y-switch in edges switches the parity of
the permutation. Thus edge-coloring using permutations on these triples
cannot be compatible all the way around.
If all triples omit one color, then by the remarks above one color ap-
pears in every triple, and the other two colors alternate between appearing
twice and not appearing. The alternation of appearances of these two col-
ors implies that k must be even. When k is odd, Hk is not 3-edge-colorable.
(When k is even, this discussion leads to a 3-edge-coloring of Hk.)
7.3.22. Every edge cut of Kk
Ct that does not isolate a vertex has at least
2k edges, unless k = 2 and t = 3. Edge cuts that isolate vertices have only
k + 1 edges, since Kk
Ct is (k + 1)-regular. The graph consists of t copies of
Kk (the “cliques”) arranged in a ring, with corresponding vertices from the
cliques forming a cycle. Two successive cliques are joined by a matching.
When a clique is split into sets of size l and k −l by the edge cut,
with l ≤k −l, we call it an l-split. Such a clique induces l(k −l) edges of
the cut, which increases with l. Suppose that there is an l-split clique Q
and another clique Q′ that is unsplit. On the paths from Q to Q′ in both
directions around the cycle, we cut at least 2l edges. Hence in this case we
cut at least l(k + 2 −l) edges. For l ≥2 this is at least 2k.
Hence every clique is split or all splits are 1-splits. Since splitting a
clique cuts at least k −1 edges and t ≥3, the former case cuts at least 3k −3
edges and sufﬁces unless t = 3 and k = 2. This is the exceptional case, and
indeed K2
C3 has a nontrivial cut of size 3.
Therefore, all split cliques are 1-splits and some clique is unsplit. If
two cliques are 1-split, then we can ﬁnd an unsplit clique preceding a split
clique and a second split clique followed by an unsplit clique. In addition
to the k −1 edges from each split clique, we have at least one edge in the
cut to the neighboring unsplit clique, for a total of at least 2k edges.
Hence at most one clique Q is split, and if so it is a 1-split. Because the
cut does not isolate a vertex, some other clique Q′ is entirely on the same
side with the singleton from Q. We cut k −1 edges within Q and some edge
along each path in each direction from the large part of Q to Q′. Hence we
cut at least 3k −3 edges, which sufﬁces unless k = 2 and no other edges
are cut. In this case, the “large” part of Q is isolated by the cut.
Finally, if no clique is split, then having a nonempty cut requires some
clique on one side and another on the other side, and then we cut at least
2k edges of the paths along the cycles as we go back and forth from one side
to the other. This case achieves equality for all k and t.
7.3.23. Applying Isaacs’ dot product operation (Deﬁnition 7.3.12) to two
snarks yields a third snark. Let G1 and G2 be snarks, with disjoint edges
uv and wx from G1 and adjacent vertices y and z from G2 deleted to perform
the dot product operation. Let G be the resulting graph, adding the edges
ua, vb, wc, and xd.
Since G1 and G2 are 3-regular, by construction G is 3-regular; the four
vertices left with degree 2 in each subgraph receive new neighbors.
Since G2 has girth at least 5, the vertices in G2 receiving neighbors in
G1 form an independent set. Hence any cycle in G involving the new edges
must use at least two of them plus at least one edge of G1 and at least two
of G2. Other cycles lie in G1 or G2. Hence G has girth at least 5.
Any edge cut of G that separates V (G1) or separates V (G2) has as
many edges as a corresponding edge cut of G1 or G2, and the only edge cut
that cuts neither of those sets has size 4. Hence G is 3-edge-connected and
cyclically 4-edge-connected.
Finally, if G has a proper 3-edge-coloring f , then G1 or G2 is 3-edge-
colorable. Being 3-regular, G1 and G2 have even order. Since each color
class is a perfect matching in G, it appears an even number of times in
{ua, vb, wc, xd}. Call this property “parity”. If f (ua) = f (vb), then f (wc) =
f (xd), by parity, and assigning f (ua) to uv and f (wc) to wx yields a proper
3-edge-coloring of G1. If f (ua) ̸= f (vb), then by parity and symmetry we
may assume that f (wc) = f (ua), and hence parity yields f (xd) = f (vb).
Now assign the color f (ua) to ay and cz, the color f (vb) to by and dz, and
the third color to yz; this completes a proper 3-edge-coloring of G2.
7.3.24. If G1 has a nowhere-zero k1-ﬂow and G2 has a nowhere-zero k2-
ﬂow, then G1 ∪G2 has a nowhere-zero k1k2-ﬂow. Let D be an orientation
of G = G1 ∪G2, extend the ﬂows on Gi by giving weight 0 to edges of
E(G) −E(Gi) them, and change signs of weights as needed so that both
extended ﬂows have orientation D. Thus G has a k1-ﬂow (D, f1) and k2-ﬂow
(D, f2) such that (D, fi) is nonzero on the edges of Gi, for each i
Let f = f1 + k1 f2. By Proposition 7.3.16, (D, f ) is a ﬂow. For e ∈
E(G1), f (e) is nonzero because | f1(e)| < k1. For e ∈E(G2) −E(G1), f (e) is
nonzero because f2(e) is nonzero. Furthermore, | f (e)| ≤(k1 −1) + k1(k2 −
1) = k1k2 −1. Thus (D, f ) is a nowhere-zero k1k2-ﬂow on G.
7.3.25. Every spanning tree of a connected graph G contains a parity sub-
graph of G. (A parity subgraph of G is a spanning subgraph H such that
dH(v) ≡dG(v)( (mod 2)) for all v ∈V (G).) Let T be a spanning tree of G.
Proof 1 (induction on k = e(G) −n(G) + 1): We have k = 0 if and
only if G = T , in which case G itself is the desired subgraph H. For the
induction step, consider k > 0, and let e = xy be an edge outside T . Since
T is a spanning subgraph of G′ = G −e, the induction hypothesis yields a
parity subgraph H ′ of G′ contained in T . Vertex degrees are the same in G
and G′ except for x and y. Form E(H) by taking the symmetric difference

389
Chapter 7: Edges and Cycles
Section 7.3: Planarity, Coloring, and Cycles
390
of H ′ with the unique x, y-path in T . This changes the parity of the degree
only at x and y, as desired.
Proof 2 (construction): Let U = {v1, . . . , v2l} be the set of vertices in
G with odd degree. Let Pi be the unique v2i−1, v2i-path in T . Let H0 be
the spanning subgraph of G with no edges, and let Hi = Hi−1△Pi for 1 ≤
i ≤l. (Equivalently, H = Hl has precisely those edges appearing in an odd
number of P1, . . . , Pl.) The processing of Pi changes the degree parity only
at v2i−1 and v2i. Thus Hl has odd degree at precisely the vertices of U.
Proof 3 (induction on n(G)): We prove the statement more generally
for multigraphs. When n(G) = 1, the vertex has even degree and the 1-
vertex spanning tree is a parity subgraph. For n(G) > 1, select a leaf x of
T , and let y be its neighbor in T . Form G′ from G −x by adding a matching
of size ⌊dG(x)/2⌋on NG(x); this may introduce multiple edges. When dG(x)
is odd, let y be the vertex omitted from the matching. By construction,
dG′(v) ≡dG(v) (mod 2) for all v ∈V (G′), except for y when dG(x) is odd.
Also T −x is a spanning tree of G′. By the induction hypothesis, G′ has a
parity subgraph H ′ contained in T −x. If dG(x) is even, then we add x to
H ′ as an isolated vertex to obtain the desired parity sugraph H. If dG(x) is
odd, then we also add the edge yx.
7.3.26. For k ≥3, a smallest nontrivial 2-edge-connected graph G having
no nowhere-zero k-ﬂow must be simple, 2-connected, and 3-edge-connected.
We may assume that G is connected. Loops never contribute to net ﬂow
out of a vertex, so their presence does not affect the existence of nowhere-
zero k-ﬂows. If G has a vertex v of degree 2, then G has a nowhere-zero
k-ﬂow if and only if the graph obtained by contracting an edge incident to
v has a nowhere-zero k-ﬂow. Thus we may assume that δ(G) ≥3.
Since G has no cut-edge, each block of G is 2-edge-connected. If G has
a cut-vertex, G has no nowhere-zero k-ﬂow only if some block of G has no
nowhere-zero k-ﬂow. Thus We may assume that G is 2-connected.
Suppose that e, e′ ∈E(G) have the same endpoints. If G −e′ is not
2-edge-connected, then {e, e′} is a block in G, and we can apply the pre-
ceding paragraph. Thus we may assume that G −e′ has a nowhere-zero
k-ﬂow (D, f ). We obtain such a ﬂow for G by shifting f (e) up or down by 1
and letting f (e′) = 1, oriented with or against e depending on whether we
shifted f (e) down or up. The shift is possible because k ≥3. Thus we may
assume that G is simple.
It remains only to consider a nontrivial 2-edge cut {e, e′} (we have elimi-
nated the case where e, e′ share a vertex of degree 2). The bridgeless graphs
are those where every two vertices lie in a common circuit, and contract-
ing an edge of such a graph with at least three vertices does not destroy
this property. Thus we may assume that G · e′ has a nowhere-zero k-ﬂow
(D, f ). Let S, T be the vertex sets of the components of G −{e, e′}, and let
w be the vertex of G · e′ obtained by contracting e′. We may assume that e
is oriented from S to T in D.
Let m = f (e). Because f ∗(S ∪w) = 0, the edges between w and T
contribute −m to f ∗(w). Similarly, the edges between S and w contribute m
to f ∗(w). Thus we let f (e′) = m, oriented from T to S, to obtain a nowhere-
zero k-ﬂow on G.
•
•
•
•
S
T
e′
e
↔
•
•
•
S
T
m →
←m
←m
7.3.27. Every Hamiltonian graph G has a nowhere-zero 4-ﬂow. Since G
has a nowhere-zero 4-ﬂow if and only if it is the union of 2 even subgraphs
(Theorem 7.3.25), we express G in this way. The Hamiltonian cycle C is
one such subgraph. Let P be a spanning path obtained by omitting one
edge of C. For each e ∈G −E(C), let C(e) be the cycle created by adding e
to P. Each edge outside C appears in exactly one of these cycles. Let C ′ be
the spanning subgraph whose edge set consists of all edges appearing in
an odd number of the cycles {C(e): e ∈E(G) −E(C)}. Since C ′ is a binary
sum of even graphs, it is an even graph. It also contains E(G) −E(C).
7.3.28. Every bridgeless graph G with a Hamiltonian path has a nowhere-
zero 5-ﬂow. If G is Hamiltonian, then G is 4-ﬂowable (Exercise 7.3.27).
Otherwise, let G′ be the graph obtained from G by adding the edge e joining
the endpoints of a spanning path in G.
We claim that G′ has a nowhere-zero 4-ﬂow with weight 1 on e. Let
C be a spanning cycle in G′ through e, with vertices v1, . . . , vn in order
starting and ending at the endpoints of e. The remaining edges are chords
of C; let there be m of them. Let u1, . . . , u2m be the endpoings of chords of
C, in order on C, listed with multiplicity (a vertex may be an endpoint of
many chords. Let C′ be the subgraph of G consisting of the chords of C
together with the u2i−1, u2i-path on C not containing e, for 1 ≤i ≤m. The
parity of the number of chords incident to vj is the same as the parity of
the number of edges of C incident to vj in C′.
Hence C′ and C are both even subgraphs and have positive 2-ﬂows.
Let (D, f ′) and (D, f ) be the extension of these to G that are 0 outside C ′
and C, respectively. Since C′ ∪C = G′, (D, f + 2 f ′) is a positive 4-ﬂow on
G′ with weight 1 on e.
Let x be the tail and y the head of e under D. Let S be the set of vertices
reachable from x under D without using e. If S ̸= V (D), then [S, S] = {e},
with total ﬂow 1. Since the net ﬂow out of S is 0, exactly one unit of ﬂow

391
Chapter 7: Edges and Cycles
Section 7.3: Planarity, Coloring, and Cycles
392
returns. Since ﬂow comes in integer units, there is only one edge e′ in [S, S].
This makes e′ a cut-edge of G −e, which has been forbidden.
We conclude that S = V (D), and hence there is a x, y-path P not using
e. Increasing the weights by 1 on P and decreasing the weight to 0 on e
yields a nowhere-zero 5-ﬂow on G.
7.3.29. The dual of K6 on the torus. Below we show an embedding of K6
and its surface dual in separate pictures for clarity. The vertices on the
right correspond to the faces on the left; note that vertex degrees on the
right correspond to face lengths on the left. The heavy edges on the right
show that the dual is Hamiltonian. As in Exercise 7.3.27, we combine a
constant ﬂow of 1 along the spanning cycle with a constant ﬂow of 2 on an
even subgraph containing the remaining edges to obtain a nowhere-zero 4-
ﬂow; the resulting ﬂow is shown below. Every nowhere-zero 4-ﬂow is also
a nowhere-zero 5-ﬂow.
•
•
•
•
•
•
y
a
b
c
d
e
x
y
w
y
z
x
w
y
w
z
•
•
•
•
•
a
b
c
d
e
•
•
•
•
•
•
•
•
•
y
x
y
w
y
x
y
w
z
1
1
2
1
3
1
3
1
3
3
3
1
2
2
2
2
2
7.3.30. A graph G is the union of r even subgraphs if and only if G has
a nowhere-zero 2r-ﬂow. Necessity. Let G1, . . . , Gr be even subgraphs with
union G. Given an orientation D of G that restricts to Di on Gi, for each i,
let (Di, fi) be a nowhere-zero 2-ﬂows on Gi. Extend fi to E(G) by letting
fi(e) = 0 for e ∈E(G) −E(Gi). By Proposition 7.3.16, linear combinations
of ﬂows with the same orientation are ﬂows. Hence (D, f ) is a ﬂow on G,
where f = Pr
i=1 2i−1 fi. Since 0 < P j
i=1 2i−1 < 2 j, always 0 < | f (e)| < 2r.
Sufﬁciency. Proposition 7.3.19 observes the case r = 1. We proceed by
induction on r, modeling the induction step on the proof in Theorem 7.3.25.
Let (D, f ) be a positive 2r-ﬂow on G. Let E1 = {e ∈E(G): f (e) is
odd}. By Lemma 7.3.23, E1 forms an even subgraph of G. Thus there is a
nowhere-zero 2-ﬂow (D1, f1) on E1, where D1 agrees with D. Extend f1 to
E(G) by letting f1(e) = 0 for e ∈E(G) −E1; now (D, f1) is a 2-ﬂow on G.
Deﬁne f2 on E(G) by f2 = ( f −f1)/2. By Proposition 7.3.16, (D, f2) is
a ﬂow on G. It is an integer ﬂow, since f (e) −f1(e) is always even. Since
1 ≤f (e) ≤2r −1 and −1 ≤f1(e) ≤1, we have 0 ≤f2(e) ≤2r−1. Equality
may hold in either bound. Let E2 = {e ∈E(G): 1 ≤f2(e) ≤2r−1 −1}. Let
G2 be the spanning subgraph of G with edge set E2.
If f2(e) ̸= 2r−1 for all e, then (D, f2) restricts to a nowhere-zero 2r−1-
ﬂow on G2. Otherwise, we lose inﬂow or outﬂow that is a multiple of 2r−1
at each vertex. Since the total of net outﬂows is 0, at least one has posi-
tive outﬂow and at least one has negative outﬂow. Furthermore, the set of
vertices reachable in D from vertices with positive outﬂow contains a ver-
tex with negative outﬂow, because otherwise the set of reachable vertices
induces a subgraph with positive total of net outﬂows.
Let P be a x, y-path in D, where x has with positive net outﬂow and y
has negative net outﬂow under (D, f ); both outﬂows are multiples of 2r−1.
Obtain D′ from D by ﬂipping the orientation of each edge in P, and obtain
f ′
2 from f2 by letting f ′
2(e) = 2r−1 −f2(e) for each e ∈E(P). Now f ′
2 is a
positive weight on D′, and net outﬂow is unchanged at all vertices except
x and y. Furthermore, the total of the absolute values of the net outﬂows
declines by 2 · 2r−1.
Repeating this process yields a positive 2r−1-ﬂow on G2. Since f1(e) ̸=
0 if e ∈E(G) −E(G2), we have expressed G as the union of subgraphs G1
and G2, where G1 with edge set E1 is an even subgraph and G2, by the
induction hypothesis, is a union of r −1 even subgraphs.
7.3.31. (∗) Let G be a graph having a cycle double cover forming 2r even
subgraphs. Prove that G has a nowhere-zero 2r-ﬂow. (Jaeger [1988]) Com-
ment: The short proof of this exercise uses group-valued ﬂows and the ﬂow
polynomial of a graph. The arguments are not long, but the concepts are
beyond the scope of the brief treatment here, so this exercise will be deleted.
7.3.32. A graph has a nowhere-zero 3-ﬂow if and only if it has a modular
3-orientation.
Necessity. Given that G is 3-ﬂowable, let (D′, f ′) be a positive 3-ﬂow.
Let E2 = {e ∈E(G): f (e) = 2}. Let (D, f ) be deﬁned by switching the
orientation on edges of E2 to obtain D from D′ and changing the weights
on those edges from 2 to 1 to obtain f from f ′. The change at edge of E2
changes the net outﬂow at each endpoint by 3. Since all weights under f
equal 1, we have net outﬂow at v equal to d+
D(v) −dD −(v). Since the net
outﬂow is a multiple of 3, D is a modular 3-orientation.
Sufﬁciency. Given a modular 3-orientation D, let f (e) = 1 for all e ∈
E(G). Under (D, f ), the net outﬂow at each vertex is a multiple of 3. An
argument as in Exercise 7.3.30 now converts this to a nowhere-zero 3-ﬂow
on G. If each vertex has net outﬂow 0, then (D, f ) is such a ﬂow.

393
Chapter 7: Edges and Cycles
Section 7.3: Planarity, Coloring, and Cycles
394
Otherwise, since the total of the net outﬂows is 0, the net outﬂow is a
positive multiple of 3 at some vertex and a negative multiple of 3 at some
other vertex, with at least one of each type. Furthermore, the set of vertices
reachable in D from vertices with positive outﬂow contains a vertex with
negative outﬂow, because otherwise the set of reachable vertices induces a
subgraph with positive total of net outﬂows.
Let P be a x, y-path in D, where x has with positive net outﬂow and
y has negative net outﬂow under (D, f ); both outﬂows are multiples of 3.
Obtain D′ from D by ﬂipping the orientation of each edge in P, and obtain
f ′ from f by letting f ′(e) = 3−f (e) for each e ∈E(P). Now f ′ is a positive
weight on D′, and net outﬂow is unchanged at all vertices except x and y.
Furthermore, the total of the absolute values of the net outﬂows declines
by 2 · 3. Repeating this process produces a positive 3-ﬂow on G.
7.3.33. If G is a bridgeless graph, D is an orientation of G, and a, b ∈N,
then the following statements are equivalent.
A) a
b ≤
[S, S]

[S, S]
 ≤b
a for every nonempty proper vertex subset S.
B) G has an integer ﬂow using D and weights in the interval [a, b].
C) G has a real-valued ﬂow using D and weights in the interval [a, b].
B ⇒C. Every integer ﬂow is a real-valued ﬂow.
C ⇒A. Let (D, f ) be such a ﬂow. Weights in the interval [a, b] are
positive. Comparing total inﬂow and outﬂow, we have
[S, S]
 a ≤f −(S) =
f +(S) ≤
[S, S]
 b, which yields the ﬁrst inequality. Similarly,
[S, S]
 a ≤
f +(S) = f −(S) ≤
[S, S]
 b, which yields the second.
A ⇒B. The all-0 ﬂow is a nonnegative integer b-ﬂow on G. Let (D, f )
be a nonnegative integer b-ﬂow on G that maximizes m, the minimum
weight used, and within that minizimes the number of edges with weight
m. Let e∗be an edge with weight m, directed as uv.
If there is a v, u-path P in G that travels forward along edges in D with
weight less than b or backward along edges in D with weight more than
m + 1, then we can increase f (e∗) by 1, increase weight by 1 on forward
edges of P, and decrease weight by 1 on backward edges of P to obtain
another ﬂow that contradicts the choice of (D, f ).
Let S be the set of all vertices reachable from v by paths in G whose
weights satisfy these constraints. We may assume that u /∈S, so [S, S] is a
nontrivial edge cut. We have f (e) = b for e ∈[S, S] and f (e) ∈{m, m + 1}
for e ∈[S, S]. Since the net ﬂow across any cut is 0, we have
b
[S, S]
 = P
e∈[S,S] f (e) = P
e∈[S,S] f (e) ≤(m + 2)
[S, S]
 < a
[S, S]
 .
Thus
[S, S]
 /
[S, S]
 < a/b, which contradicts the hypothesis. We conclude
that such switches can be made until the desired positive b-ﬂow is obtained.
7.3.34.
Cycle double covers for special graphs.
Let Cm have vertices
v1, . . . , vm in order.
Cm ∨K1. Use each triangle of the form xvivi+1, where x is the cen-
tral vertex and indices are taken modulo m, and use the cycle through
v1, . . . , vm.
Cm ∨2K1. Use all 2m triangles.
Cm ∨K2. Let x and y be the two vertices outside the m-cycle. Use all
triangles of the form xvivi+1 and yvivi+1. We have not yet touched the edges
xy and vmv1, and the edges xv1, yv1, xvm and yvm have been used only once.
To ﬁnish the job, add the cycle through x, y, vm, v1 and the cycle through
x, y, v1, vm.
7.3.35. For every 3-regular simple graph with 6 vertices, the cycle dou-
ble covers with fewest cycles consist of three 6-cycles. There are only two
such graphs, K3,3 and C3
K2, which follows readily from the two cases of
whether the graph contains a triangle or not. The total length of the cycles
in the cover is 18, which can be achieved with as few as three cycles only if
three 6-cycles are used.
In K3,3, a 6-cycle C leaves 3 disjoint edges uncovered. There are two
ways to pass a 6-cycle through these three edges, each using alternate
edges on C. Hence every 6-cycle in K3,3 lies in exactly one smallest cycle
double cover.
If C3
K2, a 6-cycle C must visit both triangles, so it uses exactly two of
the three edges joining the triangles. Hence it also uses exactly two edges
on each triangle. Again, the remaining three edges are disjoint and must
appear in both of the other 6-cycles. Again the two ways to complete a 6-
cycle through these edges use alternate edges on C and complete a cycle
double cover, so again each 6-cycle appears in one such cover.
7.3.36. Cycle double cover of the Petersen graph using not all 5-cycles. Con-
sider the drawing of the Petersen graph with a 9-cycle on the “outside”.
Use the 9-cycle and the 6-cycle formed from the three pairwise-crossing
edges and three edges on the outside 9-cycle. Finally, add three 5-cycles;
each consists of one of the three crossing edges, two edges incident to the
central vertex, and two edges on the outside 9-cycle, as shown below.
•
•
•
•
•
•
•
•
•
•

395
Chapter 7: Edges and Cycles
Section 7.3: Planarity, Coloring, and Cycles
396
7.3.37. Cycle covers in the Petersen graph. Let G be the Peterson graph.
Every two 6-cycles in G share at least two edges. Since there are 10
vertices, two 6-cycles have at least two common vertices. In a 3-regular
graph, two cycles have a common edge at each common vertex. Hence we
have two common edges unless we have exactly two common vertices as
the endpoints of one shared edge. In this case, the symmetric difference of
the two 6-cycles is a 10-cycle, which does not exist in G.
G has no CDC consisting of ﬁve 6-cycles. One 6-cycle in such a CDC
would share two edges with each of the other four 6-cycles. Since it has
only 6 edges, this produces an edge covered three times.
G has no CDC consisting of even cycles. There is no 10-cycle or 4-cycle,
and the total length is 30. Hence the possibilities for cycle lengths are ﬁve
6-cycles or (8, 8, 8, 6). We have forbidden the former.
The latter would be a CDC using four even subgraphs. The symmetric
difference of one with the other three (see Exercise 7.3.39) yields a CDC
consisting of three even subgraphs. Since the graph is 3-regular, the full
graph is the union of any two of the even subgraphs in a CDC by three
even subgraphs. By Theorem 7.3.25, the graph then has a nowhere-zero 4-
ﬂow and hence a proper 3-edge-coloring. Since this does not exist for the
Petersen graph, it has no CDC consisting of four cycles.
7.3.38. Orientable CDC and even subgraphs.
a) If a graph G has a nonnegative k-ﬂow (D, f ), then f can be expressed
as Pk−1
i=1 fi, where each (D, fi) is a nonnegative 2-ﬂow on G.
Proof 1 (networks, Menger’s Theorem, and induction on k). The case
k = 2 is Proposition 7.3.19; consider k > 2. Let E0 = {e ∈E(D): f (e) = 0}
and E′ = {e ∈E(D): f (e) = k −1}, and let r =
E′. Construct a network N
from D −E′ −E0 by adding vertices s and t with edges sy and xt of weight
k −1 for each edge xy ∈E′. View f as both ﬂow and capacity. Adding an
edge ts of weight r(k −1) would turn f into a circulation, so f on N is a
ﬂow of value r(k −1).
Hence every s, t-cut in N has capacity at least r(k −1).
Since ev-
ery edge has weight at most k −1, every s, t-cut has at least r distinct
edges.
By Menger’s Theorem, N has r pairwise edge-disjoint s, t-paths.
These combine with E′ to form an even subgraph Ek−1 of D, containing E′
and contained in D −E0. Let (D, fk−1) be the nowhere-zero 2-ﬂow that is
nonzero on Ek−1.
Reducing weights by 1 on Ek−1 yields a nonnegative (k −1)-ﬂow (D, f ′)
on G. By the induction hypothesis, there are 2-ﬂows (D, fi) for 1 ≤i ≤k−1
such that f ′ = Pk−2
i=1 fi. Now f = Pk−1
i=1 fi, as desired.
Proof 2 (manipulation of ﬂows and induction on k). Deﬁne E0 and E′
as above. When (D, f ) is restricted to D−E ′, the net outﬂow at each vertex
is a multiple of k −1. The argument in Exercise 7.3.30 and Exercise 7.3.32
that switches orientation along paths from vertices with positive outﬂow
to vertices with negative outﬂow produces a positive (k −1)-ﬂow (D′, f ′) on
G −E′ −E0. If D′ and D are opposite on an edge e, then f ′(e) = k −1−f (e).
Switching these edges back yields a nowhere-zero (k −1)-ﬂow (D, f1) on
G −E′ −E0 with f1(e) ≡f (e) (mod k −1) for all e.
Since f is nonnegative, (D, f −f1) is an integer k-ﬂow on G in which
every edge has weight k −1 or 0. Let f2 = ( f −f1)/(k −1). Now (D, f −f2)
is a nonnegative (k −1)-ﬂow on G, and (D, f2) is a nonnegative 2-ﬂow on
G. By the induction hypothesis, there are k −2 2-ﬂows with orientation D
that sum to f −f2, and adding f2 to them yields f .
b) A graph G has a positive k-ﬂow (D, f ) if and only if D is the union
of k −1 even digraphs such that each edge e in D appears in exactly f (e) of
them. Necessity follows from part (a). Since the k −1 guaranteed 2-ﬂows
on G have the same orientation D and are all nonnegative, they yield the
desired even digraphs D1, . . . , Dk−1 by letting E(Di) = {e ∈E(D): fi(e) =
1}. For sufﬁciency, the even digraphs convert to 2-ﬂows that sum to (D, f ).
c) A graph G has a nowhere-zero 3-ﬂow if and only if it has an orientable
cycle double cover forming three even subgraphs.
Necessity. If G has a nowhere-zero 3-ﬂow, then G has a positive 3-
ﬂow (D, f ), and part (b) yields two even digraphs such that each edge e
appears in f (e) of them. Reversing the orientation on one of them yields
two even digraphs D1 and D2 that are oppositely oriented on the edges with
f (e) = 2. At a given vertex v, those edges contribute the same indegree
and outdegree. Therefore, D1 ∪D2 has the same number of edges entering
and leaving v among the edges with f (e) = 1. Let D3 be the reverse of
this subgraph of D1 ∪D2. Now D3 is a third even subgraph completing an
oriented cycle double cover with D1 and D2.
Sufﬁciency.
Let D1, D2, D3 be the subgraphs in the given oriented
CDC. Let D′
1 be the reversal of D1. Now D′
1 ∪D3 is an orientation of G; call
it D. Let f (e) = 2 if e ∈D′
1 ∩D3; otherwise, f (e) = 1. By part (b), (D, f ) is
a positive 3-ﬂow on G.
Direct proof that (D, f ) is a positive 3-ﬂow without using part (b). In D,
each edge is oriented the same way as the higher-indexed of the two among
{D1, D2, D3} that contains it, and f (e) is the difference of those indices. For
1 ≤i < j ≤3, let ai, j be the number of edges in G that enter v in Dj and
leave it in Di, and let bi, j be the number that leave it in Dj and enter it
in Di. The net outﬂow at v is b1,2 + 2b1,3 + b2,3 −a1,2 −2a1,3 −a2,3. The
computations below show that this quantity is 0, since D1, D2, D3 are even
digraphs. Thus (D, f ) is a positive 3-ﬂow on G.
b1,3 + b2,3 = d+
D3(v) = d−
D3(v) = a1,3 + a2,3
b1,2 + b1,3 = d−
D1(v) = d+
D1(v) = a1,2 + a1,3

397
Chapter 7: Edges and Cycles
Section 7.3: Planarity, Coloring, and Cycles
398
7.3.39. If a graph G has a CDC formed from four even subgraphs, then G
also has a CDC formed from three even subgraphs. Let E0, E1, E2, E3 be the
edge sets of the four even subgraphs. Form instead the sets E0△E1, E0△E2,
and E0△E3. These form even subgraphs, since the symmetric difference of
two even subgraphs is an even subgraph.
If previously an edge belonged to Ei and Ej but not E0, then now in
belongs to E0△Ei and E0△Ej but not to E0△Ek. If it belonged to E0 and Ek,
then the same statement holds. Hence the new family is a CDC by three
even subgraphs.
7.3.40. The solution to the Chinese Postman Problem in the Petersen graph
has length 20, but the least total length of cycles covering the Petersen graph
is 21. Since the Petersen graph is regular of odd degree, at least one edge
must be added incident to each vertex to obtain an Eulerian spanning su-
pergraph. Hence at least 5 edges must be added, and the total length of
an Eulerian circuit in a supergraph is at least 20. Since the graph has a
1-factor, a solution of length 20 exists.
Cycles covering the graph together solve the Chinese Postman Prob-
lem, so their total length must be at least 20. If equality holds, then the
lengths must be one of (9, 6, 5), (8, 6, 6), (5, 5, 5, 5), since the cycle lengths
are in {5, 6, 8, 9}.
If a 9-cycle is used, then one vertex is missed, and the other two cycles
must visit it. Let v be the vertex missed by the 9-cycle, let u and x be the
neighbors of v on the 6-cycle, and let u and y be the neighbors of v on the
5-cycle. Now the 6-cycle must be completed using a u, x-path of length 4,
and the 5-cycle must be completed using a u, y-path of length 3. There are
two choices for each of these paths, but all choices miss one particular edge,
which we have labeled zw in the drawing on the left below.
If an 8-cycle is used, then two adjacent vertices are missed. The two 6-
cycles must both visit these vertices, and girth 5 requires that all 6-cycles
through two adjacent vertices use the edge joining them. The remaining
edges in the 6-cycles can be distributed in several ways, but in each way
some edge remains uncovered.
•
•
•
•
•
•
•
•
•
•
u
v
x
w
y
z
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
If four 5-cycles are used, then draw the graph so that one of them is
the outer 5-cycle. A 5-cycle uses 0 or 2 of the edges crossing from the outer
5-cycle to the inner one. In order to cover these cross edges, the remaining
three 5-cycles must use two cross edges each. Such a 5-cycle uses one or
two edges on the central cycle; two if the cross edges reach consecutive
vertices on the outer cycle, one if they do not.
In order to cover the inner 5-cycle, at least two of the three crossing
5-cycles must have two edges on it. If they share a crossing edge, then
the remaining 5-cycle covers the two remaining cross edges, cover no new
edges on the inner 5-cycle, and an edge of the inner cycle is left uncovered.
If they do not share a crossing edge, then their union avoids a vertex of the
inner 5-cycle. Hence the remaining 5-cycle is left to cover three edges at
one vertex, which it cannot do.
7.3.41. Given a perfect matching in the Petersen graph, there is no list of
cycles that together cover every edge of M exactly twice and all other edges
exactly once. Suppose that such a list of cycles exists, where M is the bold
matching in the drawing below. If a cycle in the cover uses two edges of M,
then it uses at least three edges not in M. If a cycle uses four edges of M,
then it uses at least four edges not in M. Thus every cycle uses at least as
many edges not in M as edges in M.
Together, the cycles must cover edges of M 10 times and edges not in
M 10 times. Thus each cycle used must cover the same number of edges of
each type. Such cycles have four edges of M and four edges not in M. Thus
the total length is a multiple of 8, which is impossible since it is 20.
•
•
•
•
•
•
•
•
•
•
7.3.42. If an optimal solution to the Chinese Postman Problem on a graph
G decomposes into cycles, then G has a cycle cover of total length at most
e(G) + n(G) −1. By Exercise 7.3.25, every spanning tree of G contains a
parity subgraph, and this has at most n(G) −1 edges. Taking all edges
of G and adding one extra copy of each edge in a parity subgraph yields
an Eulerian supergraph with at most e(G) + n(G) −1 edges. Hence the
optimal solution to the Chinese Postman Problem has at most this size,
and the hypothesis guarantees a cycle cover of at most this size.
The minimum length of a cycle cover of K3,t is 4t. Two cycles must visit
each vertex of the larger part, and each such visit requires two edges, so
the total length of the cycles is at least 4t. This total length is achievable
for t ≥2 using cycles of lengths 4 and 6.

399
Chapter 8: Additional Topics
Section 8.1: Perfect Graphs
400
8.ADDITIONAL TOPICS
8.1. PERFECT GRAPHS
8.1.1. Clique number and chromatic number of C 2k+1 equal k and k + 1
when k ≥2. A clique in G is an independent set in G. The largest inde-
pendent set in C2k+1 has size k (using alternate vertices along the cycle). A
proper coloring of G is a covering of V (G) by cliques in G. The only cliques
on a chordless cycle are two consecutive vertices, so we need at least k + 1
of them to cover V (C2k+1). When k = 1, we can use a single triangle, and
χ(C3) = 1.
8.1.2. The smallest imperfect graph G such that χ(G) = ω(G). The only
graph with at most ﬁve vertices that is not chordal or bipartite is the
“house” H on the left below. This is perfect, since its proper subgraphs are
chordal or bipartite and for the full graph χ(H) = 3 = ω(H). Hence we
need at least 6 vertices. The graph H ′ on the right below is imperfect, since
it has a chordless cycle, but χ(H ′) = 3 = ω(H ′).
•
•
•
•
•
•
•
•
•
•
•
8.1.3. Cographs.
a) G is P4-free if and only if G can be reduced to the empty graph by
iteratively taking complements within components. If G is not P4-free, then
a 4-set inducing P4 also induces P4 after complementation of its component,
so these vertices can never be separated.
For the converse, we use induction on n(G).
By the induction hy-
pothesis, it sufﬁces to show that if G is P4-free and connected, then G is
disconnected. Since G is P4-free, diam (G) = 2. If G has a cut-vertex x,
then diam (G) = 2 implies that every pair of vertices from distinct compo-
nents of G −x have x as a common neighbor. In this case x ↔V (G)−x and
x is isolated in G. Hence we may assume that G −x is connected and P4-
free for all x ∈V (G). The induction hypothesis implies that G −x, which is
the same as G −x, is disconnected. If deletion of an arbitrary vertex of G
leaves a disconnected subgraph, then G has no spanning tree and is itself
disconnected.
b) Every P4-free graph is perfect.
Proof 1. If the graphs in a hereditary family G are not all perfect, then
G contains a p-critical graph. By the Perfect Graph Theorem, a minimal
imperfect graph and its complement are connected. Hence part (a) implies
that there is no p-critical P4-free graph, and all such graphs are perfect.
Proof 2. Since the class is hereditary, it sufﬁces to prove that G has a
clique consisting of a vertex of each color in the greedy coloring with respect
to an arbitrary vertex ordering. If k colors are used, let Q be the largest
clique of the form {ui+1, . . . , uk} such that uj has color j. If i = 0, we are
done. Otherwise, there is no vertex of color i adjacent to all of Q, but by the
greedy coloring algorithm every vertex of Q is adjacent to some (earlier)
vertex of color i. Let v be a vertex of color i adjacent to the maximum
number of vertices in Q, and choose x ∈Q −N(v). Let y be a vertex of color
i adjacent to x. By the choice of v, there is a vertex w ∈Q such that w ↮y.
Since also y ↮v, we have P4 induced by v, w, x, y. This idea appears in
Chv´atal’s proof that obstruction-free orderings are perfect orderings; this
more specialized situation allows a simpler discussion.
8.1.4. Clique identiﬁcation preserves perfection. Let G1 and G2 be two in-
duced subgraphs of G that are perfect and share only a clique S. If a proper
induced subgraph of G is not an induced subgraph of G1 or G2, then it is
formed by pasting together induced subgraphs of G1 and G2 at a subset
of S. Therefore, we need only verify χ(G) = ω(G) to complete an induc-
tive proof that G is perfect. Since there are no edges between G1 −S and
G2 −S, we have ω(G) = max{ω(G1), ω(G2)}. For χ(G), consider optimal
colorings of G1 and G2. Since S is a clique, each uses different colors on
the vertices of S. By permuting the labels of the colors, we can thus make
the colorings agree on S to get a coloring of G with max{χ(G1), χ(G2)} col-
ors.
Since χ(G1) = ω(G1) and χ(G2) = ω(G2) by hypothesis, we have
χ(G) = max{χ(G1), χ(G2)} = max{ω(G1), ω(G2)} = ω(G).
8.1.5. Identiﬁcation at star-cutsets does not preserve perfection. The union
of two houses sharing a paw has an induced 5-cycle, as shown below. The
star-cutset C is circled.

401
Chapter 8: Additional Topics
Section 8.1: Perfect Graphs
402
•
•
•
•
•
•
8.1.6. If G is a cartesian product of complete graphs, then α(G) = θ(G). We
have G = Kn1
· · ·
Knr , indexed so that n1 ≤· · · ≤nt. Always θ(G) ≥α(G),
so it sufﬁces to exhibit a stable set and a clique covering of the same size.
Using copies of the largest clique, we have θ(G) ≤Qr−1
i=1 ni. To obtain a
stable set of this size, recall that H is m-colorable if and only if α(H
Km) =
n(H) (Exercise 5.1.31). We apply this with H = Qr−1
i=1 Kni; it sufﬁces to show
that H is nr-colorable. Here we use another coloring result: χ(F1
F2) =
max{χ(F1), χ(F2)} (Proposition 5.1.11). Iterated, this yields χ(H) = nr−1 ≤
nr, and the proof is complete.
K2 K2 K3 is not perfect. This graph has chromatic number and clique
number both equal to 3 but has an induced 7-cycle, as shown below.
•
•
•
•
•
•
•
•
•
•
•
•
8.1.7. The only color-critical 4-chromatic graph with six vertices is C5 ∨K1.
Let G be a 4-chromatic graph with six vertices. If G is perfect, then G
contains K4. If it is also 4-critical, then it cannot contain anything but
K4. Therefore, we may assume that G is imperfect. A 6-vertex graph is
imperfect if and only if it has an induced 5-cycle. The 5-cycle is 3-colorable,
with the third color used only once, anywhere. Therefore, the only way for
G to be 4-chromatic it for it to be C5 ∨K1, which is in fact 4-critical.
8.1.8. (+) Prove that G is an odd cycle if and only if α(G) = (n(G) −1)/2
and α(G −u −v) = α(G) for all u, v ∈V (G). (Melnikov–Vizing [1971],
Greenwell [1978])
8.1.9. Let v1, . . . , vn be a simplicial elimination ordering of G.
a) Applying the greedy coloring algorithm to the construction ordering
vn, . . . , v1 yields an optimal coloring, and ω(G) = 1 + max P
x∈V (G) |Q(x)|,
where Q(vi) = {vj ∈N(vi): j > i}. Since {x} ∪Q(x) is a clique, we have
χ(G) ≥ω(G) ≥1 + max |Q(x)|. The greedy algorithm with this order-
ing yields χ(G) ≤1 + max |Q(x)|, since x has {Q(x)} earlier neighbors, so
equality holds throughout.
Then the stable set {y1, . . . , yk} obtained greedily from the elimination
ordering is a maximum stable set, and the sets {yi} ∪Q(yi) form a mini-
mum clique covering. “Obtained greedily” means set y1 = v1, discard what
remains of Q(y1) from the remainder of the ordering, and iterate.
Let
S = {y1, . . . , yk}. When a vertex is included, it has no edge to an earlier
chosen vertex, so S is stable. Furthermore, the vertices discarded when yi
is chosen form a subset of Q(yi), and {x} ∪Q(x) is always a clique. Since
every vertex in the list is chosen or discarded, {{yi} ∪Q(yi)} forms a clique
cover with the same size as S, so this is a minimum clique cover and S is a
maximum stable set.
8.1.10. (•) Add a test to the MCS algorithm to check whether the resulting
ordering is a simplicial elimination ordering. (Tarjan–Yannakakis [1984])
8.1.11. The intersection graph G of a family of subtrees of a tree has no
chordless cycle.
Suppose that G has a chordless cycle [v1, . . . , vk], with
T1, . . . , Tk being the corresponding subtrees of the host tree T . For each
i, the edge vivi+1 (indices modulo k) yields a vertex wi ∈V (Ti) ∩V (Ti+1).
The subtree Ti has a unique wi−1, wi-path in T . Let xi be the last common
vertex of the wi, wi+1-path and the wi, wi−1-path. The xi−1, xi-path in T is
contained in Ti, but its internal vertices belong to no other trees in the list.
Therefore, the union of the xi−1, xi-paths in T , over all i, is a closed walk
with no repeated vertices, which contradicts T having no cycles.
8.1.12. Every graph is the intersection graph of a family of subtrees of some
graph. Given a graph G, let G′ be the graph obtained by subdividing each
edge of G. Associate with v ∈V (G) the star in G′ formed by the edges
incident to v. The stars for u and v intersect in G′ if and only if u and v are
adjacent in G.
8.1.13. Every chordal graph has an intersection representation by subtrees
of a host tree with maximum degree 3. A chordal graph has an intersection
representation by subtrees of a host tree T . If T has a vertex x of degree
exceeding 3, then form T ′ as follows. In T , subdivide each edge incident to
x (introducing a set S of new vertices), delete x, and add edges forming a
path with vertex set S; this yields T ′. Modify the subtrees that contained x
by replacing x with S. The pairs of subtrees that intersect remain the same,
and T ′ has one less vertex of degree exceeding 3 than T does. Iterating this
process produces the desired representation.
8.1.14. If Q is a maximal clique in a connected chordal graph G and x ∈
V (G), then Q has two vertices whose distances from x are different.

403
Chapter 8: Additional Topics
Section 8.1: Perfect Graphs
404
Proof 1 (chordless cycles). If x ∈Q, then we take x and some other
vertex of Q. Otherwise, suppose that all vertices of Q have the same dis-
tance from x. For v ∈Q, let R(v) be the set of vertices just before v on
shortest x, v-paths. For v, v′ ∈Q, we claim that R(v) and R(v′) are or-
dered by inclusion. Otherwise, there exist u ∈R(v) and R(v′) such that
u ↮v′ and u′ ↮v. Now let P and P′ be a shortest x, u-path and a shortest
x, u′-path. The subgraph induced by V (P) ∪V (P′) is connected; let D be a
shortest u, u′ path in this subgraph. The length of D is at least 1. No inter-
nal vertices of D are adjacent to v or v′, since this would yield shorter paths
to Q. Therefore, adding the edges uv, vv′, v′u′ to D completes a chordless
cycle C of length at least 4. This is a contradiction.
We conclude that R(v) and R(v′) are ordered by inclusion. Since this
is true for all pairs of vertices in Q, there is a vertex w ∈Q such that R(w)
is contained in R(v) for all v ∈Q −{w}. Thus there is a vertex, in R(w),
that is adjacent to all of Q. This contradicts Q being a maximal clique. We
conclude that Q has two vertices with different distance from x.
Proof 2 (clique trees). Consider a clique tree representation of G in a
smallest host tree T . By Lemma 8.1.16, the vertices of T correspond to the
maximal cliques in G. Let q be the vertex corresponding to Q. Since x /∈Q,
the tree Tx assigned to x cannot contain q. Let P be the path in T from q
to Tx, with q′ being the neighbor of q on P. Let Q′ be the maximal clique of
G corresponding to q′, and choose v ∈Q −Q′. Since G is connected, some
shortest path (of subtrees) links Tx to q.
Hence some vertex w belongs
to Q ∩Q′. Thus P encounters Tw before Tv when followed from Tx. This
implies that dG(x, w) < dG(x, v).
8.1.15. Intersection graphs of subtrees of graphs. A fraternal orientation
of a graph is an orientation such that any pair of vertices with a common
successor are adjacent.
a) A simple graph G is chordal if and only if it has an acyclic fraternal
orientation. If G is chordal, then G has a simplicial elimination ordering
v1, . . . , vn. With respect to this ordering, orient the edge vivj from vj to
vi if i < j. Then vj →vi and vk →vi, implies that vj, vk are remaining
neighbors of vi when vi is deleted, so the simplicial property of the ordering
guarantees vj ↔vk in G. If G is not chordal, let C be a chordless cycle in
G. Let F be an arbitrary acyclic orientation of G. Along C there must be a
successive triple u, v, w such that u →v and w →v in F, which means F
is not fraternal.
b) Example of a graph with no fraternal orientation.
Let G be the
graph consisting of two 4-cycles sharing a vertex v, and suppose G has a
fraternal orientation. Since N(v) is independent, v has at most one edge
oriented inward, so we may choose one of the 4-cycles to have both edges
incident to v oriented out from v. If u is the remaining vertex of that 4-
cycle, we cannot have both edges involving u oriented into u, but u ↮v
forbids either edge to be oriented out from u.
c) G is the intersection graph of a rootable family of trees if and only if G
has a fraternal orientation (a family of subtrees is rootable if the trees can
be assigned roots so that a pair of them intersects if and only if at least one
of the two roots belongs to both subtrees). Suppose G is the intersection
graph of a rooted family of trees in a graph, with f (v) the tree assigned to
v ∈V (G). If xy ∈E(G), orient the edge xy toward the vertex in {x, y} whose
tree has root lying in both of { f (x), f (y)} (choose the orientation arbitrarily
if both roots satisfy this). If u →v and w →v, then the root of f (v) lies in
both f (u) and f (w); hence f (u) and f (w) intersect and u, w are adjacent.
Conversely, let G be a fraternally oriented graph. For each vertex v,
let f (v) be the substar of G consisting of all edges of G oriented out from
v, and root it at v. For any edge xy oriented as x →y, we have the root
of f (y) in f (x). To complete the proof that G is the intersection graph of
{ f (v)}, we show that xy /∈E(G) implies f (x) ∩f (y) = ∅. Nonadjacency
of x, y implies that neither of f (x), f (y) contains the root of the other, and
hence f (x) ∩f (y) ̸= ∅requires that x, y have a common successor. This
contradicts the assumption that the orientation is fraternal.
8.1.16. A simple graph G is a forest if and only if every pairwise intersecting
family of paths in G has a common vertex. If G contains a cycle, then the
three paths on the cycle joining any two of three speciﬁed vertices on the
cycle form a pairwise intersecting family of paths with no common vertex.
Conversely, if G is a forest, then a pairwise intersecting family of paths
lies in a single component of G and hence is a pairwise intersecting family
of subtrees of a tree. By Lemma 8.1.10, the paths have a common vertex.
8.1.17. For a graph G, the following are equivalent (and deﬁne split graphs).
A) V (G) = S ∪Q, where S and Q induce a stable set and clique in G.
B) G and G are chordal.
C) G has no induced C4, 2K2, or C5.
A ⇒B. A cycle in C cannot visit vertices of S in succession, so a cycle
of length at least 4 has two nonconsecutive vertices in Q; they are adjacent.
B ⇒C. C4 and C5 are chordless cycles. The vertices of a 2K2 in G
would induce a chordless 4-cycle in G.
C ⇒A. Let Q be a maximum clique minimizing e(G −Q). Suppose
that G −Q has an edge xy. Since G is C4-free, N(x) ∩Q and N(y) ∩Q are
ordered by inclusion; we may assume that N(y) ∩Q ⊆N(x) ∩Q. Since G
is 2K2-free, x cannot have two nonneighbors in Q. Since Q is a maximum
clique, x has a nonneighbor u in Q and y another nonneighbor v in Q. The
edges (solid) and non-edges (dashed) within {x, y, u, v} are shown below.

405
Chapter 8: Additional Topics
Section 8.1: Perfect Graphs
406
•
•
•
•
•
Q
u
v
x
y
z
Since Q −u + x is a clique, the choice of Q implies that u as many
neighbors as x outside Q. Since y ∈N(x) −N(u), there exists z /∈Q such
that z ∈N(u) −N(x). Now G[x, y, z, u] ̸= 2K2 requires y ↔z, after which
G[x, y, z, v] ̸= C4 requires v ↮z and G[u, v, x, y, z] ̸= C5 requires v ↔z.
The contradiction implies that G −Q has no edges.
8.1.18. If d1 ≥· · · ≥dn is the degree sequence of a simple graph G, and
m is the largest value of k such that dk ≥k −1, then G is a split graph if
and only if Pm
i=1 di = m(m −1) + Pn
i=m+1 di. The Erd˝os-Gallai condition
says that d1 ≥· · · ≥dn are the vertex degrees of such a graph if and only
if Pk
i=1 di ≤k(k −1) + Pn
i=k+1 min{k, dir for 1 ≤k ≤n; call this the k-th E-
G condition. Split graphs are those with a vertex partition V (G) = Q ∪S
such that Q is a clique and S is a stable set.
Necessity. If G is a split graph with maximum clique Q, then the |Q|
vertices of Q have degree at least |Q| −1, and other vertices have degree
at most |Q| −1. Hence m = |Q|, and the vertices of Q are |Q| vertices of
highest degree. Counting their degree by the edges inside Q and out shows
that the mth E-G condition holds with equality.
Sufﬁciency.
Conversely, assume equality in the mth E-G condition.
Whenever the kth E-G condition holds with equality, the k vertices of
highest degree must form a clique.
If in addition the contribution in
Pn
i=k+1 min{k, di} is always di, then all edges from the remaining vertices
go to the k highest-degree vertices, and G is a split graph. When k = m,
di < i −1 ≤k for all i > k, so this does indeed hold. (Note: The graph
below is not a split graph, but satisﬁes the E-G condition with equality at
k = 2 ̸= 4 = m.)
•
•
•
•
•
•
•
•
8.1.19. The trees that are split graphs are stars or double-stars. No noniso-
morphic trees that are split graphs have the same degree list. Nonisomor-
phic split graphs with the same degree list arise by ﬁnding nonisomorphic
bipartite graphs with the same degrees within partite sets and placing a
complete graph on one partite set. The only cliques in a tree T are single
vertices or two adjacent vertices. If T is a split graph, then the remaining
vertices are adjacent only to these. Hence T is a star or double-star. Such
a tree is determined by the degrees of the vertices with degree exceeding 1.
For explicit nonisomorphic split graphs, note that C8 and 2C4 have the
same degree list, and adding edges to make one of the partite sets into a
clique maintains that property. The graphs are not isomorphic.
8.1.20. G is a k-tree (obtained from a k-clique by successively adding sim-
plicial vertices of degree k) if and only if G 1) is connected, 2) has a k-clique
but no k + 2-clique, and 3) has only k-cliques as minimal vertex separators.
Necessity. By induction on n(G). The conditions hold for the unique
k-tree obtained by adding two vertices to the initial k-clique. Each subse-
quent vertex addition maintains connectedness. Let v be the last vertex
added. Any new clique must contain new edges and thus must contain v,
but v belongs only to a k + 1-clique. For (3), suppose S is a minimal ver-
tex separator of G. If S is a minimal vertex separator of G −v, we apply
the induction hypothesis. A vertex of a minimal vertex separator S has
neighbors in two components of G −S; hence no minimal vertex separator
of a graph contains a simplicial vertex. Hence v /∈S. If v is not isolated
in G −S, then S is a minimal vertex separator in G −v, because N(v) is
a clique. We conclude that v is isolated in G −S, this requires S = N(v),
which induces a k-clique.
Alternative proof of (3), without induction. For property (3), the con-
struction procedure implies that G is chordal, which implies that every
minimal vertex separator induces a clique. If S is a minimal x, y-separator,
let x be the ﬁrst of {x, y} in the construction ordering. Among the com-
ponent of G −S containing y, let z be the ﬁrst vertex in the construction
ordering. When z is added, the only vertices that z can have as neighbors
lie in S. Hence k ≤|S| ≤k + 1. Suppose |S| = k + 1 and H is a component
of G −S. Every vertex of S has a neighbor in H, but no vertex of H is ad-
jacent to all of S. Hence we can choose u, v ∈S and x, y ∈V (H) such that
u ↔x, v ↔y, u ↮x, v ↮y. Adding a shortest x, y-path in H yields a
chordless cycle; hence |S| = k.
Sufﬁciency. (3) implies that G is a chordal graph. Let v be the ﬁrst
vertex in a simplicial elimination ordering. Since v is isolated in G −N(v),
N(v) contains a minimal vertex separator. Hence (3) implies |N(v)| ≥k.
Since by (2) G has no k + 2-clique, we have |N(v)| ≤k. Hence d(v) = k. To
complete the proof, we must show that deleting a simplicial vertex of degree
k does not destroy the conditions, so we can complete a “k-valent” simplicial
elimination sequence by applying induction. Deleting a simplicial vertex

407
Chapter 8: Additional Topics
Section 8.1: Perfect Graphs
408
does not disconnect a graph or create a k +2-clique, and if G is not a clique,
then (3) implies that G −v retains a k-clique. To prove that (3) is preserved,
if a minimal vertex separator of G −v is a minimal vertex separator of G,
then it induces a k-clique.
We claim that every minimal x, y-separator of an induced subgraph of
a graph is contained in a minimal x, y-separator of the full graph. If so,
then a minimal x, y-separator of G −v that is not a k-clique must be part
of a minimal x, y-separator of G that contains v, which is impossible since
no simplicial vertex belongs to a minimal vertex separator. To prove the
claim, suppose S is a minimal x, y-separator in an induced subgraph H of
G, so S ∪(V (G) −V (H)) separates x and y in G. Hence this set contains
a minimal x, y-separator of G, but such a separator must include all of S,
else we retain an x, y-path from H.
8.1.21. An n-vertex chordal graph with no (k + 2)-clique has at most kn −
 k+1
2

edges, with equality if and only if it is a k-tree. This is the special case
of Exercise 8.1.23 obtained by setting r = k + 1.
8.1.22. The number of k-trees with vertex set [n] is
 n
k

[k(n −k)+1]n−k−2. We
show that the number of rooted k-trees with vertex set [n] that have a ﬁxed
set of k vertices as a root clique is [k(n −k) + 1]n−k−1. To obtain the formula
from this, note that every k tree has 1+k(n −k) k-cliques, beginning with a
root and adding k each time a new vertex is grown from an old k-clique. On
the other hand, there are
 n
k

ways to pick a set of k vertices to form a root
clique; hence we multiply by
 n
k

and divide by [k(n −k) + 1] to obtain the
ﬁnal formula. Note that when n = k there is only one k-tree, which agrees
with the formula, so henceforth we may assume n > k.
To count the k-trees with label set [n] and a ﬁxed root R ⊆[n], we put
them in 1-1 correspondence with lists of length n −k −1 chosen from a ﬁxed
alphabet of size 1 + k(n −k). The alphabet consists of 0, which refers to
the root, together with pairs (v, i) such that v ∈([n] −R) and i ∈[k]. Since
n > k, every vertex belongs to a k + 1-clique; when we deal with rooted
k-trees, the leaves are the vertices not in the root that belong to only one
k+1-clique. Given a k-tree with root R, we form a list by iteratively deleting
the leaf u with the least label and recording an appropriate member of the
alphabet. If N(u) = R, we record 0. If N(u) ̸= R, we want to record some
other code in the alphabet that will enable us to recover the k-clique to
which u is joined in growing the current tree from the root.
In growing the current tree from the root, there is a unique list of
vertex additions that leads from the root to u (ignoring other additions not
needed to reach u). When N(u) ̸= R, there is a last non-root vertex v before
u on this list; let this be the vertex part of the code recorded. When we
add u, N(u) consists of v together with all but one vertex of the k-clique to
which v was connected when added. Let the index part of the code recorded
be the position among this list of k of the vertex not in N(u). After n −k −1
iterations, there remains one non-root vertex joined to the root.
This deﬁnes a unique list from each k-tree. To reconstruct from any
list on these labels the unique k-tree that generates it, and thereby show
that the map is a bijection, there are two phases. In the ﬁrst phase, at each
iteration select the least non-root label u that has not yet been marked
ﬁnished. If the current code is 0, create edges from u to R. If the code is a
vertex-index pair, create an edge from u to the vertex v that is the vertex
part of the code. Mark u ﬁnished. After n −k −1 iterations, there remains
one unﬁnished non-root vertex; join it to R.
The ﬁrst phase produces a “skeleton” describing possible ways to grow
the k-tree from the root. If we shrink the root to a single node, this is in fact
a rooted tree that, for each non-root vertex, describes by its path to the root
the list of vertices that must be added before it is added. The second phase
ﬂeshes out this skeleton. Moving outward from the root as the construction
procedure would, we iteratively “expand” a non-root vertex u such that
every previous vertex on the path to the root has already been expanded;
this expansion creates the other edges formed when the k-tree is grown
to u. Let u be a vertex whose deletion generated a non-root code (v, i).
When we expand u, the vertex v is the last vertex on the path to it from the
root and has already been expanded, which means that we know the set of
vertices S to which v was joined when the tree grew to it. The code i tells
us which element of S should not be joined to u. This two-phase procedure
generates a unique k-tree from every list, and the k-tree generated from a
list τ yields τ under the ﬁrst procedure, so this is a bijection.
8.1.23. An n-vertex chordal graph G with clique number r has at most
 r
j

+
 r−1
j−1

(n −r) cliques of order j, with equality (for all j simultaneously)
if and only if G is an r −1-tree. We use induction on n. The formula holds
for n = r. For n > r, let v be the ﬁrst vertex to be deleted in a simplicial
elimination order. Since v has at most r −1 neighbors, it is involved in at
most
 r−1
j−1

cliques of order j. The j-cliques not containing v are bounded
by the induction hypothesis. Furthermore, equality holds if and only if it
holds for G −v and adding v adds
 r−1
j−1

cliques of order j, which by the
inductive hypothesis implies that G is an r −1-tree.
8.1.24. Pairwise intersecting real intervals have a common point. Let a be
the rightmost left endpoint among these intervals, and let b be the leftmost
right endpoint. If some right endpoint occurs before some left endpoint,
then those two intervals do not intersect. Hence a ≤b. For every interval,
its left endpoint is at most a, and its right endpoint is at least b. Hence

409
Chapter 8: Additional Topics
Section 8.1: Perfect Graphs
410
every interval in the family contains the interval [a, b], which we have
shown is nonempty.
8.1.25. A tree is an interval graph if and only if it is a caterpillar. We prove
the following equivalent for a tree G.
A) G is an interval graph.
B) G is a caterpillar.
C) G does not contain the tree Y formed by subdividing each edge of a claw.
B ⇒A. Create an interval for each vertex on the spine of the caterpil-
lar, such that each interval intersects its the intervals for its neighbors on
the spine and no others. This leaves part of each interval intersecting no
other. Place small intervals for the leaf neighbors of each vertex x of the
spine in the “displayed” area of the interval for x.
C ⇒B. A longest path P contains an endpoint of every edge. If some
edge is missed, then there is an edge with neither endpoint on P but having
a neighbor x on P (since the tree is connected). Since P is a longest path, P
continues at least two edges in each direction from x. Now the tree contains
Y, consisting of these six edges within distince 2 of x.
A ⇒C. If G contains Y but is an interval graph, then in an interval
representation of G the intervals for the leaves of Y are pairwise disjoint.
Name the leaves x, y, z in the order of the corresponding intervals, from
left to right. The union of the intervals for the x, z-path in G must cover
the gap between the intervals for x and z in the representation. Since this
gap contains the interval for y, we obtain a contradiction, because y has no
neighbor on this path.
8.1.26. Every interval graph is a chordal graph and is the complement of
a comparability graph. If it is not a chordal graph, then it has a chordless
cycle. A chordless cycle has no interval representation, because the two
paths along the cycle between the vertices corresponding to the leftmost
and rightmost intervals among these vertices must occupy all the space
between them on the line, which produces chords between the two paths
when the intersections are taken. Hence the full graph has no interval
representation.
Given an interval representation of a graph G, orienting G by x →y
if the interval for x is completely to the right of the interval for y expresses
G as a comparability graph.
8.1.27. A graph G has an interval representation if and only if the clique-
vertex incidence matrix of G has the consecutive 1s property.
Necessity. From an interval representation, we obtain a natural or-
dering of the maximal cliques. By the Helly property (Exercise 8.1.24) the
intervals corresponding to the vertices of a maximal clique have a common
point. These points are different for distinct maximal cliques, because the
interval for a vertex nonadjacent to some vertex of a maximal clique must
be disjoint from the interval for that vertex. Therefore, we can place the
cliques in a linear order by the order of the chosen points. Using this or-
dering on the clique-vertex incidence matrix exhibits the consecutive 1s
property, because the interval for a vertex extends from the ﬁrst chosen
point for a clique containing it to the last. The vertex belongs to all max-
imal cliques whose chosen cliques are between these, and it belongs to no
other maximal cliques, since intervals have no gaps.
Sufﬁciency.
Let M be the clique-vertex incidence matrix of G, and
suppose that M has the consecutive 1s property. We construct an interval
representation. Permute the rows of M so the 1s are consecutive in the
columns. On a line, select points in order left to right corresponding to the
rows of M. For each column of M (vertex of G), specify an interval from
the point for the ﬁrst 1 in it to the point for the last 1 in it. This deﬁnes
one interval for each vertex because the 1s are consecutive. It yields an
interval representation of G because vertices are adjacent if and only if
there is a maximal clique that contains both of them.
8.1.28. A graph is an interval graph if and only if it has a vertex ordering
v1, . . . , vn such that the neighborhood of each vk among the lower-indexed ver-
tices is a terminal segment vi, . . . , vk−1. Given an interval representation f ,
index the vertices in order of the right endpoints of the corresponding inter-
vals. If vk ↔vi with i < k, then f (vk) extends as far to the left and the right
endpoint of f (vi), so it contains the right endpoints of f (vi), . . . , f (vk−1) and
is adjacent to all those vertices.
8.1.29. Interval graphs have no asteroidal triples. Consider an interval
representation for a graph G.
Suppose that G has an asteroidal triple
{x, y, z}; that is, three vertices such that connecting any two of them there
is a path avoiding the neighborhood of the third. Rename these vertices
x, y, z in the order of the corresponding intervals in the representation,
from left to right. The union of the intervals for the x, z-path in G must
cover the gap between the intervals for x and z in the representation. Since
this gap contains the interval for y, we obtain a contradiction, because y
has no neighbor on this path. (Comment: Interval graphs are precisely the
chordal graphs that have no asteroidal triples.)
8.1.30. The lying professor. The intersection graph of the professor’s pres-
ences in the library is an interval graph. The claimed sightings yield the
graph below, where dotted edges are those conﬁrmed from both sides and
therefore presumed true. The graph contains two chordless 4-cycles, DABI
and DAEC. It is not possible to turn this into an interval graph by adding
a single edge, and there is no reason to think a suspect would lie by leav-
ing out other possible suspects. Therefore the most reasonable conclusion

411
Chapter 8: Additional Topics
Section 8.1: Perfect Graphs
412
is that someone lied by trying to cast suspicion on someone else. The only
single edge that can be removed to turn this into an interval graph (by
destroying both chordless 4-cycles) is the edge due to Desmond’s claim of
seeing (“Honest”) Abe. Hence we conclude that Desmond is the probable
thief.
•
•
•
•
•
•
A
B
I
C
E
D
8.1.31. G is a unit interval graph if and only if the matrix A(G) + I has
the consecutive ones property. For necessity, take a unit interval represen-
tation and number the vertices in increasing order of left endpoint. Think
of the interval for vi as representing a loop at vi. Then the fact that all in-
tervals have the same length puts the right endpoints in the same order,
and makes the vertices adjacent to vi a consecutively-numbered sequence
including vi. In other words, with this ordering, the ones in each column of
A(G) + I appear consecutively.
If A(G) + I has the consecutive ones property, then the 1’s in each
column of A(G) are consecutive and include the diagonal. Let m be the
number of distinct rows (or columns, since A(G) + I is symmetric) of G.
Construct a unit interval representation f by induction on m, using copies
of m distinct intervals. If k columns are the same as the ﬁrst, delete vertices
v1, . . . , vk. The remaining graph has the consecutivity property and m −1
distinct rows, so by induction it has a unit representation. If the highest-
indexed vertex adjacent to v1, . . . , vk is the jth type of row in A(G) + I,
assign an interval to v1, . . . , vk that meets the ﬁrst j −1 classes of intervals
in f . Note that vk+1, etc., also are adjacent to that high-indexed vertex, by
the consecutivity property in A(G) + I.
8.1.32. (+) Prove that G is a proper interval graph (representable by in-
tervals such that none properly contains another) if and only if the clique-
vertex incidence matrix of G has the consecutive 1s property for both rows
and columns. (Fishburn [1985]
8.1.33. Every P4-free graph is a Meyniel graph. Let C be an odd cycle of
length at least 5 in a P4-free graph. Deleting one endpoint of the chord if
C has one chord (or deleting an arbitrary vertex if C has no chord) leaves
an induced path with at least four vertices. This cannot occur in a P4-free
graph, so C has at least two chords.
8.1.34. Every odd cycle of length at least 5 in a chordal graph has two
noncrossing chords. Since the graph is chordal, such a cycle C has a chord
xy. This chord forms a cycle C′ of length at least 4 with one of the x, y-
paths along C. A chord of C′ is also a chord of C, and its endpoints are on
one of the x, y-paths in C, so the two chords are noncrossing.
8.1.35. If C is an odd cycle in a graph with no induced odd cycle, then
V (C) has three pairwise-adjacent vertices such that paths joining them in
C all have odd length. We use induction on the length of C; the statement
is trivial when C is a triangle. When C is longer, we know that it has a
chord xy. One of the x, y-paths along C has even length; with xy it forms
an odd cycle. By the induction hypothesis, this cycle C ′ has three has three
pairwise-adjacent vertices such that paths joining them in C ′ all have odd
length. Two of these paths are along C, and one uses the edge xy. Re-
placing xy with the other x, y-path along C in this path yields a path of
odd length, since the lengths of xy and the path replacing it are both odd.
Therefore, the triple provided by the induction hypothesis for C ′ has the
desired properties for C.
8.1.36. The conditions below are equivalent.
A) Every odd cycle of length at least 5 has a crossing pair of chords.
B) For every pair x, y ∈V (G), chordless x, y-paths are all even or all odd.
B ⇒A. Two vertices on an odd cycle C are connected by paths of
different parity along C, so by the parity condition at least one of the paths
has a chord. Applying the same argument to points separated on C by the
endpoints of such a chord yields another chord of C.
If the two chords are non-crossing, then one or both combines with
part of C to form a smaller odd cycle of length at least 5, unless C itself has
length 5. Two crossing chords in the smaller cycle would be crossing chords
in C. Hence we may assume that C has length exactly 5 and has two non-
crossing chords. Now applying the parity condition to a vertex pair on C
that does not induce one of these chords yields a third chord that crosses
at least one of the other two.
A ⇒B. Suppose that G has a vertex pair connected by chordless paths
of opposite parity. Choose the pair {x, y} and chordless x, y-paths P1 and
P2 of even and odd length so that the sum of the lengths of P1 and P2 is
as small as possible; call this “minimality”. If P1 and P2 have a common
vertex z, then z splits P1 into two paths whose lengths have the same parity
(and length at least two). Also z splits P2 into two paths of opposite parity
(and length at least two). The resulting x, z- or z, y-portions of P1 and P2

413
Chapter 8: Additional Topics
Section 8.1: Perfect Graphs
414
contradict minimality. Hence we may assume that P1 ∪P2 is a cycle C.
Since P2 cannot be a chord of P1, the length of C is odd and at least 5.
We prove that C has no crossing chords. All chords join P1 −{x, y} and
P2 −{x, y}. Let P1 and P2 have vertices x, v1, . . . , vs, y and x, w1, . . . , wt, y
in order, respectively (s is odd and t is even). Let wp and wq be the ﬁrst and
last neighbors of vk in P2 −{x, y}, if vk has any such neighbors.
Suppose ﬁrst that 2 ≤k ≤s −1, so vk partitions P1 into chordless paths
with the same parity as k. The parity of p is opposite to k, else two x, vk-
paths contradict minimality. Similarly, the parity of t + 1 −q is opposite to
k, which makes it the same as the parity of p. If q > p, then q −p is even,
else wp, vk, wq and the wp, wq-portion of P2 contradict minimality. We have
now partitioned P2 into three subpaths, of which the middle path has even
length and the two extreme paths have the same parity; this is impossible
and implies that vk belongs to no chords.
Now consider k = 1. As before, the v1, y-paths yield t + 1 −q even,
and when q > 1 the x, wq-paths yield q even. This is impossible, since
t + 1 is odd. We conclude that v1w1 is the only possible chord involving v1.
Similarly, vswt is the only possible chord involving vs. We have proved that
v1w1 and vswt are the only possible chords of C, and they do not cross; this
contradicts the hypothesis.
•
•
•
•
•
vk
wp
wq
v1
wq
x •
•
•
•
y
x
y
8.1.37. Every perfectly orderable graph is strongly perfect. Let G be a per-
fectly orderable graph and L an admissible ordering of G. I.e., G has no
induced P4 such that in L each endpoint appears before its neighbor. Let S
be the greedy stable set with respect to L, i.e., place the ﬁrst vertex of L in
S, delete its neighbors, and iterate this step with the remaining vertices.
Note that S is the set receiving color 1 under the greedy coloring for L.
We show that S meets every maximal clique. If S misses a maximal
clique Q, then each vertex of Q must be deleted from the ordering due
to having a prior neighbor that is in S. If all vertices of Q share a prior
neighbor in S, then Q is not maximal. Hence we can choose x, y ∈Q and
u, v ∈S such that u ↔x, v ↔y, but u ↮y, v ↮x. Since x ↔y and u ↮v,
these vertices induce P4; since u comes before x and v before y, they induce
an obstruction, contradicting the assumption that L is admissible.
8.1.38. The graphs below are strongly perfect. In each case, the marked
stable set intersects all maximal cliques, but strong perfection also requires
this for all induced subgraphs.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
G1
G2
For G1, an induced subgraph that omits a vertex of the central trian-
gle is bipartite. Every bipartite graph is strongly perfect, because we can
form a stable set intersecting all maximal cliques by taking one partite set
from each nontrivial component plus all isolated vertices, and the family
is hereditary. This takes care of all induced subgraphs of G1 except those
that retain the central triangle. For such a subgraph H, deleting an edge
of the triangle yields a bipartite graph H ′ in which the three central ver-
tices are in the same component. From this component of H ′, we choose
the partite set containing only one vertex of the triangle in H; from others
we take either partite set. The resulting set is stable in H ′ and intersects
all maximal cliques in H ′, and it has the same properties in H.
For G2, suppose that some induced subgraph H has a maximal clique
Q avoiding the marked stable set S. This requires H to omit a vertex of S
on a triangle. We may assume that Q is the lower horizontal edge. Now
a “rotation” of S around the triangles intersects all maximal cliques in H
unless H omits both of the top vertices. Now H ⊆P4+ P2, but every disjoint
union of paths has the desired property.
The graphs above are not perfectly orderable.
A perfectly orderable
graph has an orientation (associated with a perfect ordering) such that no
induced P4 has its pendant edges oriented outward. We show that these
graphs have no such orientation; suppose that one exists.
For G1, two of the cut-edges must be oriented in toward the trian-
gle. Let yz be the oriented edge joining them, with xy being the entering
cut-edge at its tail. The edges in a matching of size 3 on the 6-cycle con-
taining z must be consistently oriented along the cycle, but one choice of
this orientation conﬂicts with xy, and the other choice conﬂicts with yz.
For G2, in the top half of the drawing, two of the three vertical edges
must be oriented upward to avoid completing an obstruction with the top
triangle. By symmetry, we may assume that these are the left and right
vertical edges, but now either orientation of the horizonal edge on the bot-
tom completes an obstruction with one of them.

415
Chapter 8: Additional Topics
Section 8.1: Perfect Graphs
416
8.1.39. The graphs in Exercise 8.1.38 are a Meyniel graph but are not per-
fectly orderable. The graphs have no chordless odd cycle (of length at least
5), so they vacuously satisfy the deﬁnition of a Meyniel graph. The task of
showing they are not perfectly orderable is done in Exercise 8.1.38.
The graph P5 is perfectly orderable but is not a Meyniel graph. The
graph P5 is the “house”, a 5-cycle with one chord, so the cycle does not have
the requisite two chords. There are two induces 4-vertex paths (each con-
taining one endpoint of the cycle. If the cycle is numbered v1, v2, v3, v4, v5
in order so that the chord is v1v4, then both copies of P4 have one endpoint
at v5, so the associated orientation directs that pendant edge in toward the
center, and there is no obstruction. Hence this is a perfect ordering.
8.1.40. Every chordal graph is weakly chordal. If a graph has no chord-
less cycle, then it has no chordless cycle of length at least ﬁve. Suppose
v1, . . . , vk in order induce in G a chordless cycle, meaning that G contains
an antihole on these vertices. If k = 5, then v1v3v5v2v4 is a chordless 5-cycle
in G. If k ≥6, then v1v4v2v5 is a chordless 4-cycle in G.
The graph H below is weakly chordal. Any cycle with more than four
vertices has at least three in the central clique Q and hence has a chord.
In H, we need only forbid induced Ck for k ≥6, since C5 = C5. Note that H
has 16 edges (too many for C8), of which 3 are incident to each vertex of Q
and 5 to each of the other vertices. Hence every 7-vertex subgraph has at
least 11 edges. The 6-vertex induced subgraphs of H with only 6 edges are
those where the deleted vertices are neighboring vertices of degree 2 in H
(deleting 10 edges from H), but such a subgraph of H is a 4-cycle with two
pendant edges.
H is not strongly perfect.
Proof 1. Since V (H) is covered by three disjoint cliques, α(H) ≤3.
However, each vertex appears in two maximal cliques, so three vertices
cannot meet all 7 maximal cliques.
Proof 2. There are 7 maximal cliques in H: one 4-clique and 6 edges.
In a chordless path of three edges, a stable set meeting every maximal
clique must contain at least two vertices, including at least one endpoint.
Hence if a stable set S meets every maximal clique, the paths on the left
and right force S to contain two vertices of the central clique.
•
•
•
•
•
•
•
•
8.1.41. SPGC ⇒Skew Partition Conjecture ⇒Star-Cutset Lemma. The
Skew Partition Conjecture states that no p-critical graph has a skew parti-
tion (a skew partition of G is a partition of V (G) into nonempty sets X and
Y such that G[X] is disconnected and G[Y] is disconnected).
The SPGC states that every p-critical graph is an odd cycle or the
complement of an odd cycle. Since a skew partition of G is also a skew
partition of G, we obtain the Skew Partition Conjecture from the SPGC by
showing that an odd cycle has no skew partition. A skew partition requires
X to use more than one segment along the cycle, but then the subgraph of
the complement induced by the remaining vertices is connected.
To prove that the Skew Partition Conjecture implies the Star-Cutset
Lemma, which states that no p-critical graph has a star-cutset, it sufﬁces
to show that a graph with a star-cutset has a skew partition. If C is a star-
cutset in G, let X = V (G) −C and Y = C. Now G[X] and G[Y] are both
disconnected, since the dominating vertex in C becomes an isolated] vertex
in G[Y].
8.1.42. The graph below is 3, 3-partitionable. Due to the horizontal sym-
metry through the vertical axis, we need only check six classes of vertices
to show that each V (G −x) partitions into three 3-cliques and into three
stable 3-sets. This is easy but tedious and seems to require a picture for
each vertex.
Alternatively, by Theorem 8.1.39, since α(G) = ω(G) = 3, it sufﬁces
to show that (1) each vertex belongs to three 3-cliques and to 3 stable 3-
sets, and (2) G has 10 3-cliques and 10 stable 3-sets, paired so that each
intersects every set of the other type except its mate. We show this giving
a matrix that lists the 3-cliques and stable 3-sets in the rows and columns
and has the elements of Qi ∩Sj as the entries. Each vertex appears in
three of the row labels and three of the column labels. However, the matrix
does not contain a proof that there are no other cliques or stable sets of
size 3. Curiously, the maximum cliques and stable sets are the same as in
C3
10 except for a switch of membership in two cliques and two stable sets,
underlined below.
•
•
•
•
•
•
•
•
•
•
0
1
2
3
4
5
6
7
8
9


369
470
925
816
703
492
581
036
147
258
012
∅
0
2
1
0
2
1
0
1
2
123
3
∅
2
1
3
2
1
3
1
2
834
3
4
∅
8
3
4
8
3
4
8
345
3
4
5
∅
3
4
5
3
4
5
456
6
4
5
6
∅
4
5
6
4
5
567
6
7
5
6
7
∅
5
6
7
5
672
6
7
2
6
7
2
∅
6
7
2
789
9
7
9
8
7
9
8
∅
7
8
890
9
0
9
8
0
9
8
0
∅
8
901
9
0
9
1
0
9
1
0
1
∅



417
Chapter 8: Additional Topics
Section 8.1: Perfect Graphs
418
8.1.43. If x and v are nonadjacent vertices in a partitionable graph G, then
every maximum clique containing x consists of one vertex from each stable
set that is the mate of a clique containing v. (The complementary assertion
is that if x and v are adjacent vertices, then every maximum stable set
containing x consists of one vertex from each clique that is the mate of a
stable set containing v.)
By Theorem 8.1.41, the unique minimum coloring of G −v consists of
the ω(G) stable sets that are mates of the maximum cliques containing v.
Since x and v are nonadjacent, a maximum clique containing x omits v and
hence must contain exactly one vertex from each stable set in this coloring.
8.1.44. No p-critical graph has antitwins. Antitwins are a pair of vertices
such that every vertex outside them is adjacent to exactly one of them.
Consider a p-critical graph G, and let ω = ω(G) and α = α(G).
We ﬁrst prove that a p-critical graph with antitwins {x, y} has a clique
of size ω −1 in N(x) that doesn’t extend into N(y). Recall that ω(G −S) =
ω(G) for any stable set S in a p-critical G (reminder of proof - since G −S
is perfect, smaller clique-number would give a smaller coloring, extending
to an ω-coloring of G by replacing S). Since G is partitionable, G −x has a
unique coloring by ω stable sets of size α; let S be the stable set containing
y in this coloring, and let Q be an ω-clique in G −S. Since G −x −S is
ω −1-colorable (S is a color in the ω-coloring of G −x), Q must contain x.
Since G −x −S has no ω-clique, Q′ = Q −x ⊂N(x) is the desired clique.
Reversing the roles of x and y yields a similar ω −1-clique in N(y).
Since the complement of a p-critical graph is p-critical, we also can apply
the same argument to obtain α −1-cliques in NG(x) and NG(y) that trans-
lates into the desired α −1-stable sets in N(y) and N(x). Let S′ be the
resulting stable set of size α −1 in N(y) that doesn’t extend in N(x)∪N(y).
Choose u to be the vertex of Q′ with the minimum number of neigh-
bors in S′; u must have at least one neighbor v in S′, else S′ extends to u.
Similarly, v must have a non-neighbor z in Q′. Since v ∈N(u) −N(z) and
z has at least as many neighbors as u in S′, z must have a neighbor w in S′
that is not adjacent to u. Now y, v, u, z, w induce a chordless 5-cycle in G.
This misses x, so G is not p-critical. (Note: For the special non-circulant
partitionable graph pictured in the text, which is not p-critical, the top and
bottom vertices are antitwins.)
8.1.45. Stable sets and even pairs in partitionable graphs.
a) If S1, S2 are maximum stable sets in a partitionable graph G, then
G[S1△S2] is connected. Let S = S1△S2. Let R1 be the vertex set of a compo-
nent of G[S], and let R2 = S −R1. The sets T1 = (S1 −R1) ∪(S2 −R2) and
T2 = (S1 −R2) ∪(S2 −R1) are stable sets with the same union and inter-
section as S1 and S2 (see ﬁgure). Hence |T1| + |T2| = 2α(G), which implies
that |T1| = |T2| = α(G) since each has size at most α(G).
Since the rows of the incidence matrix between maximum stable sets
and vertices are linearly independent, we cannot have two pairs of stable
sets with the same union and intersection. Either T1 = S1 and T2 = S2,
which yields the contradiction R1 = ∅, or T1 = S2 and T2 = S1, in which
case R1 = S and G[S] is connected.
•
•
•
•
S1
R1
R2
S2
R1
R2
b) No partitionable graph (and hence no p-critical graph) has an even
pair. Let x, y be any two vertices in a partitionable graph G. Let S be a
maximum stable set containing x in G −y, and let T be a maximum stable
set containing y in G −x. Let H = G[S△T ]. By part (a), H is connected.
Since S and T are stable sets, H is bipartite, with partite sets S −T and
T −S. By construction, x ∈S −T and y ∈T −S, so every x, y-path in H
has odd length. Since H is an induced subgraph of G, a shortest x, y-path
in H is a chordless x, y-path in G. Hence x, y is not an even pair in G.
8.1.46. If G is partitionable, and S1, S2 are stable sets in the optimal color-
ing of G −x, then G[S1 ∪S2 ∪{x}] is 2-connected. Since S1, S2 are maximal,
x is adjacent to a vertex of each. Since S1, S2 are disjoint, S1 ⊕S2 = S1 ∪S2.
Thus part (a) of the preceding problem implies that H = G S1∪S2∪x is con-
nected and that x cannot be a cut-vertex of H. If H has a cut-vertex, we
may assume it is s ∈S1. Let G1 be a component of H −s not containing x,
and let G2 be the rest of H −s, with Vi = V (Gi).
Recall (*): whenever v, x are nonadjacent vertices of a partitionable
graph G, any maximum clique containing v omits x and therefore consists
of one vertex from each stable set in the unique minimum coloring of G −x.
Since x has no neighbor in V1, we can apply (*) to any v ∈V1. I.e., each
clique in 2(G −x) that contains a vertex of G1 must contain exactly one
vertex of each of S1, S2. Both these vertices must be in G1, else we introduce
an edge between G1 and G2. Thus V1 has an equal number of vertices from
S1 and S2, both equal to the number of cliques in 2(G −x) that meet G1.
Choose u ∈S2 ∩V1. To any clique Q of 2(G −u), we can apply (*) again
to guarantee that Q contains one vertex each of S1, S2. In particular, for
each v ∈S1 ∩V1, there is a clique of 2(G −u) containing it, and this yields
a vertex v′ ∈S2 ∩V1 −u adjacent to it. Since S1 is stable, these cliques

419
Chapter 8: Additional Topics
Section 8.1: Perfect Graphs
420
of 2(G −u) are disjoint, and so the vertices {v′} are distinct. This implies
|S1 ∩V1| ≤|S2 ∩V1 −u| < |S2 ∩V1|, contradicting the result of the previous
paragraph.
8.1.47. The graph G below is a circular-arc graph but not a circle graph.
To represent G as a circular-arc graph, we let the arcs for the inner cycle
and the outer cycle in the drawing each cover the circle. More precisely,
consider a circle of circumference 9, with points on the circle described by
numbers modulo 9. Assign arcs as in the middle table below to form a
circular-arc representation.
•
•
•
ab
c
•
•
•
•
•
•
u
v
w
x
y
z
a: [0, 3]
b: [3, 6]
c: [6, 0]
u: [1, 2]
w: [4, 5]
y: [7, 8]
v: [2, 4]
x: [5, 7]
z: [8, 1]
a
z
x
b
c
x
v
a
b
v
z
c
To show that G is not a circle graph, suppose that G has an intersection
representation by chords in a circle. The chords for {a, b, c} are pairwise
intersecting, so their endpoints occur in the order a, b, c, a, b, c on the circle.
The chord for v cannot cross the chord for c, so to intersect the chords for
a and b the endpoints for v must precede an a and follow the subsequent b,
yielding a, b, c, v, a, b, v, c. We make the analogous argument for x and for
z. However, {v, x, z} is independent, so the endpoints of chords for any two
of them cannot alternate. This means that when we add the endpoints for x
and z to satisfy the constraints, we must obtain a, z, x, b, c, x, v, a, b, v, z, c,
as shown above. Now we cannot add the chord for u to cross the chords for
{z, a, v} without crossing the chord for b or c.
The graph H below is a circle graph but not a circular-arc graph. A
circle representation is shown in the middle below.
•
•
•
a
b
c
•
•
•
x
y
z
•
v
b
y
z
c
z
v
c
b
a
v
x
a
x
y
To show that H has no circular-arc representation, note that the arcs
for {a, b, c} must be pairwise disjoint. Since the arc for v must intersect all
three, it must contain one of them completely; by symmetry, we may let it
be a. Now the arc for x cannot intersect the arc for a without intersecting
the arc for v.
8.1.48. Paw-free graphs satisfy the SPGC. The “paw” is the graph obtained
from the claw K1,3 by adding an edge joining two leaves. We must prove
that every paw-free graph having no odd hole and no odd antihole is per-
fect. It sufﬁces to prove that every paw-free graph G having no odd hole is
a Meyniel graph, meaning that odd cycles of length at least 5 have at least
two chords. Let C be an odd cycle of length at least 5 in G. Since G has no
odd hole, C has a chord xy. This forms two cycles with the x, y-paths on C;
one is odd. If the odd one has length at least 5, we obtain another chord
of C. Otherwise, it has length 3. Since the subgraph induced by these
three vertices and the next vertex on C must not be a paw, it contains an
additional chord of C.
8.1.49. Sets S and T of sizes a + 2 and w + 2 that intersect every maximum
clique and every maximum stable set, respectively, in the cycle-power C w−1
aw+1.
(This completes the proof of Theorem 8.1.51.)
Let S = {vaw, v1, vw, vw+2} ∪{viw+1: 2 ≤i ≤a −1}.
The maximum
cliques in Cw−1
aw+1 are the sets of w vertices with consecutive indices. The
ﬁrst four indices listed for S are separated successively by 2, w −1, and 2,
respectively. The next step is w −1, and the subsequent gaps are w until
the ﬁnal step of w −1 that returns to the beginning. Since the set never
skips as many as w consecutive indices, it intersects all maximum cliques.
Let T = {v(a−1)w+1, vaw, v1, vw} ∪{vw+i: 2 ≤i ≤w −1}. The maximum
stable sets in Cw−1
aw+1 are the sets of a vertices whose indices increase suc-
cessively by w (cyclically) starting from some point. In particular, a set of
w successive vertices intersects all but one maximum stable set. The set
T has w −1 of w successive indices from w through 2w −1. The stable
set skipping this interval starts at v2w and contains vaw, so it intersects
T . The remaining stable sets are those containing vw+1. These all contain
v1 except the one that starts at w + 1, but this stable set intersects T at
(a −1)w + 1.
8.1.50. SPGC for circle graphs.
a) If x is a vertex in a partitionable graph G, then G −N[x] is connected.
If G −N[x] is disconnected, then N[x] is a star-cutset. It thus sufﬁces to
show that partitionable graphs have no star-cutsets. Since χ(G −x) = ω
for each x ∈V (G), every proper induced subgraph of G is ω(G)-colorable.

421
Chapter 8: Additional Topics
Section 8.2: Matroids
422
Because G −x has a partition into α(G) disjoint maximum cliques, a sta-
ble set intersecting all maximum cliques must be a maximum stable set.
However, every maximum stable set misses its mate, so no stable set inter-
sects every maximum clique. These are the hypotheses of the Star-Cutset
Lemma Lemma, so G has no star-cutset.
b) Partitionable circle graphs are claw-free.
Three pairwise-disjoint
chords Y, X, Z of a circle can be intersected by a single chord W only if the
endpoints occur as shown below. Suppose that a circle graph G has a claw
induced by central vertex w and stable set {y, x, z}. If x is the vertex cor-
responding to the middle chord among {y, x, z} in the circle representation
of G, we have G −N[x] disconnected, since every y, z-path in G must con-
tain a vertex whose chord intersect the chord for x in the representation.
By part (a), this cannot occur in a partitionable circle graph.
c) Circle graphs satisfy the SPGC. By part (b), partitionable circle
graphs are claw-free.
By Corollary 8.1.53, claw-free graphs satisfy the
SPGC. Thus every p-critical circle graph is an odd hole or an odd antihole,
and circle graphs satisfy the SPGC.
W
X
Y
Z
8.2. MATROIDS
8.2.1. The family of independent vertex sets of a graph need not be the
family of independent sets of a matroid. In the star K1,n, let the leaves have
weight 1 and the remaining vertex have weight 2. The resulting maximum
weighted stable set has weight n, but the greedy algorithm stops with a
stable set of weight 2.
8.2.2. The family of stable sets of a graph G is the family of independent
sets of a matroid on its vertex set if and only if every component of G is a
complete graph. If some component of G is not complete, then G has P3 as
an induced subgraph. The stable set of size 1 consisting of the middle of
this path cannot be augmented from the stable set of size 2 consisting of
its endpoints, so the augmentation inequality fails.
Conversely, if every component is complete, then the hereditary sys-
tem is a partition matroid, with the stable sets being those sets of vertices
having at most one vertex in each component.
8.2.3. Every partition matroid is a transversal matroid A partition matroid
on E is deﬁned by sets E1, . . . , Ek partitioning E such that a subset of E is
independent if and only if it contains at most one element of each Ei. This
is the same as the transversal matroid on E arising from the E, [k]-bigraph
whose ith component is the star with center i and leaf set Ei, for 1 ≤i ≤k.
8.2.4. Greedy algorithm with arbitrary real weights. Since ∅is always an
independent set and has weight 0, a maximum weighted independent set
contains no elements of negative weight. Hence it sufﬁces to run the usual
greedy algorithm on the restriction of the matroid obtained by discarding
the elements of negative weight. This is accomplished simply by stopping
the greedy algorithm when all the elements of nonnegative weight have
been considered.
8.2.5. The family of matchings in a graph G is the family of independent
sets of a matroid on E(G) if and only if every component of G is a star or a
triangle. The family of matchings in G is the family of stable sets in L(G).
By Exercise 8.2.2, the characterization is that every component of L(G) is
a complete graph. A component of L(G) is a complete graph if and only if
the corresponding component of G is a star or a triangle.
8.2.6. The cycle matroid of a multigraph G is a uniform matroid if and only
if G is a forest, a cycle, a multiple edge, or a collection of loops (plus possible
isolated vertices in each case). The uniform matroid Uk,n is a cycle matroid
if and only if k ∈{0, 1, n −1, n}. With G having n edges, the cycle ma-
troids in the cases listed are the uniform matroids Un,n, Un−1,n, U1,n, U0,n,
respectively.
For the converse, note that a matroid is non-uniform if and only if it has
a dependent set and an independent set of the same size. Any multigraph
G that is not a forest or a cycle (plus isolated vertices) has a cycle that
does not contain all the edges. The edge set of a smallest cycle C in G is
a circuit in M(G). If its size exceeds 2, then deleting an edge of C and
replacing it by any edge not in C cannot yield another cycle; hence it yields
an independent set of the same size as C in the cycle matroid.
8.2.7. The cycle matroid of a multigraph G is a partition matroid if and
only if the blocks of G are sets of parallel edges. Every partition matroid is
graphic. A matroid M is a partition matroid with blocks E1, . . . , Ek if and
only if the circuits of M are all sets of size 2 contained in single blocks.

423
Chapter 8: Additional Topics
Section 8.2: Matroids
424
This is also the cycle matroid of the graph whose blocks are sets of parallel
edges of sizes |E1| , . . . , |Ek|.
In order for M(G) to be a partition matroid, the circuits must have size
2. Hence G has no loops and no cycles of length greater than 2. The latter
occurs if and only if the simple graph obtained by discarding extra copies
of multiple edges is a forest. Hence G must be as claimed.
8.2.8. Vectorial matroids satisfy the induced circuit property: adding an
element to a linearly independent set of vectors creates at most one minimal
dependent set. Let I be an independent set of vectors in a vector space,
and let e be a vector. Let C1 and C2 be minimal dependent sets of vectors
in I ∪{e}. The deﬁnition of dependence for sets of vectors is the existence
of an equation of dependence.
The coefﬁcent on e in such an equation
of dependence is nonzero, since I is independent; indeed, since these are
minimal dependent sets, all the coefﬁcients are nonzero. Hence in each
equation we can solve for e expressing e as a linear combination of C1 −
{e} and of C2 −{e}. Setting these expressions equal yields an equation of
dependence for I if C1 and C2 are different, since the coefﬁcients in the
original equations are nonzero. Hence C1 = C2, and I ∪{e} contains only
one minimal dependent set.
8.2.9. Circuits of a partition matroid. By deﬁnition, sets of elements are
independent if they have at most one element from each block of the par-
tition. Hence a set is a circuit if and only if it consists of two elements
from one block of the partition. If distinct circuits have a common element
e, then they have the form {e, x} and {e, y}, where e, x, and y all lie in a
common block. Hence {x, y} is also a circuit, and weak elimination holds.
8.2.10. Direct veriﬁcation of submodularity for rank functions of cycle ma-
troids.
Given a graph G, let k(X) denote the number of components of
the spanning subgraph G X with edge set X. Let H be the bipartite graph
whose partite sets are the sets of components in G X and GY, with vertices
adjacent if the corresponding subgraphs share a vertex.
a) H has k(X) + k(Y) vertices and k(X ∪Y) components, and k(X ∩
Y) ≥e(H). By construction, the sizes of the partite sets are k(X) and k(Y).
Components of G X and GY that share a vertex lie within a single component
in G X∪Y. Hence k(X ∪Y) is the number of components of H.
Every edge of H has the form CXCY, where CX and CY are components
of G X and GY, respectively.
Let S = V (CX) ∩V (CY); since CXCY is an
edge, S ̸= ∅. Every vertex outside S is outside V (CX) or outside V (CY).
Hence X ∩Y has no edge leaving S, and G X∩Y[S] is a nonempty union of
components of G X∩Y. Thus k(X ∩Y) ≥e(H), since we generate at least one
component of G X∩Y for each edge of H (maybe more than one, such as when
G is a 4-cycle and X and Y decompose G into two copies of P3).
b) For the cycle matroid M(G), the submodularity property r(X ∩Y) +
r(X ∪Y) ≤r(X) + r(Y) holds. In the cycle matroid, r(X) = n(G) −k(X), so
it sufﬁces to show that k is supermodular.
A graph with n vertices and c components has at least n −c edges.
Since H has k(X) + k(Y) vertices and k(X ∪Y) components, we conclude
that e(H) ≥k(X) + k(Y) −k(X ∪Y). By part (a), also k(X ∩Y) ≥e(H).
Hence k(X ∩Y) + k(X ∪Y) ≥k(X) + k(Y), as desired.
8.2.11. Submodularity of rank functions of transversal matroids, using
matching theory. A transversal matroid on a set E is induced by a family
A1, . . . , Am of subsets of E by letting the independent sets be the systems
of distinct representatives of subfamilies. Equivalently, the independent
sets are the subsets of E that can be saturated by matchings in the E, [m]-
bigraph G. that is the incidence bigraph of the family.
By deﬁnition, then, the rank of a set X ⊆E is the maximum size
of a matching in the subgraph G[X ∪[m]], which we denote by G X. By
the K¨onig–Egerv´ary Theorem, α′(G X) equals the minimum size of a vertex
cover in G X. For S ⊆X, the smallest vertex cover Q such that S = X −Q
is (X −S) ∪N(S).
Hence the minimum size of a vertex cover of G X is
|X| −maxS⊆X(|S| −|N(S)|). The quantity |S| −|N(S)| is the deﬁciency of S,
denoted def(S), and the fact that α′(G X) = |X| −maxS⊆X def(S) is due to
Ore (Exercise 3.1.32).
Now consider subsets X, Y ⊆E. For the submodularity inequality,
we must bound r(X ∪Y) + r(X ∩Y) by r(X) + r(Y).
For this we begin
by studying the neighborhoods of the union and intersection of two sets
S ⊆X and T ⊆Y. The key to the inequality is that for S, T ⊆E, we
have N(S ∩T ) ⊆N(S) ∩N(T ) (equality need not hold!). Also N(S ∪T ) =
N(S) ∪N(T ). Thus
|N(S ∪T )| + |N(S ∩T )| ≤|N(S) ∪N(T )| + |N(S) ∩N(T )| = |N(S)| + |N(T )|
Since |S ∪T | + |S ∩T |) = |S| + |T |, this yields def(S ∪T ) + def(S ∩T ) ≥
def(S) + def(T ). Furthermore, the deﬁciency of a set S is the same in each
G X such that X ⊇S. Therefore, if we let S and T be subsets of X and Y
with maximum deﬁciency in G X and GY, we obtain
r(X) + r(Y) = |X| −def(S) + |Y| −def(T ) ≥|X| + |Y| −def(S ∪T ) −def(S ∩T )
≥|X ∪Y| −
max
U⊆(X∪Y) def(U) + |X ∩Y| −
max
V ⊆(X∩Y) def(V ),
using in the last step that S ∪T and S ∩T are particular subsets of X ∪Y
and X ∩Y, respectively. Thus the submodularity inequality holds.
8.2.12. For a digraph D with distinguished source s and sink t, and r(X)
deﬁned for X ⊆V (D) −{s, t} to be the number of edges from s ∪X to X ∪t,

425
Chapter 8: Additional Topics
Section 8.2: Matroids
426
the function r is submodular. When we view D as a network by giving
each edge capacity 1, the statement of submodularity for r is precisely the
statement of part (a) of Exercise 4.3.12.
8.2.13. For an element x in a hereditary system, the following properties
are equivalent and characterize loops. The deﬁnition of a loop (an element
comprising a circuit of size 1) is statement C.
A) r(x) = 0.
D) x belongs to no base.
B) x ∈σ(∅).
E) Every set containing x is dependent.
C) x is a circuit.
F) x belongs to the span of every X ⊆E.
F ⇒B. If x ∈σ(X) for all X ⊆E, then x ∈σ(∅).
B ⇒C. If x ∈σ(∅), then x completes a circuit with ∅; hence {x} is a
circuit.
C ⇒A. The rank of a circuit C is |C| −1.
A ⇒D. Every subset of every base is independent. If x belongs to a
base, then r({x}) = 1.
D ⇒E. If x belongs to an independent set, then it can be augmented
to a maximal independent set (a base) containing x.
E ⇒F. Let Y be a maximal independent subset of X. If every set
containing x is dependent, then Y ∪x contains a circuit C, which must
contain x since Y is independent. Hence x completes a circuit with a subset
of X, so x ∈σ(X).
8.2.14. The following characterizations of parallel elements in a hereditary
system are equivalent, assuming that x ̸= y and neither is a loop. Property
B is the deﬁnition of parallel elements, given that neither is a loop.
A) r({x, y}) = 1.
B) {x, y} ∈C.
C) x ∈σ(y), y ∈σ(x), r(x) = r(y) = 1.
B ⇔A. The rank of a circuit C is |C| −1, so B ⇒A. Conversely, if
r({x, y}) < 2 with x and y being non-loops, then {x, y} is a minimal depen-
dent set.
B ⇔C. Since neither is a loop, r(x) = r(y) = 1, and each element by
itself forms an independent set. Now {x, y} ∈C is equivalent to x ∈σ({y})
and y ∈σ({x}), by the deﬁnition of the span function.
If x and y are parallel elements in a matroid and x ∈σ(X), then y ∈
σ(X). From x ∈σ(X), we have x ∈X or Y ∪{x} ∈C, where Y ⊆X. If
x ∈X, then y ∈σ(X), since y completes a circuit with x. If Y ∪{x} ∈C
and {x, y} ∈C, then the weak elimination property guarantees a circuit in
Y ∪{y}, and hence y ∈σ(X).
8.2.15. If r(X) = r(X ∩Y) in a matroid, then r(X ∪Y) = r(Y).
Proof 1 (submodularity). Submodularity yields r(X ∪Y) + r(X ∩Y) ≤
r(X) + r(Y). Cancelling r(X) = r(X ∩Y) leaves r(X ∪Y) ≤r(Y), but r(X ∪
Y) ≥r(Y) always, so equality holds.
Proof 2 (span function and absorption). The hypothesis implies X ⊆
σ(X ∩Y), which in turn is contained in σ(Y) since σ is order-preserving.
Now X ⊆σ(Y) and the absorption property yield r(X ∪Y) = r(Y).
8.2.16. If M is a hereditary system that satisﬁes the base exchange property
(B), then the greedy algorithm generates a maximum-weighted base when-
ever the elements have nonnegative weights. This is actually more direct
using the dual version of the base exchange property (Lemma 8.2.33): if
B1, B2 ∈B and e ∈B1−B2, then there exists f ∈B2−B1 such that B2+e−f
is a base. This follows from the induced circuit property in Lemma 8.2.33,
and the induced circuit property follows directly from the base exchange
property in Exercise 8.2.17.
Since the weights are nonnegative, the greedy algorithm generates a
base.
Let B be a base generated by the greedy algorithm.
Among the
bases of maximum weight, let B∗be one having largest intersection with
B. If B∗̸= B, then there exists an element e ∈B −B∗, since the bases
form an antichain. Let e be a heaviest element of B −B∗. By the dual
base exchange property, there exists f ∈B∗−B such that B∗+ e −f is a
base. Since B∗is optimal, w( f ) ≥w(e). Since the greedy algorithm chose e
after choosing the heavier elements of B, even though f was also avaiable,
w(e) ≥w( f ). Hence w(e) = w( f ), and B∗+ e −f is an optimal base having
larger intersection with B than B∗does. Hence in fact B = B∗.
8.2.17. Exercises in axiomatics.
a) In a hereditary system, the submodularity property implies the weak
absorption property. Applying submodularity to X + e and X + f yields
r(X + e + f ) + r(X) ≤r(X + e) + r(X + f ). If r(X + e) = r(X + f ) = r(X),
then monotonicity of r implies r(X + e + f ) = r(X).
b) In a hereditary system, the strong absorption property implies the
submodularity property. We use induction on k = |X△Y|. If r((X ∩Y)+e) =
r(X ∩Y) for all e ∈X△Y, then r(X ∪Y) = r(X ∩Y), by strong absorption.
Monotonicity of r then implies r(X ∩Y) +r(X ∪Y) ≤r(X) +r(Y). This case
includes the basis step k = 0.
Hence when k > 0 we may select e ∈X −Y (by symmetry) such that
r((X ∩Y) + e) = r(X ∩Y) + 1. Let Y ′ = Y + e. By the induction hypothesis,
r(X ∩Y ′)+r(X ∪Y ′) ≤r(X)+r(Y ′). The left side equals r(X ∩Y)+1+r(X ∪Y)
and the right side is bounded by r(X)+r(Y)+1, so subtracting 1 from both
sides yields the desired inequality.
c) The base exchange property (B) implies the induced circuit property
(J). Proof 1 (contradiction). For I ∈I, if I + e contains distinct circuits
C1, C2, then each consists of e plus a subset of I. Since C1 ̸= C2, we may

427
Chapter 8: Additional Topics
Section 8.2: Matroids
428
choose a ∈C1 −C2. Both C1 −a and (C1 ∪C2)−e are independent; augment
them to bases B1 and B2, respectively.
Since C1 −e ⊆B2, every element of B1 −B2 except e is outside C1 −a.
Using (B), delete such elements from B1, replacing them with elements of
B2 −B1. This transforms B1 to a base B such that the only element of
B −B2 is e, and still C1 −a ⊆B and a /∈B.
Since (B) implies that bases have the same size, also |B2 −B| = 1.
Since a ∈B2 −B, the rest of B2, including C2 −e, is in B. However, e ∈B,
so C2 ∈B, contradicting that B is a base.
Proof 2 (extremality). Since every independent set lies in a base, it
sufﬁces to prove for B ∈B that B + e contains exactly one circuit. Let A be
a minimal subset of B containing an element of each circuit in B + e. Thus
(B −A) + e ∈I, but (B −A) + e + a /∈I for all a ∈A.
Let B′ be a base containing (B −A) + e; note that B −B′ = A. If B′ −B
has an element b other than e, then (B) yields an element a ∈B −B′ such
that B′ −b + a ∈B, but this contradicts the dependence of (B −A) + e + a.
Hence B′ −B = {e}, and therefore |A| = 1. Since every minimal transversal
of the circuits in B + e has one element, there is only one such circuit.
d) The uniqueness of induced circuits (J) implies the weak elimination
property (C). Suppose that C1, C2 ∈C and e ∈(C1capC2). If (C1 ∪C2) −e is
independent, then adding e creates a unique circuit, which contradicts the
distinctness of C1 and C2.
e) In a hereditary system, uniqueness of induced circuits (J) implies
the augmentation property (I). Choose I1, I2 ∈I with |I2| > |I1|. We obtain
the augmentation by induction on |I1 −I2| = k. If I1 ⊆I2, any element of
I2 −I1 works; this is the basis step k = 0.
For k > 0, select e ∈I1 −I2. If I2 + e ∈I, then the induction hypothesis
allows us to augment I1 from I2 + e. Hence we may assume that I2 + e
contains a unique circuit C. Choose f ∈C ∩I2, and let I ′ = I2 + e −f ; we
have I ′ ∈I. Now
I ′ = |I2| and
I1 −I ′ = k−1, so the induction hypothesis
guarantees an augmentation of I1 from I ′. Any such element is also in I2.
8.2.18. A hereditary system is a matroid if and only if it satisﬁes the fol-
lowing: If I1, I2 ∈I with |I2| > |I1| and |I1 −I2| = 1, then I1 + e ∈I for
some e ∈I2 −I1. This is a weaker form of the augmentation property, so
it sufﬁces to show that this implies the augmentation property. The stated
property provides the basis for induction on k = |I1 −I2|. If k > 1, select
x ∈I1 −I2, and let I = I1 −x. The induction hypothesis yields e1 ∈I2 −I
such that I + e1 ∈I. Also |I + e1| = |I1| < |I2| and |I + e1 −I2| = k −1, so
again the induction hypothesis yields e2 ∈I2 such that I ′ = I ∪{e1, e2} ∈I.
Since
I ′ = |I1| + 1 and I1 −I ′ = {x}, the original hypothesis (k = 1) yields
e ∈{e1, e2} ⊆I2 such that I1 + e ∈I.
8.2.19. If I is the family of independent sets of a matroid on E, and I′ is
obtained from I by deleting the sets that intersect a ﬁxed subset A of E, then
I′ is also the family of independent sets of a matroid on E. If I ∈I′, then
I ∩A = ∅, and also J ∩A = ∅for J ⊆I. Also J ∈I, since I ∈I, so J
remains in I′. Hence I′ is an ideal. Also ∅∈I′, since ∅∈I and ∅∩A = ∅.
Consider I1, I2 ∈I′ with |I2| > |I1|.
In fact also I1, I2 ∈I, since I′
is a subset of I. The augmentation property in I yields e ∈I2 such that
I1 + e ∈I. In fact, also I1 + e ∈I′, since I1 and I2 are both disjoint from A,
so I1 + e ∩A = ∅.
8.2.20. Given a matroid on E and e /∈B ∈B, let C(e, B) denote the unique
circuit in B ∪e.
a) For e /∈B, the set B −f + e is a base if and only if f belongs to
C(e, B). If f ∈C(e, B), then B −f + e contains no circuit, because C(e, B)
is the only circuit in B + e. Hence B −f + e is an independent set of size
r(E). By the uniformity property, B −f + e is a base.
If f /∈C(e, B), then B −f + e contains the circuit C(e, B) and hence is
not a base.
b) If e ∈C ∈C, then C = C(e, B) for some base B. The set C −e is
independent and hence can be augmented to a base B. This base cannot
contain e. Adding e must complete a unique circuit. It completes C, so it
completes no other, and hence C = C(e, B).
8.2.21. If B1 and B2 are bases of a matroid such that |B1△B2| = 2, then there
is a unique circuit C such that B1△B2 ⊆C ⊆B1 ∪B2. Let e1 be the element
of B1 −B2, and let e2 be the element of B2 −B1. Since B1 ∪B2 = B2 + e1,
the union contains a unique circuit, C. Since B2 is independent, e1 ∈C.
Furthermore, e2 ∈C, since B1 ∪B2 −{e2} = B1, which is independent.
8.2.22. If B1 and B2 are bases of a matroid and X1 ⊆B1, then there ex-
ists X2 ⊆B2 such that (B1 −X1) ∪X2 and (B2 −X2) ∪X1 are both bases
of M. This is easy using Exercise 8.2.24; otherwise that argument must
be generalized.
We use induction on |X1|; when X1 is empty the claim
is trivial. Otherwise, choose e ∈X1 and let X ′
1 = X1 −{e}. By Exercise
8.2.24, there exists f ∈B2 such that B1 −e + f and B2 + e −f are both
bases. Let B′
1 = B1 −e + f and B′
2 = B2 + e −f . By the induction hy-
pothesis, there exists X ′
2 such that (B′
1 −X′
1) ∪X ′
2 and (B′
2 −X′
2) ∪X ′
1 are
both bases. Now let X2 = X′
2 ∪f . This set has the desired property, since
(B1 −X1) ∪X2 = (B′
1 −X′
1) ∪X ′
2 and (B2 −X2) ∪X1 = (B′
2 −X′
2) ∪X ′
1.
8.2.23. Consider distinct bases B1 and B2 of a matroid M.
a) The B1, B2-bigraph G with e ∈B1 adjacent to f ∈B2 when B2 + e −
f ∈B has a perfect matching. It sufﬁces to verify Hall’s condition. Since
|B1| = |B2|, we may verify Hall’s Condition for either partite set.

429
Chapter 8: Additional Topics
Section 8.2: Matroids
430
Proof 1:
For S ⊆B2, suppose that |N(S)| < |S|.
This yields
|B1 −N(S)| > |B2 −S|. Both B1 −N(S) and B2 −S are independent, so
the augmentation property yields e ∈B1 −N(S) such that B2 −S + e ∈I.
Hence S must contain a member of the circuit formed by added e to B2.
This contradicts e /∈N(S), and hence |N(S)| ≥|S|.
Proof 2: We seek a transversal of {I (e): e ∈B1}, where I (e) ∪e is the
unique circuit in B2 + e if e ∈B1 −B2, and I (e) = {e} if e ∈B1 ∩B2. For
X ⊆B1, let Y = S
e∈X I (e). Since e ∈σ(I (e)), we have X ⊆σ(Y). Since
X, Y ∈I, the incorporation property yields |Y| = r(Y) = r(σ(Y)) ≥r(X) =
|X|. Hence Hall’s Condition holds.
(Comment: we can similarly establish a bijection π: B1 →B2 such
that B1 −e + π(e) ∈B for all e ∈B1.)
b) There is a bijection π: B1 →B2 such that for each e ∈B1, the set
B2−π(e)+e is a base of M. Such a bijection is given by the perfect matching
obtained in part (a). Elements of B1 ∩B2 yield isolated edges in G.
8.2.24. For any e ∈B1, there exists f ∈B2 such that B1 −e + f ∈B and
B2 −f + e ∈B. If e ∈B1 ∩B2, then let f = e. Hence we may assume
e ∈B1 −B2.
Proof 1 (transitivity of dependence). Let I (e) + e be the unique circuit
in B2 + e, so I (e) = { f ∈B2: B2 −f + e ∈B}. If B1 −e + f /∈B for all
f ∈I (e), then I (e) ⊆σ(B1 −e). Since I (e) + e is a circuit, this implies
e ∈σ(I (e)) ⊆σ(B1 −e), which is impossible since B1 is independent.
Proof 2 (cocircuits). In B2 + e there is a unique circuit C containing
e. Since B1 is a cobase, B1 + e contains a unique cocircuit C∗containing e.
Since |C ∩C∗| = 1 is forbidden, there exists another element f ∈C ∩C ∗.
Hence B2 −f + e is independent, has size |B2|, and therefore is a base.
Similarly B1 −f + e is independent in the dual, has size
B1
, and is a
cobase. Therefore B1 −e + f is a base and f is the desired element.
b) There may be no bijection π: B1 →B2 such that e and f = π(e)
satisfy part (a) for all e ∈B1. Consider the cycle matroid M(K4). Let B1
and B2 be the edge sets of two complementary 4-vertex paths. If e is a
pendant edge of B1, then e can only be matched with the central edge of B2,
since one pendant edge of B2 completes a triangle with B1−e, and the other
is not in the triangle of B2 + e. This argument applies for both pendant
edges, but they cannot both be paired with the one central edge of B2.
8.2.25. Every matroid has a fundamental set of circuits (a collection of |E|−
r(E) circuits such that Ci contains er(E)+i but no higher-indexed element).
If the elements e1, . . . , er form a base B, then addition of any other e ∈E −B
creates a unique circuit in B+e. The set of these generated by the elements
of E −B form a fundamental set of circuits.
8.2.26. If C1, . . . , Ck are distinct circuits in a matroid, with none contained
in the union of the others, and X is a set with |X| < k, then Sk
i=1 Ci −X
contains a circuit.
We use induction on k.
For k = 1 the statement is
trivial, and for k = 2 it is the statement of the weak elimination property
(if x /∈C1 ∩C2, then C1 or C2 itself is the desired circuit). For k > 2, choose
x ∈X, and let X ′ = X −{x}. By the induction hypothesis, Sk−1
i=1 Ci −X′
contains a circuit C′. The case k = 2 yields a circuit in (C′ ∪Ck) −x; this
circuit has the desired properties.
8.2.27. (+) For a hereditary system, prove that the weak elimination prop-
erty implies the strong elimination property, by induction on |C1 ∪C2|.
8.2.28. Min-max formula for maximum weighted independent set. Given
weight w(e) ∈N ∪{0} for each element e, we prove maxI∈I
P
e∈I w(e) =
min P
i r(Xi), where the minimum is taken over all chains X1 ⊆X2 ⊆· · ·
of sets in E such that each element e ∈E appears in at least w(e) sets in
the chain (sets may repeat).
Max ≤min. This inequality holds for every I and every acceptable
chain {Xi}. Independence of I implies r(Xi) ≥|I ∩Xi|. Now the appearance
of each e ∈I in at least w(e) sets of {Xi} yields P
i |I ∩Xi| ≥P
e∈I w(e).
To establish equality, let I be a maximum weighted independent set,
and deﬁne a chain by Xi = {e ∈E: w(e) ≥W + 1 −i}, where W is the
maximum weight and 1 ≤i ≤W (repetition occurs if the weights are not
consecutive integers). For this chain, each element e appears in the w(e)
largest sets; hence P |I ∩Xi| = P
e∈I w(e).
Thus it sufﬁces to prove that |I ∩Xi| = r(Xi). This holds by induction
on i, with trivial basis for X0 = ∅. Having selected I ∩Xi of maximum
weight and maximum size from the set Xi of elements with weight at least
W + 1 −i, the greedy algorithm next considers elements of weight W −i,
adding as many to I as fail to produce a circuit. Hence |I ∩Xi+1|−|I ∩Xi| =
r(Xi+1) −|I ∩Xi|, as desired.
8.2.29. If r and σ are the rank function and span function of a matroid,
then r(X) = min{|Y| : Y ⊆X and σ(Y) = σ(X)}. Let M be a matroid. Given
Y ⊆X with σ(Y) = σ(X), two applications of the incorporation property
yield r(X) = r(σ(X)) = r(σ(Y)) = r(Y) ≤|Y|. On the other hand, if Y is
a maximum independent subset of X, then σ(Y) ⊆σ(X), since σ is order-
preserving.
Now the choice of Y implies X ⊆σ(Y), and transitivity of
dependence implies σ(X) ⊆σ(Y).
8.2.30. A matroid of rank r has at least 2r closed sets. A base B in such a
matroid has size r. For each X ⊆B, the span σ(X) is closed. These closed
sets are all distinct, because their intersections with B are distinct, since
gaining an element of B in σ(X) would increase the rank.

431
Chapter 8: Additional Topics
Section 8.2: Matroids
432
8.2.31. A matroid is simple if and only if no element appears in every hy-
perplane and every set of two elements intersects some hyperplane exactly
once. If e is a loop, then e is spanned every set. Hence e belongs to every
closed set, including all hyperplanes. If e is not a loop, then augment {e} to
a base B, and let H = σ(B −e); now H is a hyperplane avoiding e.
If e and f are parallel, then {e, f } is a circuit, so a closed set contains
e if and only if it contains f . If {e, f } is independent, augment is to a base
B, and let H = σ(B −e); now H is a hyperplane containing f but not e.
8.2.32. (•) Prove that in a matroid, a set is a hypobase if and only if it is a
hyperplane.
8.2.33. A family of sets is the family of hyperplanes of some matroid if it is
an antichain and, for distinct members H1 and H2 both avoiding an element
e, there is another member H containing (H1 ∩H2) + e. A hyperplane is a
maximal set containing no base, and hence its complement is a minimal
set contained in no cobase, which by deﬁnition is a cocircuit. Hence the
hyperplanes are the complements of the cocircuits. A family of sets is the
set of cocircuits of a matroid M if and only if it is the set of circuits of a
matroid, namely M∗. Hence the characterization of families of cocircuits
is the same as the characterization of families of circuits. In particular, a
family is the set of cocircuits of some matroid if and only if it is an antichain
and, for distinct members C1 and C2 with a common element e, there is
another member contained in (C1 ∪C2) −e.
Translating this by complementation, let H1 = C1 and H2 = C2, the
condition on members H1 and H2 of the family, if they both omit e (so that
e ∈C1 ∩C2, is the existence of another member H such that H ⊆(C1 ∩
C2) −e. Thus
H ⊇(H 1 ∪H 2) −e = (H1 ∩H2) + e.
8.2.34. The closed sets of a matroid are the complements of the unions of
its cocircuits. The closed sets of a matroid are the intersections of its hy-
perplanes. The hyperplanes are the complements of the cocircuits. Since
A ∪B = A ∩B, the desired statement holds.
8.2.35. Closed sets and hyperplanes.
a) If X and Y are closed sets in a matroid M, with Y ⊆X and r(Y) =
r(X) −1, then there exists a hyperplane H in M such that Y = X ∩H. Let
Z be a maximal independent subset of Y, and let e ∈X be an element
that augments Z to a maximal independent subset of X. Augment Z + e
to a base B. Let H = σ(B −e); we claim H is the desired hyperplane.
Since Z ⊆B −e and Y = σ(Z), we have Y ⊆H. Because B ⊆H ∪X,
we have r(H ∪X) = r(M).
Applying submodularity to H and X yields
r(H ∩X) ≤r(X) −1. Since Y ⊆H ∩X, we have r(H ∩X) = r(X) −1. Since
Y is closed and has rank r(X) −1, we have H ∩X = Y.
b) If X is a closed set in a matroid M, then there exist r(M) −r(X)
distinct hyperplanes in M whose intersection is X. By induction on r(M)−k.
If r(M)−k = 1, then X is a hyperplane. If r(M)−k > 1, than take e /∈X and
Z = σ(X + e). Now r(Z) = k + 1, and by the induction hypothesis there are
r(M)−k −1 distinct hyperplanes whose intersection is Z. Since Z is closed,
part (a) guarantees an additional hyperplane H such that X = Z ∩H.
8.2.36. Properties of closed sets in a matroid.
a) The intersection of two closed sets is closed. Let X and Y be closed
sets, so σ(X) = X and σ(Y) = Y. Since σ is order-preserving, σ(X ∩Y) ⊆
σ(X) = X and σ(X ∩Y) ⊆σ(Y) = Y. Hence σ(X ∩Y) ⊆X ∩Y. Equality
holds, because σ is expansive. Hence σ(X ∩Y) = X ∩Y, and X ∩Y is closed.
b) The span of a set is the intersection of all closed sets containing it.
Consider σ(X), and let X be the intersection of all the closed sets containing
X. A closed set has the form σ(Y). If X ⊆σ(Y), then σ(X) ⊆σ 2(Y) = σ(Y),
by the order-preserving and idempotence properties of σ. Hence σ(X) is
contained in all the closed sets containing X, so σ(X) ⊆Z. On the other
hand, since σ(X) itself is a closed set containing X, also Z ⊆σ(X).
c) The union of two closed sets need not be a closed set. Let M be the
cycle matroid of a 4-cycle. Any two consecutive edges on the 4-cycle form
a closed set in the matroid. The union of two consecutive such sets is not
closed, because it spans the remaining edge of the cycle.
8.2.37. For a matroid M, M.X has no loops if and only if X is closed. An
element is a loop in M.X if and only if it completes a circuit with a subset
of X. There is no such element if and only if σ(X) = X.
8.2.38. Bases and cocircuits in matroids.
a) When e belongs to a base B in a matroid M, there is exactly one
cocircuit of M disjoint from B −e, and it contains e. The complement of B
is a base in M∗. Adding the element e to it creates a unique circuit in M ∗.
This is the unique cocircuit of M disjoint from B −e, and it contains e.
b) If C is a circuit of a matroid M and x, y are distinct elements of
C, then there is a cocircuit C∗∈C∗with C∗∩C = {x, y}. Augment the
independent set C −x to a base B; this base B contains y but not x. By
the ﬁrst statement, M has a unique cocircuit C ∗disjoint from B −y, and
it contains y. Since a cocircuit cannot intersect a circuit in exactly one
element, and x is the only element of C not contained in B, C ∗∩C = {x, y, }.
c) Part (b) is trivial for cycle matroids. If e and f are edges in a cycle C,
then V (C) splits into sets A and B that are the vertex sets of the paths on
C connecting e and f . For every minimal edge cut B that separates A and

433
Chapter 8: Additional Topics
Section 8.2: Matroids
434
B, the intersection of the cocircuit B with the circuit C in the cycle matroid
is {e, f }.
8.2.39. The dual of a simple matroid need not be simple. The independent
sets of a matroid M∗are the complements of the spanning sets of M. Hence
an element e is a loop in M∗if and only if its complement is not spanning in
M, which means that e belongs to every base in M. Let M be the hereditary
system on E in which the only circuit is E −e. Since M has only one circuit,
M vacuously satisﬁes weak elimination and is a matroid. If |E| ≥4, then
M is simple. The bases of M are the sets of size |E| −1 containing e. Since
E −e does not span, e is a loop in M∗.
A set of elements in a matroid can be both a circuit and a cocircuit.
Suppose C is a both circuit and a cocircuit in M. Hence C is a minimal
dependent set in M∗, which means C is a hyperplane (maximal nonspan-
ning set) in M. Given e ∈C, we thus have C −e independent and C + e
spanning. Since bases of M have the same size, we have
C + e
 ≥|C −e|,
which implies |C| ≤|E| /2 + 1. This suggests considering Uk(2k). Indeed,
the dual of Uk(2k) is Uk(2k) itself, in which the circuits and cocircuits are
all sets of size k + 1.
8.2.40. Proof of Euler’s Formula by matroids. The cycle matroid of a con-
nected n-vertex graph G has rank n −1. The dual matroid, also deﬁned on
the edge set, has rank e−n+1. When the graph is planar, the dual matroid
is the cycle matroid of the dual graph G∗. Since G∗has f vertices (one for
each face of G), the rank of that matroid is f −1. Hence f −1 = e −n + 1,
or n −e + f = 2, as desired.
8.2.41. Restrictions and contractions of matroids commute. If e is to be
deleted and f is to be contracted away, then we can do these in either order
without affecting the resulting matroid. More precisely, for a matroid M
on E and Y ⊆X ⊆E, we use rank functions to prove that (M|X).Y =
(M.X −Y)|Y and (M.X)|Y = (M|X −Y).Y.
For the ﬁrst equation, we have two matroids deﬁned on Y. For Z ⊆Y,
we have r(M|X).Y(Z) = rM|X(Z ∪(X −Y)) −rM|X(X −Y). Also rM.X−Y|Y(Z) =
rM.X−Y(Z) = rM(Z ∪(X −Y)) −rM(X −Y). Since rM|X = rM on subsets of X,
the rank function is the same for the two matroids on Y.
For the second equation, we use the ﬁrst and duality: For the ma-
troid on the left, [(M.X)|Y]∗= (M.X)∗.Y = (M∗|X).Y. For the matroid on
the right, similarly [(M|X −Y).Y]∗= (M∗.X −Y)|Y. By applying the ﬁrst
equation to M∗, the duals of the two matroids in the second equation are
the same, and hence they are the same matroid.
8.2.42. Rank function for matroid contraction. We apply the formula for
the rank function of the dual and the equality (M.F)∗= M∗|F. We compute
rM.F(X) = r(M∗|F)∗(X) = |X| −rM∗|F(F) + rM∗|F(F −X)
= |X| −rM∗(F) + rM∗(F −X)
= |X| −[|F| −rM(E) + rM(F)] + |F −X| −rM(E) + rM(F −X)
= rM(X ∪F) −rM(F)
(•) Also derive the formula directly by proving that X is independent
in M.F if and only if adding X to F increases the rank by |X|.
8.2.43. The cycle matroid of a graph G is the column matroid over Z2 of
the vertex-edge incidence matrix of G. A set of edges is dependent in the
cycle matroid if and only if it contains a cycle. A set of columns of the
incidence matrix (which correspond to edges) is dependent in the column
matroid if and only it contains a subset of columns summing to an even
number in each row. If a set of edges contains a cycle C, then the corre-
sponding columns have two 1’s in the rows for the vertices of C and no 1’s
in other rows; hence this set of columns is dependent. If a set of columns is
dependent, then the subset with even sum correspondence to a nonempty
even subgraph of the graph. Every nonempty even subgraph is a union of
cycles; hence the corresponding edges of the graph form a dependent set.
8.2.44. a) The matrix
 1 0 1 1
0 1 1 2

represents U2,4 over Z3. Since the matrix has
two rows, there are no three independent columns. Since no column is a
multiple of another, all pairs of columns are independent.
b) U2,4 has no representation over Z2. Suppose that U2,4 = M(A) for
some binary matrix A, and let x1, x2, x3, x4 denote the four column vectors.
Since the columns corresponding to circuits must sum to 0, we have x1 +
x2 + x3 = 0 and x1 + x2 + x4 = 0, modulo 2. This yields x3 + x4 = 0, which
contradicts the independence of {3, 4}.
8.2.45. The three operations below preserve the cycle matroid of G.
a) Decompose G into its blocks B1, . . . , Bk, and reassemble them to
form another graph G′ with blocks B1, . . . , Bk.
b) In a block B of G that has a two-vertex cut {x, y}, interchange the
neighbors of x and y in one of the components of B −{x, y}.
c) Add or delete isolated vertices.
Operation (a) can be described as a succession of “splitting” and “splic-
ing” operations, where a cut-vertex is split into two vertices belonging to
separate components or vertices from distinct components are merged. The
blocks remain the same. This does not change the cycle matroid, because
edge sets of cycles like in a single block, and a matroid is determined by
its elements and its circuits. Similarly, adding or deleting isolated vertices
does not affect the circuits or the set of elements.

435
Chapter 8: Additional Topics
Section 8.2: Matroids
436
The operation in (b) is a “vertex twist”. A vertex twist at {x, y} switches
the identity of x and y in a component of G −{x, y}. The sets of edges
forming x, y-paths do not change, and every cycle through x and y consists
of two internally disjoint x, y-paths. Other cycles do not change. Hence the
edge sets forming cycles do not change.
(Comment: Whitney’s 2-Isomorphism Theorem [1933b] states that G
and H have the same cycle matroid if and only if some sequence of these
operations turns G into H. Thus every 3-connected planar graph has only
one dual graph, meaning essentially only one planar embedding.)
8.2.46. An abstract dual that is not a geometric dual. Among the plane
graphs below, Hi is the geometric dual of Gi. Graphs G1 and G2 are iso-
morphic. They are the only distinguishable ways to embed G1 and G2 in
the plane, so H1 and H2 are the only geometric duals of G1. However, G3
is obtained from G1 by an instance of operation (b) of Exercise 8.2.45, so
G1 and G3 have the same cycle matroid; call it M. Any graph whose cycle
matroid is dual to M is an abstract dual of G1, by Corollary 8.2.37. This in-
cludes every geometric dual of G3. Hence H3 is an abstract dual of G1 that
is not a geometric dual of G1.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
8.2.47. For every matroid M, the base exchange graph β(M) is Hamiltonian
(β(M) has a vertex for each base, adjacent when their symmetric difference
has size 2). The proof is by induction on |E|, proving the stronger statement
that there is a Hamiltonian path connecting the endpoints of any edge. If
there is only one base, then the graph is trivial. If there are two bases,
then they induce an edge, by the base exchange property.
Suppose that there are more than two bases, which requires |E| ≥3.
If M has an element e in no circuit, then every base of M contains e, and
β(M) is isomorphic to β(M ·e). Similarly, if e is a loop (itself a circuit), then
no base of M contains e, and β(M) is isomorphic to β(M −e). Hence we
may assume that M has no loops and that every element of E belongs to a
circuit (no co-loops).
If M has exactly one circuit C, then addition of any element to a base
generates C, so every base lacks exactly one element of E, and that element
always belongs to C. Thus β(M) in this case is a complete graph and has
the desired cycle. Hence we may assume that M has more than one circuit.
Let (B1, B2) be an arbitrary edge of β(M), with B1−B2 = e and B2−B1 =
f . The subgraph of β(M) induced by the bases containing e is isomorphic to
β(M · e), and the subgraph induced by the bases not containing e is isomor-
phic to β(M −e). The induction hypothesis will yield Hamiltonian paths in
these subgraphs starting at B1 and B2. We will connect the opposite ends
of these paths to obtain a Hamiltonian path from B1 to B2 in β(M).
Because B1 + f contains a circuit C but B1 and B1 + f −e do not, we
conclude that e and f both belong to C and that C −{e, f } belongs to both
B1 and B2. If every element of M that is not in B1 or B2 is parallel to e or f ,
then again β(M) is a clique and has the desired cycle. Otherwise, we may
select an element h that is not in B1 or B2 and is not parallel to e or f .
The set B1 + h contains a unique cycle C′; because h is not parallel to
e we can select an edge g ̸= e, h from C ′. Note that g cannot be parallel
to e or to f , the former because g, e ∈B1 and latter because C −f + g ⊆
B1. Let B3 = B1 + h −g, so (B1, B3) is an edge of β(M). Now B1, B2, B3
agree outside {e, f, g, h}, and they intersect {e, f, g, h} in {e, g}, { f, g}, and
{e, h}, respectively. We claim that the set B4 = B2 + h −g = B3 + f −e
that intersects {e, f, g, h} in { f, h} is also a base of M, so that (B2, B4) and
(B3, B4) are edges of β(M).
To show this, keep in mind that C −f ⊆B1 and C′ −h ⊆B1. Suppose
ﬁrst that f /∈C′. In this case C′ −h ⊆B2, so C′ ⊆B2 + h. Since adding h
to B2 introduces a unique circuit, this circuit is C ′, which contains g, and
B4 is independent.
To eliminate the possibility that f ∈C ′, we use strong elimination. In
the situation at hand, we have f ∈C ∩C ′ and h ∈C′ −C, and the strong
elimination property guarantees a circuit C ′′ in C ∪C′ −f that contains
h. However, C ∪C′ −f ⊆B1 + h. Thus C′′ must be the unique circuit C′
obtained by adding h to B1, contradicting the assumption that f ∈C ′.
Hence we can apply the induction hypothesis to β(M · e) and β(M −e)
to obtain paths from B1 to B3 and from B2 to B4 through all the bases con-
taining e and omitting e, respectively. Adding the edge (B3, B4) completes
a Hamiltonian path in β(M) between B1 and B2.
For graphic matroids, the Hamiltonian circuit is a cyclic listing of the
maximal forests by changing one edge at a time. For uniform matroids,
the result is perhaps more interesting; it guarantees a cyclic listing of the
k-sets of an n-set by changing one element at each step. (This can also be
done by omitting the non-k-sets from the standard “Gray code” listing of all
subsets as produced by Exercise 7.2.17.)

437
Chapter 8: Additional Topics
Section 8.2: Matroids
438
8.2.48. (•) Use weak duality of linear programming to prove the weak
duality property for matroid intersection: |I| ≤r1(X) + r2(X) for any I ∈
I1 ∩I2 and X ⊆E. (Hint: Consider the discussion of dual pairs of linear
programs in Remark 8.1.7.)
8.2.49. Common independent and spanning sets in two matroids M1 and
M2 on E.
a) The minimum size of a set in E that is spanning in both M1 and M2
is maxX⊆E(r1(E) −r1(X) +r2(E) −r2(X)). A common spanning set contains
a base of each matroid. Thus a smallest common spanning set is a smallest
union of bases of the two matroids. We minimize |B1 ∪B2| by maximizing
|B1 ∩B2|, which is the size of I, a largest common independent set. The
minimum size of a common spanning set is thus |B1| + |B2| −|I|. By the
Matroid Intersection Theorem, the size is as claimed.
b) For a U, V -bigraph G without isolated vertices, α(G) = β′(G) (K¨onig’s
Other Theorem).
Since G has no isolated vertices, r1(E) = |U| and r2(E) = |V |. For X ⊆
E, let A1 be the subset of U not touched by X; we have |A1| = r1(E)−r1(X).
Similarly, |A2| = r2(E) −r2(X), where A2 is the subset of V not touched by
X. If a1 ∈A1 and a2 ∈A2, then every edge of X ∪X misses one or the other,
so A1 ∪A2 is a stable set. This holds for all X, so
α(G) ≥maxX⊆E{r1(E) −r1(X) + r2(E) −r2(X)} = β′(G).
c) The maximum size of a common independent set plus the minimum
size of a common spanning set equals r1(E)+r2(E), and thus α′(G)+β′(G) =
n(G) for a U, V -bigraph G without isolated vertices (Gallai’s Theorem). Con-
tinuing the argument in part (a), adding |I| to the formula yields |B1|+|B2|,
which equals r1(E) + r2(E).
Now let M1 and M2 be the partition matroids on E(G) induced by U
and V . Since G has no isolated vertices, a set S ⊆E is spanning in both
matroids if and only if it covers all the vertices; hence β′(G) = min |S|. As
has been remarked repeatedly, a set I is a common independent set if and
only if it is a matching. Thus α′(G) = max |I|. We obtain α′(G) + β′(G) =
max |I| + min |S| = r1(E) + r2(E) = |U| + |V | = n(G).
Equality holds by letting X be the set of edges with endpoints in A ∩T ,
where A is a maximum stable set. (Alternatively, every edge cover requires
at least α(G) edges to cover the vertices in a maximum stable set.)
8.2.50. In every acyclic orientation of G, the vertices can be covered with at
most α(G) pairwise-disjoint paths. Given an acyclic digraph D, let M1 and
M2 be the head partition matroid and the tail partition matroid of D. Every
common independent set I is the edge set of a family of disjoint paths in
D, since D is acyclic. The number of paths is n(D) −|I|. By the Matroid
Intersection Theorem, the maximum such |I| equals minX⊆E r1(X) + r2(X).
For each X ⊆E, the vertices not covered by the head of an edge in X or
the tail of an edge in X form a stable set of vertices in D. Hence for each
X ⊆E there is a stable set in D of size at least n −r1(X) −r2(X). Hence
the maximum size of a stable set in D is at least the minimum number
of paths needed to partition the vertices of D. Thus V (D) can be covered
using at most α(D) disjoint paths. (Comment: This is the special case of
the Gallai–Milgram Theorem for acyclic digraphs.)
8.2.51. For the transversal matroid M on E induced by subsets A1, . . . , Am
of E, the rank function r on subsets of E is deﬁned by r(X) = minY⊆X{|X| −
(|Y| −|N(Y)|)}, where N(Y) indicates the neighborhood in the incidence bi-
graph with partite sets E and {A1, . . . , Am}. Let T = {A1, . . . , Am}. Ore’s
Theorem (Exercise 3.1.32) for an X, T -bigraph H states that α′(H) =
|X| −maxY⊆X(|Y| −|N(Y)|)}. In this setting, r(X) = α′(G[X ∪T ]), so we
merely set H = G[X ∪T ].
8.2.52. Hall’s Theorem from the rank function. Let G be a bipartite graph
with partite sets E, [m] and with no isolated vertices. For X ⊆E, let r(X) =
minJ⊆[m]{|N(J) ∩X| −|J| + m}. The following are equivalent for X.
A) Hall’s Condition holds for X (|N(S)| ≥|S| for all S ⊆X).
B) r(X) ≥|X|.
C) X is saturated by some matching in G.
C ⇒A. This is the trivial part of Hall’s Theorem; the members of each
set S ⊆X have distinct neighbors in the matching.
A ⇒B. For J ⊆[m], we show that |N(J) ∩X| −|J| + m ≥|X|. Let
S = X −N(J), so N(S) ⊆[m] −J. We are given |N(S)| ≥|S|, so m −|J| ≥
|S| = |X| −|N(J) ∩X|. Moving |N(J) ∩X| yields the desired inequality.
B ⇒C. By restricting our attention to G[X ∪[m]], we may assume that
X is the entire partite set E. Hence we are given |E| −|N(J)| ≤m −|J| for
all J ⊆[m]. (Comment: Showing that this condition is equivalent to Hall’s
Condition yields this expression for the rank function of a transversal ma-
troid from Hall’s Theorem. The proof of Hall’s Theorem from this condition
is not very different from the usual proofs of Hall’s Theorem.)
Let M be a maximum matching in G. If M does not saturate all of
E, let R be the set of vertices reachable from unsaturated vertices of E by
paths that alternate between edges not in M and edges in M. Let S = R∩E,
and let T = R ∩[m]. Alternating paths reach T along edges not in M and
continue to S under edges of M. If any vertex of T is unsaturated, then
we have an augmenting path and M is not a maximum matching. Hence
every vertex of T has a mate in S under M. This yields |S| > |T |, since S
includes at least one unsaturated vertex.

439
Chapter 8: Additional Topics
Section 8.2: Matroids
440
Now let J = [m] −T . Since the edges of M incident to S come from
T , the deﬁnition of T yields N(S) ⊆T . Hence N(J) ⊆E −S. We obtain
|E| −|N(J)| ≥|S| > |T | = m −|J|, which contradicts the given inequality.
8.2.53. (!) Let G be an E, [m]-bigraph without isolated vertices. For X ⊆E
and J ⊆[m], let g(X, J) = |N(J) ∩X| −|J|, and let r(X) = min{g(X, J) +
m: J ⊆[m]}. Say that J is X-optimal if r(X) = g(X, J) + m.
a) Prove that r(∅) = 0 and that r(X) ≤r(X + e) ≤r(X) + 1.
b) Prove that r satisﬁes the weak absorption property.
8.2.54. Restrictions and unions of transversal matroids are transversal ma-
troids. If M is the transversal matroid on E induced by the bipartite graph
G with partite sets E, T , then M|X is the transversal matroid induced on
X by the induced subgraph G′ = G[X ∪T ]. By deﬁnition, Y ∈I(M|X) if
Y ⊆X and Y ∈I(M). No matching of Y in G uses vertices of E −X, so Y
has a matching in G if and only if it has a matching in G[X ∪F].
The union of matroids M1, M2 on E has X independent in M1 ∪M2 if
X = X1 ∪X2, where Xi ∈I(Mi). If M1, M2 are transversal matroids with set
systems {Ai}, {Bj}, then the union of partial transversals of {Ai} and {Bj}
is a partial transversal of the set system {Ai} ∪{Bj}. In the graph context,
this is equivalent to identifying corresponding vertices of E in two graphs
with partite sets E, F1 and E, F2.
Contractions and duals of transversal matroids need not be transversal
matroids. We ﬁrst construct a non-transversal matroid. Deﬁne a matroid
M of rank 2 on six elements E = {a, b, c, d, e, f } by letting the bases of M
be all 15 pairs except {{a, b}, {c, d}, {e, f }}. To verify that M is a matroid, it
is easy to check that the remaining twelve pairs satisfy the base axioms,
or use the fact that the dual discussed below is a matroid.
Suppose that M is a transversal matroid. Singletons are independent,
so a set system {Ai} realizing M has each element in some set. A dependent
pair appears in only one set. Since each element appears in some dependent
pair, each element therefore appears in only one Ai. Hence the elements of
any 3-element circuit appear in only two sets. Consider the circuit {a, c, e}.
By symmetry, we may assume a, c appear in the same set. However, a, c
appearing in only one set contradicts the independence of {a, c}.
The dual of this matroid is a transversal matroid of rank 4. The set
system realizing it is A1 = {a, b, c, d, e, f }, A2 = {a, b}, A3 = {c, d}, A4 =
{e, f }. Any set of 4 elements containing one element each from A2, A3, A4
is a transverval. In other words, the only 4-sets of E that are not bases are
{a, b, c, d}, {c, d, e, f }, {a, b, e, f }. Hence this transversal matroid is M ∗.
To deﬁne a transversal matroid N whose contraction is M, add an
element g. Let A1 = {g, a, b}, A2 = {g, c, d}, A3 = {g, e, f }. Then the tran-
versal matroid N induced on E ∪{g} by A1, A2, A3 has rank 3, and N · E
has rank 2. The bases of N are the pairs that with g form a transversal of
{Ai}; these are all pairs except {a, b}, {c, d}, {e, f }. Hence N · E = M. Note
that N|E is a transversal matroid of rank 3.
8.2.55. Gammoids. Give a digraph D and sets F, E ⊆V (D), the gammoid
on E induced by (D, F) is the hereditary system given by I = {X ⊆E:
there exist |X| pairwise disjoint paths from F to X}; equivalently, r(X) is
the maximum number of pairwise disjoint F, X-paths.
a) Every transversal matroid is a gammoid. A transversal matroid
M arises from an E, Y-bigraph G by letting the independent sets be the
subsets of E that are saturated by matchings. Let D be the orientation of
G directing all edges from Y to E, and let F = Y. Now M is the gammoid
on E induced by (D, F).
b) Every gammoid is a matroid.
Proof 1 (submodularity of the rank function). Say that S blocks X if S
intersects all F, X-paths. By Menger’s Theorem, r(X) is the minimum size
of a set blocking X. Let U, V be minimum sets blocking X, Y, respectively.
We will obtain a set T ⊆U △V such that (U ∩V ) ∪T blocks X ∩Y and
(U ∪V ) −T blocks X ∪Y. The sizes of such sets sum to |U| + |V |, which
will yield r(X ∩Y) + r(X ∪Y) ≤r(X) + r(Y).
If U ∩V does not block X ∩Y, then for some z ∈X ∩Y there is an F, z-
path using U △V . Let T be the set of vertices that are the last vertex of U △V
on some such path. Then (U ∩V ) ∪T blocks X ∩Y; we need only show that
(U ∪V ) −T blocks X ∪Y. If there is a path P from F to X ∪Y that is not
blocked by (U ∪V ) −T , then all vertices of P in U ∪V belong to T . Let P ′
be the portion of P up to its ﬁrst vertex v in T . By the deﬁnition of T , for
some z ∈X ∩Y there is a v, z-path Q that avoids U △V after v. Following P ′
by Q yields an walk and hence a path from F to z ∈X ∩Y that has only one
vertex of U ∪V , which is a vertex v ∈T . This path avoids V if v ∈U and
avoids U if v ∈V . This is impossible, because U and V each block X ∩Y.
Hence there is no such P, and (U ∪V ) −T blocks X ∪Y.
•
•
•
•
•
•
•
Y
z
X
V
U = T
Proof 2 (augmentation property). Let I1, I2 ∈I be independent sets
with |I2| −1 = |I1| = k. We have disjoint F, I1-paths P1, . . . , Pk and disjoint
F, I2-paths Q1, . . . , Qk+1. Let U = {Pi} ∪{Qj}. Partition the edges of each
path Qj or Pi into segments that are maximal subpaths for which no in-
ternal vertex belongs to another path in U. From these segments we form

441
Chapter 8: Additional Topics
Section 8.2: Matroids
442
k +1 disjoint paths with sources in F and sinks I1+e, for some e ∈I2. Since
each of {Pi} and {Qj} is a set of disjoint paths, each intersection point v is
shared by one Pi and one Qj. Except for sources and sinks, one P-segment
and one Q-segment enters v, and one segment of each type leaves v. If v is
a source or sink of one path, then the entering or departing segment of that
type is missing, and we include v as a trivial segment, declared to meet the
other path at its sink or source, respectively. Thus every intersection point
has one entering and one departing segment of each type.
Deﬁne a bipartite graph H with the segments as vertices. A P-segment
and a Q-segment are adjacent in H if they have the same source or have
the same sink. A segment from u to v meets at most 1 segment of the other
type at each of u, v. Hence every vertex of H has degree at most two, and
H consists of alternating paths and alternating (i.e. even) cycles.
Counting the nontrivial segments by endpoints counts each segment
twice.
Since there is an extra Q-source and Q-sink, the number of Q-
segments in H exceeds the number of P-segments by one. Hence there
must be some path R that starts and ends at Q-segments. To obtain the
augmentation of I1, we turn each Q-segment along R into a segment of a
P-path and delete each P-segment of R, which we view as switching the
ownership of the segments along R. This preserves the disjointness of the
P-paths and the disjointness of the Q-paths. However, since R starts and
ends at Q-segments, we have changed the number of P-paths from k to
k + 1. The sources are still in F, and the sinks are I1 + e for some e ∈I2.
•
•
•
•
•
•
•
•
•
•
I1
I1
→
I2
I2
I2
•
•
•
•
•
•
•
•
•
•
8.2.56. A matroid is a strict gammoid if and only if it is the dual of a
transversal matroid, where a strict gammoid is a gammoid on E induced
by (D, F) with the additional property that E = V (D).
Given a transversal matroid M of rank n on E, let G ⊆K E,T be a
bipartite graph realizing it. Let B = {b1, . . . , bn} ⊆E be a base of M, and
let L = {b1t1, . . . , bntn} be a matching of B. Deﬁne a directed graph D with
vertex set E and edges e →bj if and only if e ↔tj in G. Let F = E −B.
Any path P starting in F starts with a vertex of E −B, but thereafter stays
in B. Traversal of the edge e →bj in D can be interpreted as traversal
of the path e ↔tj ↔bj in G. Thus the path P of length k starting in F
corresponds to a path Q of length 2k that starts outside B and alternates
between edges not in L and edges in L. The symmetric difference L1P is a
matching in G in which the source of P is now matched and the sink is not.
A set of disjoint paths P corresponds to paths Q that use disjoint edges in
L, so again L1 ∪P is a matching in G in which the sources are matched
and the sinks are not.
Let N be the strict gammoid on D with source set F. Since E = V (D),
the bases of N are the sink sets of all collections of |F| disjoint paths P
with sources F.
As discussed above, for each such collection there is a
matching of size n that leaves the sink vertices of P unmatched. Hence the
complement of any base of N is a base of M. Conversely, if L′ is a matching
in G for a base B′ of M, then L′1L is a collection of disjoint alternating
paths and cycles, including paths from B′ −B to B −B′ that alternate
between edges of L′ and L. These paths collapse to a set of paths in D, half
as long, from F = B to B
′. Hence also the complement of any base in M is
a base in N, and N = M∗.
Conversely, given any strict gammoid N on D with vertices E and
source set F, we can reverse this construction. First note that r(N) = |F|.
This means that no edge between vertices of F can be used in paths corre-
sponding to a base, so if we discard or ignore all edges between vertices of
F we get the same gammoid (similarly, in the previous construction we ig-
nored edges of G not involving {t1, . . . , tn}). Letting B = E−F = {b1, . . . , bn},
we deﬁne a bipartite graph G ⊆K E,T , where T = {t1, . . . , tn}, with edges
biti, and also edges etj if e →bj in D. Let M be the transversal matroid in-
duced on E by G. The correspondence between paths in D originating in
F and alternating paths is G with respect to the matching L = {biti} is the
same as above, and once again N = M∗.
8.2.57. If M1 and M2 are matroids with spanning sets S1 and S1, then the
hereditary system M1 ∧M2 whose spanning sets are {X1 ∩X2: X1 ∈S1, X2 ∈
S2} is (M∗
1 ∪M∗
2)∗. We have X as the intersection of spanning sets X1, X2
in M1 and M2 if and only if X is the union of independent sets X 1, X2 in
M∗
1 and M∗
2. Hence X ∈SM1∧M2 if and only if X ∈IM∗
1∪M∗
2, which implies
M1 ∧M2 = (M∗
1 ∪M∗
2)∗.
8.2.58. Generalized transversal matroids. Let M be a matroid on E.
a) For A1, . . . , Am ⊆E, the hereditary system M′ deﬁned by IM′ = {X ⊆
[m]: {Ai: i ∈X} has a transversal belonging to IM} is a matroid with rank
function r ′(X) = minY⊆X{|X −Y| + r(A(Y))}, where A(Y) = S
i∈Y Ai. We
show ﬁrst that r ′ is the rank function of M′; that is, the family of sets
indexed by X has a transversal in IM if and only if |X −Y| + r(A(Y)) ≥|X|
for all Y ⊆X, or equivalently r(A(Y)) ≥|Y|; call this condition (∗).
If there is such a transversal T , then its subsets are also independent

443
Chapter 8: Additional Topics
Section 8.3: Ramsey Theory
444
in M. The subset of T representing the sets indexed by Y has size Y, and
hence r(A(Y)) ≥|Y|.
For the converse, (∗) is given. We use induction on Pm
i=1 |Ai| to prove
that X has an independent transversal. From (∗), |Ai| ≥1 for all i. If
equality always holds, then the sets are distinct elements and their union
is an independent transversal in M. This completes the basis step.
Hence we may assume that |A1| ≥2. By the induction hypothesis, it
sufﬁces to ﬁnd e ∈A1 such that replacing A1 with A1 −e yields a system
that also satisﬁes (*). If not, then for all xi ∈A1 there exists Yi ⊆[m] −{1}
such that r((A1−xi)∪A(Yi)) < |Yi|+1. Taking distinct elements x1, x2 ∈A1
and applying the submodularity of r and (∗) yields
|Y1| + |Y2| ≥r(A1 ∪A(Y1) ∪A(Y2)) + r((A1 −{x1, x2}) ∪A(Y1 ∩Y2))
≥r(A({1} ∪Y1 ∪Y2) + r(A(Y1 ∩Y2)) ≥1 + |Y1 ∩Y2| + |Y1 ∩Y2|
The contradiction completes the proof that r ′ is the rank function of the
hereditary system M′.
It thus sufﬁces to prove that r ′ is submodular. For U ⊆X and V ⊆Y,
note (as used in the proof of the Matroid Union Theorem) that |X −U| +
|Y −V | = |(X ∩Y) −(U ∩V )| + |(X ∪Y) −(U ∪V )|. Also, A(U) ∪A(V ) =
A(U ∪V ), while A(U) ∩A(V ) ⊇A(U ∩V ). Using ﬁrst the submodularity of
r, these observations yield
r ′(X) + r ′(Y) = min
U⊆X [|X −U| + r(A(U))) + min
V ⊆Y (|Y −V | + r(A(V ))]
≥min
U,V [|X −U| + |Y −V | + r(A(U) ∪A(V )) + r(A(U) ∩A(V ))]
≥min
U,V [|(X ∪Y) −(U ∪V )| + r(A(U ∪V )) + |(X ∩Y) −(U ∩V )| + r(A(U ∩V )]
≥min
S⊆X∪Y[|(X ∪Y) −S| + r(A(S))] + min
T ⊆X∩Y[|(X ∩Y) −T | + r(A(T )) ≥r ′(X ∪Y) + r ′(X ∩Y).
b) If f is a function from E to a ﬁnite set F, and M ′ is the hereditary
system on F deﬁned by IM′ = { f (X): X ∈IM}, then M′ is a matroid with
rank function r ′(X) = minY⊆X{|X −Y| + r( f −1(Y))} when f is surjective.
Let Ai = f −1(i) for i ∈F. Now X is independent in M′ if and only if the
sets indexed by F have a transversal in IM, since f is a function. By part
(a), M′ is a matroid with the speciﬁed rank function.
8.2.59. (•) Apply matroid sum and Exercise 8.2.58 to prove the Matroid
Union Theorem.
8.2.60. Matroid Intersection from Matroid Union.
The maximum size of a common independent set in matroids M1 and
M2 on E is rM1∪M∗
2(E) −rM∗
2(E). Let a = rM1∪M∗
2(E), b = rM1∩M2, and c = rM∗
2;
we seek b = a−c. If Z ∈I1∩I2 with |Z| = b, then Z contains a base A of M∗
2,
which means that Z ∪A is independent in M1 ∪M∗
2; thus a ≥b + c. On the
other hand, if X ∈IM1∪M∗
2 with |X| = a, then we may assume X = B1 ∪B2,
where B1 ∈B1 and B2 ∈B∗
2. Since |B1 ∪B2| = |B2| + |B1 −B2|, we have
a ≤c + b, because B1 ∈I1 and B1 −B2 ⊆B2 ∈B2.
b) Matroid intersection. Using the rank formula in the Matroid Union
Theorem, a −c = minX⊆E{
X
 + r1(X) + r ∗
2(X)} −r ∗
2(E)}. Since r ∗
2(X) =
|X|−(r2(E)−r2(X)) and r ∗
2(E) = |E|−r2(E), the formula for a −c simpliﬁes
to minX⊆E{r1(X) + r2(X), which by part (a) equals max{|I| : I ∈I1 ∩I2}.
8.2.61. If G is an n-vertex weighted graph, and E1, . . . , En−1 is a partition
of E(G) into n −1 sets, then there a polynomial-time algorithm to ﬁnd a
spanning tree having exactly one edge in each subset Ei, if one exists. Such a
spanning tree is a set of edges that is independent in both the cycle matroid
of G and the partition matroid on E(G) induced by the speciﬁed partition.
The Matroid Intersection Algorithm ﬁnds a common independent set of
maximum size, and the size will be n −1 if such a spanning tree exists.
However, this may not be a common independent set of maximum weight.
8.2.62. Every 2k-edge-connected graph G has k pairwise edge-disjoint span-
ning trees avoiding any speciﬁed set of at most k edges. By Corollary 8.2.59,
a necessary and sufﬁcient condition for having k pairwise edge-disjoint
spanning trees is that for every vertex partition, the number of edges of G
with endpoints in different blocks of the partition is at least k(p−1), where
p is the number of blocks.
If G is 2k-edge-connected and S is a block in the partition, then at least
2k edges lie in the edge cut [S, S]. Summing over all p parts counts each
crossing edge twice. Hence at least kp edges crossing between parts. If
at most k edges are deleted, then there are still at least k(r −1) crossing
edges, which is enough.
The result is sharp, because K2k+1 is 2k-edge-connected but does not
have k + 1 pairwise edge-disjoint spanning trees.
Such spanning trees
would require (k + 1)2k edges, and K2k+1 has (2k + 1)k edges, which is less.
8.2.63. (•) Given matroids M1, . . . , Mk on E, the Matroid Partition Problem
is the problem of deciding whether an input set X ⊆E partitions into sets
I1, . . . , Ik with Ii ∈Ii.
a) Use the Matroid Union Theorem to show that X is partitionable if
and only if |X −Y| + Pri(Y) ≥|X| for all Y ⊆X, and that all maximal
partitionable sets are maximum partitionable sets.
b) Let M′ be the union of k copies of a matroid M on E, and let X be a
maximum partitionable set. Prove that there are disjoint sets F1, . . . , Fk ⊆
X such that {Fi} ⊆I and X ⊆σ(F1) = · · · = σ(Fk).

445
Chapter 8: Additional Topics
Section 8.3: Ramsey Theory
446
8.3. RAMSEY THEORY
8.3.1. Two concentric discs, each with 20 radial sections half red and half
blue, can be aligned so that at least 10 sections on the inner disc match color
with the corresponding sections on the outer disc. Over all positions, each
section provides 10 agreements, for 200 agreements in total.
Since the
agreements occur during 20 positions, there must be some position where
the number of agreements is at least 200/20, which equals 10.
8.3.2. Every set of n + 1 numbers in [2n] contains a pair of relatively prime
numbers. Any two consecutive numbers are relatively prime, since an in-
teger greater than 1 cannot both. Hence it sufﬁces to partition [2n] into
the n pairs of the form (2i −1, 2i). Since there are only n such pairs, the
pigeonhole principle guarantees that a set of n + 1 numbers in [2n] must
use two from some pair, and these are relatively prime.
The result is best possible, because in the set of n even numbers in
[2n], every pair has a common factor. Note that since each pair of even
numbers is not relatively prime, a solution to the problem by partitioning
[2n] into n classes and applying the pigeonhole principle must put the n
even numbers into n different classes.
Every set of n + 1 numbers in [2n] contains two numbers such that one
divides the other. This is best possible in that the n largest numbers in [2n]
do not contain such a pair. To apply the Pigeonhole Principle, we partition
[2n] into n classes such that for every two numbers in the same class, one
divides the other.
Every natural number has a unique representation as an odd number
times a power of two. For ﬁxed k, the set {(2k −1)2 j−1: j ∈N} has the
desired property; the smaller of any two divides the larger. Since there are
only n odd numbers less than 2n, we have n such classes. The kth class is
{m ∈[2n]: m = (2k −1)2 j−1 and j ∈N}.
8.3.3. a) Every set of n integers has a nonempty subset summing to a mul-
tiple of n. Let ai be the sum of the ﬁrst i integers in the set. If n divides
any ai, we are ﬁnished. So, the ai fall into n −1 congruence classes mod n.
Hence there must be two of them in the same class. If these are aj and ak,
then ak −aj, which is the sum of the j + 1th through kth numbers, is di-
visible by n. So, in fact we have found a consecutive subset summing to a
multiple of n. The example showing this is best possible is a set of n −1
copies of 1. Since n divides a sum of 1s only if the number of 1s is a multiple
of n, the condition fails for this example.
b) At least one of {x, . . . , (n −1)x} differs by at most 1/n from an integer.
Consider the fractional parts of these numbers and the n intervals of the
form [(i −1)/n, i/n). If some fractional part falls in the ﬁrst or last interval,
we are done. Otherwise, we have n −1 objects in n −2 classes, and some
pair jx and kx fall in the same interval. Now (k −j)x is within 1/n of an
integer.
8.3.4. Private club needing 990 keys.
990 keys permit every set of 90 members to be housed. Suppose 90 mem-
bers receive one key apiece, each to a different room, and the remaining 10
members receive keys to all 90 rooms. Each set of 90 members that might
arrive consists of k members of the ﬁrst type and 90−k members of the sec-
ond type. When the k members of the ﬁrst type go to the rooms for which
they have keys, there are 90 −k rooms remaining, and the 90 −k members
of the second type that are present have keys to those rooms.
No scheme with fewer keys works. If the number of keys is less than
990, then by the pigeonhole principle (every set of numbers has one that is
at most the average) there is a room for which there are fewer than 11 keys.
Since the number of keys to each room is an integer, there are at most 10
keys to this room. Hence there is a set of 90 of the 100 members that has
no one with a key to this room. When this set of 90 members arrives, they
have keys to at most 89 rooms among them and cannot all be housed.
8.3.5. The center of a tree T is a vertex or an edge. For each vertex v, let
v′ be a vertex farthest from v in T , and mark the edge incident to v that
leaves v on the unique path to v′ in T . This makes n(T ) marks, so some
edge uw has been marked twice.
The graph T −uw consists of two components. If y is a vertex of the
component of T −uw containing u, then d(y, u′) > d(u, u′), since the unique
y, u′-path passes through u′. Similarly, if x is a vertex of the other compo-
nent of T −uw, then d(x, w′) > d(w, w′).
Hence the only candidates for the minimum eccentricity are the adja-
cent vertices u and w, and the center is a vertex or an edge.
8.3.6. Every set of 2m + 1 integer lattice points in Rm contains two points
whose centroid (mean vector) is also an integer lattice point.
Deﬁne 2m
classes by parity; each class is an m-tuple from {odd, even}. With 2m + 1
integer points and 2m classes, there must be two in the same class. When
two integer points having the same parity in each coordinate are averaged,
the result is an integer point.
8.3.7. Every red/blue-coloring of Rm has n integer lattice points with the
same color whose centroid also has that color.
From any 2n −1 lattice
points whose coordinates are multiples of n, choose n points a1, . . . , an with
the same color, say red; their centroid 1
n
P ai is also an integer point. Let C
denote the centroid. If C is blue, then let bj = (n +1)aj −P ai for 1 ≤j ≤n.

447
Chapter 8: Additional Topics
Section 8.3: Ramsey Theory
448
Now aj is the centroid of the set obtain by replacing aj by bj. If any bj is
red, then we have the desired set in red. Otherwise, {b1, . . . , bn} is a blue
set with blue centroid, since 1
n
P bj = C.
8.3.8. If S is a multiset of n +1 positive integers with sum k, and k ≤2n +1,
then S has a subset with sum i for each i ∈[k]. The result is sharp, since
n + 1 copies of 2 have sum 2n + 2 but no subset with sum 1.
Proof 1 (counting argument). Let r = max S, and suppose that S has
m copies of the number 1. If m >= r −1, then we can add 1s successively,
increasing the subset sum by one each time until reaching r −1.
The
next set is the number r alone. Then 1s can be introduced again until the
next largest number in S can be substituted for them, and so on. To obtain
m >= r −1, observe that the bound on the sum yields 1·r +(n−m)·2+m·1 ≤
k ≤2n + 1, which simpliﬁes to m >= r −1.
Proof 2 (induction on n). For n = 0, the only example is {1}, which
works. For n ≥1, if max S = 1 then all sums can be achieved, so we may
assume that max S = a > 1. Since a exceeds 1, the sum of the remaining
n elements is at most 2n −1, so we can apply the induction hypothesis
to obtain subsets of S −{a} summing to all integers from 1 to k −a. For
k −a + 1 ≤i ≤k, adding the element a to a subset summing to i −a
will construct a subset of S summing to i, if i −a >= 0. This requires
a ≤(1 + k)/2. The needed inequality holds, since 2a > k + 1 and a + n ≤k
would imply a ≥n + 2 and then k ≥2n + 2.
8.3.9. For even n, Theorem 8.3.4 is sharp, in that there is an ordering of
E(Kn) so that the maximum length of an increasing trail is n −1. When n is
even, Kn has a 1-factorization. Deﬁne the linear ordering on E(Kn) so that
for each 1-factor in a speciﬁed factorization, the edges of that 1-factor occur
consecutive. This ensures that each 1-factor contributes at most one edge
to an increasing trail, and hence the maximum length of an increasing trial
in this ordering is n −1.
8.3.10. Every set of nine points in the plane with no three collinear contains
the vertex set of a convex 5-gon, and this is sharp. The four points {(±1, ±2)}
and the four points {(±2, ±3)} together form no convex 5-gon. For nine
points, our case analysis forcing a convex pentagon is due to L.H. Mak and
D.B. West.
If at least 5 points lie on the convex hull, then we are ﬁnished, so we
consider the two cases of four points and three points on the hull. The obser-
vation that simpliﬁes the analysis is the following LEMMA: The segments
(“spokes”) from an interior point to the vertices of the hull partition the
region into triangles. If some segment between two other interior points
crosses two spokes, then these two points and the three endpoints of those
spokes form a pentagon.
If the hull is a quadrilateral Q, we may assume that some interior
point P is a convex combination of interior points XY Z, else the interior
points form a pentagon. Since the triangle XY Z separates P from Q, one of
its three edges must cross at least two of the four spokes from P to vertices
of Q, yielding a pentagon by the lemma.
If the hull is a triangle T , we may again assume that the hull of the
interior points has at most four points, so that at least two of the interior
points R, S are convex combinations of the others. Let ABC be the vertices
of T , with the line RS cutting AB and AC, oriented with BC horizontal,
A above it, and R to the left of S. The segments from R to ABC partition
the interior into three triangles. If there is no pentagon, then the lemma
implies that any three interior points enclosing R have a point in each
of these triangles; in particular, there is a point inside ARB. Similarly,
there is a point in ASC. If the point X in ARB is below the line RS, then
BX RSC is a pentagon. If the point Y in ASC is below RS, then BRSYC is
a pentagon. If both are above, then AX RSY is a pentagon.
8.3.11. Every nondegenerate set of R(m, m; 3) points in R2 has m points
forming a convex m-gon.
Proof 1 (stronger result). We can tilt the point set slightly, if neces-
sary, to assume that the horizontal coordinates of the points are distinct.
Color each triple of points by whether the line determined by the leftmost
and rightmost points is above or below the middle point. With R(m, m; 3)
points, there are m points such that all triples have the same color. If all
triples have the left-right line above the middle point, then the piecewise-
linear function determined by the horizontally consecutive pairs of points
is convex, and these points form a convex m-gon in which the line between
the leftmost and rightmost is above all the other points. If all triples have
the other color, then the piecewise-linear function is concave, and again the
points determine a convex m-gon.
Proof 2 (using the full point set). For each triple T ⊆S, color T by
the parity of the number of points in S −T that are in the interior of the
triangle formed by T . Let Q be a set of four points in S whose triples have
the same color. If Q is not convex, then the triangular region R formed by
the triple T on the convex hull of Q contains the other three triples. If the
three inside triangles are odd, then T is even. If the three inside triangles
are even, then T is odd. Hence every homogeneous 4-set is convex. Hence
taking at least R(m, m; 3) points yields m points whose 4-sets are all convex,
and these m points form a convex m-gon.
8.3.12. Monotone tournaments: If N is sufﬁciently large, then every simple
digraph with vertex set [N] has an independent set of order m or a mono-
tone tournament of order m or a complete loopless digraph of order m. Let

449
Chapter 8: Additional Topics
Section 8.3: Ramsey Theory
450
N = R(m, m, m, m), the Ramsey number for 4-coloring 2-sets to obtain a ho-
mogeneous set of size m. Given a simple digraph D on [N], form a coloring
of E(K N) by letting i j with i < j have color 1 if i and j are nonadjacent in
D, color 2 if i →j in D, color 3 if j →i in D, and color 4 if D has edges in
both directions on this pair. By Ramsey’s Theorem, there is a homogeneous
set of size m, and this is the vertex set of the desired induced subgraph.
8.3.13. Given k > 0, there exists an integer sk such that every k-coloring
of the integers 1, . . . , sk yields monochromatic (but not necessarily distinct)
x, y, z solving x + y = z. Let rk = Rk(3; 2). We show that sk < rk by showing
that every k-coloring f of [rk −1] has a monochromatic solution to x + y = z.
From f , we deﬁne a k-coloring f ′ of E(Krk). Let V (Krk) = [rk]. Let the color
of edge ab in f ′ be f (|a −b|).
By Ramsey’s Theorem, f ′ yields a monochromatic triangle with ver-
tices a, b, c. We may assume that a < b < c. Let x = b −a, y = c −b,
z = c −a. Since the triangle is monochromatic, f (x) = f (y) = f (z). By
construction, they satisfy x + y = z.
b) sk ≥3sk−1 −1, and hence sk ≥(3k + 1)/2. Let f be a k-coloring of [n]
with no monochromatic x + y = z. Deﬁne a (k + 1)-coloring f ′ of [3n + 1] by
f ′(i) =
( f (i)
if i ≤n,
f (i −2n −1)
if i ≥2n + 2,
k + 1
if n + 1 ≤i ≤2n + 1.
Under f ′ there is no monochromatic x + y = z. The resulting recurrence
sk ≥3sk−1 −1 yields sk ≥(3k + 1)/2.
8.3.14. Application of the lexicographic product (composition) to Ramsey
numbers. The graph G[H] has a copy of H for each vertex of G, with all
edges present between copies that correspond to edges of G, and no edges
present between copies that correspond to non-adjacent vertices in G.
a) α(G[H]) ≤α(G)α(H). Let S be a largest independent set in G[H].
No two vertices in S can have ﬁrst coordinates u and u′ with u ↔u′ in G,
since all such vertices in the product are adjacent. So, the vertices u that
appear as ﬁrst coordinates of vertices in S form an independent set in G;
hence there are at most α(G) of them.
The vertices of S using a ﬁxed vertex u of G as ﬁrst coordinate must
have as their second coordinates a set of vertices that are independent in H,
since these vertices inherit adjacencies from H. Therefore, each u ∈V (G)
that appears among the ﬁrst coordinates of vertices in an independent set
in G[H] is used at most α(H) times.
Since at most α(G) such vertices
appear, each at most α(H) times, α(G[H]) ≤α(G)α(H). (Actually, equality
holds, because S × T is independent in G[H] whenever S is independent in
G and T is independent in H.)
b) The complement of G[H] is G[H]. Nonadjacency in G[H] requires
u ↮u′ when u ̸= u′, and it requires v ↮v′ when u = u′. Thus is simply the
deﬁnition of adjacency in G[H].
c) R(pq +1, pq +1)−1 ≥[R(p+1, p+1)−1]·[R(q +1, q +1)−1]. Let G
be a graph on R(p+1, p+1)−1 vertices with no clique or independent set of
size p +1, and let H be a graph on R(q +1, q +1)−1 vertices with no clique
or independent set of size q + 1. By part (a), α(G[H]) ≤α(G)α(H) ≤pq
and α(G[H]) ≤α(G)α(H) = ω(G)ω(H) ≤pq.
By part (b), ω(G[H]) =
α(G[H]) = α(G[H]) ≤pq. Thus G[H] has no clique or independent set of
size pq + 1, which yields the desired bound.
d) R(2n + 1, 2n + 1) ≥5n + 1 for n ≥0, We use induction on n. If n = 0,
then R(2, 2) = 2, as desired. For the induction step, let k = 2n−1 and l = 2
and apply (c). This yields
R(2n + 1, 2n + 1) = R(kl + 1, kl + 1) ≥[R(2n−1 + 1, 2n−1 + 1)][R(3, 3) −1] + 1
≥5n−1 · 5 + 1 = 5n + 1.
To compare this with the nonconstructive lower bound R(p, p) ≤cp2 p/2,
let p = 2n + 1. Since 5n + 1 = 5lg(p−1) + 1 = 1 + (p −1)lg 5. Since lg 5 < 2.5.
This construction gives only a low-degree polynomial lower bound, while
the nonconstructive lower bound is exponential.
8.3.15. R(p, 2) = R(2, p) = p, and hence R(p, q) ≤
 p+q−2
p−1

. In a 2-coloring
of E(Kp), all edges have one color or there is an edge with the other color.
In E(Kp−1), making all the edges the ﬁrst color yields neither a p-set whose
edges have the ﬁrst color nor a single edge of the other color.
For the general upper bound, we use induction on p + q.
When
min{p, q} = 2, we have R(p, 2) = p =
 p+2−2
p−1

=
 p
1

. Otherwise, we have
R(p, q) ≤R(p, q −1) + R(p −1, q) ≤
 p+q−3
p−1

+
 p+q−3
p−2

=
 p+q−2
p−1

.
8.3.16. R(3, 5) = 14. For the upper bound, R(3, 5) ≤R(3, 4) + R(2, 5) =
9 + 5 = 14. To show that 13 vertices do not force a red triangle or blue
K5, it sufﬁces to show that the graph G below is triangle-free and has no
independent set of size 5.
The graph is vertex-transitive, and the neighborhood of a vertex is
independent, so the graph is triangle-free.
Let S be a set of ﬁve vertices in G. By the pigeonhole principle, there
are two vertices in S separated by distance at most two along the outside
cycle. If S is independent, it thus has a pair with distance exactly 2, as
marked below. Deleting two such vertices and their neighbors leaves the
graph 2K2 in bold below. Thus we cannot add three more vertices to obtain
an independent 5-set.

451
Chapter 8: Additional Topics
Section 8.3: Ramsey Theory
452
•
•
•
•
•
•
•
•
•
•
•
•
•
8.3.17. Ramsey numbers for r = 2 and multiple colors.
a) R(p) ≤Pk
i=1 R(qi) −k + 2, where p = (p1, . . . , pk) and qi is ob-
tained from p by subtracting 1 from pi but leaving the other coordinates
unchanged. We show that R(p) ≤2 + P(R(qi) −1). Consider a ﬁxed ver-
tex x in a coloring of the edges of a complete graph on 2 + P(R(qi) −1)
vertices. Partition the other vertices into color classes by the color of the
edges joining them to x. With k classes and thresholds R(q1), . . . , R(qk), by
the pigeonhole principle at least one of the thresholds must be met. If this
occurs for color j, then the deﬁnition of qj implies that the original color-
ing, restricted to the edges on the vertices of color j, has a (pj −1)-clique
in color j or a pi-clique in some other color i. In the former case, x can
be added to obtain a pj-clique in color j, so either way the coloring has a
monochromatic complete subgraph of the desired size in some color.
b) R(p1 + 1, . . . , pk + 1) ≤
(p1+···+pk)!
p1!···pk!
. We use induction on P pi. If
all pi = 0, then R(1, . . . , 1) = 1 =
 P 0

!/ Q 0!. For P pi > 0, let ri =
R(p1 + 1, . . . , pi−1 + 1, pi, pi+1 + 1, . . . , pk + 1). The induction hypothesis
gives ri ≤si, where si = pi
 P pj −1

!/ Q pj!. Since k ≥2, we now have
R(p1+1, . . . , pk+1) ≤2−k+
X
ri ≤
X
si =
P pi
 P pj −1

!
Q pj!
= (p1 + · · · + pk)!
p1! · · · pk!
.
8.3.18. a) rk ≤k(rk−1−1)+2, where rk = Rk(3; 2) (the minimum n such that
k-coloring E(Kn) forces a monochromatic triangle). Consider a k-coloring
with no monochromatic triangle, and let x be some vertex. There are at
most rk−1 −1 neighbors of x along edges of the ith color, for each i. Other-
wise, avoiding a monochromatic triangle (in any other color) within those
vertices would force having at least one edge of color i, and its endpoints
would form a triangle in color i with x.
Thus 1 + k(rk−1 −1) is an up-
per bound on the number of vertices for which it is possible to avoid a
monochromatic triangle.
b) rk ≤⌊k!e⌋+ 1. Proof by induction. Note that r2 = 6, which satisﬁes
the formula (any irrational number at least 2.5 could be used in place of e).
By induction, rk ≤k(rk−1 −1) + 2 ≤k ⌊(k −1)!e⌋+ 2. Since e is irrational,
k!e cannot be an integer, so the 2 can be reduced to 1 when k is brought
inside the ⌊⌋.
8.3.19. (•) Prove that Rk(p;r + 1) ≤r + k M, where M =
 Rk(p;r)
r

.
8.3.20. Off-diagonal Ramsey numbers.
a) Let h(n, p) =
 n
k

p(
k
2)+
 n
l

(1−p)(
l
2). For ﬁxed n, If h(n, p) < 1 for some
p ∈(0, 1), then R(k,l) > n. Furthermore, R(k,l) > n −h(n, p) for all n ∈N
and p ∈(0, 1). Produce a coloring of E(Kn) at random, by letting each edge
be red with probability p, independently. For any k-set, the probability
that it induces a red complete graph in the resulting coloring is p(
k
2). Since
there are
 n
k

choices of k-sets, the linearity of expectation (see Section 8.5)
implies that the expected number of red k-cliques is
 n
k

p(
k
2). Similarly, the
expected number of blue l-cliques is
 n
l

(1 −p)(
l
2). Letting X be the random
variable that counts the monochromatic cliques of threshold size, we have
E(X) = h(n, p).
If h(n, p) < 1, then E(X) < 1. This means that in some outcome of the
experiment there are no such cliques. That is, there exists a 2-coloring of
E(Kn) proving that R(k,l) > n. It sufﬁces to have any value of p in (0, 1)
with this property.
Similarly, always R(k,l) > n −h(n, p). Since E(X) = h(n, p), in some
outcome of the experiment X ≤h(n, p).
Deleting one vertex from each
bad clique in the resulting coloring yields with at least n −h(n, p) vertices,
showing that R(k,l) > n −h(n, p).
b) R(3, k) > k3/2−o(1). To obtain a lower bound from R(3, k) > n−
 n
3

p3−
 n
k

(1 −p)(
k
2), we choose p and n in terms of k so that the subtracted terms
are less than n/2 (constant factors won’t matter). Using upper bounds on
these terms, we have R(3, k) > n(1 −1
6n2 p3 −1
k!(ne−pk/2)k−1. The ﬁrst term
suggests setting p = cn−2/3 (it sufﬁces to make c a constant as small as 1).
Since k may be large, we also want e pk/2 > n (again we can make e pk/2 = c′n,
with c′ a constant as large as 1).
Letting c = c′ = 1 and taking the natural logarithm, we want to choose
n so that k = 2n2/3 ln n. We want n2/3 to cancel 2 ln n and leave k, so we set
n = (
k
3 ln k )3/2 to obtain 2n2/3 ln n = k(1 −c′′ ln ln k
ln k .
This choice of n (and p) yields R(3, k) > n(1 −1
6 −1
k!). Since (ln k)−1 =
−ln ln k/ ln k, we can write this as
R(3, k) > 2n
3 =
2
9
√
3k(3/2)(1−ln ln k/ ln k) = k3/2−o(1).

453
Chapter 8: Additional Topics
Section 8.3: Ramsey Theory
454
We could optimize the argument by letting c depend on n and c′ depend on
k, but this won’t improve the exponent.
The ﬁrst part of (a) yields no useful lower bound on R(3, k). To ob-
tain p such that
 n
3

p3 < 1, we need p < c/n. We also need e p(k−1)/2 > n,
which leads to k > 1 + (2/c)n ln n. Unfortunately, this works only when n
is smaller than k, and we already know trivially that R(3, k) > k.
c) Use part (a) to obtain a lower bound for Rk(q). We have k colors with
thresholds all equal to q. We give each edge the ith color with probability
1/k, for each i, independently, and let X be the number of monochromatic
q-cliques.
Thus E(X) = k
 n
k

k−(
q
2).
By deleting one vertex of each such
clique in an outcome with at most the expected number, we obtain Rk(q) >
n −E(X).
Thus n −E(X) is a lower bound on Rk(q), for each n. Since
 n
k

<
  ne
k
k,
we also have the simpler n −k
  ne
k
k k−(
q
2) as a lower bound. We seek n to
maximize this bound. Differentiating suggests choosing n to satisfy 1 =
k e
k
  ne
k
k−1 k−(
q
2), or n ≈(k/e)k((
q
2)−1)/(k−1).
At this value of n, E(X) is near 1, and our lower bound is just a bit less
than (k/e)k((
q
2)−1)/(k−1).
8.3.21. R(K1,m, K1,n) is m + n unless m and n are both even, in which case it
is m +n −1. The value of R(K1,m, K1,n) is the least N such that, for every N-
vertex graph G, either 1(G) ≥m or 1(G) ≥n. By the pigeonhole principle,
this property occurs when N = m + n, because at every vertex there must
be m neighbors or n nonneighbors. This is the least such N if and only if
there exists an (m −1)-regular graph with m + n −1 vertices. If m or m + n
is odd, then such a graph exists. If m and n are both even, then we are
seeking a regular graph of odd order and degree, which does not exist.
8.3.22. If T is a tree with m vertices, and m−1 divides n−1, then R(T, K1,n) =
m + n −1. With m + n −1 vertices, if every vertex in the blue graph has de-
gree at most n −1, then every vertex in the red graph has degree at least
m −1. This implies that the red graph contains every tree with m vertices,
by Proposition 2.1.8(easily proved by deleting a leaf and using induction).
For the lower bound, since m −1 divides n −1, a set of m +n −2 vertices
splits into sets of size m −1. The components of the red graph are Km−1, so
there is no red tree with m vertices. Each vertex has m −2 red neighbors,
so it has n −1 blue neighbors, and there is no blue star with n edges.
8.3.23. (m −1)(n −1) + 1 is the minimum value of p such that every 2-
coloring of E(K p) in which the red graph is transitively orientable contains
a red m-clique or a blue n-clique. More than (m −1)(n −1) vertices are
needed, since (n −1)Km−1 is transitively orientable.
Proof 1 (perfect graphs). The red graph is a comparability graph and
hence is perfect. If it has no m-clique, then it has a proper (m −1)-coloring.
If it has more than (m −1)(n −1) vertices, then by the pigeonhole principle
some color class has (at least) n vertices. This class yields an n-clique in
the blue graph.
Proof 2 (induction on m). Immediate for m = 1. For m > 1, consider
such a coloring with (m −1)(n −1) + 1 vertices.
Let F be a transitive
orientation of the red graph, with sources S. The sources induce a blue
clique, so |S| ≤n −1 if the claim does not hold. However, F −S is then a
transitive orientation of a graph G′ with more than (m −2)(n −1) vertics.
By the induction hypothesis, G has a blue n-clique or a red m −1-clique Q.
A transitive orientation of such a clique Q has a unique source u. Since
u is not a source of F, there is an edge from some v ∈S to u, and then
transitivity guarantees that v can be added to Q to obtain a red m-clique.
8.3.24. If T is a tree with m vertices, then R(T, Kn1, . . . , Knk) = (m −
1)(R(n1, . . . , nk) −1) + 1.
Let the colors be 0, . . . , k corresponding to T
and Kn1, . . . , Knk, respectively.
For the lower bound, begin with a k-coloring of Kq points that has no
copy of Kni in color i for any i, for 1 ≤i ≤k. Replace each vertex by a
complete graph of order m −1 whose edges all get color 0. Each edge in
the original graph expands into a copy of Km−1,m−1. Give all edges in this
subgraph the same color that its original edge had. This coloring has no
m-tree in color 0, because the components of the graph in color 0 have only
m −1 vertices. It meets no clique quota in any other color, because such a
monochromatic clique can be collapsed to a monochromatic clique of that
size in the original coloring. This holds because the vertices must come
from copies of distinct points in the original point set, since copies of the
same point are joined by edges of color 0.
For the upper bound, let f be a (k + 1)-coloring of E(K(m−1)q+1), where
q = R(n1, . . . , nk)−1. Deﬁne f ′ on the same edges by letting an edge be red
if it gets color 0 in f and blue if it gets a nonzero color in f . By Chvat´al’s
Theorem for R(T, Kn) (Theorem 8.3.14), this coloring has a red T , in which
case we are done, or a blue (q +1)-clique. In the latter case, we return to f ,
restricted to this set of q +1 vertices. The deﬁnition of the Ramsey number
says that f has a monochromatic copy of Kni in color i on these vertices, for
some i ∈[k].
8.3.25. R(C4, C4) = 6.
Claim 1: A 2-colored complete graph with at least 6 vertices containing
a monochromatic 5-cycle or 6-cycle also contains a monochromatic 4-cycle.
Given a red 5-cycle, avoiding a red 4-cycle makes every chord blue, so the
coloring on these 5 points consists of 5-cycles in each color. For a vertex
outside these ﬁve, its edges to these have at least three in one color, which

455
Chapter 8: Additional Topics
Section 8.3: Ramsey Theory
456
we may assume by symmetry is red. These three points include two that
are nonadjacent on the red 5-cycle. The 2-edge path between them on that
cycle, together with the edges to the extra vertex, yield a red 4-cycle.
Given a red 6-cycle, the chords joining opposite vertices on the cycle
must be blue, or we already have a red 4-cycle.
The remaining chords
cannot all be blue, since this yields a blue 4-cycle. consisting entirely of
chords. However, if one of them is red, then we have a red 5-cycle and can
apply the argument above.
Claim 2: R(P4, C4) = 5. With four vertices, the color classes may be
a triangle and a claw.
With ﬁve vertices, if there is no monochromatic
triangle, then every vertex has two incident vertices of each color. Being 2-
regular, each color class is a disjoint union of cycles, which with ﬁve vertices
can only be C5. However, C5 contains P4.
Hence we may assume a monochromatic triangle [x, y, z]. If it is red,
then any additional red edge incident to the triangle yields a red P4; if there
is no such red edge, then the blue edges from [x, y, z] to the remaining ver-
tices u and v contain a blue 4-cycle. If [x, y, z] is blue, then two blue edges
from one of {u, v} to {x, y, z} would complete a blue 4-cycle. By symmetry,
we may thus choose x with no blue edges to {u, v}, so the path ⟨u, x, v⟩is
red. Now vy or vz is red to complete a red P4.
Claim 3: R(C4, C4) = 6. Since the 5-cycle and its complement contain
no monochromatic C4, R(C4, C4) ≥6. For the upper bound, consider a 2-
coloring of E(K6). Since R(P4, C4) = 5 by Claim 2, we may assume that
the coloring has a red P4, with vertices u, v, w, x in order. If both of the
remaining vertices, y and z, have both edges to {u, x} blue, then [x, y, u, z]
is a blue C4. So, we may assume that one of the edges is red and extend
the path to a red P5, such as u, v, w, x, y. The chords uy, vy, ux must all
be blue, else we have a red 4-cycle or 5-cycle, which sufﬁces, by Claim 1.
Now consider z. The edges zv and zx cannot be both red or both blue, else
[z, v, w, x] is a red 4-cycle or [z, w, y, u, x] is a blue 5-cycle. Hence we may
assume by symmetry that zv is blue and zx is red. Now we cannot color zu.
8.3.26. R(2K3, 2K3) = 10. The lower bound is provided by the construction
in Theorem 8.3.15: the red graph is K1,3+K5. For the upper bound, consider
a 2-coloring of E(K10). Any six vertices contain a monochromatic triangle,
and the seven vertices outside that triangle yield another monochromatic
triangle. We are ﬁnished if they have the same color; if not, then the edges
joining them are used to collapse the conﬁguration to a “bow tie” as in the
proof of Theorem 8.3.15.
Thus we have vertices {v, w, x, y, z} such that
[x, v, w] is a bold triangle and [x, y, z] is a solid triangle.
To avoid a monochromatic triangle on the remaining ﬁve vertices, we
must have a bold 5-cycle [q,r, s, t, u] and a solid 5-cycle [q, s, u,r, t], as
shown below.
•
•
•
•
•
v
w
x
y
z
•
•
•
•
•
q
r
s
t
u
Vertex x must have three neighbors of the same color in {q,r, s, t, u},
of which two must be adjacent on the cycle in that set having that color.
By symmetry, we may thus assume that [x, q,r] is a bold triangle. If any
edge e with endpoints in {v, w} and {q,r} is solid, then the edges joining the
endpoint of e in {v, w} to the solid neighbors in {s, t, u} of the other endpoint
of e (for example, vt and vu when e = vr) must be bold to avoid disjoint
solid triangles, but this makes disjoint bold triangles ([x, q,r] and [v, t, u]
in the example e = vr. Hence the edges joining {5, 6} to {1, 2} are all bold.
Now consider the edges vs and vu. If both are solid, then [x, y, z] and
[v, s, u] are disjoint solid triangles. Hence one is bold; we still have sym-
metry and may assume that it is vu. Now we have disjoint solid triangles
[v, q, u] and [x, w,r]. Hence a monochromatic 2K2 is forced.
8.3.27. R(mK2, mK2) = 3m −1. For the lower bound, let the red graph be
K2m−1 + K m−1. Every red edge has both endpoints in the (2m −1)-clique, so
there cannot be m independent red edges. The complementary blue graph
is the join of the complete graph on m −1 vertices with an independent set
on 2m −1 vertices (K 2m−1 ∨Km−1. Every edge has at least one endpoint in
the (m −1)-clique, so again there cannot be m independent edges.
For the upper bound, we use induction. Note that R(K2, K2) = 2. For
m > 1, consider an arbitrary 2-coloring of the edges of K3m−1. There must
be incident edges of differing colors, else the entire clique gets one color and
has enough points to contain mK2. Remove the three points hit by these
two incident edges of different color, and apply the induction hypothesis.
To the resulting monochromatic (m −1)K2, add the edge of the appropriate
color from the deleted three vertices.
8.3.28. If Gi is a graph of order pi, for 1 ≤i ≤k, then R(m1G1, . . . , mkGk) ≤
P(mi −1)pi + R(G1, . . . , Gk). Each miGi is the disjoint union of mi copies of
Gi. Given a 2-coloring with the speciﬁed number of vertices, we iteratively
extract disjoint monochromatic copies of these graphs in the speciﬁed col-
ors. As long as R(G1, . . . , Gk) vertices remain that have not been touched
by the extracted graphs, we can ﬁnd another monochromatic Gi in color
i for some i. If ever we obtain mi copies of Gi, then we are done. Oth-
erwise, we have obtained at most mi −1 copies of each Gi, so we have

457
Chapter 8: Additional Topics
Section 8.3: Ramsey Theory
458
eliminated at most P(mi −1)pi vertices from consideration. In this case
at least R(G1, . . . , Gk) vertices remain, and we can continue. Hence the
process terminates only by ﬁnding miGi in color i, for some i.
8.3.29. Graphs with n vertices having no clique or independent set with size
as large as 2c√
log n log log n yield a lower bound for R(p, p) in terms of p that
grows faster than every polynomial in p but slower than every exponential
in p. The existence of such a graph implies that R(p, p) > n, where p =
2c√
log n log log n. To ﬁnd the behavior of the lower bound, we need to solve this
equation for n in terms of p, but we do not need the complete solution to
answer the question.
Taking logs and squaring both sides yields c′(log p)2 = log n log log n,
where c′ = 1/(c log 2)2. To study the form of the function, we express n in
terms of p and a parameter t.
First suppose that n ≤pt. In this case c′(log p)2 ≤(t log p)(log t +
log log p). If t is bounded, then this inequality is false. Hence n cannot be
bounded by any polynomial function of p.
Now suppose that n ≥t p. In this case c′(log p)2 ≥(p log t)(log p +
log log t). Again, this is impossible when t is a constant. Hence n cannot
grow faster than any exponential function of p.
8.3.30. If G is an n-vertex graph such that α′(G) = k, then R(P3, G) =
max{n, 2n −2k −1}. We seek the minimum r such that red/blue-colorings
of E(Kr) yield a red P3 or a blue G.
If r < n, then we color all of E(Kr) blue yields R(P3, G) > r, so n is a
lower bound. If r = 2(n−k−1), then we color E(Kr) with a perfect matching
in red and the rest in blue. The red matching avoids P3, and every set of
n vertices contains at least k + 1 pairs from the red matching (if it has s
vertices whose mates are omitted and t matched pairs, then s + 2t = n and
s + t ≤n −k −1, so n + t ≤n −k −1). There is no blue G on such a set of
vertices, since G has no matching of size k + 1.
For the upper bound, consider a 2-coloring of E(Kr) with r
=
max{n, 2n −2k −1}. If there is no red P3, then the red graph is restricted
to a matching. Thus all edges are blue except for 1) at most n −k −1 pair-
wise disjoint edges and an isolated vertex if k < n/2, or 2) at most n −k
pairwise disjoint edges if k = n/2. In either case, we choose n −k vertices
that span no red edges, and then we augment these with any k other ver-
tices. The coloring induced by these n vertices has at most k red edges, and
the red edges are pairwise disjoint. Since α′(G) = k, the graph G can be
mapped into an n-vertex complete graph to avoid any matching of size k,
and hence the blue graph on these n vertices contains G.
8.3.31. If r and s are natural numbers with r + s ̸≡0 (mod 4), then every
2-coloring of E(Kr,s) has a monochromatic connected graph with at least
⌈r/2⌉+ ⌈s/2⌉vertices. We prove a slightly stronger result: If the edges of
Kr,s are 2-colored, then there is a monochromatic connected subgraph with
at least half the vertices from each side, with one side exceeding half unless
each color forms 2Kr/2,s/2.
To prove this, ﬁrst delete a vertex or two (if necessary) to leave an
odd number of vertices on each side. Now let X and Y be the partite sets,
and consider an arbitrary edge-coloring. Give each vertex of X the color
occuring on a majority of its incident edges. Let blue be the color thus
assigned to a majority of the vertices in X. Any two blue vertices in X have
a common neighbor in Y along blue edges. Hence the blue vertices in X
and their incident blue edges form a connected subgraph; it has more than
half of X (by pigeonhole choice of blue) and more than half of Y (by the blue
neighbors of each vertex of X).
With the deleted vertex of each original partite set of even size re-
placed, we have obtained an connected monochromatic subgraph with at
least (r + s)/2 vertices. Equality requires that all r/2 vertices of this sub-
graph in X have the same s/2 neighbors in Y.in Y. Equality forbids addi-
tional incident blue edges, so the red edges incident to these vertices form
2Kr/2,s/2. To avoid having a spanning connected red subgraph, all edges
not incident to our original blue subgraph must be red, forming another
red copy of Kr/2,s/2.
Every 3-coloring of E(Kr+s) contains a monochromatic connected sub-
graph with more than (r+s)/2 vertices, except maybe when r+s ≡0 (mod 4).
Given a 3-coloring of E(Kn), let G be a maximal monochromatic connected
subgraph in color 0; let r be its order, with n = r + s. On edges joining
V (G) and V (Kn) −V (G), only colors 1 and 2 are used. The preceding ar-
gument guarantees a monochromatic connected subgraph with more than
half the vertices unless r and s are even and the subgraphs between V (G)
and V (Kn) −V (G) are 2Kr/2,s/2 in colors 1 and 2.
In the exceptional case, these subgraphs in color 1 (red) and color 2
(blue) partition V (G) into A0 and A1 and V (Kn) −V (G) into A2 and A3 so
that all edges joining A0 to A2 or joining A1 to A3 are red and all edges
joining A0 to A3 or joining A1 to A2 are blue. If any edge joining A0 to
A1 or A2 to A3 does not have color 0, then we have a monochromatic n-
vertex connected subgraph. Otherwise, we have monochromatic connected
subgraphs in color 0 with r and s vertices.
Hence we have the desired
conﬁguration unless r = s = n/2, which now implies n ≡0 (mod 4).
Furthermore, we have shown that when n ≡0 (mod 4) the claim
fails only for the following coloring: given the three pairings of four sets
A0, A1, A2, A3 of size n/4, assign color i to all edges between groups paired

459
Chapter 8: Additional Topics
Section 8.3: Ramsey Theory
460
in the ith pairing. Any coloring within each graph can be used; all the
monochromatic connected subgraphs have exactly n/2 vertices.
8.3.32. Forcing 4-cycles.
a) If P
v∈V (G)
 d(v)
2

>
 n(G)
2

, then G contains a 4-cycle.
The sum
P
v∈V (G)
 d(v)
2

counts the triples u, v, w such that v is a common neighbor of
u and w. If G has no 4-cycle, then every pair of vertices has at most one
common neighbor.
b) If e(G) >
n(G)
4 (1 + √4n(G) −3), then G contains a 4-cycle. Since
 x
2

is a convex function of x, the minimum of P
v∈V (G)
 d(v)
2

for ﬁxed P d(v)
occurs numerically when the values for d(v) are equal (even though this
may not be realized by a graph). Since P d(v) = 2e(G), we conclude that
P
v∈V (G)
 d(v)
2

≥n(G)
 2e(G)/n(G)
2

. If e(G)( 2e(G)−n(G)
n(G)
>
 n(G)
2

, then the condi-
tion of part (a) holds. This inequality reduces to the stated condition.
c) Rk(C4) ≤k2 + k + 2. If n > k2 + k + 2, then
 n
2

> k n
4(1 +
√
4n −3).
Hence some color class is as large as n
4(1 +
√
4n −3), and the result of part
(b) applies.
8.3.33. R(Cm, K1,n) = max{m, 2n + 1}, except possibly if m is even and does
not exceed 2n. For the lower bound, ﬁrst consider m ≥2n + 1. Form a red
clique on m −1 vertices; it has no red Cm and no blue edge, hence no vertex
with blue degree n. If m < 2n + 1 and m is odd, form two disjoint blue
cliques on n vertices, and let all the edges between them be red. There is
no vertex with blue degree n, and all the red cycles have even length. The
case with m < 2n + 1 and m even is unsettled, although the argument for
the upper bound is still valid.
For the upper bound, ﬁrst consider m ≥2n + 1 and any 2-coloring of
E(Km). If no vertex has blue degree at least n, then the red degree of every
vertex is at least m −n, which exceeds m/2 since n < m/2. We now invoke
Bondy’s Theorem, stating that if x ↮y implies d(x) + d(y) ≥n(G), then G
is a complete bipartite graph with equal-sized partite sets or G has a cycle
of each length from 3 to n(G). The red graph satisﬁes this hypothesis, so
in either case it is Hamiltonian, which yields a red Cm.
If m < 2n+1, consider a 2-coloring of E(K2n+1). Again having no vertex
of blue degree at least n implies that the minimum red degree is at least
half the number of vertices. Since 2n + 1 is odd, Bondy’s Theorem now
yields red cycles of all lengths, including length m.
8.3.34. Every 2-coloring of E(Kn) contains a monochromatic Hamiltonian
cycle or a Hamiltonian cycle consisting of two monochromatic paths. This
is immediate for n = 3; we proceed by induction. If n > 3, consider the
coloring on E(Kn −v).
If this has a monochromatic cycle, then we can
replace an arbitrary edge of the cycle by the edges from its endpoints to v.
If it has two monochromatic paths whose union is a cycle, then let x, y, z
be three consecutive vertices on the cycle with xy red and yz blue. We may
assume that yv is red. Now the cycle obtained by replacing yz with ⟨y, v, z⟩
has the desired property.
8.3.35. Ramsey numbers for cycles.
a) A 2-coloring of E(Kn) that contains a monochromatic C2k+1 for some
k ≥3 also contains a monochromatic C2k. Let C be a red (2k + 1)-cycle,
with vertices v0, . . . , v2k in order. If there is no monochromatic 2k-cycle,
then each xixi+2 is blue, which yields a blue 2k + 1-cycle C ′ and implies
that each xixi+4 is red, where indices are mod 2k.
For each i, consider
the cycle obtained from C by replacing the path ⟨xi, xi+1, . . . , xi+5⟩with
⟨xi, xi+3, xi+2, xi+1, xi+5⟩. Skipping xi+4, it has length 2k, and all edges ex-
cept xixi+3 are red; hence xixi+3 is blue.
Now we can replace the path
⟨xi, xi+2, xi+4, xi+6⟩on C′ with ⟨xi, xi+3, xi+6 from C to obtain a blue 2k-cycle.
Note that this requires k ≥3.
b) A 2-coloring of E(Kn) that contains a monochromatic C2k for some
k ≥3 also contains a monochromatic C2k−1 or 2Kk. Let C be a red 2k-cycle,
with vertices v0, . . . , v2k−1 in order. We prove that if there is no monochro-
matic (2k −1)-cycle, then all edges of the form xixi+2 j are blue.
This
sufﬁces, since it implies that the odd-indexed vertices and even-indexed
vertices along C both induce blue copies of Kk.
If there is no monochromatic (2k −1)-cycle, then each xixi+2 is blue, so
we may assume that 2 ≤j ≤k −2. Replacing xi+2 jxi+2 j+1 and ⟨xixi+1xi+2⟩
on C with xixi+2 j and xi+2xi+2 j+1 yields a cycle of length 2k −1 in which
every edge except the two new edges is red. If xixi+2 j is red, then xi+2xi+2 j+1
must therefore be blue to avoid a red (2k −1)-cycle. (In the ﬁgure below,
bold means blue and solid means red.) Similarly, replacing xi+2 jxi2 j−1 and
⟨xixi−1xi−2⟩on C with xixi+2 j and xi−2xi+2 j−1 forces xi−2xi+2 j−1 to be blue.
Now replacing {xi−2xi, xixi+2, xi+2 j−1xi+2 j+1} with {xi−2xi+2 j−1, xi+2xi+2 j+1}
in the set of edges of the form {xrxr+2} yields a blue (2k −1)-cycle avoiding
xi. Hence if there is no monochromatic (2k −1)-cycle, then xixi+2 j is blue.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
i −2
i
i + 2
i + 2 j −1
i + 2 j
i + 2 j + 1

461
Chapter 8: Additional Topics
Section 8.3: Ramsey Theory
462
c) If m ≥5, then R(Cm, Cm) ≤2m −1.
(Note that R(C3, C3) =
R(C4, C4) = 6; Exercise 8.3.25.) Consider a 2-coloring of E(K2m−1). One
color has at least half the edges; we may assume it is red. Erd˝os–Gallai
[1959] (Theorem 8.4.35) proved that e(G) > 1
2(m −1)(n(G) −1) forces a cy-
cle of length at least m in G. Since 1
2
 2m−1
2

> 1
2(m −1)[2m −2], we conclude
that the coloring has a red cycle of length at least m. By parts (a) and (b),
there is also a red m-cycle or two disjoint blue complete graphs of equal
order exceeding m/2; we may assume the latter.
Let Q1 and Q2 be disjoint sets inducing blue complete graphs, each
of order exceeding m/2, chosen to maximize |Q1 ∪Q2|. If two nonincident
blue edges join Q1 and Q2, then we can take P⌈m/2⌉from Q1 and P⌊m/2⌋from
Q2 to form a blue m-cycle with these edges. Hence all blue edges joining
Q1 and Q2 are incident to a single vertex x, which we may assume is in Q1.
If m is even, then we can now take m/2 vertices from each Qi, avoiding x,
and form a red m-cycle using the edges between them.
We may therefore assume that m is odd. Let T = Q1 ∪Q2 and S =
Q1 −{x}. If there is no blue m-cycle within Q1 or Q2, then |Q1 ∪Q2| <
2m −1, and T ̸= ∅. For v ∈T , if all edges from v to Q1 or to Q2 are blue,
then we contradict the maximality of |Q1 ∪Q2|. Hence there are red edges
from v to both Q1 and Q2.
Since all the edges joining Q1 and Q2 are red except those incident to
x, we can complete a red m-cycle through v and alternating between Q1
and Q2 unless vx is the only red edge from v to Q1 and all edges from x to
Q2 are blue (except possibly one incident to the only neighbor of v in Q2
along a red edge). This is true for all v ∈T , so every edge from x to T is
red and all of [S, T ] is blue. Also let R be the subset of Q2 whose edges to
x are blue; R is all of Q2 except possibly one vertex.
Since ⌈m/2⌉≥3, there are at least two blue edges from x to R. Hence
there is a blue cycle spanning Q2∪{x}, and we may assume that |Q2 ∪{x}| ≤
m −1. Therefore |S ∪T | ≥(2m −1) −(m −1) = m.
We now have a blue m-cycle in the graph induced by S ∪T if |S| ≥
⌈m/2⌉, so we may assume that |S| = (m −1)/2 and |T | ≥(m + 1)/2 ≥3.
If an edge within T is blue, then we complete a blue cycle by using it and
otherwise alternating between S and T . Hence we may assume that all
edges induced by T are red.
If there is a blue edge in [T, R], then we can form a blue cycle by fol-
lowing it with any portion of R, then x, then any portion of S. The length
is any value from 4 to at least |Q1 ∪Q2|, which exceeds m. Hence we may
assume that all of [T, R] is red. Now we can form a red m-cycle by using a
path alternating between S and R using (m −3)/2 vertices of S, (m −1)/2
vertices of R, and two vertices of T .
8.3.36. The Ramsey multiplicity of K3 is 2, where the Ramsey multiplicity
of G is the minimum number of monochromatic copies of G in a 2-coloring
of E(K R(G,G)). To color E(K6) with only two monochromatic triangles, let
the red graph be K3,3, which is triangle-free. The complementary graph is
2K3, with two triangles.
Now we show that every coloring has at least two monochromatic tri-
angles. Since R(3, 3) = 6, there is at least one monochromatic triangle T ,
say in red. If we delete one vertex of T , then there remains a monochro-
matic triangle on the remaining ﬁve vertices unless the color classes on
that subgraph are complementary 5-cycles. Let C be the red 5-cycle, and
let z be the deleted vertex. To form T , we have edges from z to consecu-
tive vertices on C, which we call x and y. Let u, x, y, v be the consecutive
vertices on C including the edge xy. A red edge from z to u or v completes
another red triangle, but if uz and vz are both blue they complete a blue
triangle with uv.
8.3.37. Each point in a triangular region has a unique expression as a
convex combination of the vertices of the triangle. We observe ﬁrst that
each point on a segment has a unique expression as a convex combination
of the endpoints. Now, given a point x inside the triangle with corners
u, v, w, let y be the point at which the ray from u through x reaches the
opposite side. Now y = λv+(1−λ)w), for a unique λ, and x = µy +(1−µ)u,
for a unique µ. Hence x = (1 −µ)u + (λµ)v + µ(1 −λ)w. The coefﬁcients
are uniquely determined in terms of λ and µ, and these constants also are
uniquely determined by x and the corners.
8.3.38. Sperner’s Lemma in higher dimensions. In a proper labeling of a
simplicial subdivision of a k-dimensional simplex, there is a cell receiving
all k + 1 labels, where “proper labeling” is a labeling such that label i does
not appear at any vertex on the ith outer face.
We prove the stronger result, by induction on k, that there are an odd
number of completely labeled cells. When k = 1, we have a 0, 1-labeling of
a path segment with 0 and 1 on the ends, and there must be an odd number
of switches between 0 and 1 along the path.
For k > 1, deﬁne a graph G with a vertex for each cell plus one vertex
v for the outside region. Two vertices of G are adjacent if the correspond-
ing regions share a (k −1)-dimensional face with corners having labels
0, . . . , k −1. If the vertex for a cell is nonisolated, then the cell has all these
k labels among its k + 1 corners. If it repeats one of the labels, then it has
two incident edges in G. Otherwise, it is a completely labeled cell and has
degree 1.
Hence the only cells with odd degree are the completely labeled cells.
To prove that there are an odd number of them, it sufﬁces to prove that the

463
Chapter 8: Additional Topics
Section 8.3: Ramsey Theory
464
vertex v also has odd degree. A cell having a (k −1) dimensional face on
the ith outside face cannot have label i on it. Therefore, having an edge to
v happens only through the (k + 1)th face, where label k + 1 is forbidden.
This face is a simplicial subdivision of a (k −1)-dimensional simplex.
The labeling is proper on this face, as it inherits the needed properties from
the full labeling (think of the edges of a triangle in the 2-dimensional case).
By the induction hypothesis, this lower-dimensional labeling has an odd
number of completely labeled cells. Hence the full-dimensional labeling
has an odd number of cells with edges to v.
8.3.39. The badwidths of Pn, Kn, and Cn are 1, n −1, and 2, respectively.
A nontrivial graph has bandwidth 1 if and only if its vertices can be or-
dered so that no nonconsecutive vertices are adjacent, which means that
its components are paths. In ordering, the vertices of Kn, the ﬁrst and last
vertices are adjacent. Since Cn is not a path, its bandwidth is at least 2.
To achieve this, number the vertices around the cycle . . . , 5, 3, 1, 2, 4, . . . in
order, reaching to n −1 in one direction and to n in the other direction.
8.3.40. The bandwidth of Kn1,...,nk is n −1 −

n′/2

, where n = Pk
i=1 ni and
n′ = maxi ni. Consider an optimal numbering. If the vertices given labels 1
and n come from different partite sets, then the bandwidth is n −1. If they
come from the same partite set, with c vertices of this partite set at the
beginning and c′ at the end of the labeling, then the bandwidth is at least
max n −c, n −c′. To minimize this lower bound, we split the largest partite
set between the front and back. The lower bound becomes n −1 −

n′/2

.
Also, splitting the largest partite set in this way achieves equality for any
ordering of the remaining vertices in the remaining middle positions.
8.3.41. The bandwidth of a tree with k leaves is at most ⌈k/2⌉. Let m−⌈k/2⌉.
We use the fact that every tree with k leaves is the union of m pairwise
intersecting paths (Exercise 2.1.40). We repeat the proof: Let T be a tree
with k leaves. By pairing leaves arbitrarily, we form a set of m paths that
together cover the leaves. Among all such sets of paths, choose one with
maximum total length; we claim it has the desired properties. If some pair
of paths is disjoint, say an x, y-path P and a u, v-path Q, consider the path
R in T from V (P) to V (Q). Replace P and Q with the x, u-path and the
y, v-path in T . The new paths still cover the leaves, and the total length
has increased by twice the length of R. If some edge e of T is omitted by the
longest covering set of paths, then consider the two components of T −e.
Each contains a leaf of T , so each contains at least one path in the set.
Again making the switch increases the total length.
To prove the upper bound, we provide an injective integer embedding
in which the difference along every edge is at most m; the set of labels need
not be consecutive. Let P0, . . . , Pm−1 be a set of pairwise-intersecting paths
with union T , and let Tj = S j
i=0 Pi. Because the paths are pairwise inter-
secting, each Tj is connected. Because Tj−1 is connected and Tj contains no
cycle, a traversal of Pj cannot leave Tj−1 and then return to it.
First assign successive multiples of m to the vertices along P0. For
j > 0, suppose that the vertices of Tj−1 have received labels congruent to
1, . . . , j −1 modulo m so that edges have dilation at most m. We use labels
congruent to j on vertices of V (Pj) −V (Tj−1). Let u, v be the vertices of
V (Pj) ∩V (Tj−1) that are closest to the two ends of Pj (these may be equal).
By symmetry, we may assume that f (u) ≤f (v). Let a be the largest integer
less than f (u) congruent to j (mod m), and let b be the smallest integer
greater than f (v) congruent to j (mod m). From the neighbor of u [or v] out
to the corresponding leaf of Pj, assign the label a −(i −1)m [or b +(i −1)m]
to the ith vertex of V (Pj) −V (Tj−1) encountered. (If k is odd, then for one
value of j, one of these subpaths is empty). The new labels are in the new
congruence class, and the newly-included edges have difference at most m.
8.3.42. If G is a caterpillar with
l
n(H)−1
diam H
m
≤m for all H ⊆G, then B(G) ≤
m. (Note that the least such m is a lower bound, so equality with hold.)
Let P be the spine of G, having vertices ⟨v0, . . . , vp⟩in order, where v0
and vp are leaves. Assign the number im to vi for 0 ≤i ≤p. It sufﬁces
to show that this allows us to assign numbers to the remaining vertices so
that all leaf neighbors of vi receive numbers between (i −1)m and (i + 1)m.
We can then compress the numbering to eliminate gaps without increasing
any edge difference.
Let Li = N(vi) −V (P), and let li = |Li|. For 1 ≤i ≤k −1, iteratively
label Li as follows. Use min{li, c} labels between (i −1)m and im, where
c is the number of labels between (i −1)m and im not already assigned to
Li−1. If li > c, give the remaining vertices li −c labels starting with im + 1.
We show that this works by proving that li −c ≤m −1 at step i. For
j < i, the algorithm has assigned a label above jm to some vertex of L j
only if it has assigned all labels between ( j −1)m and jm. At step i, let
h be the least index such that all labels between hm and (i −1)m have
been assigned. We have h ≤i −1; equality is possible. Since the interval
between (h −1)m and hm is not “full”, no label above hm is assigned to L h.
Let H be the subgraph of G induced by {vh+1, . . . , vi} and their neighbors;
note that diam H = i + 1 −h. Between hm and im, V (H) has received
n(H) −1 −li labels for the vertices circled in the ﬁgure below. Hence c =
(i −h)m + 1 −[n(H) −1 −li]. By the local density computation, n(H) −1 ≤
(i + 1 −h)m. Thus li −c = n(H) −1 −(i −h)m −1 ≤m −1, as desired.

465
Chapter 8: Additional Topics
Section 8.3: Ramsey Theory
466
•
•
•
•
•
•
vh
vh+1
vi
vi+1
Lh+1
Li
8.3.43. Bandwidth of grids.
a) Local density bound for Pm
Pn. We consider only the bound that
comes from the subgraph Pn
Pn and omit some details of that.
It sufﬁces to consider induced subgraphs; adding edges cannot increase
diameter. For a subgraph H with diameter 2k, let u and v be vertices of H
at distance 2k (the odd case is similar). Let w be a vertex halfway along a
shortest u, v-path. Any vertex at distance more than k from w will have dis-
tance more than 2k from u or v, by the nature of the grid (details omitted).
Hence we get the best lower bound by including all the vertices in Pn
Pn
that are within distance k of w. For k ≤(n −1)/2, the number of vertices
in this subgraph is Pk+1
i=1(2i −1) + Pk
i=1(2i −1). This equals 2k2 + 2k + 1.
Subtracting 1 and dividing by 2k yields B(Pn
Pn) ≥k + 1.
When k is larger than (n −1)/2, the full set we have described does
not ﬁt inside the n-by-n grid. We must subtract 4 Pk−(n−1)/2
i=1
(2i −1) vertices
after putting w in the center of the grid. The largest subgraph now has
2k(2n −1 −k) −(n −1)2 + 1 vertices. After subtracting 1 and dividing
by the diameter 2k, we have a lower bound of 2n −1 −[k + (n −1)2/2k].
This is maximized by setting k to be about (n −1)/
√
2, where the resulting
lower bound is (n −1)[2 −
√
2]. This is about .59n, which is still short of
the desired lower bound of n.
b) Sliding the elements of a vertex subset of Pn
Pn to the extreme left
within their rows does not increase the size of the boundary. Choose S ⊆
V (Pn
Pn) with ai vertices in the ith row, for each i. Let T consist of the
ﬁrst ai in the ith row, for each i. We show that |∂T | ≤|∂S|.
If aj = n, then each set has the same number of boundary elements in
row j. Furthermore, no vertex outside row j becomes a boundary element
due to an edge to row j. Therefore, we may assume that ai < n for all i,
but by convention we deﬁne a0 = an+1 = n. For 1 ≤i ≤n, the number of
boundary elements in row i of T are the rightmost elements, exactly 1 of
them if ai = min{ai−1, ai, ai+1}, and otherwise the maximum of ai −ai−1 and
ai −ai+1. Since ai < n, also S in row i has at least one boundary element
due to row i, at least ai −ai−1 boundary elements due to row i −1, and at
least ai −ai+1 boundary elements due to row i + 1, since these are lower
bounds on the sizes of the set differences. Hence S has at least as many
boundary elements in each row as T has.
c) |∂S| is minimized over k-sets in V (Pn
Pn) by some S such that a1 ≥
· · · ≥an and b1 ≥· · · ≥bn, and hence Harper’s lower bound for B(Pn
Pn)
is n. By part (b), sliding vertices to the left within their rows does not
increase the boundary, and it produces a set whose column populations are
in nonincreasing order. By symmetry, sliding vertices to the top within
their columns also does not increase the boundary. This leaves the column
populations unchanged and produces a set whose row populations also are
in nondecreasing order.
To show that the boundary bound is at least n, it sufﬁces to prove that
in Pn
Pn there is some k such that every k-set of vertices has boundary at
least n. We choose k such that
 n
2

< k <
 n+1
2

. View V (Pn
Pn) as positions
in a matrix. We may restrict our attention to a set S in the upper left as
discussed above. Let ai be the number of vertices of S in the ith row.
If a1 = n and an = 0, then S has a boundary element in each column. If
a1 < n and an > 0, then S has a boundary element in each row. We illustrate
the other cases for n = 6; the diagonal corresponds to ai = n + 1 −i.
•
• • •
•
•
i →
S
•
•
•
•
• •
•
i →
S
Case 1: a1 < n and an = 0. If ai ≤n −i for all i, then |S| ≤P(n −i) =
 n
2

< k. Hence ai > n −i for some i, and ∂S has distinct elements in rows
1, . . . , i and columns 1, . . . , ai −1. We obtain |∂S| ≥n.
Case 2: a1 = n and an > 0.
If ai ≥n + 1 −i for all i, then |S| ≥
P(n + 1 −i) =
 n+1
2

> k. Hence ai ≤n −i for some i. Now ∂S has distinct
elements in rows i, . . . , n and columns ai + 1, . . . , n, and |∂S| ≥n + 1.
d) B(Pm
Pn) = min{m, n}. Numbering the vertices in successive ranks
along the short direction yields maximum difference min{m, n}. Since Pn Pn
is a subgraph of Pm
Pn, it sufﬁces to prove that B(Pn
Pn) ≥n, which is
the result of part (c).
Comment: A much shorter proof. For B(Pn
Pn), consider an opti-
mal numbering f , minimizing the maximum dilation of edges. It sufﬁces
to show that some initial segment of f has boundary of size at least n.
Let S be the maximal initial segment of f that does not contain a full
row or column. Adding the next element of f completes a row or column,
say row r. We claim that S has a boundary element in each column. It
has one boundary element in row r. In every column not containing that
element it has an element in row r but does not contain all of that column,
so it has a boundary element in the column.

467
Chapter 8: Additional Topics
Section 8.4: More Extremal Problems
468
8.3.44. Change in bandwidth under edge addition.
Let G be a simple
graph with order n and bandwidth b.
a) If e ∈G, then B(G +e) ≤2b. Let f be an optimal numbering of G, let
vi = f −1(i), and let vlvm be the added edge e. We deﬁne a new numbering
f ′ to prove that B(G + e) ≤2b. Let r = ⌊(l + m)/2⌋, and set f ′(vr) = 1
and f ′(vr+1) = 2. Number outward from vr, setting f ′(vi) = f ′(vi+1) + 2 if
i < r and f ′(vi) = f ′(vi−1) + 2 if i > r until the vertices on one side of vr
are exhausted. The remaining vertices (v2r, . . . , vn if 2r ≤n, or v2r−n, . . . , v1
if 2r ≥n + 1) receive the remaining high labels in order. Edges between
vertices on the same side of vr may be stretched by a factor of 2; no other
edges stretch as much. Since we began midway between vl and vm, we also
have
 f ′(vl) −f ′(vm)
 = 1.
• • • • • • • • • •
1 2 3 4 5 6 7 8 9 10
vl
vr
vm
f
→
•
•
•
•
•
•
•
• • •
1 2 3 4 5 6 7 8 9 10
vr
vl
vm
f ′
b) If n ≥6b, then B(G + e) can be as large as 2b. Let G be a maximal
n-vertex graph with bandwidth b; that is, G is the graph P b
n obtained by
adding edges to Pn joining any two vertices whose distance in Pn is at most
b. Now let e be the edge joining the two vertices that are b positions from
the ends of the ordering. Let S be the set of vertices consisting of the ﬁrst
2b + 1 vertices and last 2b + 1 vertices in the ordering.
Note that the
subgraph of G induced by S has diameter 3.
Let f ′ be an optimal numbering of G +e. If the vertices labeled 1 and n
by f ′ are both in S, then the path of length at most 3 joining these vertices
has some edge whose endpoints differ under f ′ by at least (n −1)/3, which
is at least 2b.
Otherwise, the vertex x assigned number 1 or number n by f ′ belongs
to G −S. Now all neighbors of x have numbers lying to one side of f ′(x).
Since each vertex of G −S has 2b neighbors in G, this again forces an edge
difference of at least 2b under f ′.
8.4. MORE EXTREMAL PROBLEMS
8.4.1. The intersection number of an n-vertex graph G is at most n2/4, using
sets of size at most 3. By Proposition 8.4.2, we need only show E(G) can be
covered with

n2/4

complete subgraphs. The graph K⌊n/2⌋,⌈n/2⌉shows that
this is best possible. We show by induction that

n2/4

complete subgraphs
sufﬁce to cover E(G); this holds by inspection for n = 1, 2 (or n = 3). We
use only edges and triangles; this is equivalent to providing an intersection
representation by ﬁnite sets such that each element appears in at most
three sets.
For larger n, select xy ∈E(G). The difference between

n2/4

and

(n −2)2/4

is n −1. By the induction hypothesis, it sufﬁces to show the
edges incident to {x, y} can be covered by n −1 edges and triangles. If
v /∈{x, y} is incident to exactly one of {x, y}, we use that edge; if both, we
use the triangle {v, x, y}. If xy is in no triangle, then we add xy itself as a
complete subgraph. (Note: the proof can also be phrased in terms of build-
ing a discrete intersection representation, without using the equivalence
to clique covering.)
8.4.2. Equivalent conditions for intersection number θ ′(G) when G has no
isolated vertices:
A) θ′(G) = α(G),
B) θ′(G ∨G) = (θ ′(G))2,
C) θ′(G) = θ(G),
D) Every clique in any minimum clique cover of E(G) contains a simplicial
vertex of G.
Let 2, 2′ denote minimum clique covers of V (G) and E(G), respec-
tively. When discussing H = G ∨G, let G1, G2 denote the two copies of G
in H, and let 2(Gi), 2′(Gi) denote the copy of 2, 2′ in Gi. Since G has no
isolated vertices, 2′ covers both E(G) and V (G).
A ⇒B. The inequality θ ′(H) ≤(θ ′(G))2 always holds, because the join
of complete subgraphs in G1 and G2 is a complete subgraph in H. Since
2′ covers both E(G) and V (G), {Q ∨Q′: Q ∈2′(G1), Q′ ∈2′(G2)} covers
E(H). For equality when θ ′(G) = α(G), consider the two copies in H of a
maximum stable set in G. This set induces a complete bipartite subgraph
with α(G) vertices in each partite set, so (α(G))2 complete subgraphs of H
are needed to cover these edges, and (α(G))2 = (θ′(G))2.
B⇒C. Since G has no isolated vertices, θ ′(G) ≥θ(G). We form a cover
of E(H) using fewer than (θ ′(G))2 complete subgraphs if θ ′(G) > θ(G). To
cover E(G1)∪E(G2), for each Q ∈2′ we take its occurrences in 2′(G1) and
2′(G2) and form their join; this contributes θ ′(G) complete subgraphs. To
cover the edges joining V (G1) and V (G2), we take {Q ∨Q′: Q ∈2(G1), Q′ ∈
2(G2)}; this contributes (θ(G))2 complete subgraphs. Now θ ′(H) ≤θ ′(G) +
(θ(G))2 < (θ′(G))2, which contradicts the hypothesis.
C⇒D. Let r = θ ′(G) = θ(G), and let 2 be any set of r complete sub-
graphs covering E(G) and hence V (G). Every element of 2 has a vertex
appearing in no other complete subgraph, else we could omit it and obtain
a smaller covering of V (G). A vertex appearing in only one member of a
clique cover of E(G) must be simplicial.

469
Chapter 8: Additional Topics
Section 8.4: More Extremal Problems
470
D⇒A. Since θ ′(G) ≥α(G) for any graph without isolated vertices, it
sufﬁces to obtain a stable set consisting of one vertex from each member of
in a minimum clique cover 2 of E(G). We may assume that every member
of 2 is a maximal clique. Since a simplicial vertex belongs to only one max-
imal clique, this implies that each clique of 2 contains a vertex belonging
only to that clique. The θ ′(G) vertices from distinct cliques thus selected
must be independent, because no edge among them is covered by 2.
8.4.3. If b(G) is the minimum number of bipartite graphs needed to parti-
tion the edges of G, and a(G) is the minimum number of classes needed to
partition E(G) such that every cycle of G contains a non-zero even number
of edges in some class, then b(G) = a(G) = ⌈lg χ(G)⌉. We prove lg χ(G) ≤
b(G) ≤a(G) ≤⌈lg χ(G)⌉. Since lg χ(G) and ⌈lg χ(G)⌉differ by less than 1,
the integers in this string of inequalities must be the same.
Let E1 ∪· · · ∪Eb(G) be a minimum partition of E(G) into bipartite sub-
graphs; we may assume these are spanning subgraphs. We can deﬁne a
proper 2b(G)-coloring f by giving each v ∈V (G) a binary b(G)-sequence
f (v) in which fi(v) indicates which partite set in Ei contains v. Since each
edge belongs to some Ei, the endpoints of each edge receive different labels.
This proves χ(G) ≤2b(G), i.e. ⌈lg χ(G)⌉≤b(G).
Let E1∪· · ·∪Ea(G) be a minimum partition having the cycle intersection
property deﬁned above. If Ei contains an odd cycle, then this cycle in G
does not contain a non-zero even number of edges of any color. Hence each
Ei is bipartite, and b(G) ≤a(G).
Let f be an optimal vertex coloring of G. Encode the colors in f of G
by distinct binary sequences of length k = ⌈lg χ(G)⌉. Partition E(G) into
E1 ∪· · · ∪Ek by using the coordinates of this encoding: put uv ∈Ei if i is
the ﬁrst coordinate for which fi(u) ̸= fi(v). Given any cycle C in G, let j
be the lowest-indexed color used on E(C). While traversing C, coordinate
j changes a non-zero even number of times, but since every other color on
E(C) is higher, when traversing edges of C coordinate j can change only
along edges that actually belong to Ej. Hence this partition has the cycle
intersection property, and a(G) ≤k.
8.4.4. (•) Determine all the n-vertex graphs that have product dimension
n −1. (Lov´asz–Neˇsetˇril–Pultr [1980])
8.4.5. pdim G ≤2 if and only if G is the complement of the line graph of
a bipartite graph. Given a 2-dimensional encoding of G, deﬁne a bipartite
graph H with vertices X ∪Y and edges xi yj such that (i, j) is one of the
vectors in the encoding. Then the vertex for (i, j) is adjacent to the vertex
for (k,l) in G if and only if i ̸= k and j ̸= l, which happens if and only if xi yj
and xk yl are not incident, which happens if and only if the vertices for xi yj
and xk yl are adjacent in the complement of the line graph of H. Conversely,
if G is the complement of the line graph of a bipartite graph H whose
bipartition is X = {x1, . . . , xm} and Y = {y1, . . . , yn}, then the vertices of G
correspond to the edges of H, and we obtain a two-dimensional encoding
by assigning (i, j) to the vertex of G corresponding to xi yj ∈E(H). This
is an encoding because the vertices of G corresponding to xi yj and xk yl are
adjacent if and only if those edges of H are non-incident, which happens if
and only if i ̸= j and k ̸= l.
8.4.6. For r ≥2, pdim (Kr + mK1) =

r
if 1 ≤m ≤(r −1)!
r + 1
if m > (r −1)!
.
Allowing r + 1 coordinates, we can represent this graph using (i, . . . , i)
for the ith vertex of the clique and (1, . . . ,r, j) for the jth vertex of the
stable set, with the extra coordinate included to ensure that the vertices of
the stable set get distinct encodings. Since Kr + K1 is an induced subgraph,
the answer thus is always r or r + 1.
In every coordinate, the vertices of the clique must have distinct val-
ues. By permuting the labels used within a coordinate, we may assume
that the code for the ith vertex of the clique is (i, . . . , i). If pdim G = r, then
each vertex of the stable set must be encoded by a permutation of [r] in or-
der to establish all non-adjacencies to clique vertices. These permutations
must be distinct, and each pair of them must agree in some coordinate to
avoid edges in the stable set. Hence no pair of the permutations can be
cyclic permutations of each other.
This partitions the r! permutations into (r −1)! classes of size r, from
each of which we can take at most 1.
Therefore, pdim (Kr + mK1) = r
requires m ≤(r −1)!. When m ≤(r −1)!, r coordinates do sufﬁce; give each
vertex of the stable set value 1 in coordinate r to prevent edges, and use
the (r −1)! distinct permutations of [r −1] in coordinates 1, . . . ,r −1.
8.4.7. The product dimension of the three-dimensional cube Q3 is 2. Since
Q3 is not a complete graph, we need at least two coordinates, and we can
encode it with two coordinates by using the binary triples. Each triple x is
a vertex that is adjacent to every vertex of opposite parity except the com-
plement of x. We use coordinate 1 to destroy edges to vertices of the same
parity and coordinate 2 to destroy edges between complements. In coordi-
nate 1, assign 0 to each sequence of even weight and 1 to each sequence of
odd weight. In coordinate 2, assign 0 to 000 and 111, and assign i to each
sequence in which the ith coordinate has a value that appears only once in
the sequence. The resulting vectors are {(i, j): 0 ≤i ≤1, 0 ≤j ≤3}.
8.4.8. The product dimension of the Petersen graph is 3 or 4. The Petersen
graph is L(K5). It is not the complement of the line graph of a bipartite
graph, so by Exercise 8.4.5 its product dimension is at least 3.

471
Chapter 8: Additional Topics
Section 8.4: More Extremal Problems
472
The encoding in the table below shows that the product dimension is
at most 4. The vertices are named by the 2-element subsets of [5], adjacent
when they are disjoint. Hence the codes of two vertices should agree in
some coordinate if and only if their names have a common element. In
the ith coordinate, value 0 is assigned to the four doubletons that contain
element i. The remaining three doubletons that contain element 5 have
value 1 in the ith coordinate. The three doubletons not containing 5 or i
have value 2.
If two doubletons share an element, then their codes agree in coor-
dinate i (with value 0) if their shared element i is not 5 (and in another
coordinate with value 2). If the shared element is 5, then the union omits
two elements from [4], and the codes agree in those coordinates (with value
1). If two doubletons are disjoint, then they agree in no coordinate, because
in the ith coordinate, value 0 goes only to doubletons sharing element i,
value 1 goes only to doubletons sharing element 5, and value 2 goes only
to doubletons chosen from the set of three elements outside {i, 5}, which
pairwise intersect.
12: 0022
23: 2002
34:2200
13: 0202
24: 2020
34:1101
14: 0220
25: 1011
34:1110
15: 0111
8.4.9. Maximum product of pdim G and pdim G when G is an n-vertex
graph.
Let f (n) be the desired value.
From max{pdim G} = n −1 =
max{pdim G}, we have f (n) ≤(n −1)2. Form G by identifying one leaf
of K1,⌈n/2⌉with one vertex of K⌊n/2⌋. Since G contains K⌊n/2⌋+ K1 and G
contains K⌈n/2⌉+ K1 as induced subgraphs, we have pdim G ≥⌊n/2⌋and
pdim G ≥⌈n/2⌉, yielding f (n) ≥(n2 −1)/4.
8.4.10. If n ≥4, then pdim Pn = ⌈lg(n −1)⌉. If n ≥3, then pdim C2n =
1 + ⌈lg(n −1)⌉and 1 + ⌈lg n⌉≤pdim C2n+1 ≤2 + ⌈lg n⌉.
Given a path
induced by x1, . . . , xm in G, set ui = xi and vi = xi+1 for 1 ≤i ≤m −1.
This yields ui ↔vi for all i and ui ↮vj for i < j. By the LNP lower
bound, this yields pdim G ≥⌈lg m −1⌉. For paths, we obtain pdim Pn ≥
⌈lg(n −1)⌉. Since Cm contains Pm−1 as an induced subgraph, we obtain
pdim Cm ≥⌈lg(m −2)⌉. Thus pdim C2n ≥⌈lg(2n −2)⌉= 1+⌈lg(n −1)⌉and
pdim C2n+1 ≥⌈lg(2n −1)⌉= ⌈lg(2n)⌉= 1 + ⌈lg n⌉.
We complete the proof for paths by embedding P2k+1 in the weak prod-
uct of k triangles, beginning with k = 2. Let xk(i) be the encoding of the
ith vertex on the path, for 1 ≤i ≤2k. When k = 2, we set x2(0) = 00,
x2(1) = 11, x2(2) = 02, x2(3) = 10, x2(4) = 01.
For k > 2, we obtain
xk(i) from the previous codes, by appending a suitable value in the new
coordinate. Here i runs from 0 to 2k.
index i
parity of i
in ﬁrst k −1 coords
in kth coord
i < 2k−1
even
xk−1(i)
0
i < 2k−1
odd
xk−1(i)
1
2k−1
even
xk−1(2k−1)
2
i > 2k−1
odd
xk−1(2k −i)
0
i > 2k−1
even
xk−1(2k −i)
1
Codes for consecutive vertices come from codes for consecutive vertices
at the previous stage, with distinct values in the new coordinate, so the
desired edges exist. The only codes that are distinct throughout the ﬁrst
k−1 coordinates are those coming from consecutive vertices at the previous
stage. If the distance from the old vertex 2k−1 is even, we append a 0 in
the ﬁrst half of the path, a 1 in the second half. If the distance is odd, we
append a 1 in the ﬁrst half, a 0 in the second half. Two vertices whose codes
disagree in the ﬁrst k −1 coordinates but are in opposite halves of the path
arise from vertices at the previous stages whose distances from the last
vertex have opposite parity. Thus their codes agree in the kth coordinate,
and the undesired edge is destroyed.
To obtain the encodings for cycles, we need some observations about
the above encoding for paths. Since each code is obtained by extending
the code of a previous vertex whose index has the same parity, the ﬁrst
coordinate of a code is 1 if and only if the index is odd. For the same reason
plus attention to when 2’s are introduced, a code contains a 2 at some
coordinate after the ﬁrst if and only if the index of its vertex is even and is
not the ﬁrst or last vertex.
To encode C2 j+2 in k dimensions, where 1 ≤
j < 2k−1, we use
xk(0), . . . , xk( j −1) and xk(2k −j + 1), . . . xk(2k); these codes induce a dis-
joint union of two paths.
Between xk( j −1) and xk(2k −j + 1) we put
xk−1( j) with a 2 appended. Between xk(0) and xk(2k) we put 122 · · · 2. By
the observations above, this encodes C2 j+2 in k dimensions.
To encode C2 j+3 in k + 1 dimensions, where 1 ≤j < 2k−1, we use uk(i)
for 0 ≤i ≤2 j, alternately appending 0 and 2, and then complete the cycle
using uk(2 j + 1) with 1 appended, followed by the code of all 2’s.
(Comment: LNP improved the lower bound for odd cycles to agree with
the upper bound when the length is one more than an even power of 2. On
the other hand, Kˇrivka [1978] showed that the lower bound is the correct
answer for asymptotically at least 1/3 of all odd cycles.
8.4.11. If k > 1, then C2k+1 has no isometric embedding in a cartesian
product of complete graphs. In such a cartesian product, the vertices corre-
spond to integer vectors, and the distance between them is the number of

473
Chapter 8: Additional Topics
Section 8.4: More Extremal Problems
474
coordinates where the vectors differ. Suppose that G is isometrically em-
beddable. If P is a shortest x, y-path in G, then the distances from x and
y change by one with each step along the path, and each coordinate in the
encoding therefore changes at most once along the path.
In any isometric embedding of C2k+1, therefore, the edges along any
path of length k change distinct coordinates. This implies that along any
path of length k + 1, the last edge changes the same coordinate as the
ﬁrst; repeating any other coordinate violates the previous statement, and
changing another new coordinate creates a difference in k + 1 coordinates
for the encoding of two vertices at distance k (along the other part of the
cycle). Since k + 1 is relatively prime to 2k + 1, this implies that all edges
change the same coordinate. Hence the only clique product in which C2k+1
embeds isometrically has one factor, which implies k = 1.
8.4.12. qdim (C5) = 4. By Winkler’s result (Theorem 8.4.18), it sufﬁces to
prove that qdim (C5) > 3. Let f be a 3-dimensional encoding, if one exists.
Since C5 is not bipartite, some code f (v) has a star in some position. No
code has more than one star, since each vertex has nonneighbors. By sym-
metry of 0s and 1s in a given coordinate of the encoding, we may assume
that f (v) = ∗11. Let u, v, w, x, y be the vertices in cyclic order. Since the
nonneighbors of v are adjacent, their codes must be 000 and 100; by sym-
metry, let f (x) = 000 and f (y) = 100. Since w is farther from y than from
x, we have f1(w) = 0; similarly, f1(u) = 1. To obtain the correct distances
from x and y, each of f (u) and f (w) has exactly one 1 after the ﬁrst po-
sition. Since d(u, v) = d(v, w) = 1, the remaining entry in f (u) and f (w)
is 0. Now the distance between f (u) and f (w) is 1 or 3, which contradicts
d(u, w) = 2.
8.4.13. The squashed-cube dimension of K3,3 is 5.
By Theorem 8.4.18,
it sufﬁces to assume a 4-dimensional encoding f and obtain a contradic-
tion. Let the partite sets be A = {a, b, c} and B = {x, y, z}. If f encodes
some vertex without stars, we may assume f (a) = 0000. Now each code
for B has exactly one 1, and distance two among them forces these 1’s to
be in distinct coordinates with matching 0’s. Hence { f (x), f (y), f (z)} =
{100?, 010?, 001?}, where ? ∈{0, ∗}. Since d(a, b) = 2, f (b) has exactly two
1’s. Placing them in the ﬁrst three coordinate violates d(b, w) = 1 for some
w ∈B. Hence f4(b) = 1; by symmetry f (b) = 1??1, where ? ∈{0, ∗}. Now
d(b, y) = d(b, z) = 1 forces f (b) = 1 ∗∗1. The same argument shows that
f (c) also has no zeros, which violates d(b, c) = 2.
Hence we may assume that every vertex code has a star. None can have
more than two stars, since all have eccentricity 2. Suppose f (a) = 00 ∗∗.
Now distance two among {a, b, c} requires f (b), f (c) = 1101, 1110. Since
B ⊆N(a), each code for B has exactly one 1 in the ﬁrst two coordinates. By
the pigeonhole principle, we may assume f1(x) = f1(y) = 1 and f2(x) ̸= 1 ̸=
f2(y). Now d(x, y) = 2 requires { f3(x), f3(y)} = { f4(x), f4(y)} = {0, 1}. To
ensure distance 1 to b and c, we now must have { f (x), f (y)} = {1∗00, 1∗11}.
If f1(z) = 1, this argument would force f (z) to end both in 00 and in 11.
If f1(z) = ∗, then d(z, x) = d(z, y) = 2 forces the same result. If f1(z) = 0,
then d(z, b) = d(z, c) = 1 implies f (z) = 01 ∗∗, which violates d(z, x) = 2.
Hence we may assume that every vertex code has exactly one star, with
f (a) = 000∗. Now each of f (b), f (c) has exactly two 1’s in the ﬁrst three
coordinates. Hence they have a common 1, which we may put in the ﬁrst
coordinate. Now d(b, c) = 2 forces their stars into the same coordinate;
we conclude by symmetry that f (b) = 110∗and f (c) = 101∗. Switching
0 and 1 in the ﬁrst coordinate yields f (a), f (b), f (c) = 100∗, 010∗, 001∗
and restores symmetry. Now no code with one, two, or three 1’s in the
ﬁrst three coordinates has distance 1 from each vertex of A. However, if
all codes for B have no 1’s in the ﬁrst three coordinates, then we cannot
establish distance 2 between any pair of vertices of B.
8.4.14. Menger’s Theorem for edge-disjoint paths in digraphs, from Ed-
monds’ Branching Theorem. Assume that G is k-edge-connected. Thus at
least k edges must be deleted to make some vertex unreachable from an-
other. In particular, at least k edges must be deleted to make some vertex
unreachable from x. By Edmonds’ Branching Theorem, there is a set of
k pairwise edge-disjoint branchings rooted at x. The paths reaching y in
these trees are pairwise edge-disjoint. Since x and y were chosen arbitrar-
ily, we have the conclusion of Menger’s Theorem: in a k-edge-connected
digraph, we can always ﬁnd k pairwise edge-disjoint x, y-paths.
8.4.15. The telegraph problem (one-way messages to transmit from each
person to every other) requires 2n −2 message for n people, and this suf-
ﬁces.
Before some person receives all the information, there must be a
tree of messages to that person, which requires n −1 calls. After that,
the remaining n −1 people must each receive a message to complete their
information.
A tree in and a tree out from the same person completes the transmis-
sions in 2n −2 messages.
8.4.16. (•) Let D be a digraph solving the telegraph problem in which each
vertex receives information from each other vertex exactly once.
Prove
that in D at least n −1 vertices hear their own information. For each n,
construct such a D in which only n −1 vertices hear their own information,
but for each x ̸= y there is exactly one increasing x, y-path. (Seress [1987])
8.4.17. The NOHO property. Let G be a connected graph with 2n −4 edges
having a linear ordering that solves the gossip problem and satisﬁes NOHO

475
Chapter 8: Additional Topics
Section 8.4: More Extremal Problems
476
(no increasing cycle).
a) If n(G) > 8 and at most two vertices have degree 2, then the graph
obtained by deleting the ﬁrst calls and last calls of vertices in G has 4 com-
ponents, of which two are isolated vertices and two are caterpillars having
the same size. As argued in Claim 3 of Theorem 8.4.23, the set F of ﬁrst
calls is a matching, as is the set L of last calls. Hence the graph M consist-
ing of the remaining “middle” calls has n −4 edges and therefore at least
four components.
Let O(x) and I (x) be the trees in the argument of Claim 2 of Theorem
8.4.23, growing the trees that are useful “out from” and “in to” a vertex x.
The argument of Claim 2 shows that under the NOHO property, d(x) −2
calls are useless to x, none of which are incident to x.
A call in M can be useful to x only if the component containing it also
contains a neighbor of x, because a path to x cannot continue after a last
call on it, and a path from x cannot start before a ﬁrst call on it. Since
e(G) < 2n, there is a vertex of degree at most 3, so there are at most three
nontrivial components in M. Since there are at least four components, at
least one is an isolated vertex x. Hence there are at most two nontrivial
components (containing the ﬁrst and last neighbor of x), leaving at least
two isolated vertices in M. Since the hypothesis speciﬁes no additional ver-
tices of degree 2 in G, there are exactly four components in M, of which two
are isolated vertices. Furthermore, the two nontrivial components must be
trees since e(M) = n −4.
Let x and y be the isolated vertices, with neighbors x f and yf in F and
neighbors xl and yl in L. Since each edge is useful to x, the vertices x f and
yf are in different components of M. Hence one component is a tree T1 of
paths out of x f , and the other is a tree T2 of paths in to xl. Similarly, one
component consists of paths out of yf and the other is in to yl.
We claim that yf cannot lie in T1. If so, then xl and yl both lie in T2.
We claim that this forbids an increasing x, yl-path. Such a path must start
with xx f , since it cannot continue after xxl. After x f , it can only reach T2
via an edge of L, which it could follow after some increasing path from x f
in T1. However, this edge of L does not reach yl, since the last neighbor of
yl is y, and the path cannot continue after a last edge to reach yl.
Therefore, x f , yl ∈V (T1) and xl, yf ∈V (T2).
The requirement that
every edge lies on a path out of x f and a path into yl implies that the path
from x f to yl in T1 is an increasing path with every edge of T1 incident to it.
In this case T1 (and similarly T2) is a caterpillar, and the edges off the spine
occur between the incident edges on the spine in the linear ordering of calls.
This implies that every two edges in T1 lie on an increasing path together.
Now an edge of F or L joining vertices within one of these components
would violate NOHO. After deleting the ﬁrst and last edges incident to
x and y, the matchings tell us that n(T1) = n(T2), so the two nontrivial
components are caterpillars of the same size.
b) For even n with n ≥4, there are solutions with 2n −4 calls that
have the NOHO property. Below is a general construction: ﬁrst perform
the matching consisting of diagonal calls with positive slope, then the top
path from left to right and the bottom path from right to left, and ﬁnally
the matching consisting of diagonals with negative slope. There are many
other constructions.
•
•
•
•
•
•
•
•
•
•
8.4.18. (•) A NODUP scheme (NO DUPlicate transmission) is a connected
ordered graph that has exactly one increasing path from each vertex to
every other.
a) (−) Prove that every NODUP scheme has the NOHO property.
b) Prove that there is no NODUP scheme when n ∈{6, 10, 14, 18}.
(Comment: Seress [1986] proved that these are the only even values of n for
which NODUP schemes do not exist, constructing them for all other values.
For n = 4k, West [1982b] constructed NODUP schemes with 9n/4 −6 calls,
and Seress [1986] proved that these are optimal.)
8.4.19. Broadcasting can be completed in time 1 + ⌈lg n⌉in a particular
graph with fewer than 2n edges. By having each vertex who knows the
information at a given time call a new vertex who does not know it at the
next time, broadcasting can be completed from a speciﬁed root vertex in
⌈lg n⌉steps. Now add edges to make the root adjacent to all other vertices.
To broadcast from any other vertex, call the root ﬁrst, and then ﬁnish the
job in ⌈lg n⌉additional phases. The number of edges in the construction is
2n −1 −⌈lg n⌉.
8.4.20. The graph below is not 2-choosable. Assign lists as shown. If we
put 1 above 2 on the central vertices, then the vertices on the left cannot
be properly colored. If we put 2 above 1 on the central vertices, then there
is no proper choice for the vertices on the right.
•
•
•
•
•
•
23
12
13
13
12
23

477
Chapter 8: Additional Topics
Section 8.4: More Extremal Problems
478
8.4.21. Kk,m is k-choosable if and only if m < kk. Let the partite sets be
X = {xi} of size k and Y = {yj} of size m. For m ≥kk, it sufﬁces to consider
m = kk and a speciﬁc collection of k-lists. Let {crs: 1 ≤r ≤k, 1 ≤s ≤k} be
a collection of k2 colors. Let L(xi) = {cis: 1 ≤s ≤k} to xi. To the vertices
of Y, assign the kk distinct lists obtained by choosing one color with each
possible ﬁrst coordinate. Every choice of colors on X consists of one color
with each possible ﬁrst coordinate. For each such choice, the chosen colors
will be precisely the colors in the list for some vertex of Y. No legal color
can be chosen for that vertex to complete the coloring.
For m < kk, consider an arbitrary collection of k-lists assigned to the
vertices. If some two vertices in X have a common element in their lists,
choose that element for them, and choose arbitrarily from the lists for the
other vertices of X. This uses at most k −1 colors for X, which leaves a color
available in the list for each vertex of Y. On the other hand, if the color
sets are disjoint, then they can be indexed so that L(xi) = {cis: 1 ≤s ≤k}.
There are kk possible choices of one of these colors from each set. Since
m < kk, there is at least one such choice that does not occur as a list for
vertices of Y. When these colors are chosen for X, for each y ∈Y there is a
color in L(y) not used on X, and the coloring can be completed.
8.4.22. Bounds on choosability and edge-choosability.
χl(G) ≤1 + maxH⊆G δ(H). Order the vertices v1, . . . , vn such that vi is
a vertex of minimum degree in the subgraph Gi induced by v1, . . . , vi (by
selecting the vertices in decreasing order). Consider an arbitrary collection
of lists of size 1 + maxH⊆G δ(G). Make choices from these lists in the order
v1, . . . , vn. When vi is considered, there are at most δ(Gi) neighbors of vi
that have been colored, by the construction of the ordering. Hence there
is always a color available in the list for vi that has not been used on an
earlier neighbor.
χl(G)+χl(G) ≤n+1. By part (a), it sufﬁces to show that maxH⊆G δ(H)+
maxH⊆G δ(H) ≤n −1. Let H1 and H2 be subgraphs of G and G achieving
the maximums. Let ki = δ(Hi). Note that n(Hi) ≥ki +1. If k1 +k2 ≥n, then
H1 and H2 have a common vertex v. Now v must have at least ki neighbors
in Hi, for each i, but only n −1 neighbors are available in total.
χ′
l (G) ≤21(G) −1. Place the edges in some order. Each edge is inci-
dent to at most 21(G) −2 others. If 21(G) −1 colors are available at each
vertex, then when we reach it there is always a color available not used on
the incident edges colored earlier.
8.4.23. Every chordal graph G is χ(G)-choosable. We use the reverse of a
simplicial elimination ordering. Consider the vertices in the construction
order. Cliques are created only as vertices are added, so the clique number
is the maximum k such that a vertex belongs to a clique of order k when
added. This also equals the chromatic number, by the greedy coloring with
respect to this order. The same greedy coloring algorithm establishes k-
choosability. When each vertex v is added, it has at most k −1 neighbors
already present. Here at most k −1 colors from the list allowed for v have
already been used on its neighbors, and a color remains that can be chosen
from the list for v.
8.4.24. A connected graph G has an L-coloring from any list assignment L
such that |L(v)| ≥d(v) for all v if there is strict inequality for at least one
vertex y. Choose a spanning tree of G, and order the vertices descending
away from y, meaning that each vertex other than y has a later neighbor.
When we reach a vertex v other than y, we have colored fewer than d(v)
of its neighbors, and hence a color remains available in L(v) to use on v.
When we reach y, we have colored d(y) neighbors, but an extra color still
remains available.
8.4.25. a) Every graph G has a total coloring with at most χ ′
L(G)+ 2 colors.
In a total coloring, colored objects have different colors if they are adjacent
vertices, incident edges, or an incident vertex and edge.
Let k = χ′
L(G) + 2. Because χ ′
L(G) ≥χ ′(G) ≥1(G), there exists a
proper k-coloring f of G. To each edge uv, assign the list [k] −{ f (u), f (v)}.
This assigns each edge a list of χ ′
L(G) colors, from which we can choose a
proper edge-coloring to complete a total coloring of G.
8.4.26. Non-4-choosable planar graph of order 63.
a) With S denoting [4] and i denoting S −{i}, the given lists for the
graph on the left below yield no proper coloring. The following properties
hold for coloring each 4-cycle with distinct lists. (1) the chosen colors can-
not be distinct (its center would not be colorable from S). (2) The colors
on two consecutive vertices cannot be the colors forbidden from the oppo-
site vertices in the opposite order (those opposite vertices would have to
contribute the two remaining colors, violating (1)).
Consider the central 4-cycle C, and view all labels and indices modulo
4. We claim that the vertex in C with list i cannot receive color i + 1. If it
does, it forbids i + 1 from the vertex in C with list i −1, which by (2) also
cannot receive color i + 2. This leaves only color i for the vertex in C with
list i −1. Repeating the argument leads for each j to color j + 1 on the
vertex in C with list j, which violates (1).
By making the same argument in the other direction, color i −1 on the
vertex in C with list i would propogate to color i on the vertex in C with
list i + 1, again violating (1).
This leaves only the possibility that for each i, color i + 2 appears on
the vertex in C with list i. This again violates (1).

479
Chapter 8: Additional Topics
Section 8.4: More Extremal Problems
480
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
3
4 S
3
1
2
4
S
S
S
2
4
3
1
S
2
1
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
3
4
5
3
1
2
4
5
5
5
2
4
3
1
5
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
2
1
4
2
5
3
1
4
4
4
3
1
2
5
4
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
3
5
2
3
1
4
5
2
2
2
4
5
3
1
2
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
4
1
3
4
5
2
1
3
3
3
2
1
4
5
3
2
5
b) The planar graph G′ obtained from G on the right above by adding
one vertex with list 1 adjacent to all vertices on the outside face of G has no
proper coloring chosen from these lists, where i denotes [5] −{i}. Suppose
that G′ has such a coloring. When the color chosen for the extra vertex is
5,4,2,3, respectively, the 1st, 2nd, 3rd, or 4th copy of the graph of part (a)
in G has lists on its vertices isomorphic to those speciﬁed in part (a), via
a permutation of the names of the colors. By part (a), there is no way to
complete the coloring.
8.4.27. Equivalence of Dilworth and K¨onig–Egerv´ary Theorems.
a) Dilworth’s Theorem implies the K¨onig–Egerv´ary Theorem. View a
bipartite graph G on n vertices as a poset. The vertices of one partite set
are maximal elements, the others are minimal, and the edges are cover
relations. Chains have one or two elements. Thus every chain-covering of
size n −k uses k chains of size 2 and yields a matching of size k in G. Each
antichain of size n −k is an independent set in G, and the k remaining
vertices are a vertex cover. Hence Dilworth’s guarantee of an antichain
and a chain-covering of the same size yields a matching and a vertex cover
of equal size in G.
b) The K¨onig–Egerv´ary Theorem implies Dilworth’s Theorem. Let P
be a poset of size n. We apply the K¨onig–Egerv´ary Theorem to a bipartite
graph S(P) called the split of P. The partite sets of S(P) are {x −: x ∈P}
and {x+: x ∈P}. The edge set is {x−y+: x <P y}.
A matching in S(P) yields a chain-covering in P as follows: if x −y+ is
in the matching, then y is immediately above x on a chain in the cover. If
x−or x+ is unmatched, then x is the top or bottom of its chain, respectively.
Since each vertex of S(P) appears in at most one edge of the matching, this
deﬁnes disjoint chains covering P. If the matching has k edges, then the
cover has n −k chains, since each added edge links the top of one chain
with the bottom of another to form a single chain.
From a minimum vertex cover T of S(P), we obtain an antichain. We
show ﬁrst that T does not use both copies of any element x. By transitiv-
ity in P, all of {z−: z ∈D(x)} is adjacent in S(P) to all of {y+: y ∈U(x)}.
Covering the edges of this complete bipartite subgraph requires using all
of {z−: z ∈D(x)} or all of {y+: y ∈U(x)}. Since these are the neighbor sets
of x+ and x−, respectively, at least one of {x +, x−} can be omitted from T .
Now let A = {x ∈P : x−, x+ /∈T }; we have shown that |A| = |P| −|T |.
Also, A is an antichain, since a relation between elements of A would yield
an edge of S(P) uncovered by T . Thus a minimum cover of size k yields an
of equal size yields an antichain and a chain-covering of equal size.
•
•
•
•
•
•
•
•
•
f
f −
f +
a
b
c
d
e
a−
•
•
•
•
•
•
•
•
•
b−c−d−e−
a+ b+ c+ d+ e+
8.4.28. Kn decomposes into ⌈n/2⌉paths. When n is even, we can use the
decomposition into n/2 paths that are rotations of the ﬁgure on the left
below. Each path uses two edges of each “length” around the circle, and
each rotation gives a new pair of each length until all n pairs are obtained.
When n is odd, a bit more care is needed. Putting one vertex in the
middle yields a decomposition into (n−1)/2 cycles, by rotating the ﬁgure on
the right below. We can kill one short edge from each cycle to make it into
a path, choosing always the short edge on the right side of the picture, and
these (n −1)/2 leftover edges form a path to complete the decomposition.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
Kn decomposes into ⌊n/2⌋cycles when n is odd. We rotate the cycle
shown in the ﬁgure above.
8.4.29. Decomposition of Kn into spanning connected subgraphs.
a) If Kn decomposes into k spanning connected subgraphs, then n ≥2k.
Each subgraph has at least n−1 edges, and they are pairwise edge-disjoint,
so k(n −1) ≤
 n
2

.
b) K2k decomposes into k spanning trees of diameter 3. Such trees are
double-stars.
Each has 2k −1 edges, so k of them are needed to cover
the k(2k −1) edges of K2k. Partition the vertex set into pairs {xi, yi} for
i ≤i ≤n/2. The ith subgraph consists of xi yi along with the edges xjxi and
yj yi for j < i and the edges xi yj and yi yj for j > i.
8.4.30. Every 2-edge-connected 3-regular simple planar graph decomposes
into paths of length 3, as does every simple planar triangulation. The ﬁrst
statement is a special case of Exercise 3.3.19. For a simple triangulation

481
Chapter 8: Additional Topics
Section 8.5: Random Graphs
482
G, observe that the dual G∗is 2-edge-connected and 3-regular, so it has a
P4-decomposition. Let e′
1, e′
2, e′
3 be the successive edges in one copy of P4 in
the decomposition. Since G∗is 3-regular, e′
1 and e′
2 are on the same face,
as are e′
2 and e′
3. Therefore, the corresponding edges e1 and e2 in G are
incident, as are e2 and e3. Thus e1, e2, e3 form a path or a cycle. It is a cycle
if and only if the endpoints of e1 and e3 are the same vertex, which requires
e′
1 and e′
3 to bound the same face of G∗.
However, this face of G∗also
shares boundary edges with the faces corresponding to the endpoints of e′
2,
since G∗is 3-regular. Therefore, if e1, e2, e3 is a cycle in G, then G must
have multiple edges. The triangulation below shows that the prohibition
of multiple edges is necessary.
•
•
•
•
8.4.31. Theorem 8.4.35 is best possible when m −1 divides n −1. Theorem
8.4.35 states that if the number of edges in an n-vertex graph exceeds m(n−
1)/2, then the circumference exceeds m. We provide an n-vertex graph with
exactly m(n−1)/2 edges in which the circumference is exactly m. The graph
is ( n−1
m−1 Km−1) ∨K1. Each block is isomorphic to Km, and every cycle stays
within a block, so the circumference is m. The number of edges is n−1
m−1
 m
2

,
which simpliﬁes to m(n −1)/2.
8.4.32. If G is a graph such that G is triangle-free and not a forest, then G
has a cycle of length at least n(G)/2. If G is triangle-free, then whenever u
and v are nonadjacent in G they cannot have a common nonneighbor, and
hence d(u) + d(v) ≥n(G) −2. If G is 2-connected, then Theorem 8.4.37
yeilds a cycle of length at least n(G) −2.
If G is not connected, then the prohibition of triangles from G implies
that G has only two components and that they are complete graphs. Hence
one of them has a cycle of length at least n(G)/2.
If G is connected and has a cut-vertex v, then G −v again is a disjoint
union of two complete graphs. Also v cannot have a nonneighbor in both
components. Hence G contains two disjoint complete graphs whose orders
sum to n(G), and again there is a cycle of least at least n(G)/2.
8.4.33. Sufﬁcient conditions for spanning cycles in graphs and digraphs.
Woodall’s Theorem implies Ore’s Theorem. Ore proved that (u ↮v ⇒
d(u) + d(v) ≥n(G)) is sufﬁcient for a spanning cycle in a graph G. Woodall
proved that (u ↮v ⇒d+(u) + d−(v) ≥n(G)) is sufﬁcient for a spanning
cycle in a digraph G.
Given a graph satisfying Ore’s Condition, let G′ be the digraph ob-
tained by replacing each edge of G with two opposing edges having the
same endpoints. Now d+
G′(v) = d−
G′(v) = dG(v). Thus Woodall’s Condition
holds, and Woodall’s Theorem implies that G′ has a spanning cycle, which
yields a spanning cycle in G.
Meyniel’s Theorem implies Woodall’s Theorem for strict digraphs. Let-
ting d(u) = d+(u) + d−(u), Meyniel proved that (u ↮v ⇒d(u) + d(v) ≤
2n(G) −1) is sufﬁcient for a spanning cycle in a digraph G such that each
ordered pair appears at most once as an edge.
Consider a digraph in which each ordered pair of vertices appears at
most once as an edge. If Woodall’s Condition holds, then when u ↮v we
d(u) + d(v) = d+(u) + d−(v) + d−(u) + d−(v) ≥2n(G) > 2n(G) −1.
Thus Meyniel’s Condition holds if we also show that the digraph is strongly
connected. The holds because when d+(u) + d−(v) ≥n(G) −1, there is an
edge or a path of length 2 from u to v. Thus Meyniel’s Theorem applies,
and the digraph has a spanning cycle.
8.4.34. A strict n-vertex digraph has a spanning path if d(u)+d(v) ≥2n −3
for every pair u, v of distinct nonadjacent vertices. Given such a digraph,
add a vertex w with an edge to and from each of the original vertices. Let
G′ denote the new digraph, with degree function d′. Now d′(u) + d′(v) =
d(u) + d(v) + 4 ≥2n + 1 = 2(n + 1) −1. Also G′ is strongly connected,
since each vertex can get to and from w. By Meyniel’s Theorem, G′ has a
spanning cycle. Since this passes through w only once, deleting w leaves a
spanning path in G.
8.5. RANDOM GRAPHS
8.5.1. Expectation.
a) The expected number of ﬁxed points in a random permutation of
[n] is 1. Since there are (n −1)! permutations with element i ﬁxed, the
probability that i is ﬁxed is 1/n. Letting Xi be the indicator variable for
element i being ﬁxed, we have P Xi as the random variable for the number
of ﬁxed points. By linearity, E(P Xi) = P E(Xi) = n(1/n) = 1.
b) The expected number of vertices of degree k in a random n-vertex
graph with edge probability p is k
 n−1
k

pk(1 −p)n−1−k. A vertex has degree
k when there are k successes among the n −1 trial for its incident edges.
The probability of this is
 n−1
k

pk(1 −p)n−1−k. Letting Xi be the indicator

483
Chapter 8: Additional Topics
Section 8.5: Random Graphs
484
variable for vertex i having degree k, the expected number of vertices of
degree k becomes kP(Xi = 1), by linearity.
8.5.2. Always 1 −p < e−p for p > 0. For p = 0, equality holds. Hence it
sufﬁces to show that the derivative of e−p exceeds that of 1 −p for p > 0.
We have (d/dp)e−p = −e−p > −1 = (d/dp)(1−p), where the key inequality
holds for p > 0. (The inequality also holds for p < 0, because the terms in
the series for e−p are then all positive.)
8.5.3. The expected number of monochromatic triangles in a random 2-
coloring of E(K6) is 15/4. When the edges are given red or blue with proba-
bility 1/2 each, independently, the probability that three vertices produce a
monochromatic triangle is 1/4. There are
 6
3

triples where this may occur.
By linearity of expectation, the expected number of occurrences is 15/4,
even though the events are not independent.
8.5.4. Some 2-coloring of the edges of Km,n has at least
 m
r
 n
s

21−rs monochro-
matic copies of Kr,s. We color the edges red or blue with probability 1/2
each, independently. A particular choice of r vertex in one partite set and s
vertices in the other produces a monochromatic copy of Kr,s with probabil-
ity 21−rs. Since there are
 m
r
 n
s

ways to choose the vertex sets, by linearity
the expected number of copies is
 m
r
 n
s

21−rs, so some outcome of the exper-
iment is a 2-coloring with that many monochromatic copies of Kr,s. (Note:
The coefﬁcient increases to
 m
r
 n
s

+
 m
s
 n
r

if r ̸= s and we don’t care which
partite set contains the bigger part of the subgraph.)
8.5.5. The statement “(1−ε)n ≤f (Gn) ≤(1+ε)n when ε > 0 for sufﬁciently
large n” is equivalent to “ f (Gn)/n →1 as n →∞”, written as “ f (Gn) ≤
n +o(n)”. Let g(n) = f (Gn)/n. If g(n) →1, then for all ε > 0 there exists N
such that n > N implies |g(n) −1| < ε, by the deﬁnition of convergence of
sequences. The inequality |g(n) −1| < ε (for sufﬁciently large n) is simply
the ﬁrst statement here.
8.5.6. Probability that the probability that the Hamiltonian closure C(G)
of a random graph G with vertex set [5] is complete. The problem is to
determine the fraction of the graphs with vertex set [5] that have complete
closure. We describe the graphs, without doing the counting.
If δ(G) ≤1, then C(G) is not complete; a vertex of degree at most 1
never acquires another edge, because every vertex of degree n(G) −1 is
already adjacent to it.
If nonadjacent vertices have degree some at least n(G), then all re-
maining edges are added immediately and the closure is complete.
Therefore, with ﬁve vertices, it sufﬁces to consider graphs having non-
adjacent vertices of degree 2. Among the remaining graphs, we have 5 ≤
e(G) ≤7 for such graphs. All such graphs with ﬁve edges are 5-cycles,
which gain no edges. With six edges we can have K2,3, which gains one
edge and does not become complete, or the union of a 3-cycle and a 4-cycle
sharing one edge, whose closure is complete. With seven edges we have
only K2 ∨K 3 and the graph below; K2 ∨K 3 is already closed and gains no
edges, but the closure of the graph below is complete.
•
•
•
•
•
8.5.7. If G is a graph with p vertices, q edges, and automorphism group of
size s, and n = (skq−1)1/p, then some k-coloring of E(Kn) has no monochro-
matic copy of G. Produce a k-coloring of the edges at random, with each
edge receiving each color with probability 1/k, independently. A particu-
lar copy of G in Kn becomes monochromatic with probability k · 1/k)q. On
a given set of p vertices, there are p!/s copies of G. If
 n
p
 p!
s k1−q < 1, then
there is an outcome of the experiment in which no copy of G is monochro-
matic. Since
 n
p

< n p/p!, the desired inequality holds when n p < skq−1.
8.5.8. Bipartite subgraphs.
a) Every graph has a bipartite subgraph with at least half its edges.
Select a random vertex subset A by choosing each vertex with probability
1/2, independently. Each edge has probability 1/2 of belonging to the cut
[A, A], since this is the probability that exactly one of its endpoints lies in A.
By linearity of expectation, the expected number of edges in the cut is half
the total number of edges. The edges in a cut form a bipartite subgraph,
so there is a bipartite subgraph with at least half the edges.
b) If G has m edges and n vertices, then G has a bipartite subgraph with
at least m
⌈n/2⌉
2⌈n/2⌉−1 edges. Choose A at random from all ⌈n/2⌉-element vertex
subsets. The number of these subsets containing exactly one endpoint of a
given edge e is 2
 n−2
⌈n/2⌉−1

. Thus e belongs to the cut [A, A] with probability
2
 n−2
⌈n/2⌉−1

/
 n
⌈n/2⌉

. Since
 n
⌈n/2⌉

=
n
⌊n/2⌋
  n−1
⌈n/2⌉

=
n
⌊n/2⌋
n−1
⌈n/2⌉
 n−2
⌈n/2⌉−1

, the proba-
bility is 2⌊n/2⌋⌈n/2⌉
n(n−1)
. Since n(n−1)
2⌊n/2⌋= 2 ⌈n/2⌉−1, linearity of expectation yields
m
⌈n/2⌉
2⌈n/2⌉−1 as the expected size of the cut, and some cut is at least this large.
This fraction of the number of edges is strictly more than .5, so this result
improves part (a).
8.5.9. If in a complete k-ary tree with leaves at distance l from the root, the
vertices fail independently with probability p, then the expected number of
nodes accessible from the root is (1 −p) 1−(k−kp)l+1
1−k+kp
. There are k j vertices at
depth j (distance j from the root). A vertex at depth j is accessible if and
only if it and its ancestors are alive. Thus it is accessible with probability

485
Chapter 8: Additional Topics
Section 8.5: Random Graphs
486
(1 −p) j+1. Using linearity of the expectation, the expected number of ac-
cessible nodes is Pl
j=0(1 −p)(k −kp) j. When p = 1/k, this is simply 1 −p.
Otherwise, the expectation is (1 −p) 1−(k−kp)l+1
1−k+kp
.
8.5.10. The expected number of edges in a matching of size n that are
induced by selected k vertices at random is
n
2
k(k−1)
(n−1)(2n−1).
There are sev-
eral proofs; using linearity of expectation makes the computations simple.
There are
 2n−2
k−2

sets of size k that capture a particular pair of vertices.
Hence each edge is captured with probability
k(k−1)
(2n−2)(2n−1). By linearity, the
expected number of edges in the matching that are captured is n
k(k−1)
(2n−2)(2n−1).
8.5.11. If a graph G has n vertices and m edges, with m ≥4n, then ν(G) ≥
m3/[64n2], where ν(G) denotes the minimum number of crossings in a draw-
ing of G. Let G have n vertices and m edges, with m ≥4n, and consider a
drawing of G in the plane. To obtain a lower bound on cr (G), we take a
random induced subdrawing H, including each vertex independently with
probability p. We expect pn vertices and p2m edges in H. Let Y be the
number of edge crossings in the drawing of G that remain in H. We have
E(Y) = p4cr (G), since all four endpoints of the two edges must be retained
to keep the crossing.
Let X = 3n(H) −6 + Y −e(H). Always Y ≥e(H) −(3n(H) −6), since
a planar graph with v vertices has at most 3v −6 edges, and every edge
beyond a maximal plane subgraph of H introduces at least one additional
crossing. Thus always X ≥0. We conclude that E(X) ≥0.
By linearity, E(X) = 3np −6 + p4cr (G) −p2e(G). This yields 3n +
p3cr (G) −pm > 0. We choose p = 4n/m, which is feasible since m ≥4n.
We now have the inequality 3n + 64n3/m3cr (G) > 4n, which yields the
desired bound.
8.5.12. In a random orientation of the vertices of a simple graph G, pro-
duced by orienting each edge toward the vertex with higher index in a
random permutation, the expected number of sink vertices (outdegree 0) is
P
v∈V (G)
1
d(v)+1, which ranges from 1 to n(G).
A vertex is a sink in the resulting orientation if and only if it follows all
its neighbors in the permutation. For each vertex v, whether this happens
is determined only by whether it is last among the set N[v], which happens
with probability (1 + d(v))−1. By linearity, the expected number of sinks is
P
v∈V (G)
1
d(v)+1. (Note that the sinks form an independent set, so this is also
a lower bound on α(G).)
Given the formula for the expectation, it is minimized by increasing
degrees and maximized by reducing degrees, so it is minimized by the com-
plete graph, where the number of sinks is always 1, and it is maximized by
the trivial graph, where every vertex is always a sink. Among connected
graphs, it is maximized by the path, where the value is (n + 1)/3.
In order to have only one sink, the last two vertices in the random
permutation must be adjacent. When the last vertex has degree d, then
with probability n−1−d
n−1
the next-to-last vertex is a nonneighbor of it. Thus
the probability of having at least two sinks is at least 1
n
Pn
i=1
n−1−di
n−1 , which
simpliﬁes to 1−1
n
1
n−1
Pn
i=1 di. Invoking the Degree-Sum Formula, the prob-
ability of having only one sink is at most e(G)/
 n
2

.
8.5.13. Bound on choosability of n-vertex bipartite graphs.
a) Every k-uniform hypergraph with fewer than 2k−1 edges is 2-
colorable. Let H be a k-uniform hypergraph with n edges, where n < 2k−1.
Color vertices by X and Y so that each gets color X with probability 1/2, in-
dependently. The probability that a given edge is monochromatic is 2−(k−1).
Since n < 2k−1, the probability that some edge is monochromatic is less
than 1. Hence some outcome of the experiment is a proper 2-coloring of H.
Since H has n edges and n < 21+⌊lg n⌋, the hypergraph H is 2-colorable
(in a random coloring of a k-uniform hypergraph with fewer than 2k−1
edges, the expected number of monochromatic edges is less than 1).
A
proper 2-coloring of H partitions its vertices into Type X and Type Y.
b) If each vertex of an n-vertex bipartite graph is given a list of more
than 1 + lg n usable colors, then a proper coloring can be chosen from the
lists. Let G be an X, Y-bigraph with n vertices and such a list assignment.
Let H be an auxiliary hypergraph whose vertices are the colors in the lists.
Each vertex v ∈V (G) generates an edge in H consisting of the colors in
L(v). We may reduce the sizes of the lists so that H is k-uniform, where
k = 2 + ⌊lg n⌋. Thus k −1 > lg n. By part (a), H is 2-colorable; we call the
colors Type X and Type Y.
In choosing an L-coloring for G, we must restrict each color to usage
in only one partite set. Colors having Type X in the coloring of X will only
be used on partite set X; those of Type Y will only be used on Y. Since H
was properly 2-colored, each list has colors of both types. If v ∈X, then
we choose a color of Type X from L(v); if v ∈Y, then we choose a color of
Type Y from L(v). Since each color is chosen on only one partite set in G,
we have obtained an L-coloring.
8.5.14. A graph with n vertices and average degree d ≥1 has an indepen-
dent set with at least n/(2d) vertices. Note that G has nd/2 edges. Let
S ⊆V (G) be generated at random by including each vertex independently
with probability p. If S has X vertices and Y edges, then S contains an inde-
pendent set of size at least X −Y, by deleting a vertex of each induced edge.
We will choose p to maximize E(X −Y), since there will be an independent
set at least that large.

487
Chapter 8: Additional Topics
Section 8.5: Random Graphs
488
By linearity of expectation, E(X −Y) = E(X) −E(Y). We have E(X) =
np. Similarly, the probability that a speciﬁed edge of G is induced by S is
p2, since both its endpoints must be included, so E(Y) = p2nd/2. Hence
E(X −Y) = np(1 −pd/2). We choose p = 1/d to maximize this, which is
valid since d ≥1, obtaining E(X −Y) = n/(2d).
8.5.15. ex(n; Ck) ∈(n1+1/(k−1)). We seek an n-vertex graph with many
edges and no k-cycle. We generate a random graph in Model A with some
edge probability p. If the expected number E(Y) of k-cycles is much less
than the expected number E(X) of edges, then deleting an edge from each
k-cycle in some graph where X −Y is large leaves a graph with many edges
and no k-cycle.
Given edge probability p, we have E(X) =
 n
2

p and E(Y) =
 n
k
 1
2(k −
1)!pk. If we can choose p so that E(Y) <
1
2 E(X), then 1
2 E(X) will be a
lower bound on ex(n; Ck).
Using
 n
k

< nk−1(n −1)/k!, we have E(Y) <
1
2k (n −1)p(np)k−1. It sufﬁces to have 1
2k (n −1)p(np)k−1) ≤1
4n(n −1)p, which
is implied by nk−2 pk−1 ≤1. Hence we choose p = n(k−2)/(k−1). Now there is
a Ck-free graph of size at least 1
2
 n
2

p, which is asymptotic to 1
4n1+1/(k−1).
In the particular case k = 4, this lower bound of (n4/3) compares
with an upper bound of O(n3/2).
A graph with m edges contains C4 if
and only if some pair of vertices has two common neighbors.
Recall
that the counting argument and the convexity of quadratics yield
 n
2

≥
P
v∈V (G)
 d(v)
2

≥n
 2m/n
2

, and that the resulting quadratic inequality yields
m ≤n
4(1 +
√
4n −3).
8.5.16. R(k, k) > n −
 n
k

21−(
k
2) for all n ∈N, and hence R(k, k) > (1/e)(1 −
o(1))k2k/2. Generate a random 2-coloring of E(Kn); let X be the resulting
number of monochromatic copies of Kk. Each k-set contributes to X with
probability 21−(
k
2). Since there are
 n
k

of these sets, E(X) =
 n
k

21−(
k
2). Some
outcome of the experiment has at most E(X) bad sets, and deleting a vertex
from each such set in such an outcome yields a coloring that establishes
the lower bound.
8.5.17. For n ∈N, there is a 2-coloring of E(Km,m) with no monochromatic
copy of Kt,t when m = n−
 n
t
221−t2. Generate a random 2-coloring of E(Kn,n);
let X be the resulting number of monochromatic copies of Kt,t. Each choice
of t vertices from each partite set counts with probability 21−t2. Since there
are
 n
t
2 of these sets, E(X) =
 n
t
221−t2. In some outcome of the experiment,
X has value at most E(X), and deleting a vertex (in each partite set) from
each monochromatic copy of Kt,t in such an outcome yields a coloring that
establishes the lower bound.
8.5.18. Off-diagonal Ramsey numbers. This problem repeats parts (a) and
(b) of Exercise 8.3.20.
8.5.19. For a ﬁxed graph H and constant edge-probability p, almost every
G p contains H as an induced subgraph.
Let k and l be the number of
vertices and edges in H.
The probability that a given set of k vertices
induces H is k!
A pl(1 −p)(
k
2)−l, where A is the number of automorphisms of
H; let this probability be q. Since k,l, p, A are all constant, q is a constant.
Appearances of H at disjoint sets of vertices are independent. Splitting
[n] into n/k disjoint sets, the probability that none of them induce H is
(1 −q)n/k. Since q is constant, this probability tends to 0 as n →∞.
8.5.20. Common neighbors and nonneighbors.
a) For constant k, s, t, p, almost every G p has the following property:
for every choice of disjoint vertex sets S and T of sizes s and t, there are
at least k vertices that are adjacent to every vertex of S and no vertex of
T . Let X be the number of bad choices for S and T in G p; we need only
show that E(X) →0. For the ith way to choose S, T ⊆V (G), deﬁne an
indicator variable Xi with value 1 when there are fewer than k choices of a
vertex v such that S ⊆N(v) and T ⊆N(v). For v /∈S ∪T , failure requires
s speciﬁed adjacencies and t speciﬁed nonadjacencies, so Xi = 1 requires
more than n−s −t −k failures in n−s −t trials when the failure probability
is ps(1 −p)t.
We complete the proof only for k = 1; for larger k a binomail tail bound
is needed. When k = 1, P(Xi = 1) = (1 −ps(1 −p)t)n−s−t. Since X = P Xi,
we count the variables Xi (choices of S, T ) by the multinomial coefﬁcient to
obtain
E(X) =
 n
s,t,n−s−t

(1 −ps(1 −p)t)n−s−t.
For ﬁxed s, t, p, the multinomial coefﬁcient is a polynomial in n.
It is
bounded by ns+t, while E(Xi) dies exponentially as n →∞. The logarithm
of the product approaches −∞, and thus E(X) →0.
•
S
T
v
b) Almost every G p is k-connected. If the computation for general k is
completed, then it sufﬁces to set s = 2 and t = 0 to obtain that in almost
every graph, every two vertices have k-common neighbors.

489
Chapter 8: Additional Topics
Section 8.5: Random Graphs
490
c) Almost every tournament has the property that for every choice of
disjoint vertex sets S, T of sizes s, t, there are at least k vertices with edges
to every vertex of S and from every vertex of T . The argument is essentially
the same, using p = 1/2 and orienting each edge randomly.
8.5.21. Random tournaments.
a) Almost every tournament is strongly connected. This follows by es-
sentially the same computation as part (b): in almost every tournament,
for every ordered pair (x, y) of vertices, there is a vertex w such that x →w
and w →y, so every vertex reaches every other. Alternatively, this follows
also from the statement of part (b).
b) In almost every tournament, every vertex is a king. The criterion
for every vertex being a king is that every vertex be reachable from every
other vertex by a path of length at most 2. Let X be the number of ordered
pairs of vertices where this fails. For a given pair (x, y) failing to reach y
from x by a path of length at most 2 requires that for each other vertex
w, the edges xw and wy are not both oriented away from x and toward y.
Hence the probability that the ordered pair (x, y) fails is bounded above by
(3/4)n−2 (the edge xy yields another factor of 1/2, but this is not important).
Since there are n(n −1) ordered pairs, E(X) < n2(3/4)n−2. The bound
tends to 0 as n →∞, so by Markov’s Inequality almost every tournament
has no bad pairs and thus has every vertex being a king.
8.5.22. Edge probability 1/2 is a sharp threshold for the property that at
least half the possible edges of a graph are present. Let X be the number
of edges in G p.
When p = 1/2, E(X) =
1
2
 n
2

.
The distribution of X is
binomial, and we ask how highly concentrated the distribution is to study
the probability of having at least half the edges when we vary p. Although
tighter bounds are available, the Chebyshev bound sufﬁces for our purpose.
We have P(|X −E(X)| ≥t) ≤V/t2, where V = [E(X 2) −(E(X))2]. Direct
computation, using the expression of X as a sum of indicator variables,
yields V = Np(1 −p), where N is the number of trials (here N =
 n
2

).
If p = .5 −ε with ε constant, then E(X) is below 1
2
 n
2

by an amount
that is quadratic in n. In considering X ≥1
2
 n
2

, we are asking for t to be
quadratic in n, and the bound on the probability of having at least half the
edges tends to 0. Even if we set p = .5 −c log n/n, then still P(X ≥1
2
 n
2

)
tends to 0. Similarly, if p = .5 + c log n/n, the analogous argument shows
that the probability of having at most half the edges goes to 0.
8.5.23. For p = 1/n and ﬁxed ε > 0, almost every G p has no component
with more than (1 + ε)n/2 vertices.
A connected graph with m + 1 ver-
tices has at least m edges, so it sufﬁces to show that almost every G p has
fewer than (1 + ε)n/2 edges. The number of edges is a binomial random
variable; its expectation
 n
2

p equals (n −1)/2. The probability that a bino-
mial random variable exceeds its expectation by a constant fraction (here
ε/2) is exponentially small in the number of trials. Even so, the weaker
Chebyshev bound sufﬁces to show this approaches 0. (We may ignore the
.5 in E(X) = n/2 −.5 by using a slightly larger choice of ε.)
We have
P(|X −E(X)| ≥εn/2) ≤V/(εn/2)2, where V = [E(X 2) −(E(X))2]. The
expectation of X 2 for
 n
2

independent trials is found by
E(X 2) = E(X) +
 n
2

(
 n
2

−1)p2 ∼E(X)2 = (
 n
2

p)2
Thus V = o(n4 p2) = o(n2).
Since the denominator is (n2), the ratio
bounding the probability approaches 0.
8.5.24. The smallest connected simple graph that is not balanced is the 5-
vertex graph consisting of a kite plus a pendant edge. If G is unbalanced,
then some induced subgraph has larger average degree than G. For the
smallest such graph G, we obtain the offending subgraph by deleting one
vertex. In Exercise 1.3.44a, we showed that the average degree increases
when a vertex x is deleted from an n-vertex graph with average degree a if
and only if d(x) < a/2 (since 2e(G−x)
n−1
= 2[e(G)−d(x)]
n−1
= na−2d(x)
n−1
).
Since G is connected, every degree is positive.
Hence the smallest
example will occur by deleting a leaf from a graph with average degree
exceeding 2.
For average degree exceeding 2, at least four vertices are
needed. With four vertices, no graph with at least ﬁve edges has a leaf.
With ﬁve vertices, we need at least six edges in a graph obtained by ap-
pending a leaf to a 4-vertex graph with at least ﬁve edges. A kite with a
pendant edge has this property.
8.5.25. In terms of the number n of vertices, n−1/ρ(H) is a threshold proba-
bility function for the appearance of H as a subgraph of G p, where ρ(G) =
maxG⊆H e(G)/n(G). We extend the second moment argument of Theorem
8.5.23. Let F be a subgraph of H with density ρ(H). This subgraph F is
balanced, and the ﬁrst moment argument in Theorem 8.5.23 shows that if
pnρ(H) →0, then almost every G p has no copy of F and hence no copy of H.
To show that n−1/ρ(H) is a threshold probability function for the appear-
ance of H, we must also show that pnρ(H) →∞implies that almost every
G p has a copy of H. An easy modiﬁcation of the second moment argument
in Theorem 8.5.23 (due by Ruci ´nski and Vince) completes the proof.
Let X be the random variable counting the copies of H. We follow
the same argument as for balanced graphs, and it sufﬁces to prove that
E(X 2)−> E(X)2 when pn1/rho →∞. The proof of this is the same as for
the balanced case Theorem 8.5.23 up to point in the last paragraph where
the balance condition is invoked. Replace that portion with the following:

491
Chapter 8: Additional Topics
Section 8.5: Random Graphs
492
“The desired behavior of n−r p−s is equivalent to pnr/s →∞. Since s/r
is the density of H ′, we have s/r ≤ρ. This forces pnr/s ≥pn1/rho →∞
when c > 0.”
8.5.26. Almost every graph (with edge probability p) has the property that
for every choice of disjoint vertex sets S, T of size c log1/(1−p) n with c > 2),
there is an edge with endpoints in S and T . (For p = 1/2, the formula
reduces to c lg n.)
Let X be the number of choices of disjoint sets S and T of this size with
no edge between them. By Markov’s Inequality, it sufﬁces to show that
E(X) →0 when c > 2), because then the probability that Qk occurs tends
to 1. We have E(X) ∼
1
k!2 n2k(1 −p)k2. Writing this as c′(n2(1 −p)k)k), it
sufﬁces to have n2(1 −p)k < 1. This requires k > 2 log1/(1−p) n. Thus it
sufﬁces to choose c > 2 in the expression for |S| and |T |.
8.5.27. If k = lg n −(2 + ε) lg lg n, then almost every n-vertex tournament
has the property that every set of k vertices has a common successor. The
probability that a k-set fails to have a common successor is (1 −2−k)n−k,
since this requires that each vertex outside the set is not a common suc-
cessor. Let X be the number of k-sets with no common successor; we have
E(X) =
 n
k

(1 −2−k)n−k. An upper bound on E(X) is
  ne
k
k e−2−k(n−k). If this
bound tends to 0 for some choice of k in terms of n, then almost every
tournament has the property for this choice of k.
To suggests the appropriate k, we choose k so that
  ne
k
k grows more
slowly than e2−k(n−k). Taking natural logarithms, we want k(1+ln n−ln k) <
2−k(n −k). Now taking base-2 logarithms, we want
lg k + lg ln n + lg(1 −(ln k)−1
ln n
) < −k + lg n + lg(1 −k
n).
Roughly speaking, we want k + lg k < lg n −lg ln n. Thus k should
be enough less than lg n that adding lg k still keeps the value less than
lg n −lg ln n. Converting from ln n to lg n on the right only introduces an
additive constant, since the ln n is inside lg. The ε in the deﬁnition of k is
more than enough to take care of that.
Setting k as speciﬁed above yields E(X) →0, and the property almost
always holds.
8.5.28. Transitive subtournaments.
Every n-vertex tournament has a transitive subtournament with lg n
vertices. We prove by induction on n that every n-vertex tournament has a
transitive subtournament with at least 1 + ⌊lg n⌋vertices. The statement
holds trivially for n = 1.
When n > 1, a vertex x with maximum outdegree has outdegree
at least ⌊n/2⌋.
In the subtournament induced by the successors of x,
the induction hypothesis yields a transitive subtournament with at least
1 + ⌊lg(⌊n/2⌋)⌋vertices. This equals ⌊lg n⌋in all cases. Adding x produces
a transitive tournament of order 1 + ⌊lg n⌋in the original tournament.
For c > 1, almost every tournament has no transitive subtournament
with more than 2 lg n + c vertices. In the random tournament (each edge is
directed toward the lower vertex with probability 1/2), let X be the number
of transitive subtournaments of order k.
For each set of k vertices, the
possible transitive tournaments correspond to the k! linear orderings of
the vertices. Hence E(X) =
 n
k

k!2−(
k
2).
It sufﬁces to show that E(X) →0 (equivalently, lg E(X) →−∞) when
k exceeds 1 + 2 lg n by any constant. We have E(X) < nk2−(
k
2), which we
write as lg E(X) < k[lg n −(k −1)/2]. This bound is a decreasing function
of k if lg n −(k −1)/2 < 0. Therefore, we obtain a valid upper bound on
lg E(X) for all larger k if we set k = 1 + ε + 2 lg n.
For further simpliﬁcation, let m = 1 + lg n, so k = 2m −1 + ε. The ﬁnal
computation is
lg E(X) < (2m −1 + ε)[m −1 −(m −1 + ε
2)] = (2m −1 + ε)( −ε
2 ) →−∞.
8.5.29. Geometric random variable / Coupon Collector.
a) Under repeated trials of an experiment with success probability p
on each trial, independently, the expected number of the trial when the ﬁrst
success occurs is 1/p. Let X be the random variable for the trial on which
the ﬁrst success occurs.
Proof 1 (computation). The probability of X = k is (1−p)k−1 p. By the
deﬁnition of expectation, behavior of geometric series, and differentiation
of convergent series,
E(X) =
∞
X
k=1
kp(1−p)k−1 = p d
dp
∞
X
k=0
−(1−p)k = p d
dp
−1
1 −(1 −p) = p 1
p2 = 1
p.
Proof 2 (conditional expectation). Let z = E(X). If the ﬁrst trial is a
failure, then the remainder of the experiment is a repetition of the original
experiment. Hence z = p·1+(1−p)·(1+z), which yields pz = p+(1−p) =
1, so z = 1/p.
Proof 3 (linearity). Let Xi be the event that the ﬁrst i trials fail. Now
X = 1 + P∞
i=1 Xi, and E(X) = 1 + P∞
i=1 P(Xi = 1) = P∞
i=0(1 −p)i = 1/p.
b) Given independent trials with n outcomes, each with probability 1/n,
the expected number of trials to obtain all outcomes is n Pn
i=1 1/i. Let X be
the number of trials taken to obtain all outcomes. Let Xi be the number of
trials after i −1 of the outcomes have been obtained, up to and including
the trial on which for the ﬁrst time i outcomes have been obtained. We

493
Chapter 8: Additional Topics
Section 8.5: Random Graphs
494
have X = Pn
i=1 Xi. When we have obtained i −1 of the outcomes, a given
trial provides a new outcome with probability n−i+1
n
. Hence the variable Xi
is a geometric random variable with success probability n−i+1
n
. Using part
(a) and linearity of expectation, and reversing the order of summation and
letting j = n + i −i, we obtain E(X) = n Pn
j=1 1/j.
c) A threshold function m(n) for the number of boxes needed to obtain
more than k copies of each prize is given by m(n) = n ln n + kn ln ln n. Let
X be the number of target points hit at most k times. For each r ∈[n], the
probability that f −1(r) has size j is
 m
j

p j(1 −p)m−j, where p = 1/n. The
probability that f −1(r) has size at most k is the summation of this up to
j = k. Let this probability be b; thus E(X) = nb.
We claim that the contribution to b from terms with j < k is of lower
order than the term when j = k. Let α = (1 −p)m−k+1. We bound the sum
by a multiple of a geometric sum. If mp →∞, this yields
b = Pk−1
j=0
 m
j

p j(1 −p)m−j ≤α Pk−1
j=0(mp)i = α (mp)k−1
mp−1
∼α(mp)k−1
On the other hand,
 m
k

pk(1 −p)m−k is bounded below by a constant times
α(mp)k. Hence mp →∞and k constant yields b ∼
 m
k

pk(1 −p)m−k.
We want to choose m(n) so that nb approaches 0 or ∞, depending on
the choice of a parameter in m(n). Since k is constant, (1 −p)k →1 and
the binomial coefﬁcient in the top term is asymptotic to mk/k!. Thus b ∼
1
k!mk pk(1 −p)m. Also np2 →0, so 1 −p is asymptotic to e−p.
With m(n) = n ln n + cn ln ln n, we have mp = ln n + c ln ln n ∼ln n and
emp = n(ln n)c. We now compute
E(X) = nb ∼n (mp)k
k!emp ∼n
(ln n)k
k!n(ln n)c = 1
k!(ln n)k−c.
If c > k + ε, then E(X) →0, and almost always every target point is
hit more than k times. If c < k −ε, then E(X) →∞. The Second Moment
Method then will imply that almost always some target point is hit at most
k times if we prove that E(X 2) ∼E(X)2.
Let X = Pn
r=1 Xr, where Xr is the event that
 f −1(r)
 ≤k. The proba-
bility that
 f −1(r)
 = i and
 f −1(s)
 = j is
 m
i, j,m−i−j

pi p j(1 −2p)m−i−j, from
the multinomial distribution. Thus sum of this over i, j both at most k
equals E(Xr Xs). Again because m grows while k is ﬁxed, the sum is asymp-
totic to the single term with i = j = k. Here the multinomial coefﬁcient is
asymptotic to m2k/(k!k!). With the other approximations as above, we have
E(X2) = E(X) + P
r<s E(Xr Xs) ∼E(X) + n2b2 ∼E(X)2.
8.5.30. The length of the longest constant run in a list of n random heads
and tails is (1 + o(1)) lg n. Let X be the number of runs of length k in a
random list of n ﬂips. A set of k consecutive ﬂips agrees with probability
2 · 2−k. There are n −k + 1 such sets. Hence E(X) = (n −k + 1)2−k+1. Let ε
be a ﬁxed small positive constant.
If k ≥(1 + ε) lg n, then E(X) →0, which implies that almost every list
has no run as long as (1 + ε) lg n.
If k ≤(1 −ε) lg n, then E(X) →∞. If also E(X 2) →E(X)2, then by
the Second Moment Method P(X = 0) →0, which implies that almost
every list has at least one run as long as (1 −ε) lg n. Since X is the sum of
n −k + 1 indicator variables, we have E(X 2) = E(X) + P
i̸= j Xi X j. When
the locations corresponding to Xi and X j are disjoint, the events Xi = 1
and X j = 1 are independent. When they overlap, the probability that both
are 1 is bounded by 22k−2.
The essence of the computation is that almost all of the expectation
comes from independent events. When the segments overlap, their starting
points differ by less than k. There are at most 2(n −j) ordered pairs where
the difference in the starting locations is j. As j varies, fewer than 2nk
ordered pairs of k-segments are overlapping. Hence at least (n −k + 1)(n −
k) −2nk ordered pairs of variables satisfy P(Xi X j) = 22(−k+1).
Since we only need the leading behavior of E(X 2), we compute E(X 2) =
n2−k+1 + n222(−k+1) −4nk22(−k+1) + O(nk) ∼E(X)2.
Comment: This side of the threshold can also be derived by the ﬁrst
moment method. Using ⌊n/k⌋disjoint segments, where k = (1 −ε) lg n,
the constancy of these segments are independent events. Each occurs with
probability 2 · 2−k, so the probability p that none occurs is (1 −2 · 2−k)⌊n/k⌋.
We have
p ≤(1 −2/n1−ε)⌊n/k⌋< e−2/n1−ε(2n/k) = e−(4/k)nε →0,
so almost every sequence has a run at least this long.
8.5.31. With p = (1−ε) log n/n, almost every graph has at least (1−o(1))nε
isolated vertices. Let X be the random variable counting the isolated ver-
tices; we have E(X) = n(1 −p)n−1. Let m be a desired threshold, with
m < E(X). By Chebyshev’s Inequality,
P(X < m) = P(X −E(X) < m −E(X)) < P(|X −E(X)| ≥E(X) −m)
≤E(X 2) −E(X)2
(E(X) −m)2 .
We have X ≥m almost always if m is chosen so this bound approaches 0.
If p = (1 −ε) log n/n for constant ε, then E(X) ∼nε. We have also
computed E(X 2) ∼n2ε; this was what was required of the second mo-
ment method to obtain the threshold for disappearance of isolated vertices.
Hence E(X 2) −E(X)2 ∈o(E(X)2), and we may choose m = (1 −δ)E(X) =

495
Chapter 8: Additional Topics
Section 8.5: Random Graphs
496
(1 −δ)neps for any δ > 0.
It is possible to make m closer to E(X), but
this requires more accurate estimates of E(X 2) and E(X), since the leading
behavior cancels when E(X)2 is subtracted from E(X 2).
8.5.32. The threshold size k for bad k-sets in G p, where p is ﬁxed and a k-
set S is bad if its vertices have no common neighbor, is log1/p
n
c ln n with the
parameter c = 1. This scenario is obtained from that of Exercise 8.5.20 by
setting t = 0, redeﬁning s as k, and turning that k into 0, except that |S|
is no longer ﬁxed; we seek a threshold. Below the threshold (c < 1), k-sets
are small enough and leave enough vertices outside so that almost always
every k-set has a common neighbor.
Let X be the number of bad k-sets. A vertex v outside a k-set S fails to
be a common neighbor with probability 1 −pk. The probability of having
no common neighbor is (1 −pk)n−k, so E(X) = n(1 −pk)n−k < ne−pk(n−k). If
pk(n −k) ∼c ln n with c = 1 + ε, then E(X) →0. Hence we set pk = c ln n
n ,
which translates to k = log1/p
n
c ln n .
Since pk →0, 1−pk ∼e−pk, and hence E(X) →∞when k = log1/p
n
c ln n
with c = 1 −ε. Now the second moment method can be used to show that
P(X > 0) →1. We need to show E(X 2) ∼E(X)2.
Consider the indicator variables for individual k-sets. If X1 and X2 cor-
respond to disjoint k-sets, then E(Xi X j) = E(Xi)2. The number of ordered
pairs of this sort is the multinomial coefﬁcient
 n
k,k,n−2k

, which is asymp-
totic to n2k/k!2. The terms that come from overlapping k-sets are fewer; the
number of them is bounded by a multiple of n2k−1. Since that k in the expo-
nent grows with ln n, there remains work to do, but the idea in the second
moment method here is to show that asymptotically all the contribution to
E(X 2) comes from terms that sum to roughly E(X)2.
8.5.33. If p is ﬁxed and k = k(n) ∈o(n/ log n), then almost every G p is
k-connected. (sketch) It sufﬁces to show that almost every G p has the prop-
erty that any two vertices have k common neighbors.
We consider the
expected number of vertices failing this. Two vertices fail this with proba-
bility b(n −2, p2, k −1), where b(m, q,l) is the probability of having at most
l successes in m independent trials with success probability q.
When l = o(m), b(m, q,l) is bounded by a multiple of the top term in
the sum,
 m
l

ql(1 −q)m−l (proof omitted). Applying this enables us to show
that
 n
2

b(n −2, p2, k −1) →0 when k ∈o(n/ log n).
8.5.34. This duplicates Exercise 8.5.31.
8.5.35. A t-interval is a subset of R that is the union of at most t intervals.
The interval number of a graph G is the minimum t such that G is an
intersection graph of t-intervals (each vertex is assigned a set that is the
union of at most t intervals). Prove that almost all graphs (edgeprobability
1/2) have interval number at least (1 −o(1))n/(4 lg n). (Hint: Compare the
number of representations with the number of simple graphs. Comment:
Scheinerman [1990] showed that almost all graphs have interval number
(1 + o(1))n/(2 lg n).) (Erd˝os–West [1985])
8.5.36. Threshold for complete matching in random bipartite graph. Let G
be a random labeled subgraph of Kn,n, with partite sets A, B and indepen-
dent edge probability p = (1+ε) ln n/n. Call S a violated set if |N(S)| < |S|.
a) If ε < 0, then almost surely G has no complete matching. Although
the probability that no vertex in A is isolated is [1−(1−p)n]n, it is not easy
to show that this approaches 0 when ε < 0.
If X is the number of isolated vertices in A, then E(X) = n(1−p)n. With
p = o(1/√n), this yields E(X) ∼ne−np = n−ε. Hence E(X) →∞if ε < 0.
Because the 0,1-random variables Xi that contribute to X are independent,
we have (E(X))2 = E(X) + n(n −1)E(Xi X j) ∼n2(1 −p)2n = E(X)2, and the
second moment method yields the claim.
b) If S is a minimal violated set, then |N(S)| = |S| −1 and G[S ∪N(S)]
is connected. If |N(S)| < |S| −1, then S −x is a violated set, for any x ∈S.
If G[S ∪N(S)] is not connected, let {Si} be the partition of S induced by
its components. Then ∪N(Si) = N(S), and {N(Si)} are disjoint, so by the
pigeonhole principle some Si is a violated set.
c) If G has no complete matching, then A or B contains a violated set
with at most ⌈n/2⌉elements. If S is a violated subset of A, then B −N(S)
is a violated subset of B. If S is a minimal violated subset of A with more
than n/2 elements, then |B −N(S)| ≤n −(|S| −1) ≤⌈n/2⌉.
d) If ε > 0, then almost surely G has a complete matching. Let X be the
number of spanning trees in subgraphs of the form G[S ∪N(S)], where S
is a minimal violated subset of A or B having size at most ⌈n/2⌉. By parts
(b) and (c), it sufﬁces to show that E(X) →0. The number of spanning
subtrees of Kr,s is rs−1sr−1 if r, s ≥1 (see Exercise 2.2.14). Separating the
term due to violated sets of size 1, we have
E(X) = 2n(1 −p)n + 2 P⌈n/2⌉
k=2
 n
k
  n
k−1

kk−2(k −1)k−1 p2k−2(1 −p)k(n−k+1).
As seen in part (a),
the expected number of isolated vertices ap-
proaches 0.
Since
 m
l

<
(me/l)l,
the summation is bounded by
P⌈n/2⌉
k=2 (ne)2k−1k−2 p2k−2(1 −p)k(n+1)/2. We can ignore the k−2 to obtain an
upper bound of (p2ne)−1 P
k≥2[(pne)2(1 −p)(n+1)/2]k.
The constant ratio
in the geometric series is asymptotic to [e(1 + ε) ln n]2n−(1+ε)/2, which ap-
proaches 0 for ε > −1. The geometric series is bounded by x 2/(1−x), which
is asymptotic to x2 when x →0. For the bound on the summation,
(p2ne)−1(pne)4(1 −p)n+1 ∼p2n3e3e−np = e3(1 + ε)2(ln n)2n−ε →0.

497
Chapter 8: Additional Topics
Section 8.6: Eigenvalues of Graphs
498
8.5.37. If 0 < p < 1, and k1, . . . , kr are nonnegative integers summing to m,
then Qr
i=1[1 −(1 −p)ki] ≤[1 −(1 −p)m/r]r. Since the logarithm function is
monotone, it sufﬁces to show that Pr
i=1 ln[1−(1−p)ki] ≤r ln[1−(1−p)m/r].
This reduces to 1
r
Pr
i=1 f (ki) ≤f
  1
r
Pr
i=1 ki

, where f (x) = ln[1 −(1 −p)x].
That is, it sufﬁces to show that f is a concave function for x ≥0.
Rewriting (1 −p)x as ex ln(1−p) makes it easy to differentiate f twice.
The value of the second derivative is −

ln(1−p)
(1−p)−x−1
2
, which is negative.
Hence f is concave.
8.5.38. (•) Tail inequality for binomial distribution. Let X = P X′
i, where
each X ′
i is an indicator variable with success probability P(X ′
i = 1) = .5,
so E(X) = n/2. Applying Markov’s Inequality to the random variable Z =
(X −E(X))2 yields P(|Z| ≥t) ≤Var(X)/t2.
Setting t = α√n yields a
bound on the tail probability: P(|X −np| ≥α√n) ≤1/(2α2). Use Azuma’s
Inequality to prove the stronger bound that P(|X −np| > α√n) < 2e−2α2.
(Hint: Let Y ′
i = X′
i −.5. Let Fi be the knowledge of Y ′
1, . . . , Y ′
i , and let
Yi = E(Y|Fi).)
8.5.39. (•) Bin-packing. Let the numbers S = {a1, . . . , an} be drawn uni-
formly and independently from the interval [0, 1]. The numbers must be
placed in bins, each having capacity 1. Let X be the number of bins needed.
Use Lemma 8.5.36 to prove that P
 |X −E(X)| ≥λ√n

≤2e−λ2/2.
8.5.40. Azuma’s Inequality and the Traveling Salesman Problem.
a) Azuma’s Inequality for general martingales: If E(Xi) = Xi−1 and
|Xi −Xi−1| ≤ci for all i, then P(Xn −X0 ≥λ
qP c2
i ) ≤e−λ2/2. Let γ =
qP c2
i . By translation, we may assume X0 = 0. Markov’s Inequality im-
plies P(et Xn ≥etλγ ) ≤E(et Xn)/etλγ for all t > 0. It sufﬁces to prove that
E(et Xn) ≤et2γ 2/2 and then set t = λ/γ . We prove the bound on the expecta-
tion by induction on n.
We have
E(et Xn) = E(et Xn−1et(Xn−Xn−1)) = E(E(et Xn−1et(Xn−Xn−1)|Xn−1)) = E(et Xn−1E(etY|Xn−1)),
where Y = Xn −Xn−1. By hypothesis, E(Y) = 0 and |Y| ≤cn. Let Z be
the random variable Y/cn, so |Z| ≤1, and let u = cnt. We have E(etY) =
E(euZ) ≤1
2(eu + e−u) ≤eu2/2, so the inner expectation is bounded by et2c2
n/2.
This is a constant, so
E(et Xn−1E(etY|Xn−1)) = et2c2
n/2E(et Xn−1) = et2γ 2/2,
using the induction hypothesis.
b) If Y is the distance from z ∈S to the nearest of n points chosen
uniformly and independently in the unit square S, then E(Y) < c/√n, for
some constant c. The probability that a random point x lies in region R
equals the area of R. Fixing y, z, P(d(x, z) > y) ≤πy2/4, with equality
when z is in the corner. Hence the probability that the nearest of n points
is farther than y from z is bounded by (1−πy2/4)n. Since E(Y) =
R ∞
0 P(Y ≥
y)dy, we have E(Y) ≤
R ∞
0 (1 −πy2/4)ndy <
R ∞
0 e−nπy2/4dy = 1/√n.
c) The smallest length of a tour through a random set of n points in
the unit square is highly concentrated around its expectation. Let X be the
actual length of the optimal tour for the random points Q = {p1, . . . , pn}.
Let Fi = {p1, . . . , pi}, and let Xi = E(X|Fi), so {Xi} is a martingale with
X0 = E(X) and Xn = X. Let W be the length of the optimal tour when pi
is omitted from the set. Let Y = E(W|Fi−1) and Y ′ = E(W|Fi); note that
Y ′ = Y, because pi does not appear in the tour measured by W. Fixing
Fi, the expectation of X −W is bounded by 2/√(n −i), by part (b), since
we can include pi in the tour by making a detour from the closest point in
Q −Fi. Hence 0 ≤E(X −W|Fi) ≤2/√n −i. Since this bound of 2/√n −i is
valid for any choice of pi, we also have the same bounds for E(X −W|Fi−1).
However, E(X −W|Fi) = Xi −Y ′, and E(X −W|Fi−1) = Xi−1 −Y. With
Y = Y ′, we have Xi −Xi−1 = E(X −W|Fi) −E(X −W|Fi−1), and our bounds
on these quantities yield |Xi −Xi−1| ≤2/√n −i. Since the sum of the
reciprocals of the ﬁrst n natural numbers is asymptotic to ln n, part (a)
yields P[X −E(X) ≥λ(2 + ε)
√
ln n] ≤e−λ2/2. The same bound holds for the
other tail, because part (a) applies also to −X.
8.6. EIGENVALUES OF GRAPHS
8.6.1. Interpretation of cycle space and bond space. Consider a graph G.
a) The symmetric difference of two even subgraphs G1 and G2 is an even
subgraph. At a given vertex v, let S1 and S2 be the sets of incident edges in
G1 and G2, respectively. In G1△G2, the edges incident to v are S1△S2. We
have |S1△S2| = |S1 −(S1 ∩S2)|+|S2 −(S1 ∩S2)|. Since |S1| and |S2| have the
same parity, the sizes of the differences also have the same parity.
b) The symmetric difference of two edge cuts is an edge cut. This is
Exercise 4.1.27.
c) Every edge cut shares an even number of edges with every even sub-
graph. Every even subgraph decomposes into cycles (Proposition 1.2.27),
and every cycle crosses every edge cut an even number of times.
Comment: By parts (a) and (b), the cycle space C and bond space B
of a graph G are binary vector spaces. They are subpaces of the space of
dimension e(G) whose vectors are the incidence vectors of subsets of the

499
Chapter 8: Additional Topics
Section 8.6: Eigenvalues of Graphs
500
edges. By part (c), they are orthogonal subspaces of this space, since the
dot product of the incidence vector of an even subgraph and the incidence
vector of an edge cut is 0.
8.6.2. For a connected graph G with n vertices and m edges, the cycle space
C has dimension m −n + 1, and the bond space B has dimension n −1.
Since the spaces are orthogonal within a space of dimension m, it suf-
ﬁces to show that dim C ≥m −n + 1 and dim B ≥n −1.
Choose a spanning tree T . Each edge of E(G) −E(T ) forms a unique
cycle along with edges in T . These cycles are linearly independent in C(G),
since each has a nonzero coordinate outside E(T ) that is zero in all other
incidence vectors in this set. Hence dim C(G) ≥m −n + 1.
Choose n −1 vertices in G. We show that the edge cuts isolating these
vertices are linearly independent in B. A nonzero linear combination over
F2 sums a nonempty subset S of these incidence vectors. The resulting
coordinate for an edge is even if and only if the edge has an even num-
ber of endpoints in S. Edges in [S, S] are covered exactly once, and these
coordinates remain nonzero. Since S is a nonempty proper subset of the
vertices of a connected graph, [S, S] ̸= ∅. Hence these vectors are linearly
independent, and dim B ≥n −1.
8.6.3. a) If in a simple graph G the vertices in S ⊆V (G) have identical
neighborhoods, then 0 is an eigenvalue with multiplicity at least |S|−1. The
rows of the adjacency matrix A corresponding to vertices of S are identical.
Hence there are at most n(G) −|S| + 1 linearly independent rows, and the
rank is at most n(G) −|S| + 1, so at least |S| −1 eigenvalues are 0.
a) If in a simple graph G the vertices in S ⊆V (G) have identical closed
neighborhoods, then −1 is an eigenvalue with multiplicity at least |S| −1.
The rows of A + I corresponding to vertices of S are identical, where I is
the identity matrix. Hence A + I has 0 as an eigenvalue with multiplicity
at least |S| −1. However, the spectrum of A + I is shifted up from the
spectrum of A by 1, since adding λI to a matrix adds λ to each eigenvalue.
8.6.4. Counting 3-cycles and 4-cycles using eigenvalues. Let A be the adja-
cency matrix of G. Let σk be the number of subgraphs of G that are k-cycles.
Let Lk and Dk be the sums of the kth powers of the eigenvalues and the ver-
tex degrees, respectively. We have Lk = TraceAk, by Remark 8.6.2(1) and
Proposition 8.6.7. Proposition 8.6.7 also implies that Lk counts the ways to
start at a vertex, follow a walk of length k, and end at the same vertex.
σ3 = 1
6 L3. Every closed walk of length 3 traverses a 3-cycle, and there
are six ways to traverse a 3-cycle in in three steps.
σ4 = 1
8 L4 −1
4 D2 −3
4 D1. A closed walk of length 4 may traverse a 4-
cycle, or a path of length 2 (starting at either end or starting in the middle
in either direction), or an edge (starting at either end). Hence L 4 counts
the copies of C4 eight times, the copies of P3 four times, and the copies of
P2 twice. There are σ4 copies of C4, there are P
v∈V (G)
 d(v)
2

copies of P3, and
there are P
v∈V (G) d(v)/2 copies of P2. Thus L4 = 8σ4 + 2D2 + 2D1 + D1.
8.6.5. Deletion formulas for the characteristic polynomial. We write φ(G; λ)
as φG. For a vertex or edge w in G, let Z(w) denote the set of cycles in G
containing w.
We use Sachs’ formula for the characteristic polynomial:
φG = P ciλn−i, where ci = P
H∈Hi(−1)k(H)2s(H), where Hi is the set of i-
vertex subgraphs of V (G) whose components are edges or cycles, and k(H)
and s(H) denote the number of components and number of cycles of H.
a) φG = λφG−v −P
u∈N(v) φG−v−u −2 P
C∈Z(v) φG−V (C). Consider the con-
tributions to φG in Sachs’ formula. The subgraphs avoiding v contribute
λφG −v, since these subgraphs are present in both G and G −v, but in G
the term where they contribute has an extra factor of λ. The subgraphs
having a component that is an edge uv contribute −φG−v−u, since these
subgraphs correspond to subgraphs of G −u −v by adding one compo-
nent that is an edge. The subgraphs having a cycle through v contribute
−2 P
C∈Z(v) φG−V (C), since these subgraphs correspond to subgraphs of G by
adding the vertex set of the cycle, which adds one component that is a cycle
and therefore contributes a factor of 2.
b) φG = φG−xy −φG−x−y −2 P
C∈Z(xy) φG−V (C). Consider the contributions
to φG in Sachs’ formula. The subgraphs avoiding xy contribute λφG −v,
since these subgraphs are present in both G and G −xy and the number
of vertices used in computing the exponent is the same. The subgraphs
having xy as a component contribute −φG−x−y, since these subgraphs cor-
respond to subgraphs of G −x −y by adding one component that is an edge.
The subgraphs having a cycle through xy contribute −2 P
C∈Z(v) φG−V (C), by
the same reasoning as for the last term in part (a).
8.6.6. Characteristic polynomial for paths and cycles.
a) Recurrence. Using Exercise 8.6.5, deleting an endpoint of Pn yields
φPn = λφPn−1 −φPn−2, with φP0 = 1 and φP1 = λ. Deleting an edge from Cn
yields φCn = φPn −φPn−2 −2.
(•) b) Without solving the recurrence, prove that {2 cos(2π j/n): 0 ≤j ≤
n −1} are the eigenvalues of Cn. This is a matter of designing the appropri-
ate eigenvectors and checking the multiplication.
c) Eigenvalues of C2
n . If G2 is obtained from a k-regular graph G by
making vertices at distance 2 adjacent, then A(G2) = A2(G) + A(G) −kI.
If x is an eigenvector of A(G) with associated eigenvalue λ, then A(G2)x =
(λ2 + λ −k)x, so x is an eigenvector of A(G) with associated eigenvalue
λ2 + λ −k.
8.6.7. When G is a tree, the coefﬁcient of λn−2k in the characteristic polyno-
mial is (−1)kµk(G), where µk(G) is the number of matchings of size k. By

501
Chapter 8: Additional Topics
Section 8.6: Eigenvalues of Graphs
502
Corollary 8.6.6, the coefﬁcient ci of λn−i in the characteristic polynomial
is P(−1)k(H)2s(H), where the summation is over all i-vertex subgraphs for
which every component is an edge or a cycle, k(H) is the number of these
components, and s(H) is the number of cycles. In a tree T , there are no
cycles, so ci = (−1)i/2µi/2(T ).
Nonisomorphic “co-spectral” 8-vertex trees that both have characteris-
tic polynomial λ8 −7λ6 +9λ4. We seek two trees on eight vertices that have
nine matchings of size 2 and no larger matchings (as trees, they automati-
cally have seven matchings of size 1). The trees appear below. (Comment:
As n →∞, almost no trees are uniquely determined by their spectra.)
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
8.6.8. If T is a tree, then α(T ) is the number of nonnegative eigenvalues of T .
Let T be an n-vertex tree. In any graph, the vertices outside a maximum
independent set form a minimum vertex cover, so α(T ) = n(T ) −β(T ),
where β(T ) is the vertex cover number.
Since the characteristic polynomial has the form Q(λ −λi), where
λ1, . . . , λn are the eigenvalues, the degree of the last nonzero term is the
multiplicity of 0 as an eigenvalue. By Exercise 8.6.7, the coefﬁcient of n−2k
is nonzero if and only if T has a matching of size k. Hence the least degree
of a nonzero term is n −2α′(T ). Since T is bipartite, this equals n −2β(T ),
which equals α(T ) −β(T ). Since α(T ) + β(T ) = n, there remain 2β(T )
nonzero eigenvalues, which are split equally between positive and nega-
tive values, since T is bipartite. We conclude that there are exactly α(T )
nonnegative eigenvalues.
8.6.9. The eigenvalues of a graph with n vertices and m edges are bounded
by
p
2m(n −1)/n. Applying the Cauchy-Schwarz Inequality to the vector
of eigenvalues other than the maximum yields
(Pm
i=2 λi)2 ≤(n −1)(Pm
i=2 λ2
i ).
Using P λi = 0 on the left and P λ2
i = 2e on the right converts this to
(−λ1)2 ≤(n −1)(2e −λ2
1), which is equivalent to λ1 ≤
p
2e(n −1)/n.
8.6.10. The eigenvalues of the cartesian product of graphs G and H are the
sums of eigenvalues of G and H. Let λ1, . . . , λm and µ1, . . . , µn be the eigen-
values of G and H, with adjacency matrices A and B, respectively. The
entry in row (i, j) and column (r, s) of C, the adjacency matrix of A(G
H),
is bj,s if i = r and ai,r if j = s; otherwise it is 0.
Let u and v be eigenvectors for eigenvalues λ and µ of G and H, respec-
tively. Let w be the vector indexed by [m]×[n] that is deﬁned by wi, j = uivj.
In Cu, coordinate (i, j) is P
r
P
s c(i, j),(r,s)wr,s. The terms in the sum are 0
except when i = r or j = s. Note that c(i, j),(i, j) = 0. We thus obtain
(Cw)i, j =
X
s
c(i, j),(i,s)uivs +
X
r
c(i, j),(r, j)urvj −c(i, j),(i, j)uivj
= ui
X
s
bj,svs + vj
X
r
ai,rur = ui(Bv)j + vj(Au)i
= uiµvj + λvjλui = (µ + λ)uivj = (µ + λ)wi, j
This computation shows that w is an eigenvector associated with eigen-
value µ + λ. Furthermore, if u and u′ are two linearly independent eigen-
vectors of A associated with λ, then the resulting w and w′ are linearly
independent eigenvectors of C. Thus the eigenvalues of C are given by the
list of all λi + µj such that 1 ≤i ≤m and 1 ≤j ≤n.
The eigenvalues of the k-dimensional hypercube Qk range from k to −k,
with k −2r being an eigenvalue with multiplicity
 k
r

, for 0 ≤r ≤k. The
claim holds by inspection for k = 1, where Qk = K2. For k > 1, express
Qk as Qk−1
K2.
Since the eigenvalues of K2 are 1 and −1, each with
multiplicity 1, each eigenvalue µ for Qk−1 becomes eigenvalues µ + 1 and
µ −1 for Qk. Thus the multiplicity of k −2r in the spectrum of Qk is the
sum of the multiplicities of k −2r −1 and k −2r +1 in the spectrum of Qk−1.
Using the induction hypothesis, the multiplicity is
 k−1
r

+
 k−1
r−1

, which by
the binomial recurrence equals
 k
r

.
8.6.11. (•) Compute the spectrum of the complete p-partite graph Km,...,m.
(Hint: Use the expression A(G) = J −I −A(G) for the adjacency matrix of
the complement.)
8.6.12. If the characteristic polynomial of G is x 8 −24x6 −64x5 −48x4, then
G = K2,2,2,2. The degree is n(G), and the coefﬁcient of x n(G)−2 is −e(G).
Since
 8
2

= 28, we obtain G by deleting four edges from K8. Since the
coefﬁcient of xn(G)−3 is −2 times the number of triangles (Corollary 8.6.6),
our graph has 32 triangles. In Kn there are 56 triangles, and deleting an
edge kills six triangles. If we kill 24 triangles by deleting four edges, then
we must not kill a triangle twice, which means that the four deleted edges
are pairwise disjoint. Now K2,2,2,2 is the only graph satisfying all these
requirements.
8.6.13. (!) Prove that G is bipartite if G is connected and λmax(G) =
−λmin(G).
8.6.14. The squashed-cube dimension (Deﬁnition 8.4.12) of a graph G is at
least the maximum of the number of positive eigenvalues and the number

503
Chapter 8: Additional Topics
Section 8.6: Eigenvalues of Graphs
504
of negative eigenvalues of the matrix R(G) whose whose (i, j)th entry is
dG(vi, vj).
Note that R(Kn) = J −I, whose eigenvalues are n −1 with
multiplicity 1 and −1 with multiplicity n −1. Hence the squashed cube
dimension of Kn is at least n −1, and equality follows from the construction
in Example 8.4.13.
To prove the eigenvalue bound, we encode the distances in a quadratic
form. Let x = (x1, . . . , xn), and let h(x) = P
i, j dG(vi, vj)xixj = x T R(G)x.
The combinatorial part of the argument recomputes this sum by accumu-
lating contributions from coordinates in a squashed-cube embedding.
Consider an encoding f , with f (vi) = ( f1(vi), . . . , fN(vi)). Let V α
m de-
note the set of indices i such that fm(vi) = α. Coordinate m contributes 1
to d( f (vi), f (vj)) if and only if i ∈V 0
m and j ∈V 1
m, or vice versa. For each
such unit contribution, we have a contribution of xixj + xjxi to h(x). Hence
the grouping by coordinates yields h(x) = 2 PN
m=1
 P
i∈V 0
m xi
 P
j∈V 1
m xj

. We
have rewritten the quadratic form as a sum of N products of linear com-
binations. Now Sylvester’s Law of Inertia (Lemma 8.6.14) states that ex-
pressing a quadratic form as a sum of N products of linear combinations
of the variables requires N ≥r, where r is the maximum of the number of
negative and number of positive eigenvalues of R(G).
8.6.15. (!) The Laplacian matrix Q of a graph G is D −A, where D is the
diagonal matrix of degrees and A is the adjacency matrix. The Laplacian
spectrum is the list of eigenvalues of Q.
a) Prove that the smallest eigenvalue of Q is 0.
b) Prove that if G is connected, then eigenvalue 0 has multiplicity 1.
c) Prove that if G is k-regular, then k −λ is a Laplacian eigenvalue if
and only if λ is an ordinary eigenvalue of G, with the same multiplicity.
8.6.16. Given that λmax(M) + λmin(M) ≤λmax(P) + λmax(R) for any real
symmetric matrix M partitioned as
  P
Q
QT R

with P, R square:
a) If A is a real symmetric matrix partitioned into t 2 submatrices Ai, j
such that the diagonal submatrices Aii are square, then
λmax(A) + (t −1)λmin(A) ≤Pm
i=1 λmax(Ai,i).
Let P = A1,1, and let R be the matrix obtained by deleting the ﬁrst row
and column of blocks. By the Interlacing Theorem, λmin(A) ≤λmin(R) ≤
λmax(R) ≤λmax(R). The desired identity is trivial for t = 1. For t > 1, we
apply induction. Using the given identity and then the induction hypothe-
sis and the Interlacing Theorem,
λmax(A) + λmin(A) ≤λmax(A1,1) + λmax(R)
≤λmax(A1,1) + Pt
i=2λmax(Ai,i) −(t −2)λmin(R)
≤λmax(A1,1) + Pt
i=2λmax(Ai,i) −(t −2)λmin(A).
b) χ(G) ≥1 + λmax(G)/(−λmin(G)) for nontrivial G. Partition the ver-
tices into the χ(G) color classes of an optimal coloring. With the vertices
ordered by color classes, the diagonal submatrices of the adjacency matrix
are identically 0, so their eigenvalues are all 0. If G is nontrivial, then
the eigenvalues are not all 0, so λmin(G) < 0, since the sum is 0. Now
part (a) yields λmax(G) + (χ(G) −1)λmin(G) ≤0, which becomes the desired
inequality upon solving for χ(G).
c) λ1(G)+3λn(G) ≤0 for planar graphs. Using the Four Color Theorem
to set χ(G) ≤4 in part (b) yields the claim.
8.6.17. The number of spanning trees in Km,m is m2m−2. Since Km,m is m-
regular with 2m vertices, Theorem 8.6.28 applies and yields τ(Km,m) =
(2m)−1 Q2m
i=2(m −λi), where m, λ2, . . . , λ2m are the eigenvalues in nonin-
creasing order. Since the spectrum is Spec (Km,m) =
  m
0
−m
1
2m−2
1

(Example
8.6.3), we obtain τ(Km,m) = (2m)−1(m −0)2m−2(2m)1 = m2m−2.
8.6.18. If the columns of a matrix sum to 0, then the cofactors obtained
from deletion of a ﬁxed row of A are all equal. Let A be such a matrix.
The cofactor bi, j is (−1)i+ j times the determinant of the matrix obtained
by deleting row i and column j of A. The deﬁnition of the determinant by
expansion along rows of A yields A(Adj A) = (det A)I for all A.
If rank (A) < n−1, than all cofactors are 0. Otherwise, rank (A) = n−1
and det A = 0. Now AAdj A = 0 implies that every column of Adj A is in
the null-space of A. Since every row-sum of A is 0, we have (1, . . . , 1)T in
the null-space. Since rank A = n −1, every vector in the null-space is a
multiple of this. Hence the columns of Adj A are constant-valued, meaning
that the cofactors in each row of A are the same.
8.6.19. Binet-Cauchy Formula: det AB = P
S∈(
[n]
m) det AS det BS, where A
and B are n ×m and m ×n matrices, AS consists of the columns of A indexed
by S, and BS consists of the rows of B indexed by S.
Consider the matrix equation DE = F below.
Since each of these
matrices has n + m rows and columns, the usual product rule applies.

Im
0
A
In
 
−Im
B
A
0

=

−Im
B
0
AB

Since D is lower triangular with diagonal 1, det D = 1. Expanding the
determinant of F along the ﬁrst m columns yields det F = (−1)m det AB.
Thus it sufﬁces to prove that det E = (−1)m P
S∈(
[n]
m) det AS det BS.
We use the permutation deﬁnition of det E. Each nonzero product of
m + n elements must use an element from each row of A and an element

505
Chapter 8: Additional Topics
Section 8.6: Eigenvalues of Graphs
506
from each column of B. The remaining m −n elements lie on the diagonal
of the upper left block. Thus the columns of the n elements from A have
the same indices as the rows of the n elements from B. Furthermore, each
term in the expansion of det AS is multiplied by each term in the expansion
of det BS to obtain contributions to det E.
It remains only to consider the signs of the contributions. Two obtain
the positions on the main diagonal of AS and the main diagonal of BS,
we apply n row interchanges from the positions on the main diagonal of
E.
For other terms in det AS, the sign corresponds to the parity of the
permutation of rows within AS, and similarly for BS.
Hence we obtain
det AS det BS times (−1)n for the inital permutation time (−1)m−n for the
elements on the diagonal of −Im.
8.6.20. The incidence matrix of a simple graph G is totally unimodular
if and only if G is bipartite. (The incidence matrix has two +1s in each
column; a matrix is totally unimodular if every square submatrix has de-
terminant in {0, 1, −1}. Let S = {0, 1, −1}.)
Proof 1 Sufﬁciency. Given that G is bipartite, we prove by induction
on k that the determinant of every k-by-k submatrix of the incidence matrix
M(G) is in S. This is certainly true for k = 1, since the entries in M(G)
are 0 or 1. Suppose k > 1, and let A be a k-by-k submatrix. Every column
of M(G) has two nonzero entries, so every column of A has at most two.
If a column of A is 0, then det A = 0. If a column of A has one nonzero
entry, which must be 1, then expanding the determinant down that column
expresses det A and ±1 times the determinant of a (k −1)-by-(k −1) matrix,
which by the induction hypothesis is in S. Hence det A ∈S.
Finally, suppose that every column of A has two 1s. Each row of A cor-
responds to a vertex; weight the rows by +1 if the corresponding vertices
belong to one partite set, −1 if they belong to the other. Since G is bipar-
tite, every edge contains a vertex of each partite set, and hence with this
weighting each column of A sums to 0, and det A = 0.
Necessity.
If G is not bipartite, then G contains an odd cycle C of
length 2k + 1.
Consider the rows and columns of M(G) corresponding
to the vertices and edges of C. Permuting the rows and columns of this
submatrix A may change the sign of det A but not its magnitude. With
v1, . . . , v2k+1 being the names of the vertices on the cycle in order, permute
the rows of A into this order, and permute the columns of A into the order
v1v2, v2v3, . . . , v2k+1v1. Now A has 1s in positions (i, i) for 1 ≤i ≤2k + 1,
positions (i +1, i) for 1 ≤i ≤2k, and position (1, 2k +1), with the other po-
sitions 0. If we expand the determinant of this matrix along the ﬁrst row,
we have only two nonzero terms. One is a subdeterminant with 1s only
on the main diagonal and the ﬁrst subdiagonal, and the other is a subde-
terminant with 1s only on the main diagonal and the ﬁrst superdiagonal.
Because these come from expansion in columns 1 and 2k+1, which are both
odd, they have the same sign. Since each is a triangular matrix with 1s
on the diagonal, we have | det A| = 2, and M(G) is not totally unimodular.
The expansion is illustrated below for k = 2.

1
0
0
0
1
1
1
0
0
0
0
1
1
0
0
0
0
1
1
0
0
0
0
1
1

=

1
0
0
0
1
1
0
0
0
1
1
0
0
0
1
1

+

1
1
0
0
0
1
1
0
0
0
1
1
0
0
0
1

Proof 2 (induction on e(G)). If e(G) = 0, then the determinant of the
empty matrix is 0, and G has no odd cycle. If e(G) > 1, then consider
an arbitrary edge xy of G. The induction hypothesis states that G −xy is
bipartite if and only if M(G −xy) is totally unimodular. If M(G) is totally
unimodular, then the submatrix M(G −xy) is totally unimodular; hence
G −xy is bipartite whenever xy ∈E(G). Hence G is bipartite unless every
edge of G belongs to every odd cycle of G. This happens only when G itself
is an odd cycle; in this case | det M(G)| = 2, as discussed above.
Conversely, if G is bipartite, then every G −xy is bipartite, and the
induction hypothesis guarantees every M(G −xy) is totally unimodular.
Hence M(G) is totally unimodular unless some submatrix A using all the
columns has determinant outside {−1, 0, +1}. Since M(G −xy) is totally
unimodular, expansion on the column indexed by xy forces both 1s in this
column to appear in A. Since xy is arbitrary, every 1 in M(G) appears in A.
Now the fact that G is bipartite allows us to weight the rows corresponding
to one partite set with +1 and those corresponding to the other partite set
with −1 to obtain a linear dependence among the rows, yielding det A = 0.
8.6.21. If G is an (n, k, c)-magniﬁer with vertices v1, . . . , vn, and H is the
X, Y-bigraph with X = {x1, . . . , xn} and Y = {y1, . . . , yn} such that xi yj ∈
E(H) if and only if i = j or vivj ∈E(G), then H is an (n, k + 1, c)-expander.
We verify the properties of an (n, k+1, c)-expander. The construction yields
dH(xi) = dH(yi) = dG(vi), so 1(G) ≤k yields 1(H) ≤k + 1. For S ⊆X with
|S| ≤n/2, let S′ = {vi ∈V (G): xi ∈S}. We have
|NH(S)| = |S| +
NG(S′) −S′ ≥(1 + c) |S| > (1 + c(1 −|S| /n) |S|.
8.6.22. Existence of expanders of linear size. An (n, α, β, d)-expander is an
A, B-bigraph G with |A| = |B| = n, 1(G) ≤d, and |N(S)| ≥β |S| whenever
|S| ≤αn.
a) If X is the size of the union of d k-subsets of [n] chosen at random,
then P(X ≤l) ≤
 n
l

(l/n)kd. If X ≤l, then all the k-sets are conﬁned to some

507
Chapter 8: Additional Topics
Section 8.6: Eigenvalues of Graphs
508
l-set. By multiplying the probability of this occurrence for a particular l
by
 n
l

, we obtain a loose upper bound (the events for distinct l-sets are not
disjoint). For a particular l-set, we bound the probability it contains any
selected k-set in the sequence:
 l
k

/
 n
k

= Qk−1
i=0
l−i
n−i ≤(l/n)k. We need this
event to happen d times.
b) If αβ < 1, then there is a constant d such that, for sufﬁciently large n,
an (n, α, β, d)-expander exists. We generate an A, B-bigraph G by choosing
d random complete matchings, discarding extra copies of edges.
Hence
1(G) ≤d. We claim that G fails to be an expander with probability less
than 1. Let S be a violated set if |N(S)| ≤β |S|. Let E be the event that a
violated set exists; we bound P(E) by a quantity that is less than 1 when n
is sufﬁciently large. The d random matchings provide d random k-sets as
neighbors of S when |S| = k. By (a), when |S| < αn we have
P(E) <
αn
X
k=1
n
k
 n
βk
 βk
n
kd
<
αn
X
k=1
ne
k
k  ne
βk
βk βk
n
kd
=
αn
X
k=1
"
e1+ββ
βk
n
d−β−1#k
<
X
k≥1

e1+ββ(αβ)d−β−1k .
If αβ < 1, then we can choose d to make the constant ratio in the
geometric series as small as desired. We choose d so e1+ββ(αβ)d−β−1 < 1
2.
c) Conclude the existence of k such that n, k, c-expanders exist for all suf-
ﬁciently large n. We prove this when c < 1. Choose α = 1/2 and β = 1 + c,
so αβ < 1. By part (b), there is a constant d such that for sufﬁciently large
n there exists an X, Y-bigraph with |X| = |Y| = n that is an (n, α, β, d)-
expander. For S ⊆X with |S| ≤n/2, we have |N(S)| ≥β |S| = (1 + c) |S| >
(1 + c(1 −|S| /n)) |S|.
8.6.23. Triangle-free graphs in which every two nonadjacent vertices have
exactly two common neighbors.
If k is the degree of a vertex in an n-vertex graph G of this sort, then n =
1 +
 k+1
2

. For every pair of neighbors of x, there is exactly one nonneighbor
of x that they have as a common neighbor. Conversely, every nonneighbor
of x has exactly one pair of neighbors of x in its neighborhood, because these
are its common neighbors with x. This establishes a bijection between the
pairs in N(x) and the nonneighbors of x. Counting x, N(x), and N(x), we
have n(G) = 1 + k +
 k
2

= 1 +
 k+1
2

. Since this argument holds for every
x ∈V (G), we conclude that G is k-regular. (This is Exercise 1.3.33.)
G is strongly regular. By deﬁnition, λ = 0 (triangle-free) and µ = 2, so
G is strongly regular with parameters (k, 0, 2) and 1 +
 k+1
2

vertices.
The parameter k must be 1 more than the perfect square of an integer
m that is not a multiple of 4. Setting n −1 =
 k+1
2

and λ = 0 and µ = 2
in the integrality conditions for strongly regular graphs (Theorem 8.6.33)
shows that the two numbers 1
2
 k+1
2

±
k(k+1)−2k
√
4+4(k−2)

must be integers. The
formulas simplify to k
4(k +1±
√
k −1). Since these are integers, k −1 must
be a perfect square. With m =
√
k −1, the numbers (m2 + 1)(m2 + 2 ± m)
must be multiples of 4. This is impossible if m is a multiple of 4.
Examples. The values of k satisfying the necessary conditions are 1, 2,
5, 10, 26, etc. For k = 1, we have the degenerate example K2. For k = 2,
the graph is C4. For k = 5, the 16-vertex graph is known as the Clebsch
graph shown below; deleting any closed neighborhood yields the Petersen
graph. For k = 10, a realization is known using combinatorial designs; it
is called the Gewirtz graph.
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
8.6.24. The Petersen graph; spectrum and application to decomposition of
K10. The Petersen graph is regular of degree 3; any pair of adjacent vertices
have no common neighbor, while every pair of non-adjacent vertices have
one common neighbor. Hence the Petersen graph is strongly regular with
k = 3, λ = 0, µ = 1. It eigenvalues are therefore 3,r, s where r +s = λ−µ =
−1 and rs = −(k −µ) = −1, so r = 1 and s = −2. The multiplicities a and
b of r and s satisfy k + ar + bs = 0 and 1 + a + b = n, so (a, b) = (5, 4), and
the spectrum is
 3,1,−2
1,5, 4

.
Without using strong regularity, the following ad hoc argument also
yields the spectrum. Consider the 3 + 32 walks of length 1 or 2 that begin
at a speciﬁed vertex v. Each other vertex is the other end of one of these,
and v is the other end of three of them. Hence P2 + P = 2I + J, where J is
the all-1 matrix. Factoring P2 + P −2I and multiplying P −3I by both this
and J yields (P −3I)(P −I)(P + 2I) = 0. Hence (λ −3)(λ −1)(λ + 2) is the
minimum polynomial of P, and P has eigenvalues 3, 1, −2. To determine

509
Chapter 8: Additional Topics
Section 8.6: Eigenvalues of Graphs
510
the multiplicities a, b, c, use the fact that for every j ≥0, a · 3 j + b · 1 j +
c · (−2) j = traceP j. For j = 0, j = 1, and j = 2, traceP j is 10, 0, and
30, respectively, and the resulting three equations in three unknowns yield
(a, b, c) = (1, 5, 4).
If K10 can be factored into three disjoint copies of the Peterson graph,
then we can write J −I = P1 + P2 + P3, where P1, P2, P3 are adjacency ma-
trices for the Petersen graph, under various numberings of the vertices by
1, . . . , 10. The vector 1 of all ones is an eigenvector for each Pi, and for each
Pi there is a ﬁve-dimensional space of eigenvectors with eigenvalue 1 that
is orthogonal to 1. Since the orthogonal complement of 1 has nine dimen-
sions, P1 and P2 have a common eigenvector wv with eigenvalue 1. Being
orthogonal to 1, its coordinates sum to 0. Letting both sides of the decompo-
sition operate on it yields −wv = Jwv −Iwv = P Piwv = wv + wv + P3wv.
However, this says that wv is an eigenvector of P3 with eigenvalue -3, which
is impossible. (This result is a special case of a theorem of J. Bos´ak that no
complete graph with fewer than 12 vertices has a decomposition into three
spanning subgraphs of diameter 2.)
8.6.25. If F = G
H, where G and H are simple graphs of order at least 2,
and every two nonadjacent vertices in F have exactly two common neighbors,
then G and H are complete graphs. Given distinct vertices u, v ∈V (G) and
x, y ∈V (H), consider the vertices (u, x) and (v, y) in F. By the deﬁnition
of the cartesian product, these vertices are nonadjacent. Hence they have
two common neighbors. The only possible common neighbors are (u, y) and
(v, x). The resulting 4-cycle implies that uv ∈E(G) and xy ∈E(H). Since
these vertices were chosen arbitrarily, G and H are complete graphs.
8.6.26. The subconstituents of a graph are the induced subgraphs of the
form G[U], where v ∈V (G) and U = N(v) or U = N[v].
Vince [1989]
deﬁned G to be superregular if G has no vertices or if G is regular and
every subconstituent of G is superregular. Let S be the class consisting of
{aKb: a, b ≥0} (disjoint unions of isomorphic cliques), {Km
Km: m ≥0},
C5, and the complements of these graphs.
a) Every graph in S is superregular and every disconnected superreg-
ular graph is in S.
Each G ∈S is regular and vertex-transitive; so it
sufﬁces to consider any x ∈V (G). By induction on a +b, we have superreg-
ularity for G = aKb, since G[N(x)] = Kb−1 and G[N(x)] = (a −1)Kb. For
G = K 2
m, we also apply induction, since G[N(x)] = 2Km−1 and G[N(x)] =
K 2
m−1. Finally, for G = C5, G[N(x)] = 2K1 and G[N(x)] = K2.
Now suppose that G is superregular and disconnected. If some com-
ponent of G is not a complete graph, then we may choose vertices x, y, z
such that y has distance two from x and z belongs to another component.
This implies dG[N(x)](y) < k = dG[N(x)](z), which contradicts the regularity
of G[N(x)]. If every component of G is a clique, then regularity of G re-
quires equal sizes. (Comment: In fact, every superregular graph is in S,
but the complete inductive proof of this requires several pages (Maddox
[1996], West [1996])
b) Every superregular graph is strongly regular. If x and y are nonad-
jacent, then t-regularity of G[N(x)] implies that x and y have k −t common
neighbors. We have noted that adjacent pairs have s common neighbors.
Hence G is strongly regular, with parameters λ = s and µ = k −t.
8.6.27. Automorphisms and eigenvalues.
a) A permutation σ is an automorphism of G if and only if the permu-
tation matrix corresponding to σ commutes with the adjacency matrix of G;
that is, P A = AP. Say that P is deﬁned by letting position ( j, i) be 1 if
σ(i) = j. That is, Pei = ej, where ek is the kth canonical basis vector. Mul-
tiplication by P permutes rows, moving row i to become row j if Pj,i = 1.
The inverse of a permutation matrix moves the rows back again. In order
to move row j to become row i, we need P−1
i, j = 1. That is, we have argued
that PT P = I, so P−1 = PT .
Multiplication by a permutation matrix Q on the right permutes
columns, moving column i to column j if Qi, j = 1.
To accomplish the
renaming by σ on the adjacency matrix, we want to move row i to row j
and column i to column j whenever σ(i) = j. This is accomplished by mul-
tiplying by P on the left and by P T on the right. Thus P AP T = A. Since
we have argued that P T = P−1, we have P A = AP.
b) If x is an eigenvector of G for an eigenvalue λ of multiplicity 1, and P
is the permutation matrix for an automorphism of G, then Px = ±x. Part
(a) yields APx = P Ax = Pλx = λPx. Thus Px is also an eigenvector for A
with eigenvalue λ. Since λ has multiplicity 1, Px is a multiple of x. Since P
merely permutes the entries in x, it cannot change the largest magnitude
that appears in x. Hence the new multiple of x must be ±x.
c) When every eigenvalue of G has multiplicity 1, every automorphism
of G is an involution (repeating it yields the identity). Part (b) yields P 2x =
x whenever x is an eigenvalue of multiplicity 1. If this is true for every
eigenvalue, then when we express any vector w as a linear combination of
eigenvalues, we obtain P2w = w. If P2w = w for every vector w, then P2
is the identity, and hence σ is an involution.
8.6.28. Every graph has an odd dominating set, meaning a set whose in-
tersection with every closed neighborhood has odd size. The phrasing in
the text, based on Problem 10197 in the American Mathematical Monthly
(1992), is that lightswitch si changes the status of light lj if and only if sj
changes li. Let G be the n-vertex graph with vertices vi and vj adjacent if
and only switches si and sj affect lights lj and li.

511
Chapter 8: Additional Topics
Section 8.6: Eigenvalues of Graphs
512
Let S be the set of switches ﬂipped an odd number of times; the ﬂips
of other vertices have no effect. Since also si changes li and li begins off,
li is on at the end if and only if its closed neighborhood in G has an odd
number of vertices in S.
Thus, the problem is equivalent to ﬁnding an
odd dominating set S. This form has a combinatorial proof by Gallai (see
Lov´asz [1979], Exercise 5.17).
The proof using linear algebra is much shorter. Let B be the augmented
adjacency matrix A(G) + I (add 1 to each diagonal entry). If x is the inci-
dence vector of S in a binary vector space, then Bx is the incidence vector of
the set of lights on after ﬂipping the switches at S (since arithmetic is mod-
ulo 2). The problem is to show that 1 ∈T , where T = {Bx ∈Zn
2}. We prove
the more general statement that if B is a symmetric binary matrix, with
vector u along the diagonal, then u ∈T . (see Problem 798, Nieuw Archief
voor Wiskunde (4) 9 (1991), 117-118) The solution given in the Monthly
(1993, p. 806) is as follows.
We show that every vector orthogonal to T is also orthogonal to u.
This implies that u is in the orthogonal complement of the orthogonal
complement of T and hence is in T itself.
Thus we want to show that
if Pn
i=1 xi Bi, j = 0 for all j, then Pn
i=1 xiui = 0, where all computation is
modulo 2.
Multiplying the vector 0 by x yields Pn
j=1
Pn
i=1 xi Bi, jxj = 0. By the
symmetry of B, the off-diagonal entries contribute nothing, and we obtain
Pn
i=1 x2
i Bi,i = 0. Since x2
i = xi in binary, this reduces to 0 = Pn
i=1 xi Bi,i =
Pn
i=1 xiui, which completes the proof.

