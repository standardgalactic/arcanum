 Procedia Computer Science  70 ( 2015 )  785 – 792 
Available online at www.sciencedirect.com
1877-0509 © 2015 The Authors. Published by Elsevier B.V. This is an open access article under the CC BY-NC-ND license 
(http://creativecommons.org/licenses/by-nc-nd/4.0/).
Peer-review under responsibility of the Organizing Committee of ICECCS 2015
doi: 10.1016/j.procs.2015.10.118 
ScienceDirect
* Corresponding author. Tel.: 09818820319;  
E-mail address: sonika.malik@gmail.com 
4thInternational Conference on Eco-friendly Computing and Communication Systems 
Devising a Super Ontology 
Sonika Malika, Sanju Mishrab, N.K.Jainc, Sarika Jaind 
a,d National Institute of Technology, Kurukshetra, Haryana, INDIA, 
bTeerthankar Mahaveer University, Moradabad, U.P, INDIA, 
cZakir  Husain Delhi College, University of Delhi, INDIA 
 
Abstract 
An upper ontology tries to express theoretical and common concepts which are same across domains. A fundamental upper 
ontology defining the concept of reality is devised here and is referred to as super ontology. This super ontology is based on the 
fundamental beliefs and is independent of any specific domain of application and other applications to which it will be put to use 
in future. We have described the structure of the universe which consists of six substances that are called dravyas. The super 
ontology will use a unique representation scheme for representing knowledge in its knowledge base having a uniform code of 
structure of an Extended Hierarchical Censored Production Rule (EHCPR). The basic idea behind the EHCPRs is to simulate 
densely interconnected neurons inside a computer memory (through a set of interconnected EHCPRs here) so as to make the 
system learn things, recognize patterns, record changes and make decisions in real time. 
 
© 2015 The Authors. Published by Elsevier B.V. 
Peer-review under responsibility of organizing committee of (ICECCS 2015). 
Keywords: Concept of reality, Upper Ontology, EHCPR, Super Ontology, Living, Matter, Space, Time, Medium of rest, Medium of motion. 
1. Introduction 
Ontology is defined by concept of classes, their classification and the possible relation between notions and 
principles. A class is a collection of objects having same property or common attribute and differentiated by its type 
or quality. A relation is an association between its attributes that maps their values and returns either true or false. In 
an engineering domain, a number of ontologies have been developed. Among these, OntoCAPE is a large ontology 
© 2015 The Authors. Published by Elsevier B.V. This is an open access article under the CC BY-NC-ND license 
(http://creativecommons.org/licenses/by-nc-nd/4.0/).
Peer-review under responsibility of the Organizing Committee of ICECCS 2015

786  
 Sonika Malik et al. /  Procedia Computer Science  70 ( 2015 )  785 – 792 
that defines the complete number of Chemical engineering ideas executed in DAML+OIL [1]. The Top-down and 
bottom-up approaches can be used to develop ontology.  
In the bottom-up approach it is very difficult to integrate and modify the ontologies developed for the other 
domains while the top-down approach starts with the general concepts that facilitate the integration of the 
applications with the easily maintained ontologies. These top down approaches are rigid in nature and don’t meet the 
user’s requirements. Ontologies are basically categorized into levels like upper ontology, mid-level ontology and 
low level or domain ontology [2]. A domain ontology describes the concept of particular domain and represents the 
ideas and their relationships. A mid-level ontology acts as a bridge between upper-level ontology and domain 
ontology and also provides more concrete representations of abstract concepts. An Upper ontology defines the 
universal concepts which are same through all knowledge domains. Example of upper ontologies SUMO (Suggested 
upper merged ontology) [3], Sowa upper ontology [4], DOLCE [5], Opencyc [6]. Key concepts can be identified by 
set of actions, use cases, competency questions and defined on the basis of more general concepts given by the top-
level ontology. This will provide a better integration and maintenance. 
To evaluate an upper ontology two dimensions must be considered that are:  
x 
To express the encoded upper ontology knowledge representation language.  
x 
The choices, conventions, and assurances that a particular upper ontology creates. 
We are developing an upper ontology which will be known as super ontology and will be developed using 
EHCPR in which every entity will be an EHCPR. This ontology will support the development of process 
engineering ontologies. This paper is organized as follows: Section 2 depicts upper ontologies named as BFO, GFO, 
PROTON, Sowa Ontology, SUMO, DOLCE and Opencyc. Section 3 describes the Super ontology. Section 4 
describes the Implementation Framework proposed for the work. Section 5 depicts the experimental overview. In the 
last, conclusions are drawn. 
2. Existing Upper Ontologies 
Ontology is currently a young research area which is also known as a branch of knowledge representation. 
Different methods and approaches have been used for today available ontologies which ultimately resulted in 
different systems. These ontologies use a rich formal language like first order logic and classify general interest 
notions like objects, process, quality, and event and so on. However, there are still several weaknesses like reliable 
evaluation criteria and lack of established methodologies. Mainly there are seven upper ontologies available named 
BFO, GFO, PROTON, Sowa Ontology, SUMO, DOLCE and Opencyc. 
Basic Formal ontology (BFO) is the upper level, which is planned to support information recovery, analysis and 
unification in different domain. The BFO is categorized into two Entities SNAP and SPAN. It has a total of 36 
classes which are segregated as one top connecting class, and 17 SPAN classes and 18 SNAP classes [7, 8]. It is 
currently implemented in OWL.  
General Formal Ontology (GFO) ontology was developed by Heinrich Herre of OntoMed Research group in 
Leipzig. GFO contains processes, objects, functions, time, space, properties and relations. GFO is implemented in 
KIF and also OWL-DL version exists. GFO is three layered structure containing top level, middle level and basic 
level abstracts. It is basically used in representing knowledge about the biological functions Gene Ontology [8, 9]. 
PROTON is a basic upper ontology which gives upper-level ideas for semantic notation, indexing and recovery. It 
is implemented in OWL-Lite. It has been used for semantic web services as a basis of business data ontology [8]. 
Sowa’s Ontology is based on the framework of the distinctions and not based on the fixed hierarchy because 
hierarchy is generated automatically. It is implemented in FOL and version of KIF is existed [4, 8].  
DOLCE: A project called Wonderweb which was started in 2002 and was funded under European Commission 
information society technologies (IST) program. This project was ended in 2004. However DOLCE is actively being 
used which was developed as part of project Wonderweb [5, 8]. DOLCE is an upper ontology, whose aim is to 
negotiate the meaning to validate collaboration and to establish an agreement. The implementation languages for 
DOLCE are KIF, WL and FOL. DOLCE is the ontology of particulars, and those particulars are instances. The 
particulars are entities which are organized into categories and don’t have instances; universals are those entities that 
organize the categories of particulars and can also have instances [10]. 

787
 Sonika Malik et al. /  Procedia Computer Science  70 ( 2015 )  785 – 792 
 
SUMO: SUMO was first released in Dec 2000. Ian Niles and Adam Pease initially developed it at 
Teknowledge Corporation. SUMO development was done to simplify recovery and information search, data 
interoperability and automated interpretation [12]. This ontology includes both universals and particulars. SUMO 
includes both elements of realism and intellectual categories [13, 14]. Standard Upper Ontology Knowledge 
Interchange Format (SUO-KIF) is used to represent SUMO. SUMO is Multiplicative in nature. SUMO is also 
connected to lower level ontologies, Mid-level Ontology (MILO) and also includes domain ontologies for 
government, military, assassination and bombings [2]. 
 
Open Cyc Ontology: Douglas Leant released Cyc project in 1984 in the Microelectronics and Computer 
Technology Corporation (MCC) [8]. Later a company called Cycorp was established in 1994 to apply the Cyc 
technology for further development and commercialized it. The Cyc knowledge base is the division of thousands of 
micro theories on the basis of a particular knowledge domain, a particular level of detail and particular time interval 
[6]. The Cyc knowledge base contains set of terms and assertions needed to be stored in a manner so that it can be 
easily used, so CycL is developed.  
3. Super Ontology 
Super ontology describes the structure of the universe. In this super ontology we have defined the concept of 
reality. The reality is defined to have an existence which is known as truth. In this ontology the world of reality or 
universe contains two classes of objects: living Objects and Nonliving Objects. Basically, this super ontology 
consists of six universal substances or entities like Living entity and five nonliving entities which are matter, space, 
medium of motion, medium of rest and time. 
 
 
Fig. 1. Super Ontology 

788  
 Sonika Malik et al. /  Procedia Computer Science  70 ( 2015 )  785 – 792 
Every entity in the universe is permanent, but continuously undergoes countless changes and during these 
changes nothing is destroyed. Everything is recycled into another form. Each entity in this universe has three aspects 
like origination, destruction and Permanence. The changes that an entity suffers to the different shapes and forms 
into which a particular substance is converted either artificially or naturally. For example: A human being going 
through the process of growth undergoes different changes like childhood, young and old. These changes are natural 
modifications to a human being. Another example of Nonliving things like clay is molded into various shapes and 
same for gold [15, 16]. 
The structure of Super ontology is illustrated in figure 1. This ontology is divided into different separate modules 
named as Entity, Abstract Entity, Concrete Entity, Living Objects, Non-Living Objects, Encryption, Non-Liberated, 
Matter, Time, Non-Mobile, Mobile, 1-sense, 2-sense, 3-sense, 4-sense, 5-sense with the designated hierarchical 
structure. The low level ontologies are also separable. The topmost concept of Super ontology is “Entity” at level 1. 
This is further divided into Concrete and Abstract Entities. An abstract entity always exists as a type of thing like an 
idea while the concrete entity is one which exists at a specific place or time. There are six concrete entities called 
substances or Dravyas: One Living and five Non-livings. An abstract Entity can have various encryptions: Textual 
encryption (TE), Video encryption (VE), Audio encryption (AE), and Pictorial encryption (PE). A Living Entity can 
be a Liberated (Jiva) or Non-liberated (Ajiva). Nonliving Substances can be of five specific types, namely matter, 
space, time, medium of rest and medium of motion. Matter is a nonliving substance which possesses a physical 
body, has some mass and volume. The smallest particle of matter is parmanu. The Space provides the room to all 
other substances in the universe and supports everything. The medium of rest is a nonliving substance which helps to 
rest the movement of soul and matter. Medium of motion is also a non living entity whose primary function is 
helping in the movement of matter. Similarly Time is a nonliving entity which provides the changeability in living 
and nonliving entities [17, 18, 19]. All these six basic substances can be taken to any level of specificity based on the 
domain of interest.  
4. Implementation Framework 
The ontological development has gone through a long history since the 1990s. There are a number of research 
efforts to incorporate some ideas in Artificial Intelligence for representing knowledge in World Wide Web. Firstly 
SHOE came which is an HTML based knowledge representation language. After that XOL came which is later 
called OIL [20] that is based on XML [21]. Then Resource Description Framework (RDF) emerged, which is for 
describing resources on the web [22]. The Resource Development Framework Schema (RDFS) [23] are also being 
used for representing RDF vocabulary on the web. All these languages were not compatible with the architecture of 
the web, at least not of semantic web. Then OWL [24, 25] has come which is used for processing information on the 
web. It is on the top of RDF and is written in XML. OWL has three sub languages like OWL-DL, OWL-Lite and 
OWL-Full.  OWL has some additional features catering to semantic web like capacity to be dispersed through many 
systems, accessible to web needs, well-matched with web standards for availability and internationalization, open 
and extensible.  All the existing upper ontologies are implemented in one or the other of these languages. Like BFO, 
GFO, PROTON, Sowa Ontology, SUMO, DOLCE and Opencyc are implemented in OWL, CycL, OWL-DL, OWL-
Lite, and FOL.  
An Extended Hierarchical Censored Production Rules (EHCPRs) is a knowledge representation system for 
reasoning with real life problems and a step towards a generalized representation system. An EHCPR is a unit of 
knowledge resulting in a knowledge base which is modular and hierarchical in nature. Jain and Jain used the 
Extended Hierarchical Censored Production Rules (EHCPRs) to denote the knowledge in intelligent systems [26, 27, 
28]. An EHCPR has the general form defined in the form of following eight operators: A, B, C, G, S, Has_part, 
Has_property and Has_instance. The operator A is defined as the Head of the rule that means the decision is to be 
taken if preconditions (B) will be satisfied. B defines the preconditions which are the defining attributes of the 
concept A. The operator C is unless operator. It defines the censor conditions which are exceptions to the rule. The 
symbol G denotes the general concept of A up in the hierarchy and is helpful in backward chaining of reasoning.  
The symbol S denotes the more specific concepts in the Knowledge base and is helpful in forward chaining of 
reasoning. There are basically two types of attributes which are to be defined like common attributes and specific 

789
 Sonika Malik et al. /  Procedia Computer Science  70 ( 2015 )  785 – 792 
attributes. In the If part of the rule, i.e., the operator B, we store the common (defining) attributes which will be the 
necessary conditions. The Has_part and the Has_property operators store the specific (characteristic) attributes of the 
concept. The Has_instance operator lists all the known instances of the concept A. 
Parameter ‘γ’ is a numeric measure of the strength of ‘If’ relationship between ‘A’ and ‘B’. It is meant to as the 
0–level strength of implication. Every censor C is associated with an estimate of its likelihood (δ1….. δn). It may 
also be referred as the likelihood factor of the respected censor [38]. 
The authors also discussed different schemes for enhancing the intelligence, i.e., the database and knowledge base 
in the EHCPRs system which is capable to get new pieces of knowledge and integrate it properly in the already 
acquired knowledge base [29, 30]. The EHCPRs system may act as a generalized intelligent agent for context 
sensitivity. The EHCPR System is an Ontology Learning System and a general exchange language for ontologies 
[32, 33]. A EHCPRs System as an “Online Globalized Real Time Intelligent System”, which is also context 
sensitive, multilingual, and multi-encrypted; and most importantly, it has potency to grow in the whatsoever domain 
of expertise one can think of [34]. 
The EHCPRs Framework has the capabilities of Variable precision logic, Non-monotonic reasoning, provides the 
support for reasoning and representing with uncertainty, context sensitive reasoning, minimum redundancy and 
highest consistency. We propose the EHCPRs framework as the most general framework to implement the super 
ontology which is mentioned above in figure 1. In this super ontology, every Entity like Living, Non-Living, matter, 
space, medium of rest, medium of motion etc will be an EHCPR as shown in Table 1. In this way we can define 
EHCPR of the entities of Super ontology as mentioned in figure 1.  
5. Experimental Overview 
This section depicts the technical overview of super ontology. As per the structure mentioned in figure1, EHCPR 
will act as a class and all the operators like Name, Specificity, Generality, Has_part, Has_property and Has_instance 
within this class will be shown as members. Name will be represented as string; Specificity, Has_part, Has_property, 
Has_instance will be represented as linked list and Generality will be represented as EHCPR. The structure of 
different classes like EHCPR, Linked List and hash table in python is presented in Table 2.  
Table 1. Super Ontology represented as EHCPR 
Level 3 
Living 
If  {consciousness}  
Unless  
Nil 
Generality   Concrete entity 
Specificity 
{Liberated, 
Non-
liberated} 
Has_part Nil  
Has_property{consciousness, bliss,  
Energy}  
Has_instance  Nil 
Nonliving  
 
 
If {Non consciousness} 
 
Unless Nil  
Generality  Concrete Entity   
Specificity {matter, space, time, medium 
of rest, medium of motion}                
Has_part    Nil 
Has_property {color, size ,shape, touch} 
Has_instance  Nil 
 
Level 4 
Liberated  
If { Pure Consciousness} 
Unless Nil 
Generality Livng 
Specificity Nil 
Has_part Nil 
Has_property 
{ 
Perception, 
knowledge, Unlimited Happiness, 
Infinite Energy }  
Has_instance  Nil 
Nonliberated 
If {Possess Body} 
Unless Nil 
Generality Living 
Specificity {mobile , Non-mobile} 
Has_part  Nil 
Has_property {Limited knowledge, bliss, 
power, vision} 
Has_instance Nil 
Time 
If {changeability}  
 
Unless Nil  
 
Generality   Nonliving 
 
Specificity {Vyavahar Kaal, Nishchay Kaal}   
Has_part       
{moment, second, minute, hour , day, month 
,year}  
Has_property {real existence, imaginary thing} 
Has_instance  Nil 

790  
 Sonika Malik et al. /  Procedia Computer Science  70 ( 2015 )  785 – 792 
Level 4 
Medium of rest 
 
If {rest} 
 
 
Unless Nil  
Generality Nonliving Specificity  
{Nil} 
 
Has_part  { lokakas} 
Has_property Nil 
Has_instance Nil 
 
Medium of motion 
 
If {movement} 
 
Unless  Nil 
 
Generality  Nonliving 
Specificity  {Nil} 
 
Has_part  {lokakas} 
Has_property Nil 
Has_instance  Nil 
 
Matter  
 
 
 
If  {form}  
Unless    Nil 
 
Generality    Nonliving 
Specificity {skandha,  pamanu}    
Has_part  Nil  
Has_property  { touch, taste, smell , sight} 
Has_instance     Nil 
Level 4 
Space 
If {possess} 
 
Unless  Nil 
 
Generality  Nonliving 
Specificity  { Cosmic space, Tran-
cosmic space} 
Has_part   { universe, empty} 
Has_property{provide 
accommodation 
to 
soul 
and 
matter} 
Has_instance  Nil 
 
 
Level 7 
Human Being 
 
If { Conciousness} 
Unless Nil 
Generality 5-sense 
Specificity Nil 
 
 
Has_Property{Taste, Smell, Hear, 
Touch, Sight} 
Has_part  { Legs, Hands, Ears} 
Has_instance {Ram, Sham , Rita} 
 
Animal 
 
 
 
If {Movement} 
 
Unless Nil  
Generality 5-sense 
Specificity Nil 
 
Has_property{ 
multicellular, 
motile, 
eukaryotic} 
Has_part        {legs, eyes} 
Has_instance   {lion, elephant} 
 
 
Table 2. Structures of Classes 
Class EHCPR 
Class Linked List 
Class Hash table 
Class EHCPR: 
def__init__(self,name,gen,spec,has-
part,has_property,has_instance): 
        Self.name=name 
        Self.gen=EHCPR() 
        Self.Spec=LinkedList() 
        Self.Has_part= LinkedList() 
        Self.Has_property= LinkedList() 
        Self.Has_instance= LinkedList() 
 
Class node: 
def__init__(self,data): 
 
self.data=data 
 
self.next=node 
Class LinkedList: 
def__init__(self): 
 
self.head=None 
self.tail=None 
def add (self,data) 
 
new_node=node(data) 
if(self.head is None): 
self.head=self.tail=new_node 
else: 
 
new_node=node(data) 
 
self.tail.next=new_node 
 
self.tail=new_node 
 
Class HashTable: 
def__init__(size) 
h=new hash tables “specificity of generality” 
if(!key): 
return NULL 
hsize=size/load_factor 
hcount=0 
if(htable is NULL): 
return 
else: 
for i in range (0,size): 
h->table[i]->next=NULL 
h->table[i]->hcount=0 
  
 
In the linked list class, nodes can be inserted or deleted from the linked lists as code for add is mentioned in the 
class linked list. After that instantiation of knowledge base is done using hashing. Initially a hash table will be 
created as mentioned in the table1.  The Knowledge base structure using linked list is also shown below in figure 2. 
Once the structure of super ontology is defined, reasoning like knowledge browsing or concept navigation can be 
done which will help in searching anything from the knowledge base. Once the ontological framework is in place, it 
can be tuned to perform the following tasks and many more: Concept navigation, Facilitator in education, Translator, 
Recommender system, Online banking, Unique Identity card linking with Pan Card, Voter Card, Aadhar Card, etc., 
Global Positional System, Real Time Computer Surveillance, and more. Learning can also be performed on the same 

791
 Sonika Malik et al. /  Procedia Computer Science  70 ( 2015 )  785 – 792 
which means updating the knowledge base through mapping from all the relevant ontology or distributed data 
available online. 
 
 
Fig. 2.  Knowledge Base structure using linked list 
 
6. Conclusion 
In this paper, we have defined a super ontology which explains the structure of the universe and concepts of 
reality. This super ontology will be independent of any specific domain of application and all other applications to 
which it will be put to use in the future. In order to achieve this it will use a unique representation scheme for 
representing knowledge in its knowledge base having a uniform code of structure of an Extended Hierarchical 
Censored Production Rule (EHCPR). The EHCPRs framework is a consistent and comprehensive framework for 
information storage and exchange on the web. By using EHCPR’s framework for representing knowledge the 
devised super ontology derives all the benefits which are necessary for a knowledge treasure.  
References 
1. Yang A and Marquardt W. An Ontology-based Approach to Conceptual Process Modelling. Proceedings of ESCAPE-14, Portugal 2004 
2. Semy S, Pulvermacher M, Obrst L. Toward the use of an upper ontology for U.S. government and U.S. military domains: An evaluation. 
Technical Report MTR 04B0000063, the MITRE Corporation, 2004. 
3. Niles I, Pease A. Towards a Standard Upper Ontology In Proceedings of the 2nd International Conference on Formal Ontology in 
Information Systems (FOIS) 2001. 
4. http://www.jfsowa.com/ontology/toplevel.htm Jeff Heflin 
5. Gangemi A, Guarino N, Masolo C, Oltramari A and Schneider L Sweetening ontologies with dolce  in Proceedings of the European 
Workshop on Knowledge Acquisition, Modeling, and Management, 2002 
6. Matuszek C, Cabral J, Witbrock M, DeOliveira J. An introduction to the syntax and content of Cyc. In AAAI Spring Symposium, 2006. 
7. Basic Formal Ontology and Medical Ontology, http://ontology.buffalo.edu/bfo/BFO.htm, 2003. 
8. Mascardi V, Cordì V, Rosso P. A Comparison of Upper Ontologies. Technical Report DISI-TR-06-2, Genova, Italy, 2007. 
9. Herre H, Heller B, Burek P, Hoehndorf R, Loebe F, Michalek H. General formal ontology (GFO) – part I: Basic principles. Technical     
Report 8, Onto-Med, University of Leipzig, 2006. 
10. Simons P. Parts: A Study in Ontology. Oxford, United Kingdom : Clarendon,1987 
11. Varzi A. The Monist (Special Issue on Temporal Parts) 83:3, 2000 
12.  Nichols  D, Terry A. User’s Guide to Teknowledge Ontologies, 2003 
13.  Farar S, Bateman  J. General Ontology Baseline, Deliverable D1, I1-[OntoSpace]; Workpackage, 2004  

792  
 Sonika Malik et al. /  Procedia Computer Science  70 ( 2015 )  785 – 792 
14. Niles I, Pease A. Origins of the IEEE Standard Upper Ontology, in Working Notes of the IJCAI, Workshop on the IEEE Standard Upper 
Ontology, 2001 
15. http://www.umich.edu/~umjains/jainismsimplified/chapter03.html 
16. http://www.jainlibrary.org/JAB/11_JAB_2015_Manual_Finpdf 
17.  http://www.jainworld.com/education/juniors/junles08.htm 
18.  http://www.jainpushp.org/munishriji/ss-5-seven-tattava.htm 
19.  http://jainteerth.com/chapter-5-how-to-know-a-substance/ 
20. Fensel D, Harmelen F, Horrocks I, McGuinness D, Patel-Schneider P. OIL: An Ontology Infrastructure for the Semantic Web. Presented at 
IEEE Intelligent Systems; 2001. P.38-45. 
21. Bray T, Paoli J, Sperberg-McQueen C. Extensible Markup Language (XML) Presented at World Wide Web Journal; 1997. P.27-66. 
22. Brickley D, Guha R. Resource Description Framework (RDF) Schema specification, 2000.  
23. http://www.w3.org/TR/RDF-schema. 
24. McBride S, Staab R. The Resource Description Framework (RDF) and its Vocabulary Description Language RDFS, the Handbook on 
Ontologies in Information Systems; Springer-Verlag, 2003. 
25. Antoniou G, Harmelen F. Web Ontology Language: OWL, Presented at Handbook on Ontologies; 2004. p. 67-92 
26. McGuinness D, Harmelen F. OWL Web Ontology Language Overview, Technical report, W3C, http://www.w3.org/TR/owl-features/, 
2004. 
27. Jain S, Jain N.K., Goel C. K. Reasoning in EHCPRs system. International Journal of Open Problems Computation Math 2009a; 2(2): 173–
193 
28. Jain S., Jain N.K. Learning techniques in Extended Hierarchical Censored Production Rules (EHCPRs) System. Artificial Intelligence 
Review 2012; 38: 97-117. 
29. Jain N.K., Jain S. Live Multilingual Thinking Machine. Journal of Experimental and Theoretical Artificial Intelligence, Taylor and Francis 
2013; 25:4. 575-587. 
30.  Jain S, Jain N.K. Acquiring Knowledge in Extended Hierarchical Censored Production Rules (EHCPRS) System. International Journal of 
Artificial Life Research, IGI Global, Hershey, PA, USA: 2010; 1:4, 10-28. 
31. Jain S, Jain N.K. Representation of Defaults and Constraints in EHCPRs System: An Implementation. International Journal of Adaptive and 
Innovative Systems, Inderscience Publishers, Switzerland: 2010 ; 1:2, 105-120  
32.  Jain N. K., Jain S, Chaudhary D. Multilingual EHCPRs System. Proceedings of National Conference on Recent Trends in Materials and 
Devices. Amity University; 2011. 
33.  Jain S, Jain N. K., Mishra S. EHCPRs System – An Ontology Learning System. 9th INDIACom; 2nd IEEE International Conference on 
Computing for Sustainable Global Development; 2015. p. 425-431. 
34. Mishra S, Jain S. A Study of Various Approaches and Tools on Ontology. IEEE International Conference on Computational Intelligence & 
Communication Technology (CICT), Ghaziabad, India; 2015. p. 57-61. 
35. Jain S, Jain N. K. A Globalized Intelligent System. IEEE International Conference on Computing for Sustainable Global Development 
INDIACom; 2014. p. 425-431 
36.  Curtis J, Baxter D, Cabral J. On the application of the Cyc ontology to word sense disambiguation. In Proceedings of the 19th International 
Florida Artificial Intelligence Research Society Conference; 2006.  p. 652– 657 
37.  J. Curtis, G. Matthews, and D. Baxter On the effective use of Cyc in a question answering system. In Proceedings of the IJCAI Workshop 
on Knowledge and Reasoning for Answering Questions; 2005. 
38. Thanga Uma1 EL, Rajaranganathan S, Karthik S. A survey on ontology in semantic web International Journal of Science, Engineering and 
Technology Research 2013; 2:1. 
39. Jain N. K., Bharadwaj K. K., Marranghello Norian. Extended Hierarchical Censored Production Rules (EHCPRs) system: An approach 
toward generalized knowledge representation. Journal of Intelligent Systems 1999; 9(3- 4): 259-295 
40. Gruber T. The Role of Common Ontology in Achieving Sharable, Reusable Knowledge Bases in Principles of Knowledge Representation 
and Reasoning. Proc. of the 2nd International Conference. San Mateo: CA; 1991. 
 

