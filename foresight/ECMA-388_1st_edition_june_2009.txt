Reference number
ECMA-123:2009
© Ecma International 2009
 
 
 
ECMA-388 
1st Edition / June 2009 
Open XML Paper 
Specification (Open 
XPS®) 

 
COPYRIGHT PROTECTED DOCUMENT 
 
© Ecma International 2009
 
 

 
 
Open XML 
Paper 
Specification 
 
OpenXPS Specification and Reference Guide 
 
 
 
First Edition 
 
June 2009 
 
 
© 2009, Ecma International. All rights reserved. 
 
 
 
This document was produced by Ecma Technical Committee TC46.


ECMA-388 
Contents 
 
 
 First Edition, June 2009 
iii 
Contents 
1. SCOPE ............................................................................................................................. 1 
2. CONFORMANCE ................................................................................................................... 3 
2.1 
Requirements Terminology .................................................................................................... 3 
2.2 
Implementation Conformance ................................................................................................ 3 
2.3 
Instantiating Error Conditions ................................................................................................ 4 
3. NORMATIVE REFERENCES ...................................................................................................... 5 
4. DEFINITIONS..................................................................................................................... 7 
5. NOTATIONAL CONVENTIONS ................................................................................................ 11 
5.1 
Document Conventions ......................................................................................................... 11 
5.2 
Diagrams .............................................................................................................................. 11 
6. ACRONYMS AND ABBREVIATIONS ........................................................................................... 13 
7. GENERAL DESCRIPTION ...................................................................................................... 15 
8. OPENXPS DOCUMENT FORMAT ............................................................................................. 17 
8.1 
How This Standard Is Organized ........................................................................................... 17 
8.2 
Package ............................................................................................................................... 19 
9. PARTS AND RELATIONSHIPS ................................................................................................ 21 
9.1 
Fixed Payload ....................................................................................................................... 21 
9.1.1 
Fixed Payload Relationships ................................................................................................ 24 
9.1.2 
FixedDocumentSequence Part .............................................................................................. 25 
9.1.3 
FixedDocument Part ........................................................................................................... 25 
9.1.4 
FixedPage Part .................................................................................................................. 26 
9.1.5 
Image Parts ..................................................................................................................... 26 
9.1.6 
Thumbnail Parts ................................................................................................................ 32 
9.1.7 
Font Parts ........................................................................................................................ 33 
9.1.8 
Remote Resource Dictionary Parts ........................................................................................ 37 
9.1.9 
PrintTicket Parts ................................................................................................................ 37 
9.1.10 
SignatureDefinitions Part .................................................................................................... 38 
9.1.11 
DocumentStructure Part ..................................................................................................... 38 
9.1.12 
StoryFragments Part .......................................................................................................... 39 
9.2 
Part Naming Recommendations ............................................................................................. 39 
9.3 
OpenXPS Document Markup .................................................................................................. 41 
9.3.1 
Support for Versioning and Extensibility ................................................................................ 42 
9.3.2 
XML Usage ....................................................................................................................... 42 
9.3.3 
Markup Model ................................................................................................................... 43 
9.3.4 
Whitespace ...................................................................................................................... 45 
9.3.5 
Language ......................................................................................................................... 45 
10. DOCUMENTS .................................................................................................................. 47 
10.1 
<FixedDocumentSequence> Element ..................................................................................... 47 
10.1.1 
<DocumentReference> Element........................................................................................... 47 
10.2 
<FixedDocument> Element ................................................................................................... 48 
10.2.1 
<PageContent> Element..................................................................................................... 48 
10.2.2 
<PageContent.LinkTargets> Element .................................................................................... 49 
10.2.3 
<LinkTarget> Element ....................................................................................................... 50 

Contents 
ECMA-388 
iv 
First Edition, June 2009 
 
10.3 
<FixedPage> Element ........................................................................................................... 51 
10.3.1 
BleedBox Attribute ............................................................................................................ 52 
10.3.2 
ContentBox Attribute ......................................................................................................... 53 
10.3.3 
Media Orientation and Scaling ............................................................................................. 53 
10.4 
<Canvas> Element ............................................................................................................... 54 
10.5 
<Path> Element ................................................................................................................... 57 
10.6 
<Glyphs> Element ................................................................................................................ 58 
11. GRAPHICS ..................................................................................................................... 59 
11.1 
<Path> Element ................................................................................................................... 60 
11.1.1 
<Path.Data> Element ........................................................................................................ 64 
11.1.2 
<Path.Fill> Element........................................................................................................... 65 
11.1.3 
<Path.Stroke> Element...................................................................................................... 66 
11.2 
Geometries and Figures ........................................................................................................ 67 
11.2.1 
Geometries ...................................................................................................................... 68 
11.2.2 
Figures ............................................................................................................................ 70 
11.2.3 
Abbreviated Geometry Syntax ............................................................................................. 80 
12. TEXT ........................................................................................................................... 87 
12.1 
<Glyphs> Element ................................................................................................................ 88 
12.1.1 
Glyph Metrics ................................................................................................................... 93 
12.1.2 
Mapping Code Units to Glyphs ............................................................................................. 94 
12.1.3 
Indices Attribute ............................................................................................................... 97 
12.1.4 
UnicodeString Attribute .....................................................................................................100 
12.1.5 
StyleSimulations Attribute .................................................................................................100 
12.1.6 
IsSideways Attribute .........................................................................................................101 
12.1.7 
DeviceFontName Attribute .................................................................................................106 
12.1.8 
xml:lang Attribute ............................................................................................................107 
12.1.9 
CaretStops Attribute .........................................................................................................107 
12.1.10 Optimizing Glyph Markup ...................................................................................................107 
12.1.11 Glyph Markup Examples ....................................................................................................108 
12.2 
<Glyphs.Fill> Element ........................................................................................................ 111 
13. BRUSHES .................................................................................................................... 113 
13.1 
<SolidColorBrush> Element ................................................................................................ 113 
13.2 
<ImageBrush> Element ...................................................................................................... 115 
13.3 
<VisualBrush> Element ...................................................................................................... 118 
13.3.1 
<VisualBrush.Visual> Element............................................................................................120 
13.4 
Common Attributes for Tiling Brushes ................................................................................. 121 
13.4.1 
Viewbox, Viewport, ViewboxUnits, and ViewportUnits Attributes ...............................................122 
13.4.2 
TileMode Attribute ............................................................................................................126 
13.5 
<LinearGradientBrush> Element ......................................................................................... 137 
13.5.1 
SpreadMethod Attribute ....................................................................................................139 
13.5.2 
<LinearGradientBrush.GradientStops> Element .....................................................................142 
13.6 
<RadialGradientBrush> Element ......................................................................................... 143 
13.6.1 
SpreadMethod Attribute ....................................................................................................146 
13.6.2 
<RadialGradientBrush.GradientStops> Element .....................................................................149 
13.7 
<GradientStop> Element .................................................................................................... 149 
13.8 
Using a Brush as an Opacity Mask ....................................................................................... 150 
14. COMMON PROPERTIES .................................................................................................... 155 
14.1 
Opacity .............................................................................................................................. 156 
14.2 
Resources and Resource References ................................................................................... 156 
14.2.1 
<FixedPage.Resources> Element ........................................................................................157 

ECMA-388 
Contents 
 
 
 First Edition, June 2009 
v 
14.2.2 
<Canvas.Resources> Element ........................................................................................... 158 
14.2.3 
<ResourceDictionary> Element .......................................................................................... 159 
14.2.4 
Resource References ........................................................................................................ 162 
14.2.5 
Scoping Rules for Resolving Resource References ................................................................. 163 
14.2.6 
Support for Markup Compatibility ....................................................................................... 164 
14.3 
Clipping .............................................................................................................................. 164 
14.3.1 
<Canvas.Clip> Element .................................................................................................... 164 
14.3.2 
<Path.Clip> Element ........................................................................................................ 165 
14.3.3 
<Glyphs.Clip> Element .................................................................................................... 167 
14.4 
Positioning Content ............................................................................................................ 167 
14.4.1 
<MatrixTransform> Element ............................................................................................. 168 
14.4.2 
<Canvas.RenderTransform> Element.................................................................................. 171 
14.4.3 
<Path.RenderTransform> Element ..................................................................................... 172 
14.4.4 
<Glyphs.RenderTransform> Element .................................................................................. 173 
14.4.5 
<PathGeometry.Transform> Element .................................................................................. 174 
14.4.6 
<ImageBrush.Transform> Element .................................................................................... 175 
14.4.7 
<VisualBrush.Transform> Element ..................................................................................... 176 
14.4.8 
<LinearGradientBrush.Transform> Element ......................................................................... 179 
14.4.9 
<RadialGradientBrush.Transform> Element ......................................................................... 180 
14.5 
OpacityMask ....................................................................................................................... 182 
14.5.1 
<Canvas.OpacityMask> Element ........................................................................................ 182 
14.5.2 
<Path.OpacityMask> Element ............................................................................................ 183 
14.5.3 
<Glyphs.OpacityMask> Element ........................................................................................ 185 
15. COLOR ....................................................................................................................... 187 
15.1 
Color Support ..................................................................................................................... 187 
15.1.1 
sRGB Color Space ............................................................................................................ 187 
15.1.2 
scRGB Color Space .......................................................................................................... 188 
15.1.3 
Gray Color Space ............................................................................................................ 188 
15.1.4 
CMYK Color Space ........................................................................................................... 188 
15.1.5 
N-Channel Color Spaces ................................................................................................... 188 
15.1.6 
Named Color for Spot Colors and N-tone Images .................................................................. 188 
15.1.7 
Identifying Output-Ready Color Spaces Using ICC Profiles ...................................................... 188 
15.1.8 
ICC Profiles .................................................................................................................... 188 
15.2 
Vector Color Syntax ............................................................................................................ 189 
15.2.1 
sRGB Color Syntax .......................................................................................................... 191 
15.2.2 
scRGB Color Syntax ......................................................................................................... 191 
15.2.3 
Grayscale syntax ............................................................................................................. 191 
15.2.4 
CMYK Color Syntax .......................................................................................................... 192 
15.2.5 
N-Channel Color Syntax ................................................................................................... 192 
15.2.6 
Named Color Syntax ........................................................................................................ 193 
15.3 
Colors in Raster Images ...................................................................................................... 194 
15.3.1 
sRGB Raster Images ........................................................................................................ 194 
15.3.2 
scRGB Raster Images ....................................................................................................... 195 
15.3.3 
Gray Raster Images ......................................................................................................... 195 
15.3.4 
CMYK Raster Images ........................................................................................................ 196 
15.3.5 
N-channel Raster Images .................................................................................................. 197 
15.3.6 
Named Color Raster Images .............................................................................................. 198 
15.3.7 
Images and Color Profile Association .................................................................................. 198 
15.4 
Registration Marks for Color Separations ............................................................................. 200 
15.5 
Alpha and Gradient Blending ............................................................................................... 201 
15.6 
Color Rendering Intent ....................................................................................................... 201 
16. DOCUMENT STRUCTURE AND INTERACTIVITY ......................................................................... 203 
16.1 
Document Structure Markup ................................................................................................ 203 
16.1.1 
DocumentStructure Part ................................................................................................... 203 
16.1.2 
StoryFragments Part ........................................................................................................ 209 
16.2 
Hyperlinks .......................................................................................................................... 221 
16.2.1 
Hyperlink Activation ......................................................................................................... 221 

Contents 
ECMA-388 
vi 
First Edition, June 2009 
 
16.2.2 
Hyperlink Addressing ........................................................................................................222 
16.2.3 
Name Attribute ................................................................................................................222 
16.2.4 
FixedPage.NavigateUri Attribute .........................................................................................223 
16.3 
Selection ............................................................................................................................ 224 
16.4 
Accessibility ....................................................................................................................... 224 
16.4.1 
Reading Order .................................................................................................................224 
16.4.2 
Screen Reader Applications ................................................................................................225 
16.4.3 
Text Alternatives for Graphics and Images ...........................................................................225 
17. OPENXPS DOCUMENT PACKAGE FEATURES ........................................................................... 227 
17.1 
Interleaving Optimizations ................................................................................................. 227 
17.1.1 
Empty PrintTicket .............................................................................................................228 
17.1.2 
Optimizing Interleaving Order ............................................................................................228 
17.1.3 
Consuming Interleaved Packages ........................................................................................231 
17.1.4 
Consumers with Resource Constraints .................................................................................231 
17.1.5 
Interleaving Optimizations and Digital Signatures ..................................................................233 
17.2 
Digital Signatures ............................................................................................................... 234 
17.2.1 
Signature Policy ...............................................................................................................234 
17.2.2 
Signature Definitions ........................................................................................................237 
17.3 
Core Properties .................................................................................................................. 241 
18. RENDERING RULES ........................................................................................................ 243 
18.1 
Coordinate System and Rendering Placement ...................................................................... 243 
18.1.1 
Page Dimensions ..............................................................................................................243 
18.1.2 
Rounding of Coordinates ...................................................................................................243 
18.1.3 
Transforms .....................................................................................................................244 
18.1.4 
Pixel Center Location, Pixel Placement, and Pixel Inclusion ......................................................244 
18.1.5 
Maximum Placement Error .................................................................................................245 
18.1.6 
Pixel Placement for Glyphs .................................................................................................245 
18.1.7 
Abutment of Shapes .........................................................................................................245 
18.1.8 
Clipping Behavior .............................................................................................................245 
18.2 
Implementation Limits ....................................................................................................... 246 
18.3 
Gradient Computations ....................................................................................................... 247 
18.3.1 
All Gradients ...................................................................................................................247 
18.3.2 
Linear Gradients ..............................................................................................................249 
18.3.3 
Radial Gradients ..............................................................................................................251 
18.4 
Opacity Computations ......................................................................................................... 254 
18.4.1 
Pre-Multiplied Alpha and Superluminous Colors .....................................................................256 
18.5 
Composition Rules .............................................................................................................. 257 
18.5.1 
Optimization Guidelines .....................................................................................................258 
18.5.2 
Composition Examples ......................................................................................................259 
18.6 
Stroke Rendering................................................................................................................ 262 
18.6.1 
Stroke Edge Parallelization ................................................................................................262 
18.6.2 
Phase Control ..................................................................................................................262 
18.6.3 
Symmetry of Stroke Drawing Algorithms ..............................................................................262 
18.6.4 
Rules for Dash Cap Rendering ............................................................................................263 
18.6.5 
Rules for Line Cap Rendering .............................................................................................265 
18.6.6 
Line Caps for Dashed Strokes .............................................................................................266 
18.6.7 
Rules for Line Join Rendering .............................................................................................267 
18.6.8 
Rules for Degenerate Line and Curve Segments ....................................................................271 
18.6.9 
Stroking and Fill Rule ........................................................................................................272 
18.6.10 Mixing Stroked and Non-Stroked Segments ..........................................................................272 
18.6.11 Stroke Behavior with Multiple Path Figures ...........................................................................272 
18.6.12 Consistent Nominal Stroke Width ........................................................................................272 
18.7 
Brushes and Images ........................................................................................................... 273 
18.7.1 
Small Tiles ......................................................................................................................273 
18.7.2 
Image Scaling .................................................................................................................273 
18.7.3 
Tile Placement .................................................................................................................274 

ECMA-388 
Contents 
 
 
 First Edition, June 2009 
vii 
18.7.4 
Tiling Transparent Visual Brushes and Image Brushes ........................................................... 274 
19. ELEMENTS ................................................................................................................... 275 
19.1 
ArcSegment ........................................................................................................................ 275 
19.2 
Canvas ............................................................................................................................... 276 
19.3 
Canvas.Clip ......................................................................................................................... 278 
19.4 
Canvas.OpacityMask ........................................................................................................... 278 
19.5 
Canvas.RenderTransform .................................................................................................... 279 
19.6 
Canvas.Resources ............................................................................................................... 279 
19.7 
Discard ............................................................................................................................... 279 
19.8 
DiscardControl .................................................................................................................... 280 
19.9 
DocumentOutline ................................................................................................................ 280 
19.10 
DocumentReference ............................................................................................................ 281 
19.11 
DocumentStructure ............................................................................................................. 281 
19.12 
DocumentStructure.Outline ................................................................................................. 281 
19.13 
FigureStructure .................................................................................................................. 282 
19.14 
FixedDocument ................................................................................................................... 282 
19.15 
FixedDocumentSequence .................................................................................................... 282 
19.16 
FixedPage .......................................................................................................................... 283 
19.17 
FixedPage.Resources .......................................................................................................... 284 
19.18 
Glyphs ................................................................................................................................ 285 
19.19 
Glyphs.Clip ......................................................................................................................... 289 
19.20 
Glyphs.Fill .......................................................................................................................... 289 
19.21 
Glyphs.OpacityMask ............................................................................................................ 290 
19.22 
Glyphs.RenderTransform ..................................................................................................... 290 
19.23 
GradientStop ...................................................................................................................... 290 
19.24 
ImageBrush........................................................................................................................ 291 
19.25 
ImageBrush.Transform ....................................................................................................... 293 
19.26 
Intent ................................................................................................................................ 293 
19.27 
LinearGradientBrush ........................................................................................................... 294 
19.28 
LinearGradientBrush.GradientStops .................................................................................... 295 
19.29 
LinearGradientBrush.Transform .......................................................................................... 296 
19.30 
LinkTarget .......................................................................................................................... 296 
19.31 
ListItemStructure ............................................................................................................... 297 
19.32 
ListStructure ...................................................................................................................... 297 
19.33 
MatrixTransform ................................................................................................................. 298 
19.34 
NamedElement ................................................................................................................... 298 
19.35 
OutlineEntry ....................................................................................................................... 299 
19.36 
PageContent ....................................................................................................................... 300 
19.37 
PageContent.LinkTargets .................................................................................................... 300 
19.38 
ParagraphStructure ............................................................................................................ 301 
19.39 
Path ................................................................................................................................... 302 

Contents 
ECMA-388 
viii 
First Edition, June 2009 
 
19.40 
Path.Clip ............................................................................................................................ 306 
19.41 
Path.Data ........................................................................................................................... 306 
19.42 
Path.Fill ............................................................................................................................. 306 
19.43 
Path.OpacityMask ............................................................................................................... 307 
19.44 
Path.RenderTransform ........................................................................................................ 307 
19.45 
Path.Stroke ........................................................................................................................ 307 
19.46 
PathFigure ......................................................................................................................... 308 
19.47 
PathGeometry .................................................................................................................... 309 
19.48 
PathGeometry.Transform .................................................................................................... 310 
19.49 
PolyBezierSegment ............................................................................................................. 310 
19.50 
PolyLineSegment ................................................................................................................ 311 
19.51 
PolyQuadraticBezierSegment .............................................................................................. 311 
19.52 
RadialGradientBrush ........................................................................................................... 312 
19.53 
RadialGradientBrush.GradientStops .................................................................................... 314 
19.54 
RadialGradientBrush.Transform .......................................................................................... 314 
19.55 
ResourceDictionary ............................................................................................................ 315 
19.56 
SectionStructure ................................................................................................................ 315 
19.57 
SignBy ............................................................................................................................... 316 
19.58 
SignatureDefinition ............................................................................................................ 316 
19.59 
SignatureDefinitions ........................................................................................................... 317 
19.60 
SigningLocation .................................................................................................................. 317 
19.61 
SolidColorBrush .................................................................................................................. 317 
19.62 
SpotLocation ...................................................................................................................... 318 
19.63 
Story .................................................................................................................................. 319 
19.64 
StoryBreak ......................................................................................................................... 319 
19.65 
StoryFragment ................................................................................................................... 320 
19.66 
StoryFragments .................................................................................................................. 321 
19.67 
StoryFragmentReference .................................................................................................... 321 
19.68 
TableCellStructure .............................................................................................................. 321 
19.69 
TableRowGroupStructure .................................................................................................... 322 
19.70 
TableRowStructure ............................................................................................................. 322 
19.71 
TableStructure ................................................................................................................... 323 
19.72 
VisualBrush ........................................................................................................................ 324 
19.73 
VisualBrush.Transform ....................................................................................................... 325 
19.74 
VisualBrush.Visual .............................................................................................................. 326 
A. SCHEMAS – W3C XML .................................................................................................... 327 
A.1 
Signature Definitions .......................................................................................................... 327 
A.2 
OpenXPS Document ............................................................................................................ 329 
A.3 
Resource Dictionary Key ..................................................................................................... 353 
A.4 
Document Structure ........................................................................................................... 355 
A.5 
Discard Control .................................................................................................................. 361 

ECMA-388 
Contents 
 
 
 First Edition, June 2009 
ix 
A.6 
3D-Graphic Content ............................................................................................................ 362 
B. SCHEMAS – RELAX NG ................................................................................................... 365 
B.1 
General Attribute Specification............................................................................................ 365 
B.2 
Driver Schemas .................................................................................................................. 365 
B.2.1 
DiscardControl_Part ......................................................................................................... 365 
B.2.2 
DocumentStructure_Part .................................................................................................. 365 
B.2.3 
FixedDocumentSequence_Part ........................................................................................... 366 
B.2.4 
FixedDocument_Part ........................................................................................................ 366 
B.2.5 
FixedPage_Part ............................................................................................................... 366 
B.2.6 
SignatureDefinitions_Part ................................................................................................. 366 
B.2.7 
StoryFragments_Part ....................................................................................................... 367 
B.3 
Signature Definitions .......................................................................................................... 369 
B.4 
OpenXPS Document ............................................................................................................ 371 
B.5 
Resource Dictionary Key ..................................................................................................... 383 
B.6 
Document Structure ............................................................................................................ 385 
B.7 
Discard Control ................................................................................................................... 389 
B.8 
3D-Graphic Content ............................................................................................................ 390 
C. ABBREVIATED GEOMETRY SYNTAX ALGORITHM ........................................................................ 391 
D. STANDARD NAMESPACES AND CONTENT TYPES ........................................................................ 397 
D.1 
XML Namespace URIs ......................................................................................................... 397 
D.2 
Content Types .................................................................................................................... 398 
D.3 
Relationship Types ............................................................................................................. 399 
E. RECOMMENDED FILE NAME EXTENSION AND CONTENT TYPES ...................................................... 401 
E.1 
Identification of OpenXPS Documents ................................................................................. 401 
E.2 
Embedding Producer Identification ..................................................................................... 401 
E.3 
Determination of OPC payload ............................................................................................. 401 
F. CONFORMANCE REQUIREMENTS ........................................................................................... 403 
F.1 
Implementation Conformance ............................................................................................. 403 
F.1.1 
MUST Conformance Requirements ...................................................................................... 403 
F.1.2 
SHOULD Conformance Requirements .................................................................................. 403 
F.2 
OpenXPS Document Format ................................................................................................. 404 
F.2.1 
MUST Conformance Requirements ...................................................................................... 404 
F.2.2 
SHOULD Conformance Requirements .................................................................................. 404 
F.3 
Parts and Relationships ...................................................................................................... 404 
F.3.1 
MUST Conformance Requirements ...................................................................................... 404 
F.3.2 
SHOULD Conformance Requirements .................................................................................. 410 
F.3.3 
OPTIONAL Conformance Requirements ................................................................................ 414 
F.4 
Documents ......................................................................................................................... 417 
F.4.1 
MUST Conformance Requirements ...................................................................................... 417 
F.4.2 
SHOULD Conformance Requirements .................................................................................. 418 
F.4.3 
OPTIONAL Conformance Requirements ................................................................................ 419 
F.5 
Graphics ............................................................................................................................. 419 
F.5.1 
MUST Conformance Requirements ...................................................................................... 419 
F.5.2 
SHOULD Conformance Requirements .................................................................................. 420 
F.5.3 
OPTIONAL Conformance Requirements ................................................................................ 420 
F.6 
Text ................................................................................................................................... 420 
F.6.1 
MUST Conformance Requirements ...................................................................................... 420 

Contents 
ECMA-388 
x 
First Edition, June 2009 
 
F.6.2 
SHOULD Conformance Requirements ...................................................................................422 
F.6.3 
OPTIONAL Conformance Requirements ................................................................................423 
F.7 
Brushes .............................................................................................................................. 424 
F.7.1 
MUST Conformance Requirements .......................................................................................424 
F.8 
Common Properties ............................................................................................................ 424 
F.8.1 
MUST Conformance Requirements .......................................................................................424 
F.8.2 
SHOULD Conformance Requirements ...................................................................................425 
F.8.3 
OPTIONAL Conformance Requirements ................................................................................426 
F.9 
Color .................................................................................................................................. 426 
F.9.1 
MUST Conformance Requirements .......................................................................................426 
F.9.2 
SHOULD Conformance Requirements ...................................................................................430 
F.9.3 
OPTIONAL Conformance Requirements ................................................................................433 
F.10 
Document Structure and Interactivity ................................................................................. 435 
F.10.1 
MUST Conformance Requirements .......................................................................................435 
F.10.2 
SHOULD Conformance Requirements ...................................................................................436 
F.10.3 
OPTIONAL Conformance Requirements ................................................................................439 
F.11 
OpenXPS Document Package Features................................................................................. 440 
F.11.1 
MUST Conformance Requirements .......................................................................................440 
F.11.2 
SHOULD Conformance Requirements ...................................................................................442 
F.11.3 
OPTIONAL Conformance Requirements ................................................................................444 
F.12 
Rendering Rules ................................................................................................................. 445 
F.12.1 
MUST Conformance Requirements .......................................................................................445 
F.12.2 
SHOULD Conformance Requirements ...................................................................................446 
F.12.3 
OPTIONAL Conformance Requirements ................................................................................449 
F.13 
Additional Conformance Requirements ................................................................................ 451 
F.13.1 
MUST Conformance Requirements .......................................................................................451 
F.14 
3D Graphic Content ............................................................................................................ 452 
F.14.1 
MUST Conformance Requirements .......................................................................................452 
F.14.2 
SHOULD Conformance Requirements ...................................................................................452 
F.14.3 
OPTIONAL Conformance Requirements ................................................................................453 
F.15 
Recommended File Name Extension and Content Types ....................................................... 453 
F.15.1 
MUST Conformance Requirements .......................................................................................453 
F.15.2 
SHOULD Conformance Requirements ...................................................................................453 
G. 3D GRAPHIC CONTENT ..................................................................................................... 455 
G.1 
Brush3D ............................................................................................................................. 459 
H. BIBLIOGRAPHY .............................................................................................................. 463 
I. INDEX .......................................................................................................................... 465 

ECMA-388 
List of Figures 
 
 
 First Edition, June 2009 
xi 
List of Figures 
Figure 8–1. Package-based OpenXPS Document format ..................................................... 19 
Figure 11–1. Fill using EvenOdd algorithm ........................................................................ 70 
Figure 11–2. Fill using NonZero algorithm ........................................................................ 70 
Figure 11–3. Arc choice A ............................................................................................... 74 
Figure 11–4. Arc choice B ............................................................................................... 74 
Figure 11–5. Arc choice C ............................................................................................... 74 
Figure 11–6. Arc choice D .............................................................................................. 74 
Figure 12–1. Glyph metrics ............................................................................................ 93 
Figure 12–2. Upright (usually horizontal) glyph metrics ...................................................... 93 
Figure 12–3. Sideways (usually vertical) glyph metrics ...................................................... 94 
Figure 17–1. A sample signature spot ............................................................................ 240 
Figure 18–1. Extreme curvatures and dash rendering ...................................................... 262 
Figure 18–2. Flat dash caps .......................................................................................... 263 
Figure 18–3. Square dash caps ..................................................................................... 264 
Figure 18–4. Round dash caps ...................................................................................... 264 
Figure 18–5. Triangular dash caps ................................................................................. 265 
Figure 18–6. Overlapping dash segments ....................................................................... 265 
Figure 18–7. Flat start line cap, flat end line cap ............................................................. 266 
Figure 18–8. Square start line cap, square end line cap ................................................... 266 
Figure 18–9. Triangular start line cap, triangular end line cap ........................................... 266 
Figure 18–10. Round start line cap, round end line cap .................................................... 266 
Figure 18–11. Stroke start or end point within a dash for flat dash caps ............................. 266 
Figure 18–12. Stroke start or end point within a dash for non-flat dash caps ...................... 266 
Figure 18–13. Stroke start or end point within a gap for flat dash caps .............................. 267 
Figure 18–14. Stroke start or end point within a gap for not-flat dash caps ........................ 267 
Figure 18–15. Round line join with right angle ................................................................ 267 
Figure 18–16. Round line join with acute angle ............................................................... 268 
Figure 18–17. Round line join with obtuse angle ............................................................. 268 
Figure 18–18. Beveled line join with right angle .............................................................. 268 
Figure 18–19. Beveled line join with acute angle ............................................................. 269 
Figure 18–20. Beveled line join with obtuse angle ........................................................... 269 
Figure 18–21. Mitered line join with right angle and miter limit of 1.0 ................................ 270 
Figure 18–22. Mitered line join with acute angle and miter limit of 1.0 ............................... 270 
Figure 18–23. Mitered line join with obtuse angle and miter limit of 1.0 ............................. 270 
Figure 18–24. Mitered line join with right angle and miter limit of 2.0 ................................ 271 
Figure 18–25. Mitered line join with acute angle and miter limit of 2.0 ............................... 271 
Figure 18–26. Mitered line join with acute angle and miter limit of 10.0 ............................. 271 
 


ECMA-388 
List of Tables 
 
 
 First Edition, June 2009 
xiii 
List of Tables 
Table 9–1. OpenXPS Document parts ............................................................................... 21 
Table 9–2. Fixed payload relationships ............................................................................. 24 
Table 9–3. Supported JPEG APPn markers ........................................................................ 27 
Table 9–4. Support for ancillary PNG chunks..................................................................... 27 
Table 9–5. Supported TIFF tags ...................................................................................... 28 
Table 9–6. Supported JPEG XR features ........................................................................... 32 
Table 9–7. Guidelines for Open Font Format embedding ..................................................... 34 
Table 9–8. Cmap table selection ...................................................................................... 36 
Table 11–1. Arc segment definition ................................................................................. 72 
Table 11–2. Commands ................................................................................................. 81 
Table 12–3. Glyph specifications ..................................................................................... 98 
Table 12–4. Portions of the cluster specification ................................................................ 99 
Table 12–5. IsSideways and BidiLevel effects on origin placement ..................................... 102 
Table 13–1. Brush types .............................................................................................. 113 
Table 13–2. Common attributes for <ImageBrush> and <VisualBrush> elements ............... 121 
Table 14–1. Common property attributes ....................................................................... 155 
Table 14–2. Common property elements ........................................................................ 156 
Table 15–1. Syntax summary ....................................................................................... 190 
Table 15–2. JPEG XR Format Mnemonics and ICC Profile Color Space Correspondence ......... 197 
Table 15–3. Color Space Pixel Format Defaults ............................................................... 199 
Table 15–4. Recommended ICC rendering intent usage .................................................... 201 
Table 16–1. StoryFragments part elements .................................................................... 209 
Table 16–2. Unicode character categories....................................................................... 223 
Table 18–1. Recommended minimum processing requirements ......................................... 246 
Table 18–2. Opacity computation symbols ...................................................................... 254 
Table D–1. Package-wide namespaces ........................................................................... 397 
Table D–2. OpenXPS Document namespaces .................................................................. 397 
Table D–3. Package-wide content types ......................................................................... 398 
Table D–4. OpenXPS Document content types ................................................................ 398 
Table D–5. Package-wide relationship types ................................................................... 399 
Table D–6. OpenXPS Document relationship types ........................................................... 399 
Table F–1. Implementation MUST conformance requirements ........................................... 403 
Table F–2. Implementation SHOULD conformance requirements ....................................... 403 
Table F–3. OpenXPS Document format MUST conformance requirements ........................... 404 
Table F–4. OpenXPS Document format SHOULD conformance requirements ....................... 404 
Table F–5. Parts and Relationships MUST conformance requirements ................................. 404 
Table F–6. Parts and Relationships SHOULD conformance requirements ............................. 410 
Table F–7. Parts and Relationships OPTIONAL conformance requirements .......................... 414 
Table F–8. Document MUST conformance requirements ................................................... 417 
Table F–9. Document SHOULD conformance requirements ............................................... 418 
Table F–10. Document OPTIONAL conformance requirements ........................................... 419 
Table F–11. Graphics MUST conformance requirements.................................................... 419 
Table F–12. Graphics SHOULD conformance requirements ................................................ 420 
Table F–13. Graphics OPTIONAL conformance requirements ............................................. 420 
Table F–14. Text MUST conformance requirements .......................................................... 420 
Table F–15. Text SHOULD conformance requirements ...................................................... 422 
Table F–16. Text OPTIONAL conformance requirements ................................................... 423 
Table F–17. Brushes MUST conformance requirements .................................................... 424 
Table F–18. Common properties MUST conformance requirements .................................... 424 
Table F–19. Common properties SHOULD conformance requirements ................................ 425 
Table F–20. Common properties OPTIONAL conformance requirements .............................. 426 

List of Tables 
ECMA-388 
xiv 
First Edition, June 2009 
 
Table F–21. Color MUST conformance requirements ........................................................ 426 
Table F–22. Color SHOULD conformance requirements .................................................... 430 
Table F–23. Color OPTIONAL conformance requirements .................................................. 433 
Table F–24. Document structure MUST conformance requirements .................................... 435 
Table F–25. Document structure SHOULD conformance requirements ................................ 436 
Table F–26. Document structure OPTIONAL conformance requirements ............................. 439 
Table F–27. OpenXPS Document package feature MUST conformance requirements ............ 440 
Table F–28. OpenXPS Document package feature SHOULD conformance requirements ........ 442 
Table F–29. OpenXPS Document package feature OPTIONAL conformance requirements ...... 444 
Table F–30. Rendering rules MUST conformance requirements .......................................... 445 
Table F–31. Rendering rules SHOULD conformance requirements ...................................... 446 
Table F–32. Rendering rules OPTIONAL conformance requirements ................................... 449 
Table F–33. Additional MUST conformance requirements .................................................. 451 
Table F–34. 3D Graphic Content MUST conformance requirements .................................... 452 
Table F–35. 3D Graphic Content SHOULD conformance requirements ................................ 452 
Table F–36. 3D Graphic Content OPTIONAL conformance requirements .............................. 453 
Table F–37. Recommended File Name Extension and Content Types MUST conformance 
requirements .............................................................................................................. 453 
Table F–38. Recommended File Name Extension and Content Types SHOULD conformance 
requirements .............................................................................................................. 453 

ECMA-388 
List of Examples 
 
 
 First Edition, June 2009 
xv 
List of Examples 
Example 9–1. A typical OpenXPS Document ..................................................................... 23 
Example 9–2. OpenXPS Document part naming ................................................................ 41 
Example 9–3. Property attribute syntax ........................................................................... 44 
Example 9–4. Property element syntax ............................................................................ 45 
Example 10–1. <FixedDocumentSequence> usage ............................................................ 47 
Example 10–2. <FixedDocument> usage ......................................................................... 48 
Example 10–3. <PageContent> usage ............................................................................. 49 
Example 10–4. <PageContent.LinkTargets> usage ............................................................ 50 
Example 10–5. Fixed page markup .................................................................................. 52 
Example 10–6. Canvas composition ................................................................................. 56 
Example 11–1. <Path.Data> usage ................................................................................. 64 
Example 11–2. <Path.Fill> usage .................................................................................... 66 
Example 11–3. <Path.Stroke> usage .............................................................................. 67 
Example 11–4. <PathGeometry> usage ........................................................................... 69 
Example 11–5. <ArcSegment> usage .............................................................................. 74 
Example 11–6. <PolyBezierSegment> usage .................................................................... 76 
Example 11–7. <PolyLineSegment> usage ....................................................................... 77 
Example 11–8. <PolyQuadraticBezierSegment> usage ...................................................... 79 
Example 11–9. Closed <PathFigure> usage ...................................................................... 79 
Example 11–10. A path described using abbreviated syntax ............................................... 83 
Example 11–11. Smooth Bézier curve .............................................................................. 84 
Example 11–12. Relative commands and curves ............................................................... 85 
Example 12–1. One-to-one cluster map ........................................................................... 95 
Example 12–2. Many-to-one cluster map ......................................................................... 95 
Example 12–3. One-to-many cluster map ........................................................................ 95 
Example 12–4. Many-to-many cluster map ....................................................................... 96 
Example 12–5. Using indices to specify advance width ....................................................... 99 
Example 12–6. Using the Indices attribute to specify glyph replacement for a cluster ............ 99 
Example 12–7. Text with positive uOffset and vOffset Indices values ................................. 103 
Example 12–8. Right-to-left text (odd BidiLevel) ............................................................. 103 
Example 12–9. Sideways text (IsSideways set to true) .................................................... 104 
Example 12–10. Vertical text ........................................................................................ 104 
Example 12–11. Japanese vertical text .......................................................................... 105 
Example 12–12. Using the CaretStops attribute to determine a valid caret stop position ...... 107 
Example 12–13. Basic italic font .................................................................................... 108 
Example 12–14. Italic font using StyleSimulations attribute .............................................. 108 
Example 12–15. Kerning .............................................................................................. 109 
Example 12–16. Ligatures ............................................................................................ 109 
Example 12–17. Cluster maps ...................................................................................... 110 
Example 13–1. <SolidColorBrush> usage ....................................................................... 114 
Example 13–2. <ImageBrush> usage ............................................................................ 116 
Example 13–3. <VisualBrush.Visual> usage ................................................................... 120 
Example 13–4. ViewboxUnits and ViewportUnits attribute usage ....................................... 122 
Example 13–5. Tiling brush base image and rendering ..................................................... 123 
Example 13–6. Tiling brush Viewport adjustments ........................................................... 123 
Example 13–7. Tiling brush viewbox adjustments ............................................................ 124 
Example 13–8. Image brush with a Viewbox larger than the image ................................... 125 
Example 13–9. Image brush with TileMode value of None ................................................ 126 
Example 13–10. Visual brush with TileMode value of None ............................................... 128 
Example 13–11. Image brush with a TileMode value of Tile .............................................. 129 
Example 13–12. Visual brush with a TileMode value of Tile ............................................... 130 

List of Examples 
ECMA-388 
xvi 
First Edition, June 2009 
 
Example 13–13. Image brush with a TileMode value of FlipX ............................................ 131 
Example 13–14. Visual brush with a TileMode value of FlipX ............................................. 132 
Example 13–15. Image brush with a TileMode value of FlipY ............................................. 133 
Example 13–16. Visual Brush with a TileMode value of FlipY ............................................. 134 
Example 13–17. Image brush with a TileMode value of FlipXY ........................................... 135 
Example 13–18. Visual brush with a TileMode value of FlipXY ........................................... 136 
Example 13–19. <LinearGradientBrush> usage .............................................................. 138 
Example 13–20. Linear gradient brush with a SpreadMethod value of Pad .......................... 139 
Example 13–21. Linear gradient brush with a SpreadMethod value of Reflect ...................... 140 
Example 13–22. Linear gradient brush with a SpreadMethod value of Repeat ..................... 141 
Example 13–23. A radial gradient brush ......................................................................... 145 
Example 13–24. RadialGradientBrush usage ................................................................... 145 
Example 13–25. Radial gradient brush with a SpreadMethod value of Pad .......................... 146 
Example 13–26. Radial gradient brush with a SpreadMethod value of Reflect ...................... 147 
Example 13–27. Radial gradient brush with a SpreadMethod value of Repeat ..................... 148 
Example 13–28. Opacity mask with linear gradient .......................................................... 150 
Example 13–29. Opacity mask with radial gradient .......................................................... 151 
Example 14–1. <FixedPage.Resources> usage ............................................................... 157 
Example 14–2. <Canvas.Resources> usage ................................................................... 158 
Example 14–3. Resource dictionary markup ................................................................... 160 
Example 14–4. A remote resource dictionary and reference .............................................. 161 
Example 14–5. Using a resource reference to fill a brush .................................................. 162 
Example 14–6. Using scoping rules ............................................................................... 163 
Example 14–7. Canvas clip markup and rendering ........................................................... 164 
Example 14–8. <Path.Clip> usage ................................................................................ 166 
Example 14–9. <Glyphs.Clip> usage ............................................................................. 167 
Example 14–10. Matrix scaling ...................................................................................... 169 
Example 14–11. Matrix reversing the x axis ................................................................... 169 
Example 14–12. Matrix reversing the y axis ................................................................... 169 
Example 14–13. Matrix skewing .................................................................................... 169 
Example 14–14. Matrix Rotating ................................................................................... 169 
Example 14–15. Matrix positioning ................................................................................ 169 
Example 14–16. <MatrixTransform> usage .................................................................... 170 
Example 14–17. Using abbreviated matrix transformation syntax ...................................... 171 
Example 14–18. <Canvas.RenderTransform> usage ........................................................ 171 
Example 14–19. <Path.RenderTransform> usage ............................................................ 172 
Example 14–20. <Glyphs.RenderTransform> usage ........................................................ 173 
Example 14–21. <PathGeometry.Transform> usage ........................................................ 174 
Example 14–22. <ImageBrush.Transform> usage ........................................................... 175 
Example 14–23. <VisualBrush.Transform> usage ........................................................... 176 
Example 14–24. <VisualBrush.Transform> usage with tiling behavior ................................ 178 
Example 14–25. <LinearGradientBrush.Transform> usage ............................................... 179 
Example 14–26. <RadialGradientBrush.Transform> usage ............................................... 181 
Example 14–27. <Canvas.OpacityMask> usage .............................................................. 182 
Example 14–28. <Path.OpacityMask> usage .................................................................. 184 
Example 14–29. <Glyphs.OpacityMask> usage ............................................................... 185 
Example 16–1. Document structure markup ................................................................... 204 
Example 16–2. Document outline markup ...................................................................... 206 
Example 16–3. Simple multi-story document .................................................................. 209 
Example 16–4. Story flowing back and forth across a page boundary ................................ 209 
Example 16–5. Content structure spanning pages ........................................................... 210 
Example 16–6. StoryFragments part markup .................................................................. 215 
Example 16–7. Story fragments markup using a fragment name ....................................... 216 

ECMA-388 
List of Examples 
 
 
 First Edition, June 2009 
xvii 
Example 16–8. A relative, internal, named-address hyperlink ........................................... 222 
Example 16–9. A relative internal page address hyperlink ................................................ 222 
Example 17–1. Optimized interleaving for a single-threaded parsing architecture ................ 228 
Example 17–2. Optimized interleaving for a multi-threaded parsing architecture ................. 230 
Example 17–3. A DiscardControl part ............................................................................. 232 
Example 17–4. A SignatureDefinitions part ..................................................................... 237 
Example 18–1. Path opacity behavior for overlapping path figures .................................... 259 
Example 18–2. Opacity behavior of path stroke intersections ............................................ 259 
Example 18–3. Opacity behavior of paths with stroked edges ........................................... 260 
Example G–1. 3D graphics content in FixedPage.fpage .................................................... 456 
Example G–2. 3D graphics content in FixedPage.fpage .................................................... 457 


ECMA-388 
1. Scope 
 
 First Edition, June 2009 
1 
1. Scope 
This Standard defines OpenXPS, the Open XML Paper Specification. OpenXPS describes a set of 
conventions for the use of XML and other widely available technologies to describe the content 
and appearance of paginated documents. It is written for developers who are building systems 
that process OpenXPS content.  
A primary goal is to ensure the interoperability of independently created software and hardware 
systems that produce or consume OpenXPS content. This Standard defines the requirements 
that systems processing OpenXPS Documents must satisfy in order to achieve interoperability.  
This Standard describes a paginated-document format called the OpenXPS Document. The 
format requirements are an extension of the packaging requirements described in the Open 
Packaging Conventions (OPC) Standard. That Standard describes packaging and physical format 
conventions for the use of XML, Unicode, ZIP, and other technologies and specifications, to 
organize the content and resources that make up any document. They are an integral part of 
the OpenXPS Standard, and are included by reference. 
Many XML-based building blocks within OpenXPS make use of the conventions described in the 
Markup Compatibility and Extensibility Standard that is relied upon by the OPC Standard to 
facilitate future enhancement and extension of OpenXPS markup. As such, that Markup 
Compatibility and Extensibility Standard is included by reference.


ECMA-388 
2. Conformance 
 
 First Edition, June 2009 
3 
2. Conformance 
2.1 
Requirements Terminology 
In this Standard, the words that are used to define the significance of each requirement are 
written in uppercase. These words are used in accordance with their definitions in RFC 2119, 
and their respective meanings are reproduced below: 
• MUST: This word, or the adjective “REQUIRED”, means that the item is an absolute 
requirement of the Standard. 
• SHOULD: This word, or the adjective “RECOMMENDED”, means that there might exist 
valid reasons in particular circumstances to ignore this item, but the full implications 
should be understood and the case carefully weighed before making an implementation 
decision. 
• MAY: This word, or the adjective “OPTIONAL”, means that this item is truly optional. 
The words MUST NOT, SHOULD NOT, and NOT RECOMMENDED, are the negative forms of 
MUST, SHOULD, and RECOMMENDED, respectively. There is no negative form of MAY. 
Requirements are documented inline in this Standard, and each requirement is denoted by a 
letter (M – MUST; S – SHOULD; O – OPTIONAL) and a unique rule number of the form m.n, 
where m and n are positive integers, all enclosed in brackets ([…]). 
[Example: [M1.2] is a MUST requirement, [S2.4] is a SHOULD requirement, and [O3.9] is a 
MAY requirement. end example]  
For convenient reference, these rules are collected in §Annex F. 
2.2 
 Implementation Conformance 
This Standard includes the implementation requirements that systems processing OpenXPS 
content must satisfy in order to achieve conforming interoperability. An implementation is a 
consumer, or a producer, or both a consumer and a producer. 
In order for a consumer to be considered conformant, the following rules apply: 
• It MUST interpret and process the contents of OpenXPS Document instances in a manner 
conforming to this Standard [M0.1]. A consumer is NOT REQUIRED to interpret or 
process all of the content in an OpenXPS Document instance [M0.2].  
• It SHOULD instantiate an error condition when OpenXPS Document content not 
conforming to this Standard is encountered [S0.1]. 
• It MUST NOT instantiate an error condition in response to OpenXPS Document content 
conforming to this Standard [M0.3]. 
• When “OPTIONAL” or “RECOMMENDED” features contained within OpenXPS Document 
instances are accessed by a consumer, the consumer MUST interpret and process those 
features in a manner conforming to this Standard [M0.4]. 
In order for a producer to be considered conformant, the following rules apply: 

2. Conformance 
ECMA-388 
4 
First Edition, June 2009 
• Any OpenXPS Document instances it creates MUST conform to this Standard [M0.5].  
• It MUST NOT introduce any non-conforming OpenXPS Document content when modifying 
an OpenXPS Document instance [M0.6]. 
• When a producer chooses to use an “OPTIONAL” or “RECOMMENDED” feature in an 
OpenXPS Document instance, then the producer MUST create or modify that feature in a 
manner conforming to this Standard [M0.7]. 
2.3 
Instantiating Error Conditions 
OpenXPS Documents are intended to address the requirements of a wide range of scenarios. 
The methods and effects of instantiated error conditions in response to conformance rule 
violations are implementation-defined.  
[Note: Implementers are encouraged to instantiate error conditions to indicate non-conformant 
OpenXPS Documents where users can be expected to be able to act on the error information. 
Implementers are strongly encouraged to fail gracefully when processing non-compliant 
OpenXPS Documents to ensure that non-compliant OpenXPS Document instances, and non-
compliant OpenXPS producers, do not proliferate. end note] 

ECMA-388 
3. Normative References 
 
 First Edition, June 2009 
5 
3. Normative References 
The following normative documents contain provisions, which, through reference in this text, 
constitute provisions of this Standard. For dated references, subsequent amendments to, or 
revisions of, any of these publications do not apply. However, parties to agreements based on 
this Standard are encouraged to investigate the possibility of applying the most recent editions 
of the normative documents indicated below. For undated references, the latest edition of the 
normative document referred to applies. Members of ISO and IEC maintain registers of 
currently valid International Standards. 
 
BNF of Generic URI Syntax. World Wide Web Consortium. 
http://www.w3.org/Addressing/URL/5_URI_BNF.html 
ECMA-376, 1st edition, Office Open XML File Formats (December 2006), Part 2, "Open 
Packaging Conventions", which is commonly referred to as OPC. 
ECMA-376, 1st edition, Office Open XML File Formats (December 2006), Part 5, "Markup 
Compatibility and Extensibility". 
Extensible Markup Language (XML) 1.0 (Fourth Edition). Bray, Tim, Eve Maler, Jean Paoli, C. M. 
Sperberg-McQueen, and François Yergeau (editors). World Wide Web Consortium. 2006. 
http://www.w3.org/TR/2006/REC-xml-20060816/ 
HTML 4.01 Specification. Jacobs, Ian, Arnaud Le Hors, and Dave Raggett (editors). World Wide 
Web Consortium. 1999. http://www.w3.org/TR/1999/REC-html401-19991224/ 
ICC.1:2001-04 File Format for Color Profiles. International Color Consortium. 2001. 
http://www.color.org/ICC_Minor_Revision_for_Web.pdf 
IEC 61966:1999, Multimedia systems and equipment - Colour measurement and management - 
Part 2-1: Colour management - Default RGB colour space - sRGB 
IEC 61966:2003, Multimedia systems and equipment - Colour measurement and management - 
Part 2-2: Colour management - Extended RGB colour space - scRGB 
ISO 15076-1:2005, Image technology colour management — Architecture, profile format, and 
data structure — Part 1: Based on ICC.1:2004-10 
ISO/IEC 2382-1:1993, Information technology — Vocabulary — Part 1: Fundamental terms. 
ISO/IEC 10646:2003 (all parts), Information technology — Universal Multiple-Octet Coded 
Character Set (UCS). 
ISO/IEC 14496-22:2007 Information technology — Coding of audio-visual objects — Part 22: 
Open Font Format 
ISO/IEC 19775-1:2008 Information technology — Computer graphics and image processing — 
Extensible 3D (X3D) — Part 1: Architecture and base components.  
ISO/IEC 19776-1:2005 Information technology — Computer graphics and image processing — 
Extensible 3D (X3D) encodings — Part 1: XML encoding.  

3. Normative References 
ECMA-388 
6 
First Edition, June 2009 
ISO/IEC 19776-2:2008 Information technology — Computer graphics and image processing — 
Extensible 3D (X3D) encodings — Part 2: Classic VRML encoding. 
ISO/IEC 19776-3:2007 Information technology — Computer graphics, image processing and 
environmental representation — Extensible (X3D) encodings — Part 3: Compressed binary 
encoding. 
ITU-T T.81, ISO/IEC 10918-1 ITU-T (former CCITT) Recommendation Information technology - 
Digital compression and coding of continuous-tone still images – Requirements and Guidelines) 
ITU-T T.832 Information technology – JPEG XR Image Coding Specification – Part 2: Image 
coding specification [Note: This standard is technically aligned to ISO/IEC IS 29199-2:2009 
Part 2: JPEG XR image coding specification, which is currently under ballot. end note] 
JEITA CP-3451, Exchangeable image file format for digital still cameras; Exif Version 2.2, April, 
2002. http://www.jeita.or.jp 
Namespaces in XML 1.0 (Second Edition). Bray, Tim, Dave Hollander, Andrew Layman, and 
Richard Tobin (editors). World Wide Web Consortium. 2006. http://www.w3.org/TR/2006/REC-
xml-names-20060816/ 
Portable Network Graphics (PNG) Specification. Duce, David (editor). Second Edition. World 
Wide Web Consortium. 2003. http://www.w3.org/TR/2003/REC-PNG-20031110 
RFC 2045, Multipurpose Internet Mail Extensions (MIME) Part One: Format of Internet Message 
Bodies. Borenstein, N., and N. Freed. The Internet Society. 1996. 
http://www.ietf.org/rfc/rfc2045.txt. 
RFC 2119 — Key words for use in RFCs to Indicate Requirement Levels. Bradner, S. The 
Internet Society. 1997. http://www.ietf.org/rfc/rfc2119.txt 
RFC 3066 —Tags for the Identification of Languages. Alvestrand, H. The Internet Society. 2001. 
http://www.ietf.org/rfc/rfc3066.txt 
RFC 4234 — Augmented BNF for Syntax Specifications: ABNF.Crocker, D. (editor). The Internet 
Society. 2005. http://www.ietf.org/rfc/rfc4234.txt 
TIFF, Revision 6.0. Adobe Systems Incorporated. 1992. 
http://partners.adobe.com/public/developer/en/tiff/TIFF6.pdf 
Unicode Character Database, Revision 4.0.0. Davis, Mark and Ken Whistler. The Unicode 
Consortium. 2003. http://www.unicode.org/Public/4.0-Update/UCD-4.0.0.html 
The Unicode Standard, Version 4.0. The Unicode Consortium. Boston, MA: Addison-Wesley, 
2003, ISBN 0-321-18578-1. 
XML Base. Marsh, Jonathan. World Wide Web Consortium. 2001. 
http://www.w3.org/TR/2001/REC-xmlbase-20010627/ 
XML Schema Part 1: Structures, Second Edition. Beech, David, Murray Maloney, Noah 
Mendelsohn, and Henry S. Thompson (editors). World Wide Web Consortium. 2004. 
http://www.w3.org/TR/2004/REC-xmlschema-1-20041028/ 
XML Schema Part 2: Datatypes, Second Edition. Biron, Paul V. and Ashok Malhotra (editors). 
World Wide Web Consortium. 2004. http://www.w3.org/TR/2004/REC-xmlschema-2-20041028/ 

ECMA-388 
4. Definitions 
 
 First Edition, June 2009 
7 
4. Definitions 
For the purposes of this Standard, the following definitions apply. Terms explicitly defined in 
this Standard are not to be presumed to refer implicitly to similar terms defined elsewhere. 
alpha blending — Blending two elements when rendering. 
consumer — A piece of software or a device that interprets and processes OpenXPS packages. 
content structure — The set of markup elements that allow expression of well-understood 
semantic blocks, such as paragraphs, tables, lists, and figures. 
content type — Describes the type of content stored in a part. Content types define a media 
type, a subtype, and an optional set of parameters, as defined in RFC 2045. 
coordinate space, effective — The default coordinate space (X,Y in the upper-left corner, 
units of 1/96") as modified by any RenderTransform or Transform attributes of the current 
element and any ancestor elements. 
contour intersection point — The intersection of the flat line ending a dash and the contour 
of the shape. 
device — A piece of hardware, such as a printer or scanner, that performs a single function or 
a set of functions. 
digital signature, broken — A digital signature that conforms to the OpenXPS Document 
signing rules but does not meet the digital signature validity. 
digital signature, compliant — A digital signature that conforms to the signing rules 
described in the OpenXPS Document signing policy, regardless of signature validity. 
digital signature, incompliant — A digital signature that does not conform to the OpenXPS 
Document signing rules. 
digital signature, questionable — A compliant digital signature for which a problem arises 
during validation of that signature. (Digital signatures may be represented as questionable 
when the implementation cannot contact the certificate authority to validate its authenticity, or 
when the markup contains markup compatibility elements and attributes that can change the 
representation of the signed content.) 
digital signature, valid — A compliant digital signature that is not a broken digital signature 
or questionable digital signature. 
document content — A document structural concept that identifies each block of individually 
readable content in an OpenXPS Document. 
document outline — A document structural concept that contains a structured index of the 
content in an OpenXPS Document, much like a table of contents. 
driver — A producer that has specific knowledge of the consumer of the OpenXPS Document. 
fixed payload — A payload that is rooted with a FixedDocumentSequence part. 
fixed payload root — The root of a fixed payload is the FixedDocumentSequence part. 

4. Definitions 
ECMA-388 
8 
First Edition, June 2009 
FixedDocument part — A common, easily indexed root for all pages within an OpenXPS 
Document. 
FixedDocumentSequence part — The part that assembles a set of FixedDocument parts 
within the fixed payload. 
FixedPage part — The part that contains all of the visual elements to be rendered on a page. 
implementation-defined behavior — Behavior specified by each implementation and not by 
this Standard. 
named color — An industry-defined color specification that identifies a particular color in a 
well-defined color system, usually for purposes of printing. 
named element — An element in the document structure markup that refers to an element in 
the fixed-page markup with a specified name. 
OpenXPS Document — A package that contains a discoverable fixed payload and is a format 
for storing paginated documents defined by the OpenXPS Standard. 
OpenXPS Document StartPart relationship — The specific relationship type that identifies 
the root of a fixed payload within an OpenXPS Document. 
package — A logical entity that holds a collection of parts. 
package model — Defines a package abstraction that holds a collection of parts. 
package relationship — A relationship whose target is a part and whose source is the 
package as a whole. Package relationships are found in the package relationships part named 
“/_rels/.rels”. 
part — A stream with a MIME content type and associated common properties. Typically 
corresponds to a file (as on a file system) or a resource (as in an HTTP URI). 
part name — A part name is used to refer to a part in the context of a package, typically as 
part of a URI. By definition, the part name is the path component of a pack URI. 
payload — A complete collection of interdependent parts and relationships within a package. 
physical model — Defines the mapping between the components of the package model to the 
features of a particular physical format based on the ZIP specification. 
piece — A portion of a part. Pieces of different parts can be interleaved together. The individual 
pieces are named using a unique mapping from the part name. Pieces are not addressable in 
the package model. 
primary fixed payload root — The fixed payload root that is referenced by the OpenXPS 
package StartPart relationship. 
PrintTicket part — A PrintTicket part provides the settings used when a package is printed. 
PrintTicket parts can be attached to the entire package and/or at lower levels in the structure, 
such as individual pages. 
producer — A piece of software or a device that creates or modifies OpenXPS packages. 
property — A characteristic of a markup element. 

ECMA-388 
4. Definitions 
 
 First Edition, June 2009 
9 
property attribute — An OpenXPS Document property value, commonly expressed or 
referenced using XML attribute syntax. 
property element — An OpenXPS Document property value, commonly expressed or 
referenced using XML child element syntax. 
property value — The value of a property, expressed as an XML attribute, an XML child 
element, or an entry in the resource dictionary. 
relationships — A relationship represents a connection between a source part and a target 
part in a package. Relationships make the connections between parts directly discoverable 
without looking at the content in the parts, and without altering the parts themselves. See also, 
package relationship. 
relationships part — A part containing an XML representation of relationships. 
required part — A part, such as an image or font, that is referenced from other parts, and is 
required for valid processing of the referencing part. 
resource definition — A shareable property value, with a name, defined within a resource 
dictionary. Any property value definable by fixed page markup can be held in a resource 
dictionary. Each resource definition has a key that is unique within the scope of the resource 
dictionary. 
resource dictionary — A resource dictionary holds resources. Each resource in a resource 
dictionary carries a name. The resource’s name can be used to reference the resource from a 
property’s XML attribute. 
resource dictionary, remote  — A part containing a resource dictionary. 
resource reference — An attribute whose value refers to an entry in a resource dictionary. 
Resource references appear in the format “{StaticResource RscName}” where RscName 
corresponds to a matching entry in the resource dictionary with an x:Key attribute value. 
signature definition — The means by which OpenXPS Document authors provide co-signature 
requirements and workflow-specific signature information. 
signature spot — A visual element that indicates that a digital signature has been applied or 
requested. 
signing rules — The set of rules that define whether a particular digital signature is compliant 
with the OpenXPS Document signature policy. 
story — A block of individually readable content in an OpenXPS Document. 
story fragment — A portion of a story that appears within the scope of a single fixed page. 
stream — A linearly ordered sequence of bytes. 
thumbnail — An image that helps end-users identify parts of a package or a package as a 
whole. 
X3D — A 3D graphic content stream conforming to ISO standards 19775-1r1:200x, 19776-
1:2005, 19776-2:2005, and 19776-3:2007. 


ECMA-388 
5. Notational Conventions 
 
 First Edition, June 2009 
11 
5. Notational Conventions 
5.1 
Document Conventions 
Except where otherwise noted, syntax descriptions are expressed in the ABNF format as defined 
in RFC 4234.  
Definition terms are formatted like this. 
Syntax descriptions and code are formatted in monospace type. 
Replaceable items are formatted in monospace cursive type. 
5.2 
Diagrams 
In some cases, markup semantics are described using diagrams. The diagrams place the parent 
element on the left, with attributes and child elements to the right. The symbols are described 
below.  
 
Symbol 
Description 
 
Required element. This box represents an element that MUST appear 
exactly once in markup when the parent element is included. 
The “+” and “–” symbols on the right of these boxes have no 
semantic meaning. 
 
Optional element. This box represents an element that can appear 
zero or one times in markup when the parent element is included. 
 
Range indicator. These numbers indicate that the designated 
element or choice of elements can appear in markup any number of 
times within the range specified. 
 
Attribute group. This box indicates that the enclosed boxes are each 
attributes of the parent element. Solid-border boxes are required 
attributes; dashed-border boxes are optional attributes. 
 
Sequence symbol. The element boxes connected to this symbol can 
appear in markup in the illustrated sequence only, from top to 
bottom. 
 
Choice symbol. Only one of the element boxes connected to this 
symbol can appear in markup. 
 
Type indicator. The elements within the dashed box are of the 
complex type indicated. 

5. Notational Conventions 
ECMA-388 
12 
First Edition, June 2009 
Most diagrams are followed by a table having the following column headings for the rows, each 
of which applies to a given attribute: 
• 
Name, which indicates the name of the attribute. 
• 
Type, which indicates the type of the attribute. 
• 
Use, which indicates whether or not the attribute is required (contains “required” if so; 
otherwise, is left blank) 
• 
Default, which indicates the value of the attribute if that attribute is not present. 
• 
Fixed, which indicates there is only one valid value, which is given. 
• 
Annotation, which gives an overview of the purpose of the attribute. 
 

ECMA-388 
6. Acronyms and Abbreviations 
 
 First Edition, June 2009 
13 
6. Acronyms and Abbreviations 
The following acronyms and abbreviations are used throughout this Standard: 
IEC — the International Electrotechnical Commission 
ISO — the International Organization for Standardization 
W3C — World Wide Web Consortium 


ECMA-388 
7. General Description 
 
 First Edition, June 2009 
15 
7. General Description 
This Standard is intended for use by implementers, academics, and application programmers. 
As such, it contains explanatory material that, strictly speaking, is not necessary in a formal 
specification. 
This Standard is divided into the following subdivisions: 
1. Front matter (clauses 1–7). 
2. OpenXPS Documents (clauses 8–18), which presents the details of the primarily XML-
based OpenXPS Document format. These clauses describe the XML markup that defines 
the composition of documents and the appearance of each page. They also include 
rendering rules that enable devices and applications to display and print OpenXPS 
Documents with full fidelity in a wide range of environments and scenarios. 
3. OpenXPS Document Markup Reference (clause 19), which presents a consolidated 
reference of OpenXPS Document markup elements and their attributes. 
4. Annexes (A–G), which contain additional technical details and schemas, as well as 
convenient reference information. 
Examples are provided to illustrate possible forms of the constructions described. References 
are used to refer to related clauses. Notes are provided to give advice or guidance to 
implementers or programmers. Annexes provide additional information or summarize the 
information contained elsewhere in this Standard.  
Clauses 1–5 and 7–19, and annexes A, C–E and G, form a normative part of this Standard; and 
the clause 6, annexes B and F, examples, notes, and the index, are informative. 
Except for whole clauses or annexes that are identified as being informative, informative text 
that is contained within normative text is indicated in the following ways: 
1. Examples within narrative are indicated as follows: [Example: … end example] 
2. Examples of XML are indicated as follows: Example m.n: caption … end example] 
3. [Note: … end note] 


ECMA-388 
8. OpenXPS Document Format 
 
 First Edition, June 2009 
17 
8. OpenXPS Document Format 
This Standard describes how the OpenXPS Document format is organized internally and 
rendered externally. It is built upon the principles described in the OPC Standard. OpenXPS 
Documents MUST observe all conformance requirements [M1.1] and SHOULD observe all 
recommendations [S1.1] of that Standard, except where indicated otherwise . The information 
presented here is intended both for producers and consumers. 
The OpenXPS Document format represents a set of related pages with a fixed layout, which are 
organized as one or more documents, in the traditional meaning of the word. A file that 
implements this format includes everything necessary to render fully those documents on a 
display device or physical medium (such as paper). This includes all resources such as fonts 
and images that might be required to render individual page markings. 
In addition, the format includes optional components that build on the minimal set of 
components required to render a set of pages. This includes the ability to specify print job 
control instructions, to organize the minimal page markings into larger semantic blocks such as 
paragraphs, and to rearrange physically the contents of the format for easy consumption in a 
streaming manner, among others.  
Finally, the OpenXPS Document format implements the common package features specified by 
the OPC Standard that support digital signatures and core properties. Implementers should 
note that the OpenXPS Document format does not define support for encryption, or other forms 
of content protection, other than that required for Embedded Font Obfuscation. 
8.1 
How This Standard Is Organized 
 
This subclause is informative 
 
Clause 
Description 
Parts and 
Relationships (§9) 
This clause describes how OpenXPS Documents use the packaging 
model (as described in the OPC Standard) to organize data. All part and 
relationship types are described in detail, including how they are used 
and what they can contain.  
This clause also describes the OpenXPS Document markup model, in 
particular, its parts, and how the XML markup relates to the packaging 
conventions and recommendations it builds on. 
Documents (§10) 
The fundamental building blocks of the OpenXPS Document format are 
described here. This clause describes how pages are composed into 
larger documents and how documents are composed into document 
sequences. These components are represented in markup. 
Graphics (§11) 
This is the first of several clauses that describe page markings, in 
particular, vector graphics. The concepts of paths, geometries, and 
figures are introduced. Vector graphics are represented in page-layout 
XML markup. 

8. OpenXPS Document Format 
ECMA-388 
18 
First Edition, June 2009 
Clause 
Description 
Text (§12) 
This clause describes how to include text markings in page-layout 
markup. It describes how to reference a font and extract information 
from a font to render the page. 
Brushes (§13) 
Both vector graphics and text are rendered by applying any of the 
brushes described in this clause. This includes brushes that are created 
from solid colors, gradients, images, or other page-layout markup. 
Common Properties 
(§14) 
Several page-layout markup elements share a common set of 
properties. This clause describes these common properties. 
Color (§15) 
OpenXPS Documents support a wide range of color options and color 
spaces, both for vector and raster images. This clause describes the 
combinations of image formats and color markup that can be used. A 
number of color-related topics are discussed, including color separation, 
color profiles, and color blending. 
Document Structure 
and Interactivity 
(§16) 
This clause describes the components of the OpenXPS Document format 
that support assigning larger semantic meaning to individual page 
markings. [Example: Such markings might be tables or paragraphs. end 
example] It also provides a mechanism to describe an outline of the 
document. 
Additionally, this clause provides guidance on how consumers that 
enable interactive features such as hyperlinks, selection, and 
accessibility tools should use the format. It also describes how 
producers should emit content to enable interactive features. 
OpenXPS Document 
Package Features 
(§17) 
This clause describes how package features (as described in the OPC 
Standard) are used and extended in the OpenXPS Document format. 
This includes interleaving, digital signatures, and core properties. 
Rendering Rules 
(§18) 
This clause provides precise instructions for rendering OpenXPS 
Document contents to ensure a consistent result among various 
implementations. 
Elements (§19) 
The full list of elements described throughout the preceding clauses is 
assembled in this clause, in alphabetical order, for easy reference. 
Signature Definitions 
Schema (§A.1) 
This annex includes the W3C XSD schema for the Signature Definitions 
part. 
OpenXPS Document 
Schema (§A.2) 
This annex includes the W3C XSD schema for the FixedDocument, 
FixedDocumentSequence, and FixedPage parts. 
Resource Dictionary 
Key Schema (§A.3) 
This annex provides the W3C XSD schema for the resource dictionary 
Key attribute, used by several elements in the OpenXPS Document 
schema. 
Document Structure 
Schema (§A.4) 
This annex provides the W3C XSD schema for the DocumentStructure 
and StoryFragments parts. 
Discard Control 
Schema (§A.5) 
This annex includes the W3C XSD schema for the DiscardControl part 
for interleaving. 
3D-Graphic Content 
Schema (§A.6) 
This annex includes the optional W3C XSD schema for 3D-Graphics 
support. 

ECMA-388 
8. OpenXPS Document Format 
 
 First Edition, June 2009 
19 
Clause 
Description 
Abbreviated 
Geometry Syntax 
Algorithm (§C) 
This annex provides a sample algorithm for interpreting the abbreviated 
geometry syntax provided to succinctly describe geometric regions in a 
single attribute. 
Standard 
Namespaces and 
Content Types (§D) 
This annex defines all of the XML namespace names, content types, and 
relationship types used by all OpenXPS Document parts and 
relationships. 
Recommended File 
Name Extension and 
Content Types (§E) 
This annex provides details for implementations and external systems 
that need to identify OpenXPS Documents. 
Conformance 
Requirements (§F) 
This annex assembles all the conformance requirements specified 
throughout the previous clauses and annexes into a comprehensive list 
for reference purposes. 
3D Graphic Content 
(§G) 
This annex describes how three-dimensional graphics can be included 
within an OpenXPS package. 
End of informative text 
8.2 
Package 
The OpenXPS Document format MUST use a ZIP archive for its physical model [M1.2]. The OPC 
Standard describes a packaging model; that is, how the package is represented internally with 
parts and relationships. 
The OpenXPS Document format includes a well-defined set of parts and relationships, each 
fulfilling a particular purpose in the document. The format also extends the package features, 
including digital signatures, thumbnails, and interleaving. 
Figure 8–1. Package-based OpenXPS Document format 
 


ECMA-388 
9. Parts and Relationships 
 
 First Edition, June 2009 
21 
9. Parts and Relationships 
The packaging conventions described in the OPC Standard can be used to carry any payload. A 
payload is a complete collection of interdependent parts and relationships within a package. 
This Standard defines a particular payload that contains a static or fixed-layout representation 
of paginated content: the fixed payload.  
A package that holds at least one fixed payload and follows the rules described in this Standard 
is referred to as an OpenXPS Document. Producers and consumers of OpenXPS Documents can 
implement their own parsers and rendering engines based on this Standard. 
OpenXPS Documents address the requirements that information workers have for distributing, 
archiving, rendering, and processing documents. Using known rendering rules, OpenXPS 
Documents can be unambiguously reproduced or printed without tying client devices or 
applications to specific operating systems or service libraries. Because the OpenXPS Document 
is expressed in a neutral, application-independent way, the content can be viewed and printed 
without the application used to create the package.  
9.1 
Fixed Payload 
A payload that has a FixedDocumentSequence root part is known as a fixed payload. A fixed 
payload root is a FixedDocumentSequence part that references FixedDocument parts that, in 
turn, reference FixedPage parts. 
A specific relationship type is defined to identify the root of a fixed payload within an OpenXPS 
Document: the OpenXPS Document StartPart relationship. The primary fixed payload root is the 
FixedDocumentSequence part that is referenced by the OpenXPS Document StartPart 
relationship. Consumers such as viewers or printers use the OpenXPS Document StartPart 
relationship to find the primary fixed payload in a package. The OpenXPS Document StartPart 
relationship MUST point to the FixedDocumentSequence part that identifies the root of the fixed 
payload [M2.14].  
The payload includes the full set of parts required for processing the FixedDocumentSequence 
part. All content to be rendered MUST be contained in the OpenXPS Document [M2.1]. The 
payload containing an OpenXPS Document MAY include additional parts not defined by this 
Standard [O2.35]. Consumers MUST ignore parts in valid OpenXPS Documents that they do not 
understand [M2.84]. The parts that can be found in an OpenXPS Document are listed in Table 
9–1. Relationships and content types for these parts are defined in §D.2. Each OpenXPS 
Document part MUST use only the appropriate content type specified in §D.2 [M2.2]. 
Table 9–1. OpenXPS Document parts 
Name 
Description 
Required/Optional 
FixedDocumentSequence 
(§9.1.2) 
Specifies a sequence of fixed 
documents. 
REQUIRED [M2.3] 
FixedDocument (§9.1.3) Specifies a sequence of fixed pages. 
REQUIRED [M2.4] 
FixedPage (§9.1.4) 
Contains the description of the contents 
of a page.  
REQUIRED [M2.5] 

9. Parts and Relationships 
ECMA-388 
22 
First Edition, June 2009 
Name 
Description 
Required/Optional 
Font (§9.1.7) 
Contains a font in the Open Font 
Format 
REQUIRED if a 
<Glyphs> element 
is present [M2.6] 
Image (§9.1.5) 
JPEG image (§9.1.5.1) 
PNG image (§9.1.5.2) 
TIFF image (§9.1.5.3) 
JPEG XR image 
(§9.1.5.4) 
References an image file. 
REQUIRED if an 
<ImageBrush> 
element is present 
[M2.7] 
Remote resource 
dictionary (§9.1.8) 
Contains a resource dictionary for use 
by fixed page markup. 
REQUIRED if a key 
it defines is 
referenced [M2.8] 
Thumbnail (§9.1.6) 
Contains a JPEG or PNG image that 
represents the contents of the page or 
package.  
OPTIONAL [O2.1] 
PrintTicket (§9.1.9) 
Provides settings to be used when 
printing the package.  
OPTIONAL [O2.2] 
ICC profile 
Contains an ICC color profile. 
OPTIONAL [O2.3] 
DocumentStructure 
(§9.1.11) 
Contains the document outline and 
document contents (story definitions) 
for the OpenXPS Document. 
OPTIONAL [O2.4] 
StoryFragments 
(§9.1.12) 
Contains document content structure 
for a fixed page. 
OPTIONAL [O2.5] 
SignatureDefinitions 
(§9.1.10) 
Contains a list of digital signature spots 
and signature requirements. 
OPTIONAL [O2.6] 
DiscardControl (§17.1.4) Contains a list of resources that are 
safe for consumers to discard during 
processing. 
OPTIONAL [O2.7] 

ECMA-388 
9. Parts and Relationships 
 
 First Edition, June 2009 
23 
Example 9–1. A typical OpenXPS Document 
 
end example] 

9. Parts and Relationships 
ECMA-388 
24 
First Edition, June 2009 
9.1.1 
Fixed Payload Relationships 
Internal resources are associated with parts by relationships and inline references. OpenXPS 
Documents MUST NOT reference external OpenXPS resources [M2.1]. In general, inline 
resource references are represented inside the referring part in ways that are specific to the 
content type of the part, that is, in arbitrary markup or application-specific encoding. 
Relationships represent the type of connection between a source part and a target resource, 
and they allow parts to be related without modifying them. For more information, see the OPC 
Standard. 
Resources, which include fonts, images, color profiles, and remote resource dictionaries, that 
are referenced by inline URIs but are necessary to render the page MUST use the Required 
Resource relationship from the FixedPage part to the resource [M2.10]. If any resource 
references other resources, the producer MUST also use the Required Resource relationship 
from the FixedPage part to the indirectly referenced resource [M2.10].  
It is RECOMMENDED that there be exactly one Required Resource relationship from the 
FixedPage part for each resource referenced from markup [S2.1]. Multiple Required Resource 
relationships from a FixedPage part to a resource are not considered an error, but they reduce 
efficiency. It is not considered an error if a FixedPage part that does not use a specific resource 
in its markup references the resource via a Required Resource relationship; however, doing so 
might reduce efficiency for consumers. 
Relationship types are defined in §D.3. 
Table 9–2. Fixed payload relationships  
Name 
Description 
Required/Optional 
Core Properties  
Relationship from the package to 
the Core Properties part.  
OPTIONAL [O2.8] 
Digital Signature Origin 
Relationship from the package to 
the Digital Signature Origin part.  
OPTIONAL [O2.9] 
Digital Signature  
Relationship from the Digital 
Signature Origin part to a Digital 
Signature XML Signature part.  
OPTIONAL [O2.10] 
Digital Signature 
Certificate  
Relationship from a Digital 
Signature XML Signature part to a 
Digital Signature Certificate part.  
OPTIONAL [O2.11] 
Digital Signature 
Definitions 
Relationship from the 
FixedDocument part to a Digital 
Signature Definitions part. 
OPTIONAL [O2.12] 
DiscardControl 
Relationship from the package to a 
DiscardControl part.  
OPTIONAL [O2.13] 
DocumentStructure 
Relationship from the 
FixedDocument part to a 
DocumentStructure part. 
OPTIONAL [O2.14] 
PrintTicket 
Relationship from a 
FixedDocumentSequence part, a 
FixedDocument part, or a FixedPage 
part to a PrintTicket part.  
OPTIONAL [O2.15] 

ECMA-388 
9. Parts and Relationships 
 
 First Edition, June 2009 
25 
Name 
Description 
Required/Optional 
Required Resource 
Relationship from a FixedPage part 
to a required resource, including 
Font, Image, ColorProfile, and 
Remote Resource Dictionary parts. 
Required resources can be shared 
between pages. 
REQUIRED for each 
resource referenced 
from a FixedPage 
[M2.10] 
Restricted Font 
Relationship from a FixedDocument 
part to a Font part. Specifies the 
referenced font as restricted, 
disallowing any modification or 
editing of any <Glyphs> element 
text using the referenced font.  
REQUIRED for each 
preview and print 
font used [M2.12] 
 
StartPart 
Relationship from the package to 
the FixedDocumentSequence part 
that is the fixed payload root. 
REQUIRED [M2.13, 
M2.14] 
StoryFragments 
Relationship from a FixedPage part 
to the StoryFragments part for the 
page. 
OPTIONAL [O2.16] 
Thumbnail 
Relationship from the package to an 
Image part or from a FixedPage 
part to an Image part.  
OPTIONAL [O2.17] 
Producers that generate a relationship MUST include the target part in the OpenXPS Document 
for any of the following relationship types: DiscardControl, DocumentStructure, PrintTicket, 
Required Resource, Restricted Font, StartPart, StoryFragments, and Thumbnail. Consumers 
that access the target part of any relationship with one of these relationship types MUST 
instantiate an error condition if the part is not included in the OpenXPS Document [M2.77]. 
9.1.2 
FixedDocumentSequence Part 
The FixedDocumentSequence part assembles a set of fixed documents within the fixed payload. 
[Example: A printing client can assemble two separate documents, a two-page cover memo and 
a twenty-page report (both are FixedDocument parts), into a single package to send to the 
printer. end example] 
The FixedDocumentSequence part is the only valid root of a fixed payload. Even if an OpenXPS 
Document contains only a single fixed document, the FixedDocumentSequence part is still used. 
One FixedDocumentSequence part per fixed payload is REQUIRED [M2.3]. 
Fixed document sequence markup specifies each fixed document in the fixed payload in 
sequence, using <DocumentReference> elements. The order of <DocumentReference> 
elements determines document order and MUST be preserved [M2.15]. Each 
<DocumentReference> element MUST reference a FixedDocument part by relative URI [M2.80]. 
For more information, see §10.1. 
The content type of the FixedDocumentSequence part is defined in §D. 
9.1.3 
FixedDocument Part 
The FixedDocument part is a common, easily indexed root for all pages within the document. A 
fixed document identifies the set of fixed pages for the document.  

9. Parts and Relationships 
ECMA-388 
26 
First Edition, June 2009 
The markup in the FixedDocument part specifies the pages of a document in sequence using 
<PageContent> elements. The order of <PageContent> elements determines page order and 
MUST be preserved [M2.16]. Each <PageContent> element MUST reference a FixedPage part 
by relative URI [M2.81]. For more information, see §10.2.  
The content type of the FixedDocument part is defined in §D. 
9.1.4 
FixedPage Part 
The FixedPage part describes all of the visual elements to be rendered on a page. Each page 
has a fixed size and orientation. The layout of the visual elements on a page is determined by 
the fixed page markup. This applies to both graphics and text, which are represented with 
precise typographic placement. The contents of a page are described using a powerful but 
simple set of visual primitives. 
Each FixedPage part specifies the contents of a page within a <FixedPage> element using 
<Path> and <Glyphs> elements (using various brush elements) and the <Canvas> grouping 
element. The <ImageBrush> and <Glyphs> elements or their child or descendant elements can 
reference Image parts or Font parts by URI. They MUST reference these parts by relative URI 
[M2.82]. For more information, see §10.3. 
The content type of the FixedPage part is defined in §D. 
9.1.5 
Image Parts 
Image parts contain raster image data. A single image can be shared among multiple fixed 
pages in one or more fixed documents. Images referenced in markup MUST be internal to the 
package [M2.1]. References to images that are external to the package are invalid. 
Images are included in OpenXPS Documents with an <ImageBrush> element and an 
ImageSource attribute to reference a part with the appropriate content type. For more 
information, see §D.2. Fixed pages MUST use a Required Resource relationship to each Image 
part referenced [M2.10]. For more information, see §D.3. 
OpenXPS Documents support the following image formats: 
• JPEG 
• PNG 
• TIFF 
• JPEG XR 
Color profiles MAY be embedded in image files [O2.18]. See §15. 
For images that have a constant opacity, producers SHOULD NOT use the image format alpha 
channel; the Opacity attribute in the <ImageBrush> element SHOULD be used instead [S2.37]. 
9.1.5.1 
JPEG Image Parts 
It is RECOMMENDED that JPEG image part names end with the extension “.jpg” [S2.6]. JPEG 
image parts MUST contain images that are compressed according to ITU-T T.81 [M2.17]. This 
subclause contains further requirements for the file formats in which JPEG-compressed data is 
stored. Consumers SHOULD support JPEG images that contain ICC-specified APP2 markers 
[S2.34]. Consumers MUST support JPEG images that contain the EXIF-specified APP1 marker 
and interpret the EXIF color space correctly [M2.78]. 

ECMA-388 
9. Parts and Relationships 
 
 First Edition, June 2009 
27 
Table 9–3. Supported JPEG APPn markers 
APPn marker 
Originating source 
APP1 
EXIF extension defined by JEITA 
APP2 
ICC profile marker defined by the ICC specification 
Consumers MUST ensure that they can distinguish between the uses of those markers listed in 
Table 9–3 and other data that is recorded using the same markers [M2.85]. 
[Note: The APP1 marker is also used for XMP metadata. The APP2 marker is also used for EXIF 
FlashPix extensions. These are not intended to be exhaustive lists of alternative uses of those 
markers. end note] 
[Note: Implementers of consumers might wish to support additional APPn markers, such as 
APP0 (JFIF), APP13 (Photoshop 3.0 extension) and APP14 (Adobe DCT Filters in PostScript 
Level 2 extension). end note] 
In cases where a consumer encounters a JPEG image with conflicting resolution information in 
different markers, the order of precedence is as follows: 
1. The EXIF tag 
2. The JFIF tag 
3. Any other APPn tags supported by the consumer 
4. A default value of 96 dots per inch (dpi) (as described in §13.4.1) 
Some JPEG implementations have limited support for CMYK JPEG images, such as: 
• CMYK is converted to RGB in the decoder using fixed tables instead of the supplied ICC 
profile. 
• ICC Profiles embedded using APP2 are limited in length, because APPn marker chunking 
is not supported. 
Therefore, the use of JPEG CMYK images is NOT RECOMMENDED in OpenXPS Documents 
because rendering results can differ significantly between implementations. TIFF or JPEG XR 
images SHOULD be used instead to represent CMYK images [S2.7]. 
If both ICC-specified APP2 and APP13 markers are specified, the ICC-specified APP2 marker 
takes precedence. If the JPEG image is embedded in a TIFF image, the TIFF ICC profile settings 
are used. 
If no color profile is embedded in the JPEG image or stored in a separate part associated with 
the JPEG image according to the mechanisms described in §15.3.7, then the default color space 
MUST be treated as defined in §15.3.7 [M8.30]. 
9.1.5.2 
PNG Image Parts 
It is RECOMMENDED that PNG image part names end with the extension “.png” [S2.8]. PNG 
image parts MUST contain images that conform to the PNG specification [M2.18]. 
Table 9–4. Support for ancillary PNG chunks 
Chunk 
Support Level 
tRNS 
MUST Support [M2.19] 

9. Parts and Relationships 
ECMA-388 
28 
First Edition, June 2009 
iCCP 
MUST Support [M2.20] 
sRGB 
MUST Ignore [M2.21] 
cHRM 
MUST Ignore [M2.22] 
gAMA 
MUST Ignore [M2.23] 
sBIT 
MUST Ignore [M2.24] 
If no color profile is embedded in the PNG image or stored in a separate part associated with 
the PNG image according to the mechanisms described in §15.3.7, then the default color space 
MUST be treated as defined in §15.3.7 [M8.30]. 
9.1.5.3 
TIFF Image Parts 
It is RECOMMENDED that TIFF image part names end with the extension ―.tif [S2.9]. TIFF 
image parts MUST contain images that conform to the TIFF specification [M2.25]. OpenXPS 
Document consumers MUST support baseline TIFF 6.0 with some extensions, as noted in Table 
9–5 [M2.26]. These tags MUST be supported for the specified image types [M2.26]. Consumers 
MUST support JPEG-compressed raster data in TIFF image parts, indicated using a value of 7 
stored in the Compression field as a binary value [M2.33]. When the Compression field has the 
value 7, each image strip or tile contains a complete JPEG datastream which is valid according 
to ITU-T T.81 (ISO/IEC 10918‑1). If consumers encounter a tag that is not included below, 
they SHOULD ignore that tag [S2.10]. 
Table 9–5. Supported TIFF tags 
Image type 
Tags 
Bilevel images PhotometricInterpretation (0 and 1) 
Compression (1, 2, 3, 4, 5, or 32773) 
ImageLength 
ImageWidth 
ResolutionUnit (1, 2, or 3) 
RowsPerStrip 
StripByteCounts 
StripOffsets 
XResolution 
YResolution 
Grayscale 
images 
PhotometricInterpretation (0 and 1) 
BitsPerSample (4, 8, or 16) 
Compression (1, 5, 7, or 32773) 
ImageLength 
ImageWidth 
ResolutionUnit (1, 2, or 3) 
RowsPerStrip 
StripByteCounts 
StripOffsets 
XResolution 
YResolution 

ECMA-388 
9. Parts and Relationships 
 
 First Edition, June 2009 
29 
Image type 
Tags 
Palette color 
images 
BitsPerSample (1, 4, or 8) 
ColorMap 
Compression (1, 5, or 32773) 
ImageLength 
ImageWidth 
PhotometricInterpretation (3) 
ResolutionUnit (1, 2, or 3) 
RowsPerStrip 
StripByteCounts 
StripOffsets 
XResolution 
YResolution 
RGB images 
BitsPerSample (8,8,8 or 16,16,16; or if SamplesPerPixel = 4: 8,8,8,8 
or 16,16,16,16) 
Compression (1, 5, 7, or 32773) 
ExtraSamples (0, 1, or 2. Required if SamplesPerPixel = 4; must not 
be present otherwise) 
ICC Color Profile [tag 34675] 
ImageLength 
ImageWidth 
PhotometricInterpretation (2) 
PlanarConfiguration (1) 
ResolutionUnit (1, 2, or 3) 
RowsPerStrip 
SamplesPerPixel (3 or 4) 
StripByteCounts 
StripOffsets 
XResolution 
YResolution 

9. Parts and Relationships 
ECMA-388 
30 
First Edition, June 2009 
Image type 
Tags 
CMYK images 
(TIFF 
extension) 
BitsPerSample (8,8,8,8 or 16,16,16,16; or if SamplesPerPixel = 5: 
8,8,8,8,8 or 16,16,16,16,16) 
Compression (1, 5, 7, or 32773) 
ExtraSamples (0, 1, or 2. Required if SamplesPerPixel = 5; must not 
be present otherwise) 
ICC Color Profile [tag 34675] 
ImageLength 
ImageWidth 
InkSet (1) 
NumberOfInks (4) 
PhotometricInterpretation (5) 
PlanarConfiguration (1)  
ResolutionUnit (1, 2, or 3) 
RowsPerStrip 
SamplesPerPixel (4 or 5) 
StripByteCounts 
StripOffsets 
XResolution 
YResolution 
If the TIFF image contains multiple image file directories (IFDs), consumers MUST use only the 
first IFD and ignore all others [M2.27]. 
If the ResolutionUnit tag is set to 1 (no units), XResolution and YResolution are interpreted in 
the same manner as if the ResolutionUnit was set to 2 (inches). 
If no color profile is embedded in the TIFF image or stored in a separate part associated with 
the TIFF image according to the mechanisms described in §15.3.7, then the default color space 
MUST be treated as defined in §15.3.7 [M8.30]. 
The following features of the TIFF specification MUST be supported in addition to the tags 
described in Table 9–5: 
• Baseline TIFF (Sections 1–10) with the exception of the following tags [M2.26]: 
o 
CellLength 
o 
CellWidth 
o 
GrayResponseCurve 
o 
GrayResponseUnit 
o 
MaxSampleValue 
o 
MinSampleValue 
o 
Orientation 
o 
Thresholding 
• CCITT bilevel encodings (Section 11) [M2.28] 
• CMYK images (Section 16) [M2.29] 

ECMA-388 
9. Parts and Relationships 
 
 First Edition, June 2009 
31 
• Associated alpha data (Section 18) [M2.30] 
o 
ExtraSamples tag value of 0: The data in this channel MUST be ignored [M2.83] 
o 
ExtraSamples tag value of 1: The alpha MUST be treated as pre-multiplied alpha 
(see §18.4.1 for details) [M2.30] 
o 
ExtraSamples tag value of 2: The alpha MUST be treated as non-pre-multiplied alpha 
[M2.30] 
• LZW compression (Section 13) [M2.31] 
• Differencing predictors (Section 14) [M2.32] 
• JPEG compression (ITU-T T.81, ISO/IEC 10918-1) 
o 
Only compression mode 7 MUST be supported [M2.33] 
• Embedded ICC Profile (described in the ICC specification) [M2.34] 
• EXIF IFD (tag 34665) as described in the EXIF specification. The EXIF color space MUST 
be interpreted correctly [M2.79]. 
Consumers that support tags and features not described above can result in undesirable 
differences in the appearance of OpenXPS Documents. Producers cannot rely on a consistent 
interpretation of tags or features that are not described above and therefore SHOULD NOT use 
any such tags or features [S2.10].  
OpenXPS Document consumers SHOULD mitigate the effect of badly formed TIFF files in the 
following ways [S2.11]: 
• Accommodate common mistakes in TIFF images, such as: 
o 
Not all BitsPerSample hold the same value 
o 
Number of BitsPerSample does not match SamplesPerPixel 
o 
PhotometricInterpretation 1 or 2 (instead of 3) used when BitsPerSample is set to 
“8,8,8” 
o 
When the ExtraSamples tag is missing and SamplesPerPixel is not consistent with the 
PhotometricInterpretation tag then ExtraSamples values should be given the value 0. 
• Implement a recovery strategy when a problematic TIFF image is encountered. 
[Note: Over time, TIFF-consuming implementations have developed a certain tolerance for such 
deviations by attempting to deduce the intent of the TIFF image author and correct for 
apparent errors or deviations.  
Many TIFF images in circulation today deviate from the TIFF Specification. end note] 
9.1.5.4 
JPEG XR Image Parts 
It is RECOMMENDED that JPEG XR image part names end with the extension “.jxr” [S2.12]. 
JPEG XR image parts MUST conform to the JPEG XR specification [M2.35] and MUST use the 
Tag-based file format defined in Annex A of the JPEG XR specification [M2.91]. OpenXPS 
Documents support JPEG XR images with the characteristics identified in Table 9–6 and §15.3. 

9. Parts and Relationships 
ECMA-388 
32 
First Edition, June 2009 
Table 9–6. Supported JPEG XR features 
Color space 
Pixel formats 
Compression Alpha 
Grayscale 
BlackWhite 
8-bit integer 
16-bit integer 
16-bit half-float* 
16-bit fixed point* 
32-bit fixed point* 
Lossy 
– or – 
Lossless 
None 
sRGB 
8-bit integer 
16-bit integer 
Lossy 
– or – 
Lossless 
1-channel 
– or – 
1-channel pre-multiplied 
scRGB 
16-bit half-float 
16-bit fixed point 
32-bit IEEE float 
32-bit fixed point 
RGBE-Radiance 
Lossy 
– or – 
Lossless 
1-channel 
– or – 
1-channel pre-multiplied 
RGBE-Radiance (no alpha 
channel) 
CMYK 
8-bit integer 
16-bit integer 
Lossy 
– or – 
Lossless 
1-channel independent 
N-channel (including 
named color N-tone) 
8-bit integer 
16-bit integer 
Lossy 
– or – 
Lossless 
1-channel independent 
Profiled RGB (3-
channel) 
8-bit integer 
16-bit integer 
Lossy 
– or – 
Lossless 
1-channel 
– or – 
1-channel pre-multiplied 
* The value range of these formats is the same as scRGB. 
If no color profile is embedded in the JPEG XR image or stored in a separate part associated 
with the JPEG XR image according to the mechanisms described in §15.3.7, then the default 
color space MUST be treated as defined in §15.3.7 [M8.30]. 
9.1.6 
Thumbnail Parts 
Thumbnails are images that represent the contents of a fixed page or an entire OpenXPS 
Document. Thumbnails enable users of viewing applications to select a page easily. 
Thumbnail images MAY be attached using a relationship to the FixedPage parts [O2.19]. Each 
FixedPage part MUST NOT have more than one thumbnail part attached [M2.36]. Relationships 
to thumbnail parts are defined in §D. It is RECOMMENDED that if thumbnails are used for 
pages, a thumbnail SHOULD be included for each page in the document [S2.13].  
Although the OPC Standard allows thumbnails to be attached to any part, OpenXPS Document 
consumers SHOULD only process thumbnails associated via a package relationship from the 
package as a whole or via a relationship from a FixedPage part [S2.14]. These thumbnails 
MUST be in either JPEG or PNG format [M2.37]. Thumbnails attached to any other part SHOULD 
be ignored by OpenXPS Document consumers [S2.14]. The content types of thumbnail parts 
are specified in §D.2.  

ECMA-388 
9. Parts and Relationships 
 
 First Edition, June 2009 
33 
For more information about the relationship type for thumbnail parts, see §D.3. 
9.1.7 
Font Parts 
Fonts are stored in font parts. OpenXPS Documents MUST support the OpenType font format 
(ISO/IEC 14496-22:2007), including TrueType and CFF fonts [M2.39]. To support portability, 
Unicode-encoded fonts SHOULD be used (see §9.1.7.5 for additional information) [S2.15]. 
[Note: The Open Font Format is considered to be equivalent to the OpenType font format. end 
note] 
Font parts are referenced using the FontUri attribute of the <Glyphs> element. A single font can 
be shared among multiple fixed pages in one or more fixed documents. Font references MUST 
be to resources that are internal to the package; external references to fonts are invalid [M2.1]. 
If the referenced font part is a TrueType Collection, the fragment portion of the URI indicates 
the font face to be used. The use of URI fragments is specified in the BNF of Generic URI 
Syntax specification. The fragment contained in the FontURI attribute value MUST be an integer 
between 0 and n−1, inclusive, where n is the number of font faces contained in the TrueType 
Collection [M2.38]. The syntax for the integer value is expressed as: 
 
fontface = *DIGIT 
[Example: To reference the first font face in the font part “../Resources/Fonts/CJKSuper.ttc”, 
the value of the FontUri attribute is  “../Resources/Fonts/CJKSuper.ttc#0”. end example] If no 
fragment is specified, the first font face is used in the same way as if the URI had specified 
“#0”. If the fragment is not recognized as a valid integer, consumers SHOULD instantiate an 
error condition [S2.35]. 
Content types for fonts differ depending on whether the font is non-obfuscated or obfuscated 
(see §9.1.7.2). Content types are summarized in §D. 
Fixed pages MUST use a Required Resource relationship to each Font parts referenced [M2.10]. 
For more information, see §D. 
9.1.7.1 
Subsetting Fonts 
OpenXPS Documents represent text using the <Glyphs> element. Since the format is fixed, it is 
possible to create a font subset that contains only the glyphs required by the package. Fonts 
MAY be subsetted based on glyph usage [O2.20]. Although a subsetted font does not contain all 
the glyphs in the original font, it MUST be a valid Open Font Format file [M2.39]. Requirements 
for valid Open Font Format files are described in the Open Font Format  specification. 
9.1.7.2 
Open Font Format Embedding 
Protecting the intellectual property of font vendors is a goal of the OpenXPS Document format. 
Therefore, producers MUST observe the guidelines and mechanisms described below in order to 
honor the licensing rights specified in Open Font Format fonts [M2.40]. It is not the 
responsibility of consumers to enforce font licensing intent, although consumers MUST be able 
to process OpenXPS Documents using any combination of these embedding and obfuscation 
mechanisms, even if produced in violation of these guidelines [M2.41]. 
The licensing rights of an Open Font Format font are specified in the fsType field of the required 
OS/2 table in the font file. Table 9–7 lists the bit mask values that can appear in arbitrary 
combinations in the fsType field. Also listed are short descriptions of the licensing right intents 

9. Parts and Relationships 
ECMA-388 
34 
First Edition, June 2009 
and requirements or recommendations. These requirements represent the rules that producers 
and consumers must follow in order to respect licensing rights specified in the font. 
For further details on licensing rights of Open Font Format fonts, see the description of the 
OS/2 table in “OS/2 and Windows Metrics.” 
Table 9–7. Guidelines for Open Font Format embedding 
Bit/mask 
Licensing right intent 
Producer rules 
Consumer rules 
− / 
0x0000 
Installable embedding. SHOULD do embedded 
font obfuscation [S2.16] 
(see §9.1.7.3 for 
details). 
SHOULD NOT extract or 
install permanently (see 
below) [S2.17]. 
0 / 
0x0001 
Reserved, must be 0. 
 
 
1 / 
0x0002 
Restricted license 
embedding. If only this 
bit is set, the font 
MUST NOT be 
modified, embedded or 
exchanged in any 
manner without 
obtaining permission 
from the legal owner. 
[M2.92] 
MUST NOT embed 
[M2.42].  
SHOULD generate a 
path filled with an image 
brush referencing an 
image of rendered 
characters [S2.18]. 
SHOULD include the text 
in the 
AutomationProperties.Name 
attribute of the <Path> 
element [S2.18]. 
Render embedded 
images. 
2 / 
0x0004 
For preview and print 
embedding, font can 
be embedded and 
temporarily used on 
remote systems. 
However, 
FixedDocuments 
referencing any 
preview and print fonts 
MUST NOT be modified 
or edited [M2.43]. 
MUST do embedded font 
obfuscation [M2.44] 
(see §9.1.7.3). 
MUST add a Restricted 
Font relationship to the 
FixedDocument part 
referencing the font 
[M2.12]. See §D.3 for 
details. 
MUST NOT modify or 
edit the FixedDocument 
or resources referenced 
from it [M2.43]. 
MUST NOT extract or 
install permanently 
[M2.45]. 
3 / 
0x0008 
Editable embedding. 
MUST do embedded font 
obfuscation [M2.46] 
(see §9.1.7.3). 
MUST NOT extract or 
install permanently 
[M2.47]. 
4–7 
Reserved, must be 0. 
 
 
8 / 
0x0100 
No subsetting. 
MUST do embedded font 
obfuscation 
(see §9.1.7.3) [M2.48]. 
MUST NOT subset font 
before embedding. 
[M2.49] 
MUST NOT extract or 
install permanently 
[M2.50]. 

ECMA-388 
9. Parts and Relationships 
 
 First Edition, June 2009 
35 
9 / 
0x0200 
Bitmap embedding 
only. 
MUST do embedded font 
obfuscation [M2.51] 
(see §9.1.7.3). 
MUST embed only 
bitmap characters 
contained in the font 
[M2.51]. 
If no bitmap characters 
are present in the font, 
MUST NOT embed the 
font [M2.51]. 
MUST NOT extract or 
install permanently 
[M2.52]. 
10–15 
Reserved, must be 0. 
 
 
9.1.7.3 
Embedded Font Obfuscation 
Embedded font obfuscation is a means of preventing casual misappropriation of embedded 
fonts. Specifically, embedded font obfuscation prevents end-users from using standard ZIP 
utilities to extract fonts from OpenXPS Document files and install them on their systems.  
Embedded font obfuscation is not considered a strong encryption of the font data. 
Embedded font obfuscation achieves the following goals: 
1. Obfuscated font files are embedded within an OpenXPS Document package in a form that 
cannot be directly installed on any client operating system. 
2. Obfuscated font files are closely tied to the content referencing them. Therefore, it is 
non-trivial to misappropriate fonts by moving them from one package to another. 
3. The manner in which obfuscated font files are tied to the content referencing them still 
allows for document merging. 
For information on how to determine when fonts must be obfuscated prior to embedding, see 
Table 9–7. 
Although the licensing intent allows embedding of non-obfuscated fonts and installation of the 
font on a remote client system under certain conditions, this is NOT RECOMMENDED in 
OpenXPS Documents [S2.19]. However, there are vertical solutions in which implementations 
might benefit from un-obfuscated font embedding. In these cases, implementations could omit 
obfuscation or extract and install the embedded font. 
If a producer is required to perform embedded font obfuscation, it MUST satisfy the following 
requirements [M2.53]: 
1. Generate a 128-bit GUID (Globally Unique Identifier) for the font to be obfuscated. 
Instead of a true GUID, a 128-bit random number MAY be used [O2.21]. The 16 bytes of 
the 128-bit GUID are referred to in the following text by the placeholder names B00, B01, 
B02, B03; B10, B11; B20, B21; B30, B31, B32, B33, B34, B35, B36, and B37. The order in which 
bytes are assigned to these placeholders does not matter, as long as it is consistent for 
obfuscation and de-obfuscation. 
2. Generate a part name for the obfuscated font using the GUID. The last segment of the 
part name MUST be of the form “B03B02B01B00-B11B10-B21B20-B30B31-B32B33B34B35B36B37” or 
“B03B02B01B00-B11B10-B21B20-B30B31-B32B33B34B35B36B37.ext” where each Bx represents a 
placeholder for one byte of the GUID, represented as two hex digits [M2.54]. The part 
name MAY have an arbitrary extension (identified by the placeholder “.ext”) [O2.22]. It is 

9. Parts and Relationships 
ECMA-388 
36 
First Edition, June 2009 
RECOMMENDED that the extension for TrueType fonts be “.odttf” and for TrueType 
collections be “.odttc” [S2.20]. 
3. The content type for the part containing the obfuscated font MUST match the definition 
in §D [M2.2]. 
4. Perform an XOR operation on the first 32 bytes of the binary data of the font part with 
the array consisting of the bytes referred to by the placeholders B37, B36, B35, B34, B33, 
B32, B31, B30, B20, B21, B10, B11, B00, B01, B02, and B03, in that order and repeating the array 
once. The result is an obfuscated font. 
5. Store the obfuscated font in a part with the generated name. 
When processing fonts, consumers MUST follow these steps [M2.53]: 
1. If the content type of the part containing the font is not the obfuscated font content type 
as specified in §D, process the font without any de-obfuscation steps. 
2. For font parts with the obfuscated font content type as specified in §D, de-obfuscate the 
font by following these rules: 
a. Remove the extension from the last segment of the name of the part containing the 
font. 
b. Convert the remaining characters of the last segment to a GUID using the byte 
ordering described above. 
c. Perform an XOR operation on the first 32 bytes of the binary data of the obfuscated 
font part with the array consisting of the bytes referred to by the placeholders B37, 
B36, B35, B34, B33, B32, B31, B30, B20, B21, B10, B11, B00, B01, B02, and B03, in that order 
and repeating the array once. The result is a non-obfuscated font. 
d. Use the non-obfuscated font for the duration of the document processing, but do not 
leave any local or otherwise user-accessible copy of the non-obfuscated font. 
9.1.7.4 
Print and Preview Restricted Fonts 
If a producer embeds a font with the print and preview restriction bit set, it MUST also add a 
Restricted Font relationship from the FixedDocument part that includes the FixedPage 
referencing the font to the restricted font [M2.12]. 
When editing content, producers MUST NOT edit a FixedDocument or resources referenced from 
it where the FixedDocument part has a Restricted Font relationship [M2.43]. When editing 
content, producers MUST instantiate an error condition when encountering any font with the 
print and preview restriction bit set for which no Restricted Font relationship has been added to 
the FixedDocument part [M2.93].Consumers MUST consider an OpenXPS Document valid even 
if the producer failed to properly set the Restricted Font relationship [M2.94]. 
9.1.7.5 
Non-Standard Font Compatibility Encoding 
When processing <Glyphs> elements, the consumer MUST first select a cmap table from the 
Open Font Format following the order of preference shown below (highest listed first) [M2.55]: 
Table 9–8. Cmap table selection 
Platform ID Encoding ID Description 
3 
10 
Unicode with surrogates 
3 
1 
Unicode without surrogates 

ECMA-388 
9. Parts and Relationships 
 
 First Edition, June 2009 
37 
Platform ID Encoding ID Description 
3 
5 
Wansung 
3 
4 
Big5 
3 
3 
Prc 
3 
2 
ShiftJis 
3 
0 
Symbol 
0 
Any 
Unicode (deprecated) 
1 
0 
MacRoman 
All further processing for that font MUST use the selected cmap table [M2.55]. 
If a Wansung, Big5, Prc, ShiftJis or MacRoman cmap has been selected, the consumer MUST 
correctly map from Unicode code points in the UnicodeString to the corresponding code points 
used by the cmap before looking up the glyphs [M2.56]. The Unicode standard provides details 
of the required mappings. 
Producers SHOULD avoid using fonts lacking a Unicode-encoded cmap table [S2.15]. 
When processing <Glyphs> elements that reference a cmap (3,0) encoding font, consumers 
MUST be prepared for the case in which the UnicodeString attribute contains character codes 
instead of PUA code points [M2.57]. This condition is indicated by an unsuccessful Unicode 
lookup of the code point specified in the Unicode string in the cmap (3,0) table. In this case, 
the correct glyph index is computed by following the general recommendations of the Open 
Font Format specification.  
When processing <Glyphs> elements that use this compatibility encoding, character codes in 
the range 0x20-0xff are mapped to PUA code points. See §12.1.4 for requirements for handling 
Unicode control marks. 
This non-standard encoding has been included to facilitate document production for certain 
producers. However, there are significant drawbacks resulting from this encoding: 
• Search is unpredictable 
• Copy and paste functionality is unpredictable 
• Glyph rendering is unpredictable, especially between different consumers 
Producers SHOULD NOT use this non-standard encoding and they SHOULD write PUA code 
points to the UnicodeString attribute [S2.15]. 
9.1.8 
Remote Resource Dictionary Parts 
A remote resource dictionary allows producers to define resources that can be reused across 
many pages, such as a brush. This is stored in a Remote Resource Dictionary part. For more 
information, see §14.2.3.1. 
9.1.9 
PrintTicket Parts 
This Standard provides a mechanism for including user intent and device configuration settings 
within an OpenXPS Document as PrintTicket parts. PrintTicket parts enable the association of 
settings with parts within an OpenXPS Document. The format to be used for PrintTickets is 
implementation-defined. This Standard defines how to associate those PrintTicket parts with 
OpenXPS Documents.  If the consumer understands the content of the PrintTicket, then the 

9. Parts and Relationships 
ECMA-388 
38 
First Edition, June 2009 
PrintTicket part SHOULD be processed when the OpenXPS Document is printed [S2.36].  
PrintTicket parts can be attached only to FixedDocumentSequence, FixedDocument, and 
FixedPage parts, and each of these parts MUST attach no more than one PrintTicket [M2.59]. 
9.1.9.1 
Mapping PrintTicket Parts to Fixed Payload Parts 
OpenXPS Documents contain a hierarchy of FixedDocumentSequence, FixedDocument, and 
FixedPage parts, as defined in §10. The association of PrintTickets with 
FixedDocumentSequence, FixedDocument, and FixedPage parts reflects this hierarchy and 
enables the scope of settings specified in PrintTicket parts to be limited to the 
FixedDocumentSequence, FixedDocument, and FixedPage parts within the OpenXPS Document. 
Domain-specific implementations are responsible for specifying how the settings provided in the 
PrintTicket parts are scoped. 
9.1.10 SignatureDefinitions Part 
Producers MAY add digital signature requests and instructions to an OpenXPS Document in the 
form of signature definitions [O2.23]. A producer MAY sign against an existing signature 
definition to provide additional signature information [O2.24]. A recipient of the document MAY 
also sign the OpenXPS Document against a signature definition [O2.25]. (This is referred to as 
“co-signing.”) 
Digital signature definitions are stored in a SignatureDefinitions part. A FixedDocument part 
refers to a SignatureDefinitions part using a relationship of the SignatureDefinitions type. For 
more information, see §D. 
The SignatureDefinitions part is OPTIONAL [O2.6]. Signature definitions MUST conform to the 
Signature Definitions schema as defined in §A.1 [M2.86]. 
For more information on digital signature support in OpenXPS Documents, see §17. 
9.1.11 DocumentStructure Part 
Explicitly authored document structure information is stored in the DocumentStructure part. 
This part contains the document outline and defines the framework for every element in fixed 
pages in terms of semantic blocks, each of which is called a story. A story is split into 
StoryFragments parts, which contain content structure markup that defines semantic blocks 
such as paragraphs and tables. For more information, see §16. 
Document structure markup contains a root <DocumentStructure> element. See §16 for 
markup details. The <DocumentStructure> element uses the Document Structure namespace 
specified in §D.1. 
The DocumentStructure part is referenced by relationship from the FixedDocument part, with 
the relationship type as specified in §D. The content type of the DocumentStructure part is also 
specified in §D. 
Consumers MAY provide an algorithmic construction of the structure of an OpenXPS Document 
based on a page-layout analysis [O2.27], but they MUST NOT use such a method to derive 
structure for any part of the OpenXPS Document included in the DocumentStructure part 
[M2.68]. A consumer capable of calculating reading order from the layout of the document 
MUST use the reading order specified in the DocumentStructure part, even though the derived 
order might be perceived as preferable to the specified order [M2.68]. 

ECMA-388 
9. Parts and Relationships 
 
 First Edition, June 2009 
39 
9.1.12 StoryFragments Part 
The StoryFragments part contains content structure markup (such as tables and paragraphs) 
associated with a single fixed page. 
StoryFragments part markup contains a root <StoryFragments> element. See §16 for markup 
details. The <StoryFragments> element uses the Document Structure namespace specified 
in §D.1. 
The StoryFragments part is referenced by relationship from its associated FixedPage part. The 
content type of the StoryFragments part is specified in §D.2. 
9.2 
Part Naming Recommendations 
Implementations refer to parts by name and use relationship names to identify the purpose of 
related parts. The OPC Standard describes the syntax for part names. However, following these 
rules alone can result in a package that is difficult for users to understand. [Example: A user 
would have to open every Relationship part to know which parts are necessary to accurately 
render an OpenXPS Document. end example] 
By choosing part names according to a well-defined, human-readable convention, the resulting 
package is easier to browse and specific parts are more easily located. Part names MUST still 
conform to the syntax specified in the OPC Standard [M1.1]. 
It is RECOMMENDED that producers of OpenXPS Documents use the following part naming 
convention: 
• The FixedDocumentSequence part name SHOULD contain only one segment, and that 
segment SHOULD have the extension “.fdseq”. [Example: “/FixedDocSeq.fdseq” end 
example] [S2.24]. 
• A FixedDocument part name SHOULD contain three segments, using “/Documents/n/” in 
the first two segments and the extension “.fdoc” [S2.25]. Here, n SHOULD be a numeral 
that represents the ordinal position of the fixed document in the fixed document 
sequence [S2.25]. [Example: The fixed document referenced by the Source attribute of 
the third <DocumentReference> child of the <FixedDocumentSequence> element could 
be “/Documents/3/FixedDocument.fdoc”. end example] 
• A FixedPage part name SHOULD contain four segments, using “/Documents/n/Pages/” as 
the first three segments and the extension “.fpage” on the last segment [S2.26]. Here, n 
represents the fixed document that includes this page. [Example: The third page of the 
second document might be “/Documents/2/Pages/3.fpage”. end example] 
• Resource parts MAY be named to indicate whether their intended use is at the document 
level or as a shared resource for all documents [O2.28]. A resource that is specific to a 
particular document SHOULD have a part name that begins with the three segments 
“/Documents/n/Resources/” where n is the particular fixed document [S2.27]. A 
resource intended to be shared across documents SHOULD begin with the segment 
“/Resources/” and SHOULD have a final segment that is a globally unique identifier 
followed by the appropriate extension for that resource [S2.27]. [Example: 
“/Resources/Fonts/63B51F81-C868-11D0-999C-00C04FD655E1.odttf” end example] 
A Font part name SHOULD append the segment “Fonts/” to the resource part name prefix 
specified above [S2.27]. [Example: A font might be named 
“/Documents/1/Resources/Fonts/Arial.ttf” or “/Resources/Fonts/F2ABC7B7-C60D-4FB9-
AAE4-3CA0F6C7038A.odttf”. end example] 

9. Parts and Relationships 
ECMA-388 
40 
First Edition, June 2009 
An Image part name SHOULD append the segment “Images/” to the resource part name 
specified above [S2.27]. [Example: An image might be named 
“/Documents/3/Resources/Images/dog.jpg” or “/Resources/Images/E0D79307-846E-
11CE-9641-444553540000.jpg”. end example] 
A Remote Resource Dictionary part name SHOULD append the segment “Dictionaries/” to 
the resource part name specified above [S2.27]. Remote resource dictionaries SHOULD 
also use the “.dict” extension [S2.27]. [Example: A resource dictionary might be named 
“/Documents/2/Resources/Dictionaries/Shapes.dict” or 
“/Resources/Dictionaries/0DDF3BE2-E692-15D1-AB06-B0AA00BDD685.dict”. end 
example] 
• Any DocumentStructure part name SHOULD contain four segments using 
“/Documents/n/Structure/” as the first three segments and the extension “.struct” 
[S2.28]. Here n represents the fixed document that this structure is associated with. 
[Example: The DocumentStructure part for the first document in a fixed document 
sequence could be “/Documents/1/Structure/DocStructure.struct”. end example] 
• Any StoryFragments part name SHOULD contain five segments using 
“/Documents/n/Structure/Fragments” as the first four segments and the extension 
“.frag” [S2.29]. Here n represents the fixed document that these parts are associated 
with. [Example: A StoryFragment part associated with the third page of the second 
document in a fixed document sequence could be 
“/Documents/2/Structure/Fragments/3.frag”. end example] 
• ICC profile part names SHOULD contain four segments, using “/Documents/n/Metadata/” 
as the first three segments, where n is the fixed document that uses these parts 
[S2.30]. If an ICC profile part is shared across documents, the part name SHOULD 
contain two segments, using “/Metadata/” as the first segment and a second segment 
that is a string representation of a globally unique identifier, followed by an extension 
[S2.30]. ICC profiles SHOULD use an appropriate extension for the color profile type. 
[S2.30] [Example:  “.icm” end example] 
• Thumbnail part names SHOULD contain four segments, using “/Documents/n/Metadata/” 
as the first three segments, where n is the fixed document that uses the thumbnail 
[S2.31]. If the Thumbnail part relates to the package as a whole, the part name 
SHOULD contain two segments, using “/Metadata/” as the first segment and a second 
segment that is a string representation of a globally unique identifier, followed by an 
extension [S2.31]. Thumbnails SHOULD use an extension appropriate to the image type, 
either “.png” or “.jpg” [S2.31]. [Example: A Thumbnail part for a particular fixed page 
might be “/Documents/1/Metadata/5.png”. end example] 
• PrintTicket part names associated with the entire job SHOULD be associated via 
relationship with the FixedDocumentSequence part and contain two segments, using 
“/Metadata/” as the first segment [S2.32]. PrintTicket parts associated with a particular 
fixed document or fixed page SHOULD contain four segments, using 
“/Documents/n/Metadata/” as the first three segments, where n is the fixed document 
that uses these parts [S2.32]. PrintTicket parts based on XML SHOULD use the 
extension “.xml” [S2.32]. [Example: A PrintTicket associated with the entire job could be 
“/Metadata/Job_PT.xml” and a PrintTicket associated with a single page might be 
“/Documents/1/Metadata/Page2_PT.xml”. end example] 
• The names of any non-standard parts that are associated with a particular fixed 
document SHOULD contain four segments, using “/Documents/n/Other/” as the first 
three segments. Here, n is the fixed document to which the part belongs [S2.33]. 

ECMA-388 
9. Parts and Relationships 
 
 First Edition, June 2009 
41 
Example 9–2. OpenXPS Document part naming  
An OpenXPS Document that contains two FixedDocument parts is represented as follows: 
/FixedDocSeq.fdseq 
/Documents/1/FixedDocument.fdoc 
/Documents/1/Pages/1.fpage 
/Documents/1/Pages/2.fpage 
/Documents/1/Resources/Fonts/FontA.ttf 
/Documents/1/Resources/Images/ImageB.jpg 
/Documents/1/Metadata/Document_PT.xml 
/Documents/1/Metadata/Page5_PT.xml 
/Documents/1/Structure/DocStructure.struct 
/Documents/1/Structure/Fragments/1.frag 
/Documents/1/Structure/Fragments/2.frag 
/Documents/1/Other/FabrikamIncBussinessAccount.xml 
/Documents/2/FixedDocument.fdoc 
/Documents/2/Pages/1.fpage 
/Documents/2/Resources/Fonts/FontB.ttf 
/Documents/2/Resources/Images/ImageA.png 
/Documents/2/Metadata/ColorProfile.icm 
/Documents/2/Metadata/Document_PT.xml 
/Documents/2/Other/FabrikamIncInsuranceInfo.xml 
/Metadata/Job_PT.xml 
/Resources/Fonts/63B51F81-C868-11D0-999C-00C04FD655E1.ttf 
end example] 
9.3 
OpenXPS Document Markup 
OpenXPS Document Markup is used to describe the content of fixed pages within an OpenXPS 
Document. This XML-based markup has been designed to address the requirements for 
describing graphical content within electronic paper documents. The graphical primitives 
described by the elements, attributes and attribute values in the markup are completely 
sufficient for representing document content as acquired from, or output to, physical paper by a 
variety of document devices and applications. The OpenXPS Document Markup has also been 
developed consistent with the independent development of compatible systems that produce or 
consume OpenXPS Documents. 
The design of OpenXPS Document Markup reflects the tradeoffs between the following two, 
sometimes competing, goals: 
1. OpenXPS Document markup should be parsimonious; that is, it should include only the 
minimum set of primitive operations and markup constructs necessary to render text and 
graphics with full fidelity. Redundancy in the Standard increases the opportunity for 
independent implementations, such as printer-resident raster image processors (RIPs), 
viewers, and interactive applications, to introduce accidental incompatibilities. Redundancy 
also increases the cost of implementation and testing, and, typically, the required memory 
footprint. 
2. OpenXPS Document markup should be compact; that is, the most common graphical 
primitives for vector graphics and text-rendering should have compact representations. 
Inefficient representations compromise the performance of systems handling OpenXPS 
Documents. As byte-count increases, so does communication time. Although compression 

9. Parts and Relationships 
ECMA-388 
42 
First Edition, June 2009 
can be used to improve communication time, it cannot eliminate the performance loss 
caused by inefficient representations. 
9.3.1 
Support for Versioning and Extensibility 
OpenXPS Document markup has been designed in anticipation of the evolution of this Standard. 
It also allows third parties to extend the markup. OpenXPS Document markup incorporates the 
Markup Compatibility and Extensibility Standard incorporated by the Office Open XML Standard.  
The following parts MAY include elements and attributes defined in the Markup Compatibility 
and Extensibility Standard [O2.29]: 
• DiscardControl 
• DocumentStructure 
• FixedDocument 
• FixedDocumentSequence 
• FixedPage 
• Relationships 
• Remote Resource Dictionary 
• SignatureDefinitions 
• StoryFragments 
Consumers of these parts MUST support the Markup Compatibility and Extensibility Standard 
[M2.69]. Before attempting to validate one of these parts against a schema, processors MUST 
remove all markup compatibility elements and attributes and all ignorable elements and 
attributes not defined in the expected version of OpenXPS Document markup [M2.69]. 
Markup compatibility elements and attributes that appear in one OpenXPS Document part do 
not carry through to a second part via an inline URI reference in the XML markup. Likewise the 
markup compatibility mechanisms do not carry through from part to part via relationship. 
9.3.2 
XML Usage 
All XML content of the parts defined in this Standard MUST conform to the following validation 
rules: 
1. XML content MUST be encoded using either UTF-8 or UTF-16. If any such part includes an 
encoding declaration (as defined in §4.3.3 of the XML Standard), that declaration MUST 
NOT name any encoding other than UTF-8 or UTF-16 [M2.70]. [Note: This Standard 
specifies unambiguously how implementations should operate with XML content and does 
so in terms of UTF-16 encoding. This does not preclude the use of UTF-8 in OpenXPS 
Document content. end note] 
2. The XML 1.0 Standard allows for the usage of Data Type Definitions (DTDs), which 
enable Denial of Service attacks, typically through the use of an internal entity expansion 
technique. As mitigation for this potential threat, DTD content MUST NOT be used in the 
XML markup defined in this Standard, and consumers MUST instantiate an error condition 
when encountering DTD content [M2.71]. 
3. If the XML content contains the Markup Compatibility and Extensibility namespace, as 
described in the Markup Compatibility and Extensibility Standard, it MUST be processed 
to remove Markup Compatibility and Extensibility elements and attributes, ignorable 

ECMA-388 
9. Parts and Relationships 
 
 First Edition, June 2009 
43 
namespace declarations, and ignored elements and attributes before applying further 
validation rules below [M2.69]. 
4. XML content MUST be valid against the corresponding W3C XSD schema defined in this 
Standard. In particular, the XML content MUST NOT contain elements or attributes drawn 
from namespaces that are not explicitly defined in the corresponding XSD unless the XSD 
allows elements or attributes drawn from any namespace to be present in particular 
locations in the XML markup [M2.72]. 
5. XML content MUST NOT contain elements or attributes drawn from “xml” or “xsi” 
namespaces unless they are explicitly defined in the W3C XSD schema or by other means 
in the Standard [M2.73]. 
9.3.3 
Markup Model 
OpenXPS Document markup is an XML-based markup language that uses elements, attributes, 
and namespaces. The schema for OpenXPS Document markup includes only elements and their 
attributes, comments, and whitespace. Arbitrary character data intermingled in the markup is 
not allowed. 
Fixed page markup is expressed using elements and attributes and is based on a higher-level 
abstract model of contents and properties. Some fixed page elements can hold “contents,” 
which are expressed as child elements. Properties can be expressed either as attributes or child 
elements. 
OpenXPS Document markup also uses resources and resource dictionaries, which allow 
elements to share property values. 
9.3.3.1 
Namespaces 
The following XML namespaces are defined for use in OpenXPS Document markup: 
• The OpenXPS Document namespace, the principal namespace used for elements and 
attributes in fixed page markup. For more information, see §D. 
• The Resource Dictionary Key namespace, which allows certain OpenXPS Document 
elements to be included in a resource dictionary, as described in §14.2. 
• The Markup Compatibility namespace, which supports the Markup Compatibility and 
Extensibility Standard as defined in the OPC Standard.  
9.3.3.2 
Properties 
A property is a characteristic of an element. OpenXPS Document property values can be 
expressed either as property attributes or property elements. Property values can be stored in a 
resource dictionary and referenced by an attribute that uses a special syntax to express its 
value. For more information, see §14.2. 
Properties MUST NOT be set more than once, regardless of the syntax used to specify the value 
[M2.74]. In certain cases, they can be specified using either property attributes or property 
elements. Consumers MUST instantiate an error condition when encountering properties that 
are specified in both ways [M2.74]. 
Some properties are common to several fixed page elements. For more information, see §14. 

9. Parts and Relationships 
ECMA-388 
44 
First Edition, June 2009 
9.3.3.2.1 
Composable Property Values 
Some fixed page properties are composable, meaning that the page marking effect is 
determined by combining the property value of a given element with that of its parent and 
ancestor elements. [Example: A <Path> element with an Opacity value of 0.5 nested inside a 
<Canvas> element with an Opacity value of 0.5 results in an effective 25% opacity of the 
<Path> element when rendered. end example] 
The coordinate space used to render page marking elements is also composable. By default, 
elements are rendered in a coordinate space with units of 1/96". The effective coordinate space 
for a particular element is created by sequentially applying each parent and ancestor element’s 
affine matrix transformation, specified with the Transform or RenderTransform properties, from 
outermost to innermost, including the element’s own affine matrix transformation. 
For more information, see §18.1.3, and §18.5. 
9.3.3.2.2 
Property Attribute Syntax 
Some property values can be expressed using simple XML attribute syntax, that is, with a text 
string. The value of properties used to describe geometries can be expressed using an 
abbreviated syntax. For more information, see §11.2.3. 
Example 9–3. Property attribute syntax 
The following syntax can be used to specify the color of a brush: 
<!-- Property Attribute Syntax --> 
<SolidColorBrush Color="#FF0000" /> 
end example] 
9.3.3.2.3 
Property Element Syntax 
Some property values can also be expressed using a child element to describe the property 
value. These property elements are included to enable usage of the markup compatibility 
mechanisms described in the Markup Compatibility and Extensibility Standard. The element 
name is derived from a combination of a parent element name and the property name, 
separated by a dot (.) character. 
The order of child property elements is significant: they MUST occur before any contents of the 
parent element and they MUST appear in the sequence specified in the schema [M2.87]. 

ECMA-388 
9. Parts and Relationships 
 
 First Edition, June 2009 
45 
Example 9–4. Property element syntax 
When specifying Clip and RenderTransform properties of the canvas, both must appear before 
any path and glyphs contents of the canvas. 
<Canvas> 
   <!-- First, the property-related child elements --> 
   <Canvas.RenderTransform> 
      <MatrixTransform Matrix="1,0,0,1,0,0" /> 
   </Canvas.RenderTransform> 
   <Canvas.Clip> 
      <PathGeometry> 
         ... 
      </PathGeometry> 
   </Canvas.Clip> 
   <!-- Then, the "contents" --> 
   <Path ...> 
      ... 
   </Path> 
   <Glyphs ... /> 
</Canvas> 
end example] 
9.3.4 
Whitespace 
OpenXPS Documents allow flexible whitespace usage in markup. Wherever a single whitespace 
character is allowed, multiple whitespace characters MAY be used [O2.30]. Attributes that 
specify comma-delimited attribute values MAY, unless specified otherwise, OPTIONALLY include 
whitespace characters preceding or following the comma [O2.31]. OpenXPS Document markup 
MUST NOT use the xml:space attribute [M2.75]. Additionally, where the OpenXPS Document 
schema specifies attributes of types that allow whitespace collapsing, leading and trailing 
whitespace in the attribute value MAY be used along with other whitespace that relies on the 
whitespace collapsing behavior specified in the XML Schema Standard [O2.32]. 
[Note: Consult the OpenXPS Document Schema for exact whitespace allowed. end note] 
9.3.5 
Language  
Language information supports the following features: 
• Language-dependent find features 
• Selection of a text-to-speech dictionary by a screen-reading program (to provide 
accessibility to persons with disabilities) 
• Selection of a spelling checker for text copied to another document 
• Selection of a grammar checker for text copied to another document 
• Correct font rendering when copying the text to another document 
The last point refers to instances in which multiple languages share the same script. [Example: 
The Devanagari script is shared by the Indic languages Bhojpuri, Bihari, Hindi, Kashmiri, 
Konkani, Marathi, Nepali, and Sanskrit. However, these languages render certain glyph 
sequences differently. When text is copied from an OpenXPS Document, the language of the 
copied characters is needed to ensure proper rendering of the glyphs when they are pasted into 

9. Parts and Relationships 
ECMA-388 
46 
First Edition, June 2009 
another application. This scenario applies to most Indic-language fonts, some East Asian–
language fonts, and others. end example] 
9.3.5.1 
xml:lang Attribute 
The language of the contents of an OpenXPS Document MUST be identified using the xml:lang 
attribute, the value of which is inherited by child and descendant elements [M2.76]. 
This attribute is defined in the W3C XML Standard. 
xml:lang is REQUIRED for <FixedPage> elements [M2.88]. xml:lang MAY be used with <Canvas>, 
<Path>, and <Glyphs> elements [O2.33]. xml:lang MUST NOT be used on any other fixed page 
markup element [M2.89]. xml:lang is also REQUIRED for the <DocumentOutline> element for 
document structure [M2.90]. xml:lang is OPTIONAL for the <OutlineEntry> element [O2.34]. 
When the language of the contents is unknown and is required, the value “und” (undetermined) 
MUST be used [M2.76]. 

ECMA-388 
10. Documents 
 
 First Edition, June 2009 
47 
10. Documents 
OpenXPS Documents contain a root fixed document sequence that binds a collection of fixed 
documents which, in turn, bind a collection of fixed pages. All page markings are specified with 
<Glyphs> or <Path> elements on the fixed page. These elements can be grouped within one or 
more <Canvas> elements. Page markings are positioned by real-number coordinates in the 
coordinate space of the fixed page. The coordinate space can be altered by applying a render 
transformation. 
10.1 <FixedDocumentSequence> Element 
element FixedDocumentSequence 
diagram 
annotation Specifies a sequence of fixed documents. 
The <FixedDocumentSequence> element contains one or more <DocumentReference> 
elements. The order of <DocumentReference> elements MUST match the order of the 
documents in the fixed document sequence [M3.1]. 
Example 10–1. <FixedDocumentSequence> usage 
<FixedDocumentSequence xmlns="http://schemas.openxps.org/oxps/v1.0"> 
   <DocumentReference Source="Documents/1/FixedDocument.fdoc" /> 
   <DocumentReference Source="Documents/2/FixedDocument.fdoc" /> 
</FixedDocumentSequence> 
end example] 
10.1.1 <DocumentReference> Element 
element DocumentReference 
diagram 
attributes Name   Type   
Use   
Default   Fixed   Annotation 

10. Documents 
ECMA-388 
48 
First Edition, June 2009 
Source   xs:anyURI required      
   
Specifies the URI of the fixed document content. The specified 
URI MUST refer to a FixedDocument part within the OpenXPS 
Document [M3.2]. 
annotation Contains a reference to a FixedDocument part. 
The <DocumentReference> element specifies a FixedDocument part as a URI in the Source 
attribute. Producers MUST NOT produce a document with multiple <DocumentReference> 
elements that reference the same fixed document [M3.3]. 
10.2 <FixedDocument> Element 
element FixedDocument 
diagram 
annotation Binds an ordered sequence of fixed pages together into a single multi-page document. 
The <FixedDocument> element contains one or more <PageContent> elements. The order of 
<PageContent> elements MUST match the order of the pages in the document [M3.4]. 
Example 10–2. <FixedDocument> usage 
<FixedDocument xmlns="http://schemas.openxps.org/oxps/v1.0"> 
   <PageContent Source="Pages/1.fpage" /> 
   <PageContent Source="Pages/2.fpage" /> 
</FixedDocument> 
end example] 
10.2.1 <PageContent> Element 
element PageContent 
diagram 
 
attributes Name   Type   
Use   
Default   Fixed   Annotation 

ECMA-388 
10. Documents 
 
 First Edition, June 2009 
49 
Source   xs:anyURI required      
   
Specifies a URI that refers to the page content, which is held 
in a distinct part within the package. The content identified 
MUST be a FixedPage part within the OpenXPS Document 
[M3.5]. 
Width   ST_GEOne     
   
   
The width of the page contained in the page content. 
Height   ST_GEOne     
   
   
The height of the page contained in the page content. 
annotation Defines a reference from a fixed document to a part that contains a <FixedPage> element. 
Each <PageContent> element refers to the source of the content for a single page. The number 
of pages in the document can be determined by counting the number of <PageContent> 
elements. 
The <PageContent> element has a single required attribute, Source, which refers to a 
FixedPage part. It can optionally include advisory Height and Width attributes to indicate the size 
of a single page. (The authoritative height and width are specified by the fixed page.) The 
Height and Width attribute values allow consumers such as viewers to make initial visual layout 
estimates quickly, without loading and parsing all of the individual fixed pages. These 
consumers then update the page dimensions when the fixed page is loaded, if they differ. 
The <PageContent> element has one allowable child element, <PageContent.LinkTargets>, and 
it MUST NOT contain more than a single child element [M3.21]. 
Producers MUST NOT produce markup where a <PageContent> element references the same 
fixed page referenced by any other <PageContent> element in the entire OpenXPS Document, 
even in other fixed documents within the fixed payload [M3.6]. 
Example 10–3. <PageContent> usage 
<FixedDocument xmlns="http://schemas.openxps.org/oxps/v1.0"> 
   <PageContent Source="Pages/1.fpage" Height="1056" Width="816" /> 
   <PageContent Source="Pages/2.fpage" Height="1056" Width="816" /> 
</FixedDocument> 
end example] 
10.2.2 <PageContent.LinkTargets> Element 
element PageContent.LinkTargets 
diagram 
annotation Contains a collection of <LinkTarget> elements, each of which is addressable via hyperlink. 
The <PageContent.LinkTargets> element defines the list of link targets that specify each named 
element on the page that can be addressed by hyperlink.  

10. Documents 
ECMA-388 
50 
First Edition, June 2009 
Example 10–4. <PageContent.LinkTargets> usage 
In the following markup, Pages/2.fpage contains two <LinkTarget> elements with Name 
attribute values of Anchor1 and Anchor2: 
<FixedDocument xmlns="http://schemas.openxps.org/oxps/v1.0"> 
   <PageContent Source="Pages/1.fpage" Height="1056" Width="816" /> 
   <PageContent Source="Pages/2.fpage" Height="1056" Width="816"> 
      <PageContent.LinkTargets> 
         <LinkTarget Name="Anchor1" /> 
         <LinkTarget Name="Anchor2" /> 
      </PageContent.LinkTargets> 
   </PageContent> 
</FixedDocument> 
end example] 
10.2.3 <LinkTarget> Element 
element LinkTarget 
diagram 
 
attributes Name   Type   
Use   
Default   Fixed   Annotation 
Name   ST_Name  required      
   
Contains a string value that identifies the current element as a 
named, addressable point in the document for the purpose of 
hyperlinking. 
annotation Specifies an addressable point on the page. 
The <LinkTarget> element specifies a Name attribute, which corresponds to a named location 
within the fixed page specified by its parent <PageContent> element. By encapsulating this 
information in the fixed document, consumers do not need to load every FixedPage part to 
determine if a particular Name value exists in the document. For more information, see §16.2. 

ECMA-388 
10. Documents 
 
 First Edition, June 2009 
51 
10.3 <FixedPage> Element 
element FixedPage 
diagram 
attributes Name   
Type   
Use   
Default   Fixed   Annotation 
Width   
ST_GEOne  
required      
   
Width of the page, expressed as a real number in 
units of the effective coordinate space. 
Height   
ST_GEOne  
required      
   
Height of the page, expressed as a real number in 
units of the effective coordinate space. 
ContentBox   ST_ContentBox     
   
   
Specifies the area of the page containing imageable 
content that is to be fit within the imageable area 
when printing or viewing. Contains a list of four 
coordinate values (ContentOriginX, ContentOriginY, 
ContentWidth, ContentHeight), expressed as 
comma-separated real numbers. Specifying a value 
is RECOMMENDED [S3.1]. If omitted, the default 
value is (0,0,Width,Height). 
BleedBox   
ST_BleedBox  
   
   
   
Specifies the union of the ContentBox and the 
bounding box of all graphical content intended to 
appear on the final printed and trimmed page. 
Contains a list of four coordinate values 
(BleedOriginX, BleedOriginY, BleedWidth, 
BleedHeight), expressed as comma-separated real 
numbers. If omitted, the default value is 
(0,0,Width,Height). 

10. Documents 
ECMA-388 
52 
First Edition, June 2009 
xml:lang   
 
required      
   
Specifies the default language used for the current 
element and for any child or descendant elements. 
The language is specified according to RFC 3066. 
Name   
ST_Name  
   
   
   
Contains a string value that identifies the current 
element as a named, addressable point in the 
document for the purpose of hyperlinking. 
annotation Contains markup that describes the rendering of a single page of content. 
The <FixedPage> element contains the contents of a page and is the root element of a 
FixedPage part. The fixed page contains the elements that together form the basis for all 
markings rendered on the page: <Paths>, <Glyphs>, and the optional <Canvas> grouping 
element.  
The fixed page MUST specify a height, width, and default language [M3.22].  
The coordinate space of the fixed page is composable, meaning that the marking effects of its 
child and descendant elements are affected by the coordinate space of the fixed page.  
Example 10–5. Fixed page markup 
<FixedPage Height="1056" Width="816" xml:lang="en-US" 
   xmlns="http://schemas.openxps.org/oxps/v1.0"> 
   <Glyphs  
      OriginX="96" 
      OriginY="96" 
      UnicodeString="This is Page 1!" 
      FontUri="../Resources/Fonts/Times.TTF" 
      FontRenderingEmSize="16" /> 
</FixedPage> 
end example] 
10.3.1 BleedBox Attribute 
The BleedBox attribute defines the union of the ContentBox and the bounding box of all 
graphical content intended to appear on the final printed and trimmed page. Workflow artifacts 
such as crop marks are not normally intended to appear in the final page and do not play a part 
in defining the size or position of the BleedBox. 
The bleed box is expressed as four comma-separated, real-number coordinate values that 
correspond to BleedOriginX, BleedOriginY, BleedWidth, BleedHeight. These values are specified 
in units of 1/96". 
Bleed boxes that do not satisfy the following conditions are invalid and SHOULD be ignored in 
favor of the default bleed box [S3.2]:  
• The BleedBox BleedOriginX value MUST be less than or equal to 0 [M3.7]. 
• The BleedBox BleedOriginY value MUST be less than or equal to 0 [M3.8]. 
• The BleedBox BleedWidth value MUST be greater than or equal to the fixed page Width 
attribute value plus the absolute value of the Bleedbox BleedOriginX value [M3.9]. 

ECMA-388 
10. Documents 
 
 First Edition, June 2009 
53 
• The BleedBox BleedHeight value MUST be greater than or equal to the fixed page Height 
attribute value plus the absolute value of the BleedBox BleedOriginY value [M3.10]. 
If the BleedBox attribute is omitted, the default value is “0,0,Width,Height”.  
10.3.2 ContentBox Attribute 
The ContentBox attribute specifies the area of the page that contains imageable content that 
must fit in the imageable area when printing or viewing. Specifying this attribute is 
RECOMMENDED [S3.1]. The content box is expressed as four comma-separated, real-number 
coordinate values that correspond to ContentOriginX, ContentOriginY, ContentWidth, 
ContentHeight. These values are specified in units of 1/96".  
Content boxes that do not satisfy the following conditions are invalid and SHOULD be ignored in 
favor of the default content box [S3.3]: 
• The ContentBox ContentOriginX value MUST be greater than or equal to 0 and less than 
the fixed page Width attribute value [M3.11]. 
• The ContentBox ContentOriginY value MUST be greater than or equal to 0 and less than 
the fixed page Height attribute value [M3.12]. 
• The ContentBox ContentWidth value MUST be less than or equal to the difference between 
the fixed page Width attribute value and the ContentBox ContentOriginX value [M3.13]. 
• The ContentBox ContentHeight value MUST be less than or equal to the difference 
between the fixed page Height attribute value and the ContentBox ContentOriginY value 
[M3.14]. 
If the ContentBox attribute is omitted, the default value is “0,0,Width,Height”.  
10.3.3 Media Orientation and Scaling 
When rendering a FixedPage for printing, consumers are responsible for mapping from 
FixedPage content to the physical media. Differences in device capabilities and device 
configuration result in a large number of permutations for the mapping.  The positioning, 
scaling, orientation, and clipping of FixedPage content when mapping to physical media MAY be 
controlled by settings provided in the PrintTicket [O3.1].  In the absence of settings provided in 
the PrintTicket, the mapping of FixedPage content to the physical media is implementation-
defined. 
By default, consumers SHOULD clip to the FixedPage Width and Height [S3.5]; consumers MAY 
provide implementation-defined mechanisms to select alternative clipping strategies [O3.2].  
[Note: For example, an implementation can provide a PrintTicket setting to allow control of 
consumer clipping of FixedPage content to one of the defined bounding boxes.  end note] 

10. Documents 
ECMA-388 
54 
First Edition, June 2009 
10.4 <Canvas> Element 
element Canvas 
diagram 
 
attributes Name   
Type   
Use   Default   Fixed   
Annotation 
RenderTransform   
ST_RscRefMatrix  
   
   
   
Establishes a new coordinate 
frame for the child and 
descendant elements of the 
canvas, such as another 
canvas. Also affects clip and 
opacity mask. 
Clip   
ST_RscRefAbbrGeomF     
   
   
Limits the rendered region of 
the element. 
Opacity   
ST_ZeroOne  
   
1.0   
   
Defines the uniform 

ECMA-388 
10. Documents 
 
 First Edition, June 2009 
55 
transparency of the canvas. 
Values range from 0 (fully 
transparent) to 1 (fully 
opaque), inclusive. Values 
outside of this range are 
invalid. 
OpacityMask   
ST_RscRef  
   
   
   
Specifies a mask of alpha 
values that is applied to the 
canvas in the same fashion 
as the Opacity attribute, but 
allowing different alpha 
values for different areas of 
the element. 
Name   
ST_Name  
   
   
   
Contains a string value that 
identifies the current element 
as a named, addressable 
point in the document for the 
purpose of hyperlinking. 
RenderOptions.EdgeMode   
ST_EdgeMode  
   
   
  Aliased Controls how edges of paths 
within the canvas are 
rendered. The only valid 
value is Aliased. Omitting this 
attribute causes the edges to 
be rendered in the 
consumer's default manner. 
FixedPage.NavigateUri   
xs:anyURI 
   
   
   
Associates a hyperlink URI 
with the element. May be a 
relative reference or a URI 
that addresses a resource 
that is internal to or external 
to the package. 
xml:lang   
 
   
   
   
Specifies the default 
language used for the current 
element and for any child or 
descendant elements. The 
language is specified 
according to RFC 3066. 
x:Key   
 
   
   
   
Specifies a name for a 
resource in a resource 
dictionary. x:Key MUST be 
present when the current 
element is defined in a 
resource dictionary. x:Key 
MUST NOT be specified 
outside of a resource 
dictionary [M3.20]. 

10. Documents 
ECMA-388 
56 
First Edition, June 2009 
AutomationProperties.Name   
xs:string 
   
   
   
A brief description of the 
<Canvas> contents for 
accessibility purposes, 
particularly if filled with a set 
of vector graphics and text 
elements intended to 
comprise a single vector 
graphic. 
AutomationProperties.HelpText   xs:string 
   
   
   
A detailed description of the 
<Canvas> contents for 
accessibility purposes, 
particularly if filled with a set 
of graphics and text elements 
intended to comprise a single 
vector graphic. 
annotation Groups <FixedPage> descendant elements together. 
The <Canvas> element groups elements together. [Example: <Glyphs> and <Path> elements 
can be grouped in a canvas in order to be identified as a unit (as a hyperlink destination) or to 
apply a composed property value to each child and ancestor element. end example] 
Some properties of the <Canvas> element are composable and affect the rendering of child 
elements. This includes the coordinate space of the canvas. For details, see §14. 
The RenderOptions.EdgeMode property can be set on the <Canvas> element to instruct anti-
aliasing consumers to render the contents of the <Canvas> and all child and descendant 
elements without performing anti-aliasing, including child brushes and their contents as well as 
contents included via resource dictionary references. 
Example 10–6. Canvas composition 
The following markup describes a path that provides the background. On top of this is rendered 
a canvas with the composable Opacity and RenderTransform properties specified.  
The path inside the canvas has the same path geometry as the background path, but since it is 
composing the <Canvas> element’s RenderTransform property, it is rendered differently. The 
path is partially transparent due to the composable Opacity property of the parent <Canvas> 
element.  
The <Glyphs> element inside the canvas specifies its own RenderTransform property. This 
property is composed with the <Canvas> element’s RenderTransform property, such that the 
coordinate space of the <Glyphs> element is transformed within the context of the coordinate 
space transformed by the <Canvas> element. 
<Path> 
   <Path.Fill> 
      <SolidColorBrush Color="#808080" /> 
   </Path.Fill> 
   <Path.Data> 
      <PathGeometry> 
         <PathFigure StartPoint="0,0" IsClosed="true"> 

ECMA-388 
10. Documents 
 
 First Edition, June 2009 
57 
            <PolyLineSegment Points="200,0 200,100 0,100 0,0" /> 
         </PathFigure> 
      </PathGeometry> 
   </Path.Data> 
</Path> 
 
<Canvas Opacity="0.5" RenderTransform="0.75,0,0,0.75,25,46"> 
   <Path> 
      <Path.Fill> 
         <SolidColorBrush Color="#0000FF" /> 
      </Path.Fill> 
      <Path.Data> 
         <PathGeometry> 
            <PathFigure StartPoint="0,0" IsClosed="true"> 
               <PolyLineSegment Points="200,0 200,100 0,100 0,0" /> 
            </PathFigure> 
         </PathGeometry> 
      </Path.Data> 
   </Path> 
   <Glyphs  
      FontUri="../Resources/Fonts/times.ttf" 
      OriginX="1"  
      OriginY="100"  
      UnicodeString="EXAMPLE"  
      FontRenderingEmSize="42" 
      RenderTransform="1.0,0,0,2.0,0,-100"> 
      <Glyphs.Fill> 
         <SolidColorBrush Color="#FFFFFF" /> 
      </Glyphs.Fill> 
   </Glyphs> 
</Canvas> 
This markup is rendered as follows: 
  
end example] 
10.5 <Path> Element 
The <Path> element specifies a geometry that can be filled with a brush. For more information, 
see §11.1. 

10. Documents 
ECMA-388 
58 
First Edition, June 2009 
10.6 <Glyphs> Element 
The <Glyphs> element is used to represent a run of uniformly-formatted text from a single 
font. The <Glyphs> element provides information for accurate rendering and supports search 
and selection features in OpenXPS Document consumers. For more information, see §12.1.  
 

ECMA-388 
11. Graphics 
 
 First Edition, June 2009 
59 
11. Graphics 
Vector graphics are created using the <Path> element. A full set of properties is available to 
describe the visual characteristics of the graphic. These characteristics include the fill, opacity, 
clipping, rendering transformation, and various stroke details including thickness, fill, line join 
style, line miter limit, line cap style, dash style, and dash cap style. The description of the 
geometric area of the path (the geometry) is described by the Data property. Raster images are 
included in fixed page markup by specifying a <Path> element filled with an <ImageBrush>.  

11. Graphics 
ECMA-388 
60 
First Edition, June 2009 
11.1 <Path> Element 
element Path 
diagram 
 

ECMA-388 
11. Graphics 
 
 First Edition, June 2009 
61 
attributes Name   
Type   
Use   Default   Fixed   Annotation 
Data   
ST_RscRefAbbrGeomF     
   
   
Describes the geometry of the 
path. 
Fill   
ST_RscRefColor  
   
   
   
Describes the brush used to 
paint the geometry specified by 
the Data property of the path. 
RenderTransform   
ST_RscRefMatrix  
   
   
   
Establishes a new coordinate 
frame for all attributes of the 
path and for all child elements 
of the path, such as the 
geometry defined by the 
<Path.Data> property element. 
Clip   
ST_RscRefAbbrGeomF     
   
   
Limits the rendered region of 
the element. 
Opacity   
ST_ZeroOne  
   
1.0   
   
Defines the uniform 
transparency of the path 
element. Values range from 0 
(fully transparent) to 1 (fully 
opaque), inclusive. Values 
outside of this range are 
invalid. 
OpacityMask   
ST_RscRef  
   
   
   
Specifies a mask of alpha 
values that is applied to the 
path in the same fashion as the 
Opacity attribute, but allowing 
different alpha values for 
different areas of the element. 
Stroke   
ST_RscRefColor  
   
   
   
Specifies the brush used to 
draw the stroke. 
StrokeDashArray   
ST_EvenArrayPos  
   
   
   
Specifies the length of dashes 
and gaps of the outline stroke. 
These values are specified as 
multiples of the stroke 
thickness as a space-separated 
list with an even number of 
non-negative values. When a 
stroke is drawn, the dashes 
and gaps specified by these 
values are repeated to cover 
the length of the stroke. If this 
attribute is omitted, the stroke 
is drawn solid, without any 

11. Graphics 
ECMA-388 
62 
First Edition, June 2009 
gaps. 
StrokeDashCap   
ST_DashCap  
   
Flat   
   
Specifies how the ends of each 
dash are drawn. Valid values 
are Flat, Round, Square, and 
Triangle. 
StrokeDashOffset   
ST_Double  
   
0.0   
   
Adjusts the start point for 
repeating the dash array 
pattern. If this value is 
omitted, the dash array aligns 
with the origin of the stroke. 
Values are specified as 
multiples of the stroke 
thickness. 
StrokeEndLineCap   
ST_LineCap  
   
Flat   
   
Defines the shape of the end of 
the last dash in a stroke. Valid 
values are Flat, Square, Round, 
and Triangle. 
StrokeStartLineCap   
ST_LineCap  
   
Flat   
   
Defines the shape of the 
beginning of the first dash in a 
stroke. Valid values are Flat, 
Square, Round, and Triangle. 
StrokeLineJoin   
ST_LineJoin  
   
Miter   
   
Specifies how a stroke is drawn 
at a corner of a path. Valid 
values are Miter, Bevel, and 
Round. If Miter is selected, the 
value of StrokeMiterLimit is 
used in drawing the stroke. 
StrokeMiterLimit   
ST_GEOne  
   
10.0   
   
The ratio between the 
maximum miter length and half 
of the stroke thickness. This 
value is significant only if the 
StrokeLineJoin attribute 
specifies Miter. 
StrokeThickness   
ST_GEZero  
   
1.0   
   
Specifies the thickness of a 
stroke, in units of the effective 
coordinate space (includes the 
path's render transform). The 
stroke is drawn on top of the 
boundary of the geometry 
specified by the <Path> 
element’s Data property. Half 
of the StrokeThickness extends 
outside of the geometry 
specified by the Data property 

ECMA-388 
11. Graphics 
 
 First Edition, June 2009 
63 
and the other half extends 
inside of the geometry. 
Name   
ST_Name  
   
   
   
Contains a string value that 
identifies the current element 
as a named, addressable point 
in the document for the 
purpose of hyperlinking. 
FixedPage.NavigateUri   
xs:anyURI 
   
   
   
Associates a hyperlink URI with 
the element. Can be a relative 
reference or a URI that 
addresses a resource that is 
internal to or external to the 
package. 
xml:lang   
 
   
   
   
Specifies the default language 
used for the current element 
and for any child or descendant 
elements. The language is 
specified according to RFC 
3066. 
x:Key   
 
   
   
   
Specifies a name for a resource 
in a resource dictionary. x:Key 
MUST be present when the 
current element is defined in a 
resource dictionary. x:Key 
MUST NOT be specified outside 
of a resource dictionary [M4.1]. 
AutomationProperties.Name   
xs:string 
   
   
   
A brief description of the 
<Path> for accessibility 
purposes, particularly if filled 
with an <ImageBrush>. 
AutomationProperties.HelpText   xs:string 
   
   
   
A detailed description of the 
<Path> for accessibility 
purposes, particularly if filled 
with an <ImageBrush>. 
SnapsToDevicePixels   
ST_Boolean  
   
   
   
On Anti-aliasing consumers 
controls if control points snap 
to the nearest device pixels. 
Valid values are ‘false’ and 
‘true’. Consumers MAY ignore 
this attribute [O4.1]. 
annotation Defines a single graphical effect to be rendered to the page. It paints a geometry with a brush and draws a 
stroke around it. 

11. Graphics 
ECMA-388 
64 
First Edition, June 2009 
The <Path> element is the sole means of adding vector graphics and images to a fixed page. It 
defines a single vector graphic to be rendered on a page. Some properties of the <Path> 
element are composable, meaning that the markings rendered to the page are determined by a 
combination of the property and all of the like-named properties of its parent and ancestor 
elements.  
The Data property contains a geometric description of the area on which to apply a given effect. 
This description can take one of two forms: verbose or abbreviated. In the verbose form, the 
geometry is described in the <Path.Data> property element using the elements described 
in §11.2. In abbreviated form, it is described using abbreviated syntax in the Data attribute. For 
more information, see §11.2.3. 
The <Path.Fill> property element describes the appearance of the area specified by the Data 
property. It contains a brush (see §13) that is used to fill the described areas. These can 
include a solid color, an image, a gradient, or a vector drawing pattern. 
The <Path.Stroke> property element describes the appearance of the borders of the shape 
specified by the Data property. It also contains a <Brush> element, which is used to fill the 
borders according to the stroke properties (such as StrokeThickness). See §18 for detailed 
rendering rules of strokes, line caps, and dash caps. 
If neither Stroke nor Fill properties are specified, the <Path> element has no visible effect. 
The transparency of the rendered <Path> element is controlled by the Opacity attribute. More 
complex transparency descriptions can be defined using the OpacityMask attribute to control the 
transparency of the brushes described by the Fill and Stroke properties. 
Consumers or viewers that perform anti-aliasing MAY “snap” those control points of the path 
that are situated on the path bounding box to whole device pixels if the ignorable 
SnapsToDevicePixels attribute is specified as true [O4.1]. 
Finally, the path can be cropped by specifying a clipping region in the Clip property, which 
describes the geometric area to be preserved. The remainder is not rendered. See §11.2.1 for 
how geometries are defined. 
For details on the Clip, Opacity, OpacityMask, and RenderTransform properties, see §14. 
11.1.1 <Path.Data> Element 
element Path.Data 
diagram 
 
annotation Describes the geometry of the path. 
The <Path.Data> property element describes the geometric area of a path. It contains a single 
geometry. 
Example 11–1. <Path.Data> usage 
<Path Stroke="#000000" StrokeThickness="1"> 
   <Path.Data> 
      <PathGeometry> 

ECMA-388 
11. Graphics 
 
 First Edition, June 2009 
65 
         <PathFigure StartPoint="50,50" IsClosed="true"> 
            <PolyLineSegment Points="250,50 150,250" /> 
         </PathFigure> 
      </PathGeometry> 
   </Path.Data> 
</Path> 
This markup produces the following results: 
  
end example] 
11.1.2 <Path.Fill> Element 
element Path.Fill 
diagram 
annotation Describes the brush used to paint the geometry specified by the Data property of the path. 
The <Path.Fill> property element specifies the brush that is used to fill the region described by 
the Data property. This can be a solid color, an image, a gradient, or a vector drawing pattern. 

11. Graphics 
ECMA-388 
66 
First Edition, June 2009 
Example 11–2. <Path.Fill> usage 
In the following markup, the geometry is filled with a solid color: 
<Path> 
   <Path.Fill> 
      <SolidColorBrush Color="#0000FF" /> 
   </Path.Fill> 
   <Path.Data> 
      <PathGeometry> 
         <PathFigure StartPoint="10,10" IsClosed="true"> 
            <PolyLineSegment Points="50,200 100,40 150,200  
               200,10 100,105" /> 
         </PathFigure> 
      </PathGeometry> 
   </Path.Data> 
</Path> 
This markup produces the following result: 
  
end example] 
11.1.3 <Path.Stroke> Element 
element Path.Stroke 
diagram 
 
annotation Specifies the brush used to draw the stroke. 

ECMA-388 
11. Graphics 
 
 First Edition, June 2009 
67 
The <Path.Stroke> property element describes the border of the path’s geometry. 
<Path.Stroke> contains a brush. Only those segments of the path figure in the <Path.Data> 
element that set the IsStroked attribute to true (the default value if omitted) are stroked. If 
IsClosed is set to true, an extra segment will be stroked, connecting the last point in the path 
figure with the first point in the path figure.  
The <Path.Stroke> property element is then used to describe the appearance of the borders of 
the shape defined by the Data property. It also contains a brush, which is used to fill the 
borders according to the stroke properties (such as StrokeThickness). 
For more information, see §18.6. 
Example 11–3. <Path.Stroke> usage 
The following <Path.Stroke> element uses a gradient brush to fill the border of a box:  
<Path StrokeThickness="10" Data="M 20,20 L 170,20 L 170,170 L 20,170 Z"> 
   <Path.Stroke> 
      <LinearGradientBrush MappingMode="Absolute"  
         StartPoint="0,0" EndPoint="0,5" SpreadMethod="Reflect"> 
         <LinearGradientBrush.GradientStops> 
            <GradientStop Color="#9999FF" Offset="0.0" /> 
            <GradientStop Color="#333366" Offset="1.0" /> 
         </LinearGradientBrush.GradientStops> 
      </LinearGradientBrush> 
   </Path.Stroke> 
</Path> 
This markup produces the following results: 
  
end example] 
11.2 Geometries and Figures 
Geometries are used to build visual representations of geometric shapes.  
The smallest atomic unit in a geometry is a segment. Segments can be lines or curves. One or 
more segments are combined into a path figure definition. A path figure is a single shape 
comprised of continuous segments. One or more path figures collectively define an entire path 
geometry. A path geometry MAY define the fill algorithm to be used on the component path 
figures [O4.2].  

11. Graphics 
ECMA-388 
68 
First Edition, June 2009 
A single path geometry can be used in the Data property of the <Path> element to describe its 
overall geometry. A path geometry can also be used in the Clip property of the <Canvas>, 
<Path>, or <Glyphs> elements to describe a clipping region. 
11.2.1 Geometries 
A <PathGeometry> element constitutes a complete geometry definition.  
11.2.1.1 <PathGeometry> Element 
element PathGeometry 
diagram 
attributes Name   
Type   
Use   Default   
Fixed   Annotation 
Figures   
ST_AbbrGeom  
   
   
   
Describes the geometry of the path. 
FillRule   
ST_FillRule  
   
EvenOdd      
Specifies how the intersecting areas of geometric 
shapes are combined to form a region. Valid values are 
EvenOdd and NonZero. 
Transform   ST_RscRefMatrix     
   
   
Specifies the local matrix transformation that is applied 
to all child and descendant elements of the path 
geometry before it is used for filling, clipping, or 
stroking. 
x:Key   
 
   
   
   
Specifies a name for a resource in a resource 
dictionary. x:Key MUST be present when the current 
element is defined in a resource dictionary. x:Key MUST 
NOT be specified outside of a resource dictionary 
[M4.2]. 
annotation Contains a set of <PathFigure> elements. 
A <PathGeometry> element contains a set of path figures specified either with the Figures 
attribute or with a child <PathFigure> element. Producers MUST NOT specify the path figures of 
a geometry with both the Figures attribute and a child <PathFigure> element [M4.3].  

ECMA-388 
11. Graphics 
 
 First Edition, June 2009 
69 
The union of the path figures defines the interior of the path geometry according to the FillRule 
attribute as described in §11.2.1.2. 
Example 11–4. <PathGeometry> usage 
<Path Stroke="#000000"> 
   <Path.Data> 
      <PathGeometry> 
         <PathFigure StartPoint="25,75"> 
            <PolyLineSegment Points="150,75 50,75" /> 
         </PathFigure> 
         <PathFigure StartPoint="50,75" IsClosed="true"> 
            <ArcSegment  
               Size="60,60"  
               RotationAngle="0"  
               IsLargeArc="true"  
               SweepDirection="Counterclockwise"  
               Point="125,75" /> 
         </PathFigure> 
         <PathFigure StartPoint="50,75" IsClosed="true"> 
            <PolyLineSegment Points="25,25 150,25 125,75" /> 
         </PathFigure> 
      </PathGeometry> 
   </Path.Data> 
</Path> 
This markup produces the following results: 
  
end example] 
11.2.1.2 FillRule Attribute 
The FillRule attribute specifies a fill algorithm. The fillable area of a geometry is defined by 
taking all of the contained path figures and applying the fill algorithm to determine the enclosed 
area. Fill algorithms determine how the intersecting areas of geometric shapes are combined to 
form a region. 
11.2.1.2.1 EvenOdd Fill Algorithm 
This rule determines the “insideness” of a point on the canvas by drawing a ray from the point 
to infinity in any direction and counting the number of segments from the given shape that the 
ray crosses. If this number is odd, the point is inside; if it is even, the point is outside. This is 
the default rule used throughout OpenXPS Document markup. 

11. Graphics 
ECMA-388 
70 
First Edition, June 2009 
Figure 11–1. Fill using EvenOdd algorithm 
 
11.2.1.2.2 NonZero Fill Algorithm 
This rule determines the “insideness” of a point on the canvas by drawing a ray from the point 
to infinity in any direction and then examining the places where a segment of the shape crosses 
the ray. Starting with a count of zero, add one each time a segment crosses the ray from left to 
right and subtract one each time a path segment crosses the ray from right to left. After 
counting the crossings, if the result is zero then the point is outside the path; otherwise, it is 
inside. 
Figure 11–2. Fill using NonZero algorithm 
 
11.2.1.3 Figures Attribute 
The <PathGeometry> element’s Figures attribute can be used to describe the path figures the 
geometry contains using abbreviated syntax (see §11.2.3) with the exception that the FillRule 
command MUST NOT be used [M4.4]. 
11.2.2 Figures 
11.2.2.1 <PathFigure> Element 
element PathFigure 
diagram 
 
attributes Name   
Type   
Use   
Default   Fixed   Annotation 

ECMA-388 
11. Graphics 
 
 First Edition, June 2009 
71 
IsClosed   ST_Boolean     
false   
   
Specifies whether the path is closed. If set to true, the 
stroke is drawn "closed," that is, the last point in the last 
segment of the path figure is connected with the point 
specified in the StartPoint attribute, otherwise the stroke 
is drawn "open," and the last point is not connected to the 
start point. Only applicable if the path figure is used in a 
<Path> element that specifies a stroke. 
StartPoint   ST_Point  
required      
   
Specifies the starting point for the first segment of the 
path figure. 
IsFilled   
ST_Boolean     
true   
   
Specifies whether the path figure is used in computing the 
area of the containing path geometry. Can be true or 
false. When set to false, the path figure is considered only 
for stroking. 
annotation Specifies a set of one or more segment elements defining a closed region. 
A <PathFigure> element is composed of a set of one or more line or curve segments. The 
segment elements define the shape of the path figure. The initial point of the first segment 
element is specified as the StartPoint attribute of the path figure. The last point of each segment 
element is the first point of the following segment element. 
Segment elements are: 
• <ArcSegment> 
• <PolyBezierSegment> 
• <PolyLineSegment> 
• <PolyQuadraticBezierSegment> 
Line segments and curve segments SHOULD NOT be specified as zero-length [S4.1]. If they are 
specified as zero-length, they are not drawn. For full details of the behavior in cases such as 
those involving line caps, see §18. 

11. Graphics 
ECMA-388 
72 
First Edition, June 2009 
11.2.2.2 <ArcSegment> Element 
element ArcSegment 
diagram 
 
attributes Name   
Type   
Use   
Default   Fixed   Annotation 
Point   
ST_Point  
required      
   
Specifies the endpoint of the elliptical arc. 
Size   
ST_PointGE0  
required      
   
Specifies the x and y radius of the elliptical 
arc as an x,y pair. 
RotationAngle   ST_Double  
required      
   
Indicates how the ellipse is rotated relative 
to the current coordinate system. 
IsLargeArc   
ST_Boolean  
required      
   
Determines whether the arc is drawn with a 
sweep of 180 or greater. Can be true or 
false. 
SweepDirection   ST_SweepDirection  required      
   
Specifies the direction in which the arc is 
drawn. Valid values are Clockwise and 
Counterclockwise. 
IsStroked   
ST_Boolean  
   
true   
   
Specifies whether the stroke for this segment 
of the path is drawn. Can be true or false. 
annotation Represents an elliptical arc between two points. 
The <ArcSegment> element describes an elliptical arc. It is geometrically defined by the 
intersection of two ellipses that have the same x radius and y radius. The ellipses intersect at 
the starting and ending points of the arc. 
Table 11–1. Arc segment definition 
Term 
Description 
Starting Point 
Implicitly defined by the previous point in the path figure 
definition. 

ECMA-388 
11. Graphics 
 
 First Edition, June 2009 
73 
Ending Point 
Specified by the Point attribute. 
Arc Size 
Defined by the Size attribute. This value consists of the comma-
delimited x and y radii of the ellipses that will be used to define the 
arc. [Example: “100,50” end example] 
Rotation Angle 
Specified by the RotationAngle attribute, this determines how the 
ellipses defining the arc are rotated with respect to the x axis, in 
degrees. Positive values are clockwise and negative values are 
counter-clockwise. 
Large Arc Flag 
Specified by the IsLargeArc attribute, this flag indicates which of 
the arc pairs created by the intersecting ellipses to use. When the 
flag is true, it uses the larger arc (arc length >= 180°), and when 
it is false it uses the smaller arcs (arc length < 180°). 
Sweep Direction 
Specified by the SweepDirection attribute, this flag determines 
which of the two possible arcs (selected by the Large Arc Flag) is 
used. Beginning at the starting point, one arc proceeds in the 
positive (clockwise) direction, while the other proceeds in the 
negative (counter-clockwise) direction.  

11. Graphics 
ECMA-388 
74 
First Edition, June 2009 
Figure 11–3. Arc choice A  
IsLargeArc = false; SweepDirection = Counterclockwise 
 
Figure 11–4. Arc choice B 
IsLargeArc = false; SweepDirection = Clockwise 
 
Figure 11–5. Arc choice C 
IsLargeArc = true; SweepDirection = Counterclockwise 
 
Figure 11–6. Arc choice D 
IsLargeArc = true; SweepDirection = Clockwise 
 
Example 11–5. <ArcSegment> usage 
<Path Stroke="#000000" StrokeThickness="1"> 
   <Path.Data> 

ECMA-388 
11. Graphics 
 
 First Edition, June 2009 
75 
      <PathGeometry> 
         <PathFigure StartPoint="10,10"> 
            <ArcSegment  
               Size="100,50"  
               RotationAngle="45"  
               IsLargeArc="true"  
               SweepDirection="Counterclockwise"  
               Point="200,100" /> 
         </PathFigure> 
      </PathGeometry> 
   </Path.Data> 
</Path> 
This markup generates the following arc: 
  
end example] 
11.2.2.2.1 Out-of-Range Attributes 
The following guidelines are followed when encountering incompatible attribute values on an 
<ArcSegment> element: 
• If the arc is impossible to render given the combination of radii specified in the Size 
attribute and the angle of rotation specified in the RotationAngle attribute, the ellipses are 
scaled equally until there is exactly one solution that satisfies the arc requirements to 
pass through the specified Point attribute. 
• If the Point attribute is the same as the previous point in the path figure, the segment is 
omitted. 
• If either the x or y radius in the Size attribute is 0, the segment is rendered as a poly line 
segment with a single line segment to the x,y coordinates specified by the Point 
attribute. 
• The x or y radius in the Size attribute MUST NOT be negative [M4.5]. 
• If the RotationAngle value is greater than 360, it is replaced by the value of the 
RotationAngle modulo 360. If it is less than 0, it is replaced with a value normalized to the 
range 0–360. 

11. Graphics 
ECMA-388 
76 
First Edition, June 2009 
11.2.2.3 <PolyBezierSegment> Element 
element PolyBezierSegment 
diagram 
 
attributes Name   
Type   
Use   
Default   Fixed   Annotation 
Points   
ST_PointsM3  required      
   
Specifies control points for multiple Bézier segments. 
Coordinate values within each pair are comma-separated 
and additional whitespace can appear. Coordinate pairs 
are separated from other coordinate pairs by whitespace. 
IsStroked   ST_Boolean     
true   
   
Specifies whether the stroke for this segment of the path 
is drawn. Can be true or false. 
annotation A series of Bézier segments. 
The <PolyBezierSegment> element describes a set of cubic Bézier curves. Bézier curves are 
drawn from the previous point in the path figure or the previous Bézier curve in the segment 
and terminate at the third point (x3n,y3n) in the Points attribute (where n is the curve being 
drawn). The tangents and curvature of each Bézier curve are controlled by the first two control 
points (x3n-2,y3n-2 and x3n-1,y3n-1) in the Points attribute. The Points attribute contains a multiple 
of three whitespace-delimited pairs of comma-delimited x,y values. 
Example 11–6. <PolyBezierSegment> usage 
<Path Stroke="#000000" StrokeThickness="1"> 
   <Path.Data> 
      <PathGeometry> 
         <PathFigure StartPoint="20,80"> 
            <PolyBezierSegment Points="70,0 120,160 170,80 120,0 70,160  
               20,80" /> 
         </PathFigure> 
      </PathGeometry> 
   </Path.Data> 
</Path> 

ECMA-388 
11. Graphics 
 
 First Edition, June 2009 
77 
This markup generates the following results: 
  
end example] 
11.2.2.4 <PolyLineSegment> Element 
element PolyLineSegment 
diagram 
attributes Name   
Type   
Use   
Default   Fixed   Annotation 
Points   
ST_Points  
required      
   
Specifies a set of coordinates for the multiple segments 
that define the poly line segment. Coordinate values 
within each pair are comma-separated and additional 
whitespace can appear. Coordinate pairs are separated 
from other coordinate pairs by whitespace. 
IsStroked   ST_Boolean     
true   
   
Specifies whether the stroke for this segment of the path 
is drawn. Can be true or false. 
annotation Specifies a set of points between which lines are drawn. 
The <PolyLineSegment> element describes a polygonal drawing containing an arbitrary number 
of individual vertices. The Points attribute defines the vertices and contains whitespace-
delimited pairs of comma-delimited x,y values.  
Example 11–7. <PolyLineSegment> usage 
<Path Stroke="#000000" StrokeThickness="1"> 
   <Path.Data> 
      <PathGeometry> 
         <PathFigure StartPoint="10,10"> 
            <PolyLineSegment Points="140,10 140,55 95,55 65,85 95,115  

11. Graphics 
ECMA-388 
78 
First Edition, June 2009 
               140,115 140,160 10,160" /> 
         </PathFigure> 
      </PathGeometry> 
   </Path.Data> 
</Path> 
This markup produces the following figure: 
  
end example] 
11.2.2.5 <PolyQuadraticBezierSegment> Element 
element PolyQuadraticBezierSegment 
diagram 
 
attributes Name   
Type   
Use   
Default   Fixed   Annotation 
Points   
ST_PointsM2  required      
   
Specifies control points for multiple quadratic Bézier 
segments. Coordinate values within each pair are 
comma-separated and additional whitespace can appear. 
Coordinate pairs are separated from other coordinate 
pairs by whitespace. 
IsStroked   ST_Boolean     
true   
   
Specifies whether the stroke for this segment of the path 
is drawn. Can be true or false. 
annotation A series of quadratic Bézier segments. 
The <PolyQuadraticBezierSegment> element describes a set of quadratic Bézier curves from 
the previous point in the path figure through a set of vertices, using specified control points. 
The Points attribute defines an off-curve control point (x2n-1,y2n-1) followed by the end point 
(x2n,y2n) for each quadratic Bézier curve (where n represents the quadratic Bézier curve). The 

ECMA-388 
11. Graphics 
 
 First Edition, June 2009 
79 
Points attribute contains a multiple of two whitespace-delimited pairs of comma-delimited x,y 
values. 
Example 11–8. <PolyQuadraticBezierSegment> usage 
<Path Stroke="#000000" StrokeThickness="1"> 
   <Path.Data> 
      <PathGeometry> 
         <PathFigure StartPoint="10,10"> 
            <PolyQuadraticBezierSegment Points="50,200 100,40 150,200  
               200,10" /> 
         </PathFigure> 
      </PathGeometry> 
   </Path.Data> 
</Path> 
This markup produces the following curve: 
  
end example] 
11.2.2.6 Closed <PathFigure> 
If the IsClosed attribute of the <PathFigure> element is set to true, a straight line is drawn from 
the last point in the last segment of the <PathFigure> element to the StartPoint attribute of the 
<PathFigure> element. If the IsClosed attribute is omitted, its default setting is “false”. 
<PathFigure> elements used in filled <Path> elements or as Clip attributes are implicitly 
closed.  
Example 11–9. Closed <PathFigure> usage 
The following markup shows the arc segment as shown in Example 11–5 with the IsClosed 
attribute of the <PathFigure> element set to true. 
<Path Stroke="#000000" StrokeThickness="1"> 
   <Path.Data> 
      <PathGeometry> 
         <PathFigure StartPoint="10,10" IsClosed="true"> 
            <ArcSegment  
               Size="100,50"  
               RotationAngle="45"  
               IsLargeArc="true"  
               SweepDirection="Counterclockwise"  
               Point="200,100" /> 
         </PathFigure> 
      </PathGeometry> 
   </Path.Data> 
</Path> 

11. Graphics 
ECMA-388 
80 
First Edition, June 2009 
This markup generates the following figure: 
  
end example] 
11.2.3 Abbreviated Geometry Syntax 
Abbreviated geometry syntax MAY be used to specify a geometry of one or more figures 
comprised of multiple segments [O4.3]. A geometry is specified with an optional FillRule 
command (not allowed in the Figures attribute of a <PathGeometry> element) followed by one 
or more figure definitions. Figure definitions are specified with a Move command, a set of one 
or more drawing commands to create segments, and an optional Close command to create a 
closing segment. The behavior of a degenerate geometry with no drawing commands is 
implementation-defined.  Drawing commands include: 
• Line 
• Horizontal Line 
• Vertical Line 
• Cubic Bézier Curve 
• Quadratic Bézier Curve 
• Smooth Cubic Bézier Curve 
• Elliptical Arc 
A command is represented by a single letter and is followed by zero or more whitespace 
characters, which are followed by command parameters. Parameters are whitespace-delimited. 
Points are specified as a comma-delimited pair with zero or more whitespace characters. 
Uppercase letters denote absolute values and lowercase letters denote relative values. When 
relative coordinate values are specified, each coordinate pair expresses an offset relative to the 
current endpoint (the previous command’s terminating coordinate pair). If a relative value is 
used for the first Move command, the current endpoint is, by definition, 0,0. 
If a relative value is used following a Close command, the current endpoint is the first point of 
the previous figure. 
If entering more than one drawing command of the same type sequentially, the duplicate 
command entry MAY be omitted [O4.4]. [Example: “L 100,200 300,400” is equivalent to “L 
100,200 L 300,400”. end example] The current endpoint is determined as though each 
command appeared individually. 
Values specifying coordinates can be real numbers. 

ECMA-388 
11. Graphics 
 
 First Edition, June 2009 
81 
For more information, see §C. 
Table 11–2. Commands 
Name 
Syntax 
Description 
Non-Abbreviated 
Equivalent 
FillRule 
F FillRule 
Establishes the fill rule that 
should be used for this 
geometry. A value of 0 is 
equivalent to a FillRule value 
of EvenOdd; a value of 1 is 
equivalent to a FillRule value 
of NonZero. The default value 
if this command is omitted 
is 0. 
This command MUST appear 
only as the first command in 
the abbreviated geometry 
syntax [M4.6]. This command 
MUST NOT be specified in the 
value of the Figures attribute 
of the <PathGeometry> 
element [M4.7]. [Example: F 
0 end example] 
<PathGeometry> 
FillRule attribute 
Move 
M x,y  
or  
m x,y 
Establishes a new current 
endpoint. Every geometry 
MAY specify one or more 
figures, and MAY be preceded 
by a FillRule command where 
allowed [O4.5]. The first 
figure in a geometry MUST 
begin with a Move command 
[M4.8]. Subsequent Move 
commands indicate the start 
of a new figure but MAY be 
omitted, indicating the current 
endpoint for the subsequent 
figure is the same as the end 
point of the previous figure 
[O4.6]. [Example: M 1.0,1.5 
end example]  
<PathFigure> 
StartPoint attribute 
Line 
L x,y  
or  
l x,y 
Draws a straight line from the 
current point to the specified 
point. [Example: L 20,30 end 
example] 
<PolyLineSegment> 
element 
Horizont
al Line 
H x  
or  
h x 
Draws a horizontal line from 
the current endpoint to the 
specified x coordinate. 
[Example: H 90 end example]  
<PolyLineSegment> 
element 
Vertical 
Line 
V y  
or  
Draws a vertical line from the 
current endpoint to the 
<PolyLineSegment> 
element 

11. Graphics 
ECMA-388 
82 
First Edition, June 2009 
Name 
Syntax 
Description 
Non-Abbreviated 
Equivalent 
v y 
specified y coordinate. 
[Example: v 90 end example] 
Cubic 
Bézier 
Curve 
C x1,y1 x2,y2 x3,y3  
or  
c x1,y1 x2,y2 x3,y3 
Draws a cubic Bézier curve 
from the current endpoint to 
the specified point (x3,y3) 
using the two specified control 
points (x1,y1 and x2,y2). The 
first control point determines 
the initial direction (tangent) 
of the curve, and the second 
determines the terminating 
direction (tangent) of the 
curve. [Example: C 100,200 
200,400 300,200 end example] 
<PolyBezierSegmen
t> element 
Quadrati
c Bézier 
Curve 
Q x1,y1 x2,y2  
or  
q x1,y1 x2,y2 
Draws a quadratic Bézier 
curve from the current 
endpoint to the specified point 
(x2,y2) using the specified 
control point (x1,y1). 
[Example: q 100,200 300,200 
end example] 
<PolyQuadratic 
BezierSegment> 
element 
Smooth 
Cubic 
Bézier 
Curve 
S x1,y1 x2,y2  
or  
s x1,y1 x2,y2 
Draws a cubic Bézier curve 
from the current endpoint to 
the specified point (x2,y2). The 
first control point is assumed 
to be the reflection of the 
second control point of the 
previous command, relative to 
the current endpoint. If there 
is no previous command or if 
the previous command was 
not a Cubic Bézier Curve 
command or Smooth Cubic 
Bézier Curve command, the 
first control point is assumed 
to be coincident with the 
current endpoint. The second 
control point is specified by 
x1,y1. [Example: S 100,200 
200,300 end example] 
<PolyBezierSegmen
t> element 
Elliptical 
Arc 
A xr,yr rx fArc fSweep 
x,y  
or  
a xr,yr rx fArc fSweep 
x,y 
Draws an elliptical arc from 
the current endpoint to the 
specified point (x,y). The size 
and orientation of the ellipse 
are defined by xr,yr. rx,xr 
defines the x radius, yr defines 
the y radius, and rx defines 
the x-axis rotation in degrees, 
<ArcSegment> 
element 

ECMA-388 
11. Graphics 
 
 First Edition, June 2009 
83 
Name 
Syntax 
Description 
Non-Abbreviated 
Equivalent 
which indicates how the 
ellipse is rotated relative to 
the current coordinate 
system. The center of the 
ellipse is calculated 
automatically.  
In most situations, four 
different arcs satisfy the 
specified constraints. fArc and 
fSweep indicate which arc to 
use.  
Of the four candidate arc 
sweeps, two represent large 
arcs with sweeps of 180° or 
greater, and two represent 
smaller arcs with sweeps less 
than 180°. 
If fArc is 1, one of the two 
larger arc sweeps is chosen. If 
fArc is 0, one of the smaller 
arc sweeps is chosen. No 
other values of fArc are valid. 
If fSweep is 1, the arc is drawn 
in a positive-angle (clockwise) 
direction. If fSweep is 0, the 
arc is drawn in a negative-
angle (counter-clockwise) 
direction. No other values of 
fSweep are valid. [Example: a 
200,70 10 0 1 100,100 end 
example] 
Close 
Z or z 
Draws a straight line from the 
current endpoint to the first 
point of the current figure and 
then ends the figure.  
If the command following a 
Close command is a Move 
command, the Move 
command specifies the initial 
point of the next figure. 
Otherwise, the next figure 
starts at the same initial point 
as the current figure. 
<PathFigure> 
IsClosed attribute 
Example 11–10. A path described using abbreviated syntax 
The following markup demonstrates a simple path, which is drawn using the abbreviated 
syntax: 

11. Graphics 
ECMA-388 
84 
First Edition, June 2009 
<Path Stroke="#000000" Data="M 100,100 L 300,100 L 200,300 z" /> 
end example] 
11.2.3.1 Smooth Bézier Curve Abbreviated Syntax 
Smooth Bézier curves specified with the abbreviated geometry syntax are basic cubic Bézier 
curves with an implied first control point. This control point is coincident with the endpoint of 
the previous segment unless the previous segment is also a Bézier curve. In this case, the first 
control point of the smooth Bézier curve is a reflection of the second control point of the 
previous curve segment around the start point of the smooth Bezier curve segment, as shown 
below. 
Example 11–11. Smooth Bézier curve 
In the following example, C1 and C2 represent the first and second control points of the first 
cubic Bézier curve segment, respectively. S1 represents the implied first control point of the 
smooth Bézier curve segment. S2 represents the specified control point of the smooth Bézier 
curve segment. I represents the inflection point around which control point S1 is derived from 
control point C2. 
 
The above diagram is generated with the following markup: 
<Canvas RenderTransform="1.25,0,0,1.25,-40,20" > 
 
<!-- Main Path --> 
 
<Path Stroke="#000000" StrokeThickness="30" StrokeLineJoin="Round"  
 
Data="M50,80 L100,80 C130,0 170,160 200,80 S270,160 300,80 L350,80"/> 
 
<Path Stroke="#CCCCCC" StrokeThickness="2"  
 
Data="M50,80 L100,80 C130,0 170,160 200,80 S270,160 300,80 L350,80"/> 
 
<!-- C1 --> 
 
<Path Stroke="#AAAAAA" StrokeThickness="1" Data="M 100,80 L 130,0" /> 
 
<Path Stroke="#0000CC" StrokeThickness="5" StrokeStartLineCap="Round" 
 
 
StrokeEndLineCap="Round" Data="M 130,0 L 130,0" /> 
 
<Glyphs Fill="#000000" UnicodeString="C" OriginX="130" OriginY="15"  
 
 
FontUri="../Resources/Fonts/Verdana.ttf" FontRenderingEmSize="10" 
 
/> 
 
<Glyphs Fill="#000000" UnicodeString="1" OriginX="138" OriginY="18" 
 
 
FontUri="../Resources/Fonts/Verdana.ttf" FontRenderingEmSize="6" 
 
/> 

ECMA-388 
11. Graphics 
 
 First Edition, June 2009 
85 
 
<!-- C2 --> 
 
<Path Stroke="#AAAAAA" Data="M 200,80 L 170,160" /> 
 
<Path Stroke="#0000CC" StrokeThickness="5" StrokeStartLineCap="Round" 
 
 
StrokeEndLineCap="Round" Data="M 170,160 L 170,160" /> 
 
<Glyphs Fill="#000000" UnicodeString="C" OriginX="175"  
 
 
OriginY="175" FontUri="../Resources/Fonts/Verdana.ttf"  
 
 
FontRenderingEmSize="10" /> 
 
<Glyphs Fill="#000000" UnicodeString="2" OriginX="183"  
 
 
OriginY="178" FontUri="../Resources/Fonts/Verdana.ttf"  
 
 
FontRenderingEmSize="6" /> 
 
<!-- S1 --> 
 
<Path Stroke="#AAAAAA" StrokeThickness="2"  
 
 
StrokeDashArray="0.75 0.75" Data="M 200,80 L 230,0" /> 
 
<Path Stroke="#0000CC" StrokeThickness="5" StrokeStartLineCap="Round"  
 
 
StrokeEndLineCap="Round" Data="M 230,0 L 230,0" /> 
 
<Path Stroke="#FFFFFF" StrokeThickness="3" StrokeStartLineCap="Round"  
 
 
StrokeEndLineCap="Round" Data="M 230,0 L 230,0" /> 
 
<Glyphs Fill="#000000" UnicodeString="S" OriginX="230" OriginY="15" 
 
 
FontUri="../Resources/Fonts/Verdana.ttf" FontRenderingEmSize="10"  
 
/> 
 
<Glyphs Fill="#000000" UnicodeString="1" OriginX="238" OriginY="18" 
 
 
FontUri="../Resources/Fonts/Verdana.ttf" FontRenderingEmSize="6"  
 
/> 
 
<!-- S2 --> 
 
<Path Stroke="#AAAAAA" StrokeThickness="1" Data="M 300,80 L 270,160"  
 
/> 
 
<Path Stroke="#0000CC" StrokeThickness="5" StrokeStartLineCap="Round" 
 
 
StrokeEndLineCap="Round" Data="M 270,160 L 270,160" /> 
 
<Glyphs Fill="#000000" UnicodeString="S" OriginX="275" OriginY="175" 
 
 
FontUri="../Resources/Fonts/Verdana.ttf" FontRenderingEmSize="10"  
 
/> 
 
<Glyphs Fill="#000000" UnicodeString="2" OriginX="283" OriginY="178" 
 
 
FontUri="../Resources/Fonts/Verdana.ttf" FontRenderingEmSize="6"  
 
/> 
 
<!-- Inflection --> 
 
<Path Stroke="#FFFFFF" StrokeThickness="3" StrokeStartLineCap="Round" 
 
 
StrokeEndLineCap="Round" Data="M 200,80 L 200,80" /> 
 
<Glyphs Fill="#FFFFFF" UnicodeString="I" OriginX="203" OriginY="90" 
 
 
FontUri="../Resources/Fonts/Verdana.ttf" FontRenderingEmSize="10"  
 
/> 
</Canvas> 
end example] 
11.2.3.2 Relative Commands and Curve Control Points 
When using relative (lowercase) commands with the abbreviated geometry syntax, each control 
point and end point are individually specified relative to the start point of that segment. 
Example 11–12. Relative commands and curves 
The following markup describes a simple shape using cubic Bézier curves: 
<Path Stroke="#000000" Data="M 50,20 L 150,20 C 250,75 170,130 120,100  
 
C 70,70 90,110 130,160 Q 0,150 50,20" /> 

11. Graphics 
ECMA-388 
86 
First Edition, June 2009 
This markup describes the same shape, using relative commands: 
<Path Stroke="#000000" Data="M 50,20 l 100,0 c 100,55 20,110 -30,80  
 
c -50,-30 -30,10 10,60 q -130,-10 -80,-140" /> 
end example] 

ECMA-388 
12. Text 
 
 First Edition, June 2009 
87 
12. Text 
A run of text sharing the same characteristics is represented by a <Glyphs> element. Text runs 
are broken by line advances and formatting changes. The set of properties on the <Glyphs> 
element allows for a complete description of the glyph characteristics, such as the fill and 
opacity, as well as clipping information. The <Glyphs> element allows specification of a Unicode 
string and supports bidirectional and vertical text.  

12. Text 
ECMA-388 
88 
First Edition, June 2009 
12.1 <Glyphs> Element 
element Glyphs 
diagram 
 
attributes Name   
Type   
Use   
Default   Fixed   Annotation 
BidiLevel   
 
   
0   
   
Specifies the Unicode algorithm 
bidirectional nesting level. Even 
values imply left-to-right layout, 

ECMA-388 
12. Text 
 
 First Edition, June 2009 
89 
odd values imply right-to-left 
layout. Right-to-left layout places 
the run origin at the right side of 
the first glyph, with positive 
advance widths (representing 
advances to the left) placing 
subsequent glyphs to the left of the 
previous glyph. Valid values range 
from 0 to 61, inclusive. 
CaretStops   
ST_CaretStops  
   
   
   
Identifies the positions within the 
sequence of Unicode characters at 
which a text-selection tool can 
place a text-editing caret. Potential 
caret-stop positions are identified 
by their indices into the UTF-16 
code units represented by the 
UnicodeString attribute value.  
When this attribute is missing, the 
text in the UnicodeString attribute 
value MUST be interpreted as 
having a caret stop between every 
Unicode UTF-16 code unit and at 
the beginning and end of the text 
[M5.1]. 
The value SHOULD indicate that 
the caret cannot stop in front of 
most combining marks or in front 
of the second UTF-16 code unit of 
UTF-16 surrogate pairs [S5.1]. 
DeviceFontName   
ST_UnicodeString  
   
   
   
Uniquely identifies a specific device 
font. The identifier is typically 
defined by a hardware vendor or 
font vendor. 
Fill   
ST_RscRefColor  
   
   
   
Describes the brush used to fill the 
shape of the rendered glyphs. 
FontRenderingEmSize   ST_GEZero  
required      
   
Specifies the font size in drawing 
surface units, expressed as a float 
in units of the effective coordinate 
space. A value of 0 results in no 
visible text. 
FontUri   
xs:anyURI 
required      
   
The URI of the physical font from 
which all glyphs in the run are 
drawn. The URI MUST reference a 
font contained in the package 
[M2.1]. If the physical font 
referenced is a TrueType Collection 
(containing multiple font faces), 

12. Text 
ECMA-388 
90 
First Edition, June 2009 
the fragment portion of the URI is 
a 0-based index indicating which 
font face of the TrueType Collection 
should be used. 
OriginX   
ST_Double  
required      
   
Specifies the x coordinate of the 
first glyph in the run, in units of the 
effective coordinate space. The 
glyph is placed so that the leading 
edge of its advance vector and its 
baseline intersect with the point 
defined by the OriginX and OriginY 
attributes. 
OriginY   
ST_Double  
required      
   
Specifies the y coordinate of the 
first glyph in the run, in units of the 
effective coordinate space. The 
glyph is placed so that the leading 
edge of its advance vector and its 
baseline intersect with the point 
defined by the OriginX and OriginY 
attributes. 
IsSideways   
ST_Boolean  
   
false   
   
Indicates that a glyph is turned on 
its side, with the origin being 
defined as the top center of the 
unturned glyph. 
Indices   
ST_Indices  
   
   
   
Specifies a series of glyph indices 
and their attributes used for 
rendering the glyph run. If the 
UnicodeString attribute of the 
<Glyphs> element is not specified 
or contains an empty value (“” 
or “{}”), and if the Indices 
attribute is not specified or 
contains no glyph indices, then a 
consumer MUST instantiate an 
error condition [M5.2]. 
UnicodeString   
ST_UnicodeString  
   
   
   
Contains the string of text 
rendered by the <Glyphs> 
element. The text is specified as 
Unicode code points. If the 
UnicodeString attribute of the 
<Glyphs> element is not specified 
or contains an empty value (“” 
or “{}”), and if the Indices 
attribute is not specified or 
contains no glyph indices, then a 
consumer MUST instantiate an 
error condition [M5.2]. 

ECMA-388 
12. Text 
 
 First Edition, June 2009 
91 
StyleSimulations   
ST_StyleSimulations     
None   
   
Specifies a style simulation. Valid 
values are None, ItalicSimulation, 
BoldSimulation, and 
BoldItalicSimulation. 
RenderTransform   
ST_RscRefMatrix  
   
   
   
Establishes a new coordinate frame 
for the glyph run specified by the 
<Glyphs> element. The render 
transform affects clip, opacity 
mask, fill, x origin, y origin, the 
actual shape of individual glyphs, 
and the advance widths. The 
render transform also affects the 
font size and values specified in the 
Indices attribute. 
Clip   
ST_RscRefAbbrGeomF     
   
   
Limits the rendered region of the 
element. Only portions of the 
<Glyphs> element that fall within 
the clip region (even partially 
clipped characters) produce marks 
on the page. 
Opacity   
ST_ZeroOne  
   
1.0   
   
Defines the uniform transparency 
of the glyph element. Values range 
from 0 (fully transparent) to 1 
(fully opaque), inclusive. Values 
outside of this range are invalid. 
OpacityMask   
ST_RscRef  
   
   
   
Specifies a mask of alpha values 
that is applied to the glyphs in the 
same fashion as the Opacity 
attribute, but allowing different 
alpha values for different areas of 
the element. 
Name   
ST_Name  
   
   
   
Contains a string value that 
identifies the current element as a 
named, addressable point in the 
document for the purpose of 
hyperlinking. 
FixedPage.NavigateUri   xs:anyURI 
   
   
   
Associates a hyperlink URI with the 
element. May be a relative 
reference or a URI that addresses a 
resource that is internal to or 
external to the package. 
xml:lang   
 
   
   
   
Specifies the default language used 
for the current element. The 

12. Text 
ECMA-388 
92 
First Edition, June 2009 
language is specified according to 
RFC 3066. 
x:Key   
 
   
   
   
Specifies a name for a resource in 
a resource dictionary. x:Key MUST 
be present when the current 
element is defined in a resource 
dictionary. x:Key MUST NOT be 
specified outside of a resource 
dictionary [M5.3]. 
annotation Represents a run of text from a single font. 
The <Glyphs> element represents a run of uniformly-formatted text from a single font. It 
provides information necessary for accurate rendering and supports search and selection 
features in viewing consumers. 
If the Fill property is not specified, the <Glyphs> element has no visible effect. 
Some properties of the <Glyphs> element are composable, meaning that the markings 
rendered to the page are determined by a combination of the property and all the like-named 
properties of the <Glyphs> element’s parent and ancestor elements. For details, see §14. 

ECMA-388 
12. Text 
 
 First Edition, June 2009 
93 
12.1.1 Glyph Metrics 
Each glyph defines metrics that specify how it aligns with other glyphs. The metrics are 
illustrated below. 
Figure 12–1. Glyph metrics 
 
 
Figure 12–2. Upright (usually horizontal) glyph metrics 
 

12. Text 
ECMA-388 
94 
First Edition, June 2009 
Figure 12–3. Sideways (usually vertical) glyph metrics 
 
In general, glyphs within a font are either base glyphs or combining marks that can be attached 
to base glyphs. Base glyphs usually have an advance width that is non-zero, and a 0,0 glyph 
offset vector. Combining marks usually have a zero advance width. The glyph offset vector can 
be used to adjust the position of a combining mark and, therefore, can have a non-0,0 value for 
combining marks. 
The position of each glyph in the glyph run is controlled by the following values: 
• Origin. Each glyph is assumed to be given a nominal origin. For the first glyph in the run, 
this is the origin of the run. 
• Advance Width. The advance width for each glyph provides the origin of the next glyph 
relative to the origin of the current glyph. The advance vector is drawn in the direction 
of the run progression. 
• Glyph Offset (Base or Mark). The glyph offset vector (as set by uOffset and vOffset in the 
Indices attribute; see §12.1.3) adjusts the position of this glyph relative to its nominal 
origin. The orientation of the glyph offset vector is not affected by the value of the 
IsSideways attribute, but is affected by the value of the BidiLevel attribute. 
12.1.2 Mapping Code Units to Glyphs 
A Unicode scalar value in a UnicodeString attribute is typically represented by a single UTF-16 
code unit and has a single corresponding glyph representation in the font. More complex 
mapping scenarios are common in non-Latin scripts: a single Unicode scalar value can map to 
two UTF-16 code units, multiple UTF-16 code units can map to a single glyph, single UTF-16 
code units can map to multiple glyphs based on context, and multiple UTF-16 code units can 
map indivisibly to multiple glyphs. In these cases, the clusters of UTF-16 code units are mapped 
using a cluster map. 
The cluster map contains one entry for each UTF-16 code unit in the UnicodeString attribute. 
Each entry specifies the offset of the first glyph that represents the cluster of UTF-16 code 
units. 

ECMA-388 
12. Text 
 
 First Edition, June 2009 
95 
12.1.2.1 One-to-One Mappings 
When each UTF-16 code unit is represented by exactly one glyph, the cluster map entries are 0, 
1, 2, and so on.  
Example 12–1. One-to-one cluster map 
Each character in the word “file” is represented by a single glyph. 
  
end example] 
12.1.2.2 Many-to-One Mappings 
When two or more UTF-16 code units map to a single glyph, the entries for those UTF-16 code 
units specify the offset of that glyph in the glyph index buffer.  
Example 12–2. Many-to-one cluster map 
In the following mapping, the f and i characters are replaced by a ligature. 
  
end example] 
12.1.2.3 One-to-Many Mappings 
When one UTF-16 code unit maps to two or more glyphs, the value in the cluster map for that 
UTF-16 code unit references the first glyph in the Indices attribute that represents that UTF-16 
code unit.  
Example 12–3. One-to-many cluster map 
The Thai Sara Am character contains a part that sits on top of the previous base character (the 
ring), and a part that sits to the right of the base character (the hook). When Thai text is 
micro-justified, the hook is spaced apart from the base character, while the ring remains on top 
of the base character. Many fonts encode the ring and the hook as separate glyphs. 

12. Text 
ECMA-388 
96 
First Edition, June 2009 
 
The markup appears as follows: 
<Glyphs 
 
FontUri="../Resources/Fonts/browau.ttf" 
 
UnicodeString="&#xe20;&#xe31;&#xe33;&#x21;" 
 
Indices="153;106,,,16;(1:2)124;198;4" 
 
OriginX="10" OriginY="60" 
 
FontRenderingEmSize="70" 
 
Fill="#000000"/> 
The markup above is rendered as follows: 
  
end example] 
12.1.2.4 Many-to-Many Mappings 
In some fonts, an indivisible group of UTF-16 code units for a character maps to more than one 
glyph. This is common in fonts that support Indic scripts. When an indivisible group of UTF-16 
code units maps to one or more glyphs, the value in the cluster map for each of the UTF-16 
code units references the first glyph in the Indices attribute representing that code point.  
Example 12–4. Many-to-many cluster map 
The following mapping shows the Unicode and glyph representations of a Tamil word that has 
two glyph clusters. Each cluster has a base character and a combining mark. The first pair of 
UTF-16 code units generates three glyphs because the combining mark splits both sides of the 
base character. The second pair of UTF-16 code units is represented by a single glyph that 
incorporates the effect of the combining mark. 
  
 
ப 
ோோோ 
த 
ுு 
Unicode String 
oBAA 
oBCB 
oBA4 
oBC1 
 
 
 
 
 

ECMA-388 
12. Text 
 
 First Edition, June 2009 
97 
ClusterMap 
0 
0 
3 
3 
 
 
 
 
 
GlyphIndices 
94 
76 
88 
162 
(Latha Font) 
ேே 
ப 
ாா 
து 
 
The markup appears as follows: 
<Glyphs 
 
FontUri="../Resources/Fonts/latha.ttf" 
 
UnicodeString="&#xbaa;&#xbcb;&#xba4;&#xbc1;" 
 
Indices="(2:3)94;76;88;(2:1)162" 
 
OriginX="10" OriginY="120" 
 
FontRenderingEmSize="40" 
 
Fill="#000000"/> 
The markup above is rendered as follows: 
  
end example] 
12.1.3 Indices Attribute 
The <Glyphs> element MAY have an Indices attribute [O5.7]. The glyph specifications within the 
Indices attribute are OPTIONAL [O5.8]. The GlyphIndex portion of the Indices attribute MAY be 
used to specify a series of glyphs, complex character-to-glyph cluster mappings, or a 
combination of both [O5.9]. The Indices attribute MAY also include glyph placement information 
[O5.10]. 
Within the Indices attribute, each glyph specification is separated by a semicolon. The Indices 
attribute MUST adhere to the glyph specification syntax as follows [M5.25]:  
GlyphIndices   = *1GlyphMapping *( ";" *1GlyphMapping ) 
GlyphMapping   = *1([ClusterMapping] GlyphIndex) [GlyphMetrics] 
ClusterMapping = "(" ClusterCodeUnitCount [":" ClusterGlyphCount] ")" 
ClusterCodeUnitCount = 1*DIGIT 
ClusterGlyphCount    = 1*DIGIT 
GlyphIndex     = *DIGIT 
GlyphMetrics   = "," *1AdvanceWidth ["," *1uOffset ["," vOffset]] 
AdvanceWidth   = ["+"] RealNum 
uOffset        = ["+" | "-"] RealNum 
vOffset        = ["+" | "-"] RealNum 
RealNum        = ((1*DIGIT ["." 1*DIGIT]) | ("." 1*DIGIT)) [Exponent] 
Exponent       = *1( ("E"|"e") ("+"|"-") 1*DIGIT ) 

12. Text 
ECMA-388 
98 
First Edition, June 2009 
The sum of the code unit counts for all the GlyphMapping entries in the Indices attribute MUST 
NOT exceed the number of UTF-16 code units in the UnicodeString attribute if the UnicodeString 
attribute is specified and does not contain an empty value (“” or “{}”). If a ClusterMapping is 
not specified within a GlyphMapping entry, the code unit count is 1 [M5.4]. If the Indices 
attribute specifies a GlyphIndex that does not exist in the font, the consumer MUST instantiate 
an error condition [M5.24]. If the Indices attribute is specified, the values provided MUST be 
used in preference to values determined from the UnicodeString attribute alone [M5.23]. 
Table 12–3. Glyph specifications 
Name 
Description 
GlyphIndex 
Index of the glyph (16-bit) in the physical font. The entry MAY be 
empty [O5.11], in which case the glyph index is determined by 
looking up the UTF-16 code unit in the font character map table. If 
there is not a one-to-one mapping between code units in the 
UnicodeString attribute and the glyph indices, the GlyphIndex value 
in the Indices attribute MUST be specified [M5.5]. 
In cases where character-to-glyph mappings are not one-to-one, a 
cluster mapping specification precedes the glyph index (further 
described below). 
AdvanceWidth 
Advance width indicating placement for the subsequent glyph, 
relative to the origin of the current glyph. Measured in direction of 
advance as defined by the IsSideways and BidiLevel attributes. Base 
glyphs generally have a non-zero advance width and combining 
glyphs have a zero advance width. 
Advance width is measured in hundredths of the font em size. The 
default value is defined in the horizontal metrics font table (hmtx) if 
the IsSideways attribute is specified as false or the vertical metrics 
font table (vmtx) if the IsSideways attribute is specified as true. 
Advance width is a real number with units specified in hundredths of 
an em.  
So that rounding errors do not accumulate, the advance MUST be 
calculated as the exact unrounded origin of the subsequent glyph 
minus the sum of the calculated (that is, rounded) advance widths 
of the preceding glyphs [M5.6]. 
The advance MUST be 0 or greater [M5.26]. The right-to-left writing 
direction can be specified using the BidiLevel attribute. 

ECMA-388 
12. Text 
 
 First Edition, June 2009 
99 
Name 
Description 
uOffset, vOffset 
Offset in the effective coordinate space relative to glyph origin to 
move this glyph (x offset for uOffset and –y offset for vOffset. The 
sign of vOffset is reversed from the direction of the y axis. A 
positive vOffset value shifts the glyph by a negative y offset and 
vice versa.). Used to attach marks to base characters. The value is 
added to the nominal glyph origin calculated using the advance 
width to generate the actual origin for the glyph. The setting of the 
IsSideways attribute does not change the interpretation of uOffset 
and vOffset. 
Measured in hundredths of the font em size. The default offset 
values are 0.0,0.0. uOffset and vOffset are real numbers. 
Base glyphs generally have a glyph offset of 0.0,0.0. Combining 
glyphs generally have an offset that places them correctly on top of 
the nearest preceding base glyph.  
For left-to-right text, a positive uOffset value points to the right; for 
right-to-left text, a positive uOffset value points to the left. 
Example 12–5. Using indices to specify advance width 
The following Indices attribute specifies that the seventh glyph in the Unicode string has an 
advance width of 40: 
Indices = ";;;;;;,40" 
end example] 
12.1.3.1 Specifying Character-to-Glyph Mappings 
A cluster map specification MAY precede the glyph specification for the first glyph of the cluster 
[O5.12]. 
Empty Indices attribute values indicate that the corresponding UTF-16 code unit within the 
Unicode string has a one-to-one relationship with the glyph index as specified by the character 
mapping table within the font. 
Cluster maps that specify 0:n or n:0 mappings are invalid. 
See the glyph specification syntax above for details of how to specify cluster maps.  
Table 12–4. Portions of the cluster specification 
Name 
Description 
ClusterCodeUnitCount Number of UTF-16 code units that combine to form this cluster. One or 
more code units can be specified. Default value is 1. 
ClusterGlyphCount 
Number of glyph indices that combine to form this cluster. One or more 
indices can be specified. Default value is 1. 
Example 12–6. Using the Indices attribute to specify glyph replacement for a cluster 
The following Indices attribute specifies that the sixth and seventh UTF-16 code units in the 
Unicode string should be replaced by a single glyph having an index of 191: 
Indices = ";;;;;(2:1)191" 

12. Text 
ECMA-388 
100 
First Edition, June 2009 
end example] 
12.1.4 UnicodeString Attribute 
The UnicodeString attribute holds the array of Unicode scalar values that are represented by the 
current <Glyphs> element. Specifying a Unicode string is RECOMMENDED, as it supports 
searching, selection, and accessibility [S5.5]. If the Unicode string contains Unicode scalar 
values that require two UTF-16 code units, a cluster map with a many-to-one or many-to-many 
mapping MUST be specified for the values [M5.28]. 
The standard XML escaping mechanisms are used to specify XML-reserved characters. In order 
to use an open brace at the beginning of the Unicode string, it MUST be escaped with a prefix 
of “{}” [M5.7]. If the UnicodeString attribute value starts with “{}”, consumers MUST ignore 
those first two characters in processing the Unicode string and in calculating index positions for 
the characters of the Unicode string [M5.7].  
If the UnicodeString attribute of the <Glyphs> element is not specified or contains an empty 
value (“” or “{}”), and if the Indices attribute is not specified or contains no glyph indices, then 
a consumer MUST instantiate an error condition [M5.2]. If the UnicodeString attribute contains a 
Unicode code unit that cannot be mapped to a glyph index via a cmap table in the font and 
there is no corresponding GlyphIndex entry in the Indices attribute, the consumer MUST display 
the .notdef glyph [M5.9]. 
Producers MAY include Unicode control marks in the Unicode string [O5.1]. Such marks include 
control codes, layout controls, invisible operators, deprecated format characters, variation 
selectors, non-characters, and specials, according to their definition within the Unicode 
Standard. If producers include control marks in the Unicode string, they SHOULD include an 
Indices attribute to specify glyph indices and/or character-to-glyph mapping information for the 
control marks [S5.2]. In the absence of such information, consumers MUST treat Unicode 
control marks like ordinary characters and render the glyphs to which the Unicode control 
marks are mapped in the CMAP table [M5.10]. The resulting glyphs might produce an 
inappropriate rendering of the original Unicode string. 
Producers MAY choose to generate UnicodeString attribute values that are not normalized by any 
Unicode-defined algorithm [O5.2]. Because advance-widths, glyph indices, and caret-stops are 
associated with the generated Unicode string, consumers MUST NOT normalize the UnicodeString 
attribute value to produce an internal representation [M5.11]. See §9.1.7.5 for details and 
exceptions. 
12.1.5 StyleSimulations Attribute 
Synthetic style simulations can be applied to the shape of the glyphs by using the 
StyleSimulations attribute. Style simulations can be applied in addition to the designed style of a 
font. The default value for the StyleSimulations attribute is None, in which case the shapes of 
glyphs are not modified from their original design. 
When the StyleSimulations value is specified as BoldSimulation, synthetic emboldening is applied 
by geometrically widening the strokes of glyphs by 1% of the em size for each of the two 
boundaries of the stroke, so that the centers of strokes remain at the same position relative to 
the character coordinate system. This leaves the baseline origin unmodified. The black box 
grows 1% all around for a total of 2% horizontal and 2% vertical. As a result, the character 
height and the advance width of each glyph are increased by 2% of the em size. Producers 
MUST lay out algorithmically emboldened glyphs using advance widths that are 2% of the em 
size larger than when not algorithmically emboldened [M5.12]. When rendering glyphs where 
the StyleSimulations value is specified as BoldSimulation, consumers SHOULD offset each glyph 

ECMA-388 
12. Text 
 
 First Edition, June 2009 
101 
up and to the right by 1% of the em size so that baseline and left edge alignments are 
preserved [S5.6].  
Consumers MUST implement the effect of algorithmic emboldening such that the black box of 
the glyph grows by 2% of the em size [M5.13]. When advance widths are omitted from the 
markup and the glyphs are algorithmically emboldened, the advance widths obtained from the 
horizontal metrics font table (if IsSideways is false) or the vertical metrics font table (if 
IsSideways is true) of the font MUST be increased by 2% of the em size [M5.13]. 
When StyleSimulations is specified as ItalicSimulation, synthetic italicizing is applied to glyphs 
with an IsSideways value of false by skewing the top edge of the alignment box of the character 
by 20° to the right, relative to the baseline of the character. Glyphs with an IsSideways value of 
true are italicized by skewing the right edge of the alignment box of the character by 20° down, 
relative to the baseline origin of the glyph. The character height and advance width are not 
modified. Producers MUST lay out algorithmically italicized glyphs using exactly the same 
advance widths as when not algorithmically italicized [M5.14]. 
When StyleSimulations is specified as BoldItalicSimulation, both BoldSimulation and 
ItalicSimulation are applied. 
12.1.6 IsSideways Attribute 
Glyphs for text in vertical writing systems are normally represented by rotating the coordinate 
system and using the IsSideways attribute. <Glyphs> elements with the IsSideways attribute set 
to true will be rotated 90° counter-clockwise and placed so that the sideways baseline origin is 
coincident with the nominal origin of the character (within the character coordinate system), as 
modified by the glyph offset vector in the Indices attribute. The advance vector places the 
nominal origin of the next character a distance along the direction of progression of the run. 
The direction of the advance vector is unaffected by IsSideways, however the method by which 
the size of the advance vector is chosen is different. 
[Example: To represent a run of characters top to bottom on a page, a render transform can be 
used to rotate the <Glyphs> coordinate system 90° clockwise. OriginX and OriginY can be used 
to specify a position at the top of the column of text. Text from a vertical writing system can 
then be written using <Glyphs> elements with the IsSideways attribute set to true. The 
individual glyphs appear in the normal orientation because the rotation effected by the 
IsSideways attribute undoes the effect of the render transform. end example] 
Text from horizontal writing systems can be included in the column by using <Glyphs> 
elements without specifying IsSideways, or using a value of false for it. The rotated coordinate 
system makes them appear top to bottom on the page, but with the glyphs rotated to the right. 
If alternate vertical character representations are available in the font, the producer SHOULD 
use those and provide their glyph indices in the Indices attribute [S5.3]. 
12.1.6.1 Calculating Sideways Text Origin and Advance Width 
The formulas below describe the method used to calculate each glyph’s nominal origin, which is 
used for positioning the glyphs on the fixed page and for calculating the default advance width 
for each glyph. 
The origin is the top center of the unturned glyph. The x origin of the unturned glyph is 
calculated to be exactly one-half the advance width of the glyph, as specified in the horizontal 
metrics table of the font. This formula is expressed as follows (in pseudo code): 

12. Text 
ECMA-388 
102 
First Edition, June 2009 
TopOriginX = hmtx.advanceWidth[GlyphIndex] / 2 
If the font is a CFF Open Font Format font, the y origin of the unturned glyph is determined 
from the vertical origin (vorg) table for the font, which can be specified for a particular glyph 
index but falls back to the default vertical origin if the glyph index is not present in the vertical 
origin table. This formula is expressed as follows (in pseudo code): 
TopOriginY = vorg.vertOriginY[glyphIndex]  
or: 
TopOriginY = vorg.defaultVertOriginY 
If the vertical origin table is not present, the glyph data (glyf) and vertical metrics (vmtx) font 
tables are consulted. The glyph bounding box is retrieved from the glyph data table and added 
to the top side-bearing for the glyph, specified in the vertical metrics table. This formula is 
expressed as follows (in pseudo code): 
TopOriginY = glyf.yMax[glyphIndex] + vmtx.topSideBearing[glyphIndex] 
[Note: CFF fonts do not contain the glyf.yMax information; instead the yMax for each glyph is 
computed by calculating the top of the glyph’s bounding box from the CFF charstring data. end 
note] 
If the vertical metrics font table does not exist but the "OS/2" metrics table does exist and is at 
least 78 bytes long, the "OS/2" table is consulted and the sTypoAscender and sTypoDescender 
values are used, as follows (in pseudo code): 
TopOriginY = os/2.sTypoAscender 
Descender = abs(os/2.typoDescender) 
In all other circumstances, the Ascender value from the horizontal header (hhea) table is used. 
This formula is expressed as follows (in pseudo code): 
TopOriginY = hhea.Ascender 
Descender = abs(hhea.Descender) 
Finally, the advance width for sideways text is computed as follows (in pseudo code), unless 
specifically overridden by the Indices attribute: 
AdvanceWidth = TopOriginY + Descender 
12.1.6.2 IsSideways and BidiLevel Effects on Glyph Positioning 
Right-to-left text (BidiLevel attribute set to an odd value) changes the direction of the 
AdvanceWidth and uOffset (horizontal offset) values of the Indices attribute, as well as the 
position of the glyph origin. Vertical text (IsSideways attribute set to true) changes the position 
of the glyph origin.  
Producers MUST NOT specify text that is both right-to-left (BidiLevel attribute set to an odd 
value) and vertical (IsSideways attribute set to true) [M5.15]. 
Table 12–5. IsSideways and BidiLevel effects on origin placement 
IsSideways 
BidiLevel 
Glyph origin 
Direction of advance width 
and positive uOffset 
Horizontal  
(false) 
Left-to-
right 
Left end of horizontal 
advance vector along Latin 
baseline 
To the right 

ECMA-388 
12. Text 
 
 First Edition, June 2009 
103 
IsSideways 
BidiLevel 
Glyph origin 
Direction of advance width 
and positive uOffset 
Horizontal  
(false) 
Right-to-
left 
Right end of horizontal 
advance vector along Latin 
baseline 
To the left 
Vertical  
(true) 
Left-to-
right  
Top end of vertical advance 
vector through the glyph 
centerline 
To the right 
Vertical  
(true) 
Right-to-
left 
Invalid combination 
 
Example 12–7. Text with positive uOffset and vOffset Indices values 
In this example, the position of the glyphs is shown relative to the origin shown at the crossed 
lines centered at 100,100. The text in gray shows where this text would be rendered without 
modification of the uOffset and vOffset value of the Indices attributes. 
<Glyphs Fill="#000000" FontRenderingEmSize="48"  
 
OriginX="100" OriginY="100"  
 
UnicodeString="AFQ"  
 
Indices=";,100,30,10;" 
 
FontUri="../Resources/Fonts/Arial.ttf" /> 
  
end example] 
Example 12–8. Right-to-left text (odd BidiLevel) 
The markup for this example matches the previous example, except the BidiLevel attribute is set 
to 1. Note the change in the origin, and the reversal of the glyph advance direction. 
<Glyphs Fill="#000000" FontRenderingEmSize="48"  
 
OriginX="100" OriginY="100"  
 
UnicodeString="AFQ"  
 
Indices=";,100,30,10;" 
 
BidiLevel="1" 
 
FontUri="../Resources/Fonts/Arial.ttf" /> 

12. Text 
ECMA-388 
104 
First Edition, June 2009 
  
end example] 
Example 12–9. Sideways text (IsSideways set to true) 
This example shows the IsSideways attribute set to true. The BidiLevel MUST be even when the 
IsSideways attribute is set to true [M5.15]. Note that the origin has changed to be the top-
center of the first glyph, with each glyph rotated 90° counter-clockwise. The interpretation of 
the advance direction and uOffset and vOffset values in the Indices attribute are otherwise 
unchanged. 
<Glyphs Fill="#000000" FontRenderingEmSize="48"  
 
OriginX="100" OriginY="100"  
 
UnicodeString="AFQ"  
 
Indices=";,100,30,10;" 
 
IsSideways="true" 
 
FontUri="../Resources/Fonts/Arial.ttf" /> 
  
end example] 
Example 12–10. Vertical text 
The markup for this example matches the previous example, with the addition of a render 
transformation to rotate and position the element as vertical text. For more information on 
render transformations, see §14.4. 
<Glyphs Fill="#000000" FontRenderingEmSize="48"  
 
OriginX="100" OriginY="100"  
 
UnicodeString="AFQ"  

ECMA-388 
12. Text 
 
 First Edition, June 2009 
105 
 
Indices=";,100,30,10;" 
 
IsSideways="true" 
 
FontUri="../Resources/Fonts/Arial.ttf"  
 
RenderTransform="0,1,-1,0,200,0" /> 
  
end example] 
Example 12–11. Japanese vertical text 
This example demonstrates a real-world usage of vertical text. Japanese text is shown below 
where the text is read down each column, from right to left across the page. The IsSideways 
attribute is set to true, thus rotating the each glyph 90° counter-clockwise. Then, the 
RenderTransform attribute (see §14.4) rotates the overall block of text 90° clockwise to achieve 
the final result of columns of text. 
<Glyphs Fill="#000000" FontRenderingEmSize="24" OriginX="10" OriginY="10" 
 
UnicodeString="これは、縦書きの日本語テキストが"  
 
FontUri="../Resources/Fonts/msmincho.ttf" IsSideways="true"  
 
RenderTransform="0,1,-1,0,145,0"/> 
<Glyphs Fill="#000000" FontRenderingEmSize="24" OriginX="10" OriginY="45" 
 
UnicodeString="どのように列で書かれるかの例です。"  
 
FontUri="../Resources/Fonts/msmincho.ttf" IsSideways="true"  
 
RenderTransform="0,1,-1,0,145,0"/> 
<Glyphs Fill="#000000" FontRenderingEmSize="24" OriginX="10" OriginY="80" 
 
UnicodeString="テキストは縦に読み、一行ずつ進みます。"  
 
FontUri="../Resources/Fonts/msmincho.ttf" IsSideways="true"  
 
RenderTransform="0,1,-1,0,145,0"/> 
<Glyphs Fill="#000000" FontRenderingEmSize="24" OriginX="10"  
 
OriginY="115" UnicodeString="他の言語も縦書きで書かれます。"  
 
FontUri="../Resources/Fonts/msmincho.ttf" IsSideways="true"  
 
RenderTransform="0,1,-1,0,145,0"/> 

12. Text 
ECMA-388 
106 
First Edition, June 2009 
This markup is rendered as follows: 
 
end example] 
12.1.7 DeviceFontName Attribute 
Printer device fonts are specified by the DeviceFontName attribute. Device manufacturers define 
the values for this attribute. Producers SHOULD NOT produce markup that will result in different 
rendering between consumers using the embedded font to render and consumers using the 
device font to render [S5.4]. 
Consumers that understand the device font name MAY ignore the embedded font and use the 
device-resident version [O5.3]. By definition, a consumer “understands” a printer device font if 
it can unambiguously correlate the device font name to a set of font metrics resident on the 
device. If a consumer does not understand the specified device font name, it MUST render the 
embedded version of the font [M5.16]. 
When rendering a printer device font, consumers MUST use the UnicodeString attribute and 
ignore the glyph index components of the Indices attribute [M5.17]. The consumer MUST still 
honor the advance width and x,y offset values present in the Indices attribute [M5.18]. 
For producers, a <Glyphs> element with a specified device font name MUST have exactly one 
Indices glyph per code unit in the UnicodeString attribute. Its Indices attribute MUST NOT include 
any cluster specifications. If the Indices attribute includes a cluster mapping, the consumer 
MUST NOT use the device font and MUST render the embedded version of the font [M5.19]. 

ECMA-388 
12. Text 
 
 First Edition, June 2009 
107 
This means that a device font cannot be used for characters outside the basic multilingual 
plane. 
If a device font name is specified, each of the <Glyphs> element’s  Indices glyphs MUST include 
a specified advance width and MUST include specified x and y offset values if they are non-zero 
[M5.20].  
12.1.8 xml:lang Attribute 
OpenXPS Document consumers might need to override the default language for a specific run of 
glyphs, particularly in multilingual documents. The language defaults to the value specified for 
the xml:lang attribute of the <FixedPage> element but MAY be overridden by an xml:lang 
attribute on a <Glyphs> element [O5.13]. For larger blocks of text, the producer MAY specify 
the xml:lang attribute on the <Canvas> element [M5.27]. 
The language specified does not affect rendering of <Glyphs> elements, but it can be used by 
consumers for searching or selecting text. For more information, see §9.3.5.  
12.1.9 CaretStops Attribute 
The CaretStops attribute contains an array of Boolean bit-flags, which is represented as a string 
of hexadecimal characters. The flags indicate whether it is legal to place the caret before the 
corresponding UTF-16 code unit in the UnicodeString attribute. (“Before” refers to a logical 
placement, not a physical placement.) [Example: If the flag is set in right-to-left text, the caret 
can be placed before (to the right of) that UTF-16 code unit. end example] The CaretStops 
attribute includes a final flag for placement of the caret following the final UTF-16 code unit in 
the Unicode string. 
Each hexadecimal character in the CaretStops value represents the flags for four UTF-16 code 
units in the Unicode string, with the highest-order bit representing the first UTF-16 code unit. 
Any unused bits in the last UTF-16 code unit must be 0. 
If the CaretStops attribute is omitted, it is legal to place the caret before any of the UTF-16 code 
units in the Unicode string. Therefore, omitting the CaretStops attribute is equivalent to 
specifying a string that has all the bits set to 1. If there are insufficient flags in the CaretStops 
string to correspond to all the UTF-16 code units in the Unicode string, all remaining UTF-16 
code units in the Unicode string MUST be considered valid caret stops [M5.22]. 
Example 12–12. Using the CaretStops attribute to determine a valid caret stop position 
Given the following attributes, the m in “example” is not a valid caret stop position: 
UnicodeString = "This is an example string of text." 
CaretStops = "fffd" 
end example] 
12.1.10 
Optimizing Glyph Markup 
Markup details such as glyph indices and advance widths can be omitted from the markup 
under the circumstances described below. The following options allow optimization of commonly 
used simple scripts. 
12.1.10.1 Optimizing Glyph Indices Markup 
Glyph indices MAY be omitted from markup where all of the following are true [O5.4]: 

12. Text 
ECMA-388 
108 
First Edition, June 2009 
• There is a one-to-one mapping between the positions of Unicode scalar values in the 
UnicodeString attribute and the positions of glyphs in the glyph string.  
• The glyph index is the value in selected character mapping table of the font.  
12.1.10.2 Optimizing Glyph Position Markup 
Glyph advance width MAY be omitted from the markup in the following cases [O5.5]: 
• For glyphs that have not been algorithmically emboldened, the desired advance width is 
the value listed in the horizontal metrics font table (if the IsSideways attribute value is 
false) or as calculated in §12.1.6.1 (if the IsSideways attribute value is true). 
• For algorithmically emboldened glyphs, the desired advance width is exactly 2% larger 
than the values in the horizontal metrics font table (if the IsSideways attribute value is 
false) or as calculated in §12.1.6.1 (if the IsSideways attribute value is true). 
Glyph horizontal offset MAY be omitted from the markup when the offset is 0.0, and Glyph 
vertical offset MAY be omitted from the markup when the offset is 0.0 [O5.6]. This is almost 
always true for base characters, and commonly true for combining marks in simple scripts. 
However, this is often false for combining marks in complex scripts such as Arabic and Indic. 
12.1.11 
Glyph Markup Examples 
Example 12–13. Basic italic font 
<Canvas> 
   <Glyphs  
      FontUri="../Resources/Fonts/Timesi.ttf"  
      FontRenderingEmSize="20" 
      OriginX="35" 
      OriginY="35" 
      UnicodeString="Basic italic font..." 
      Fill="#009900" /> 
</Canvas> 
This text is rendered as follows: 
  
end example] 
Example 12–14. Italic font using StyleSimulations attribute 
<Canvas> 
   <Glyphs  
      FontUri="../Resources/Fonts/Times.ttf"  
      FontRenderingEmSize="20" 
      StyleSimulations="ItalicSimulation" 
      OriginX="35" 
      OriginY="35" 
      UnicodeString="Simulated italic font..." 
      Fill="#009900" /> 
</Canvas> 

ECMA-388 
12. Text 
 
 First Edition, June 2009 
109 
This text is rendered as follows: 
  
end example] 
Example 12–15. Kerning 
<Canvas> 
 
   <!-- "WAVE" without kerning --> 
 
   <Glyphs  
      OriginX="35"  
      OriginY="35" 
      UnicodeString="WAVE (no kerning)" 
      FontUri="../Resources/Fonts/Times.ttf" 
      FontRenderingEmSize="20" 
      Fill="#009900" /> 
 
   <!-- "WAVE" with kerning --> 
 
   <Glyphs  
      OriginX="35"  
      OriginY="70" 
      UnicodeString="WAVE (with kerning)" 
      Indices=",88;,59" 
      FontUri="../Resources/Fonts/Times.ttf" 
      FontRenderingEmSize="20" 
      Fill="#009900" /> 
 
</Canvas> 
This text is rendered as follows: 
  
end example] 
Example 12–16. Ligatures 
<Canvas> 
 
   <!-- "Open file" without "fi" ligature --> 
 
   <Glyphs 
      OriginX="35"  
      OriginY="35" 
      UnicodeString="Open file (no ligature)" 
      FontUri="../Resources/Fonts/Times.ttf" 

12. Text 
ECMA-388 
110 
First Edition, June 2009 
      FontRenderingEmSize="20" 
      Fill="#009900" /> 
 
   <!-- "Open file" with "fi" ligature --> 
 
   <Glyphs 
      OriginX="35"  
      OriginY="70" 
      UnicodeString="Open file (with ligature)" 
      Indices=";;;;;(2:1)191" 
      FontUri="../Resources/Fonts/Times.ttf" 
      FontRenderingEmSize="20" 
      Fill="#009900" /> 
 
</Canvas> 
This text is rendered as follows: 
  
end example] 
Example 12–17. Cluster maps 
<Canvas> 
 
   <!-- "ёжик в тумане" using pre-composed "ё" --> 
 
   <Glyphs  
      OriginX="35"  
      OriginY="35" 
      xml:lang="ru-RU" 
      UnicodeString="ёжик в тумане" 
      FontUri="../Resources/Fonts/Times.ttf" 
      FontRenderingEmSize="20" 
      Fill="#009900" /> 
 
   <!-- "ёжик в тумане" using composition of "e" and diaeresis --> 
 
   <Glyphs  
      OriginX="35"  
      OriginY="70" 
      xml:lang="ru-RU" 
      UnicodeString="ёжик в тумане" 
      Indices="(1:2)72;142,0,-40" 
      FontUri="../Resources/Fonts/Times.ttf" 
      FontRenderingEmSize="20" 
      Fill="#009900" /> 
 
   <!-- "ёжик в тумане" Forced rendering right-to-left showing 
   combining mark in logical order --> 

ECMA-388 
12. Text 
 
 First Edition, June 2009 
111 
 
   <Glyphs  
      OriginX="155"  
      OriginY="105" 
      BidiLevel="1" 
      xml:lang="ru-RU" 
      UnicodeString="ёжик в тумане" 
      Indices="(1:2)72;142,0,-40" 
      FontUri="../Resources/Fonts/Times.ttf" 
      FontRenderingEmSize="20" 
      Fill="#009900" /> 
 
</Canvas> 
This text is rendered as follows: 
  
end example] 
12.2 <Glyphs.Fill> Element 
element Glyphs.Fill 
diagram 
annotation Describes the brush used to fill the shape of the rendered glyphs. 
The Fill property specifies the brush that fills a glyph. Any brush can be used.  
 


ECMA-388 
13. Brushes 
 
 First Edition, June 2009 
113 
13. Brushes 
Brushes are used to paint the interior of the geometric shapes defined by a <Path> element 
and the characters rendered with a <Glyphs> element. They are also used to define the alpha-
transparency mask in the <Canvas.OpacityMask>, <Path.OpacityMask>, and 
<Glyphs.OpacityMask> property elements. 
All brushes are defined relative to a coordinate space. Most brushes (including image brushes, 
visual brushes, linear gradient brushes, and radial gradient brushes) can specify a coordinate-
space transform, in which the Transform property is concatenated with the current effective 
coordinate space to yield an effective coordinate space local to the brush. For image brushes 
and visual brushes, the viewport is transformed using the local effective render transform. For 
linear gradient brushes, the start point and end point are transformed. For radial gradient 
brushes, the ellipse defined by the center, x radius, y radius, and gradient origin is 
transformed. 
Table 13–1. Brush types 
Name 
Description 
Solid color brush 
Fills a region with a solid color 
Image brush 
Fills a region with an image 
Visual brush 
Fills a region with a drawing 
Linear gradient brush Fills a region with a linear gradient 
Radial gradient brush Fills a region with a radial gradient 
13.1 <SolidColorBrush> Element 
element SolidColorBrush 
diagram 
attributes Name   
Type   
Use   
Default   Fixed   Annotation 
Opacity   ST_ZeroOne     
1.0   
   
Defines the uniform transparency of the brush fill. Values 
range from 0 (fully transparent) to 1 (fully opaque), 
inclusive. Values outside of this range are invalid. 

13. Brushes 
ECMA-388 
114 
First Edition, June 2009 
x:Key    
   
   
   
Specifies a name for a resource in a resource dictionary. 
x:Key MUST be present when the current element is defined 
in a resource dictionary. x:Key MUST NOT be specified 
outside of a resource dictionary [M6.1]. 
Color   
ST_Color  
required      
   
Specifies the color for filled elements. 
annotation Fills defined geometric regions with a solid color. 
The <SolidColorBrush> element is used to fill defined geometric regions with a solid color. If 
there is an alpha component of the color, it is combined in a multiplicative way with the 
corresponding Opacity attribute. 
Example 13–1. <SolidColorBrush> usage 
The following markup illustrates how a solid color brush fills a path. 
<Path Stroke="#000000"> 
   <Path.Fill> 
      <SolidColorBrush Color="#00FFFF" /> 
   </Path.Fill> 
   <Path.Data> 
      <PathGeometry> 
         <PathFigure StartPoint="20,20" IsClosed="true"> 
            <PolyLineSegment Points="250,20 135,150" /> 
         </PathFigure> 
      </PathGeometry> 
   </Path.Data> 
</Path> 
This markup is rendered as follows: 
  
end example] 

ECMA-388 
13. Brushes 
 
 First Edition, June 2009 
115 
13.2 <ImageBrush> Element 
element ImageBrush 
diagram 
attributes Name   
Type   
Use   
Default   Fixed   
Annotation 
Opacity   
ST_ZeroOne  
   
1.0   
   
Defines the uniform transparency of the brush 
fill. Values range from 0 (fully transparent) to 
1 (fully opaque), inclusive. Values outside of 
this range are invalid. 
x:Key   
 
   
   
   
Specifies a name for a resource in a resource 
dictionary. x:Key MUST be present when the 
current element is defined in a resource 
dictionary. x:Key MUST NOT be specified 
outside of a resource dictionary [M6.2]. 
Transform   
ST_RscRefMatrix     
   
   
Describes the matrix transformation applied 
to the coordinate space of the brush. The 
Transform property is concatenated with the 
current effective render transform to yield an 
effective render transform local to the brush. 
The viewport for the brush is transformed 
using the local effective render transform. 
Viewbox   
ST_ViewBox  
required      
   
Specifies the position and dimensions of the 
brush's source content. Specifies four comma-
separated real numbers (x, y, width, height), 
where width and height are non-negative. The 
dimensions specified are relative to the 
image’s physical dimensions expressed in 

13. Brushes 
ECMA-388 
116 
First Edition, June 2009 
units of 1/96". The corners of the viewbox are 
mapped to the corners of the viewport, 
thereby providing the default clipping and 
transform for the brush’s source content. 
Viewport   
ST_ViewBox  
required      
   
Specifies the region in the containing 
coordinate space of the prime brush tile that 
is (possibly repeatedly) applied to fill the 
region to which the brush is applied. Specifies 
four comma-separated real numbers (x, y, 
width, height), where width and height are 
non-negative. The alignment of the brush 
pattern is controlled by adjusting the x and y 
values. 
TileMode   
ST_TileMode  
   
None   
   
Specifies how contents will be tiled in the 
filled region. Valid values are None, Tile, 
FlipX, FlipY, and FlipXY. 
ViewboxUnits   ST_ViewUnits  
required      
Absolute   Specifies the relationship of the viewbox 
coordinates to the containing coordinate 
space. 
ViewportUnits   ST_ViewUnits  
required      
Absolute   Specifies the relationship of the viewport 
coordinates to the containing coordinate 
space. 
ImageSource   ST_UriCtxBmp  
required      
   
Specifies the URI of an image resource or a 
combination of the URI of an image resource 
a color profile resource. See §15.3.7. The URI 
MUST refer to parts in the package [M2.1]. 
annotation Fills a region with an image. 
The <ImageBrush> element is used to fill a region with an image. The image is defined in a 
coordinate space specified by the resolution of the image. The image MUST refer to a JPEG, 
PNG, TIFF, or JPEG XR image part within the OpenXPS Document package [M6.3]. For more 
information, see §9.1.5 and §15.3. A URI part name for the image is specified using the 
ImageSource attribute. 
Image brushes share a number of tile-related properties with visual brushes. For details, 
see §13.4. 
Example 13–2. <ImageBrush> usage 
The following markup describes an image on a canvas.  
<Canvas> 
   <Path Stroke="#008000"> 
      <Path.Fill> 
         <ImageBrush  
            ImageSource="dog.jpg"  

ECMA-388 
13. Brushes 
 
 First Edition, June 2009 
117 
            TileMode="None"  
            Viewbox="0,0,270,423"  
            ViewboxUnits="Absolute" 
            Viewport="25,25,125,185" 
            ViewportUnits="Absolute" /> 
      </Path.Fill> 
      <Path.Data> 
         <PathGeometry> 
            <PathFigure StartPoint="25,25" IsClosed="true"> 
               <PolyLineSegment Points="150,25 150,210 25,210" /> 
            </PathFigure> 
         </PathGeometry> 
      </Path.Data> 
   </Path> 
</Canvas> 
This markup produces the following results: 
  
end example] 

13. Brushes 
ECMA-388 
118 
First Edition, June 2009 
13.3 <VisualBrush> Element 
element VisualBrush 
diagram 
attributes Name   
Type   
Use   
Default   Fixed   
Annotation 
Opacity   
ST_ZeroOne  
   
1.0   
   
Defines the uniform transparency of the brush 
fill. Values range from 0 (fully transparent) to 
1 (fully opaque), inclusive. Values outside of 
this range are invalid. 
x:Key   
 
   
   
   
Specifies a name for a resource in a resource 
dictionary. x:Key MUST be present when the 
current element is defined in a resource 
dictionary. x:Key MUST NOT be specified 
outside of a resource dictionary [M6.4]. 
Transform   
ST_RscRefMatrix     
   
   
Describes the matrix transformation applied 
to the coordinate space of the brush. The 
Transform property is concatenated with the 
current effective render transform to yield an 
effective render transform local to the brush. 
The viewport for the brush is transformed 
using that local effective render transform. 
Viewbox   
ST_ViewBox  
required      
   
Specifies the position and dimensions of the 
brush's source content. Specifies four comma-
separated real numbers (x, y, width, height), 
where width and height are non-negative. The 

ECMA-388 
13. Brushes 
 
 First Edition, June 2009 
119 
viewbox defines the default coordinate system 
for the element specified in the 
<VisualBrush.Visual> property element. The 
corners of the viewbox are mapped to the 
corners of the viewport, thereby providing the 
default clipping and transform for the brush’s 
source content. 
Viewport   
ST_ViewBox  
required      
   
Specifies the region in the containing 
coordinate space of the prime brush tile that 
is (possibly repeatedly) applied to fill the 
region to which the brush is applied. Specifies 
four comma-separated real numbers (x, y, 
width, height), where width and height are 
non-negative. The alignment of the brush 
pattern is controlled by adjusting the x and y 
values. 
TileMode   
ST_TileMode  
   
None   
   
Specifies how contents will be tiled in the 
filled region. Valid values are None, Tile, 
FlipX, FlipY, and FlipXY. 
ViewboxUnits   ST_ViewUnits  
required      
Absolute   Specifies the relationship of the viewbox 
coordinates to the containing coordinate 
space. 
ViewportUnits   ST_ViewUnits  
required      
Absolute   Specifies the relationship of the viewport 
coordinates to the containing coordinate 
space. 
Visual   
ST_RscRef  
   
   
   
Specifies resource reference to a <Path>, 
<Glyphs>, or <Canvas> element defined in a 
resource dictionary and used to draw the 
brush’s source content. 
annotation Fills a region with a drawing. The drawing can be specified as either a child of the <VisualBrush> element, or as 
a resource reference. Drawing content is expressed using <Canvas>, <Path>, and <Glyphs> elements. 
The <VisualBrush> element is used to fill a region with a drawing. The drawing can be specified 
as either a <VisualBrush.Visual> property element or as a resource reference. Drawing content 
can include exactly one <Canvas>, <Path>, or <Glyphs> element and that element’s child and 
descendant elements. 
Visual brushes share a number of tile-related properties with image brushes. For details, 
see §13.4. 

13. Brushes 
ECMA-388 
120 
First Edition, June 2009 
13.3.1 <VisualBrush.Visual> Element 
element VisualBrush.Visual 
diagram 
annotation Specifies a <Path> element, <Glyphs> element, or <Canvas> element used to draw the brush’s source 
contents. 
The <VisualBrush.Visual> property element contains markup that defines the contents of a 
single visual brush tile. The tile can be used to fill the geometric region to which the visual 
brush is applied. The <VisualBrush.Visual> property element contains a single child element. 
For simple tiles, this can be a single <Path> or <Glyphs> element. More complex visuals 
containing multiple <Path> and <Glyphs> elements can be grouped within a <Canvas> child 
element. 
Example 13–3. <VisualBrush.Visual> usage 
<Path> 
   <Path.Fill> 
      <VisualBrush  
         Viewbox="0,0,1,1"  
         Viewport="50,50,100,100"  
         ViewportUnits="Absolute"  
         ViewboxUnits="Absolute"  
         TileMode="Tile"> 
         <VisualBrush.Visual> 
            <Path> 
               <Path.Fill> 
                  <SolidColorBrush Color="#FF0000" /> 
               </Path.Fill> 
               <Path.Data> 
                  <PathGeometry> 
                     <PathFigure StartPoint="0,0.5" IsClosed="true"> 
                        <PolyLineSegment Points="0.5,0 1.0,0.5  
                           0.5,1.0" /> 
                     </PathFigure> 
                  </PathGeometry> 
               </Path.Data> 
            </Path> 
         </VisualBrush.Visual> 
      </VisualBrush> 
   </Path.Fill> 
   <Path.Data> 
      <PathGeometry> 
         <PathFigure StartPoint="50,50" IsClosed="true"> 
            <PolyLineSegment Points="350,50 350,350 50,350" /> 
         </PathFigure> 
      </PathGeometry> 

ECMA-388 
13. Brushes 
 
 First Edition, June 2009 
121 
   </Path.Data> 
</Path> 
This markup produces the following result: 
  
end example] 
13.4 Common Attributes for Tiling Brushes 
Image brushes and Visual brushes share certain tiling characteristics. These characteristics are 
controlled by a common set of attributes described in the table below. 
Table 13–2. Common attributes for <ImageBrush> and <VisualBrush> elements 
Name 
Description 
Viewbox 
Specifies the region of the source content of the brush that is to be 
mapped to the viewport. 
Viewport 
Specifies the position and dimensions of the first brush tile. 
Subsequent tiles are positioned relative to this tile, as specified by 
the tile mode.  
ViewboxUnits 
Specifies the unit type for the Viewbox attribute. MUST have the 
value “Absolute” [M6.7]. 
ViewportUnits 
Specifies the unit type for the Viewport attribute. MUST have the 
value “Absolute” [M6.8]. 
TileMode 
Specifies how tiling is performed in the filled geometry. The value is 
optional, and defaults to “None” if no value is specified.  

13. Brushes 
ECMA-388 
122 
First Edition, June 2009 
Both image brushes and visual brushes assume that the background of the brush itself is 
initially transparent. 
13.4.1 Viewbox, Viewport, ViewboxUnits, and ViewportUnits Attributes 
The Viewbox attribute specifies the portion of a source image or visual to be rendered to the 
page as a tile. The Viewport attribute specifies the dimensions and location, in the effective 
coordinate space, of the initial tile that will be filled with the specified image or visual fragment. 
In other words, the Viewport attribute defines the initial tile whose origin (x and y values of the 
top left corner of the tile relative to the current effective render transform) is specified by the 
first two parameters and whose size (width and height values) is specified by the last two 
parameters. The tile is then used to fill the geometry specified by the parent element according 
to the TileMode attribute relative to the initial tile.  
For images, the dimensions specified by the viewbox are expressed in units of 1/96". The pixel 
coordinates in the source image are calculated as follows, where HorizontalImageResolution 
and VerticalImageResolution are specified in dpi: 
SourceLeft = HorizontalImageResolution * Viewbox.Left / 96 
SourceTop = VerticalImageResolution * Viewbox.Top / 96 
SourceWidth = HorizontalImageResolution * Viewbox.Width / 96 
SourceHeight = VerticalImageResolution * Viewbox.Height / 96 
The image resolution used is that specified in the header or tag information of the image. If no 
resolution is specified, a default resolution of 96 dpi is assumed. The coordinates of the upper-
left corner of the image are 0,0. 
The viewbox can specify a region larger than the image itself, including negative values. 
Example 13–4. ViewboxUnits and ViewportUnits attribute usage 
The following markup contains an image brush: 
<ImageBrush  
   ImageSource="../Resources/Images/tiger.jpg"  
   Viewbox="24,24,48,48"  
   ViewboxUnits="Absolute"  
   Viewport="96,96,192,192"  
   ViewportUnits="Absolute"  
   TileMode="None" /> 
Assuming the default fixed page coordinate system and that tiger.jpg specifies a resolution of 
50 dpi and measures 100 pixels horizontally and 50 pixels vertically, the physical dimensions of 
the image are expressed (in units of 1/96") as 96 * 100 / 50 = 192 horizontal and 96 * 50 / 50 
= 96 vertical. 
The viewbox uses a square starting at 24,24 (a quarter-inch from left and a quarter-inch from 
top) in the image, and extending for 48,48 (a half-inch to the right and a half-inch down) and 
scales it to a square starting at one inch from the left edge of the physical page and one inch 
from the top of the physical page and extending two inches to the right and two inches down. 
end example] 
13.4.1.1 Viewbox and Viewport Examples 
The following examples demonstrate how adjusting the viewbox and viewport can affect output. 

ECMA-388 
13. Brushes 
 
 First Edition, June 2009 
123 
Example 13–5. Tiling brush base image and rendering 
The following markup describes a base image. 
<!-- Draw background diamond to show where fill affects background --> 
<Path Fill="#CCCC66" Data="M 150,0 L 300,150 L 150,300 L 0,150 Z" /> 
<Path Data="M 150,0 L 300,150 L 150,300 L 0,150 Z"> 
   <Path.Fill> 
      <VisualBrush  
         Viewbox="0,0,1,1"  
         Viewport="150,75,50,50"  
         ViewboxUnits="Absolute"  
         ViewportUnits="Absolute"  
         TileMode="Tile"> 
         <VisualBrush.Visual> 
            <Canvas> 
               <Path Fill="#333399" Data="M 0.1,0.1 L 0.9,0.1 L 0.9,0.9  
                  L 0.1,0.9 Z" /> 
               <Path Fill="#FFFF00" Data="M 0.1,0.35 L 0.35,0.1  
                  L 0.6,0.35 L 0.35,0.6 Z" /> 
            </Canvas> 
         </VisualBrush.Visual> 
      </VisualBrush> 
   </Path.Fill> 
</Path> 
This markup is rendered as follows: 
  
end example] 
Example 13–6. Tiling brush Viewport adjustments 
By adjusting the viewport, the position of the tiles within the image can be changed: 
<!-- Draw background diamond to show where fill affects background --> 
<Path Fill="#CCCC66" Data="M 150,0 L 300,150 L 150,300 L 0,150 Z" /> 
<Path Data="M 150,0 L 300,150 L 150,300 L 0,150 Z"> 

13. Brushes 
ECMA-388 
124 
First Edition, June 2009 
   <Path.Fill> 
      <VisualBrush  
         Viewbox="0,0,1,1"  
         Viewport="125,125,50,50"  
         ViewboxUnits="Absolute"  
         ViewportUnits="Absolute"  
         TileMode="Tile"> 
         <VisualBrush.Visual> 
            <Canvas> 
               <Path Fill="#333399" Data="M 0.1,0.1 L 0.9,0.1 L 0.9,0.9  
                  L 0.1,0.9 Z" /> 
               <Path Fill="#FFFF00" Data="M 0.1,0.35 L 0.35,0.1  
                  L 0.6,0.35 L 0.35,0.6 Z" /> 
            </Canvas> 
         </VisualBrush.Visual> 
      </VisualBrush> 
   </Path.Fill> 
</Path> 
This markup is rendered as follows: 
  
end example] 
Example 13–7. Tiling brush viewbox adjustments 
The following markup uses a smaller window on the viewbox to zoom in on each tile: 
<!-- Draw background diamond to show where fill affects background --> 
<Path Fill="#CCCC66" Data="M 150,0 L 300,150 L 150,300 L 0,150 Z" /> 
<Path Data="M 150,0 L 300,150 L 150,300 L 0,150 Z"> 
   <Path.Fill> 
      <VisualBrush  
         Viewbox="0.25,0.25,0.75,0.75"  
         Viewport="150,75,50,50"  
         ViewboxUnits="Absolute"  
         ViewportUnits="Absolute"  

ECMA-388 
13. Brushes 
 
 First Edition, June 2009 
125 
         TileMode="Tile"> 
         <VisualBrush.Visual> 
            <Canvas> 
               <Path Fill="#333399" Data="M 0.1,0.1 L 0.9,0.1 L 0.9,0.9  
                  L 0.1,0.9 Z" /> 
               <Path Fill="#FFFF00" Data="M 0.1,0.35 L 0.35,0.1  
                  L 0.6,0.35 L 0.35,0.6 Z" /> 
            </Canvas> 
         </VisualBrush.Visual> 
      </VisualBrush> 
   </Path.Fill> 
</Path> 
This markup is rendered as follows: 
  
end example] 
Example 13–8. Image brush with a Viewbox larger than the image 
An image brush can specify a tile with the Viewbox attribute that exceeds the size of the image 
it uses, including negative values, as shown below. 
<Path Fill="#CCCCCC" Data="M 10,10 L 265,10 L 265,125 L 10,125 Z" /> 
<Path Stroke="#803333" StrokeThickness="3"  
 
Data="M 25,25 L 250,25 L 250,200 L 25,200 Z"> 
 
<Path.Fill> 
 
 
<ImageBrush ImageSource="../Resources/Images/dog.jpg" 
 
 
 
TileMode="Tile"  
 
 
 
Viewbox="-10,-10,290,443" ViewboxUnits="Absolute"  
 
 
 
Viewport="50,50,90,125" ViewportUnits="Absolute" /> 
 
</Path.Fill> 
</Path> 

13. Brushes 
ECMA-388 
126 
First Edition, June 2009 
This markup is rendered as follows. Note that the area around the image is transparent, 
revealing the underlying path between the tiles. 
  
end example] 
13.4.2 TileMode Attribute 
Valid values for the TileMode attribute are None, Tile, FlipX, FlipY, and FlipXY. 
13.4.2.1 None 
In this mode, only the single base tile is drawn. The remaining area is left transparent. 
Example 13–9. Image brush with TileMode value of None 
<!-- Draw background diamond to show where fill affects background --> 
<Path Fill="#CCCC66" Data="M 200,0 L 400,200 L 200,400 L 0,200 Z" /> 
<Path Data="M 200,0 L 400,200 L 200,400 L 0,200 Z"> 
   <Path.Fill> 
      <ImageBrush  
         ImageSource="newspaper.png"  
         Viewbox="0,0,350,284"  
         Viewport="200,100,87,71"  
         ViewportUnits="Absolute" 
         ViewboxUnits="Absolute"  
         TileMode="None" /> 
   </Path.Fill> 
</Path> 

ECMA-388 
13. Brushes 
 
 First Edition, June 2009 
127 
This markup is rendered as follows: 
  
end example] 

13. Brushes 
ECMA-388 
128 
First Edition, June 2009 
Example 13–10. Visual brush with TileMode value of None 
<!-- Draw background diamond to show where fill affects background --> 
<Path Fill="#CCCC66" Data="M 200,0 L 400,200 L 200,400 L 0,200 Z" /> 
<Path Data="M 200,0 L 400,200 L 200,400 L 0,200 Z"> 
   <Path.Fill> 
      <VisualBrush  
         Viewbox="0,0,1,1"  
         Viewport="200,133,67,67"  
         ViewboxUnits="Absolute"  
         ViewportUnits="Absolute"  
         TileMode="None"> 
         <VisualBrush.Visual> 
            <Canvas> 
               <Path Fill="#333399" Data="M 0.1,0.1 L 0.9,0.1 L 0.9,0.9  
                  L 0.1,0.9 Z" /> 
               <Path Fill="#FFFF00" Data="M 0.1,0.35 L 0.35,0.1  
                  L 0.6,0.35 L 0.35,0.6 Z" /> 
            </Canvas> 
         </VisualBrush.Visual> 
      </VisualBrush> 
   </Path.Fill> 
</Path> 
This markup is rendered as follows: 
  
end example] 

ECMA-388 
13. Brushes 
 
 First Edition, June 2009 
129 
13.4.2.2 Tile 
In this mode, the base tile is drawn and the remaining area is filled by repeating the base tile 
such that the right edge of each tile abuts the left edge of the next, and the bottom edge of 
each tile abuts the top edge of the next. 
Example 13–11. Image brush with a TileMode value of Tile  
<!-- Draw background diamond to show where fill affects background --> 
<Path Fill="#CCCC66" Data="M 200,0 L 400,200 L 200,400 L 0,200 Z" /> 
<Path Data="M 200,0 L 400,200 L 200,400 L 0,200 Z"> 
   <Path.Fill> 
      <ImageBrush  
         ImageSource="newspaper.png"  
         Viewbox="0,0,350,284"  
         Viewport="200,100,87,71"  
         ViewportUnits="Absolute" 
         ViewboxUnits="Absolute"  
         TileMode="Tile" /> 
   </Path.Fill> 
</Path> 
This markup is rendered as follows: 
  
end example] 

13. Brushes 
ECMA-388 
130 
First Edition, June 2009 
Example 13–12. Visual brush with a TileMode value of Tile 
<!-- Draw background diamond to show where fill affects background --> 
<Path Fill="#CCCC66" Data="M 200,0 L 400,200 L 200,400 L 0,200 Z" /> 
<Path Data="M 200,0 L 400,200 L 200,400 L 0,200 Z"> 
   <Path.Fill> 
      <VisualBrush  
         Viewbox="0,0,1,1"  
         Viewport="200,133,67,67"  
         ViewboxUnits="Absolute"  
         ViewportUnits="Absolute"  
         TileMode="Tile"> 
         <VisualBrush.Visual> 
            <Canvas> 
               <Path Fill="#333399" Data="M 0.1,0.1 L 0.9,0.1 L 0.9,0.9  
                  L 0.1,0.9 Z" /> 
               <Path Fill="#FFFF00" Data="M 0.1,0.35 L 0.35,0.1  
                  L 0.6,0.35 L 0.35,0.6 Z" /> 
            </Canvas> 
         </VisualBrush.Visual> 
      </VisualBrush> 
   </Path.Fill> 
</Path> 
This markup is rendered as follows: 
  
end example] 

ECMA-388 
13. Brushes 
 
 First Edition, June 2009 
131 
13.4.2.3 FlipX 
The tile arrangement is similar to the Tile tile mode, but alternate columns of tiles are flipped 
horizontally. The base tile is positioned as specified by the viewport. Tiles in the columns to the 
left and right of this tile are flipped horizontally. 
Example 13–13. Image brush with a TileMode value of FlipX  
<!-- Draw background diamond to show where fill affects background --> 
<Path Fill="#CCCC66" Data="M 200,0 L 400,200 L 200,400 L 0,200 Z" /> 
<Path Data="M 200,0 L 400,200 L 200,400 L 0,200 Z"> 
   <Path.Fill> 
      <ImageBrush  
         ImageSource="newspaper.png"  
         Viewbox="0,0,350,284"  
         Viewport="200,100,87,71"  
         ViewportUnits="Absolute" 
         ViewboxUnits="Absolute"  
         TileMode="FlipX" /> 
   </Path.Fill> 
</Path> 
This markup is rendered as follows: 
  
end example] 

13. Brushes 
ECMA-388 
132 
First Edition, June 2009 
Example 13–14. Visual brush with a TileMode value of FlipX  
<!-- Draw background diamond to show where fill affects background --> 
<Path Fill="#CCCC66" Data="M 200,0 L 400,200 L 200,400 L 0,200 Z" /> 
<Path Data="M 200,0 L 400,200 L 200,400 L 0,200 Z"> 
   <Path.Fill> 
      <VisualBrush  
         Viewbox="0,0,1,1"  
         Viewport="200,133,67,67"  
         ViewboxUnits="Absolute"  
         ViewportUnits="Absolute"  
         TileMode="FlipX"> 
         <VisualBrush.Visual> 
            <Canvas> 
               <Path Fill="#333399" Data="M 0.1,0.1 L 0.9,0.1 L 0.9,0.9  
                  L 0.1,0.9 Z" /> 
               <Path Fill="#FFFF00" Data="M 0.1,0.35 L 0.35,0.1  
                  L 0.6,0.35 L 0.35,0.6 Z" /> 
            </Canvas> 
         </VisualBrush.Visual> 
      </VisualBrush> 
   </Path.Fill> 
</Path> 
This markup is rendered as follows: 
  
end example] 

ECMA-388 
13. Brushes 
 
 First Edition, June 2009 
133 
13.4.2.4 FlipY 
The tile arrangement is similar to the Tile tile mode, but alternate rows of tiles are flipped 
vertically. The base tile is positioned as specified by the viewport. Rows above and below are 
flipped vertically. 
Example 13–15. Image brush with a TileMode value of FlipY  
<!-- Draw background diamond to show where fill affects background --> 
<Path Fill="#CCCC66" Data="M 200,0 L 400,200 L 200,400 L 0,200 Z" /> 
<Path Data="M 200,0 L 400,200 L 200,400 L 0,200 Z"> 
   <Path.Fill> 
      <ImageBrush  
         ImageSource="newspaper.png"  
         Viewbox="0,0,350,284"  
         Viewport="200,100,87,71"  
         ViewportUnits="Absolute" 
         ViewboxUnits="Absolute"  
         TileMode="FlipY" /> 
   </Path.Fill> 
</Path> 
This markup is rendered as follows: 
  
end example] 

13. Brushes 
ECMA-388 
134 
First Edition, June 2009 
Example 13–16. Visual Brush with a TileMode value of FlipY  
<!-- Draw background diamond to show where fill affects background --> 
<Path Fill="#CCCC66" Data="M 200,0 L 400,200 L 200,400 L 0,200 Z" /> 
<Path Data="M 200,0 L 400,200 L 200,400 L 0,200 Z"> 
   <Path.Fill> 
      <VisualBrush  
         Viewbox="0,0,1,1"  
         Viewport="200,133,67,67"  
         ViewboxUnits="Absolute"  
         ViewportUnits="Absolute"  
         TileMode="FlipY"> 
         <VisualBrush.Visual> 
            <Canvas> 
               <Path Fill="#333399" Data="M 0.1,0.1 L 0.9,0.1 L 0.9,0.9  
                  L 0.1,0.9 Z" /> 
               <Path Fill="#FFFF00" Data="M 0.1,0.35 L 0.35,0.1  
                  L 0.6,0.35 L 0.35,0.6 Z" /> 
            </Canvas> 
         </VisualBrush.Visual> 
      </VisualBrush> 
   </Path.Fill> 
</Path> 
This markup is rendered as follows: 
  
end example] 

ECMA-388 
13. Brushes 
 
 First Edition, June 2009 
135 
13.4.2.5 FlipXY 
The tile arrangement is similar to the Tile tile mode, but alternate columns of tiles are flipped 
horizontally and alternate rows of tiles are flipped vertically. The base tile is positioned as 
specified by the viewport. 
Example 13–17. Image brush with a TileMode value of FlipXY  
<!-- Draw background diamond to show where fill affects background --> 
<Path Fill="#CCCC66" Data="M 200,0 L 400,200 L 200,400 L 0,200 Z" /> 
<Path Data="M 200,0 L 400,200 L 200,400 L 0,200 Z"> 
   <Path.Fill> 
      <ImageBrush  
         ImageSource="newspaper.png"  
         Viewbox="0,0,350,284"  
         Viewport="200,100,87,71"  
         ViewportUnits="Absolute" 
         ViewboxUnits="Absolute"  
         TileMode="FlipXY" /> 
   </Path.Fill> 
</Path> 
This markup is rendered as follows: 
  
end example] 

13. Brushes 
ECMA-388 
136 
First Edition, June 2009 
Example 13–18. Visual brush with a TileMode value of FlipXY   
<!-- Draw background diamond to show where fill affects background --> 
<Path Fill="#CCCC66" Data="M 200,0 L 400,200 L 200,400 L 0,200 Z" /> 
<Path Data="M 200,0 L 400,200 L 200,400 L 0,200 Z"> 
   <Path.Fill> 
      <VisualBrush  
         Viewbox="0,0,1,1"  
         Viewport="200,133,67,67"  
         ViewboxUnits="Absolute"  
         ViewportUnits="Absolute"  
         TileMode="FlipXY"> 
         <VisualBrush.Visual> 
            <Canvas> 
               <Path Fill="#333399" Data="M 0.1,0.1 L 0.9,0.1 L 0.9,0.9  
                  L 0.1,0.9 Z" /> 
               <Path Fill="#FFFF00" Data="M 0.1,0.35 L 0.35,0.1  
                  L 0.6,0.35 L 0.35,0.6 Z" /> 
            </Canvas> 
         </VisualBrush.Visual> 
      </VisualBrush> 
   </Path.Fill> 
</Path> 
This markup is rendered as follows: 
  
end example] 

ECMA-388 
13. Brushes 
 
 First Edition, June 2009 
137 
13.5 <LinearGradientBrush> Element 
element LinearGradientBrush 
diagram 
attributes Name   
Type   
Use   
Default   
Fixed   
Annotation 
Opacity   
ST_ZeroOne  
   
1.0   
   
Defines the uniform 
transparency of the linear 
gradient. Values range from 0 
(fully transparent) to 1 (fully 
opaque), inclusive. Values 
outside of this range are invalid. 
x:Key   
 
   
   
   
Specifies a name for a resource 
in a resource dictionary. x:Key 
MUST be present when the 
current element is defined in a 
resource dictionary. x:Key MUST 
NOT be specified outside of a 
resource dictionary [M6.5]. 
ColorInterpolationMode   ST_ClrIntMode     
SRgbLinear 
Interpolation   
   
Specifies the gamma function for 
color interpolation. The gamma 
adjustment should not be 
applied to the alpha component, 
if specified. Valid values are 
SRgbLinearInterpolation and 
ScRgbLinearInterpolation. 
SpreadMethod   
ST_Spread 
Method  
   
Pad   
   
Describes how the brush should 
fill the content area outside of 

13. Brushes 
ECMA-388 
138 
First Edition, June 2009 
the primary, initial gradient area. 
Valid values are Pad, Reflect and 
Repeat. 
MappingMode   
ST_Mapping 
Mode  
required      
Absolute   Specifies that the start point and 
end point are defined in the 
effective coordinate space 
(includes the Transform attribute 
of the brush). 
Transform   
ST_RscRef 
Matrix  
   
   
   
Describes the matrix 
transformation applied to the 
coordinate space of the brush. 
The Transform property on a 
brush is concatenated with the 
current effective render 
transform to yield an effective 
render transform local to the 
brush. The start point and end 
point are transformed using the 
local effective render transform. 
StartPoint   
ST_Point  
required      
   
Specifies the starting point of the 
linear gradient. 
EndPoint   
ST_Point  
required      
   
Specifies the end point of the 
linear gradient. The linear 
gradient brush interpolates the 
colors from the start point to the 
end point, where the start point 
represents an offset of 0, and 
the EndPoint represents an 
offset of 1. The Offset attribute 
value specified in a GradientStop 
element relates to the 0 and 1 
offsets defined by the start point 
and end point. 
annotation Fills a region with a linear gradient. 
The <LinearGradientBrush> element is used to specify a linear gradient brush along a vector. 
For details about computing a linear gradient, see §18.3.  
Example 13–19. <LinearGradientBrush> usage 
The following markup describes a page with a rectangular path that is filled with a linear 
gradient: 
<Path> 
   <Path.Fill> 
      <LinearGradientBrush  
         MappingMode="Absolute"  
         StartPoint="0,0"  

ECMA-388 
13. Brushes 
 
 First Edition, June 2009 
139 
         EndPoint="300,300"> 
         <LinearGradientBrush.GradientStops> 
            <GradientStop Color="#FFFF00" Offset="0" /> 
            <GradientStop Color="#0000FF" Offset="1" /> 
         </LinearGradientBrush.GradientStops> 
      </LinearGradientBrush> 
   </Path.Fill> 
   <Path.Data> 
      <PathGeometry> 
         <PathFigure StartPoint="0,0"> 
            <PolyLineSegment Points="300,0 300,300 0,300" /> 
         </PathFigure> 
      </PathGeometry> 
   </Path.Data> 
</Path> 
This markup is rendered as follows: 
  
end example] 
13.5.1 SpreadMethod Attribute 
The SpreadMethod attribute describes the fill for areas beyond the start point and end point of 
the linear gradient brush. Valid values are Pad, Reflect, and Repeat. For details see §18.3.2. 
Example 13–20. Linear gradient brush with a SpreadMethod value of Pad  
In this method, the first color and the last color are used to fill the remaining fill area at the 
beginning and end. 
<Path Data="M 150,0 L 300,150 L 150,300 L 0,150 Z"> 
   <Path.Fill> 
      <LinearGradientBrush  
         MappingMode="Absolute"  
         StartPoint="120,0"  
         EndPoint="180,0"  

13. Brushes 
ECMA-388 
140 
First Edition, June 2009 
         SpreadMethod="Pad"> 
         <LinearGradientBrush.GradientStops> 
            <GradientStop Color="#FFFF00" Offset="0.0" /> 
            <GradientStop Color="#0000FF" Offset="1.0" /> 
         </LinearGradientBrush.GradientStops> 
      </LinearGradientBrush> 
   </Path.Fill> 
</Path> 
This markup is rendered as follows: 
  
end example] 
Example 13–21. Linear gradient brush with a SpreadMethod value of Reflect  
In this method, the gradient stops are replayed in reverse order repeatedly to cover the fill 
area. 
<Path Data="M 150,0 L 300,150 L 150,300 L 0,150 Z"> 
   <Path.Fill> 
      <LinearGradientBrush  
         MappingMode="Absolute"  
         StartPoint="120,0"  
         EndPoint="180,0"  
         SpreadMethod="Reflect"> 
         <LinearGradientBrush.GradientStops> 
            <GradientStop Color="#FFFF00" Offset="0.0" /> 
            <GradientStop Color="#0000FF" Offset="1.0" /> 
         </LinearGradientBrush.GradientStops> 
      </LinearGradientBrush> 
   </Path.Fill> 
</Path> 

ECMA-388 
13. Brushes 
 
 First Edition, June 2009 
141 
This markup is rendered as follows: 
  
end example] 
Example 13–22. Linear gradient brush with a SpreadMethod value of Repeat 
In this method, the gradient stops are repeated in order until the fill area is covered. 
<Path Data="M 150,0 L 300,150 L 150,300 L 0,150 Z"> 
   <Path.Fill> 
      <LinearGradientBrush  
         MappingMode="Absolute"  
         StartPoint="120,0"  
         EndPoint="180,0"  
         SpreadMethod="Repeat"> 
         <LinearGradientBrush.GradientStops> 
            <GradientStop Color="#FFFF00" Offset="0.0" /> 
            <GradientStop Color="#0000FF" Offset="1.0" /> 
         </LinearGradientBrush.GradientStops> 
      </LinearGradientBrush> 
   </Path.Fill> 
</Path> 

13. Brushes 
ECMA-388 
142 
First Edition, June 2009 
This markup is rendered as follows: 
  
end example] 
13.5.2 <LinearGradientBrush.GradientStops> Element 
element LinearGradientBrush.GradientStops 
diagram 
 
annotation Holds a sequence of GradientStop elements. 
 
The <LinearGradientBrush.GradientStops> property element specifies a collection of gradient 
stops that comprise the linear gradient. For more information, see §13.7. 

ECMA-388 
13. Brushes 
 
 First Edition, June 2009 
143 
13.6 <RadialGradientBrush> Element 
element RadialGradientBrush 
diagram 
 
attributes Name   
Type   
Use   
Default   
Fixed   
Annotation 
Opacity   
ST_ZeroOne  
   
1.0   
   
Defines the uniform 
transparency of the radial 
gradient. Values range from 0 
(fully transparent) to 1 (fully 
opaque), inclusive. Values 
outside of this range are invalid. 
x:Key   
 
   
   
   
Specifies a name for a resource 
in a resource dictionary. x:Key 
MUST be present when the 
current element is defined in a 
resource dictionary. x:Key MUST 
NOT be specified outside of a 
resource dictionary [M6.6]. 
ColorInterpolationMode   ST_ClrIntMode     
SRgbLinear 
Interpolation   
   
Specifies the gamma function for 
color interpolation. The gamma 
adjustment should not be 
applied to the alpha component, 
if specified. Valid values are 
SRgbLinearInterpolation and 
ScRgbLinearInterpolation. 

13. Brushes 
ECMA-388 
144 
First Edition, June 2009 
SpreadMethod   
ST_Spread 
Method  
   
Pad   
   
Describes how the brush should 
fill the content area outside of 
the primary, initial gradient area. 
Valid values are Pad, Reflect and 
Repeat. 
MappingMode   
ST_Mapping 
Mode  
required      
Absolute   Specifies that center, x radius, 
and y radius are defined in the 
effective coordinate space 
(includes the Transform attribute 
of the brush). 
Transform   
ST_RscRef 
Matrix  
   
   
   
Describes the matrix 
transformation applied to the 
coordinate space of the brush. 
The Transform property is 
concatenated with the current 
effective render transform to 
yield an effective render 
transform local to the brush. The 
ellipse defined by the center, 
gradient origin, x radius, and y 
radius values is transformed 
using the local effective render 
transform. 
Center   
ST_Point  
required      
   
Specifies the center point of the 
radial gradient (that is, the 
center of the ellipse). The radial 
gradient brush interpolates the 
colors from the gradient origin to 
the circumference of the ellipse. 
The circumference is determined 
by the center and the radii. 
GradientOrigin   
ST_Point  
required      
   
Specifies the origin point of the 
radial gradient. 
RadiusX   
ST_GEZero  
required      
   
Specifies the radius in the x 
dimension of the ellipse which 
defines the radial gradient. 
RadiusY   
ST_GEZero  
required      
   
Specifies the radius in the y 
dimension of the ellipse which 
defines the radial gradient. 
annotation Fills a region with a radial gradient. 
Radial gradient brushes are similar to linear gradient brushes. However, whereas a linear 
gradient brush has a start point and end point to define the gradient vector, a radial gradient 

ECMA-388 
13. Brushes 
 
 First Edition, June 2009 
145 
brush has an ellipse (defined by the center, x radius, and y radius) and a gradient origin. The 
gradient origin defines the start point of the gradient. The circumference of the ellipse defines 
the end point of the gradient. In other words, a gradient stop with an offset at 1.0 defines the 
color at the circumference of the ellipse. A gradient stop with an offset at 0.0 defines the color 
at the gradient origin.  
For details about computing a radial gradient, see §18.3.3. 
Example 13–23. A radial gradient brush  
The following figure is a radial gradient that transitions from white to gray. The outside ellipse 
represents the gradient ellipse while the dot denotes the gradient origin. This gradient has a 
SpreadMethod value of Pad. 
 
end example] 
Example 13–24. RadialGradientBrush usage 
The following markup describes a page with a rectangular path that is filled with a radial 
gradient: 
<Path> 
   <Path.Fill> 
      <RadialGradientBrush  
         MappingMode="Absolute"  
         Center="30,150"  
         GradientOrigin="30,150"  
         RadiusX="250"  
         RadiusY="250"> 
         <RadialGradientBrush.GradientStops> 
            <GradientStop Color="#FFFF00" Offset="0" /> 
            <GradientStop Color="#0000FF" Offset="1" /> 
         </RadialGradientBrush.GradientStops> 
      </RadialGradientBrush> 
   </Path.Fill> 
   <Path.Data> 
      <PathGeometry> 
         <PathFigure StartPoint="0,0" IsClosed="true"> 
            <PolyLineSegment Points="300,0 300,300 0,300" /> 
         </PathFigure> 

13. Brushes 
ECMA-388 
146 
First Edition, June 2009 
      </PathGeometry> 
   </Path.Data> 
</Path> 
This markup is rendered as follows: 
  
end example] 
13.6.1 SpreadMethod Attribute 
The SpreadMethod attribute describes the fill of areas beyond the ellipse described by the center, 
x radius, and y radius of the radial gradient brush. Valid values are Pad, Reflect, and Repeat. 
For details see §18.3.3. 
Example 13–25. Radial gradient brush with a SpreadMethod value of Pad  
In the following markup, the last color is used to cover the fill area outside the ellipse. 
<Path Data="M 150,0 L 300,150 L 150,300 L 0,150 Z"> 
   <Path.Fill> 
      <RadialGradientBrush  
         MappingMode="Absolute"  
         Center="150,150"  
         GradientOrigin="125,125"  
         RadiusX="60"  
         RadiusY="60"  
         SpreadMethod="Pad"> 
         <RadialGradientBrush.GradientStops> 
            <GradientStop Color="#FFFF00" Offset="0.0" /> 
            <GradientStop Color="#0000FF" Offset="1.0" /> 
         </RadialGradientBrush.GradientStops> 
      </RadialGradientBrush> 
   </Path.Fill> 
</Path> 

ECMA-388 
13. Brushes 
 
 First Edition, June 2009 
147 
This markup is rendered as follows: 
  
end example] 
Example 13–26. Radial gradient brush with a SpreadMethod value of Reflect 
In the following markup, the gradient stops are replayed in reverse order repeatedly to cover 
the fill area. 
<Path Data="M 150,0 L 300,150 L 150,300 L 0,150 Z"> 
   <Path.Fill> 
      <RadialGradientBrush  
         MappingMode="Absolute"  
         Center="150,150"  
         GradientOrigin="125,125"  
         RadiusX="60"  
         RadiusY="60"  
         SpreadMethod="Reflect"> 
         <RadialGradientBrush.GradientStops> 
            <GradientStop Color="#FFFF00" Offset="0.0" /> 
            <GradientStop Color="#0000FF" Offset="1.0" /> 
         </RadialGradientBrush.GradientStops> 
      </RadialGradientBrush> 
   </Path.Fill> 
</Path> 

13. Brushes 
ECMA-388 
148 
First Edition, June 2009 
This markup is rendered as follows: 
  
end example] 
Example 13–27. Radial gradient brush with a SpreadMethod value of Repeat 
In the following markup, the gradient stops are repeated in order until the fill area is covered. 
<Path Data="M 150,0 L 300,150 L 150,300 L 0,150 Z"> 
   <Path.Fill> 
      <RadialGradientBrush  
         MappingMode="Absolute"  
         Center="150,150"  
         GradientOrigin="125,125"  
         RadiusX="60"  
         RadiusY="60"  
         SpreadMethod="Repeat"> 
         <RadialGradientBrush.GradientStops> 
            <GradientStop Color="#FFFF00" Offset="0.0" /> 
            <GradientStop Color="#0000FF" Offset="1.0" /> 
         </RadialGradientBrush.GradientStops> 
      </RadialGradientBrush> 
   </Path.Fill> 
</Path> 

ECMA-388 
13. Brushes 
 
 First Edition, June 2009 
149 
This markup is rendered as follows: 
  
end example] 
13.6.2 <RadialGradientBrush.GradientStops> Element 
element RadialGradientBrush.GradientStops 
diagram 
 
annotation Holds a sequence of <GradientStop> elements. 
The <RadialGradientBrush.GradientStops> property element specifies a collection of gradient 
stops that comprise the radial gradient. For more information, see §13.7.  
13.7 <GradientStop> Element 
element GradientStop 
diagram 

13. Brushes 
ECMA-388 
150 
First Edition, June 2009 
attributes Name   Type   
Use   
Default   Fixed   Annotation 
Color   ST_Color  
required      
   
Specifies the gradient stop color. 
Offset   ST_Double  required      
   
Specifies the gradient offset. The offset indicates a point along 
the progression of the gradient at which a color is specified. 
Colors between gradient offsets in the progression are 
interpolated. 
annotation Indicates a location and range of color progression for rendering a gradient. 
The <GradientStop> element is used by both the <LinearGradientBrush> and 
<RadialGradientBrush> elements to define the location and range of color progression for 
rendering a gradient. 
For linear gradient brushes, the offset value of 0.0 is mapped to the start point of the gradient, 
and the offset value of 1.0 is mapped to the end point. Intermediate offset values are 
interpolated between these two points to determine their location. 
For radial gradient brushes, the offset value of 0.0 is mapped to the gradient origin location. 
The offset value of 1.0 is mapped to the circumference of the ellipse as determined by the 
center, x radius, and y radius. Offsets between 0.0 and 1.0 are positioned at a location 
interpolated between these points. 
For full details of rendering of gradient brushes, including handling of offsets, please see §18.3. 
13.8 Using a Brush as an Opacity Mask 
Each pixel carries an alpha value ranging from 0.0 (fully transparent) to 1.0 (fully opaque). The 
alpha value is used when blending elements to achieve the visual effect of transparency. Each 
element can have an Opacity attribute by which the alpha value of each pixel is multiplied 
uniformly.  
The OpacityMask property allows the specification of per-pixel opacity, which controls how 
rendered content is blended with its destination. The opacity values specified by the opacity 
mask are combined multiplicatively with any opacity already present in the alpha channel of the 
contents. The per-pixel opacity specified by the opacity mask is determined by the alpha 
channel of each pixel in the mask. The color channels of the brush are ignored. 
The per-pixel alpha values of the OpacityMask not marked by the brush are 0.0. The required 
computations for blending two elements when rendering, also known as alpha blending, are 
described in §18.4. 
An opacity mask always has a brush as the child element (see §14.5).  
Example 13–28. Opacity mask with linear gradient 
The following markup illustrates how an opacity mask is used to create a fade effect on a glyph. 
The opacity mask is a linear gradient that fades from opaque black to transparent black. 
<FixedPage Height="1056" Width="816" xml:lang="en-US"> 
   <Glyphs  

ECMA-388 
13. Brushes 
 
 First Edition, June 2009 
151 
      OriginX="25" 
      OriginY="50" 
      UnicodeString="This is a fading text example." 
      FontUri="../Resources/Fonts/Times.TTF" 
      FontRenderingEmSize="32"> 
      <Glyphs.OpacityMask> 
         <LinearGradientBrush  
            StartPoint="25,0"  
            EndPoint="450,0"  
            MappingMode="Absolute"> 
            <LinearGradientBrush.GradientStops> 
               <GradientStop Color="#FF000000" Offset="0" /> 
               <GradientStop Color="#00000000" Offset="1" /> 
            </LinearGradientBrush.GradientStops> 
         </LinearGradientBrush> 
      </Glyphs.OpacityMask> 
      <Glyphs.Fill> 
         <SolidColorBrush Color="#000000" /> 
      </Glyphs.Fill> 
   </Glyphs> 
</FixedPage> 
This markup is rendered as follows: 
  
end example] 
Example 13–29. Opacity mask with radial gradient 
In the following markup, the opacity mask is a radial gradient: 
<FixedPage Width="816" Height="1056" xml:lang="en-US"> 
   <Path> 
      <Path.OpacityMask> 
         <RadialGradientBrush  
            MappingMode="Absolute"  
            Center="200,300"  
            GradientOrigin="200,300"  
            RadiusX="200"  
            RadiusY="300"> 
            <RadialGradientBrush.GradientStops> 
               <GradientStop Color="#FF000000" Offset="0" /> 
               <GradientStop Color="#20000000" Offset="1" /> 
            </RadialGradientBrush.GradientStops> 
         </RadialGradientBrush> 
      </Path.OpacityMask> 
      <Path.Fill> 
         <ImageBrush  
            Viewbox="0,0,400,600"  
            ViewboxUnits="Absolute" 
            Viewport="0,0,400,600"  

13. Brushes 
ECMA-388 
152 
First Edition, June 2009 
            ViewportUnits="Absolute"  
            TileMode="None"  
            ImageSource="images/jpeg3.jpg" /> 
      </Path.Fill> 
      <Path.Data> 
         <PathGeometry> 
            <PathFigure StartPoint="0,0" IsClosed="true"> 
               <PolyLineSegment Points="400,0 400,600 0,600" /> 
            </PathFigure> 
         </PathGeometry> 
      </Path.Data> 
   </Path> 
</FixedPage> 
This markup is rendered as follows: 
  

ECMA-388 
13. Brushes 
 
 First Edition, June 2009 
153 
end example] 


ECMA-388 
14. Common Properties 
 
 First Edition, June 2009 
155 
14. Common Properties 
Several OpenXPS Document elements share property attributes and elements as summarized in 
Table 14–1 and Table 14–2 and detailed in the following sections. Other than the Name, 
FixedPage.NavigateUri, and xml:lang attributes, these properties compose their results from 
parent to child, as described in §18.5. 
Table 14–1. Common property attributes 
Name 
Applies to 
Description 
Clip 
<Canvas> 
<Glyphs> 
<Path> 
Restricts the region to which a 
brush can be applied.  
Opacity 
<Canvas> 
<Glyphs> 
<ImageBrush> 
<LinearGradientBrush> 
<Path> 
<RadialGradientBrush> 
<SolidColorBrush> 
<VisualBrush> 
Defines the uniform transparency 
of the element. 
OpacityMask 
<Canvas> 
<Glyphs> 
<Path> 
Specifies a mask of alpha values 
that is applied in the same fashion 
as the Opacity attribute, but allows 
different alpha values on a pixel-
by-pixel basis.  
RenderTransform 
<Canvas> 
<Glyphs> 
<Path> 
Establishes a new coordinate space 
through the use of an affine matrix 
transformation. For more 
information, see §14.4. 
Transform 
<ImageBrush> 
<LinearGradientBrush> 
<PathGeometry> 
<RadialGradientBrush> 
<VisualBrush> 
Establishes a new coordinate space 
through the use of an affine matrix 
transformation. 
Name 
<Canvas> 
<FixedPage> 
<Glyphs> 
<Path> 
Defines a hyperlink target or 
identifies an element uniquely for 
document structure markup to 
reference. For more information, 
see §16.2. 
FixedPage.NavigateUri <Canvas> 
<Glyphs> 
<Path> 
Defines a hyperlink source. For 
more information, see §16.2. 

14. Common Properties 
ECMA-388 
156 
First Edition, June 2009 
Name 
Applies to 
Description 
xml:lang 
<Canvas> 
<FixedPage> 
<Glyphs> 
<Path> 
Specifies a language.  
Table 14–2. Common property elements 
Name 
Description 
<Canvas.Resources> 
<FixedPage.Resources> 
Contains elements that can be reused by reference 
throughout the markup of the <FixedPage> or 
<Canvas> child or descendant elements. 
<Canvas.Clip> 
<Glyphs.Clip> 
<Path.Clip> 
Restricts the region to which a brush can be 
applied.  
<Canvas.RenderTransform> 
<Glyphs.RenderTransform> 
<Path.RenderTransform> 
Establishes a new coordinate space through the 
use of an affine matrix transformation. For more 
information, see §14.4.  
<ImageBrush.Transform> 
<LinearGradientBrush.Transform> 
<PathGeometry.Transform> 
<RadialGradientBrush.Transform> 
<VisualBrush.Transform> 
Establishes a new effective coordinate space 
through the use of an affine matrix 
transformation.  
<Canvas.OpacityMask> 
<Glyphs.OpacityMask> 
<Path.OpacityMask> 
Specifies a mask of alpha values that is applied in 
the same fashion as the Opacity attribute, but 
allows different alpha values on a pixel-by-pixel 
basis.  
14.1 Opacity 
The Opacity property attribute is used to blend the current element with previously specified 
elements, also known as alpha blending. The opacity value MUST fall within the 0 (fully 
transparent) to 1 (fully opaque) range, inclusive [M7.12]. 
For more information, see §18.4. 
14.2 Resources and Resource References 
Fixed page markup supports the use of resources. A resource is a reusable property value that 
is expressed in markup, identified by a key, and stored in a resource dictionary. In general, any 
property value that can be expressed using property element syntax can be held in a resource 
dictionary.  
Each resource in a resource dictionary has a key. Any property that specifies its value by 
referencing a resource key in a resource dictionary is called a resource reference.  

ECMA-388 
14. Common Properties 
 
 First Edition, June 2009 
157 
The <Canvas> and <FixedPage> elements can carry a resource dictionary. A resource 
dictionary is expressed in markup by the <FixedPage.Resources> or <Canvas.Resources> 
property element. Individual resource values MUST be specified within a resource dictionary 
[M7.1].  
The <Canvas.Resources> or <FixedPage.Resources> property elements MUST precede any 
other property elements of the <Canvas> or <FixedPage> elements [M2.72]. Likewise, they 
MUST precede any path, glyphs, or canvas children of the <Canvas> or <FixedPage> elements 
[M7.14]. 
Alternatively, resource dictionaries MAY be specified in separate parts and referenced from 
within the <FixedPage.Resources> or <Canvas.Resources> property element [O7.1]. Such a 
remote resource dictionary can be shared across multiple pages. [Example: By defining a brush 
in a remote resource dictionary, graphical elements that are common to multiple pages can be 
reused. end example] 
The <Path>, <Glyphs>, and <Canvas> elements can appear as a resource definition solely for 
the purpose of using these elements in the Visual attribute of a <VisualBrush> element. 
Brushes and geometries appear in resource dictionaries far more frequently. 
14.2.1 <FixedPage.Resources> Element 
element FixedPage.Resources 
diagram 
 
annotation Contains the resource dictionary for the <FixedPage> element. 
Example 14–1. <FixedPage.Resources> usage 
<FixedPage Width="816" Height="1056" xml:lang="en-US"  
   xmlns="http://schemas.openxps.org/oxps/v1.0"  
   xmlns:x= 
   "http://schemas.openxps.org/oxps/v1.0/resourcedictionary-key"> 
   <FixedPage.Resources> 
      <ResourceDictionary> 
         <PathGeometry x:Key="Rectangle"> 
            <PathFigure StartPoint="20,20" IsClosed="true"> 
               <PolyLineSegment Points="120,20 120,70 20,70" /> 
            </PathFigure> 
         </PathGeometry> 
      </ResourceDictionary> 
   </FixedPage.Resources> 
   <Path Stroke="#000000"  
      StrokeThickness="1"  
      Data="{StaticResource Rectangle}" /> 
</FixedPage> 

14. Common Properties 
ECMA-388 
158 
First Edition, June 2009 
This markup is rendered as follows: 
  
end example] 
14.2.2 <Canvas.Resources> Element 
element Canvas.Resources 
diagram 
 
annotation Contains the resource dictionary for the <Canvas> element. 
 
Example 14–2. <Canvas.Resources> usage 
<Canvas  
   xmlns:x= 
   "http://schemas.openxps.org/oxps/v1.0/resourcedictionary-key"> 
   <Canvas.Resources> 
      <ResourceDictionary> 
         <PathGeometry x:Key="Circle"> 
            <PathFigure StartPoint="20,70"> 
               <ArcSegment  
                  Point="120,70"  
                  Size="50,50"  
                  RotationAngle="0"  
                  IsLargeArc="true"  
                  SweepDirection="Clockwise" /> 
               <ArcSegment  
                  Point="20,70"  
                  Size="50,50"  
                  RotationAngle="0"  
                  IsLargeArc="true"  
                  SweepDirection="Clockwise" /> 
            </PathFigure> 
         </PathGeometry> 
      </ResourceDictionary> 
   </Canvas.Resources> 
   <Path Stroke="#000000"  
      StrokeThickness="1"  
      Data="{StaticResource Circle}" /> 
</Canvas> 

ECMA-388 
14. Common Properties 
 
 First Edition, June 2009 
159 
This markup is rendered as follows: 
  
end example] 
14.2.3 <ResourceDictionary> Element 
element ResourceDictionary 
diagram 
attributes Name   Type   
Use   Default   Fixed   Annotation 
Source   xs:anyURI    
   
   
Specifies the URI of a part containing markup for a resource 
dictionary. The URI MUST refer to a part in the package [M2.1]. 
annotation Defines a set of reusable resource definitions that can be used as property values in the fixed page markup. 
The <FixedPage.Resources> and <Canvas.Resources> property elements contain exactly one 
<ResourceDictionary> element. A resource dictionary contains resource definition element 
entries. Each resource definition has a key specified in the x:Key attribute that is unique within 
the scope of the resource dictionary. The x:Key attribute is included in the Resource Dictionary 
namespace specified in §D.  

14. Common Properties 
ECMA-388 
160 
First Edition, June 2009 
Resource dictionaries MAY be declared, either inline inside a <FixedPage.Resources> or 
<Canvas.Resources> element, or in a separate part and referenced by a <ResourceDictionary> 
element inside a <FixedPage.Resources> or <Canvas.Resources> element [O7.1]. This allows 
resource dictionaries to be shared across parts. [Example: A single resource dictionary can be 
used by every fixed page in the OpenXPS Document. end example] See §14.2.3.1 for more 
details. 
A resource definition MAY reference another resource defined earlier in the same resource 
dictionary [O7.2]. If the resource dictionary does not appear in a separate part, a resource 
definition MAY reference a previously defined resource in a resource dictionary of a parent or 
ancestor <Canvas> or <FixedPage> element [O7.3].  
Namespace prefixes in resource definitions MUST apply in the context of the definition, rather 
than in the context of the resource reference [M7.2]. An xml:lang attribute within a resource 
definition MUST be interpreted in the context of the resource reference, not the resource 
definition [M7.3]. 
Example 14–3. Resource dictionary markup 
The following markup defines two geometries, one for a rectangle, and the other for a circle: 
<Canvas  
   xmlns:x= 
   "http://schemas.openxps.org/oxps/v1.0/resourcedictionary-key"> 
   <Canvas.Resources> 
      <ResourceDictionary> 
         <PathGeometry x:Key="Rectangle"> 
            <PathFigure StartPoint="20,20" IsClosed="true"> 
               <PolyLineSegment Points="120,20 120,70 20,70" /> 
            </PathFigure> 
         </PathGeometry> 
         <PathGeometry x:Key="Circle"> 
            <PathFigure StartPoint="20,70"> 
               <ArcSegment  
                  Point="120,70"  
                  Size="50,50"  
                  RotationAngle="0"  
                  IsLargeArc="true"  
                  SweepDirection="Clockwise" /> 
               <ArcSegment  
                  Point="20,70"  
                  Size="50,50"  
                  RotationAngle="0"  
                  IsLargeArc="true"  
                  SweepDirection="Clockwise" /> 
            </PathFigure> 
         </PathGeometry> 
      </ResourceDictionary> 
   </Canvas.Resources> 
   <Path Data="{StaticResource Rectangle}"> 
      <Path.Fill> 
         <SolidColorBrush Color="#FF0000" /> 
      </Path.Fill> 
   </Path> 
</Canvas> 

ECMA-388 
14. Common Properties 
 
 First Edition, June 2009 
161 
end example] 
14.2.3.1 Remote Resource Dictionaries 
A resource dictionary MAY be defined in a separate part [O7.1]. This is referred to as a remote 
resource dictionary. A remote resource dictionary MUST follow the requirements above that 
apply to all resource dictionaries [M7.4]. A remote resource dictionary MUST NOT contain any 
resource definition children that reference another remote resource dictionary [M7.5]. 
The <FixedPage.Resources> and <Canvas.Resources> property elements MAY include a remote 
resource dictionary via reference, using the Source attribute of the <ResourceDictionary> 
element [O7.1]. 
A <ResourceDictionary> element that specifies a remote resource dictionary in its Source 
attribute MUST NOT contain any resource definition children [M7.6]. <FixedPage.Resources> 
and <Canvas.Resources> elements that include a remote resource dictionary MUST include 
exactly one <ResourceDictionary> element [M2.72]. 
A remote Resource Dictionary part MUST be added as a Required Resource relationship from 
the FixedPage part that references it [M2.10]. In addition, producers MUST add each resource 
such as fonts or images referenced in the Resource Dictionary part as a Required Resource 
relationship from the FixedPage part (not the Resource Dictionary part) to the indirectly 
required resource, even if the particular fixed page does not reference the resource [M2.10]. 
For more information, see §D.3. 
Inline references to fonts or images in remote resource dictionary entries MUST be interpreted 
with the same base URI as the Remote Resource Dictionary part, not from the base URI of the 
part referring to the particular remote resource dictionary entry [M7.7]. 
Example 14–4. A remote resource dictionary and reference 
The following markup defines a resource dictionary that contains two geometries, one for a 
rectangle and the other for a circle: 
<!-- Contents of /resource.xml --> 
<ResourceDictionary xmlns="http://schemas.openxps.org/oxps/v1.0"  
   xmlns:x= 
   "http://schemas.openxps.org/oxps/v1.0/resourcedictionary-key"> 
   <PathGeometry x:Key="Rectangle"> 
      <PathFigure StartPoint="20,20" IsClosed="true"> 
         <PolyLineSegment Points="120,20 120,70 20,70" /> 
      </PathFigure> 
   </PathGeometry> 
   <PathGeometry x:Key="Circle"> 
      <PathFigure StartPoint="20,70"> 
         <ArcSegment  
            Point="120,70"  
            Size="50,50"  
            RotationAngle="0"  
            IsLargeArc="true"  
            SweepDirection="Clockwise" /> 
         <ArcSegment  
            Point="20,70"  
            Size="50,50"  
            RotationAngle="0"  
            IsLargeArc="true"  

14. Common Properties 
ECMA-388 
162 
First Edition, June 2009 
            SweepDirection="Clockwise" /> 
      </PathFigure> 
   </PathGeometry> 
</ResourceDictionary> 
The following markup references the previously defined resource dictionary: 
<Canvas  
   xmlns:x= 
   "http://schemas.openxps.org/oxps/v1.0/resourcedictionary-key"> 
   <Canvas.Resources> 
      <ResourceDictionary Source="/resource.xml"/> 
   </Canvas.Resources> 
   <Path Data="{StaticResource Rectangle}"> 
      <Path.Fill> 
         <SolidColorBrush Color="#FF0000" /> 
      </Path.Fill> 
   </Path> 
</Canvas> 
end example] 
14.2.4 Resource References 
To set a property value to a defined resource, use the form:  
{StaticResource key} 
Where key is the same string specified with x:Key in the resource definition.  
The context of the resource reference determines how defined resources are rendered (such as 
the transformation matrix to be applied). Specifically, the effective coordinate space for 
rendering the referenced resource is a composition of the effective coordinate space of the 
referring element plus any Transform or RenderTransform properties included in the resource 
definition itself.  
A consumer SHOULD instantiate an error condition if a static resource reference cannot be 
resolved, or if it can be resolved but the resource type does not match the usage at the location 
of reference [S7.1].  
Example 14–5. Using a resource reference to fill a brush 
In the following markup, the rectangular region defined by the geometry specified in the 
dictionary is filled by a solid color brush: 
<Canvas  
   xmlns:x= 
   "http://schemas.openxps.org/oxps/v1.0/resourcedictionary-key"> 
   <Canvas.Resources> 
      <ResourceDictionary> 
         <PathGeometry x:Key="Rectangle"> 
            <PathFigure StartPoint="20,20" IsClosed="true"> 
               <PolyLineSegment Points="120,20 120,70 20,70" /> 
            </PathFigure> 
         </PathGeometry> 
      </ResourceDictionary> 
   </Canvas.Resources> 

ECMA-388 
14. Common Properties 
 
 First Edition, June 2009 
163 
   <Path Data="{StaticResource Rectangle}"> 
      <Path.Fill> 
         <SolidColorBrush Color="#FF0000" /> 
      </Path.Fill> 
   </Path> 
</Canvas> 
end example] 
14.2.5 Scoping Rules for Resolving Resource References 
The value of the x:Key attribute MUST be unique within the resource dictionary [M2.72]. 
However, the resource dictionary of a <Canvas> element MAY re-use an x:Key value defined in 
the resource dictionary of a parent or ancestor <Canvas> or <FixedPage> element [O7.5]. 
Resource references are resolved from the innermost to the outermost resource dictionary.  
A resource definition MAY reference a previously defined resource with the same name that is 
defined in an ancestor resource dictionary [O7.6]; the reference MUST be resolved before the 
redefined resource is added to the dictionary [M7.8].  
A resource definition MAY reference another resource defined prior to the point of reference, 
including a resource previously defined within the same resource dictionary [O7.2]. If a 
resource definition references another resource, the reference MUST be resolved in the context 
of the resource definition, not in the context of the resource use [M7.9].  
To find a resource, the nearest parent or ancestor canvas or fixed page is searched. If the 
desired name is not defined in the initially searched resource dictionary, then the next-nearest 
parent or ancestor canvas or fixed page is searched. A consumer SHOULD instantiate an error 
condition if the search has continued to the root <FixedPage> element and a specified resource 
has not been found [S7.2]. This search occurs only within the containing FixedPage part. 
Example 14–6. Using scoping rules 
<FixedPage  
   xmlns="http://schemas.openxps.org/oxps/v1.0"  
   xmlns:x= 
   "http://schemas.openxps.org/oxps/v1.0/resourcedictionary-key" 
   Height="1056" Width="816" xml:lang="en-US"> 
   <FixedPage.Resources> 
      <ResourceDictionary> 
         <SolidColorBrush x:Key="FavoriteColorFill" Color="#808080" /> 
      </ResourceDictionary> 
   </FixedPage.Resources> 
   <Canvas> 
      <Canvas.Resources> 
         <ResourceDictionary> 
            <SolidColorBrush x:Key="FavoriteColorFill"  
               Color="#000000" /> 
         </ResourceDictionary> 
      </Canvas.Resources> 
      <!-- The following path is filed with color #000000 --> 
      <Path Fill="{StaticResource FavoriteColorFill}"> 
         <Path.Data> 
            ... 
         </Path.Data> 
      </Path> 

14. Common Properties 
ECMA-388 
164 
First Edition, June 2009 
      <Canvas> 
         <!-- The following path is filed with color #000000 --> 
         <Path Fill="{StaticResource FavoriteColorFill}"> 
            <Path.Data> 
               ... 
            </Path.Data> 
         </Path> 
      </Canvas> 
   </Canvas> 
   <!-- The following path is filled with color #808080 --> 
   <Path Fill="{StaticResource FavoriteColorFill}"> 
      <Path.Data> 
         ... 
      </Path.Data> 
   </Path> 
</FixedPage> 
end example] 
14.2.6 Support for Markup Compatibility 
If a resource dictionary contains Markup Compatibility and Extensibility elements and 
attributes, the processing of the Markup Compatibility and Extensibility markup MUST occur in 
the context of the definition of the resource dictionary, not in the context of resource references 
[M7.10]. 
14.3 Clipping 
The Clip property specifies a geometric area that restricts the rendered region of an element. 
The geometry is specified by a child <PathGeometry> element as detailed in §11.2, or by 
abbreviated geometry syntax, described in §11.2.3.  
The default fill rule for geometries that do not specify a value is EvenOdd. 
14.3.1 <Canvas.Clip> Element 
element Canvas.Clip 
diagram 
 
annotation Limits the rendered region of the element. 
The <Canvas.Clip> property element applies to all child and descendant elements of the 
canvas.  
Example 14–7. Canvas clip markup and rendering 
<Canvas> 
   <Canvas.Clip> 
      <PathGeometry> 

ECMA-388 
14. Common Properties 
 
 First Edition, June 2009 
165 
         <PathFigure StartPoint="25,25" IsClosed="true"> 
            <PolyLineSegment Points="60,25 70,60 80,25 115,25  
               115,115 80,115 70,80 60,115 25,115" /> 
         </PathFigure> 
      </PathGeometry> 
   </Canvas.Clip> 
   <Path Fill="#9999CC"> 
      <Path.Data> 
         <PathGeometry> 
            <PathFigure StartPoint="20,70"> 
               <ArcSegment  
                  Point="120,70"  
                  Size="50,50"  
                  RotationAngle="0"  
                  IsLargeArc="true"  
                  SweepDirection="Clockwise" /> 
               <ArcSegment  
                  Point="20,70"  
                  Size="50,50"  
                  RotationAngle="0"  
                  IsLargeArc="true"  
                  SweepDirection="Clockwise" /> 
            </PathFigure> 
         </PathGeometry> 
      </Path.Data> 
   </Path> 
</Canvas> 
This markup is rendered as follows: 
  
end example] 
14.3.2 <Path.Clip> Element 
element Path.Clip 
diagram 
annotation Limits the rendered region of the element. 
A clipping region can also be applied to a specific path.  

14. Common Properties 
ECMA-388 
166 
First Edition, June 2009 
Example 14–8. <Path.Clip> usage 
The following markup describes a complex clipping behavior: 
<Path Fill="#9999CC"> 
   <Path.Clip> 
      <PathGeometry> 
         <PathFigure StartPoint="25,25" IsClosed="true"> 
            <PolyLineSegment Points="115,25 115,115 25,115" /> 
         </PathFigure> 
         <PathFigure StartPoint="55,55" IsClosed="true"> 
            <PolyLineSegment Points="85,55 85,85 55,85" /> 
         </PathFigure> 
      </PathGeometry> 
   </Path.Clip> 
   <Path.Data> 
      <PathGeometry> 
         <PathFigure StartPoint="20,70"> 
            <ArcSegment  
               Point="120,70"  
               Size="50,50"  
               RotationAngle="0"  
               IsLargeArc="true"  
               SweepDirection="Clockwise" /> 
            <ArcSegment  
               Point="20,70"  
               Size="50,50"  
               RotationAngle="0"  
               IsLargeArc="true"  
               SweepDirection="Clockwise" /> 
         </PathFigure> 
      </PathGeometry> 
   </Path.Data> 
</Path> 
This markup is rendered as follows: 
  
end example] 

ECMA-388 
14. Common Properties 
 
 First Edition, June 2009 
167 
14.3.3 <Glyphs.Clip> Element 
element Glyphs.Clip 
diagram 
annotation Limits the rendered region of the element. Only portions of the <Glyphs> element that fall within the clip region 
(even partially clipped characters) produce marks on the page. 
Example 14–9. <Glyphs.Clip> usage 
The following markup uses abbreviated geometry syntax to define the clipping region: 
<Glyphs  
   Fill="#000000"  
   Clip="M 0,0 L 180,0 L 180,140 L 0,140 Z M 20,60 L 140,60 L 140,80  
      L 20,80 Z" 
   OriginX="20" 
   OriginY="130" 
   UnicodeString="N" 
   FontRenderingEmSize="170" 
   FontUri="../Resources/Fonts/Timesbd.ttf" /> 
This markup is rendered as follows: 
  
end example] 
14.4 Positioning Content 
Content is positioned according to the properties specified for the fixed page or canvas, the 
properties specified for elements within the fixed page or canvas, and the compositional rules 
defined for the fixed payload namespace. 
Elements are positioned relative to the current origin (0,0) of the coordinate space. The current 
origin can be moved by setting the RenderTransform property of a canvas, path, or glyph. The 
render transformation establishes a new coordinate frame for all children of the parent element. 
Geometries and brushes can be manipulated in a similar way by setting the Transform 
property. The transform results are concatenated with the current render transformation to 
create an effective render transformation for the local element. 

14. Common Properties 
ECMA-388 
168 
First Edition, June 2009 
The RenderTransform and Transform properties both specify an affine matrix transformation to 
the local coordinate space, using the <MatrixTransform> element as their value. An 
abbreviated matrix transformation syntax MAY be used to specify a RenderTransform or Transform 
attribute value [O7.7]. 
14.4.1 <MatrixTransform> Element 
element MatrixTransform 
diagram 
attributes Name   Type   
Use   
Default   Fixed   Annotation 
Matrix   ST_Matrix  required      
   
Specifies the matrix structure that defines the transformation. 
x:Key    
   
   
   
Specifies a name for a resource in a resource dictionary. x:Key 
MUST be present when the current element is defined in a 
resource dictionary. x:Key MUST NOT be specified outside of a 
resource dictionary [M7.11]. 
annotation Creates an arbitrary affine matrix transformation that manipulates objects or coordinate systems in a two-
dimensional plane. 
The <MatrixTransform> element defines an arbitrary affine matrix transformation used to 
manipulate the coordinate systems of elements. A 3x3 matrix is used for transformations in an 
x,y plane. Affine transformation matrices can be multiplied to form any number of linear 
transformations, such as rotation and skew (shear), followed by translation. An affine 
transformation matrix has its final column equal to 0,0,1, so only the members in the first two 
columns are specified. 
൥
𝑀𝑀11
𝑀𝑀12
0
𝑀𝑀21
𝑀𝑀22
0
𝑂𝑂𝑂𝑂𝑂𝑂𝑂𝑂𝑂𝑂𝑂𝑂𝑂𝑂
𝑂𝑂𝑂𝑂𝑂𝑂𝑂𝑂𝑂𝑂𝑂𝑂𝑂𝑂
1
൩ 
This structure is specified by the Matrix attribute of the <MatrixTransform> element as the six 
numbers in the first two columns. [Example: “M11,M12,M21,M22,OffsetX,OffsetY”. end 
example] 
A matrix transform can also be specified as a RenderTransform or Transform property attribute 
using the following abbreviated matrix transformation syntax: 

ECMA-388 
14. Common Properties 
 
 First Edition, June 2009 
169 
M11,M12,M21,M22,OffsetX,OffsetY 
The values M11, M12, M21, and M22 control linear transformations such as rotation, scale, and 
skew, while OffsetX and OffsetY provide positional translation. Some typical affine matrix 
transformation examples follow. 
Example 14–10. Matrix scaling 
൥
𝑆𝑆𝑆𝑆𝑆𝑆𝑆𝑆𝑆𝑆𝑆𝑆
0
0
0
𝑆𝑆𝑆𝑆𝑆𝑆𝑆𝑆𝑆𝑆𝑆𝑆
0
0
0
1
൩ 
 
end example] 
Example 14–11. Matrix reversing the x axis 
൥
−1
0
0
0
1
0
0
0
1
൩ 
end example] 
Example 14–12. Matrix reversing the y axis 
൥
1
0
0
0
−1
0
0
0
1
൩ 
end example] 
Example 14–13. Matrix skewing 
൥
1
𝑆𝑆𝑆𝑆𝑆𝑆𝑆𝑆𝑆𝑆
0
𝑆𝑆𝑆𝑆𝑆𝑆𝑆𝑆𝑆𝑆
1
0
0
0
1
൩ 
end example] 
Example 14–14. Matrix Rotating 
൥
cos 𝜃𝜃
sin 𝜃𝜃
0
−sin 𝜃𝜃
cos 𝜃𝜃
0
0
0
1
൩ 
end example] 
Example 14–15. Matrix positioning 
൥
1
0
0
0
1
0
𝑂𝑂𝑂𝑂𝑂𝑂𝑂𝑂𝑂𝑂𝑂𝑂𝑂𝑂
𝑂𝑂𝑂𝑂𝑂𝑂𝑂𝑂𝑂𝑂𝑂𝑂𝑂𝑂
1
൩ 
end example] 

14. Common Properties 
ECMA-388 
170 
First Edition, June 2009 
Example 14–16. <MatrixTransform> usage 
The following markup describes a box (with the top edge marked) that is rotated 90° and 
shifted 50 units down and to the right:  
<Path  
   Stroke="#000000"  
   Fill="#9999BB"  
   Data="M 0,0 L 60,0 L 60,25 L 60,0 L 120,0 L 120,120 L 0,120 Z"> 
   <Path.RenderTransform> 
      <MatrixTransform Matrix="0,1,-1,0,170,50" /> 
   </Path.RenderTransform> 
</Path> 
Since the x origin has been shifted, the overall box must be additionally shifted the width of the 
box to achieve the desired visual effect. 
Before the render transformation, the box appears like this: 
 
After the render transformation, the box appears like this: 
  
end example] 

ECMA-388 
14. Common Properties 
 
 First Edition, June 2009 
171 
Example 14–17. Using abbreviated matrix transformation syntax 
The following markup uses abbreviated syntax to produce the above image: 
<Path  
   Stroke="#000000"  
   Fill="#9999BB"  
   Data="M 0,0 L 60,0 L 60,25 L 60,0 L 120,0 L 120,120 L 0,120 Z"  
   RenderTransform="0,1,-1,0,170,50" /> 
end example] 
14.4.2 <Canvas.RenderTransform> Element 
element Canvas.RenderTransform 
diagram 
 
annotation Establishes a new coordinate frame for the child and descendant elements of the canvas, such as another 
canvas. Also affects clip and opacity mask. 
Example 14–18. <Canvas.RenderTransform> usage 
In the following markup, child elements of the canvas are positioned by the render 
transformation:  
<Canvas> 
   <Canvas.Resources> 
      <ResourceDictionary> 
         <PathGeometry x:Key="StarFish"> 
            <PathFigure StartPoint="50,0" IsClosed="true"> 
               <PolyLineSegment Points="55,45 100,25 55,50 80,100 50,55  
                  20,100 45,50 0,25 45,45" /> 
            </PathFigure> 
         </PathGeometry> 
      </ResourceDictionary> 
   </Canvas.Resources> 
 
   <!-- Draw a green starfish shifted 25 to the right and 50 down --> 
   <Canvas> 
      <Canvas.RenderTransform> 
         <MatrixTransform Matrix="1,0,0,1,25,50" /> 
      </Canvas.RenderTransform> 
      <Path Data="{StaticResource StarFish}"> 
         <Path.Fill> 
            <SolidColorBrush Color="#00FF00" /> 
         </Path.Fill> 
      </Path> 
   </Canvas> 
 
   <!-- Draw a red starfish shifted 100 to the right and 150 down --> 
   <Canvas> 

14. Common Properties 
ECMA-388 
172 
First Edition, June 2009 
      <Canvas.RenderTransform> 
         <MatrixTransform Matrix="1,0,0,1,100,150" /> 
      </Canvas.RenderTransform> 
      <Path Data="{StaticResource StarFish}"> 
         <Path.Fill> 
            <SolidColorBrush Color="#FF0000" /> 
         </Path.Fill> 
      </Path> 
   </Canvas> 
</Canvas> 
This markup is rendered as follows:  
  
end example] 
14.4.3 <Path.RenderTransform> Element 
element Path.RenderTransform 
diagram 
annotation Establishes a new coordinate frame for all attributes of the path and for all child elements of the path, such as 
the geometry defined by the <Path.Data> property element. 
Example 14–19. <Path.RenderTransform> usage 
The following markup describes a y-skew transformation applied to a circular path. (Before the 
render transformation, the middle of the right edge of the circle was marked with a horizontal 
line.) 
<Path  
   Fill="#999999"  
   Stroke="#000000"  
   Data="M 20,70 A 50,50 0 1 1 120,70 L 100,70 L 120,70 A 50,50 0 1 1  
      20,70 Z" > 

ECMA-388 
14. Common Properties 
 
 First Edition, June 2009 
173 
   <Path.RenderTransform>  
      <MatrixTransform Matrix="1,0.5,0,1,0,0" />  
   </Path.RenderTransform>  
</Path> 
This markup is rendered as follows: 
  
end example] 
14.4.4 <Glyphs.RenderTransform> Element 
element Glyphs.RenderTransform 
diagram 
annotation Establishes a new coordinate frame for the glyph run specified by the <Glyphs> element. The render transform 
affects clip, opacity mask, fill, x origin, y origin, the actual shape of individual glyphs, and the advance widths. 
The render transform also affects the font size and values specified in the Indices attribute. 
Example 14–20. <Glyphs.RenderTransform> usage 
The following markup describes the letter J, flipped vertically and repositioned.  
<Glyphs  
   Fill="#000000" 
   OriginX="20" 
   OriginY="130" 
   UnicodeString="J" 
   FontRenderingEmSize="170" 
   FontUri="../Resources/Fonts/Timesbd.ttf" > 
   <Glyphs.RenderTransform>  
      <MatrixTransform Matrix="1,0,0,-1,0,150" />  
   </Glyphs.RenderTransform>  
</Glyphs> 

14. Common Properties 
ECMA-388 
174 
First Edition, June 2009 
This markup is rendered as follows: 
  
end example] 
14.4.5 <PathGeometry.Transform> Element 
element PathGeometry.Transform 
diagram 
 
annotation Specifies the local matrix transformation that is applied to all child and descendant elements of the path 
geometry before it is used for filling, clipping, or stroking. 
Example 14–21. <PathGeometry.Transform> usage 
The following markup demonstrates a simple 150% zoom and positional transformation: 
<Path StrokeThickness="2" Stroke="#000000"> 
   <Path.Data> 
      <PathGeometry> 
         <PathGeometry.Transform> 
            <MatrixTransform Matrix="1.5,0,0,1.5,20,20" /> 
         </PathGeometry.Transform> 
         <PathFigure StartPoint="50,0" IsClosed="true"> 
            <PolyLineSegment Points="150,0 200,100 0,100" /> 
         </PathFigure> 
      </PathGeometry> 
   </Path.Data> 
</Path> 

ECMA-388 
14. Common Properties 
 
 First Edition, June 2009 
175 
This markup is rendered as follows. The pre-transform path is indicated in light gray. Note that 
the stroke thickness did not change. If this transformation had been applied to the entire Path, 
the stroke thickness would also have increased by 150%. 
  
end example] 
14.4.6 <ImageBrush.Transform> Element 
element ImageBrush.Transform 
diagram 
annotation Describes the matrix transformation applied to the coordinate space of the brush. The Transform property is 
concatenated with the current effective render transform to yield an effective render transform local to the brush. 
The viewport for the brush is transformed using the local effective render transform. 
The Transform property can result in a non-rectangular (that is, skewed) viewport that defines 
the tile shape. In this circumstance, tile mode operations (FlipX, FlipY, and FlipXY) are treated 
as if the tile was rectangular, a larger tile was constructed from a 2-by-2 arrangement of 
regular tiles, the skew transform was applied afterward, and the new non-rectangular tile was 
tiled with adjacent edges and without flipping. 
Example 14–22. <ImageBrush.Transform> usage 
The following markup describes an image rotated 20° and repositioned within a path. The path 
itself remains untransformed; the viewport of the image brush is transformed instead.  
<Path  
   StrokeThickness="5"  
   Stroke="#996666"  
   StrokeLineJoin="Round"  
   Data="M 25,25 L 350,25 L 355,250 L 25,250 Z"> 
   <Path.Fill> 
      <ImageBrush  
         ImageSource="dog.jpg"  
         TileMode="Tile"  
         Viewbox="0,0,270,423"  
         ViewboxUnits="Absolute" 
         Viewport="75,75,90,125" 

14. Common Properties 
ECMA-388 
176 
First Edition, June 2009 
         ViewportUnits="Absolute" > 
         <ImageBrush.Transform> 
            <MatrixTransform Matrix=".939,.342,-.342,.939,0,-80" /> 
         </ImageBrush.Transform> 
      </ImageBrush>  
   </Path.Fill> 
</Path> 
This markup is rendered as follows: 
  
end example] 
14.4.7 <VisualBrush.Transform> Element 
element VisualBrush.Transform 
diagram 
 
annotation Describes the matrix transformation applied to the coordinate space of the brush. The Transform property is 
concatenated with the current effective render transform to yield an effective render transform local to the brush. 
The viewport for the brush is transformed using the local effective render transform. 
The Transform property can result in a non-rectangular (that is, skewed) viewport that defines 
the tile shape. In this circumstance, tile mode operations (FlipX, FlipY, and FlipXY) are treated 
as if the tile was rectangular, a larger tile was constructed from a 2-by-2 arrangement of 
regular tiles, the skew transform was applied afterward, and the new non-rectangular tile was 
tiled with adjacent edges and without flipping. 
Example 14–23. <VisualBrush.Transform> usage 
The following markup describes a solid background and vertical pinstripe rotated 45° to fill a 
frame: 

ECMA-388 
14. Common Properties 
 
 First Edition, June 2009 
177 
<Path  
   StrokeThickness="5"  
   Stroke="#336666"  
   StrokeLineJoin="Round"  
   Data="M 25,25 L 365,25 L 365,250 L 25,250 Z M 70,70 L 320,70  
      L 320,205 L 70,205 Z"> 
   <Path.Fill> 
      <VisualBrush 
         TileMode="Tile"  
         Viewbox="0,0,60,100"  
         ViewboxUnits="Absolute" 
         Viewport="25,25,50,50" 
         ViewportUnits="Absolute"> 
         <VisualBrush.Transform> 
            <MatrixTransform Matrix=".707,.707,-.707,.707,0,0" /> 
         </VisualBrush.Transform> 
         <VisualBrush.Visual> 
            <Canvas> 
               <Path  
                  Fill="#99CCCC"  
                Data="M 0,0 L 60,0 L 60,100 L 0,100 Z" /> 
               <Path  
                  Stroke="#336666"  
                  Data="M 0,0 L 0,100 M 20,0 L 20,100 M 40,0 L 40,100  
                     M 60,0 L 60,100 M 80,0 L 80,100" /> 
            </Canvas> 
         </VisualBrush.Visual> 
      </VisualBrush> 
   </Path.Fill> 
</Path> 
This markup is rendered as follows: 
  
end example] 

14. Common Properties 
ECMA-388 
178 
First Edition, June 2009 
Example 14–24. <VisualBrush.Transform> usage with tiling behavior 
This example demonstrates tile rendering behavior when applying a transform. 
<!-- Draw background diamond to show where fill affects background --> 
<Path Fill="#CCCC66" Data="M 200,0 L 400,200 L 200,400 L 0,200 Z" /> 
<Path Data="M 200,0 L 400,200 L 200,400 L 0,200 Z"> 
   <Path.Fill> 
      <VisualBrush  
         Viewbox="0,0,1,1"  
         Viewport="200,133,67,67"  
         ViewboxUnits="Absolute"  
         ViewportUnits="Absolute"  
         TileMode="FlipY"> 
         <VisualBrush.Transform> 
            <MatrixTransform Matrix="1,0,1,1,0,0" /> 
         </VisualBrush.Transform> 
         <VisualBrush.Visual> 
            <Canvas> 
               <Path Fill="#333399" Data="M 0.1,0.1 L 0.9,0.1 L 0.9,0.9  
                  L 0.1,0.9 Z" /> 
               <Path Fill="#FFFF00" Data="M 0.1,0.35 L 0.35,0.1  
                  L 0.6,0.35 L 0.35,0.6 Z" /> 
            </Canvas> 
         </VisualBrush.Visual> 
      </VisualBrush> 
   </Path.Fill> 
</Path> 
This markup is rendered as follows: 

ECMA-388 
14. Common Properties 
 
 First Edition, June 2009 
179 
  
end example] 
14.4.8 <LinearGradientBrush.Transform> Element 
element LinearGradientBrush.Transform 
diagram 
 
annotation Describes the matrix transformation applied to the coordinate space of the brush. The Transform property is 
concatenated with the current effective render transform to yield an effective render transform local to the brush. 
The start point and end point are transformed using the local effective render transform. 
Example 14–25. <LinearGradientBrush.Transform> usage 
The following markup demonstrates a transform applied to the brush directly: 
<Path Stroke="#000000" StrokeThickness="2" Data="M 20,50 L 170,50 L 170,200 L 
20,200 Z M 120,20 L 270,20 L 270,170 120,170 Z"> 
   <Path.Fill> 
      <LinearGradientBrush  
         MappingMode="Absolute"  
         StartPoint="0,0"  
         EndPoint="0,10"  
         SpreadMethod="Reflect"> 
         <LinearGradientBrush.Transform> 

14. Common Properties 
ECMA-388 
180 
First Edition, June 2009 
            <MatrixTransform Matrix=".707,.707,-.707,.707,150,-30" /> 
         </LinearGradientBrush.Transform> 
         <LinearGradientBrush.GradientStops> 
            <GradientStop Color="#9999FF" Offset="0.0"/> 
            <GradientStop Color="#333366" Offset="1.0"/> 
         </LinearGradientBrush.GradientStops> 
      </LinearGradientBrush> 
   </Path.Fill> 
</Path> 
This markup is rendered as follows: 
 
Without the Transform property, this markup would be rendered as follows: 
  
end example] 
14.4.9 <RadialGradientBrush.Transform> Element 
element RadialGradientBrush.Transform 
diagram 
 

ECMA-388 
14. Common Properties 
 
 First Edition, June 2009 
181 
annotation Describes the matrix transformation applied to the coordinate space of the brush. The Transform property is 
concatenated with the current effective render transform to yield an effective render transform local to the brush. 
The ellipse defined by the center, gradient origin, x radius, and y radius values is transformed using the local 
effective render transform. 
Example 14–26. <RadialGradientBrush.Transform> usage 
The following markup describes a rotation and reposition transform on a radial gradient: 
<Path  
   Stroke="#000000"  
   StrokeThickness="2"  
   Data="M 20,20 L 270,20 L 270,200 L 20,200 Z"> 
   <Path.Fill> 
      <RadialGradientBrush  
         MappingMode="Absolute"  
         Center="80,90"  
         RadiusX="50"  
         RadiusY="80" 
         GradientOrigin="70,15"  
         SpreadMethod="Reflect"> 
         <RadialGradientBrush.Transform> 
            <MatrixTransform Matrix=".707,.707,-.707,.707,150,-10" /> 
         </RadialGradientBrush.Transform> 
         <RadialGradientBrush.GradientStops> 
            <GradientStop Color="#9999FF" Offset="0.0" /> 
            <GradientStop Color="#333366" Offset="1.0" /> 
         </RadialGradientBrush.GradientStops> 
      </RadialGradientBrush> 
   </Path.Fill> 
</Path> 
This markup is rendered as follows: 
 
Without the Transform property, this markup is rendered as follows: 

14. Common Properties 
ECMA-388 
182 
First Edition, June 2009 
  
end example] 
14.5 OpacityMask 
The OpacityMask property defines a variable alpha mask for the parent element. The alpha for 
areas not marked by the brush is 0.0. 
14.5.1 <Canvas.OpacityMask> Element 
element Canvas.OpacityMask 
diagram 
 
annotation Specifies a mask of alpha values that is applied to the canvas in the same fashion as the Opacity attribute, but 
allowing different alpha values for different areas of the element. 
Example 14–27. <Canvas.OpacityMask> usage 
In the following markup, the contents of the canvas are opaque with respect to each other, but 
both elements are blended with the background triangle: 
<Path Fill="#CCCC66" Data="M 10,10 L 300,80 L 180,240 Z" /> 
<Canvas> 
   <Canvas.OpacityMask> 
      <LinearGradientBrush  
         MappingMode="Absolute"  
         StartPoint="0,150"  
         EndPoint="0,175"  
         SpreadMethod="Pad"> 
         <LinearGradientBrush.GradientStops> 

ECMA-388 
14. Common Properties 
 
 First Edition, June 2009 
183 
            <GradientStop Color="#40000000" Offset="0.0" /> 
            <GradientStop Color="#FF000000" Offset="1.0" /> 
         </LinearGradientBrush.GradientStops> 
      </LinearGradientBrush> 
   </Canvas.OpacityMask> 
   <Path  
      Stroke="#000000"  
      StrokeThickness="2"  
      Fill="#333399"  
      Data="M 20,40 L 270,40 L 270,200 L 20,200 Z" /> 
   <Glyphs  
      OriginX="30" 
      OriginY="180" 
      UnicodeString="EXAMPLE" 
      FontUri="../Resources/Fonts/Timesbd.ttf" 
      FontRenderingEmSize="48" 
      Fill="#FFFFFF" /> 
</Canvas> 
This markup is rendered as follows: 
  
end example] 
14.5.2 <Path.OpacityMask> Element 
element Path.OpacityMask 
diagram 
 

14. Common Properties 
ECMA-388 
184 
First Edition, June 2009 
annotation Specifies the mask of alpha values that is applied to the path in the same fashion as the Opacity attribute, but 
allowing different alpha values for different areas of the element. 
Example 14–28. <Path.OpacityMask> usage 
The following markup describes a path that has a linear gradient for the opacity mask and a 
solid color brush for the fill: 
<Path  
   Stroke="#000000"  
   StrokeThickness="2"  
   Fill="#CCCC66"  
   Data="M 135,10 L 270,250 L 20,250 Z" /> 
<Path  
   Stroke="#000000"  
   StrokeThickness="2"  
   Data="M 20,40 L 270,40 L 270,200 L 20,200 Z"> 
   <Path.OpacityMask> 
      <LinearGradientBrush  
         MappingMode="Absolute"  
         StartPoint="0,60"  
         EndPoint="0,180"  
         SpreadMethod="Pad"> 
         <LinearGradientBrush.GradientStops> 
            <GradientStop Color="#FF000000" Offset="0.0" /> 
            <GradientStop Color="#60000000" Offset="1.0" /> 
         </LinearGradientBrush.GradientStops> 
      </LinearGradientBrush> 
   </Path.OpacityMask> 
   <Path.Fill> 
      <SolidColorBrush Color="#9999FF" /> 
   </Path.Fill> 
</Path> 
This markup is rendered as follows: 
  

ECMA-388 
14. Common Properties 
 
 First Edition, June 2009 
185 
end example] 
14.5.3 <Glyphs.OpacityMask> Element 
element Glyphs.OpacityMask 
diagram 
 
annotation Specifies a mask of alpha values that is applied to the glyphs in the same fashion as the Opacity attribute, but 
allowing different alpha values for different areas of the element. 
Example 14–29. <Glyphs.OpacityMask> usage 
The following markup demonstrates the use of an opacity mask to create a tile effect: 
<Path Fill="#CCCC66" Data="M 40,40 L 480,40 L 260,120 Z" /> 
<Glyphs  
   OriginX="20" 
   OriginY="95" 
   UnicodeString="EXAMPLE" 
   FontUri="../Resources/Fonts/Timesbd.ttf" 
   FontRenderingEmSize="100" 
   Fill="#000080"> 
   <Glyphs.OpacityMask> 
      <VisualBrush  
         Viewbox="0,0,2,2"  
         ViewboxUnits="Absolute" 
         Viewport="0,0,6,6"  
         ViewportUnits="Absolute"  
         TileMode="Tile"> 
         <VisualBrush.Visual> 
            <Path  
               Fill="#CC000000"  
               Data="M 0,0 L 1.5,0 L 1.5,1.5 L 0,1.5 Z" /> 
         </VisualBrush.Visual> 
      </VisualBrush> 
   </Glyphs.OpacityMask> 
</Glyphs> 

14. Common Properties 
ECMA-388 
186 
First Edition, June 2009 
This markup is rendered as follows: 
  
end example] 

ECMA-388 
15. Color 
 
 First Edition, June 2009 
187 
15. Color 
The mechanisms described in this clause for storing advanced color information in OpenXPS 
Documents apply to both vector graphics (including text) and raster images. Color producers 
such as digital cameras and consumers such as printers can store and render significantly more 
color information than many display devices can render (typically 8 bits per channel). Storing 
the advanced color information in an OpenXPS Document and passing it through to printing 
consumers enables greater end-to-end color fidelity.  
15.1 Color Support 
OpenXPS Documents support sRGB and other color spaces, including scRGB, CMYK, N-Channel, 
and named colors. Consumers MUST support the following color features: 
• Grayscale colors (single channel) in vector data, with and without alpha [M8.56] 
• Grayscale colors in image data, using the JPEG, PNG, TIFF, or JPEG XR image formats 
[M8.57] Grayscale image data with alpha channel in TIFF image format. 
• sRGB colors in vector data, with and without alpha [M8.1] 
• sRGB colors in image data, using the JPEG, PNG, TIFF, or JPEG XR image formats [M8.2] 
• scRGB color specification in vector data, with and without alpha [M8.3] 
• scRGB colors in image data, using the JPEG XR image format [M8.4] 
• CMYK colors in vector data [M8.5] 
• CMYK colors in image data, using the TIFF or JPEG XR image formats [M8.6] 
• N-Channel and Named colors in vector data [M8.7] 
• N-Channel and Named colors in image data, using the JPEG XR image format [M8.8] 
Producers and consumers MAY support the following color features: 
• N-Channel colors in image data, using the TIFF image format [O8.19]. 
When non-sRGB color information is used, color value specifications are expressed using 
markup from the OpenXPS Document schema. 
Consumers are not required to handle all color spaces natively through every processing stage, 
but, rather, MAY convert data specified in a color space other than sRGB to sRGB at an early 
stage [O8.1]. Consumers that do not handle natively colors other than sRGB can experience 
reduced fidelity.  
The requirements and recommendations of this subclause and its subclauses pertain equally to 
raster and vector color content. 
15.1.1 sRGB Color Space 
The OpenXPS Document format supports colors in the sRGB color space for both vector and 
raster graphics. 

15. Color 
ECMA-388 
188 
First Edition, June 2009 
15.1.2 scRGB Color Space 
The OpenXPS Document format supports colors in the scRGB color space for both vector and 
raster graphics. Such scRGB colors are typically used without an ICC profile. The encoding of 
scRGB as specified in IEC 61966-2-2 does not include a gamut boundary definition, therefore 
the scRGB gamut boundary to be used for scRGB colors is implementation-defined. 
15.1.3 Gray Color Space 
Gray colors for vector elements can be specified as sRGB or scRGB colors with the red, blue and 
green components set to the same value. Alternatively, grayscale colors for vector elements 
can be specified as single channel monochrome with an associated ICC profile. Gray colors for 
raster images can be specified using JPEG, PNG, TIFF, or JPEG XR formats. 
15.1.4 CMYK Color Space 
CMYK color is supported through the use of color management transformations from an ICC 
profile. 
15.1.5 N-Channel Color Spaces 
N-channel color is supported through the use of color management transformations from an 
ICC profile. 
15.1.6 Named Color for Spot Colors and N-tone Images 
A named color is an industry-defined color specification that identifies a particular color in a 
well-defined color system, usually for the purpose of printing. There are currently several 
named color systems.  
Named colors are supported through the use of color management transformations from an ICC 
profile.  
15.1.7 Identifying Output-Ready Color Spaces Using ICC Profiles 
An ICC profile, corresponding to a color space suitable for a particular device or device type, 
can be identified using a PrintTicket setting, as described in §9.1.9. 
OpenXPS markup or profile embedding is used to identify such an ICC profile with the elements 
intended to be rendered in the native color space of the device or device-type.  
If a consumer recognizes that a profile given in the syntax for a page element matches the 
PrintTicket output-ready ICC profile and that the PrintTicket output-ready ICC profile is suitable 
for the output device conditions, then the consumer SHOULD elect to treat the element colors 
as output-ready colors and not color-manage them, unless forced to do so for transparency 
effects or gradient blending [S8.21]. 
[Note: Elements using named colors in a workflow in which the consumer is expected to use the 
encoded name of a named color to lookup a device-specific color value are not affected by the 
use of the PrintTicket setting described here. end note] 
15.1.8 ICC Profiles 
OpenXPS Documents MAY include associated ICC profile parts [O2.3].  OpenXPS producers MAY 
include ICC profiles embedded in any image format (according to the restrictions of the image 
file format) with any color space [O8.15].  For color spaces other than sRGB and scRGB, 

ECMA-388 
15. Color 
 
 First Edition, June 2009 
189 
OpenXPS producers MUST provide color management using associated or embedded (for raster 
images) ICC profiles conforming to the requirements of the ICC Color Profile specification, 
ICC.1:2001-04 [M8.12].  OpenXPS producers MAY include ICC profiles for sRGB and scRGB 
color spaces [O8.16]. OpenXPS consumers MUST use associated and embedded ICC profiles, 
according to the precedence order of §15.3.7 for raster images and according to §15.2 for 
vector content [M8.53].  Optionally, OpenXPS producers and consumers MAY provide color 
management using ICC profiles conforming to the requirements of ISO 15076-1 [O8.9]. 
Producers MUST restrict associated ICC profiles to conform to the requirements of the older ICC 
Color Profile specification, ICC.1:2001-04, when consumer support of the newer ISO version 
cannot be ascertained [M8.58]. If a Producer includes an image with an embedded profile 
conforming to the requirements of ISO 15076-1, then the Producer MUST associate an ICC 
profile conforming to the requirements of the older ICC Color Profile specification, ICC.1:2001-
04, to have precedence over such an embedded profile, when consumer support of the newer 
ISO version cannot be ascertained [M8.59].All ICC profiles used in OpenXPS Documents MUST 
be one of the following [M8.13]: 
• Input 
• Output 
• Monitor (RGB) 
• ColorSpace Conversion 
• Named Color 
Supported profiles include Monochrome Input Profiles, Monochrome Display Profiles, 
Monochrome Output Profiles, Three-component Matrix-based Input Profiles, and RGB Display 
Profiles. The set of usable N-component LUT-based profiles is limited to 2-, 3-, 4-, 5-, 6-, 7-, or 
8-color channels. The set of usable Named Color profiles is limited to 1-, 2-, 3-, 4-, 5-, 6-, 7-, 
or 8-colors.  
If consistency of appearance of grayscale images is important, the producer SHOULD adjust the 
gray tone response curve of such images before adding to the OpenXPS Document [S8.2]. 
[Note: Some consumers do not correctly apply ICC profiles to grayscale images. end note] 
An ICC profile MAY contain private tags [O8.17]. Implementations MAY act on private tags 
[O8.18] and MUST ignore and preserve private tags that they do not understand [M8.54]. 
15.2 Vector Color Syntax 
This subclause describes specific considerations for including vector colors in OpenXPS 
Documents. 
Vector colors can be specified in OpenXPS Document markup in the following locations: 
• The Color attribute of the <SolidColorBrush> element 
• The Color attribute of the <GradientStop> element 
• The Fill attribute of the <Path> element 
• The Fill attribute of the <Glyphs> element 
• The Stroke attribute of the <Path> element 
The last three locations are an abbreviated syntax for expressing a solid color brush with the 
specified color. 

15. Color 
ECMA-388 
190 
First Edition, June 2009 
Table 15–1. Syntax summary 
Color type 
Syntax 
Example 
sRGB 
w/o alpha 
Color="#RRGGBB" 
Color="#FFFFFF" 
sRGB 
with alpha 
Color="#AARRGGBB" 
Color="#80FFFFFF" 
scRGB 
w/o alpha 
Color="sc#RedFloat, 
GreenFloat,BlueFloat" 
Color="sc#1.0,0.5,1.0" 
scRGB  
with alpha 
Color="sc#AlphaFloat,RedFloat, 
GreenFloat,BlueFloat" 
Color="sc#0.3,1.0,0.5,1.0" 
CMYK  
with alpha 
Color="ContextColor ProfileURI 
AlphaFloat, Chan0Float, 
Chan1Float, Chan2Float, 
Chan3Float" 
Color="ContextColor 
/swopcmykprofile.icc 
1.0,1.0,0.0,0.0,0.0" 
N-Channel  
with alpha 
Color="ContextColor ProfileURI 
AlphaFloat, Chan0Float, ..., 
ChanN-1Float" 
Color="ContextColor 
/5nchannelprofile.icc 1.0, 
1.0, 0.0, 0.0, 1.0, 0.0" 
Named color  
with alpha 
Color="ContextColor ProfileURI 
AlphaFloat, TintFloat" 
Color="ContextColor 
/namedtintprofile.icc 1.0, 
1.0" 
RGB with 
alpha 
Color="ContextColor ProfileURI 
AlphaFloat, Chan0Float, 
Chan1Float, Chan2Float" 
Color="ContextColor 
/RGBprofile.icc 1.0, 1.0, 1.0, 
1.0" 
Grayscale 
with alpha 
Color="ContextColor ProfileURI 
AlphaFloat, Chan0Float" 
Color="ContextColor 
/grayprofile.icc 1.0, 1.0" 
Real numbers specified for color channel values of scRGB and ContextColor colors MUST NOT 
use exponent forms of numbers [M8.14]. 
Profiles associated as described in Table 15–1, and determined to be usable, MUST be used by 
consumers [M8.44].   
It is the responsibility of consumers to determine profile usability. A profile associated as in 
Table 15–1 SHOULD be considered unusable by a consumer if 
• The profile is not compatible with the context color syntax   
• The profile contains optional tags that can cause ambiguity when used in OpenXPS 
• The profile contains invalid tag type signatures that invalidate OpenXPS use [S8.18]. 
In general, the presence of one or more optional tags in an ICC profile does not make the 
profile unusable. A consumer incapable of supporting a particular ICC profile tag that is optional 
in both ICC and OpenXPS MAY treat this tag as a user-defined custom tag, and therefore ignore 
it [O8.13]. 
If no usable profile is present in a context color syntax, then a consumer MUST apply a color 
rule based on the context color syntax [M8.45]. The context color value(s) are interpreted to be 
the encoding of a particular color space as follows:  
• Single component integer default for vector data MUST be grayscale with the sRGB non-
linearity, black point, and white point [M8.46]. 

ECMA-388 
15. Color 
 
 First Edition, June 2009 
191 
• Three component integer default for vector data MUST be sRGB [M8.47].  
• Three component float default for vector data MUST be scRGB [M8.48].   
• The specific CMYK to be used as the four component data default for vector data MUST 
be determined by the consumer [M8.49].   
• N-Channel data with N <=3 and any named color data:  the data of the first channel 
MUST be interpreted independently as grayscale [M8.50]. Other channels are 
disregarded. 
• N-Channel with N > 4 MUST be treated as four component data using the four 
component data default for vector data determined by the consumer [M8.51].   
When no usable profile is present a consumer MAY choose to instantiate an error condition 
[O8.14]. 
A producer MUST associate or embed a usable color profile if the color rules above do not 
guarantee appropriate color interpretation for the vector color content [M8.52]. 
15.2.1 sRGB Color Syntax 
The sRGB color syntax is the same as that used in HTML, with the red, green, and blue 
channels represented by two hexadecimal digits. OpenXPS Documents can specify an sRGB 
color either with or without an alpha channel value, which is also expressed as two hexadecimal 
digits. 
The syntax is as follows (without alpha): 
#RRGGBB 
or (with alpha): 
#AARRGGBB 
When an sRGB color is specified without an alpha value, an alpha of “FF” is implied.  
15.2.2 scRGB Color Syntax 
The scRGB color syntax allows OpenXPS Document producers to specify a color using the full 
scRGB color space, which is much larger than the sRGB color space and can represent the 
entire range of colors perceivable by the human eye. 
This syntax is expressed either as: 
sc#RedFloat,GreenFloat,BlueFloat 
or:  
sc#AlphaFloat,RedFloat,GreenFloat,BlueFloat 
When an scRGB color is specified with three numeric values, an alpha of 1.0 is implied. When 
an scRGB color is specified with four numeric values, the first value is the alpha channel. 
Although alpha values smaller than 0.0 and larger than 1.0 can be specified, they MUST be 
clamped to the valid range from 0.0 to 1.0 before any further processing [M8.15]. 
15.2.3 Grayscale syntax 
OpenXPS Document producers specify grayscale colors using the context color syntax, which 
allows specification of a monochrome ‘GRAY’ ICC profile and an individual color channel value 

15. Color 
ECMA-388 
192 
First Edition, June 2009 
as a real number. The context color MUST specify the matching number of channel float values 
[M8.17]. 
The syntax is as follows: 
ContextColor ProfileURI AlphaFloat, Chan0Float 
ProfileURI specifies a part containing the binary data of the color profile. The profile URI MUST 
be added as a Required Resource relationship to the FixedPage part [M2.10]. 
Although alpha values smaller than 0.0 and larger than 1.0 can be specified, they MUST be 
clamped to the valid range from 0.0 to 1.0 before any further processing [M8.16]. Channel float 
values MUST also be clamped to the valid range from 0.0 to 1.0 before further processing. 
Before the value is used as input for an ICC profile color transformation, it MUST be linearly 
scaled [with specified rounding/clipping] to the range from 0 to 255 or from 0 to 65535, 
depending on whether the profile uses 8-bit or 16-bit input tables [M8.31]. 
15.2.4 CMYK Color Syntax 
OpenXPS Document producers specify CMYK colors using the context color syntax, which allows 
specification of an ICC profile and the individual color channel values as real numbers.  
The syntax is as follows: 
ContextColor ProfileURI AlphaFloat, Chan0Float, Chan1Float, Chan2Float, 
Chan3Float 
ProfileURI specifies a part containing the binary data of the color profile. The profile URI MUST 
be added as a Required Resource relationship to the FixedPage part [M2.10]. 
Although alpha values smaller than 0.0 and larger than 1.0 can be specified, they MUST be 
clamped to the valid range from 0.0 to 1.0 before any further processing [M8.16]. Channel float 
values MUST also be clamped to the valid range from 0.0 to 1.0 before further processing. 
Before the value is used as input for an ICC profile color transformation, it MUST be linearly 
scaled (with specified rounding/clipping) to the range from 0 to 255 or from 0 to 65535, 
depending on whether the profile uses 8-bit or 16-bit input tables [M8.31]. 
15.2.5 N-Channel Color Syntax 
OpenXPS Document producers specify N-channel colors using the context color syntax, which 
allows specification of an ICC profile and the individual color channel values as real numbers. 
The syntax is expressed as follows:  
ContextColor ProfileURI AlphaFloat,Chan0Float,...,ChanN-1Float 
ProfileURI specifies a part containing the binary data of the color profile. The profile URI MUST 
be added as a Required Resource relationship to the FixedPage part [M2.10].  
The profile can be a 2-, 3-, 4-, 5-, 6-, 7- or 8-channel N-Channel profile (indicated by using one 
of the {‘2CLR’ … ‘8CLR’} values in the profile header color space signature field). The context 
color MUST specify the matching number of channel float values [M8.17]. 
Although alpha values smaller than 0.0 and larger than 1.0 can be specified, they MUST be 
clamped to the valid range from 0.0 to 1.0 before any further processing [M8.18]. Channel float 
values MUST also be clamped to the valid range from 0.0 to 1.0 before further processing. 
Before the value is used as input for an ICC profile color transformation, it MUST be linearly 

ECMA-388 
15. Color 
 
 First Edition, June 2009 
193 
scaled (with specified rounding/clipping) to the range from 0 to 255 or from 0 to 65535, 
depending on whether the profile uses 8-bit or 16-bit input tables [M8.31]. 
[Example: For duotone 2-clr content (with color-managed color mixing) the syntax is:  
ContextColor ProfileURI AlphaFloat, Chan0Float, Chan1Float 
end example] 
For 1-channel color, i.e., monochrome, use a monochrome input or output profile (profile 
header color space signature is ‘GRAY’). The profile MUST include the ICC-optional AToB1Tag 
(relative colorimetric intent) if the single color is chromatic (not neutral) [M8.32]. [Example:  
ContextColor ProfileURI AlphaFloat, Chan0Float 
end example] 
If the OpenXPS system environment allows the use of ICC ISO 15076-1 profiles, the optional 
colorantTableTag SHOULD be included in such ISO 15076-1 profiles to indicate the names and 
corresponding PCS values of the individual N-color colorants [S8.16]. (See §15.1.8 for the 
appropriate use of ISO 15076-1 profiles.) 
15.2.6 Named Color Syntax 
In OpenXPS, a named color is expressed as a combination of an ink name and transform 
information stored in an ICC profile, and a tint level (percentage ink dilution) given in the 
OpenXPS context color syntax. The OpenXPS context color syntax allows specification of one or 
more named color tint values and association of an ICC profile.  The syntax is expressed as 
follows:  
ContextColor ProfileURI AlphaFloat,Tint0Float,...,TintN-1Float 
Two ICC profile approaches are available for named colors, one using ICC monochrome profiles 
that each include a tint LUT for a single named color, and the other using ICC Named Color type 
profiles that each can include 100% color values for 1, 2, 3, 4, 5, 6, 7, or 8 named colors. In 
both cases, the OpenXPS context color syntax MUST specify the matching number of tint float 
values [M8.55]. 
A named color with an associated tint LUT MUST be implemented in an OpenXPS Document 
using an associated ICC monochrome profile [M8.33].  In this case, the ICC profile MUST 
contain the tint LUT for a single named color [M8.34].  The ICC profile MUST be an ICC 
monochrome input or output profile [M8.35].  The profile header color space signature MUST be 
‘GRAY’ [M8.37]. The profile MUST include an AtoB1Tag (relative colorimetric rendering intent), 
mapping the named color tint values to valid PCS values [M8.19], in addition to the ICC-
required grayTRCTag (not used for OpenXPS named colors).The ASCII prefix-root-suffix name 
of the named color MUST be encoded into the profileDescriptionTag of the ICC profile [M8.36] 
so that a consumer MAY use the profile to obtain the encoded name of the named color 
[O8.20].  A consumer MAY use the encoded name of a named color to lookup a device-specific 
color value for the named color [O8.21]. 
The context color syntax for referencing a single named color is as follows:  
ContextColor ProfileURI AlphaFloat,TintFloat 
A single named color MAY be implemented in an OpenXPS Document using an associated ICC 
Named Color type profile [O8.11]. Two or more named colors implemented in an OpenXPS 
Document using a single associated profile MUST use an ICC Named Color type profile [M8.38]. 

15. Color 
ECMA-388 
194 
First Edition, June 2009 
An ICC Named Color type profile MUST contain the namedColor2Tag including the ASCII prefix-
root-suffix name for each named color [M8.39], so that a consumer MAY use the profile to 
obtain the encoded name of the named color [O8.22]. The namedColor2Tag MUST be populated 
with the ICC PCS color value for each named color [M8.40] and MAY be populated with specific 
device color values for each named color [O8.12]. A named color duotone, tritone, etc., can be 
implemented in this way. A consumer MAY use the encoded name of a named color to lookup a 
device-specific color value for the named color [O8.23].  
[Example: For duotone named color content (with NO color managed color mixing) the syntax 
is:  
ContextColor ProfileURI AlphaFloat,Tint0Float,Tint1Float 
end example] 
ProfileURI specifies a part containing the binary data of the color profile. The profile URI MUST 
be added as a Required Resource relationship to the FixedPage part [M2.10].  AlphaFloat 
specifies the alpha to be applied to the named color.  TintFloat specifies how diluted with 
respect to the color system’s white color point the named color is, with 1.0 being the pure 
named color and 0.0 being fully diluted.  
Although alpha values smaller than 0.0 and larger than 1.0 can be specified, they MUST be 
clamped to the valid range from 0.0 to 1.0 before any further processing [M8.20]. The tint float 
value MUST also be clamped to the valid range from 0.0 to 1.0 before further processing. 
Before the value is used as input for an ICC profile color transformation, it MUST be linearly 
scaled (with specified rounding/clipping) to the range from 0 to 255 or from 0 to 65535, 
depending on whether the profile uses 8-bit or 16-bit input tables [M8.31]. 
Consumers MAY use the ASCII name in the ICC profile or MAY compute a color approximation 
using the specified color value in the ICC profile. When a named color is used in a gradient 
brush or with transparency, the results of these two methods MAY differ significantly [O8.3]. 
15.3 Colors in Raster Images 
This subclause describes specific considerations for including color raster images in OpenXPS 
Documents. 
15.3.1 sRGB Raster Images 
OpenXPS Documents support sRGB raster images in the following formats: 
• JPEG 
• PNG 
• TIFF 
• JPEG XR  
The following JPEG XR pixel format mnemonics are supported:  
• 24bppRGB 
• 24bppBGR 
• 32bppBGR 
• 32bppBGRA 

ECMA-388 
15. Color 
 
 First Edition, June 2009 
195 
• 32bppPBGRA 
• 48bppRGB 
• 64bppRGBA 
• 64bppPRGBA 
Pixel formats 32bppPBGRA and 64bppPRGBA are pre-multiplied alpha formats. See §18.4.1 for 
details.  
The following JPEG XR packed pixel format mnemonics are supported:  
• 16bppBGR555 
• 16bppBGR565 
• 32bppBGR101010 
See §9.1.5 for more details. 
15.3.2 scRGB Raster Images 
OpenXPS Documents support scRGB raster images only in the JPEG XR image format. The 
following pixel format mnemonics are supported:  
• 48bppRGBFixedPoint 
• 48bppRGBHalf 
• 96bppRGBFixedPoint 
• 128bppRGBFloat 
• 64bppRGBAFixedPoint 
• 64bppRGBAHalf 
• 128bppRGBAFixedPoint 
• 128bppRGBAFloat 
• 128bppPRGBAFloat 
• 32bppRGBE 
Pixel format 128bppPRGBAFloat is a pre-multiplied alpha format. See §18.4.1 for details.  
15.3.3 Gray Raster Images 
OpenXPS Documents support gray raster images in the following formats: 
• JPEG 
• PNG 
• TIFF 
• JPEG XR 
The following JPEG XR pixel format mnemonics are supported: 
• BlackWhite 
• 8bppGray 

15. Color 
ECMA-388 
196 
First Edition, June 2009 
• 16bppGray 
• 16bppGrayFixedPoint (scRGB range) 
• 16bppGrayHalf (scRGB range) 
• 32bppGrayFixedPoint (scRGB range) 
• 32bppGrayFloat 
15.3.4 CMYK Raster Images 
CMYK images are stored in TIFF or JPEG XR format.  
15.3.4.1 TIFF CMYK Raster Images 
CMYK TIFF image tags are described in §9.1.5.3. 
ICC profiles can be used with CMYK raster images either by using an ICC profile embedded in 
the TIFF file (ICC.1:2001-04, Annex B.4) or by associating an ICC profile using the mechanism 
described in §15.3.7. 
15.3.4.2 JPEG XR CMYK Raster Images 
The JPEG XR CMYK format is described in the JPEG XR specification. The following format 
mnemonics are supported:  
• 32bppCMYK 
• 40bppCMYKAlpha 
• 64bppCMYK 
• 80bppCMYKAlpha 
[Note: The following JPEG XR CMYK pixel formats mnemonics are not supported: 
• 32bppCMYKDIRECT 
• 64bppCMYKDIRECT 
• 40bppCMYKDIRECTAlpha 
• 80bppCMYKDIRECTAlpha 
end note] 
15.3.4.3 JPEG CMYK Raster Images 
Support for JPEG CMYK images varies by implementation and SHOULD NOT be used in 
OpenXPS Documents [S2.7]. See §9.1.5.1 for more details. 

ECMA-388 
15. Color 
 
 First Edition, June 2009 
197 
15.3.5 N-channel Raster Images 
N-channel images are stored in the JPEG XR image file format using an ICC profile. The 
following format mnemonics and associated profiles are supported:  
Table 15–2. JPEG XR Format Mnemonics and ICC Profile Color Space Correspondence 
JPEG XR Format Mnemonics 
ICC Profile Color Space 
8bppGray 
16bppGray 
 
Note: Grayscale color in image data with 
alpha channel is available in TIFF image 
format, an optional format for N-Channel. 
‘GRAY’ 
24bpp3Channels 
48bpp3Channels 
32bpp3ChannelsAlpha 
64bpp3ChannelsAlpha 
‘2CLR’ (duotone) or ‘3CLR’ (tritone) 
32bpp4Channels 
64bpp4Channels 
40bpp4ChannelsAlpha 
80bpp4ChannelsAlpha 
‘4CLR’ 
40bpp5Channels 
80bpp5Channels 
48bpp5ChannelsAlpha 
96bpp5ChannelsAlpha 
‘5CLR’ 
48bpp6Channels 
96bpp6Channels 
56bpp6ChannelsAlpha 
112bpp6ChannelsAlpha 
‘6CLR’ 
56bpp7Channels 
112bpp7Channels 
64bpp7ChannelsAlpha 
128bpp7ChannelsAlpha 
‘7CLR’ 
64bpp8Channels 
128bpp8Channels 
72bpp8ChannelsAlpha 
144bpp8ChannelsAlpha 
‘8CLR’ 
The profile can be a 2-, 3-, 4-, 5-, 6-, 7- or 8-channel N-Channel profile (indicated by using one 
of the {‘2CLR’ … ‘8CLR’} values in the profile header color space signature field). 
For 1-channel color, i.e., monochrome, use a monochrome input (or output) profile. The profile 
MUST include the ICC-optional AToB1Tag (relative colorimetric intent) if the single color is 
chromatic (not neutral) [M8.32].  
For a 2-channel color raster image with a ‘2CLR’ ICC profile, the first channel of the ICC profile 
is associated with the first component of the JPEG XR image plane and the second channel of 
the ICC profile is associated with the second component of the JPEG XR image plane.  The third 
component of the JPEG XR image plane (e.g., using the 24bpp3Channels format mnemonic) 
SHOULD be ignored by a consumer [S8.25].  A producer SHOULD zero all values in the third 
component of the JPEG XR image plane in this 2-channel use case [S8.26]. 

15. Color 
ECMA-388 
198 
First Edition, June 2009 
If the OpenXPS system environment allows the use of ICC ISO 15076-1 profiles, the optional 
colorantTableTag SHOULD be included in such ISO 15076-1 profiles to indicate the names and 
corresponding PCS values of the individual N-color colorants [S8.16]. (See §15.1.8 for the 
appropriate use of ISO 15076-1 profiles.) 
15.3.6 Named Color Raster Images  
In OpenXPS, a named color is expressed as a combination of an ink name and transform 
information stored in an ICC profile. Named color raster images are stored in the JPEG XR 
image file format using an ICC profile that maps the tint channel combinations from the image 
pixel values to valid PCS values. See §15.3.5 for pixel format definitions and the corresponding 
profile tags. Consumers unaware of named colors can then compute color approximations using 
the PCS values computed from the profile. 
Two ICC profile approaches are available for named colors, one using ICC monochrome profiles 
that each include a tint LUT for a single named color, and the other using ICC Named Color type 
profiles that each can include 100% color values for 1, 2, 3, 4, 5, 6, 7, or 8 named colors.  
A monochrome named color raster image can have a tint LUT encoded in an ICC monochrome 
input or output profile. The profile header color space signature is ‘GRAY’. The profile includes 
an AtoB1Tag (relative colorimetric rendering intent), for the tint LUT mapping the named color 
tint values to valid PCS values. The ASCII prefix-root-suffix name of the named color is 
encoded into the profileDescriptionTag of the ICC profile so that a consumer MAY use the profile 
to obtain the encoded name of the named color [O8.22].  A consumer MAY use the encoded 
name of a named color to lookup a device-specific color value for the named color [O8.23].  
A multi-tone named color raster image can have an ICC Named Color type profile. An ICC 
Named Color type profile MUST contain the namedColor2Tag including the ASCII prefix-root-
suffix name for each named color [M8.39] so that a consumer MAY use the profile to obtain the 
encoded name of the named color [O8.22]. The namedColor2Tag MUST be populated with the 
ICC PCS color value for each named color [M8.40] and MAY be populated with specific device 
color values for each named color [O8.12]. A named color duotone, tritone, etc., can be 
implemented in this way. A consumer MAY use the encoded name of a named color to lookup a 
device-specific color value for the named color [O8.23].  
For a 2-channel named color raster image, using a Named Color ICC profile, the first named 
color in the namedColor2Tag is associated with the first component of the JPEG XR image 
plane, and the second named color in the namedColor2Tag is associated with the second 
component of the JPEG XR image plane.  The third component of the JPEG XR image plane 
(e.g., using the 24bpp3Channels format mnemonic) SHOULD be ignored by a consumer 
[S8.23].  A producer SHOULD zero all values in the third component of the JPEG XR image 
plane in this 2-channel use case [S8.24]. 
Consumers MAY use the ASCII name in the ICC profile or MAY compute a color approximation 
using a specified color value in the ICC profile; the results of these two methods MAY differ 
significantly [O8.25]. 
15.3.7 Images and Color Profile Association 
Images can depend on color profiles using one of two methods: 
• Associated: Color profile contained in a separate part associated with the image. 
• Embedded: Color profile embedded in an image using the image format specific 
mechanism. 

ECMA-388 
15. Color 
 
 First Edition, June 2009 
199 
When associating a profile with an image the syntax for the ImageSource attribute is as 
follows: 
{ColorConvertedBitmap ImageSourceURI ProfileURI} 
ImageSourceURI Specifies the URI of an image resource. The image URI MUST be added as a 
Required Resource relationship to the FixedPage part [M2.10]. 
ProfileURI specifies a part containing the binary data of the color profile. The profile URI MUST 
be added as a Required Resource relationship to the FixedPage part [M2.10]. 
[Example: 
<ImageBrush ImageSource="{ColorConvertedBitmap ../Resources/Images/image.tif 
../Metadata/profile.icc}" ... /> 
end example] 
It is the responsibility of consumers to determine the usability of embedded or associated 
profiles. A profile associated or embedded with an image SHOULD be considered unusable by a 
consumer if 
• The profile is not compatible with the pixel format of the image [S8.17] 
• The profile contains optional tags that can cause ambiguity when used in OpenXPS 
[S8.17] 
• The profile contains invalid tag type signatures that invalidate OpenXPS use [S8.17]. 
In general, the presence of one or more optional tags in an ICC profile does not make the 
profile unusable. A consumer incapable of supporting a particular ICC profile tag that is optional 
in both ICC and OpenXPS MAY treat this tag as a user-defined custom tag, and therefore ignore 
it [O8.13]. 
If present and usable, an associated profile MUST be used by consumers [M8.41]. A usable 
associated color profile overrides an embedded color profile and is processed instead of any 
embedded color profile. 
If present and usable, a color profile embedded in an image file MUST be used by consumers 
when no usable associated profile is present with the image [M8.42]. 
If no usable profile is present for an image, then a consumer MUST apply a color rule based on 
the pixel format. Each pixel format is interpreted to be the encoding of a particular color space 
as shown in Table 15–3 [M8.30].  
When no usable profile is present a consumer MAY choose to instantiate an error condition 
[O8.14]. 
A producer MUST associate or embed a usable color profile if the color rules of Table 15–3 do 
not guarantee appropriate color interpretation for an image [M8.43]. 
Table 15–3. Color Space Pixel Format Defaults 
Pixel Formats 
Color Space 
Integer 1-Channel 
 
Grayscale using non-linearity, 
black point, and white point from 
sRGB 

15. Color 
ECMA-388 
200 
First Edition, June 2009 
Pixel Formats 
Color Space 
Fixed Point 1-Channel 
Half-Float 1-Channel 
Floating Point 1-Channel 
Grayscale using a linear 
transformation (a gamma of 1.0), 
visual black and white point from 
scRGB 
Integer 3-Channel 
sRGB 
Floating Point 3-Channel 
Half-Float 3-Channel 
Fixed-Point 3-Channel 
scRGB 
Integer 4-Channel 
Integer 5-Channel (ignore channel 5) 
Integer 6-Channel (ignore channels 5 
and 6) 
Integer 7-Channel (ignore channels 5, 
6, and 7) 
Integer 8-Channel (ignore channels 5, 
6, 7, and 8) 
CMYK 
For integer 1-channel, the sRGB non-linearity, white point, and black point can be applied to 
single channel grayscale data using the equations of IEC 61966-2-1 by setting R=G=B equal to 
the grayscale value. For Fixed Point, Half-Float and Floating Point 1-channel, the scRGB white 
point, and black point can be applied to single channel grayscale data, using the equations of 
IEC 61966-2-2. 
The specific CMYK to be used as the four-component raster data default, and the N-Channel 
(N=>4) default, is implementation-defined. In the absence of specific requirements the use of 
CGATS/SWOP TR003 2007 CMYK is RECOMMENDED [S8.19].  Alternatively, a consumer MAY 
choose to instantiate an error condition [O8.14].  
[Note: A profile for CGATS/SWOP TR003 2007 CMYK is available from the ICC Profile Registry, 
specifically SWOP2006_Coated3v2.icc. end note] 
15.4 Registration Marks for Color Separations 
Producers MAY elect to generate content that provides registration marks for consumers that 
perform color separation [O8.5]. 
The named color syntax can be used for registration marks that are intended to be rendered on 
every separation. A document registration named color can be identified at the document level 
using a PrintTicket setting (see §9.1.9). 
A document registration named color identified in a PrintTicket MAY occur in an OpenXPS 
Document using the single named color and monochrome profile with tint LUT syntax 
(see §15.2.6) [O8.26]. The name of the document registration named color is given in the 
profile’s profileDescriptionTag according to §15.2.6. Such a document registration named color 
SHOULD be unique for that use in the OpenXPS Document instance[S8.22].  
For consumers that do not perform separation, the document registration named color ICC 
profile is used to compute output colorant values corresponding to the document registration 
named color.  For consumers that do perform separation, the occurrence of the document 

ECMA-388 
15. Color 
 
 First Edition, June 2009 
201 
registration named color in a color syntax is only an indicator that the tint level supplied in the 
syntax SHOULD be used when drawing the registration marking in each colorant separation 
[S8.7]. Producers SHOULD create the profile for the document registration named color in such 
a way that it does not lay down excessive ink when printed on a device that does not perform 
separation [S8.8]. 
15.5 Alpha and Gradient Blending 
For consumers that handle colors other than sRGB, it is necessary to understand how they can 
be blended to create gradient or transparency effects. A page-level PrintTicket setting can be 
used to specify the blending color space that SHOULD be used for blending gradients and 
transparencies (see §9.1.9). 
If a consumer understands the blending color space PrintTicket setting, it SHOULD convert all 
color to the specified blending color space before performing a blend operation [S8.9]. For 
gradients, the specified blending color space is used only if no gradient stop color values are 
specified using sRGB or scRGB colors. If any of the gradient stop color values are specified 
using sRGB or scRGB colors or the consumer does not understand the blending color space 
PrintTicket setting, the color interpolation mode of the gradient brush MUST be used instead 
[M8.25]. 
Consumers MUST support alpha and gradient blending in sRGB [M8.1], but they MAY support 
alpha and gradient blending with other color spaces such as scRGB or CMYK [O8.6]. The 
behavior of documents using non-sRGB alpha and gradient blending is implementation-specific. 
Consumers that encounter any document using non-sRGB colors MAY process those colors 
using conversion to the simpler sRGB color space, resulting in deviations, especially for alpha 
blending [O8.6]. 
15.6 Color Rendering Intent 
ICC profiles contain multiple color transformation options, identified in the ICC Color Profiles 
specification as ICC rendering intents. For color elements that are to be color managed, a page 
level default color rendering intent, can be identified using a PrintTicket (see §9.1.9).  
In the absence of such information, in a typical case, with ICC profiles conforming to the ICC 
Color Profile specification, ICC.1:2001-04 [M8.12], a consumer SHOULD apply the defaults 
shown in Table 15–4 [S8.20]. 
Table 15–4. Recommended ICC rendering intent usage 
Color type 
Object type 
ICC Source   Rendering 
Intent 
ICC Destination 
Rendering Intent 
sRGB 
Raster image 
Perceptual 
Perceptual 
sRGB 
Vector 
Relative 
Colorimetric 
Relative 
Colorimetric* 
scRGB 
Raster image 
Perceptual 
Perceptual 
scRGB  
Vector 
Relative 
Colorimetric 
Relative 
Colorimetric* 
RGB color  space 
Raster image 
Perceptual 
Perceptual 

15. Color 
ECMA-388 
202 
First Edition, June 2009 
Color type 
Object type 
ICC Source   Rendering 
Intent 
ICC Destination 
Rendering Intent 
RGB color  space 
Vector 
Relative 
Colorimetric 
Relative 
Colorimetric* 
CMYK,  
Gray color space 
Raster image 
Relative 
Colorimetric 
Perceptual 
CMYK,  
Gray color space  
Vector 
Relative 
Colorimetric 
Relative 
Colorimetric* 
Named color,   
N-Channel  
Any 
Relative 
Colorimetric 
Relative 
Colorimetric 
*In the optional case, with ICC profiles conforming to the requirements of ISO 15076-1, based 
on ICC.1:2004-10 [O8.9], the Saturation Rendering Intent components of the profiles should 
be optimized for business graphics and may provide preferred results. (See §15.1.8 for the 
appropriate use of ISO 15076-1 profiles.) 

ECMA-388 
16. Document Structure and Interactivity 
 
 First Edition, June 2009 
203 
16. Document Structure and Interactivity 
Some consumers support enhanced interactive functionality through features such as text 
selection, navigation, and hyperlinking. Others, such as screen readers, provide enhanced 
accessibility. These features rely on structural information beyond what can be inferred from 
the page markup. Producers can author this information explicitly.  
The methods for adding document structure described here are OPTIONAL [O9.1]. Consumers 
MAY ignore any authored document structure or hyperlinks [O9.1], particularly where they are 
not relevant (such as in the case of printers). Recommended consumer behavior in the absence 
of document structure information is also described. 
Document structure is defined with markup in the FixedPage, FixedDocument, 
DocumentStructure, and StoryFragments parts.  
16.1 Document Structure Markup 
Document structure markup consists of two structural concepts. The first is the document 
outline, which contains a structured list of indices into the OpenXPS Document, similar to a 
table of contents. The second is the document content, which identifies blocks of individually 
readable content. Each of these blocks is called a story. 
A story can extend across multiple pages, and several stories can share a single page. A story 
can include the entire contents of an OpenXPS Document, or it can include only an individual 
block of readable content, such as a single newspaper article. Like a newspaper article, the 
story can appear in blocks throughout the OpenXPS Document. [Example: The first part could 
appear on page 1 and the second part on page 5. end example] Since a story can span multiple 
pages, the document content identifies which FixedPage parts contain fragments of a particular 
story. 
A story fragment is the portion of a story that appears within a single fixed page. The story 
fragment contains the structural markup for all text and images related to a particular story on 
a particular page. When a producer specifies the document structure, every FixedPage part has 
a corresponding StoryFragments part that contains all of the story fragments for that page. 
Each story fragment contains content structure information. Content structure is the set of 
markup elements that allow expression of well-understood semantic blocks, such as 
paragraphs, tables, lists, and figures. Content structure markup enables features such as 
paragraph and table selection, screen reading, and rich-format copying. 
Producers MAY provide either the document outline or the document content, or both; 
consumers MAY ignore either or both [O9.2]. 
16.1.1 DocumentStructure Part  
The fundamental building block of document structure markup is the named element. A named 
element refers to an element in the fixed page markup with a specified Name attribute. Every 
meaningful element in the fixed page markup SHOULD specify a Name attribute in order for the 
document structure markup to refer to it [S9.1].  

16. Document Structure and Interactivity 
ECMA-388 
204 
First Edition, June 2009 
Document structure markup SHOULD NOT refer to a single named element more than once in 
the document content or to a named element that embeds another named element that it also 
refers to. When referring to a <Canvas> element, producers SHOULD consider all descendant 
elements to be referenced in markup order [S9.3]. Consumers MAY choose to interpret these 
scenarios as duplicate document content [O9.3]. 
Children of <VisualBrush> elements SHOULD NOT be referenced by document structure 
markup [S9.30]. 
Because each named element in a FixedPage part that is intended as an addressable location is 
specified in the <PageContent.LinkTargets> element in the FixedDocument part, consumers 
MAY first attempt to locate named elements directly from the FixedDocument part [O9.4]. 
16.1.1.1 <DocumentStructure> Element 
element DocumentStructure 
diagram 
 
annotation The root element of the DocumentStructure part. 
The <DocumentStructure> element is the root element of the DocumentStructure part. That 
element MAY contain a single <DocumentStructure.Outline> element and zero or more 
<Story> elements [O9.14]. 
Example 16–1. Document structure markup 
<DocumentStructure  
   xmlns="http://schemas.openxps.org/oxps/v1.0/documentstructure"> 
   <DocumentStructure.Outline> 
      ... 
   </DocumentStructure.Outline> 
   <Story> 
      ... 
   </Story> 
   <Story> 
      ... 
   </Story> 
</DocumentStructure> 
end example] 

ECMA-388 
16. Document Structure and Interactivity 
 
 First Edition, June 2009 
205 
16.1.1.2 <DocumentStructure.Outline> Element 
element DocumentStructure.Outline 
diagram 
 
annotation Contains a structured document outline that provides a list of links into the document contents or external sites. 
The <DocumentStructure.Outline> element is the root element of the document outline. The 
<DocumentStructure.Outline> element contains only a single <DocumentOutline> element. 
16.1.1.3 <DocumentOutline> Element 
element DocumentOutline 
diagram 
 
attributes Name   
Type   Use   
Default   Fixed   Annotation 
xml:lang    
required      
   
This attribute specifies the default language used for any child 
element contained within the current element or nested child 
elements. The language is specified according to RFC 3066. 
annotation Specifies a list of meaningful indices into the OpenXPS Document, similar to a table of contents, or to external 
URIs, such as web addresses. 
The <DocumentOutline> element lets producers specify an organizational hierarchy in the form 
of a list of URIs to locations in the fixed page markup or to external addresses, similar to a 
table of contents or a set of bookmarks. The <DocumentOutline> element contains only 
<OutlineEntry> elements. 
The xml:lang attribute specifies the default language used by the Description attribute of the child 
<OutlineEntry> element. 
Consumers can use the document outline to implement such features as a table of contents or 
a navigation pane. 

16. Document Structure and Interactivity 
ECMA-388 
206 
First Edition, June 2009 
16.1.1.4 <OutlineEntry> Element 
element OutlineEntry 
diagram 
 
attributes Name   
Type   
Use   
Default   Fixed   Annotation 
OutlineLevel   ST_IntGEOne  optional   1   
   
A description of the level where the outline entry 
exists in the hierarchy. A value of 1 is the root. 
OutlineTarget   xs:anyURI 
required      
   
The URI to which the outline entry is linked. This can 
be a URI to a named element within the document 
or an external URI, such as a website. It can be used 
as a hyperlink destination. 
Description   
xs:string 
required      
   
The friendly text associated with this outline entry. 
xml:lang   
 
optional      
   
This attribute specifies the default language used for 
any child element contained within the current 
element or nested child elements. The language is 
specified according to RFC 3066. 
annotation Represents an index to a specific location in the document. 
Each <OutlineEntry> element represents an index to a specific location in the document or a 
specific location external to the document. Consumers can use the document outline 
information to support interactive functionality.  
Example 16–2. Document outline markup 
A viewing consumer can create a navigation pane that uses the Unicode value of the Description 
attribute of each <OutlineEntry> element. The corresponding location is specified by the 
OutlineTarget attribute, which are specified in a manner identical to hyperlinks. The OutlineLevel 
attribute allows consumers to indent entries in the navigation pane. 
<DocumentStructure  
   xmlns="http://schemas.openxps.org/oxps/v1.0/documentstructure"> 
   <DocumentStructure.Outline> 
      <DocumentOutline> 
         <OutlineEntry  

ECMA-388 
16. Document Structure and Interactivity 
 
 First Edition, June 2009 
207 
            OutlineLevel="1"  
            Description="1. Documents"  
            OutlineTarget="../FixedDoc.fdoc#Documents_1" /> 
         <OutlineEntry  
            OutlineLevel="2"  
            Description="1.1. Paragraphs" 
            OutlineTarget="../FixedDoc.fdoc#Paragraphs_1_1" /> 
      </DocumentOutline> 
   </DocumentStructure.Outline> 
</DocumentStructure> 
A consumer might display this information as follows, with the first entry linked to Documents_1 
and the second entry linked to Paragraphs_1_1. 
1. Documents 
   1.1. Paragraphs 
end example] 
16.1.1.5 <Story> Element 
element Story 
diagram 
 
attributes Name   
Type   
Use   
Default   Fixed   Annotation 
StoryName   xs:string required      
   
The name used by story fragments to identify they belong to 
this story. 
annotation Defines a single story and where each of its story fragments appear in the OpenXPS Document. 
The <Story> element is the root for a single story and orders all of the story fragments 
containing content structure information such as sections, paragraphs, and tables. Each story 
has a unique name that is used to correlate the content structure for each page to that story. 
The <Story> element contains one or more <StoryFragmentReference> elements. 

16. Document Structure and Interactivity 
ECMA-388 
208 
First Edition, June 2009 
16.1.1.6 <StoryFragmentReference> Element 
element StoryFragmentReference 
diagram 
attributes Name   
Type   
Use   
Default   Fixed   Annotation 
FragmentName   xs:string 
optional      
   
Used to distingush between multiple story 
fragments from the same story on a single page. 
Page   
ST_IntGEOne  required      
   
Identifies the page number of the document that 
the story fragment is related to. Page numbers 
start at 1 and correspond to the order of 
<PageContent> elements in the FixedDocument 
part. 
annotation Identifies the StoryFragments part where this individual story fragment is defined. 
The <StoryFragmentReference> element identifies the page with a relationship to the 
StoryFragments part in which the single story fragment is defined. By identifying where in the 
OpenXPS Document each story fragment appears, consumers can easily access only the pages 
that contain a particular story. 
Each page that contains a story fragment is identified by number. This number refers to the nth 
page of the OpenXPS Document referenced within the fixed document sequence and fixed 
document markup, starting at the fixed payload root. This value is identified in the Page 
attribute. The StoryFragments part containing the corresponding content structure is referenced 
by retrieving the part associated via relationship from the indicated page. This allows 
consumers to access only the pages of the document that contain the story of interest. It is also 
possible for a single story to return to a page containing a different fragment of the same story. 
The FragmentName attribute MUST be unique within the scope of the story [M9.11]. 

ECMA-388 
16. Document Structure and Interactivity 
 
 First Edition, June 2009 
209 
Example 16–3. Simple multi-story document 
The following markup describes a four-page document containing one story that covers the first 
one and one-half pages and then continues on page 4. It is interrupted by a second story that 
begins in the middle of page 2 and concludes on page 3. 
<DocumentStructure  
   xmlns="http://schemas.openxps.org/oxps/v1.0/documentstructure"> 
   <Story StoryName="Story1"> 
      <StoryFragmentReference Page="1"/> 
      <StoryFragmentReference Page="2"/> 
      <StoryFragmentReference Page="4"/> 
   </Story> 
   <Story StoryName="Story2"> 
      <StoryFragmentReference Page="2"/> 
      <StoryFragmentReference Page="3"/> 
   </Story> 
</DocumentStructure> 
end example] 
Example 16–4. Story flowing back and forth across a page boundary 
The following markup describes a page containing two tables, arranged side-by-side, each of 
which continues to the following page. In this case, the fragment is split and a fragment name 
is specified. FragmentA refers to the content leading up to the middle of the first (left) table and 
FragmentB is the continuation of this table on the following page. The flow then returns to the 
second (right) table on page 1 (FragmentC) before continuing with the rest of the story in 
FragmentD. 
<DocumentStructure  
   xmlns="http://schemas.openxps.org/oxps/v1.0/documentstructure"> 
   <Story StoryName="Story_1"> 
      <StoryFragmentReference FragmentName="FragmentA" Page="1"/> 
      <StoryFragmentReference FragmentName="FragmentB" Page="2"/> 
      <StoryFragmentReference FragmentName="FragmentC" Page="1"/> 
      <StoryFragmentReference FragmentName="FragmentD" Page="2"/> 
   </Story> 
</DocumentStructure> 
end example] 
16.1.2 StoryFragments Part  
The StoryFragments part contains content structure markup (describing such things as tables 
and paragraphs) for each story fragment that appears on the page. The content structure is 
expressed by tags that ultimately wrap <NamedElement> references that point to fixed page 
markup.  
Table 16–1. StoryFragments part elements 
Name 
Description 
<StoryFragments> 
Root element. 
<StoryFragment> 
Contains all content structure markup elements for a single story 
fragment. 

16. Document Structure and Interactivity 
ECMA-388 
210 
First Edition, June 2009 
Name 
Description 
<StoryBreak> 
Presence of this element indicates that the following or preceding 
markup is not continued to the previous or next story fragment, 
depending on whether the element is at the beginning or end of 
the story fragments markup. 
<SectionStructure> 
Arbitrary structural grouping element. 
<TableStructure> 
Contains a full table definition. 
<TableRowGroupStructure> Contains a group of table rows. 
<TableRowStructure> 
Contains a row of table cells. 
<TableCellStructure> 
Contains structural elements representing the contents of a table 
cell. 
<ListStructure> 
Group of related items. 
<ListItemStructure> 
Individual item in a list. 
<FigureStructure> 
Group of related named elements that should be interpreted as a 
whole (such as a diagram). 
<ParagraphStructure> 
Group of named elements that constitute a paragraph. 
<NamedElement> 
Element that links the document structure markup to the fixed 
page markup. 
Because a single content structural element can be split across pages, the <StoryBreak> 
element is provided to identify that a given element continues to the next story fragment or 
continues from a previous story fragment. A <StoryBreak> element MUST NOT be included in a 
position other than the first or last child element of a <StoryFragment> element [M9.12].  
If a <StoryBreak> element is not present at the beginning of the content structure markup, 
consumers SHOULD consider the markup a continuation of the previous story fragment that 
must be merged [S9.4]. Likewise, if a <StoryBreak> element is not present at the end of the 
content structure markup, consumers SHOULD consider the markup a continuation to the next 
story fragment that must be merged to determine the cross-fragment content structure [S9.4]. 
Content structure is merged on an element-by-element basis, merging the last element closed 
in the leading story fragment with the first element opened in the trailing story fragment. This 
process continues until the closing tag from the leading story fragment no longer matches the 
opening tag from the trailing story fragment.  
<TableCellStructure> elements require special merging, such that all <TableCellStructure> 
elements within a <TableRowStructure> element are merged. In order to merge the table cells 
and rows correctly, producers MUST specify empty <TableCellStructure> elements for cells that 
do not break across story fragments [M9.1]. 
Example 16–5. Content structure spanning pages 
Given the following two StoryFragments parts, consumers can construct the content structure 
as shown. 
<!-- First StoryFragments part --> 
 
<StoryFragments  
   xmlns="http://schemas.openxps.org/oxps/v1.0/documentstructure"> 
   <StoryFragment FragmentType="Header"> 
      <StoryBreak /> 

ECMA-388 
16. Document Structure and Interactivity 
 
 First Edition, June 2009 
211 
      <ParagraphStructure> 
         <NamedElement NameReference="Block1" /> 
      </ParagraphStructure> 
      <StoryBreak /> 
   </StoryFragment> 
   <StoryFragment StoryName="Story1" FragmentType="Content"> 
      <StoryBreak /> 
      <SectionStructure> 
         <TableStructure> 
            <TableRowGroupStructure> 
               <TableRowStructure> 
                  <TableCellStructure> 
                     <ParagraphStructure> 
                        <NamedElement NameReference="Block2" /> 
                        <NamedElement NameReference="Block3" /> 
                     </ParagraphStructure> 
                  </TableCellStructure> 
                  <TableCellStructure> 
                     <ParagraphStructure> 
                        <NamedElement NameReference="Block4" /> 
                     </ParagraphStructure> 
                  </TableCellStructure> 
               </TableRowStructure> 
               <TableRowStructure> 
                  <TableCellStructure> 
                     <ParagraphStructure> 
                        <NamedElement NameReference="Block5" /> 
                        <NamedElement NameReference="Block6" /> 
                     </ParagraphStructure> 
                  </TableCellStructure> 
                  <TableCellStructure> 
                     <ParagraphStructure> 
                        <NamedElement NameReference="Block7" /> 
                     </ParagraphStructure> 
                  </TableCellStructure> 
               </TableRowStructure> 
            </TableRowGroupStructure> 
         </TableStructure> 
      </SectionStructure> 
   </StoryFragment> 
   <StoryFragment FragmentType="Footer"> 
      <StoryBreak /> 
      <ParagraphStructure> 
         <NamedElement NameReference="Block8" /> 
      </ParagraphStructure> 
      <StoryBreak /> 
   </StoryFragment> 
</StoryFragments> 
 
<!-- Second StoryFragments part --> 
 
<StoryFragments  
   xmlns="http://schemas.openxps.org/oxps/v1.0/documentstructure"> 
   <StoryFragment FragmentType="Header"> 
      <StoryBreak /> 

16. Document Structure and Interactivity 
ECMA-388 
212 
First Edition, June 2009 
      <ParagraphStructure> 
         <NamedElement NameReference="Block9" /> 
      </ParagraphStructure> 
      <StoryBreak /> 
   </StoryFragment> 
   <StoryFragment StoryName="Story1" FragmentType="Content"> 
      <SectionStructure> 
         <TableStructure> 
            <TableRowGroupStructure> 
               <TableRowStructure> 
                  <TableCellStructure /> 
                  <TableCellStructure> 
                     <ParagraphStructure> 
                        <NamedElement NameReference="Block10" /> 
                        <NamedElement NameReference="Block11" /> 
                     </ParagraphStructure> 
                  </TableCellStructure> 
               </TableRowStructure> 
               <TableRowStructure> 
                  <TableCellStructure> 
                     <ParagraphStructure> 
                        <NamedElement NameReference="Block12" /> 
                     </ParagraphStructure> 
                  </TableCellStructure> 
                  <TableCellStructure> 
                     <ParagraphStructure> 
                        <NamedElement NameReference="Block13" /> 
                     </ParagraphStructure> 
                  </TableCellStructure> 
               </TableRowStructure> 
            </TableRowGroupStructure> 
         </TableStructure> 
      </SectionStructure> 
      <StoryBreak /> 
   </StoryFragment> 
   <StoryFragment FragmentType="Footer"> 
      <StoryBreak /> 
      <ParagraphStructure> 
         <NamedElement NameReference="Block14" /> 
      </ParagraphStructure> 
      <StoryBreak /> 
   </StoryFragment> 
</StoryFragments> 
<!-- Resulting merged content structure for Story1 --> 
 
<SectionStructure> 
   <TableStructure> 
      <TableRowGroupStructure> 
         <TableRowStructure> 
            <TableCellStructure> 
               <ParagraphStructure> 
                  <NamedElement NameReference="Block2" /> 
                  <NamedElement NameReference="Block3" /> 
               </ParagraphStructure> 

ECMA-388 
16. Document Structure and Interactivity 
 
 First Edition, June 2009 
213 
            </TableCellStructure> 
            <TableCellStructure> 
               <ParagraphStructure> 
                  <NamedElement NameReference="Block4" /> 
               </ParagraphStructure> 
            </TableCellStructure> 
         </TableRowStructure> 
         <TableRowStructure> 
            <TableCellStructure> 
               <ParagraphStructure> 
                  <NamedElement NameReference="Block5" /> 
                  <NamedElement NameReference="Block6" /> 
               </ParagraphStructure> 
            </TableCellStructure> 
            <TableCellStructure> 
               <ParagraphStructure> 
                  <NamedElement NameReference="Block7" /> 
                  <NamedElement NameReference="Block10" /> 
                  <NamedElement NameReference="Block11" /> 
               </ParagraphStructure> 
            </TableCellStructure> 
         </TableRowStructure> 
         <TableRowStructure> 
            <TableCellStructure> 
               <ParagraphStructure> 
                  <NamedElement NameReference="Block12" /> 
               </ParagraphStructure> 
            </TableCellStructure> 
            <TableCellStructure> 
               <ParagraphStructure> 
                  <NamedElement NameReference="Block13" /> 
               </ParagraphStructure> 
            </TableCellStructure> 
         </TableRowStructure> 
      </TableRowGroupStructure> 
   </TableStructure> 
</SectionStructure> 
end example] 
16.1.2.1 <StoryFragments> Element 
element StoryFragments 
diagram 
annotation The root of a StoryFragments part. Contains all story fragments that appear on a specific page. 
The <StoryFragments> element groups all of the <StoryFragment> elements on a page. 

16. Document Structure and Interactivity 
ECMA-388 
214 
First Edition, June 2009 
16.1.2.2 <StoryFragment> Element 
element StoryFragment 
diagram 
 
attributes Name   
Type   
Use   
Default   Fixed   Annotation 
StoryName   
xs:string 
optional      
   
Identifies the story that this story fragment 
belongs to. If omitted, the story fragment is 
not associated with any story. 
FragmentName   xs:string 
optional      
   
Used to uniquely identify the story fragment. 
FragmentType   ST_FragmentType  required      
   
Specifies the type of content included in the 
story fragment. Valid values are Content, 
Header, and Footer. 
annotation Specifies the document structural markup that appears on the current page for a single story block. 
Each <StoryFragment> has a StoryName attribute that associates it with a story defined in the 
DocumentStructure part. It also has a FragmentType attribute, the values for which are Content 
(the default), Header, or Footer.  
Headers and footers are defined in their own story fragment on each page. These stories do not 
specify a StoryName value, so they are essentially unreferenced stories that exist only on a 
single page.  

ECMA-388 
16. Document Structure and Interactivity 
 
 First Edition, June 2009 
215 
Producers authoring document structure information SHOULD reference every element of the 
fixed page markup that has semantic meaning (such as text or images) in the StoryFragments 
parts [S9.5].  
Example 16–6. StoryFragments part markup 
The following markup describes the StoryFragments part of a one-page document: 
<StoryFragments  
   xmlns="http://schemas.openxps.org/oxps/v1.0/documentstructure"> 
   <StoryFragment FragmentType="Header"> 
      <StoryBreak /> 
      <ParagraphStructure> 
         <NamedElement NameReference="Block13" /> 
         <NamedElement NameReference="Block14" /> 
      </ParagraphStructure> 
      <StoryBreak /> 
   </StoryFragment> 
   <StoryFragment StoryName="Story1" FragmentType="Content"> 
      <StoryBreak /> 
      <ParagraphStructure> 
         <NamedElement NameReference="Block1" /> 
         <NamedElement NameReference="Block2" /> 
      </ParagraphStructure> 
      <TableStructure> 
         <TableRowGroupStructure> 
            <TableRowStructure> 
               <TableCellStructure> 
                  <ParagraphStructure> 
                     <NamedElement NameReference="Block3" /> 
                     <NamedElement NameReference="Block4" /> 
                  </ParagraphStructure> 
               </TableCellStructure> 
               <TableCellStructure> 
                  <ParagraphStructure> 
                     <NamedElement NameReference="Block5" /> 
                  </ParagraphStructure> 
               </TableCellStructure> 
            </TableRowStructure> 
         </TableRowGroupStructure> 
      </TableStructure> 
      <SectionStructure> 
         <ParagraphStructure> 
            <NamedElement NameReference="Block6" /> 
         </ParagraphStructure> 
         <ParagraphStructure> 
            <NamedElement NameReference="Block7" /> 
            <NamedElement NameReference="Block8" /> 
         </ParagraphStructure> 
      </SectionStructure> 
      <SectionStructure> 
         <FigureStructure> 
            <NamedElement NameReference="Block9" /> 
         </FigureStructure> 
         <ListStructure> 
            <ListItemStructure> 

16. Document Structure and Interactivity 
ECMA-388 
216 
First Edition, June 2009 
               <ParagraphStructure> 
                  <NamedElement NameReference="Block10" /> 
               </ParagraphStructure> 
            </ListItemStructure> 
            <ListItemStructure> 
               <ParagraphStructure> 
                  <NamedElement NameReference="Block11" /> 
               </ParagraphStructure> 
            </ListItemStructure> 
            <ListItemStructure> 
               <ParagraphStructure> 
                  <NamedElement NameReference="Block12" /> 
               </ParagraphStructure> 
            </ListItemStructure> 
         </ListStructure> 
      </SectionStructure> 
      <StoryBreak /> 
   </StoryFragment> 
   <StoryFragment FragmentType="Footer"> 
      <StoryBreak /> 
      <ParagraphStructure> 
         <NamedElement NameReference="Block15" /> 
         <NamedElement NameReference="Block16" /> 
         <NamedElement NameReference="Block17" /> 
      </ParagraphStructure> 
      <StoryBreak /> 
   </StoryFragment> 
</StoryFragments> 
end example] 
A <StoryFragment> element MAY be identified with a FragmentName attribute to distinguish it 
from other fragments for the same story on a single page [M2.72]. 
Example 16–7. Story fragments markup using a fragment name  
<StoryFragments  
   xmlns="http://schemas.openxps.org/oxps/v1.0/documentstructure"> 
   <StoryFragment  
      StoryName="Story1"  
      FragmentName="Fr1"  
      FragmentType="Content"> 
      <StoryBreak /> 
      <ParagraphStructure> 
         <NamedElement NameReference="Block1" /> 
         <NamedElement NameReference="Block2" /> 
      </ParagraphStructure> 
      <StoryBreak /> 
   </StoryFragment> 
   <StoryFragment  
      StoryName="Story1"  
      FragmentName="Fr2"  
      FragmentType="Content"> 
      <StoryBreak /> 
      <ParagraphStructure> 
         <NamedElement NameReference="Block8" /> 

ECMA-388 
16. Document Structure and Interactivity 
 
 First Edition, June 2009 
217 
      </ParagraphStructure> 
      <StoryBreak /> 
   </StoryFragment> 
</StoryFragments> 
end example] 
16.1.2.3 <StoryBreak> Element 
element StoryBreak 
diagram 
 
annotation If located at the beginning of a <StoryFragment> definition, indicates that the following markup elements should 
not be merged with the markup from the previous <StoryFragment>. If located at the end of a 
<StoryFragment> definition, indicates that the preceding markup elements should not be merged with the 
subsequent <StoryFragment>. 
The <StoryBreak> element signals to the consumer not to perform merging across story 
fragments to determine the content structure. 
16.1.2.4 <SectionStructure> Element 
element SectionStructure 
diagram 
 
annotation Provides an arbitrary grouping of content structural markup elements. 
The <SectionStructure> element provides an arbitrary grouping of <Paragraph>, 
<TableStructure>, <ListStructure>, and <FigureStructure> elements. 
16.1.2.5 <ParagraphStructure> Element 
element ParagraphStructure 
diagram 

16. Document Structure and Interactivity 
ECMA-388 
218 
First Edition, June 2009 
annotation Contains the named elements that constitute a single paragraph. 
A <ParagraphStructure> element describes the list of <NamedElement> elements that 
constitute a single paragraph. 
16.1.2.6 <TableStructure> Element 
element TableStructure 
diagram 
annotation Contains a complete definition of a table in the OpenXPS Document. 
A <TableStructure> element is the complete definition of a table. An implementation MAY use it 
to build special functionality, such as row or column selection [O9.5]. 
16.1.2.7 <TableRowGroupStructure> Element 
element TableRowGroupStructure 
diagram 
annotation Contains the set of table rows that make up a table. 
A <TableRowGroupStructure> element is REQUIRED in order to specify a set of 
<TableRowStructure> elements [M9.13].  
16.1.2.8 <TableRowStructure> Element 
element TableRowStructure 
diagram 
annotation Contains the set of table cells that make up a row of a table. 
This element groups <TableCellStructure> child elements that define a single row of a table. 

ECMA-388 
16. Document Structure and Interactivity 
 
 First Edition, June 2009 
219 
16.1.2.9 <TableCellStructure> Element 
element TableCellStructure 
diagram 
attributes Name   
Type   
Use   
Default   Fixed   Annotation 
RowSpan   
ST_TableSpan  optional   1   
   
Indicates the number of rows this cell spans, or 
merges into a single cell. 
ColumnSpan   ST_TableSpan  optional   1   
   
Indicates the number of columns this cell spans, or 
merges into a single cell. 
annotation Contains the elements that occupy a single cell of a table. 
This element defines the appearance of a table cell. It MAY contain nested <TableStructure> 
elements [O9.16]. 
16.1.2.10 <ListStructure> Element 
element ListStructure 
diagram 
annotation Contains a collection of items that are group together in a list. 
The <ListStructure> element is the complete definition of a list of related items. 

16. Document Structure and Interactivity 
ECMA-388 
220 
First Edition, June 2009 
16.1.2.11 <ListItemStructure> Element 
element ListItemStructure 
diagram 
 
attributes Name   Type   
Use   
Default   Fixed   Annotation 
Marker   ST_NameUnique  optional      
   
The named element that represents the marker for this 
list item, such as a bullet, number, or image. 
annotation Describes a single structural block. These structural blocks are grouped together in a list. 
A <ListItemStructure> element defines a single item in a list. 
16.1.2.12 <FigureStructure> Element 
element FigureStructure 
diagram 
annotation Groups the named elements that constitute a single drawing or diagram. 
A <FigureStructure> element includes a group of named elements that comprise a single 
drawing or diagram.  

ECMA-388 
16. Document Structure and Interactivity 
 
 First Edition, June 2009 
221 
16.1.2.13 <NamedElement> Element 
element NamedElement 
diagram 
 
attributes Name   
Type   
Use   
Default   Fixed   Annotation 
NameReference   ST_Name  required      
   
Identifies the named element in the FixedPage part 
markup that is referenced by the document structure 
markup. 
annotation All document structure is related to the fixed page markup using this element. The <NamedElement> points to a 
single markup element contained in the fixed page markup. 
A <NamedElement> references a specific element in the fixed page by using the NameReference 
attribute to specify an element in the fixed page markup with a corresponding name.  
If the targeted fixed page uses markup compatibility markup that changes the presence of 
certain named elements, the StoryFragments part should also use it in order to reference each 
element in either representation. 
16.2 Hyperlinks 
If consumers enable user interactivity, they SHOULD support hyperlink activation and 
addressing [S9.6]. 
16.2.1 Hyperlink Activation 
Hyperlinks are specified inline on any <Canvas>, <Path>, or <Glyphs> element by means of 
the FixedPage.NavigateUri attribute. The value of the attribute is the destination URI. If 
hyperlinked <Path> or <Glyphs> elements are rendered as overlapping on the page, 
consumers MUST treat the topmost element as the only hyperlink that can be activated in the 
overlapping region [M9.2]. 
When activating a hyperlink, consumers SHOULD load the specified resource if they understand 
the URI type. If the URI is an internal reference to the OpenXPS Document, consumers SHOULD 
navigate to the URI [S9.7]. 
If a producer specifies a FixedPage.NavigateUri attribute on a <Canvas> element, consumers 
MUST treat all child elements of that canvas as having an associated hyperlink [M9.3]. Child or 
descendant elements can override this value with their own FixedPage.NavigateUri attribute. 
Relative internal hyperlinks between FixedPage parts MUST specify, at a minimum, the named 
address relative to the FixedDocument part [M9.4].  

16. Document Structure and Interactivity 
ECMA-388 
222 
First Edition, June 2009 
Producers can mark any <FixedPage>, <Canvas>, <Path>, or <Glyphs> element as an 
addressable location within the OpenXPS Document by specifying a value for the Name 
attribute. The name SHOULD be unique within the scope of the fixed document [S9.8]. If it is 
not unique, only the first occurrence of the named address is addressable.  
These elements, if specified as a <VisualBrush.Visual> property element are not addressable by 
a hyperlink. 
It is RECOMMENDED that Name attribute values be unique within an entire fixed document 
sequence [S9.9]. If they are not, only the first occurrence of the named address is addressable 
from an external location. Internal hyperlinks can specify a named element fragment relative to 
a particular fixed document, but consumers MAY interpret such a URI relative to the entire fixed 
document sequence instead [O9.6]. 
In order to be addressable by either a hyperlink or the document outline, the named address 
MUST appear in the <PageContent.LinkTargets> element in the fixed document [M9.5]. If a 
named address appears in the <PageContent.LinkTargets> element in the fixed document but 
is not found in the Name attribute of an element within the associated fixed page, consumers 
MUST treat the top of the associated fixed page as the named address [M9.6]. If the named 
address in a URI fragment is not found, consumers MUST ignore the fragment portion of the 
URI [M9.7]. 
Example 16–8. A relative, internal, named-address hyperlink 
FixedPage.NavigateUri="../MyDocument.fdoc#MyAddress" 
end example] 
16.2.2 Hyperlink Addressing 
OpenXPS Documents specify two forms of URI fragment identifiers to address locations within 
an OpenXPS Document. The first is a named address. [Example: 
“http://xps/MyPackage#MyAddress”, where “http://xps/MyPackage” is an OpenXPS Document 
and “MyAddress” is a named address within the document. end example] The second is an 
absolute page number within the OpenXPS Document. [Example: “http://xps/MyPackage#15”, 
where “15” references the FixedPage part associated with the fifteenth <PageContent> entry 
among all the fixed documents in the fixed document sequence. end example] 
Page number fragment identifiers refer to the absolute page number (1-based) in the fixed 
document sequence. [Example: If an OpenXPS Document has a 3-page fixed document, 
followed by a 10-page fixed document, followed by an 8-page fixed document, the fragment 
identifier “#15” refers to the second page of the third fixed document in the fixed document 
sequence. end example] Internal references MUST specify a page address relative to the fixed 
document sequence [M9.8]. 
Example 16–9. A relative internal page address hyperlink 
FixedPage.NavigateUri="../../../MyDocSeq.fdseq#12" 
end example] 
16.2.3 Name Attribute 
The Name attribute contains a string value that identifies the current element as a named, 
addressable point for the purpose of hyperlinking. The Name attribute is optional. Names 
SHOULD be unique within a fixed document [S9.8], and it is RECOMMENDED that they be 

ECMA-388 
16. Document Structure and Interactivity 
 
 First Edition, June 2009 
223 
unique within a fixed document sequence [S9.9]. The Name attribute MUST NOT be specified on 
any children of a <ResourceDictionary> element [M9.10]. 
If the Name attribute is specified, producers SHOULD also create a corresponding <LinkTarget> 
element in the FixedDocument part within the <PageContent> element that links to the parent 
fixed page [S9.10]. Consumers MAY ignore this attribute [O9.7], but devices that support user 
interaction with the contents of OpenXPS Documents SHOULD support hyperlinks [S9.6]. 
The Name value, if specified, MUST meet the following requirements [M9.14]:  
6. The initial character MUST be an underscore character or a letter, that is, it falls within 
the Lu, Ll, Lo, Lt, and Nl categories [M9.14]. 
7. Trailing characters MUST be an underscore character or a letter or number, that is, they 
fall within the Lu, Ll, Lo, Lt, Nl, Mn, Mc, and Nd categories [M9.14]. 0. 
[Note: These requirements match those of XML identifiers with additional restrictions. end note] 
The category abbreviations, as defined within the Unicode Character Database, are partially 
reproduced in Table 16–2. 
Table 16–2. Unicode character categories 
Abbreviation 
Description 
Lu 
Letter, uppercase 
Ll 
Letter, lowercase 
Lt 
Letter, titlecase 
Lo 
Letter, other 
Mn 
Mark, non-spacing 
Mc 
Mark, spacing combining 
Nd 
Number, decimal 
Nl 
Number, letter 
16.2.4 FixedPage.NavigateUri Attribute 
The FixedPage.NavigateUri attribute associates a hyperlink URI with an element, making it a 
hyperlink source. Its value can be a relative or absolute URI that addresses a resource that is 
internal or external to the OpenXPS Document package, respectively. The base URI used to 
resolve a relative URI is that of the FixedPage part in which the element with the 
FixedPage.NavigateUri attribute appears. Therefore, a hyperlink to a destination within the fixed 
document of the source MUST specify the destination in the context of the FixedDocument part 
[M9.4]. [Example:  “../FixedDoc1.fdoc#MyDestination”. end example] A destination in the same 
fixed document SHOULD be expressed as a relative URI [S9.11]. 
The FixedPage.NavigateUri attribute is OPTIONAL [O9.17]. It SHOULD be included only if the 
element is intended to be a hyperlink. Consumers MAY ignore this attribute [O9.8], but devices 
that support user interaction with the contents of OpenXPS Documents SHOULD support 
hyperlinks [S9.6]. 

16. Document Structure and Interactivity 
ECMA-388 
224 
First Edition, June 2009 
16.3 Selection 
Viewing consumers that support interactivity MAY support selection and copying [O9.9]. 
Selection order within an OpenXPS Document SHOULD follow reading order [S9.13]. 
Consumers MAY use the FragmentType attribute of the <StoryFragment> element to determine 
selection behavior, such as disallowing selection of both the page header and the page contents 
while allowing independent selection within those stories [O9.10]. 
16.4 Accessibility 
Accessibility refers to features that are important to provide equal access to OpenXPS 
Documents for users of all abilities. One common example of an accessibility application is a 
screen reader, which reads the contents of a document aloud for vision-impaired individuals. 
16.4.1 Reading Order 
In the absence of document structure information provided in the OpenXPS Document, 
consumers MAY infer the reading order from the position of elements on the page [O9.11], but 
SHOULD, at minimum, rely on the markup order to determine reading order [S9.14]. Producers 
SHOULD order the markup in FixedPage parts to reflect the order in which it is intended to be 
read [S9.15]. When document structure information is present, consumers SHOULD rely on the 
order of appearance of named elements in the content structure markup to determine reading 
order [S9.16]. 
The RECOMMENDED reading order of a page-centric application is as follows [S9.17]: 
• Order the content by page. 
• Within a page, order by story fragment in the order the <StoryFragment> elements are 
specified in the StoryFragments part for that page. Producers SHOULD order 
<StoryFragment> elements in their intended reading order [S9.18]. 
• Within a <StoryFragment> element, order by <NamedElement> reference. 
• Append all un-referenced elements that appear in the fixed page markup, ordered by 
markup order. 
Although producers SHOULD reference every element of the fixed page markup in the content 
structure markup [S9.10], consumers MUST expose every element of the fixed page markup to 
an accessibility interface in the determined reading order, even if the elements are not 
referenced in the content structure markup [M9.9]. 
Consumers MAY use the FragmentType attribute of the <StoryFragment> element to determine 
reading order by interpreting elements that have FragmentType values of Header and Footer as 
belonging first or last in the reading order, respectively [O9.12]. 
The RECOMMENDED reading order of a story-centric application is as follows [S9.19]: 
• Order content by story in the sequence the <Story> elements appear in the 
DocumentStructure part. Producers SHOULD order <Story> elements in their intended 
reading order [S9.20]. 
• Within a story, order <StoryFragmentReference> elements in the sequence they appear 
in the DocumentStructure part. Producers SHOULD order <StoryFragmentReference> 
elements in their intended reading order [S9.21]. 

ECMA-388 
16. Document Structure and Interactivity 
 
 First Edition, June 2009 
225 
• Within a story fragment, order by <NamedElement> references in the StoryFragments 
part markup. 
• Append all un-referenced elements that appear in the fixed page markup, ordered by 
page number, then markup order. 
16.4.2 Screen Reader Applications 
Screen reader applications read the contents of the document aloud. A screen reader consumer 
SHOULD read the document according to its reading order [S9.22]. The application SHOULD 
use the UnicodeString attribute of each <Glyphs> element [S9.23]. In addition, screen readers 
MAY inspect the Indices attribute to  resolve potential ambiguities [O9.13]. 
If the screen reader provides features to navigate the document by structural elements, such as 
paragraphs or table rows, it SHOULD use any document structure information included in the 
OpenXPS Document [S9.24]. 
If the screen reader provides features to describe images, it SHOULD read the text provided in 
the AutomationProperties.Name and AutomationProperties.HelpText attributes [S9.25]. 
If the screen reader provides features to describe hyperlink addresses, it SHOULD read the text 
provided in the FixedPage.NavigateUri attribute [S9.26]. 
16.4.3 Text Alternatives for Graphics and Images 
Images and graphics SHOULD specify text alternatives for images and graphics to make this 
content accessible to vision-impaired individuals [S9.27]. There are short and long textual 
descriptions, specified in the AutomationProperties.Name and AutomationProperties.HelpText 
attributes of <Path> and <Canvas>, respectively. 
The AutomationProperties.Name attribute SHOULD contain a short description of the basic 
contents of the image or vector graphic [S9.27]. [Example: “A sitting dog.” end example]The 
AutomationProperties.HelpText attribute can contain a more detailed description of the image or 
graphic. [Example: “A cocker spaniel with brown eyes, golden fur, and its tongue hanging out. 
It is sitting on a beanbag directly facing the camera.” end example] 
An image SHOULD specify the AutomationProperties.Name and AutomationProperties.HelpText 
attributes on the <Path> element that is filled with an <ImageBrush> [S9.28]. These attributes 
describe the content specified by the ImageSource attribute of the <ImageBrush> element. 
A vector graphic (a collection of one or more <Path> elements representing a single drawing) 
SHOULD specify the AutomationProperties.Name and AutomationProperties.HelpText attributes only 
once, directly on a <Canvas> element wrapping the <Path> elements comprising the graphic 
[S9.29]. 
Individual <Path> elements that do not provide any semantic meaning (such as a line between 
sections or outlining a table) SHOULD NOT specify these text alternative attributes [S9.27]. 
 
 


ECMA-388 
17. OpenXPS Document Package Features 
 
 First Edition, June 2009 
227 
17. OpenXPS Document Package Features 
The OpenXPS Document format extends package-level interleaving and digital signatures as 
described in the OPC Standard. 
17.1 Interleaving Optimizations  
Interleaving concerns the physical organization of OpenXPS Documents, rather than their 
logical structure. It allows consumers to process linearly the bytes that make up a physical 
package from start to finish, without regard for context. In other words, consumers can make 
correct determinations about the types of logical parts and the presence of relationships on a 
logical part when consuming packages in a linear fashion. Consumers are never required to 
return to previously encountered parts and revise their determination of the content type or 
presence of relationships. 
Interleaving is OPTIONAL [O10.1]. However, if the OpenXPS Document is interleaved, these 
rules SHOULD be followed: 
• The Content Types stream SHOULD be interleaved according to the recommendations in 
the OPC Standard [S10.1]. 
• PrintTicket parts SHOULD be written to the package before the part to which they are 
attached [S10.2].  
• The portion of the relationship data attaching the PrintTicket to a part SHOULD be written 
to the package before the part to which it is attached or in close proximity to the part to 
which it is attached [S10.3]. 
• If no PrintTicket settings are specified for a FixedDocumentSequence, FixedDocument, or 
FixedPage part, an empty PrintTicket part SHOULD be attached to the part, and the 
portion of the relationship data attaching the empty PrintTicket SHOULD be written to 
the package before the part to which it is attached or in close proximity to the part to 
which it is attached [S10.4]. 
• The last piece of the Relationships part for a FixedPage part SHOULD be written to the 
package in close proximity to the first piece of the FixedPage part [S10.5]. 
• The relationships for the DiscardControl part and the StartPart SHOULD both be written 
in the first piece of the package relationship part, and that piece SHOULD be before the 
first FixedPage part in the package [S10.20].  
• The piece of the DiscardControl part that includes a Discard element with a SentinelPage 
attribute referencing a FixedPage part SHOULD be written to the package before that 
FixedPage part [S10.21]. 
Following these recommendations allows more efficient processing by certain consumers. Not 
following these recommendations could result in less efficient processing by most consumers 
because they will need to wait until all parts required to process a part (attached PrintTicket, 
required resources) have been consumed. However, consumers MUST be prepared to process 
correctly packages in which the PrintTicket or the portion of the relationship data attaching the 
PrintTicket appears in the package after the affected part [M10.1]. 

17. OpenXPS Document Package Features 
ECMA-388 
228 
First Edition, June 2009 
Consumers can choose to parse an OpenXPS Document in a head-first or tail-first manner. Tail-
first parsing reveals certain package errors earlier, such as inconsistencies between the ZIP 
central directory and local file headers. Head-first OpenXPS Document consumers SHOULD 
attempt to detect inconsistent packages as soon as possible and SHOULD instantiate an error 
condition, even if they have already processed the pages that resulted in the error [S10.18]. 
Head-first consumers that discard parts would need to retain the name and length of any 
discarded part to comply with this recommendation. 
[Note: Streaming and handling of discard control are complicated significantly by any 
requirement for out-of-order page handling, such as in the production of booklets.  end note] 
17.1.1 Empty PrintTicket 
It is RECOMMENDED that one empty PrintTicket be shared for all parts that attach an empty 
PrintTicket [S10.6].  The content of an empty PrintTicket is implementation-defined (see 
§9.1.9). 
17.1.2 Optimizing Interleaving Order 
Producers MAY optimize the interleaving order of parts to help consumers avoid stalls during 
read-time streaming, and to allow consumers to manage their memory resources more 
efficiently [O10.2].  
The optimization strategy is suggested by the consumer architecture. Therefore, interleaving 
optimization is typically implemented by a software component such as a driver or filter that is 
specific to (or aware of) the consumer architecture.  
17.1.2.1 Single-Threaded Parsing Architectures 
An optimal interleaving scheme for consumers with a single-threaded parsing model interleaves 
parts so that each part that is required to consume a single page (FixedPage, images, and 
fonts) is contained in the package in its entirety, prior to the FixedPage part being referenced 
from the FixedDocument part’s markup. 
Single-threaded parsing architectures typically require more run-time memory resources than 
multi-threaded parsing architectures because the context in which a resource is used is 
unknown at the time the resource is received. This requires deferred processing and additional 
buffering. 
[Note: When interleaving entities containing XML markup, such as the DiscardControl part, the 
Content Types stream, and the FixedDocument part, there is no guarantee that XML element 
boundaries will align with piece boundaries in the physical package. This adds a complexity to 
single-threaded parsing architectures: the parser must be pre-emptable. Certain existing XML 
parser implementations might require a pre-tokenization step. end note] 
Example 17–1. Optimized interleaving for a single-threaded parsing architecture 
The following markup describes a sequence of two fixed documents, the first having two 
FixedPage parts and the second having one FixedPage part: 
 
Part/Piece 
Markup 
Font1.ttf 
...binary font data... 
Other resources 
...resource data... 

ECMA-388 
17. OpenXPS Document Package Features 
 
 First Edition, June 2009 
229 
Part/Piece 
Markup 
Page1 
<FixedPage xmlns="http://schemas.openxps.org 
/oxps/v1.0" ...> 
<Glyphs FontURI="Font1.ttf"/> 
</FixedPage> 
Page1.rels 
<Relationships xmlns= 
"http://schemas.openxmlformats.org/package/2006/rela
tionships"> 
<Relationship Type= 
"http://schemas.openxps.org/oxps/v1.0 
/required-resource" Target="Font1.ttf"/> 
</Relationships> 
FixedDocument1/[0].piece 
<FixedDocument xmlns= 
"http://schemas.openxps.org/oxps/v1.0"> 
<PageContent Source="Page1"/> 
Sequence1/[0].piece 
<FixedDocumentSequence xmlns= 
"http://schemas.openxps.org/oxps/v1.0"> 
<DocumentReference Source="FixedDocument1"/> 
_rels/.rels/[0].piece 
<Relationships xmlns= 
"http://schemas.openxmlformats.org/package/2006/rela
tionships"> 
<Relationship Type="StartPart" Target="Sequence1"/> 
Page2 
<FixedPage xmlns= 
"http://schemas.openxps.org/oxps/v1.0" 
...>...</FixedPage> 
FixedDocument1/[1].last.pi
ece 
<PageContent Source="Page2"/> 
</FixedDocument> 
Page3 
<FixedPage xmlns= 
"http://schemas.openxps.org/oxps/v1.0" 
...>...</FixedPage> 
FixedDocument2 
<FixedDocument xmlns= 
"http://schemas.openxps.org/oxps/v1.0"> 
<PageContent Source="Page3"/> 
</FixedDocument> 
Sequence1/[1].last.piece 
<DocumentReference Source="FixedDocument2" /> 
</FixedDocumentSequence> 
_rels/.rels/[1].last.piece 
</Relationships> 
end example] 
17.1.2.2 Multi-Threaded Parsing Architectures 
An optimal interleaving scheme for consumers with a multi-threaded parsing model interleaves 
parts so that each resource part that is required to consume a single page (images and fonts) is 
contained in the package after the FixedPage part referencing it. 

17. OpenXPS Document Package Features 
ECMA-388 
230 
First Edition, June 2009 
Multi-threaded parsing architectures typically require less run-time memory resources than 
single-threaded parsing architectures because the context in which resources appear is fully 
determined and, therefore, resources can be processed immediately. 
[Note: When interleaving entities containing XML markup, such as the DiscardControl part, the 
content type stream, and the FixedDocument part, there is no guarantee that XML element 
boundaries will align with piece boundaries in the physical package. A multi-threaded parsing 
architecture is naturally suited to address this problem. end note] 
Example 17–2. Optimized interleaving for a multi-threaded parsing architecture 
The following markup describes a sequence of two FixedDocument parts, the first having two 
FixedPage parts and the second having one FixedPage part: 
 
Part/Piece 
Markup 
_rels/.rels/[0].piece 
<Relationships 
xmlns="http://schemas.openxmlformats.org/package 
/2006/relationships"> 
<Relationship Type="StartPart" Target= 
"Sequence1"/> 
Sequence1/[0].piece 
<FixedDocumentSequence xmlns= 
"http://schemas.openxps.org/oxps/v1.0"> 
<DocumentReference Source="FixedDocument1"/> 
FixedDocument1/[0].piece 
<FixedDocument xmlns= 
"http://schemas.openxps.org/oxps/v1.0"> 
<PageContent Source="Page1"/> 
Page1.rels 
<Relationships xmlns= 
"http://schemas.openxmlformats.org/package/2006/rela
tionships"> 
<Relationship Type= 
"http://schemas.openxps.org/oxps/v1.0 
/required-resource" Target="Font1.ttf"/> 
</Relationships> 
Page1 
<FixedPage ="http://schemas.openxps.org 
/oxps/v1.0" ...> 
<Glyphs FontURI="Font1.ttf"/> 
</FixedPage> 
Font1.ttf 
...binary font data... 
Other resources 
...resource data... 
FixedDocument1/[1].last.pi
ece 
<PageContent Source="Page2"/> 
Page2 
<FixedPage xmlns= 
"http://schemas.openxps.org/oxps/v1.0" 
...>...</FixedPage> 
FixedDocument1/[2].last.pi
ece 
</FixedDocument> 
Sequence1/[1].last.piece 
<DocumentReference Source="FixedDocument2" /> 

ECMA-388 
17. OpenXPS Document Package Features 
 
 First Edition, June 2009 
231 
Part/Piece 
Markup 
</FixedDocumentSequence> 
FixedDocument2 
<FixedDocument xmlns= 
"http://schemas.openxps.org/oxps/v1.0"> 
<PageContent Source="Page3"/> 
</FixedDocument> 
Page3 
<FixedPage 
xmlns="http://schemas.openxps.org/oxps/v1.0" 
...>...</FixedPage> 
_rels/.rels/[1].last.piece 
</Relationships> 
end example] 
17.1.3 Consuming Interleaved Packages 
Consumers MUST be able to consume packages regardless of their interleaving structure 
[M10.2]. 
To address resource constraints: 
• Consumers MAY discard FixedPage parts once they have been processed [O10.3] 
• Consumers MAY discard FixedDocument and FixedDocumentSequence parts after all their 
child elements and their closing tags have been processed [O10.4]. 
• In the absence of explicit directives to the contrary (see §17.1.4), consumers MAY 
discard parts as directed by the DiscardControl part [O10.5]. Consumers MUST NOT 
discard any other parts [Example: Such as parts containing fonts, images, or other 
resources end example] unless they have the ability to access the parts again [M10.4]. 
If a consumer encounters a reference to an unknown part, it MUST continue to receive further 
bytes of the package until the unknown part has been transmitted or until the end of the 
package is reached (indicating an error condition) [M10.5]; if the end of the package is reached 
the consumer SHOULD instantiate an error condition [S10.23]. 
17.1.4 Consumers with Resource Constraints 
To produce an OpenXPS Document for streaming consumption by consumers with limited 
memory resources, some producers MAY choose a suitable interleaving order by modeling the 
resource management behavior of the consumer [O10.6]. These producers, referred to as 
drivers, must have specific knowledge of the OpenXPS Document consumer. Due to resource 
constraints, some consumers are unable to consume arbitrary OpenXPS Documents and always 
require assistance from an external driver. 
When some consumers with limited memory resources receive a OpenXPS Document in a 
streaming fashion, there might be an opportunity to discard parts when necessary and reload 
them again when needed. Producers, such as drivers, that target such consumers SHOULD 
follow these steps [S10.7]: 
• Conservatively model the memory usage of the device. 
• Interleave pieces of parts in the correct order. 
• Decide when certain parts can be discarded by the consumer and inform the consumer 
within the package stream (see §17.1.4.1). 

17. OpenXPS Document Package Features 
ECMA-388 
232 
First Edition, June 2009 
• Add to the package a uniquely named copy of a resource that could have been discarded, 
if the resource is referenced by a part sent later in the stream. Those later references 
are also updated to refer to the new copy of the resource. 
17.1.4.1 DiscardControl Part 
In addition to optimally ordering interleaved parts, producers can support consumers with 
resource constraints by means of the DiscardControl part. The DiscardControl part is a well-
known part containing a list of resources that are safe for the consumer to discard. 
DiscardControl parts are stored in OpenXPS Documents in an interleaved fashion, allowing a 
resource-constrained consumer to discard a part when that part is no longer required to 
process pages in the payload. DiscardControl parts are targeted with a DiscardControl package 
relationship, as specified in §D. There MUST NOT be more than one DiscardControl package 
relationship [M10.23]. The DiscardControl part MUST NOT reference itself [M10.6]; doing so is 
considered an error. 
Consumers MAY elect not to instantiate an error condition when encountering DiscardControl 
parts that do not conform to this specification [O10.17]. The consumer MAY decide to ignore 
the malformed DiscardControl part in its entirety or from the first malformed node onward 
[O10.7]. 
In some cases, producers might rewrite the contents of a package so that parts are provided 
more than once, allowing consumers to discard a part in order to free resources for additional 
processing. Each instance of a part MUST be stored as a new, uniquely named part in the 
package [M10.24]. 
Example 17–3. A DiscardControl part  
<DiscardControl xmlns="http://schemas.openxps.org/oxps/v1.0/discard- 
   control"> 
   <!-- May discard partname1 as soon as starting to process  
      page11.xml --> 
   <Discard SentinelPage="/page11.xml" Target="/partname1" /> 
   <!-- May discard partname2 as soon as starting to process  
      page13.xml --> 
   <Discard SentinelPage="/page13.xml" Target="/partname2" /> 
   ... 
</DiscardControl> 
end example] 
17.1.4.1.1 <DiscardControl> Element 
element DiscardControl 
diagram 
annotation Contains a list of resources that are safe for a consumer to discard. 

ECMA-388 
17. OpenXPS Document Package Features 
 
 First Edition, June 2009 
233 
17.1.4.1.2 <Discard> Element 
element Discard 
diagram 
attributes Name   
Type   
Use   
Default   Fixed   Annotation 
SentinelPage   xs:anyURI required      
   
The first fixed page that no longer needs the identified 
resource in order to be processed. 
Target   
xs:anyURI required      
   
The resource that can be safely discarded. 
annotation Identifies a resource that can be safely discarded by a resource-constrained consumer. 
Parts that can be discarded are identified in a <Discard> element by the Target attribute value, 
which is expressed as relative to the package root, and by the SentinelPage attribute value, 
which identifies the first FixedPage part that no longer requires the discarded part. (The 
processing order for FixedPage parts is implied by the order of <PageContent> element 
references in the FixedDocument part. Therefore, the value of the SentinelPage attribute is 
unambiguous.) 
If either the Target attribute or the SentinelPage attribute contain an invalid reference (refer 
outside the package), the respective <Discard> element MUST be ignored [M10.7]. If a 
<Discard> element is encountered where either or both of the Target attribute and SentinelPage 
attribute identify a part which has not been processed yet (is still unknown), the <Discard> 
element SHOULD be retained until both parts identified by the Target attribute and SentinelPage 
attribute have been processed or until the end of the package is reached [S10.9]. 
17.1.5 Interleaving Optimizations and Digital Signatures 
In general, it is not feasible to produce well-ordered, interleaved ZIP packages and apply digital 
signatures in a way that enables reasonable consumption scenarios for the following reasons:  
• The digital signature parts must be known to consumers before they process other signed 
parts because the selected hash-methods and transforms must be known. A streaming 
consumer might not be able to access part data after it has been processed for printing. 
• Producers cannot create the digital signature parts before producing the signed 
packages. 
• There are cyclic dependencies with signed relationship parts containing the relationship 
to the signature parts themselves. 
Therefore, when adding a digital signature to an interleaved package, producers of digitally 
signed documents that are intended for streaming consumption SHOULD add all digital 
signature parts and the package relationship to the digital signature parts at the beginning of 
the package, before adding any other part [S10.10].  

17. OpenXPS Document Package Features 
ECMA-388 
234 
First Edition, June 2009 
17.2 Digital Signatures 
The digital signature specification for OpenXPS Documents is described in the OPC Standard. It 
allows users to sign arbitrary parts, relationship parts, and individual relationships. Although 
OpenXPS Documents also use these digital signature mechanisms, they have a specific 
signature policy and a specific signing mechanism for documents containing co-signing 
requests. 
[Note: Consistent with the OPC Specification, implementations may include signatures with 
arbitrary data in the XML Signature <Object> element. end note] 
17.2.1 Signature Policy 
This Standard defines the signature policy that governs the methods of signing and verifying 
signatures for OpenXPS Documents. The OpenXPS Document signature policy includes a 
specific set of signing rules and validity rules. All producers and consumers signing and 
verifying signatures for end users or applications MUST adhere to these rules consistently 
[M10.8] to ensure that end users can rely on applications to display accurate signature 
information. 
When signing a document, users can choose to make any of the following actions invalidate the 
signature: 
• Editing core properties 
• Adding signatures 
Consumers MUST NOT prevent an end user from taking an action solely because doing so will 
invalidate an existing signature [M10.9]. Consumers SHOULD, however, inform the end user if 
an action they are going to take will invalidate an existing signature [S10.11]. 
17.2.1.1 Signing Rules 
An OpenXPS Document MUST be considered signed according to the OpenXPS Document 
signing policy, regardless of the validity of that signature, if the following signing rules are 
followed [M10.10]: 
1. The following parts MUST be signed [M10.10]: 
a. The <SignedInfo> portion of the Digital Signature XML Signature part containing this 
signature. 
b. The FixedDocumentSequence part that is the target of the Start Part package 
relationship. 
c. All FixedDocument parts referenced in the markup of the FixedDocumentSequence 
part. (Adding a FixedDocument part to a signed OpenXPS Document will invalidate the 
signature.) 
d. All FixedPage parts referenced by all signed FixedDocument parts. 
e. All parts associated with each signed FixedPage part by means of a Required Resource 
relationship (such as fonts, images, color profiles, remote resource dictionaries). 
f. All DocumentStructure parts associated via a Document Structure relationship with all 
signed FixedDocument parts. 
g. All StoryFragments parts associated via Story Fragments relationship with all signed 
FixedPage parts. 

ECMA-388 
17. OpenXPS Document Package Features 
 
 First Edition, June 2009 
235 
h. All SignatureDefinitions parts associated via a Signature Definitions relationship with 
any signed FixedDocument part. (Once a document is signed, adding any new 
signature definitions will invalidate the signature.) 
i. All Thumbnail parts associated via a Thumbnail relationship from the package root or 
with any signed FixedPage part. . 
2. The following parts MAY be signed [O10.16]:  
a. The CoreProperties part. 
b. The Digital Signature Origin part. 
c. A Digital Signature Certificate part. 
d. PrintTicket parts. 
e. DiscardControl parts. 
3. All relationships with the following RelationshipTypes (see §D) MUST be signed [M10.10]:  
a. StartPart relationship from the package root 
b. DocumentStructure relationship from a FixedDocument part 
c. StoryFragments relationship from a FixedPage part 
d. Digital Signature Definitions relationship from a FixedDocument part 
e. Required Resource relationship from a FixedPage part 
f. Restricted Font relationship from a FixedDocument part 
g. Thumbnail relationship from a FixedPage part or the package root . 
4. All relationships with the following RelationshipTypes MUST be signed if their Target part 
is signed [M10.10]:  
a. Core Properties relationship 
b. Digital Signature Origin relationship 
c. Digital Signature Certificate relationship from a Digital Signature XML Signature part 
d. PrintTicket relationship 
e. DiscardControl relationship 
5. Relationships with the following RelationshipTypes MAY be signed as a group (they MUST 
NOT be signed individually) [M10.10]:  
a. All Digital Signature XML Signature relationships from the Digital Signature Origin part 
(signing all relationships of this RelationshipType will cause this signature to break 
when a new signature is added). 
6. All of the above-referenced parts and relationships MUST be signed using a single digital 
signature [M10.10].  
An OpenXPS Document MUST NOT be considered signed according to the OpenXPS Document 
signing policy if [M10.11]: 
1. Any part not covered by the signing rules above is included in the signature. 
2. Any relationship not covered by the signing rules above is included in the signature. 
An OpenXPS Document digital signer MUST NOT sign an OpenXPS Document that contains 
content (parts or relationships parts) to be signed that defines the Markup Compatibility 

17. OpenXPS Document Package Features 
ECMA-388 
236 
First Edition, June 2009 
namespace when the signer does not fully understand all elements, attributes, and alternate 
content representations introduced through the markup compatibility mechanisms [M10.12]. An 
OpenXPS Document digital signer MAY choose not to sign any content (parts or relationships 
parts) that defines the Markup Compatibility namespace, even when the content is fully 
understood [O10.8]. 
An OpenXPS Document digital signer MUST NOT sign a PrintTicket part if it does not fully 
understand the PrintTicket content [M10.25]. 
17.2.1.2 Signing Validity 
An OpenXPS Document digital signature MUST be treated as an incompliant digital signature if 
[M10.13]: 
• It violates any of the signing rules described above regarding parts or relationships that 
MUST NOT be signed. 
An OpenXPS Document digital signature MUST be shown as a broken digital signature if 
[M10.14]: 
• It is not an incompliant digital signature and it violates any of the signing rules described 
above regarding parts or relationships that MUST be signed.  
• It is not an incompliant digital signature, but the signature fails the signature validation 
routines described in the OPC. 
An OpenXPS Document digital signature MUST be shown as a questionable digital signature if 
any of the following are true [M10.15]: 
• It is not an incompliant or broken digital signature, but the certificate cannot be 
authenticated against the certificate authority. 
• It is not an incompliant or broken digital signature, but the signed content (parts and 
relationships) contain elements or attributes from an unknown namespace introduced 
through the Markup Compatibility mechanisms. 
An OpenXPS Document digital signature MAY be shown as a questionable digital signature if 
[O10.9]: 
• It is not an incompliant or broken digital signature, but contains some other detectable 
problem at the discretion of the consumer. 
An OpenXPS Document digital signature MUST be shown as a valid digital signature if 
[M10.16]: 
• It is not an incompliant, broken, or questionable digital signature. 
17.2.1.3 Adding Signatures 
OpenXPS Documents MAY be signed more than once [O10.10]. A user who signs an OpenXPS 
Document might or might not want to allow any additional signing of the document. To prohibit 
additional signatures in an OpenXPS Document, the signing application MUST sign all the Digital 
Signature Origin part’s relationships of relationship type Digital Signature with the same 
signature as the rest of the content [M10.17]. 

ECMA-388 
17. OpenXPS Document Package Features 
 
 First Edition, June 2009 
237 
17.2.1.4 Certificate Store 
OpenXPS Document signatures MUST NOT refer to a remote certificate store (certificate not 
contained in the OpenXPS Document). All certificates MUST be stored in the OpenXPS 
Document either as a Certificate part or in the Digital Signature XML Signature part [M10.18]. 
17.2.1.5 Printing Signed Documents 
Consumers that support printing of signed documents SHOULD support control through 
PrintTicket settings pertaining to the treatment of OpenXPS Documents with invalid or 
questionable signatures [S10.22]. 
This setting can specify behaviors such as: 
1. Print the job regardless of the validity of the digital signatures. Digital signatures can be 
ignored. 
2. Print the job regardless of the validity of the digital signatures. In the event an invalid 
signature is encountered, an error page should print at the end of the job. Digital signatures 
cannot be ignored. 
3. Print the job only if all digital signatures are valid. Digital signatures cannot be ignored. 
17.2.2 Signature Definitions 
In some workflow scenarios, documents must be signed as a means of approving their content. 
[Example: Document producers might be required to sign their documents in order to provide 
proof of authenticity. end example] In other cases, reviewers might be required to co-sign 
content before it can be submitted for publication. These requirements can be fulfilled with a 
digitally signed OpenXPS Document.  
Whereas the OpenXPS package model supports the signing of arbitrary content in a package, 
an OpenXPS Document signing workflow requires additional features, including the ability to 
specify co-signature requirements and to include workflow-specific signature information in the 
document. OpenXPS Document authors and signing parties provide such information in an XML 
signature definition.  
Signature definitions are represented by <SignatureDefinition> elements within a single 
<SignatureDefinitions> element. 
Example 17–4. A SignatureDefinitions part 
<SignatureDefinitions xmlns="http://schemas.openxps.org/oxps/v1.0/ 
   signature-definitions"> 
   <SignatureDefinition SignerName="John Smith"  
     SpotID="0e0a7abb-48c9-595d-77db-305e84a05fc3"> 
      <SpotLocation  
         PageURI="/Documents/1/Pages/2.fpage"  
         StartX="0.0"  
         StartY="0.0" /> 
      <Intent>I have read and agree</Intent> 
      <SignBy>2005-08-20T23:59:59Z</SignBy> 
      <SigningLocation>New York, NY</SigningLocation> 
   </SignatureDefinition> 
</SignatureDefinitions> 
end example] 

17. OpenXPS Document Package Features 
ECMA-388 
238 
First Edition, June 2009 
17.2.2.1 <SignatureDefinitions> Element 
element SignatureDefinitions 
diagram 
 
annotation The root element for the SignatureDefinitions part. 
If the SignatureDefinitions part exists, it MUST contain only one <SignatureDefinitions> 
element [M10.26]. The XML namespace for the <SignatureDefinitions> element is specified 
in §D.1. 
17.2.2.2 <SignatureDefinition> Element 
element SignatureDefinitionsType/SignatureDefinition 
diagram 
 
attributes Name   
Type   
Use   
Default   Fixed   Annotation 
SpotID   
xs:ID 
required      
   
A globally unique identifier for this signature spot. 
SignerName   xs:string    
   
   
A string representing the identity of the individual who is 
requested to sign the OpenXPS Document, or the name of 
the individual who has signed the OpenXPS Document. 
xml:lang   
 
   
   
   
Specifies the language used for the current element and its 
descendants. The language is specified according to RFC 
3066. 
annotation A single signature definition. 
If the SignatureDefinitions part exists, there MUST be at least one <SignatureDefinition> 
element [M10.27]. 

ECMA-388 
17. OpenXPS Document Package Features 
 
 First Edition, June 2009 
239 
17.2.2.2.1 SpotID Attribute 
The SpotID attribute is REQUIRED [M2.72]. This attribute MAY be used to link an existing 
signature to the <SignatureDefinition> element [O10.12]. The value of this attribute MUST be 
globally unique to ensure that a Signature part can be linked to only one <SignatureDefinition> 
element [M10.29]. To link a <SignatureDefinition> to a signature, the value of the SpotID MUST 
be specified in the Id attribute of the corresponding <Signature> element in the Digital 
Signature XML Signature part [M10.19].. 
17.2.2.3 <SpotLocation> Element 
element SignatureDefinitionType/SpotLocation 
diagram 
 
attributes Name   
Type   
Use   
Default   Fixed   Annotation 
PageURI   xs:anyURI required      
   
Specifies the page on which the signature spot should be 
displayed. 
StartX   
xs:double required      
   
Specifies the x coordinate of the origin point (upper-left 
corner) on the page where the signature spot should be 
displayed. 
StartY   
xs:double required      
   
Specifies the y coordinate of the origin point (upper-left 
corner) on the page where the signature spot should be 
displayed. 
annotation Specifies where a consumer should place a signature spot. 
The <SpotLocation> element is OPTIONAL [O10.15]. It specifies where an OpenXPS Document 
viewer should place a visual representation or signature spot to indicate that a digital signature 
has been applied or requested. The viewing consumer SHOULD use the values specified in this 
element [O10.15]. Due to space and rendering limitations, producers MUST NOT assume that 
consumers will use these values [M10.20]. If the location specified by this element is not used, 
it is RECOMMENDED that consumers choose a location that does not contain any page content 
[S10.13]. 
The size and shape of the signature spot are determined by the consumer. Consumers MAY 
choose a size and shape based on the desired display information and page content [O10.13]. 
However, it is RECOMMENDED that they render signature spots as consistently sized rectangles 
that include the signer name, the intent, the signing location, and the scope of the OpenXPS 
Document to be signed [S10.14]. It is also RECOMMENDED that the signature spot be a 
clickable area used to launch the digital signing process [S10.15]. 

17. OpenXPS Document Package Features 
ECMA-388 
240 
First Edition, June 2009 
Figure 17–1. A sample signature spot 
 
17.2.2.4 <Intent> Element 
element SignatureDefinitionType/Intent 
diagram 
 
annotation A string that represents the intent to which the signing party agrees when signing the document. 
Consumers MUST display the full value of the <Intent> element to the signing party, either in 
the signature spot or through some other mechanism [M10.21]. 
[Note: Consumers that wish to display signature spots must consider the implications of 
supporting any Unicode character that can be specified in the <Intent> element, and of the 
possibility of Unicode non-characters being included. They must also make decisions about the 
appropriate font face and size to use as well as determine the proper layout and interactivity of 
the signature spot. In the interests of maximizing compatibility, creators are recommended to 
normalize the string using NFC. These decisions are implementation-defined. end note] 
17.2.2.5 <SignBy> Element 
element SignatureDefinitionType/SignBy 
diagram 
 
annotation The date and time by which the requested party is to sign the OpenXPS Document. 
If specified, the consumer SHOULD NOT allow the signing party to sign the document using this 
particular signature spot after the date and time specified [S10.16]. The date and time MUST 
be specified in UTC time, using the format "Complete date plus hours, minutes and seconds" 
described in the W3C Note “Date and Time Formats” [M10.22], [Example: “2006-12-
31T23:59:59Z” for 11:59 PM (UTC) on December 31, 2006. end example] 
17.2.2.6 <SigningLocation> Element 
element SignatureDefinitionType/SigningLocation 
diagram 
annotation The legal location where the document is signed. 
The <SigningLocation> element MAY be set by the original producer of the OpenXPS Document 
or by the signing party at the time of requesting a signature [O10.14].  

ECMA-388 
17. OpenXPS Document Package Features 
 
 First Edition, June 2009 
241 
17.3 Core Properties 
OpenXPS Documents use the Core Properties part described in the OPC. The core properties 
specified in that part SHOULD refer to the entire fixed payload, including the root 
FixedDocumentSequence part and the compilation of all FixedDocument parts it references 
[S10.17]. 


ECMA-388 
18. Rendering Rules 
 
 First Edition, June 2009 
243 
18. Rendering Rules 
The set of rules described here ensures precise and consistent rendering of OpenXPS Document 
markup across various implementations. Producers MUST generate OpenXPS Documents that 
can be accurately rendered by following the rules described in this clause [M11.1]. Consumers 
MUST adhere to the rules described in this clause when rendering OpenXPS Documents 
[M11.1]. In addition to rules for visual elements, implementation limits are also discussed.  
18.1 Coordinate System and Rendering Placement 
In the x,y coordinate system, one unit is initially equal to 1/96 inch, expressed as a real 
number. The initial origin of the coordinate system is the top left corner of the fixed page. The 
x-coordinate value increases from left to right; the y-coordinate value increases from top to 
bottom. 
A RenderTransform property can be specified on any path, glyphs, or canvas to apply an affine 
transform to the current coordinate system. 
A Transform property can be specified on any visual brush, image brush, linear gradient brush, 
radial gradient brush, or path geometry to apply an affine transform to the current coordinate 
system. 
18.1.1 Page Dimensions 
The logical page dimensions correspond to the page size specified in the application page layout 
and are specified by the Width and Height attributes of the <FixedPage> element. Further 
optional attributes on the <FixedPage> element are used to specify details about the areas of 
the fixed page that contain rendered content. For more information, see §10.3. 
18.1.2 Rounding of Coordinates 
All computations on coordinate values SHOULD be performed with at least single floating-point 
precision [S11.1]. Final conversion (after all transforms have been computed) to device 
coordinates SHOULD retain at least as much fractional precision as a 28.4 fixed-point 
representation before performing pixel coverage calculations [S11.1].  
Very high resolution devices MAY use lower fractional precision to represent device coordinates 
[O11.1]. 
When converting from real-number coordinate values to device coordinate values, rounding is 
performed according to the following rule: 
coordD = ROUND(coordR*16.0)/16 
Where coordR expresses a real-number coordinate value and coordD expresses a device 
coordinate value. 

18. Rendering Rules 
ECMA-388 
244 
First Edition, June 2009 
18.1.3 Transforms 
OpenXPS Document markup supports affine transforms as expressed through the 
RenderTransform and Transform properties. An affine transform is represented as a list of six 
real numbers: m11, m12, m21, m22, OffsetX, OffsetY. (For markup details, see §14.4.) 
The full matrix is as follows:  
൥
𝑀𝑀11
𝑀𝑀12
0
𝑀𝑀21
𝑀𝑀22
0
𝑂𝑂𝑂𝑂𝑂𝑂𝑂𝑂𝑂𝑂𝑂𝑂𝑂𝑂
𝑂𝑂𝑂𝑂𝑂𝑂𝑂𝑂𝑂𝑂𝑂𝑂𝑂𝑂
1
൩ 
A given x,y coordinate is transformed with a render transform to yield the resulting coordinate 
x′,y′ by applying the following computations: 
X' = x * m11 + y * m21 + OffsetX 
y' = x * m12 + y * m22 + OffsetY 
When rendering a child or descendant element, the effective transform used for rendering is the 
concatenation of all the transforms specified by the RenderTransform or Transform property on 
parent or ancestor elements, starting from the outermost ancestor. 
Non-invertible effective transforms can be specified in markup or occur as a result of limited 
numerical precision during concatenation. If a non-invertible transform is encountered during 
rendering, consumers MUST omit rendering the affected element and all of its child and 
descendant elements [M11.2].  
If a non-invertible transform is encountered on a brush (as specified directly on the brush, as a 
result of the Viewbox or Viewport attributes, or through concatenation), the brush is treated 
according to §18.7.1.  
The Width and Height values specified in the Viewbox and Viewport attributes of an 
<ImageBrush> or <VisualBrush> element MUST NOT be negative [M11.10]. 
If a non-invertible transform is encountered on a geometry (as specified directly on the 
geometry or through concatenation), the geometry MUST be considered to contain no area 
[M11.3]. 
A final, device-dependent step using the horizontal resolution and vertical resolution of the 
device converts the resulting coordinates x′,y′ to device coordinates x″,y″, as follows: 
x' = x' * RX/96 
y' = y' * RY/96 
Where RX is the horizontal resolution and RY is the vertical resolution of the device, specified in 
device pixels per inch.  
18.1.4 Pixel Center Location, Pixel Placement, and Pixel Inclusion 
A pixel covers the range from x to x+1. 
An ideal consumer implementation SHOULD render pixels in an 8x8 sub-pixel space, perform an 
8x8 box filter sampling, and set the pixel to the resulting color value [S11.2]. Other 
implementations MAY use different rendering logic as long as it closely approximates this logic 
[O11.2]. 

ECMA-388 
18. Rendering Rules 
 
 First Edition, June 2009 
245 
When rendering a shape, a practical implementation (such as a bi-tonal printing device) 
SHOULD turn on each pixel whose center (at x+0.5) is covered by the shape, or is touched by 
the shape with the shape extending beyond the pixel center in the positive x or y direction of 
the device [S11.3]. Devices MAY use sub-pixel masking instead [O11.3].  
By definition, a shape with an area width of 0 (that is, no included area) does not touch or 
cover any pixel centers. A stroke with a width of 0 is treated in the same manner. 
As a result of these rules, the behavior for very thin lines is implementation-defined: 
• An implementation capable of anti-aliasing MAY draw a thin line in a way that blends with 
the background to varying degrees [O11.4]. 
• A bi-tonal implementation on a printer MAY draw thin lines, or apply half-toning, 
depending on the desired output quality [O11.5]. If such an implementation chooses to 
draw thin lines, then it MAY choose to draw them with drop outs, following requirement 
S11.3 in §18.1.4 above, or as solid rules of 1 pixel thickness [O11.26]. 
[Note: Also see §18.6.12 for discussion of thin strokes. end note] 
18.1.5 Maximum Placement Error 
When rendering geometries, consumers SHOULD render curves so they appear smooth from a 
normal viewing distance [S11.4]. Producers MUST NOT assume a specific placement error for 
curve decomposition or rely on side-effects of a specific consumer implementation [M11.4]. 
18.1.6 Pixel Placement for Glyphs 
Regardless of other rules expressed here, consumers MAY apply pixel placement rules 
optimized for character rendering to individual glyphs in a <Glyphs> element [O11.6]. Such 
rules can result from font hinting applied by the typeface scaler used by a consumer 
implementation. 
18.1.7 Abutment of Shapes 
When no anti-aliasing is used, abutting shapes that share the same device coordinates for the 
end-points and control-points of an edge SHOULD be rendered without overlap and without 
gaps [S11.5]. Ideally, an implementation SHOULD also follow this rule for shapes that are 
mathematically abutting without sharing device coordinates for end-points and control-points of 
edges [S11.5]. 
18.1.8 Clipping Behavior 
Clipping occurs as if a mask were created from the clip geometry according to the pixel 
placement rules defined in §18.1.4. An ideal consumer SHOULD create such a mask in an 8x8 
sub-pixel space and subsequently draw only those sub-pixels of a shape that correspond to 
“ON” sub-pixels in the mask [S11.6]. 
A practical implementation (such as a bi-tonal printing device) SHOULD create a pixel mask 
according to §18.1.4, and subsequently draw only those pixels of a shape that correspond to 
“ON” pixels in the mask. In creating the mask and drawing the shape, the abutment of shapes 
rule SHOULD be observed so that no pixel of the shape is drawn that would not have been 
drawn if the clip geometry were another abutting shape [S11.7]. Devices MAY use sub-pixel 
masking instead [O11.3]. 

18. Rendering Rules 
ECMA-388 
246 
First Edition, June 2009 
18.2 Implementation Limits 
OpenXPS Document markup does not assume fixed implementation limits. However, consumers 
can have specific implementation limits imposed by their operating environment. OpenXPS 
Document markup has been designed so that even complex pages can be represented 
accurately and with high fidelity. 
A typical consumer implementation SHOULD be able to process markup with the characteristics 
indicated in Table 18–1 [S11.8]. If a consumer encounters markup with characteristics outside 
its implementation-defined limits, it MUST instantiate an error condition [M11.5]. 
Table 18–1 provides the RECOMMENDED minimum requirements for individual elements. 
Consumers also have limits on the total number of elements, as imposed by available memory. 
Producers SHOULD produce only OpenXPS Documents that stay within these implementation 
limits [S11.8]. 
In order to process pages that contain a large number of elements, consumers MAY implement 
support for the DiscardControl part in order to discard elements that have already been 
processed [O10.5]. 
Table 18–1. Recommended minimum processing requirements 
Characteristic 
Type 
Limit 
Description 
Coordinates/transformation 
matrix elements 
Real 
number 
+/– 1012 
Largest and smallest coordinate values. 
Calculations involving numbers close to 
this limit within a few orders of 
magnitude are likely to be inaccurate. 
Smallest representable non-
zero value 
 
+/– 10-12 
Coordinate values closest to 0 without 
rounding to 0. Calculations involving 
numbers close to this limit within a few 
orders of magnitude are likely to be 
inaccurate. 
Required precision for 
coordinates 
 
Single 
floating point 
Coordinates are real numbers and 
SHOULD be computed with at least 
single floating point precision [S11.1]. 
Nested <Canvas> elements 
 
16 
Depth of nested <Canvas> elements. 
Nested <VisualBrush> 
elements 
 
16 
Depth of nested <VisualBrush> 
elements within the Visual property. 
If the nesting level is higher than the 
limit, a consumer SHOULD attempt to 
find alternative processes such as  
flattening the nested content to a 
bitmap representation rather than 
failing to draw [S11.10]. 
Total number of points in a 
path figure 
 
100,000 
 
Total number of points in a 
segment 
 
100,000 
 
Total number of points in a 
geometry 
 
100,000 
 
Total number of elements per 
page 
 
1,000,000 
 

ECMA-388 
18. Rendering Rules 
 
 First Edition, June 2009 
247 
Characteristic 
Type 
Limit 
Description 
Number of glyphs per 
<Glyphs> element 
 
5,000 
 
Number of elements in a 
single resource dictionary 
 
10,000 
 
Total number of elements in 
all resource dictionaries of an 
individual page 
 
10,000 
 
Total number of resource 
dictionaries in nested canvas 
scope 
 
Number of 
nested 
<Canvas> 
elements + 1 
The <FixedPage> element and each 
nested <Canvas> element can have at 
most one associated 
<ResourceDictionary> element 
Number of gradient stops in a 
gradient brush 
 
100 
 
Number of fixed documents in 
a fixed document sequence 
 
1,000 
 
Number of fixed pages in a 
fixed document 
 
1,000,000 
 
Number of dash-gap 
segments in StrokeDashArray 
property 
 
No preset 
limit 
Practical number of dash-gap segments 
depends on the StrokeThickness and 
the total length of the stroked path. 
Total size of OpenXPS 
Document markup per page 
Bytes 
64,000,000 
Total size of markup after removing all 
unnecessary whitespace (according to 
the schema in §A.2), assuming markup 
elements are specified in the default 
namespace without namespace prefixes, 
and assuming the most compact 
representation of all attributes using 
abbreviated syntax where possible. 
18.3 Gradient Computations 
To ensure the greatest possible consistency among consumers, gradients SHOULD be rendered 
according to the guidelines described in this subclause [S11.11].  
18.3.1 All Gradients 
Linear gradients and radial gradients share a common set of recommended operations for pre-
processing gradient stops and blending colors. These are described below. 
18.3.1.1 Gradient Stop Pre-Processing 
Consumers SHOULD pre-process gradient stops for all gradients using the following steps 
[S11.12]: 
1. Sort all gradient stops by their respective offset values in ascending order. When two or 
more gradient stops have the same offset value, preserve their relative order from the 
markup while sorting. When more than two gradient stops have the same offset value, 
remove all but the first and last gradient stops having the same offset value. 
2. If no gradient stop with an offset of 0.0 exists,  

18. Rendering Rules 
ECMA-388 
248 
First Edition, June 2009 
a. And no gradient stop with an offset less than 0.0 exists, create an artificial gradient 
stop having an offset of 0.0 and a color of the gradient stop with the smallest offset 
value. 
b. And a gradient stop with an offset less than 0.0 exists and a gradient stop with an 
offset greater than 0.0 exists, create an artificial gradient stop having an offset of 0.0 
and a color interpolated between the two gradient stops surrounding 0.0. Discard all 
gradient stops with an offset less than 0.0. 
c. And a gradient stop with an offset less than 0.0 exists and no gradient stop with an 
offset greater than 0.0 exists, create an artificial gradient stop having an offset of 0.0 
and a color of the gradient stop with the largest offset value. Discard all gradient stop 
elements with an offset less than 0.0. 
3. If no gradient stop with an offset of 1.0 exists, 
a. And no gradient stop with an offset of greater than 1.0 exists, create an artificial 
gradient stop having an offset of 1.0 and a color equal to the color of the gradient stop 
with the largest offset value. 
b. And a gradient stop with an offset greater than 1.0 exists and a gradient stop with an 
offset less than 1.0 exists, create an artificial gradient stop having an offset of 1.0 and 
a color interpolated between the two surrounding gradient stops. Discard all gradient 
stops with an offset greater than 1.0. 
c. And a gradient stop with an offset greater than 1.0 exists and no gradient stop with an 
offset less than 1.0 exists, create an artificial gradient stop having an offset of 1.0 and 
a color equal to that of the gradient stop with the smallest offset value. Discard all 
gradient stops with an offset greater than 1.0. 
18.3.1.2 Blending Colors 
If any gradient stops use an sRGB or scRGB color specification consumers SHOULD blend colors 
between gradient stops in the color space indicated by the ColorInterpolationMode attribute of the 
gradient brush, unless a PrintTicket setting provides an alternative blending color space that the 
consumer understands (see §9.1.9 and §15.5) [S11.13]. If none of the gradient stop elements 
uses an sRGB or scRGB color specification and the consumer understands the blending color 
space PrintTicket setting, the blending color space PrintTicket setting SHOULD be used 
[S11.13]. 
The function used for blending is:  
BLEND(offset, clo, chi)  
Where the offset is between 0 and 1. clo and chi designate the color values for an offset of 0 
and 1, respectively. 
If a ColorInterpolationMode value of SRgbLinearInterpolation is used, the BLEND() function 
SHOULD convert the color values to sRGB first, and then perform a linear interpolation between 
them [S11.14]. 
If a ColorInterpolationMode value of ScRgbLinearInterpolation is used, the BLEND() function 
SHOULD convert the color values to scRGB first, and then perform a linear interpolation 
between them [S11.15]. 
In the presence of transformations or when individual gradient stops are very close (separated 
by a few pixels or less in the device space), the local color gradient at the offset used in the 
BLEND() function might be large, resulting in a large change over the extent of a single device 

ECMA-388 
18. Rendering Rules 
 
 First Edition, June 2009 
249 
pixel. In this case, it is RECOMMENDED that the BLEND() function interpolate the gradient over 
the extent of each device pixel [S11.16]. However, the behavior MAY differ from this 
recommendation in an implementation-defined manner [O11.7] and, therefore, producers 
SHOULD NOT rely on a specific effect for such dense gradient specifications [S11.16]. 
As a consequence of this interpolation, radial gradients that define the gradient origin on or 
outside the ellipse create an outside area that can be rendered inconsistently. The radial 
gradients that are affected are those that define multiple gradient stops that are of different 
colors and are very close in Offset value to 0.0 or 1.0 (the gradient end points), for radial 
gradients with a SpreadMethod value of Repeat or Reflect, respectively. For these affected 
gradients, consumers MAY use an interpolated color value for the outside area [O11.8]. 
Depending on the resolution, this can result in different colors than those defined by the 
gradient end points. The closer a gradient stop is to the affected gradient end point, the more 
the rendering results generated by different consumers and at different display resolutions can 
differ. Producers SHOULD therefore either avoid such close gradient stops to the gradient end 
point when specifying radial gradients where the outside area is visible or avoid specifying 
radial gradients with a gradient origin on or outside the ellipse (in which case, there is no 
outside area) to ensure consistent rendering results [S11.17]. 
18.3.2 Linear Gradients 
Consumers SHOULD render an element filled with a linear gradient brush using an 
implementation of the BLEND() function such that the appearance is the same as if the 
following steps had been taken [S11.33]: 
4. Transform the StartPoint and EndPoint attribute values using the current effective render 
transform (including the render transform for the element being filled by the linear 
gradient brush and the brush’s transform itself). 
5. If the SpreadMethod value is Pad, the colors of points on the line defined by the StartPoint 
and EndPoint attributes are defined by interpolating the coordinates linearly, and each 
color component (such as  R, G, B for sRGB and scRGB) as well as the alpha component 
is interpolated between the component values of the closest enclosing gradient stops: 
For each offset (real number) t < 0: 
{ 
   x(t) = (EndPointx–StartPointx)*t+StartPointx 
   y(t) = (EndPointy-StartPointy)*t+StartPointy 
   c(t) = cfirst 
   a(t) = afirst 
} 
Where c is the color component and a is the alpha component. cfirst are the color 
component values of the first gradient stop (after sorting) and afirst is the alpha 
component value at the first gradient stop (after sorting). 
For each offset (real number) 0 <= t <= 1: 
{ 
   x(t) = (EndPointx-StartPointx)*t+StartPointx 
   y(t) = (EndPointy-StartPointy)*t+StartPointy 
   c(t) = BLEND((t-tlo)/(thi-tlo),clo,chi) 
   a(t) = [(t-tlo)/(thi-tlo)]*(ahi-alo)+alo 
} 
Where tlo and thi are the offsets, clo and chi are the color component values at the 
closest enclosing gradient stops (that is, tlo <= t <= thi) and alo and ahi are the alpha 
component values at the closest enclosing gradient stops (tlo <= t <= thi). 

18. Rendering Rules 
ECMA-388 
250 
First Edition, June 2009 
For each offset (real number) t > 1: 
{ 
   x(t) = (EndPointx-StartPointx)*t+StartPointx 
   y(t) = (EndPointy-StartPointy)*t+StartPointy 
   c(t) = clast 
   a(t) = alast 
} 
Where clast are the color component values of the last gradient stop (after sorting) and 
alast is the alpha component value at the last gradient stop (after sorting). 
6. If the SpreadMethod value is Repeat, the colors of points on the line defined by the 
StartPoint and EndPoint attributes are defined by interpolating the coordinates linearly, and 
each color component (such as R, G, B for sRGB and scRGB) as well as the alpha 
component is interpolated between the component values of the closest enclosing 
gradient stops: 
For each repetition (all integers) N: 
{ 
   For each offset (real number) 0 <= t < 1: 
   { 
      x(t) = (EndPointx-StartPointx)*(N+t)+StartPointx 
      y(t) = (EndPointy-StartPointy)*(N+t)+StartPointy 
      c(t) = BLEND((t-tlo)/(thi-tlo),clo,chi) 
      a(t) = [(t-tlo)/(thi-tlo)]*(ahi-alo)+alo 
   } 
} 
Where c is the color component and a is the alpha component. tlo and thi are the offsets, 
clo and chi are the color component values at the closest enclosing gradient stops (that is, 
tlo <= t <= thi) and alo and ahi are the alpha component values at the closest enclosing 
gradient stops (tlo <= t <= thi). 
7. If the SpreadMethod value is Reflect, the colors of points on the line defined by the 
StartPoint and EndPoint attributes are defined by interpolating the coordinates linearly, and 
each color component (such as R, G, B for sRGB and scRGB) as well as the alpha 
component is interpolated between the component values of the closest enclosing 
gradient stops: 
For each repetition (all integers) N: 
{ 
   For each offset (real number) 0 <= t <= 1: 
   { 
      If (N is EVEN) 
      { 
         x(t) = (EndPointx-StartPointx)*(N+t)+StartPointx 
         y(t) = (EndPointy-StartPointy)*(N+t)+StartPointy 
      } 
      Else 
      { 
         x(t) = (EndPointx-StartPointx)*(N+1-t)+StartPointx 
         y(t) = (EndPointy-StartPointy)*(N+1-t)+StartPointy 
      } 
      c(t) = BLEND((t-tlo)/(thi-tlo),clo,chi) 
      a(t) = [(t-tlo)/(thi-tlo)]*(ahi-alo)+alo 
   } 
} 

ECMA-388 
18. Rendering Rules 
 
 First Edition, June 2009 
251 
Where c is the color component and a is the alpha component. tlo and thi are the offsets, 
clo and chi are the color component values at the closest enclosing gradient stops (that is, 
tlo <= t <= thi) and alo and ahi are the alpha component values at the closest enclosing 
gradient stops (tlo <= t <= thi). 
8. The colors of points not on the extended line defined by the StartPoint and EndPoint 
attributes are the same as the color of the closest point on the line defined by the 
StartPoint and EndPoint attributes, measured in the coordinate space as transformed by 
the current effective render transform (including the render transform for the element 
being filled by the linear gradient brush and the brush’s transform itself). 
9. Clip the resulting set of points to the intersection of the current clip geometry and the 
path or glyphs to be filled. Both the clip and path (or glyphs) must be transformed 
according to the current effective render transform, including the render transform for 
the element being filled, but not including the transform of the linear gradient brush.0. 
For purposes of the above steps, the closest enclosing gradient stops mean the gradient stops 
that, as sorted following §18.3.1.1, are numerically closest to the interpolation point if that 
interpolation point were converted to an offset value and inserted in a sorted fashion into the 
list of gradient stops. [Example: If a gradient contains three gradient stops at offset 
values 0.0, 0.0, and 1.0, the closest enclosing gradient stops for any value 0 <= value <= 1 
are the second gradient stop (offset 0.0) and the third gradient stop (offset 1.0). end example] 
18.3.3 Radial Gradients 
Consumers SHOULD render an element filled with a radial gradient brush using an 
implementation of the BLEND() function such that the appearance is the same as if these steps 
had been followed [S11.34]: 
1. The boundary of the area filled by a radial gradient brush is defined by interpolating 
ellipses from the GradientOrigin value to the circumference of the ellipse centered at the 
point specified by the Center attribute with radii equal to the RadiusX and RadiusY 
attribute values(the interpolated ellipses and point being transformed by the current 
effective render transform, including the render transform for the element being filled by 
the radial gradient brush and the brush’s transform itself). If the gradient origin is 
outside the circumference of the ellipse specified, the effect will be as if a cone were 
drawn, tapering to the gradient origin. 
2. If the SpreadMethod value is Pad, the centers and radii of the interpolated ellipses are 
defined by linearly interpolating the center of the ellipse from the GradientOrigin attribute 
value to the Center attribute value, and simultaneously linearly interpolating the radii of 
the ellipse from 0 to the RadiusX and RadiusY attribute values: 
For each offset (real number) 0 <= t <= 1: 
{ 
   cx(t) = (Centerx-GradientOriginx)*t+GradientOriginx 
   cy(t) = (Centery-GradientOriginy)*t+GradientOriginy 
   rx(t) = RadiusX*t 
   ry(t) = RadiusY*t 
} 
The ellipses defined by the interpolation are transformed by the current effective render 
transform, including the render transform for the element being filled by the radial 
gradient brush and the brush’s transform itself. 
3. The colors of the points within the boundary of this shape are defined as the color of the 
smallest interpolated ellipse containing the point. The color of an interpolated ellipse is 

18. Rendering Rules 
ECMA-388 
252 
First Edition, June 2009 
defined by interpolating each color component (such as R, G, B for sRGB and scRGB) as 
well as the alpha component between the component values of the closest enclosing 
gradient stops: 
For each offset (real number) 0 <= t <= 1: 
{ 
   c(t) = BLEND((t-tlo)/(thi-tlo),clo,chi) 
   a(t) = [(t-tlo)/(thi-tlo)]*(ahi-alo)+alo 
} 
Where tlo and thi are the offsets, clo and chi are the color component values at the 
closest enclosing gradient stops (that is, tlo <= t <= thi) and alo and ahi are the alpha 
component values at the closest enclosing gradient stops (tlo <= t <= thi). 
4. If the SpreadMethod value is Repeat, the centers and radii of the interpolated ellipses are 
defined by linearly interpolating the center of the ellipse from the GradientOrigin attribute 
value to the Center attribute value, and simultaneously linearly interpolating the radii of 
the ellipse from 0 to RadiusX and RadiusY attribute values: 
For each repetition (all non-negative integers) N: 
{ 
   For each offset (real number) 0 <= t < 1: 
   { 
      cx(t) = (Centerx-GradientOriginx)*(N+t)+GradientOriginx 
      cy(t) = (Centery-GradientOriginy)*(N+t)+GradientOriginy 
      rx(t) = RadiusX*(N + t) 
      ry(t) = RadiusY*(N + t) 
   } 
} 
The ellipses defined by the interpolation are transformed by the current effective render 
transform, including the render transform for the element being filled by the radial 
gradient brush and the brush’s transform itself. 
5. The colors of the points within the boundary of this shape are defined as the color of the 
smallest interpolated ellipse containing the point. The color of an interpolated ellipse is 
defined by interpolating each color component (such as R, G, B for sRGB and scRGB) as 
well as the alpha component between the component values of the closest enclosing 
gradient stops: 
For each repetition (all non-negative integers) N: 
{ 
   For each offset (real number) 0 <= t < 1: 
   { 
      c(t) = BLEND((t-tlo)/(thi-tlo),clo,chi) 
      a(t) = [(t-tlo)/(thi-tlo)]*(ahi-alo)+alo 
   } 
} 
Where tlo and thi are the offsets, clo and chi are the color component values at the 
closest enclosing gradient stops (that is, tlo <= t <= thi) and alo and ahi are the alpha 
component values at the closest enclosing gradient stops (tlo <= t <= thi). 
6. If the SpreadMethod value is Reflect, the centers and radii of the interpolated ellipses are 
defined by linearly interpolating the center of the ellipse from the GradientOrigin attribute 
value to the Center attribute value, and simultaneously linearly interpolating the radii of 
the ellipse from 0 to the RadiusX and RadiusY attribute values: . 

ECMA-388 
18. Rendering Rules 
 
 First Edition, June 2009 
253 
For each non-negative integer N: 
{ 
   For each offset (real number) 0 <= t <= 1: 
   { 
      cx(t) = (Centerx-GradientOriginx)*(N+t)+GradientOriginx 
      cy(t) = (Centery-GradientOriginy)*(N+t)+GradientOriginy 
      rx(t) = RadiusX*(N+t) 
      ry(t) = RadiusY*(N+t) 
   } 
} 
The ellipses defined by the interpolation are transformed by the current effective render 
transform, including the render transform for the element being filled by the radial 
gradient brush and the brush’s transform itself. 
7. The colors of the points within the boundary of this shape are defined as the color of the 
smallest interpolated ellipse containing the point. The color of an interpolated ellipse is 
defined by interpolating each color component (such as R, G, B for sRGB and scRGB) as 
well as the alpha component between the component values of the closest enclosing 
gradient stops: 
For each non-negative integer N: 
{ 
   For each offset (real number) 0 <= t <= 1: 
   { 
      If N is ODD 
         t' = 1–t 
      Else 
         t' = t 
 
      c(t) = BLEND((t'-tlo)/(thi-tlo),clo,chi) 
      a(t) = [(t'-tlo)/(thi-tlo)]*(ahi-alo)+alo 
   } 
} 
Where tlo and thi are the offsets, clo and chi are the color component values at the 
closest enclosing gradient stops (that is, tlo <= t <= thi) and alo and ahi are the alpha 
component values at the closest enclosing gradient stops (tlo <= t <= thi). 
8. The colors of points outside the boundary of this shape (points which cannot be drawn by 
any combination of non-negative N and t) are defined as having the color and alpha 
defined in the gradient stop with the offset of 0.0 for radial gradients with a SpreadMethod 
value of Reflect and the color and alpha defined in the gradient stop with the offset of 1.0 
for radial gradients with a SpreadMethod value of Repeat or Pad. The colors outside of the 
boundary of this shape can also vary in an implementation-defined manner 
(see §18.3.1.2 for more details). 
9. Clip the resulting set of points by the intersection of the current clip geometry and the 
path or glyphs to be filled. Both the clip and path (or glyphs) must be transformed 
according to the current effective render transform, including the render transform for 
the element being filled, but not including the transform of the radial gradient brush. 
For purposes of the above steps, the closest enclosing gradient stops mean the gradient stops 
that, as sorted following §18.3.1.1, are numerically closest to the interpolation point if that 
interpolation point were converted to an offset value and inserted in a sorted fashion into the 
list of gradient stops. [Example: If a gradient contains three gradient stops at offset 

18. Rendering Rules 
ECMA-388 
254 
First Edition, June 2009 
values 0.0, 0.0, and 1.0, the closest enclosing gradient stops for any value 0 <= value <= 1 
are the second gradient stop (offset 0.0) and the third gradient stop (offset 1.0). end example] 
18.4 Opacity Computations 
Opacity is used to blend two elements when rendering, also known as alpha blending. The value 
of the Opacity property ranges from 0.0 (fully transparent) to 1.0 (fully opaque), inclusive. 
Values outside of this range are invalid. 
The opacity is applied through the following computations, assuming source and destination 
values are not pre-multiplied. All opacity calculations SHOULD be performed with at least 8-bit 
precision to provide sufficient quality for nested content [S11.18]. 
Individual pixels are blended as defined below. 
Table 18–2. Opacity computation symbols 
Symbol 
Description 
OE 
Opacity attribute of element 
OM 
Alpha value at corresponding pixel position in the OpacityMask attribute 
value 
AS 
Alpha value present in source color 
RS 
Red value present in source color 
GS 
Green value present in source color 
BS 
Blue value present in source color 
AD 
Alpha value already present in destination surface 
RD 
Red value already present in destination surface 
GD 
Green value already present in destination surface 
BD 
Blue value already present in destination surface 
AR 
Resulting Alpha value for destination surface 
RR 
Resulting Red value for destination surface  
GR 
Resulting Green value for destination surface  
BR 
Resulting Blue value for destination surface 
All values designated with a T subscript (as in RT1) are temporary values. 
The opacity is calculated as follows: 
1. Multiply source alpha value with opacity value and alpha value of opacity mask. 
AS1 = AS*OE*OM 
2. Pre-multiply source alpha. 
If the source data specifies pre-multiplied alpha (see §18.4.1 for details) AT1=0, RT1 = RS, 
GT1 = GS, BT1 = BS; otherwise: 
AT1 = AS1 
RT1 = RS*AS1 
GT1 = GS*AS1 
BT1 = BS*AS1 

ECMA-388 
18. Rendering Rules 
 
 First Edition, June 2009 
255 
3. Pre-multiply destination alpha. 
If a consumer supports superluminous colors (see §18.4.1 for details) AT2 = AD, RT2 = RD, 
GT2 = GD, BT2 = BD; otherwise: 
AT2 = AD 
RT2 = RD*AD 
GT2 = GD*AD 
BT2 = BD*AD 
4. Blend. 
See §18.4.1 for special case handling. 
AT3 = (1-AT1)*AT2+AT1 
RT3 = (1-AT1)*RT2+RT1 
GT3 = (1-AT1)*GT2+GT1 
BT3 = (1-AT1)*BT2+BT1 
5. Reverse pre-multiplication.  
The resulting color channel values are divided by the resulting alpha value. If the 
resulting alpha value is 0, all color channels are set to 0 by definition, as expressed in the 
If condition below. Each of RT3, GT3, BT3 is smaller than or equal to AT3 and, therefore, each 
of the resulting RR, GR, BR is in the valid interval of [0.0,1.0] after the pre-multiplication is 
reversed. 
If a consumer supports superluminous colors 
{ 
   AR = AT3,   RR = RT3,   GR = GT3,   BR = BT3 
} 
Else If AT3 = 0 
{ 
   set all AR RR GR BR to 0. 
} 
Else 
{ 
   AR = AT3 
   RR = RT3/AT3 
   GR = GT3/AT3 
   BR = BT3/AT3 
} 
When blending colors in a color space other than sRGB, color channels are independently 
interpolated in a manner analogous to the RGB channel blending method described above. 
Colors in subtractive color spaces (such as CMYK) are complemented before and after the 
blending steps described above. 

18. Rendering Rules 
ECMA-388 
256 
First Edition, June 2009 
18.4.1 Pre-Multiplied Alpha and Superluminous Colors 
The alpha information in TIFF images using an ExtraSamples tag value of 1 and in JPEG XR 
images using pixel formats 32bppPBGRA, 64bppPRGBA or 128bppPRGBAFloat MUST be 
interpreted as pre-multiplied alpha information [M11.6]. In certain scenarios (such as when 
rendering 3D scenes to a bitmap), producers MAY choose to create pre-multiplied bitmap data 
specifying “superluminous” colors [O11.9]. 
Superluminous colors are defined as a subset case of the pre-multiplied RGB source color 
values case in which the source alpha value is smaller than the individual color channel values 
but greater than or equal to 0. 
The effect of composing superluminous colors on a background is similar to adding additional 
light of the source color to the destination color, as opposed to regular alpha composition which 
works more like a colored filter. One can easily verify this statement by substituting 0 for AT1 in 
step 4 of the above opacity computations, which is simplified as follows: 
AT3 = AT2 
RT3 = RT2+RT1 
GT3 = GT2+GT1 
BT3 = BT2+BT1 
Consumers supporting superluminous colors retain all temporary information in pre-multiplied 
formats. Note, that throughout the OpenXPS Standard non-pre-multiplied alpha processing is 
assumed. It is up to the implementer of such a consumer to identify equivalent composition and 
rendering rules for processing in pre-multiplied space. 
Also note, when composing superluminous colors, management of out-of-gamut colors SHOULD 
be deferred until the result is rendered to the final target, at which point out-of-gamut colors 
are clipped or color managed [S11.19]. 
Consumers MAY handle superluminous colors or MAY instead choose to convert pre-multiplied 
source data containing superluminous colors to non-pre-multiplied data before composition by 
ignoring the superluminous portion of each color channel value [O11.10], as described in the 
following steps: 
For each superluminous pixel with AS < RS or AS < GS or AS < BS 
{ 
   If AS = 0 
   { 
      AR = 0 
      RR = 1 
      GR = 1 
      BR = 1 
   } 
   Else 
   { 
      AR = AS 
      RR = min(RS/AS,1) 
      GR = min(GS/AS,1) 
      BR = min(BS/AS,1) 
 
} 
} 

ECMA-388 
18. Rendering Rules 
 
 First Edition, June 2009 
257 
18.5 Composition Rules 
OpenXPS Document page markup uses the painter’s model with alpha channel. Composition 
MUST have the same effect as the application of the following rules, in sequence [M11.7]: 
1. In order to render a fixed page or canvas, a surface is created to hold the drawing 
content as it is composed. The color and appearance of this surface SHOULD match the 
destination color and appearance, typically a solid white background for a fixed page or 
transparent for a canvas [S11.20]. An implementation MAY choose to meet this goal by 
always initializing this surface’s alpha channel to 0.0 (transparent) and the color value to 
black [O11.5]. 
2. The fixed page or canvas represents a surface onto which child elements are drawn. The 
child elements are drawn in the order they appear in markup. In practice, an 
implementation might represent the surface by a bitmap buffer large enough to hold all 
the drawing content produced when the child elements are rendered.  
3. The contents appearing on the surface of canvas are transformed using the affine 
transform specified by the RenderTransform property of the canvas. (A fixed page does 
not have a RenderTransform property.)  
4. All child elements are rendered to the surface and clipped to the imageable area of the 
physical display (such as a sheet of paper) of the fixed page or according to the Clip 
property of a canvas. The geometry value of the canvas’ Clip property is also 
transformed using the affine transform specified by the RenderTransform property of the 
canvas. 
5. If a path has a Stroke and a Fill property, and also specifies Opacity or OpacityMask 
property values, additional composition steps must be followed:  
a. Create a temporary canvas with the opacity, opacity mask, clip, and render transform 
specified by the path. 
b. Create a copy of the original path, remove all but the Fill property from the copy, and 
add the copy to the temporary canvas. 
c. Create another copy of the original path, remove all but the stroke-related properties 
(such as Stroke, StrokeThickness, and StrokeDashArray) from the copy, and add the 
copy to the temporary canvas. 
d. Do not draw the original path. 
e. Draw the temporary canvas, while recursively applying the composition rules. 
6. If a grouping element (a <Canvas> element) has an Opacity or OpacityMask property, 
additional composition steps must be followed:  
a. Create a temporary surface and set its alpha channel to 0.0 (transparent) and its color 
value to black.  
b. Compose all child elements of the grouping element onto the temporary surface, while 
recursively applying the composition rules.  
c. Cumulatively apply the opacity of the grouping element and opacity mask to the alpha 
channel of the temporary surface.  
d. Draw the contents of the temporary surface onto the containing surface. 

18. Rendering Rules 
ECMA-388 
258 
First Edition, June 2009 
7. If a non-grouping element (a <Path> or <Glyphs> element) has an Opacity property, an 
OpacityMask property, or a fill or stroke using transparency, the following additional 
composition steps must be taken:  
a. If the element has a RenderTransform property, apply it to the element and its Clip, 
Fill, Stroke, and OpacityMask properties, if present. 
b. Create a mask from the set of all painted pixels representing the child element (after 
the Clip property of the element has been applied). 
8. Combine the Fill or Stroke property with the OpacityMask and the Opacity property and 
apply to the surface through the computed mask. For more information, see §14.1. 
The behavior that results from this process is:  
• Opacity is not applied cumulatively to self-overlapping areas created when rendering an 
individual <Glyphs> element. 
• Opacity is not applied cumulatively to self-overlapping areas created by <PathFigure> 
elements within the same path (see Example 18–1). 
• Opacity is not applied cumulatively if the border of a path has self-intersections. When 
the border of a path is stroked, the area of the path is filled by first applying the brush 
specified by the Fill property. After filling the area, the border is drawn using the stroke-
related properties including the brush specified by the Stroke property, with half the 
stroke width extending outside the filled area and half extending inside (see Example 
18–2). If the path has self-intersections, the opacity is not accumulated. 
• The color of the stroke and the color of the filled area are combined on the inside half of 
a stroked border (overlapping the filled area of the path) if the brush specified by the 
Stroke property is transparent. 
• If a path that has a stroked border has an opacity of less than 1.0 or an opacity mask, 
the path (filled area and stroked border) is first rendered onto a temporary surface using 
an opacity of 1.0 and no opacity mask (while preserving any transparency of the fill or 
the stroked border themselves), and the resulting figure is drawn onto the background 
using the specified opacity and opacity mask (see Example 18–3). 
18.5.1 Optimization Guidelines 
The composition rules above describe the behavior of an ideal implementation. Practical 
implementations can optimize the processing of the composition rules according to the following 
guidelines: 
1. If all elements on a canvas and the canvas itself are opaque (an opacity of 1.0) and 
parent or ancestor <Canvas> elements are also opaque, the elements MAY be drawn 
directly to the containing fixed page (or canvas), provided all render transform and clip 
values are observed [O11.12]. 
2. If an element is fully transparent (an opacity of 0.0), it MAY be skipped [O11.13]. 
3. If a canvas has an opacity of 0.0, it and all of its child and descendant elements MAY be 
skipped [O11.14]. 
4. If a canvas has a Clip property with no contained area, the canvas and all of its child and 
descendant elements MAY be skipped [O11.15]. 
5. When creating a temporary surface, a consumer MAY further restrict the size of the 
temporary surface by the effective extent of the geometry specified by the Clip property 
of the canvas [O11.16]. 

ECMA-388 
18. Rendering Rules 
 
 First Edition, June 2009 
259 
6. A consumer MAY use methods to achieve transparency other than creating a temporary 
surface [O11.17]. Such methods MAY include planar mapping (that is, computation of 
intersections of transparent elements and resulting colors) [O11.17]. 
18.5.2 Composition Examples 
The following examples illustrate the composition rules described above. 
Example 18–1. Path opacity behavior for overlapping path figures 
In the following markup, opacity is not applied cumulatively to self-overlapping areas created 
by path figures within the same path. 
<Path Opacity="0.5"> 
   <Path.Fill> 
      <SolidColorBrush Color="#0000FF" /> 
   </Path.Fill> 
   <Path.Data> 
      <PathGeometry FillRule="NonZero"> 
         <PathFigure StartPoint="10,10" IsClosed="true"> 
            <PolyLineSegment Points="110,10 110,110 10,110 10,10" /> 
         </PathFigure> 
         <PathFigure StartPoint="50,50" IsClosed="true"> 
            <PolyLineSegment Points="150,50 150,150 50,150 50,50" /> 
         </PathFigure> 
      </PathGeometry> 
   </Path.Data> 
</Path> 
This markup is rendered as follows: 
  
end example] 
Example 18–2. Opacity behavior of path stroke intersections  
In the following markup, opacity is not applied cumulatively if the border of a path has self-
intersections. 
<Path Stroke="#80FF0000" StrokeThickness="10"> 
   <Path.Fill> 
      <SolidColorBrush Color="#0000FF" /> 
   </Path.Fill> 
   <Path.Data> 
      <PathGeometry FillRule="NonZero"> 
         <PathFigure StartPoint="20,20" IsClosed="true"> 

18. Rendering Rules 
ECMA-388 
260 
First Edition, June 2009 
            <PolyLineSegment Points="120,20 120,120 20,120 20,20" /> 
         </PathFigure> 
         <PathFigure StartPoint="50,50" IsClosed="true"> 
            <PolyLineSegment Points="150,50 150,150 50,150 50,50" /> 
         </PathFigure> 
      </PathGeometry> 
   </Path.Data> 
</Path> 
<Path Stroke="#80FF0000" StrokeThickness="10" StrokeMiterLimit="10"> 
   <Path.Fill> 
      <SolidColorBrush Color="#0000FF" /> 
   </Path.Fill> 
   <Path.Data> 
      <PathGeometry> 
         <PathFigure StartPoint="220,20" IsClosed="true"> 
            <PolyLineSegment Points="420,220 420,20 220,120" /> 
         </PathFigure> 
      </PathGeometry> 
   </Path.Data> 
</Path> 
This markup is rendered as follows: 
  
end example] 
Example 18–3. Opacity behavior of paths with stroked edges 
The following markup describes a path with a stroked border and an opacity of less than 1.0: 
<Path> 
   <Path.Fill> 
      <SolidColorBrush Color="#7F7F7F" /> 
   </Path.Fill> 
   <Path.Data> 
      <PathGeometry> 
         <PathFigure StartPoint="0,110" IsClosed="true"> 
            <PolyLineSegment Points="450,110 450,210 0,210" /> 
         </PathFigure> 
      </PathGeometry> 

ECMA-388 
18. Rendering Rules 
 
 First Edition, June 2009 
261 
   </Path.Data> 
</Path> 
<Path  
   Stroke="#FF0000"  
   StrokeThickness="10"  
   StrokeDashArray="2.2 3.5"  
   StrokeDashCap="Round"  
   Opacity="0.5"> 
   <Path.Fill> 
      <SolidColorBrush Color="#0000FF" /> 
   </Path.Fill> 
   <Path.Data> 
      <PathGeometry FillRule="NonZero"> 
         <PathFigure StartPoint="10,10" IsClosed="true"> 
            <PolyLineSegment Points="110,10 110,110 10,110 10,10" /> 
         </PathFigure> 
         <PathFigure StartPoint="60,60" IsClosed="true"> 
            <PolyLineSegment Points="160,60 160,160 60,160 60,60" /> 
         </PathFigure> 
      </PathGeometry> 
   </Path.Data> 
</Path> 
<Path Stroke="#FF0000" StrokeThickness="10" Opacity="0.5"> 
   <Path.Fill> 
      <SolidColorBrush Color="#0000FF" /> 
   </Path.Fill> 
   <Path.Data> 
      <PathGeometry> 
         <PathFigure StartPoint="200,60" IsClosed="true"> 
            <PolyLineSegment Points="400,160 400,60 200,160" /> 
         </PathFigure> 
      </PathGeometry> 
   </Path.Data> 
</Path> 
This markup is rendered as follows: 
  
end example] 

18. Rendering Rules 
ECMA-388 
262 
First Edition, June 2009 
18.6 Stroke Rendering 
Strokes follow the contours of each segment in a path figure, as specified by the various stroke-
related properties. 
Contours and dashes SHOULD be rendered so that they have the same appearance as if 
rendered by sweeping the complete length of the contour or dash with a line segment that is 
perpendicular to the contour and extends with half its length to each side of the contour. All 
points covered by the sweep of this perpendicular line are part of the dash or contour [S11.21]. 
By using this sweeping definition, extreme curvatures can result in line and dash ends that are 
not flat when specified as flat. If any caps other than flat are specified, the caps are added to 
the start and end of the stroked contour or dash in the orientation of the first and last position 
of the line segment used for sweeping. Any render transform is applied after this step.  
[Note: Using this definition, any geometry that is less than the value of the stroke thickness 
across will produce a filled area between these lines if no dashes are employed, or overlapping 
dashes when they are. end note] 
Figure 18–1. Extreme curvatures and dash rendering 
 
18.6.1 Stroke Edge Parallelization 
Consumers SHOULD ensure that parallel edges of strokes appear parallel [S11.22]. Consumers 
can choose a suitable method to achieve this goal. [Example: Such methods might include anti-
aliasing, sub-pixel masking, or appropriate rounding of device coordinates. end example] 
18.6.2 Phase Control 
Consumers SHOULD produce a visually consistent appearance of stroke thickness for thin lines, 
regardless of their orientation or how they fit on the device pixel grid [S11.23]. 
18.6.3 Symmetry of Stroke Drawing Algorithms 
Consumers SHOULD select line and curve drawing algorithms that behave symmetrically and 
result in the same set of device pixels being drawn regardless of the direction of the line or 
curve (start point and end point exchanged) [S11.24]. In other words, a line from 0,0 to 
102,50 should result in the same pixel set as a line from 102,50 to 0,0. 

ECMA-388 
18. Rendering Rules 
 
 First Edition, June 2009 
263 
18.6.4 Rules for Dash Cap Rendering 
The appearance of dash caps is controlled by the StrokeDashCap attribute. Valid values are Flat, 
Square, Round, and Triangle. The StrokeDashCap attribute is ignored for paths that have no 
StrokedDashArray attribute or that have a StrokedDashArray attribute with value 0 0. 
18.6.4.1 Flat Dash Caps 
The effective render transform of the path being stroked is used to transform the control points 
of the contour of the dash.  
The length of the dash is the approximate distance on the curve between the two intersections 
of the flat lines ending the dash and the contour of the shape. The distance from the end of one 
dash to the start of the next dash is the specified dash gap length. Dashes with a length greater 
than 0 are drawn, and degenerate dashes with a length of 0 are not drawn.  
Figure 18–2. Flat dash caps 
 
18.6.4.2 Square Dash Caps 
The effective render transform of the path being stroked is used to transform the control points 
of the contour of the dash. 
The length of the dash is the approximate distance on the curve between the two contour 
intersection points, that is, the intersection of the flat line ending the dash (without the square 
caps attached) and the contour of the shape.  
The caps are drawn as half-squares attached to the ends of the dash. The boundaries of the 
square caps are not curved to follow the contour, but are transformed using the effective 
render transform. 
The distance between the contour intersection points of consecutive dashes is the specified 
dash gap length. Degenerate dashes with a length of 0 are drawn as squares. If a dash with a 
length of 0 appears at, or very near to, a join in a path then differences in rendering resolution 
and in precision in the calculation of coordinates may lead to differing orientation of the dash 
caps between consumers. 

18. Rendering Rules 
ECMA-388 
264 
First Edition, June 2009 
Figure 18–3. Square dash caps 
 
18.6.4.3 Round Dash Caps 
The effective render transform of the path being stroked is used to transform the control points 
of the contour of the dash. 
The length of the dash is the approximate distance on the curve between the two contour 
intersection points, that is, the intersection of the flat line ending the dash (without the round 
caps attached) and the contour of the shape.  
The caps are drawn as half-circles attached to the ends of the dash. The boundaries of the 
round caps are not distorted to follow the contour, but are transformed using the effective 
render transform. 
The distance between the contour intersection points of consecutive dashes is the specified 
dash gap length. Degenerate dashes with a length of 0 are drawn as circles. 
Figure 18–4. Round dash caps 
 
18.6.4.4 Triangular Dash Caps 
The effective render transform of the path being stroked is used to transform the control points 
of the contour of the dash. 
The length of the dash is the approximate distance on the curve between the two contour 
intersection points, that is, the intersection of the flat line ending the dash (without the 
triangular caps attached) and the contour of the shape.  
The caps are drawn as triangles attached with their base to the ends of the dash. The 
boundaries of the triangular caps are not distorted to follow the contour, but are transformed 
using the effective render transform. The height of the triangles is half of the stroke width. 

ECMA-388 
18. Rendering Rules 
 
 First Edition, June 2009 
265 
The distance between the contour intersection points of consecutive dashes is the specified 
dash gap length. Degenerate dashes with a length of 0 are drawn as diamonds. If a dash with a 
length of 0 appears at, or very near to, a join in a path then differences in rendering resolution 
and in precision in the calculation of coordinates may lead to differing orientation of the dash 
caps between consumers. 
Figure 18–5. Triangular dash caps 
 
18.6.4.5 Overlapping Dashes 
It is possible to specify dash sequences with overlapping dash caps. In this circumstance, the 
union of the dash segments (inclusive of dash caps), is used as a mask through which the 
brush is applied as illustrated in Figure 18–6 with a stroke dash cap value of Round. 
Figure 18–6. Overlapping dash segments 
 
 
18.6.4.6 Extreme Degenerate Dash Case 
The previous subclauses include a description of the behavior for degenerate dashes of zero 
length, with non-zero gaps, for each dash cap shape.   
Producers SHOULD NOT create files containing the extreme degenerate case of 
StrokeDashArray = "0 0". Such lines SHOULD be rendered as a solid line [S11.32]. 
18.6.5 Rules for Line Cap Rendering 
The appearance of line caps is controlled by the StrokeStartLineCap and StrokeEndLineCap 
attribute. Valid values are Flat, Square, Triangle, and Round. Every start line cap can be used in 

18. Rendering Rules 
ECMA-388 
266 
First Edition, June 2009 
combination with any end line cap. Line caps only ever appear at the start and end of an open 
path, and then only if the initial/final segment is stroked. 
The rules for line caps on curved lines are analogous to the rules for dash cap rendering. For 
more information, see §18.6 and §18.6.4.  
Figure 18–7. Flat start line cap, flat end line cap 
 
 
Figure 18–8. Square start line cap, square end line cap 
 
Figure 18–9. Triangular start line cap, triangular end line cap 
 
Figure 18–10. Round start line cap, round end line cap 
 
18.6.6 Line Caps for Dashed Strokes 
If the start point of a stroke is within a dash or touches the start or end of a dash, a start line 
cap is appended to the stroke. Similarly, if the end point of a stroke is within a dash or touches 
the start or end of a dash, an end line cap is appended to the stroke. 
Figure 18–11. Stroke start or end point within a dash for flat dash caps 
 
Figure 18–12. Stroke start or end point within a dash for non-flat dash caps 
 
[Note: Because the right-most line cap begins at the point exactly coincident with the start of 
the next dash in the sequence, it is rendered. end note] 

ECMA-388 
18. Rendering Rules 
 
 First Edition, June 2009 
267 
However, if the start point of a stroke is within a gap (as can result from a StrokeDashOffset 
attribute), no start line cap is appended to the stroke. If the end point of a stroke is within a 
gap, no end line cap is appended to the stroke. 
Figure 18–13. Stroke start or end point within a gap for flat dash caps 
 
Figure 18–14. Stroke start or end point within a gap for not-flat dash caps 
 
[Note: Differences in precision in the calculation of coordinates can lead to differing output 
between consumers depending on whether they determine that the start or end point of a 
stroke exactly touches the start or end point of a dash. end note] 
18.6.7 Rules for Line Join Rendering 
The appearance of line joins is controlled by the StrokeLineJoin attribute. Valid values are Round, 
Bevel, and Miter.  
18.6.7.1 Round Line Joins 
A StrokeLineJoin attribute value of Round indicates that the outer corner of the joined lines 
should be filled by enclosing the rounded region with its center point at the point of intersection 
between the two lines and a radius of one-half the stroke thickness value.  
Figure 18–15. Round line join with right angle  
 

18. Rendering Rules 
ECMA-388 
268 
First Edition, June 2009 
Figure 18–16. Round line join with acute angle  
 
Figure 18–17. Round line join with obtuse angle  
 
18.6.7.2 Beveled Line Joins 
A StrokeLineJoin attribute value of Bevel indicates that the outer corner of the joined lines should 
be filled by enclosing the triangular region of the corner with a straight line between the outer 
corners of each stroke.  
Figure 18–18. Beveled line join with right angle  
 

ECMA-388 
18. Rendering Rules 
 
 First Edition, June 2009 
269 
Figure 18–19. Beveled line join with acute angle  
 
Figure 18–20. Beveled line join with obtuse angle  
 
18.6.7.3 Mitered Line Joins 
If the StrokeLineJoin attribute value is Miter, the value of the StrokeMiterLimit attribute value is 
used for rendering these joins. A StrokeLineJoin value of Miter indicates that the region to be 
filled includes the intersection of the strokes projected to infinity, and then clipped at a specific 
distance. The intersection of the strokes is clipped at a line perpendicular to the bisector of the 
angle between the strokes, at the distance equal to the stroke miter limit value multiplied by 
half the stroke thickness value.  
When drawing mitered line joins, the presence of one or more degenerate line segments 
between the non-degenerate line segments to be joined results in a mitered line join of only the 
two non-degenerate line segments with an implied StrokeMiterLimit attribute value of 1.0. 

18. Rendering Rules 
ECMA-388 
270 
First Edition, June 2009 
Figure 18–21. Mitered line join with right angle and miter limit of 1.0 
 
Figure 18–22. Mitered line join with acute angle and miter limit of 1.0 
 
Figure 18–23. Mitered line join with obtuse angle and miter limit of 1.0 
 

ECMA-388 
18. Rendering Rules 
 
 First Edition, June 2009 
271 
Figure 18–24. Mitered line join with right angle and miter limit of 2.0 
 
Figure 18–25. Mitered line join with acute angle and miter limit of 2.0 
 
Figure 18–26. Mitered line join with acute angle and miter limit of 10.0 
 
18.6.8 Rules for Degenerate Line and Curve Segments 
Degenerate line segments (that is, where the start point and end point coincide) are not drawn. 

18. Rendering Rules 
ECMA-388 
272 
First Edition, June 2009 
Degenerate curve segments (where the start point, end point, and all control points coincide) 
are not drawn. 
If an open degenerate path (formed from degenerate line or curve segments) with non-flat 
start cap and/or non-flat end line cap is stroked, only the start line cap and/or end line cap is 
drawn, in the x direction relative to the current effective render transform (that is, as if a 
segment were drawn from x,y to x+d,y, with d  0). 
If a closed degenerate path (formed from degenerate line or curve segments) is stroked, a 
circular dot with a diameter of the stroke thickness is drawn instead. 
If the current render transform is an invertible matrix, consumers SHOULD perform 
computations on poly line segments and poly Bézier segments with sufficient accuracy to avoid 
producing zero-length segments [S11.25]. 
18.6.9 Stroking and Fill Rule 
Stroking a path is independent of the fill rule. The fill rule affects the filled area only.  
18.6.10 
Mixing Stroked and Non-Stroked Segments 
When a path figure contains multiple segments and one or more of the segments has an 
IsStroked value of false, the phase for dashes starts anew with the next stroked segment, 
including application of the dash offset. 
When a segment of a dashed path is stroked and the subsequent segment has an IsStroked 
value of false, thus causing a dash to be truncated, the dash cap is drawn for both ends of the 
truncated dash, exactly as it would for a non-truncated dash. For the case of a closed dashed 
path, this rule also applies to dashes exposed at the beginning or end of the path by an 
unstroked final or initial segment respectively. 
18.6.11 
Stroke Behavior with Multiple Path Figures 
When a geometry containing multiple path figures is stroked, the phase for dashes (including 
application of the dash offsets) starts anew with each new path figure. 
In general, for any path geometry, each path figure is drawn independently of every other path 
figure, so the dash array is reset for each. Dashes are also reset after every unstroked 
segment. 
18.6.12 
Consistent Nominal Stroke Width 
For certain scenarios, it is desirable for producers to generate documents targeted at specific 
aliasing consumers with particular lines in the document indicated as hairlines or consistent-
width strokes. The following recommendation allows these producers and consumers to handle 
these strokes consistently. 
Producers MAY generate a <Path> element intended to be treated as having a consistent 
nominal stroke width by specifying the StrokeDashArray attribute and by specifying a 
StrokeDashOffset attribute value less than -1.0 times the sum of all the numbers in the 
StrokeDashArray attribute value [O11.25].  
For a solid line, the producer would set the StrokeDashArray to the value “1 0” and the 
StrokeDashOffset to a value such as “-2”. The “-2” value fulfills the restriction on the 
StrokeDashOffset value in a numerically stable manner, and the phase of the dash pattern is 

ECMA-388 
18. Rendering Rules 
 
 First Edition, June 2009 
273 
identical to a StrokeDashOffset value of “0”. Values less than “-2” can be used to specify a shifted 
phase of the dash pattern. 
A stroke using the consistent nominal stroke width convention SHOULD be rendered with a 
width consistent with other strokes using the convention that have, after application of relevant 
transforms, the same StrokeThickness attribute value, and consumers aware of this convention 
SHOULD render such a stroke no thinner than the thinnest visible line that a bi-tonal consumer 
supports without dropouts or an anti-aliasing consumer can represent as a solid line. In the 
particular case of StrokeThickness attribute value of "0" the stroke SHOULD be rendered with a 
1-pixel thickness if the nominal stroke width convention applies [S11.31]. See §18.1.4, for 
further considerations for rendering thin lines. 
[Note : Producers using this convention must be aware that the rendering of thin and zero-
width lines may have inconsistent results depending on the support or not of this convention at 
the consumer side. A line rendered as a solid line on a consumer supporting this convention 
may be rendered with different density or even not rendered at all on a consumer not 
supporting it. end note] 
18.7 Brushes and Images 
Images require the following special considerations for scaling and tile placement.  
18.7.1 Small Tiles 
Tiles for visual brushes and image brushes can be specified with a viewport width or height of a 
few device pixels, or even less than a single device pixel in size.  
If both width and height are nearly zero, implementations SHOULD average the color values of 
the brush contents, resulting in a constant-color brush [S11.26]. [Example:  
• A visual brush or image brush that contains a blue and white checkerboard pattern 
results in a solid light-blue fill as either the width or the height value approaches 0.0. 
• A visual brush or image brush whose viewbox is constant-colored produces a constant-
colored brush regardless of the width and height values of the viewport.  
end example] 
If only one of the width and height values is nearly zero, the brush should be constant-colored 
along lines parallel to the narrow side of the viewport. For cases such as these, 
implementations MAY differ [O11.21]. Producers SHOULD avoid producing such extreme cases 
and SHOULD NOT rely on any specific behavior when they do [S11.27]. 
18.7.2 Image Scaling 
Source sampling SHOULD be done from the center of the pixel and should be mapped to the 
center of the pixel in the device-space [S11.28]. With one extent of the viewbox zero, sampling 
SHOULD be done along a line parallel to the non-zero side [S11.28]. With both extents of the 
viewbox zero, a point sample SHOULD be taken [S11.28]. 
When up-sampling an image presented at a lower resolution than the device resolution, bilinear 
filtering SHOULD be used [S11.29]. The precise source coordinates as specified by the viewbox 
MUST be used to place the up-sampled image tile, which is equivalent to using fractional pixels 
of the original source image [M11.8]. 

18. Rendering Rules 
ECMA-388 
274 
First Edition, June 2009 
When down-sampling, at least a bilinear filter SHOULD be used [S11.30]. Consumers MAY 
choose to implement a more sophisticated algorithm, such as a Fant scaler, to prevent aliasing 
artifacts [O11.22]. 
18.7.3 Tile Placement 
Consumers MUST precisely position the tiles specified by the image brush and visual brush. If 
the specified values result in fractional device pixels, the consumer MUST calculate a running 
placement-error delta and adjust the placement of the next tile where the delta reaches a full 
device pixel in order to keep the tiles from being increasingly out of phase as the expanse of 
the path is filled [M11.9]. Consumers MAY choose any technique desired to achieve this 
requirement, such as linear filtering for seams, stretching of the tile (up-sampling or down-
sampling), or pre-computing multiple tiles and adjusting behavior according to how the tiles fit 
on a grid [O11.23]. 
18.7.4 Tiling Transparent Visual Brushes and Image Brushes 
The contents of a visual brush’s Visual property are first rendered to a temporary work canvas 
(according to the composition rules in §18.5.). The viewbox of the visual brush defines the tile 
or portion of the temporary canvas that is copied onto the specified geometry, stroke, or text. 
Likewise, an image specified by an image brush is also copied to a temporary work canvas. The 
viewbox also defines the tile for an image brush. In either case, the work canvas is scaled to 
properly match the edges of the tile to the size specified by the viewport. 
Each pixel of the resultant tile is separately blended with the background of its destination, 
using the alpha of each pixel. This process is repeated for each tile replication, while respecting 
the TileMode attribute value, although the temporary work canvas MAY be re-used [O11.24].  
 
 

ECMA-388 
19. Elements 
 
 First Edition, June 2009 
275 
19. Elements 
19.1 ArcSegment 
element ArcSegment 
diagram 
attributes Name   
Type   
Use   
Default   Fixed   Annotation 
Point   
ST_Point  
required      
   
Specifies the endpoint of the elliptical arc. 
Size   
ST_PointGE0  
required      
   
Specifies the x and y radius of the elliptical 
arc as an x,y pair. 
RotationAngle   ST_Double  
required      
   
Indicates how the ellipse is rotated relative 
to the current coordinate system. 
IsLargeArc   
ST_Boolean  
required      
   
Determines whether the arc is drawn with a 
sweep of 180 or greater. Can be true or 
false. 
SweepDirection   ST_SweepDirection  required      
   
Specifies the direction in which the arc is 
drawn. Valid values are Clockwise and 
Counterclockwise. 
IsStroked   
ST_Boolean  
   
true   
   
Specifies whether the stroke for this segment 
of the path is drawn. Can be true or false. 
annotation Represents an elliptical arc between two points. 
For more information, see §11.2.2.2. 

19. Elements 
ECMA-388 
276 
First Edition, June 2009 
19.2 Canvas 
element Canvas 
diagram 
attributes Name   
Type   
Use   Default   Fixed   
Annotation 
RenderTransform   
ST_RscRefMatrix  
   
   
   
Establishes a new coordinate 
frame for the child and 
descendant elements of the 
canvas, such as another 
canvas. Also affects clip and 
opacity mask. 
Clip   
ST_RscRefAbbrGeomF     
   
   
Limits the rendered region of 
the element. 
Opacity   
ST_ZeroOne  
   
1.0   
   
Defines the uniform 
transparency of the canvas. 
Values range from 0 (fully 

ECMA-388 
19. Elements 
 
 First Edition, June 2009 
277 
transparent) to 1 (fully 
opaque), inclusive. Values 
outside of this range are 
invalid. 
OpacityMask   
ST_RscRef  
   
   
   
Specifies a mask of alpha 
values that is applied to the 
canvas in the same fashion 
as the Opacity attribute, but 
allowing different alpha 
values for different areas of 
the element. 
Name   
ST_Name  
   
   
   
Contains a string value that 
identifies the current element 
as a named, addressable 
point in the document for the 
purpose of hyperlinking. 
RenderOptions.EdgeMode   
ST_EdgeMode  
   
   
  Aliased Controls how edges of paths 
within the canvas are 
rendered. The only valid 
value is Aliased. Omitting this 
attribute causes the edges to 
be rendered in the 
consumer's default manner. 
FixedPage.NavigateUri   
xs:anyURI 
   
   
   
Associates a hyperlink URI 
with the element. May be a 
relative reference or a URI 
that addresses a resource 
that is internal to or external 
to the package. 
xml:lang   
 
   
   
   
Specifies the default 
language used for the current 
element and for any child or 
descendant elements. The 
language is specified 
according to RFC 3066. 
x:Key   
 
   
   
   
Specifies a name for a 
resource in a resource 
dictionary. x:Key MUST be 
present when the current 
element is defined in a 
resource dictionary. x:Key 
MUST NOT be specified 
outside of a resource 
dictionary [M3.20]. 

19. Elements 
ECMA-388 
278 
First Edition, June 2009 
AutomationProperties.Name   
xs:string 
   
   
   
A brief description of the 
<Canvas> contents for 
accessibility purposes, 
particularly if filled with a set 
of vector graphics and text 
elements intended to 
comprise a single vector 
graphic. 
AutomationProperties.HelpText   xs:string 
   
   
   
A detailed description of the 
<Canvas> contents for 
accessibility purposes, 
particularly if filled with a set 
of graphics and text elements 
intended to comprise a single 
vector graphic. 
annotation Groups <FixedPage> descendant elements together. 
For more information, see §10.4. 
19.3 Canvas.Clip 
element Canvas.Clip 
diagram 
 
annotation Limits the rendered region of the element. 
For more information, see §14.3.1. 
19.4 Canvas.OpacityMask 
element Canvas.OpacityMask 
diagram 
 

ECMA-388 
19. Elements 
 
 First Edition, June 2009 
279 
annotation Specifies a mask of alpha values that is applied to the canvas in the same fashion as the Opacity attribute, but 
allowing different alpha values for different areas of the element. 
For more information, see §14.5.1.  
19.5 Canvas.RenderTransform 
element Canvas.RenderTransform 
diagram 
 
annotation Establishes a new coordinate frame for the child and descendant elements of the canvas, such as another 
canvas. Also affects clip and opacity mask. 
For more information, see §14.4.2. 
19.6 Canvas.Resources 
element Canvas.Resources 
diagram 
 
annotation Contains the resource dictionary for the <Canvas> element. 
For more information, see §14.2.2. 
19.7 Discard 
element Discard 
diagram 
 
attributes Name   
Type   
Use   
Default   Fixed   Annotation 
SentinelPage   xs:anyURI required      
   
The first fixed page that no longer needs the identified 

19. Elements 
ECMA-388 
280 
First Edition, June 2009 
resource in order to be processed. 
Target   
xs:anyURI required      
   
The resource that can be safely discarded. 
annotation Identifies a resource that can be safely discarded by a resource-constrained consumer. 
For more information, see §17.1.4.1.2. 
19.8 DiscardControl 
element DiscardControl 
diagram 
 
annotation Contains a list of resources that are safe for a consumer to discard. 
For more information, see §17.1.4.1.1. 
19.9 DocumentOutline 
element DocumentOutline 
diagram 
 
attributes Name   
Type   Use   
Default   Fixed   Annotation 
xml:lang    
required      
   
Specifies the default language used for the current element and 
for any child or descendant elements. The language is specified 
according to RFC 3066. 
annotation Specifies a list of meaningful indices into the OpenXPS Document, similar to a table of contents, or to external 
URIs, such as web addresses. 
For more information, see §16.1.1.3. 

ECMA-388 
19. Elements 
 
 First Edition, June 2009 
281 
19.10 
DocumentReference 
element DocumentReference 
diagram 
 
attributes Name   Type   
Use   
Default   Fixed   Annotation 
Source   xs:anyURI required      
   
Specifies the URI of the fixed document content. The specified 
URI MUST refer to a FixedDocument part within the OpenXPS 
Document [M3.2]. 
annotation Contains a reference to a FixedDocument part. 
For more information, see §10.1.1. 
19.11 
DocumentStructure 
element DocumentStructure 
diagram 
 
annotation The root element of the DocumentStructure part. 
For more information, see §16.1.1.1.  
19.12 
DocumentStructure.Outline 
element DocumentStructure.Outline 
diagram 

19. Elements 
ECMA-388 
282 
First Edition, June 2009 
annotation Contains a structured document outline that provides a list of links into the document contents or external sites. 
 
For more information see §16.1.1.2. 
19.13 
FigureStructure 
element FigureStructure 
diagram 
annotation Groups the named elements that constitute a single drawing or diagram. 
For more information, see §16.1.2.12.  
19.14 
FixedDocument 
element FixedDocument 
diagram 
 
annotation Binds an ordered sequence of fixed pages together into a single multi-page document. 
For more information, see §10.2. 
19.15 
FixedDocumentSequence 
element FixedDocumentSequence 
diagram 
 
annotation Specifies a sequence of fixed documents. 
For more information, see §10.1.  

ECMA-388 
19. Elements 
 
 First Edition, June 2009 
283 
19.16 
FixedPage 
element FixedPage 
diagram 
attributes Name   
Type   
Use   
Default   Fixed   Annotation 
Width   
ST_GEOne  
required      
   
Width of the page, expressed as a real number in 
units of the effective coordinate space. 
Height   
ST_GEOne  
required      
   
Height of the page, expressed as a real number in 
units of the effective coordinate space. 
ContentBox   ST_ContentBox     
   
   
Specifies the area of the page containing imageable 
content that is to be fit within the imageable area 
when printing or viewing. Contains a list of four 
coordinate values (ContentOriginX, ContentOriginY, 
ContentWidth, ContentHeight), expressed as 
comma-separated real numbers. Specifying a value 
is RECOMMENDED [S3.1]. If omitted, the default 
value is (0,0,Width,Height). 
BleedBox   
ST_BleedBox  
   
   
   
Specifies the area including crop marks that extends 
outside of the physical page. Contains a list of four 
coordinate values (BleedOriginX, BleedOriginY, 
BleedWidth, BleedHeight), expressed as comma-
separated real numbers. If omitted, the default value 
is (0,0,Width,Height). 

19. Elements 
ECMA-388 
284 
First Edition, June 2009 
xml:lang   
 
required      
   
Specifies the default language used for the current 
element and for any child or descendant elements. 
The language is specified according to RFC 3066. 
Name   
ST_Name  
   
   
   
Contains a string value that identifies the current 
element as a named, addressable point in the 
document for the purpose of hyperlinking. 
annotation Contains markup that describes the rendering of a single page of content. 
For more information, see §10.3. 
19.17 
FixedPage.Resources 
element FixedPage.Resources 
diagram 
 
annotation Contains the resource dictionary for the <FixedPage> element. 
For more information, see §14.2.1. 

ECMA-388 
19. Elements 
 
 First Edition, June 2009 
285 
19.18 
Glyphs 
element Glyphs 
diagram 
 
attributes Name   
Type   
Use   
Default   Fixed   Annotation 
BidiLevel   
 
   
0   
   
Specifies the Unicode algorithm 
bidirectional nesting level. Even 
values imply left-to-right layout, 
odd values imply right-to-left 
layout. Right-to-left layout places 

19. Elements 
ECMA-388 
286 
First Edition, June 2009 
the run origin at the right side of 
the first glyph, with positive 
advance widths (representing 
advances to the left) placing 
subsequent glyphs to the left of the 
previous glyph. Valid values range 
from 0 to 61, inclusive. 
CaretStops   
ST_CaretStops  
   
   
   
Identifies the positions within the 
sequence of Unicode characters at 
which a text-selection tool can 
place a text-editing caret. Potential 
caret-stop positions are identified 
by their indices into the UTF-16 
code units represented by the 
UnicodeString attribute value.  
When this attribute is missing, the 
text in the UnicodeString attribute 
value MUST be interpreted as 
having a caret stop between every 
Unicode UTF-16 code unit and at 
the beginning and end of the text 
[M5.1]. 
The value SHOULD indicate that 
the caret cannot stop in front of 
most combining marks or in front 
of the second UTF-16 code unit of 
UTF-16 surrogate pairs [S5.1]. 
DeviceFontName   
ST_UnicodeString  
   
   
   
Uniquely identifies a specific device 
font. The identifier is typically 
defined by a hardware vendor or 
font vendor. 
Fill   
ST_RscRefColor  
   
   
   
Describes the brush used to fill the 
shape of the rendered glyphs. 
FontRenderingEmSize   ST_GEZero  
required      
   
Specifies the font size in drawing 
surface units, expressed as a float 
in units of the effective coordinate 
space. A value of 0 results in no 
visible text. 
FontUri   
xs:anyURI 
required      
   
The URI of the physical font from 
which all glyphs in the run are 
drawn. The URI MUST reference a 
font contained in the package 
[M2.1]. If the physical font 
referenced is a TrueType Collection 
(containing multiple font faces), 
the fragment portion of the URI is 
a 0-based index indicating which 

ECMA-388 
19. Elements 
 
 First Edition, June 2009 
287 
font face of the TrueType Collection 
should be used. 
OriginX   
ST_Double  
required      
   
Specifies the x coordinate of the 
first glyph in the run, in units of the 
effective coordinate space. The 
glyph is placed so that the leading 
edge of its advance vector and its 
baseline intersect with the point 
defined by the OriginX and OriginY 
attributes. 
OriginY   
ST_Double  
required      
   
Specifies the y coordinate of the 
first glyph in the run, in units of the 
effective coordinate space. The 
glyph is placed so that the leading 
edge of its advance vector and its 
baseline intersect with the point 
defined by the OriginX and OriginY 
attributes. 
IsSideways   
ST_Boolean  
   
false   
   
Indicates that a glyph is turned on 
its side, with the origin being 
defined as the top center of the 
unturned glyph. 
Indices   
ST_Indices  
   
   
   
Specifies a series of glyph indices 
and their attributes used for 
rendering the glyph run. If the 
UnicodeString attribute of the 
<Glyphs> element is not specified 
or contains an empty value (“” 
or “{}”), and if the Indices 
attribute is not specified or 
contains no glyph indices, then a 
consumer MUST instantiate an 
error condition [M5.2]. 
UnicodeString   
ST_UnicodeString  
   
   
   
Contains the string of text 
rendered by the <Glyphs> 
element. The text is specified as 
Unicode code points. 
StyleSimulations   
ST_StyleSimulations     
None   
   
Specifies a style simulation. Valid 
values are None, ItalicSimulation, 
BoldSimulation, and 
BoldItalicSimulation. 
RenderTransform   
ST_RscRefMatrix  
   
   
   
Establishes a new coordinate frame 
for the glyph run specified by the 
<Glyphs> element. The render 

19. Elements 
ECMA-388 
288 
First Edition, June 2009 
transform affects clip, opacity 
mask, fill, x origin, y origin, the 
actual shape of individual glyphs, 
and the advance widths. The 
render transform also affects the 
font size and values specified in the 
Indices attribute. 
Clip   
ST_RscRefAbbrGeomF     
   
   
Limits the rendered region of the 
element. Only portions of the 
<Glyphs> element that fall within 
the clip region (even partially 
clipped characters) produce marks 
on the page. 
Opacity   
ST_ZeroOne  
   
1.0   
   
Defines the uniform transparency 
of the glyph element. Values range 
from 0 (fully transparent) to 1 
(fully opaque), inclusive. Values 
outside of this range are invalid. 
OpacityMask   
ST_RscRef  
   
   
   
Specifies a mask of alpha values 
that is applied to the glyphs in the 
same fashion as the Opacity 
attribute, but allowing different 
alpha values for different areas of 
the element. 
Name   
ST_Name  
   
   
   
Contains a string value that 
identifies the current element as a 
named, addressable point in the 
document for the purpose of 
hyperlinking. 
FixedPage.NavigateUri   xs:anyURI 
   
   
   
Associates a hyperlink URI with the 
element. May be a relative 
reference or a URI that addresses a 
resource that is internal to or 
external to the package. 
xml:lang   
 
   
   
   
Specifies the default language used 
for the current element. The 
language is specified according to 
RFC 3066. 
x:Key   
 
   
   
   
Specifies a name for a resource in 
a resource dictionary. x:Key MUST 
be present when the current 
element is defined in a resource 
dictionary. x:Key MUST NOT be 
specified outside of a resource 

ECMA-388 
19. Elements 
 
 First Edition, June 2009 
289 
dictionary [M5.3]. 
annotation Represents a run of text from a single font. 
For more information, see §12.1 and §9.1.7. 
19.19 
Glyphs.Clip 
element Glyphs.Clip 
diagram 
 
annotation Limits the rendered region of the element. Only portions of the <Glyphs> element that fall within the clip region 
(even partially clipped characters) produce marks on the page. 
For more information, see §14.3.3. 
19.20 
Glyphs.Fill 
element Glyphs.Fill 
diagram 
 
annotation Describes the brush used to fill the shape of the rendered glyphs. 
For more information, see §12.2. 

19. Elements 
ECMA-388 
290 
First Edition, June 2009 
19.21 
Glyphs.OpacityMask 
element Glyphs.OpacityMask 
diagram 
 
annotation Specifies a mask of alpha values that is applied to the glyphs in the same fashion as the Opacity attribute, but 
allowing different alpha values for different areas of the element. 
For more information, see §14.5.3.  
19.22 
Glyphs.RenderTransform 
element Glyphs.RenderTransform 
diagram 
 
annotation Establishes a new coordinate frame for the glyph run specified by the <Glyphs> element. The render transform 
affects clip, opacity mask, fill, x origin, y origin, the actual shape of individual glyphs, and the advance widths. 
The render transform also affects the font size and values specified in the Indices attribute. 
For more information, see §14.4.4. 
19.23 
GradientStop 
element GradientStop 
diagram 

ECMA-388 
19. Elements 
 
 First Edition, June 2009 
291 
attributes Name   Type   
Use   
Default   Fixed   Annotation 
Color   ST_Color  
required      
   
Specifies the gradient stop color. 
Offset   ST_Double  required      
   
Specifies the gradient offset. The offset indicates a point along 
the progression of the gradient at which a color is specified. 
Colors between gradient offsets in the progression are 
interpolated. 
annotation Indicates a location and range of color progression for rendering a gradient. 
For more information, see §13.7.  
19.24 
ImageBrush 
element ImageBrush 
diagram 
attributes Name   
Type   
Use   
Default   Fixed   
Annotation 
Opacity   
ST_ZeroOne  
   
1.0   
   
Defines the uniform transparency of the brush 
fill. Values range from 0 (fully transparent) to 
1 (fully opaque), inclusive. Values outside of 
this range are invalid. 

19. Elements 
ECMA-388 
292 
First Edition, June 2009 
x:Key   
 
   
   
   
Specifies a name for a resource in a resource 
dictionary. x:Key MUST be present when the 
current element is defined in a resource 
dictionary. x:Key MUST NOT be specified 
outside of a resource dictionary [M6.2]. 
Transform   
ST_RscRefMatrix     
   
   
Describes the matrix transformation applied 
to the coordinate space of the brush. The 
Transform property is concatenated with the 
current effective render transform to yield an 
effective render transform local to the brush. 
The viewport for the brush is transformed 
using the local effective render transform. 
Viewbox   
ST_ViewBox  
required      
   
Specifies the position and dimensions of the 
brush's source content. Specifies four comma-
separated real numbers (x, y, Width, Height), 
where width and height are non-negative. The 
dimensions specified are relative to the 
image’s physical dimensions expressed in 
units of 1/96". The corners of the viewbox are 
mapped to the corners of the viewport, 
thereby providing the default clipping and 
transform for the brush’s source content. 
Viewport   
ST_ViewBox  
required      
   
Specifies the region in the containing 
coordinate space of the prime brush tile that 
is (possibly repeatedly) applied to fill the 
region to which the brush is applied. Specifies 
four comma-separated real numbers (x, y, 
Width, Height), where width and height are 
non-negative. The alignment of the brush 
pattern is controlled by adjusting the x and y 
values. 
TileMode   
ST_TileMode  
   
None   
   
Specifies how contents will be tiled in the 
filled region. Valid values are None, Tile, 
FlipX, FlipY, and FlipXY. 
ViewboxUnits   ST_ViewUnits  
required      
Absolute   Specifies the relationship of the viewbox 
coordinates to the containing coordinate 
space. 
ViewportUnits   ST_ViewUnits  
required      
Absolute   Specifies the relationship of the viewport 
coordinates to the containing coordinate 
space. 
ImageSource   ST_UriCtxBmp  
required      
   
Specifies the URI of an image resource or a 
combination of the URI of an image resource 
a color profile resource. See the Color clause 

ECMA-388 
19. Elements 
 
 First Edition, June 2009 
293 
for important details. The URI MUST refer to 
parts in the package [M2.1]. 
annotation Fills a region with an image. 
For more information, see §13.2. 
19.25 
ImageBrush.Transform 
element ImageBrush.Transform 
diagram 
 
annotation Describes the matrix transformation applied to the coordinate space of the brush. The Transform property is 
concatenated with the current effective render transform to yield an effective render transform local to the brush. 
The viewport for the brush is transformed using the local effective render transform. 
For more information, see §14.4.6. 
19.26 
Intent 
element SignatureDefinitionType/Intent 
diagram 
 
annotation A string that represents the intent to which the signing party agrees when signing the document. 
For more information, see §17.2.2.4. 

19. Elements 
ECMA-388 
294 
First Edition, June 2009 
19.27 
LinearGradientBrush 
element LinearGradientBrush 
diagram 
attributes Name   
Type   
Use   
Default   
Fixed   
Annotation 
Opacity   
ST_ZeroOne  
   
1.0   
   
Defines the uniform 
transparency of the linear 
gradient. Values range from 0 
(fully transparent) to 1 (fully 
opaque), inclusive. Values 
outside of this range are invalid. 
x:Key   
 
   
   
   
Specifies a name for a resource 
in a resource dictionary. x:Key 
MUST be present when the 
current element is defined in a 
resource dictionary. x:Key MUST 
NOT be specified outside of a 
resource dictionary [M6.5]. 
ColorInterpolationMode   ST_ClrIntMode     
SRgbLinear 
Interpolation   
   
Specifies the gamma function for 
color interpolation. The gamma 
adjustment should not be 
applied to the alpha component, 
if specified. Valid values are 
SRgbLinearInterpolation and 
ScRgbLinearInterpolation. 
SpreadMethod   
ST_Spread 
Method  
   
Pad   
   
Describes how the brush should 
fill the content area outside of 

ECMA-388 
19. Elements 
 
 First Edition, June 2009 
295 
the primary, initial gradient area. 
Valid values are Pad, Reflect and 
Repeat. 
MappingMode   
ST_Mapping 
Mode  
required      
Absolute   Specifies that the start point and 
end point are defined in the 
effective coordinate space 
(includes the Transform attribute 
of the brush). 
Transform   
ST_RscRef 
Matrix  
   
   
   
Describes the matrix 
transformation applied to the 
coordinate space of the brush. 
The Transform property on a 
brush is concatenated with the 
current effective render 
transform to yield an effective 
render transform local to the 
brush. The start point and end 
point are transformed using the 
local effective render transform. 
StartPoint   
ST_Point  
required      
   
Specifies the starting point of the 
linear gradient. 
EndPoint   
ST_Point  
required      
   
Specifies the end point of the 
linear gradient. The linear 
gradient brush interpolates the 
colors from the start point to the 
end point, where the start point 
represents an offset of 0, and 
the EndPoint represents an 
offset of 1. The Offset attribute 
value specified in a GradientStop 
element relates to the 0 and 1 
offsets defined by the start point 
and end point. 
annotation Fills a region with a linear gradient. 
For more information, see §13.5 and §15. 
19.28 
LinearGradientBrush.GradientStops 
element LinearGradientBrush.GradientStops 
diagram 
 

19. Elements 
ECMA-388 
296 
First Edition, June 2009 
annotation Holds a sequence of GradientStop elements. 
For more information, see §13.5.2. 
19.29 
LinearGradientBrush.Transform 
element LinearGradientBrush.Transform 
diagram 
 
annotation Describes the matrix transformation applied to the coordinate space of the brush. The Transform property is 
concatenated with the current effective render transform to yield an effective render transform local to the brush. 
The start point and end point are transformed using the local effective render transform. 
For more information, see §14.4.8. 
19.30 
LinkTarget 
element LinkTarget 
diagram 
 
attributes Name   Type   
Use   
Default   Fixed   Annotation 
Name   ST_Name  required      
   
Contains a string value that identifies the current element as a 
named, addressable point in the document for the purpose of 
hyperlinking. 
annotation Specifies an addressable point on the page. 
For more information, see §10.2.3. 

ECMA-388 
19. Elements 
 
 First Edition, June 2009 
297 
19.31 
ListItemStructure 
element ListItemStructure 
diagram 
attributes Name   Type   
Use   
Default   Fixed   Annotation 
Marker   ST_NameUnique  optional      
   
The named element that represents the marker for this 
list items, such as a bullet, number, or image. 
annotation Describes a single structural block. These structural blocks are grouped together in a list. 
For more information, see §16.1.2.11.  
19.32 
ListStructure 
element ListStructure 
diagram 
annotation Contains a collection of items that are group together in a list. 
For more information, see §16.1.2.10.  

19. Elements 
ECMA-388 
298 
First Edition, June 2009 
19.33 
MatrixTransform 
element MatrixTransform 
diagram 
attributes Name   Type   
Use   
Default   Fixed   Annotation 
Matrix   ST_Matrix  required      
   
Specifies the matrix structure that defines the transformation. 
x:Key    
   
   
   
Specifies a name for a resource in a resource dictionary. x:Key 
MUST be present when the current element is defined in a 
resource dictionary. x:Key MUST NOT be specified outside of a 
resource dictionary [M7.11]. 
annotation Creates an arbitrary affine matrix transformation that manipulates objects or coordinate systems in a two-
dimensional plane. 
For more information, see §14.4.1.  
19.34 
NamedElement 
element NamedElement 
diagram 
 
attributes Name   
Type   
Use   
Default   Fixed   Annotation 
NameReference   ST_Name  required      
   
Identifies the named element in the FixedPage part 
markup that is referenced by the document structure 
markup. 
annotation All document structure is related to the fixed page markup using this element. The <NamedElement> points to a 

ECMA-388 
19. Elements 
 
 First Edition, June 2009 
299 
single markup element contained in the fixed page markup. 
For more information, see §16.1.2.13.  
19.35 
OutlineEntry 
element OutlineEntry 
diagram 
 
attributes Name   
Type   
Use   
Default   Fixed   Annotation 
OutlineLevel   ST_IntGEOne  optional   1   
   
A description of the level where the outline entry 
exists in the hierarchy. A value of 1 is the root. 
OutlineTarget   xs:anyURI 
required      
   
The URI to which the outline entry is linked. This can 
be a URI to a named element within the document 
or an external URI, such as a website. It can be used 
as a hyperlink destination. 
Description   
xs:string 
required      
   
The friendly text associated with this outline entry. 
xml:lang   
 
optional      
   
This attribute specifies the default language used for 
any child element contained within the current 
element or nested child elements. The language is 
specified according to RFC 3066. 
annotation Represents an index to a specific location in the document. 
For more information, see §16.1.1.4.  

19. Elements 
ECMA-388 
300 
First Edition, June 2009 
19.36 
PageContent 
element PageContent 
diagram 
 
attributes Name   Type   
Use   
Default   Fixed   Annotation 
Source   xs:anyURI required      
   
Specifies a URI that refers to the page content, held in a 
distinct part within the package. The content identified MUST 
be a FixedPage part within the OpenXPS Document [M3.5]. 
Width   ST_GEOne     
   
   
The width of the page contained in the page content. 
Height   ST_GEOne     
   
   
The height of the page contained in the page content. 
annotation Defines a reference from a fixed document to a part that contains a <FixedPage> element. 
For more information, see §10.2.1. 
19.37 
PageContent.LinkTargets 
element PageContent.LinkTargets 
diagram 
annotation Contains a collection of <LinkTarget> elements, each of which is addressable via hyperlink. 
For more information, see §10.2.2. 

ECMA-388 
19. Elements 
 
 First Edition, June 2009 
301 
19.38 
ParagraphStructure 
element ParagraphStructure 
diagram 
annotation Contains the named elements that constitute a single paragraph. 
For more information, see §16.1.2.5.  

19. Elements 
ECMA-388 
302 
First Edition, June 2009 
19.39 
Path 
element Path 
diagram 
 
attributes Name   
Type   
Use   Default   Fixed   Annotation 

ECMA-388 
19. Elements 
 
 First Edition, June 2009 
303 
Data   
ST_RscRefAbbrGeomF     
   
   
Describes the geometry of the 
path. 
Fill   
ST_RscRefColor  
   
   
   
Describes the brush used to 
paint the geometry specified by 
the Data property of the path. 
RenderTransform   
ST_RscRefMatrix  
   
   
   
Establishes a new coordinate 
frame for all attributes of the 
path and for all child elements 
of the path, such as the 
geometry defined by the 
<Path.Data> property element. 
Clip   
ST_RscRefAbbrGeomF     
   
   
Limits the rendered region of 
the element. 
Opacity   
ST_ZeroOne  
   
1.0   
   
Defines the uniform 
transparency of the path 
element. Values range from 0 
(fully transparent) to 1 (fully 
opaque), inclusive. Values 
outside of this range are 
invalid. 
OpacityMask   
ST_RscRef  
   
   
   
Specifies a mask of alpha 
values that is applied to the 
path in the same fashion as the 
Opacity attribute, but allowing 
different alpha values for 
different areas of the element. 
Stroke   
ST_RscRefColor  
   
   
   
Specifies the brush used to 
draw the stroke. 
StrokeDashArray   
ST_EvenArrayPos  
   
   
   
Specifies the length of dashes 
and gaps of the outline stroke. 
These values are specified as 
multiples of the stroke 
thickness as a space-separated 
list with an even number of 
non-negative values. When a 
stroke is drawn, the dashes 
and gaps specified by these 
values are repeated to cover 
the length of the stroke. If this 
attribute is omitted, the stroke 
is drawn solid, without any 
gaps. 

19. Elements 
ECMA-388 
304 
First Edition, June 2009 
StrokeDashCap   
ST_DashCap  
   
Flat   
   
Specifies how the ends of each 
dash are drawn. Valid values 
are Flat, Round, Square, and 
Triangle. 
StrokeDashOffset   
ST_Double  
   
0.0   
   
Adjusts the start point for 
repeating the dash array 
pattern. If this value is 
omitted, the dash array aligns 
with the origin of the stroke. 
Values are specified as 
multiples of the stroke 
thickness. 
StrokeEndLineCap   
ST_LineCap  
   
Flat   
   
Defines the shape of the end of 
the last dash in a stroke. Valid 
values are Flat, Square, Round, 
and Triangle. 
StrokeStartLineCap   
ST_LineCap  
   
Flat   
   
Defines the shape of the 
beginning of the first dash in a 
stroke. Valid values are Flat, 
Square, Round, and Triangle. 
StrokeLineJoin   
ST_LineJoin  
   
Miter   
   
Specifies how a stroke is drawn 
at a corner of a path. Valid 
values are Miter, Bevel, and 
Round. If Miter is selected, the 
value of StrokeMiterLimit is 
used in drawing the stroke. 
StrokeMiterLimit   
ST_GEOne  
   
10.0   
   
The ratio between the 
maximum miter length and half 
of the stroke thickness. This 
value is significant only if the 
StrokeLineJoin attribute 
specifies Miter. 
StrokeThickness   
ST_GEZero  
   
1.0   
   
Specifies the thickness of a 
stroke, in units of the effective 
coordinate space (includes the 
path's render transform). The 
stroke is drawn on top of the 
boundary of the geometry 
specified by the <Path> 
element’s Data property. Half 
of the StrokeThickness extends 
outside of the geometry 
specified by the Data property 
and the other half extends 
inside of the geometry. 

ECMA-388 
19. Elements 
 
 First Edition, June 2009 
305 
Name   
ST_Name  
   
   
   
Contains a string value that 
identifies the current element 
as a named, addressable point 
in the document for the 
purpose of hyperlinking. 
FixedPage.NavigateUri   
xs:anyURI 
   
   
   
Associates a hyperlink URI with 
the element. Can be a relative 
reference or a URI that 
addresses a resource that is 
internal to or external to the 
package. 
xml:lang   
 
   
   
   
Specifies the default language 
used for the current element 
and for any child or descendant 
elements. The language is 
specified according to RFC 
3066. 
x:Key   
 
   
   
   
Specifies a name for a resource 
in a resource dictionary. x:Key 
MUST be present when the 
current element is defined in a 
resource dictionary. x:Key 
MUST NOT be specified outside 
of a resource dictionary [M4.1]. 
AutomationProperties.Name   
xs:string 
   
   
   
A brief description of the 
<Path> for accessibility 
purposes, particularly if filled 
with an <ImageBrush>. 
AutomationProperties.HelpText   xs:string 
   
   
   
A detailed description of the 
<Path> for accessibility 
purposes, particularly if filled 
with an <ImageBrush>. 
SnapsToDevicePixels   
ST_Boolean  
   
   
   
On Anti-aliasing consumers 
controls if control points snap 
to the nearest device pixels. 
Valid values are ‘false’ and 
‘true’. Consumers MAY ignore 
this attribute [O4.1]. 
annotation Defines a single graphical effect to be rendered to the page. It paints a geometry with a brush and draws a 
stroke around it. 
For more information, see §11.1 and §11.2.3. 

19. Elements 
ECMA-388 
306 
First Edition, June 2009 
19.40 
Path.Clip 
element Path.Clip 
diagram 
 
annotation Limits the rendered region of the element. 
For more information, see §14.3.2.  
19.41 
Path.Data 
element Path.Data 
diagram 
 
annotation Describes the geometry of the path. 
For more information, see §11.1.1. 
19.42 
Path.Fill 
element Path.Fill 
diagram 
 
annotation Describes the brush used to paint the geometry specified by the Data property of the path. 
For more information, see §11.1.2. 

ECMA-388 
19. Elements 
 
 First Edition, June 2009 
307 
19.43 
Path.OpacityMask 
element Path.OpacityMask 
diagram 
 
annotation Specifies the mask of alpha values that is applied to the path in the same fashion as the Opacity attribute, but 
allowing different alpha values for different areas of the element. 
For more information, see §14.5.2. 
19.44 
Path.RenderTransform 
element Path.RenderTransform 
diagram 
 
annotation Establishes a new coordinate frame for all attributes of the path and for all child elements of the path, such as 
the geometry defined by the <Path.Data> property element. 
For more information, see §14.4.3. 
19.45 
Path.Stroke 
element Path.Stroke 
diagram 
 

19. Elements 
ECMA-388 
308 
First Edition, June 2009 
annotation Specifies the brush used to draw the stroke. 
For more information, see §11.1.3.  
19.46 
PathFigure 
element PathFigure 
diagram 
 
attributes Name   
Type   
Use   
Default   Fixed   Annotation 
IsClosed   ST_Boolean     
false   
   
Specifies whether the path is closed. If set to true, the 
stroke is drawn "closed," that is, the last point in the last 
segment of the path figure is connected with the point 
specified in the StartPoint attribute, otherwise the stroke 
is drawn "open," and the last point is not connected to the 
start point. Only applicable if the path figure is used in a 
<Path> element that specifies a stroke. 
StartPoint   ST_Point  
required      
   
Specifies the starting point for the first segment of the 
path figure. 
IsFilled   
ST_Boolean     
true   
   
Specifies whether the path figure is used in computing the 
area of the containing path geometry. Can be true or 
false. When set to false, the path figure is considered only 
for stroking. 
annotation Specifies a set of one or more segment elements defining a closed region. 
For more information, see §11.2.2.1. 

ECMA-388 
19. Elements 
 
 First Edition, June 2009 
309 
19.47 
PathGeometry 
element PathGeometry 
diagram 
 
attributes Name   
Type   
Use   Default   
Fixed   Annotation 
Figures   
ST_AbbrGeom  
   
   
   
Describes the geometry of the path. 
FillRule   
ST_FillRule  
   
EvenOdd      
Specifies how the intersecting areas of geometric 
shapes are combined to form a region. Valid values are 
EvenOdd and NonZero. 
Transform   ST_RscRefMatrix     
   
   
Specifies the local matrix transformation that is applied 
to all child and descendant elements of the path 
geometry before it is used for filling, clipping, or 
stroking. 
x:Key   
 
   
   
   
Specifies a name for a resource in a resource 
dictionary. x:Key MUST be present when the current 
element is defined in a resource dictionary. x:Key MUST 
NOT be specified outside of a resource dictionary 
[M4.2]. 
annotation Contains a set of <PathFigure> elements. 
For more information, see §11.2.1.1. 
 

19. Elements 
ECMA-388 
310 
First Edition, June 2009 
19.48 
PathGeometry.Transform 
element PathGeometry.Transform 
diagram 
 
annotation Specifies the local matrix transformation that is applied to all child and descendant elements of the path 
geometry before it is used for filling, clipping, or stroking. 
For more information, see §14.4.5.  
19.49 
PolyBezierSegment 
element PolyBezierSegment 
diagram 
attributes Name   
Type   
Use   
Default   Fixed   Annotation 
Points   
ST_PointsM3  required      
   
Specifies control points for multiple Bézier segments. 
Coordinate values within each pair are comma-separated 
and additional whitespace can appear. Coordinate pairs 
are separated from other coordinate pairs by whitespace. 
IsStroked   ST_Boolean     
true   
   
Specifies whether the stroke for this segment of the path 
is drawn. Can be true or false. 
annotation A series of Bézier segments. 
 
For more information, see §11.2.2.3. 

ECMA-388 
19. Elements 
 
 First Edition, June 2009 
311 
19.50 
PolyLineSegment 
element PolyLineSegment 
diagram 
attributes Name   
Type   
Use   
Default   Fixed   Annotation 
Points   
ST_Points  
required      
   
Specifies a set of coordinates for the multiple segments 
that define the poly line segment. Coordinate values 
within each pair are comma-separated and additional 
whitespace can appear. Coordinate pairs are separated 
from other coordinate pairs by whitespace. 
IsStroked   ST_Boolean     
true   
   
Specifies whether the stroke for this segment of the path 
is drawn. Can be true or false. 
annotation Specifies a set of points between which lines are drawn. 
 
For more information, see §11.2.2.4. 
19.51 
PolyQuadraticBezierSegment 
element PolyQuadraticBezierSegment 
diagram 
 
attributes Name   
Type   
Use   
Default   Fixed   Annotation 
Points   
ST_PointsM2  required      
   
Specifies control points for multiple quadratic Bézier 

19. Elements 
ECMA-388 
312 
First Edition, June 2009 
segments. Coordinate values within each pair are 
comma-separated and additional whitespace can appear. 
Coordinate pairs are separated from other coordinate 
pairs by whitespace. 
IsStroked   ST_Boolean     
true   
   
Specifies whether the stroke for this segment of the path 
is drawn. Can be true or false. 
annotation A series of quadratic Bézier segments. 
 
For more information, see §11.2.2.5. 
19.52 
RadialGradientBrush 
element RadialGradientBrush 
diagram 
 
attributes Name   
Type   
Use   
Default   
Fixed   
Annotation 
Opacity   
ST_ZeroOne  
   
1.0   
   
Defines the uniform 
transparency of the radial 
gradient. Values range from 0 
(fully transparent) to 1 (fully 
opaque), inclusive. Values 
outside of this range are invalid. 
x:Key   
 
   
   
   
Specifies a name for a resource 

ECMA-388 
19. Elements 
 
 First Edition, June 2009 
313 
in a resource dictionary. x:Key 
MUST be present when the 
current element is defined in a 
resource dictionary. x:Key MUST 
NOT be specified outside of a 
resource dictionary [M6.6]. 
ColorInterpolationMode   ST_ClrIntMode     
SRgbLinear 
Interpolation   
   
Specifies the gamma function for 
color interpolation. The gamma 
adjustment should not be 
applied to the alpha component, 
if specified. Valid values are 
SRgbLinearInterpolation and 
ScRgbLinearInterpolation. 
SpreadMethod   
ST_Spread 
Method  
   
Pad   
   
Describes how the brush should 
fill the content area outside of 
the primary, initial gradient area. 
Valid values are Pad, Reflect and 
Repeat. 
MappingMode   
ST_Mapping 
Mode  
required      
Absolute   Specifies that center, x radius, 
and y radius are defined in the 
effective coordinate space 
(includes the Transform attribute 
of the brush). 
Transform   
ST_RscRef 
Matrix  
   
   
   
Describes the matrix 
transformation applied to the 
coordinate space of the brush. 
The Transform property is 
concatenated with the current 
effective render transform to 
yield an effective render 
transform local to the brush. The 
ellipse defined by the center, 
gradient origin, x radius, and y 
radius values is transformed 
using the local effective render 
transform. 
Center   
ST_Point  
required      
   
Specifies the center point of the 
radial gradient (that is, the 
center of the ellipse). The radial 
gradient brush interpolates the 
colors from the gradient origin to 
the circumference of the ellipse. 
The circumference is determined 
by the center and the radii. 
GradientOrigin   
ST_Point  
required      
   
Specifies the origin point of the 
radial gradient. 

19. Elements 
ECMA-388 
314 
First Edition, June 2009 
RadiusX   
ST_GEZero  
required      
   
Specifies the radius in the x 
dimension of the ellipse which 
defines the radial gradient. 
RadiusY   
ST_GEZero  
required      
   
Specifies the radius in the y 
dimension of the ellipse which 
defines the radial gradient. 
annotation Fills a region with a radial gradient. 
For more information, see §13.6 and §15. 
19.53 
RadialGradientBrush.GradientStops 
element RadialGradientBrush.GradientStops 
diagram 
 
annotation Holds a sequence of <GradientStop> elements. 
For more information, see §13.6.2.  
19.54 
RadialGradientBrush.Transform 
element RadialGradientBrush.Transform 
diagram 
 
annotation Describes the matrix transformation applied to the coordinate space of the brush. The Transform property is 
concatenated with the current effective render transform to yield an effective render transform local to the brush. 
The center, gradient origin, x radius, and y radius are transformed using the local effective render transform. 
For more information, see §14.4.9. 

ECMA-388 
19. Elements 
 
 First Edition, June 2009 
315 
19.55 
ResourceDictionary 
element ResourceDictionary 
diagram 
attributes Name   Type   
Use   Default   Fixed   Annotation 
Source   xs:anyURI    
   
   
Specifies the URI of a part containing markup for a resource 
dictionary. The URI MUST refer to a part in the package [M2.1]. 
annotation Defines a set of reusable resource definitions that can be used as property values in the fixed page markup. 
For more information, see §14.2.3. 
19.56 
SectionStructure 
element SectionStructure 
diagram 
 

19. Elements 
ECMA-388 
316 
First Edition, June 2009 
annotation Provides an arbitrary grouping of content structural markup elements. 
For more information, see §16.1.2.4.  
19.57 
SignBy 
element SignatureDefinitionType/SignBy 
diagram 
 
annotation The date and time by which the requested party is to sign the OpenXPS Document. 
For more information, see §17.2.2.5. 
19.58 
SignatureDefinition 
element SignatureDefinitionsType/SignatureDefinition 
diagram 
attributes Name   
Type   
Use   
Default   Fixed   Annotation 
SpotID   
xs:ID 
required      
   
A globally unique identifier for this signature spot. 
SignerName   xs:string    
   
   
A string representing the identity of the individual who is 
requested to sign the OpenXPS Document, or the name of 
the individual who has signed the OpenXPS Document. 
xml:lang   
 
   
   
   
Specifies the language used for the current element and its 
descendants. The language is specified according to RFC 
3066. 

ECMA-388 
19. Elements 
 
 First Edition, June 2009 
317 
annotation A single signature definition. 
For more information, see §17.2.2.2. 
19.59 
SignatureDefinitions 
element SignatureDefinitions 
diagram 
 
annotation The root element for the SignatureDefinitions part. 
For more information, see §17.2.2.1. 
19.60 
SigningLocation 
element SignatureDefinitionType/SigningLocation 
diagram 
annotation The legal location where the document is signed. 
For more information, see §17.2.2.6. 
19.61 
SolidColorBrush 
element SolidColorBrush 
diagram 
attributes Name   
Type   
Use   
Default   Fixed   Annotation 

19. Elements 
ECMA-388 
318 
First Edition, June 2009 
Opacity   ST_ZeroOne     
1.0   
   
Defines the uniform transparency of the brush fill. Values 
range from 0 (fully transparent) to 1 (fully opaque), 
inclusive. Values outside of this range are invalid. 
x:Key    
   
   
   
Specifies a name for a resource in a resource dictionary. 
x:Key MUST be present when the current element is defined 
in a resource dictionary. x:Key MUST NOT be specified 
outside of a resource dictionary [M6.1]. 
Color   
ST_Color  
required      
   
Specifies the color for filled elements. 
annotation Fills defined geometric regions with a solid color. 
For more information, see §13.1. 
19.62 
SpotLocation 
element SignatureDefinitionType/SpotLocation 
diagram 
attributes Name   
Type   
Use   
Default   Fixed   Annotation 
PageURI   xs:anyURI required      
   
Specifies the page on which the signature spot should be 
displayed. 
StartX   
xs:double required      
   
Specifies the x coordinate of the origin point (upper-left 
corner) on the page where the signature spot should be 
displayed. 
StartY   
xs:double required      
   
Specifies the y coordinate of the origin point (upper-left 
corner) on the page where the signature spot should be 
displayed. 
annotation Specifies where a consumer should place a signature spot. 
For more information, see§17.2.2.3. 

ECMA-388 
19. Elements 
 
 First Edition, June 2009 
319 
19.63 
Story 
element Story 
diagram 
attributes Name   
Type   
Use   
Default   Fixed   Annotation 
StoryName   xs:string required      
   
The name used by story fragments to identify they belong to 
this story. 
annotation Defines a single story and where each of its story fragments appear in the OpenXPS Document. 
For more information, see §16.1.1.5.  
19.64 
StoryBreak 
element StoryBreak 
diagram 
 
annotation If located at the beginning of a <StoryFragment> definition, indicates that the following markup elements should 
not be merged with the markup from the previous <StoryFragment>. If located at the end of a 
<StoryFragment> definition, indicates that the preceding markup elements should not be merged with the 
subsequent <StoryFragment>. 
For more information, see §16.1.2.3.  

19. Elements 
ECMA-388 
320 
First Edition, June 2009 
19.65 
StoryFragment 
element StoryFragment 
diagram 
 
attributes Name   
Type   
Use   
Default   Fixed   Annotation 
StoryName   
xs:string 
optional      
   
Identifies the story that this story fragment 
belongs to. If omitted, the story fragment is 
not associated with any story. 
FragmentName   xs:string 
optional      
   
Used to uniquely identify the story fragment. 
FragmentType   ST_FragmentType  required      
   
Specifies the type of content included in the 
story fragment. Valid values are Content, 
Header, and Footer. 
annotation Specifies the document structural markup that appears on the current page for a single story block. 
For more information, see §16.1.2.2.  

ECMA-388 
19. Elements 
 
 First Edition, June 2009 
321 
19.66 
StoryFragments 
element StoryFragments 
diagram 
annotation The root of a StoryFragments part. Contains all story fragments that appear on a specific page. 
For more information, see §16.1.2.1.  
19.67 
StoryFragmentReference 
element StoryFragmentReference 
diagram 
attributes Name   
Type   
Use   
Default   Fixed   Annotation 
FragmentName   xs:string 
optional      
   
Used to distingush between multiple story 
fragments from the same story on a single page. 
Page   
ST_IntGEOne  required      
   
Identifies the page number of the document that 
the story fragment is related to. Page numbers 
start at 1 and correspond to the order of 
<PageContent> elements in the FixedDocument 
part. 
annotation Identifies the StoryFragments part where this individual story fragment is defined. 
For more information, see §16.1.1.6.  
19.68 
TableCellStructure 
element TableCellStructure 

19. Elements 
ECMA-388 
322 
First Edition, June 2009 
diagram 
attributes Name   
Type   
Use   
Default   Fixed   Annotation 
RowSpan   
ST_TableSpan  optional   1   
   
Indicates the number of rows this cell spans, or 
merges into a single cell. 
ColumnSpan   ST_TableSpan  optional   1   
   
Indicates the number of columns this cell spans, or 
merges into a single cell. 
annotation Contains the elements that occupy a single cell of a table. 
For more information, see §16.1.2.9.  
19.69 
TableRowGroupStructure 
element TableRowGroupStructure 
diagram 
annotation Contains the set of table rows that make up a table. 
For more information, see §16.1.2.7.  
19.70 
TableRowStructure 
element TableRowStructure 

ECMA-388 
19. Elements 
 
 First Edition, June 2009 
323 
diagram 
annotation Contains the set of table cells that make up a row of a table. 
For more information, see §16.1.2.8.  
19.71 
TableStructure 
element TableStructure 
diagram 
annotation Contains a complete definition of a table in the OpenXPS Document. 
For more information, see §16.1.2.6.  

19. Elements 
ECMA-388 
324 
First Edition, June 2009 
19.72 
VisualBrush 
element VisualBrush 
diagram 
attributes Name   
Type   
Use   
Default   Fixed   
Annotation 
Opacity   
ST_ZeroOne  
   
1.0   
   
Defines the uniform transparency of the brush 
fill. Values range from 0 (fully transparent) to 
1 (fully opaque), inclusive. Values outside of 
this range are invalid. 
x:Key   
 
   
   
   
Specifies a name for a resource in a resource 
dictionary. x:Key MUST be present when the 
current element is defined in a resource 
dictionary. x:Key MUST NOT be specified 
outside of a resource dictionary [M6.4]. 
Transform   
ST_RscRefMatrix     
   
   
Describes the matrix transformation applied 
to the coordinate space of the brush. The 
Transform property is concatenated with the 
current effective render transform to yield an 
effective render transform local to the brush. 
The viewport for the brush is transformed 
using that local effective render transform. 
Viewbox   
ST_ViewBox  
required      
   
Specifies the position and dimensions of the 
brush's source content. Specifies four comma-
separated real numbers (x, y, Width, Height), 
where width and height are non-negative. The 

ECMA-388 
19. Elements 
 
 First Edition, June 2009 
325 
viewbox defines the default coordinate system 
for the element specified in the 
<VisualBrush.Visual> property element. The 
corners of the viewbox are mapped to the 
corners of the viewport, thereby providing the 
default clipping and transform for the brush’s 
source content. 
Viewport   
ST_ViewBox  
required      
   
Specifies the region in the containing 
coordinate space of the prime brush tile that 
is (possibly repeatedly) applied to fill the 
region to which the brush is applied. Specifies 
four comma-separated real numbers (x, y, 
Width, Height), where width and height are 
non-negative. The alignment of the brush 
pattern is controlled by adjusting the x and y 
values. 
TileMode   
ST_TileMode  
   
None   
   
Specifies how contents will be tiled in the 
filled region. Valid values are None, Tile, 
FlipX, FlipY, and FlipXY. 
ViewboxUnits   ST_ViewUnits  
required      
Absolute   Specifies the relationship of the viewbox 
coordinates to the containing coordinate 
space. 
ViewportUnits   ST_ViewUnits  
required      
Absolute   Specifies the relationship of the viewport 
coordinates to the containing coordinate 
space. 
Visual   
ST_RscRef  
   
   
   
Specifies resource reference to a <Path>, 
<Glyphs>, or <Canvas> element defined in a 
resource dictionary and used to draw the 
brush’s source content. 
annotation Fills a region with a drawing. The drawing can be specified as either a child of the <VisualBrush> element, or as 
a resource reference. Drawing content is expressed using <Canvas>, <Path>, and <Glyphs> elements. 
For more information, see §13.3. 
19.73 
VisualBrush.Transform 
element VisualBrush.Transform 
diagram 
 

19. Elements 
ECMA-388 
326 
First Edition, June 2009 
annotation Describes the matrix transformation applied to the coordinate space of the brush. The Transform property is 
concatenated with the current effective render transform to yield an effective render transform local to the brush. 
The viewport for the brush is transformed using the local effective render transform. 
For more information, see §14.4.7. 
19.74 
VisualBrush.Visual 
element VisualBrush.Visual 
diagram 
 
annotation Specifies a <Path> element, <Glyphs> element, or <Canvas> element used to draw the brush’s source 
contents. 
For more information, see §13.3.1. 

ECMA-388 
A. Schemas – W3C XML 
 
 First Edition, June 2009 
327 
A. Schemas – W3C XML 
A.1 
Signature Definitions 
The schema shown below is also provided in electronic form as a file named 
OpenXPSSignatureDefinitions.xsd, which is contained in an accompanying zip archive named 
"OpenXPS WC3 Schemas.zip". If discrepancies exist between the representation as published 
below and the corresponding electronic version, the published version below is the definitive 
version. 
 
<?xml version="1.0" encoding="utf-8"?> 
1 
<xs:schema targetNamespace="http://schemas.openxps.org/oxps/v1.0/signature-definitions" 
2 
xmlns="http://schemas.openxps.org/oxps/v1.0/signature-definitions" 
3 
xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" 
4 
blockDefault="#all"> 
5 
 
6 
  <xs:import namespace="http://www.w3.org/XML/1998/namespace" /> 
7 
         
8 
    <xs:complexType name="SignatureDefinitionsType"> 
9 
        <xs:sequence> 
10 
            <xs:element name="SignatureDefinition" type="SignatureDefinitionType" 
11 
minOccurs="1" maxOccurs="unbounded"> 
12 
                </xs:element> 
13 
        </xs:sequence> 
14 
    </xs:complexType> 
15 
     
16 
    <xs:complexType name="SpotLocationType"> 
17 
        <xs:attribute name="PageURI" type="xs:anyURI" use="required"> 
18 
            </xs:attribute> 
19 
        <xs:attribute name="StartX" type="xs:double" use="required"> 
20 
            </xs:attribute> 
21 
        <xs:attribute name="StartY" type="xs:double" use="required"> 
22 
            </xs:attribute> 
23 
    </xs:complexType> 
24 
     
25 
    <xs:complexType name="SignatureDefinitionType"> 
26 
        <xs:sequence> 
27 
            <xs:element name="SpotLocation" type="SpotLocationType" minOccurs="0"> 
28 
                </xs:element> 
29 
            <xs:element name="Intent" type="xs:string" minOccurs="0"> 
30 
                </xs:element> 
31 
            <xs:element name="SignBy" type="xs:dateTime" minOccurs="0"> 
32 
                </xs:element> 
33 
            <xs:element name="SigningLocation" type="xs:string" minOccurs="0"> 
34 
                </xs:element> 
35 
        </xs:sequence> 
36 
        <xs:attribute name="SpotID" type="xs:ID" use="required"> 
37 
            </xs:attribute> 
38 
        <xs:attribute name="SignerName" type="xs:string"> 
39 
            </xs:attribute> 
40 

A. Schemas – W3C XML 
ECMA-388 
328 
First Edition, June 2009 
    <xs:attribute ref="xml:lang"> 
41 
        </xs:attribute> 
42 
    </xs:complexType> 
43 
     
44 
    <xs:element name="SignatureDefinitions" type="SignatureDefinitionsType"> 
45 
        </xs:element> 
46 
</xs:schema> 
47 

ECMA-388 
A. Schemas – W3C XML 
 
 First Edition, June 2009 
329 
A.2 
OpenXPS Document 
The schema shown below is also provided in electronic form as a file named 
OpenXPSDocument.xsd, which is contained in an accompanying zip archive named "OpenXPS 
WC3 Schemas.zip". If discrepancies exist between the representation as published below and 
the corresponding electronic version, the published version below is the definitive version 
 
<?xml version="1.0" encoding="utf-8"?> 
1 
<xs:schema targetNamespace="http://schemas.openxps.org/oxps/v1.0" 
2 
xmlns="http://schemas.openxps.org/oxps/v1.0" 
3 
xmlns:xs="http://www.w3.org/2001/XMLSchema" 
4 
xmlns:x="http://schemas.openxps.org/oxps/v1.0/resourcedictionary-key" 
5 
elementFormDefault="qualified" blockDefault="#all"> 
6 
 
7 
    <xs:import namespace= 
8 
    "http://schemas.openxps.org/oxps/v1.0/resourcedictionary-key" /> 
9 
    <xs:import namespace="http://www.w3.org/XML/1998/namespace" /> 
10 
 
11 
    <!-- Names used for types and groups: 
12 
 
13 
        ST_*        simpleType 
14 
        CT_*        complexType 
15 
        G_*            group 
16 
        AG_*        attributeGroup 
17 
 
18 
    --> 
19 
 
20 
    <!-- Individual real number patterns 
21 
    All patterns using numbers now use <whitespace value="collapse">.  
22 
    As a result, any whitespace in the pattern can be expressed as: 
23 
    mandatory whitespace, one or more:  " " 
24 
    optional whitespace, zero or more:  " ?" 
25 
 
26 
    For better readability, each pattern using numbers is also described in a comment 
27 
using 
28 
    one of the following pattern designators. 
29 
 
30 
    The actual patterns are generated by replacement by the schema publication process. 
31 
    --> 
32 
    <!--DEFINE [pint]       "([1-9][0-9]*)" --> 
33 
    <!--DEFINE [uint]       "([0-9]+)" --> 
34 
    <!--DEFINE [dec]        "(\-?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+)))" --> 
35 
    <!--DEFINE [rn]         "((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-
36 
9]+)?)" --> 
37 
    <!--DEFINE [prn]        "(\+?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-
38 
9]+)?)" --> 
39 
    <!--DEFINE [scs]        "( ?, ?)" --> 
40 
 
41 
 
42 
 
43 
        <!-- Complex Types --> 
44 
    <xs:complexType name="CT_MatrixTransform"> 
45 

A. Schemas – W3C XML 
ECMA-388 
330 
First Edition, June 2009 
        <xs:attributeGroup ref="AG_MatrixTransform" /> 
46 
    </xs:complexType> 
47 
 
48 
    <xs:complexType name="CT_SolidColorBrush"> 
49 
        <xs:attributeGroup ref="AG_Brush" /> 
50 
        <xs:attributeGroup ref="AG_SolidColorBrush" /> 
51 
    </xs:complexType> 
52 
 
53 
    <xs:complexType name="CT_ImageBrush"> 
54 
        <xs:sequence> 
55 
            <xs:element ref="ImageBrush.Transform" minOccurs="0" /> 
56 
        </xs:sequence> 
57 
        <xs:attributeGroup ref="AG_Brush" /> 
58 
        <xs:attributeGroup ref="AG_TileBrush" /> 
59 
        <xs:attributeGroup ref="AG_ImageBrush" /> 
60 
    </xs:complexType> 
61 
 
62 
    <xs:complexType name="CT_VisualBrush"> 
63 
        <xs:sequence> 
64 
            <xs:element ref="VisualBrush.Transform" minOccurs="0" /> 
65 
            <xs:element ref="VisualBrush.Visual" minOccurs="0" /> 
66 
        </xs:sequence> 
67 
        <xs:attributeGroup ref="AG_Brush" /> 
68 
        <xs:attributeGroup ref="AG_TileBrush" /> 
69 
        <xs:attributeGroup ref="AG_VisualBrush" /> 
70 
    </xs:complexType> 
71 
 
72 
    <xs:complexType name="CT_LinearGradientBrush"> 
73 
        <xs:sequence> 
74 
            <xs:element ref="LinearGradientBrush.Transform" minOccurs="0" /> 
75 
            <xs:element ref="LinearGradientBrush.GradientStops" /> 
76 
        </xs:sequence> 
77 
        <xs:attributeGroup ref="AG_Brush" /> 
78 
        <xs:attributeGroup ref="AG_GradientBrush" /> 
79 
        <xs:attributeGroup ref="AG_LinearGradientBrush" /> 
80 
    </xs:complexType> 
81 
 
82 
    <xs:complexType name="CT_RadialGradientBrush"> 
83 
        <xs:sequence> 
84 
            <xs:element ref="RadialGradientBrush.Transform" minOccurs="0" /> 
85 
            <xs:element ref="RadialGradientBrush.GradientStops" /> 
86 
        </xs:sequence> 
87 
        <xs:attributeGroup ref="AG_Brush" /> 
88 
        <xs:attributeGroup ref="AG_GradientBrush" /> 
89 
        <xs:attributeGroup ref="AG_RadialGradientBrush" /> 
90 
    </xs:complexType> 
91 
 
92 
    <xs:complexType name="CT_GradientStop"> 
93 
        <xs:attributeGroup ref="AG_GradientStop" /> 
94 
    </xs:complexType> 
95 
 
96 
    <xs:complexType name="CT_PathGeometry"> 
97 
        <xs:sequence> 
98 
            <xs:element ref="PathGeometry.Transform" minOccurs="0" /> 
99 
            <xs:element ref="PathFigure" minOccurs="0" maxOccurs="unbounded" /> 
100 

ECMA-388 
A. Schemas – W3C XML 
 
 First Edition, June 2009 
331 
        </xs:sequence> 
101 
        <xs:attributeGroup ref="AG_PathGeometry" /> 
102 
    </xs:complexType> 
103 
 
104 
    <xs:complexType name="CT_Glyphs"> 
105 
        <xs:sequence> 
106 
            <xs:element ref="Glyphs.RenderTransform" minOccurs="0" /> 
107 
            <xs:element ref="Glyphs.Clip" minOccurs="0" /> 
108 
            <xs:element ref="Glyphs.OpacityMask" minOccurs="0" /> 
109 
            <xs:element ref="Glyphs.Fill" minOccurs="0" /> 
110 
        </xs:sequence> 
111 
        <xs:attributeGroup ref="AG_Glyphs" /> 
112 
    </xs:complexType> 
113 
 
114 
    <xs:complexType name="CT_Path"> 
115 
        <xs:sequence> 
116 
            <xs:element ref="Path.RenderTransform" minOccurs="0" /> 
117 
            <xs:element ref="Path.Clip" minOccurs="0" /> 
118 
            <xs:element ref="Path.OpacityMask" minOccurs="0" /> 
119 
            <xs:element ref="Path.Fill" minOccurs="0" /> 
120 
            <xs:element ref="Path.Stroke" minOccurs="0" /> 
121 
            <xs:element ref="Path.Data" minOccurs="0" /> 
122 
        </xs:sequence> 
123 
        <xs:attributeGroup ref="AG_Path" /> 
124 
        <xs:attributeGroup ref="AG_AutomationProvider" /> 
125 
        <xs:attributeGroup ref="AG_SnapsToDevicePixels" /> 
126 
    </xs:complexType> 
127 
 
128 
    <xs:complexType name="CT_PathFigure"> 
129 
        <xs:sequence> 
130 
            <xs:choice maxOccurs="unbounded"> 
131 
                <xs:element ref="PolyLineSegment" /> 
132 
                <xs:element ref="PolyBezierSegment" /> 
133 
                <xs:element ref="ArcSegment" /> 
134 
                <xs:element ref="PolyQuadraticBezierSegment" /> 
135 
            </xs:choice> 
136 
        </xs:sequence> 
137 
        <xs:attributeGroup ref="AG_PathFigure" /> 
138 
    </xs:complexType> 
139 
 
140 
    <xs:complexType name="CT_ArcSegment"> 
141 
        <xs:attributeGroup ref="AG_ArcSegment" /> 
142 
    </xs:complexType> 
143 
 
144 
    <xs:complexType name="CT_PolyQuadraticBezierSegment"> 
145 
        <xs:attributeGroup ref="AG_PolyQuadraticBezierSegment" /> 
146 
    </xs:complexType> 
147 
 
148 
    <xs:complexType name="CT_PolyLineSegment"> 
149 
        <xs:attributeGroup ref="AG_PolyLineSegment" /> 
150 
    </xs:complexType> 
151 
 
152 
    <xs:complexType name="CT_PolyBezierSegment"> 
153 
        <xs:attributeGroup ref="AG_PolyBezierSegment" /> 
154 
    </xs:complexType> 
155 

A. Schemas – W3C XML 
ECMA-388 
332 
First Edition, June 2009 
 
156 
    <xs:complexType name="CT_Canvas"> 
157 
        <xs:sequence> 
158 
            <xs:element ref="Canvas.Resources" minOccurs="0" /> 
159 
            <xs:element ref="Canvas.RenderTransform" minOccurs="0" /> 
160 
            <xs:element ref="Canvas.Clip" minOccurs="0" /> 
161 
            <xs:element ref="Canvas.OpacityMask" minOccurs="0" /> 
162 
            <xs:choice minOccurs="0" maxOccurs="unbounded"> 
163 
                <xs:element ref="Path" /> 
164 
                <xs:element ref="Glyphs" /> 
165 
                <xs:element ref="Canvas" /> 
166 
            </xs:choice> 
167 
        </xs:sequence> 
168 
        <xs:attributeGroup ref="AG_Canvas" /> 
169 
        <xs:attributeGroup ref="AG_AutomationProvider" /> 
170 
    </xs:complexType> 
171 
 
172 
    <xs:complexType name="CT_ResourceDictionary"> 
173 
        <xs:choice minOccurs="0" maxOccurs="unbounded"> 
174 
            <xs:element ref="ImageBrush" /> 
175 
            <xs:element ref="LinearGradientBrush" /> 
176 
            <xs:element ref="RadialGradientBrush" /> 
177 
            <xs:element ref="VisualBrush" /> 
178 
            <xs:element ref="SolidColorBrush" /> 
179 
            <xs:element ref="MatrixTransform" /> 
180 
            <xs:element ref="PathGeometry" /> 
181 
            <xs:element ref="Path" /> 
182 
            <xs:element ref="Glyphs" /> 
183 
            <xs:element ref="Canvas" /> 
184 
        </xs:choice> 
185 
        <xs:attributeGroup ref="AG_ResourceDictionary" /> 
186 
    </xs:complexType> 
187 
 
188 
    <xs:complexType name="CT_FixedPage"> 
189 
        <xs:sequence> 
190 
            <xs:element ref="FixedPage.Resources" minOccurs="0" /> 
191 
            <xs:choice minOccurs="0" maxOccurs="unbounded"> 
192 
                <xs:element ref="Path" /> 
193 
                <xs:element ref="Glyphs" /> 
194 
                <xs:element ref="Canvas" /> 
195 
            </xs:choice> 
196 
        </xs:sequence> 
197 
        <xs:attributeGroup ref="AG_FixedPage" /> 
198 
    </xs:complexType> 
199 
 
200 
    <xs:complexType name="CT_FixedDocument"> 
201 
        <xs:sequence> 
202 
            <xs:element ref="PageContent" maxOccurs="unbounded" /> 
203 
        </xs:sequence> 
204 
    </xs:complexType> 
205 
 
206 
    <xs:complexType name="CT_PageContent"> 
207 
        <xs:sequence> 
208 
            <xs:element ref="PageContent.LinkTargets" minOccurs="0" /> 
209 
        </xs:sequence> 
210 

ECMA-388 
A. Schemas – W3C XML 
 
 First Edition, June 2009 
333 
        <xs:attributeGroup ref="AG_PageContent" /> 
211 
    </xs:complexType> 
212 
 
213 
    <xs:complexType name="CT_FixedDocumentSequence"> 
214 
        <xs:sequence> 
215 
            <xs:element ref="DocumentReference" maxOccurs="unbounded" /> 
216 
        </xs:sequence> 
217 
    </xs:complexType> 
218 
 
219 
    <xs:complexType name="CT_DocumentReference"> 
220 
        <xs:attributeGroup ref="AG_DocumentReference" /> 
221 
    </xs:complexType> 
222 
 
223 
    <xs:complexType name="CT_LinkTarget"> 
224 
        <xs:attributeGroup ref="AG_LinkTarget" /> 
225 
    </xs:complexType> 
226 
 
227 
    <xs:complexType name="CT_CP_LinkTargets"> 
228 
        <xs:sequence> 
229 
            <xs:element ref="LinkTarget" maxOccurs="unbounded" /> 
230 
        </xs:sequence> 
231 
    </xs:complexType> 
232 
 
233 
    <xs:complexType name="CT_CP_Transform"> 
234 
        <xs:sequence> 
235 
            <xs:element ref="MatrixTransform" /> 
236 
        </xs:sequence> 
237 
    </xs:complexType> 
238 
 
239 
    <xs:complexType name="CT_CP_Visual"> 
240 
        <xs:choice> 
241 
            <xs:element ref="Path" /> 
242 
            <xs:element ref="Glyphs" /> 
243 
            <xs:element ref="Canvas" /> 
244 
        </xs:choice> 
245 
    </xs:complexType> 
246 
 
247 
    <xs:complexType name="CT_CP_GradientStops"> 
248 
        <xs:sequence> 
249 
            <xs:element ref="GradientStop" minOccurs="2" maxOccurs="unbounded" /> 
250 
        </xs:sequence> 
251 
    </xs:complexType> 
252 
 
253 
    <xs:complexType name="CT_CP_Geometry"> 
254 
        <xs:sequence> 
255 
        <xs:element ref="PathGeometry" /> 
256 
      </xs:sequence> 
257 
    </xs:complexType> 
258 
 
259 
    <xs:complexType name="CT_CP_Brush"> 
260 
        <xs:choice> 
261 
            <xs:element ref="ImageBrush" /> 
262 
            <xs:element ref="LinearGradientBrush" /> 
263 
            <xs:element ref="RadialGradientBrush" /> 
264 
            <xs:element ref="SolidColorBrush" /> 
265 

A. Schemas – W3C XML 
ECMA-388 
334 
First Edition, June 2009 
            <xs:element ref="VisualBrush" /> 
266 
        </xs:choice> 
267 
    </xs:complexType> 
268 
 
269 
    <xs:complexType name="CT_CP_Resources"> 
270 
        <xs:sequence minOccurs="0"> 
271 
            <xs:element ref="ResourceDictionary" /> 
272 
        </xs:sequence> 
273 
    </xs:complexType> 
274 
 
275 
    <!-- Root elements --> 
276 
    <xs:element name="MatrixTransform" type="CT_MatrixTransform"> 
277 
        </xs:element> 
278 
 
279 
    <xs:element name="SolidColorBrush" type="CT_SolidColorBrush"> 
280 
        </xs:element> 
281 
 
282 
    <xs:element name="ImageBrush" type="CT_ImageBrush"> 
283 
        </xs:element> 
284 
 
285 
    <xs:element name="VisualBrush" type="CT_VisualBrush"> 
286 
        </xs:element> 
287 
 
288 
    <xs:element name="LinearGradientBrush" type="CT_LinearGradientBrush"> 
289 
        </xs:element> 
290 
 
291 
    <xs:element name="RadialGradientBrush" type="CT_RadialGradientBrush"> 
292 
        </xs:element> 
293 
 
294 
    <xs:element name="Glyphs" type="CT_Glyphs"> 
295 
        </xs:element> 
296 
 
297 
    <xs:element name="Path" type="CT_Path"> 
298 
        </xs:element> 
299 
 
300 
    <xs:element name="Canvas" type="CT_Canvas"> 
301 
        </xs:element> 
302 
 
303 
    <xs:element name="GradientStop" type="CT_GradientStop"> 
304 
        </xs:element> 
305 
 
306 
    <xs:element name="ResourceDictionary" type="CT_ResourceDictionary"> 
307 
        </xs:element> 
308 
 
309 
    <xs:element name="PathGeometry" type="CT_PathGeometry"> 
310 
        </xs:element> 
311 
 
312 
    <xs:element name="PathFigure" type="CT_PathFigure"> 
313 
        </xs:element> 
314 
 
315 
    <xs:element name="PolyLineSegment" type="CT_PolyLineSegment"> 
316 
        </xs:element> 
317 
 
318 
    <xs:element name="ArcSegment" type="CT_ArcSegment"> 
319 
        </xs:element> 
320 

ECMA-388 
A. Schemas – W3C XML 
 
 First Edition, June 2009 
335 
 
321 
    <xs:element name="PolyBezierSegment" type="CT_PolyBezierSegment"> 
322 
        </xs:element> 
323 
 
324 
    <xs:element name="PolyQuadraticBezierSegment" type="CT_PolyQuadraticBezierSegment"> 
325 
        </xs:element> 
326 
 
327 
    <xs:element name="FixedPage" type="CT_FixedPage"> 
328 
        </xs:element> 
329 
 
330 
    <xs:element name="FixedDocument" type="CT_FixedDocument"> 
331 
        </xs:element> 
332 
 
333 
    <xs:element name="PageContent" type="CT_PageContent"> 
334 
        </xs:element> 
335 
 
336 
    <xs:element name="FixedDocumentSequence" type="CT_FixedDocumentSequence"> 
337 
        </xs:element> 
338 
 
339 
    <xs:element name="DocumentReference" type="CT_DocumentReference"> 
340 
        </xs:element> 
341 
 
342 
    <xs:element name="LinkTarget" type="CT_LinkTarget"> 
343 
        </xs:element> 
344 
 
345 
    <xs:element name="PageContent.LinkTargets" type="CT_CP_LinkTargets"> 
346 
        </xs:element> 
347 
 
348 
    <xs:element name="ImageBrush.Transform" type="CT_CP_Transform"> 
349 
        </xs:element> 
350 
 
351 
    <xs:element name="VisualBrush.Transform" type="CT_CP_Transform"> 
352 
        </xs:element> 
353 
 
354 
    <xs:element name="LinearGradientBrush.Transform" type="CT_CP_Transform"> 
355 
        </xs:element> 
356 
 
357 
    <xs:element name="RadialGradientBrush.Transform" type="CT_CP_Transform"> 
358 
        </xs:element> 
359 
 
360 
    <xs:element name="PathGeometry.Transform" type="CT_CP_Transform"> 
361 
        </xs:element> 
362 
 
363 
    <xs:element name="Glyphs.RenderTransform" type="CT_CP_Transform"> 
364 
        </xs:element> 
365 
 
366 
    <xs:element name="Path.RenderTransform" type="CT_CP_Transform"> 
367 
        </xs:element> 
368 
 
369 
    <xs:element name="Canvas.RenderTransform" type="CT_CP_Transform"> 
370 
        </xs:element> 
371 
 
372 
    <xs:element name="VisualBrush.Visual" type="CT_CP_Visual"> 
373 
        </xs:element> 
374 
 
375 

A. Schemas – W3C XML 
ECMA-388 
336 
First Edition, June 2009 
    <xs:element name="LinearGradientBrush.GradientStops" type="CT_CP_GradientStops"> 
376 
        </xs:element> 
377 
 
378 
    <xs:element name="RadialGradientBrush.GradientStops" type="CT_CP_GradientStops"> 
379 
        </xs:element> 
380 
 
381 
    <xs:element name="Glyphs.Clip" type="CT_CP_Geometry"> 
382 
        </xs:element> 
383 
 
384 
    <xs:element name="Path.Clip" type="CT_CP_Geometry"> 
385 
        </xs:element> 
386 
 
387 
    <xs:element name="Canvas.Clip" type="CT_CP_Geometry"> 
388 
        </xs:element> 
389 
 
390 
    <xs:element name="Glyphs.OpacityMask" type="CT_CP_Brush"> 
391 
        </xs:element> 
392 
 
393 
    <xs:element name="Path.OpacityMask" type="CT_CP_Brush"> 
394 
        </xs:element> 
395 
 
396 
    <xs:element name="Canvas.OpacityMask" type="CT_CP_Brush"> 
397 
        </xs:element> 
398 
 
399 
    <xs:element name="Glyphs.Fill" type="CT_CP_Brush"> 
400 
        </xs:element> 
401 
 
402 
    <xs:element name="Path.Fill" type="CT_CP_Brush"> 
403 
        </xs:element> 
404 
 
405 
    <xs:element name="Path.Data" type="CT_CP_Geometry"> 
406 
        </xs:element> 
407 
 
408 
    <xs:element name="Path.Stroke" type="CT_CP_Brush"> 
409 
        </xs:element> 
410 
 
411 
    <xs:element name="Canvas.Resources" type="CT_CP_Resources"> 
412 
        </xs:element> 
413 
 
414 
    <xs:element name="FixedPage.Resources" type="CT_CP_Resources"> 
415 
        </xs:element> 
416 
 
417 
    <xs:attributeGroup name="AG_GradientStop"> 
418 
        <xs:attribute name="Color" type="ST_Color" use="required"> 
419 
            </xs:attribute> 
420 
        <xs:attribute name="Offset" type="ST_Double" use="required"> 
421 
            </xs:attribute> 
422 
    </xs:attributeGroup> 
423 
 
424 
    <xs:attributeGroup name="AG_Brush"> 
425 
        <xs:attribute name="Opacity" type="ST_ZeroOne" default="1.0"> 
426 
            </xs:attribute> 
427 
        <xs:attribute ref="x:Key" /> 
428 
    </xs:attributeGroup> 
429 
 
430 

ECMA-388 
A. Schemas – W3C XML 
 
 First Edition, June 2009 
337 
    <xs:attributeGroup name="AG_TileBrush"> 
431 
        <xs:attribute name="Transform" type="ST_RscRefMatrix"> 
432 
            </xs:attribute> 
433 
        <xs:attribute name="Viewbox" type="ST_ViewBox" use="required"> 
434 
            </xs:attribute> 
435 
        <xs:attribute name="Viewport" type="ST_ViewBox" use="required"> 
436 
            </xs:attribute> 
437 
        <xs:attribute name="TileMode" type="ST_TileMode" default="None"> 
438 
            </xs:attribute> 
439 
        <xs:attribute name="ViewboxUnits" type="ST_ViewUnits" use="required" 
440 
fixed="Absolute"> 
441 
            </xs:attribute> 
442 
        <xs:attribute name="ViewportUnits" type="ST_ViewUnits" use="required" 
443 
fixed="Absolute"> 
444 
            </xs:attribute> 
445 
    </xs:attributeGroup> 
446 
 
447 
    <xs:attributeGroup name="AG_VisualBrush"> 
448 
        <xs:attribute name="Visual" type="ST_RscRef"> 
449 
            </xs:attribute> 
450 
    </xs:attributeGroup> 
451 
 
452 
    <xs:attributeGroup name="AG_GradientBrush"> 
453 
        <xs:attribute name="ColorInterpolationMode" type="ST_ClrIntMode" 
454 
default="SRgbLinearInterpolation"> 
455 
            </xs:attribute> 
456 
        <xs:attribute name="SpreadMethod" type="ST_SpreadMethod" default="Pad"> 
457 
            </xs:attribute> 
458 
        <xs:attribute name="MappingMode" type="ST_MappingMode" use="required" 
459 
fixed="Absolute"> 
460 
            </xs:attribute> 
461 
    </xs:attributeGroup> 
462 
 
463 
    <xs:attributeGroup name="AG_SolidColorBrush"> 
464 
        <xs:attribute name="Color" type="ST_Color" use="required"> 
465 
            </xs:attribute> 
466 
    </xs:attributeGroup> 
467 
 
468 
    <xs:attributeGroup name="AG_ImageBrush"> 
469 
        <xs:attribute name="ImageSource" type="ST_UriCtxBmp" use="required"> 
470 
            </xs:attribute> 
471 
    </xs:attributeGroup> 
472 
 
473 
    <xs:attributeGroup name="AG_LinearGradientBrush"> 
474 
        <xs:attribute name="Transform" type="ST_RscRefMatrix"> 
475 
            </xs:attribute> 
476 
        <xs:attribute name="StartPoint" type="ST_Point" use="required"> 
477 
            </xs:attribute> 
478 
        <xs:attribute name="EndPoint" type="ST_Point" use="required"> 
479 
            </xs:attribute> 
480 
    </xs:attributeGroup> 
481 
 
482 
    <xs:attributeGroup name="AG_RadialGradientBrush"> 
483 
        <xs:attribute name="Transform" type="ST_RscRefMatrix"> 
484 
            </xs:attribute> 
485 

A. Schemas – W3C XML 
ECMA-388 
338 
First Edition, June 2009 
        <xs:attribute name="Center" type="ST_Point" use="required"> 
486 
            </xs:attribute> 
487 
        <xs:attribute name="GradientOrigin" type="ST_Point" use="required"> 
488 
            </xs:attribute> 
489 
        <xs:attribute name="RadiusX" type="ST_GEZero" use="required"> 
490 
            </xs:attribute> 
491 
        <xs:attribute name="RadiusY" type="ST_GEZero" use="required"> 
492 
            </xs:attribute> 
493 
    </xs:attributeGroup> 
494 
 
495 
    <xs:attributeGroup name="AG_PathGeometry"> 
496 
        <xs:attribute name="Figures" type="ST_AbbrGeom"> 
497 
            </xs:attribute> 
498 
        <xs:attribute name="FillRule" type="ST_FillRule" default="EvenOdd"> 
499 
            </xs:attribute> 
500 
        <xs:attribute name="Transform" type="ST_RscRefMatrix"> 
501 
            </xs:attribute> 
502 
        <xs:attribute ref="x:Key" /> 
503 
    </xs:attributeGroup> 
504 
 
505 
    <xs:attributeGroup name="AG_ResourceDictionary"> 
506 
        <xs:attribute name="Source" type="xs:anyURI"> 
507 
            </xs:attribute> 
508 
    </xs:attributeGroup> 
509 
 
510 
    <xs:attributeGroup name="AG_PolyLineSegment"> 
511 
        <xs:attribute name="Points" type="ST_Points" use="required"> 
512 
            </xs:attribute> 
513 
        <xs:attribute name="IsStroked" type="ST_Boolean" default="true"> 
514 
            </xs:attribute> 
515 
    </xs:attributeGroup> 
516 
 
517 
    <xs:attributeGroup name="AG_ArcSegment"> 
518 
        <xs:attribute name="Point" type="ST_Point" use="required"> 
519 
            </xs:attribute> 
520 
        <xs:attribute name="Size" type="ST_PointGE0" use="required"> 
521 
            </xs:attribute> 
522 
        <xs:attribute name="RotationAngle" type="ST_Double" use="required"> 
523 
            </xs:attribute> 
524 
        <xs:attribute name="IsLargeArc" type="ST_Boolean" use="required"> 
525 
            </xs:attribute> 
526 
        <xs:attribute name="SweepDirection" type="ST_SweepDirection" use="required"> 
527 
            </xs:attribute> 
528 
        <xs:attribute name="IsStroked" type="ST_Boolean" default="true"> 
529 
            </xs:attribute> 
530 
    </xs:attributeGroup> 
531 
 
532 
    <xs:attributeGroup name="AG_PolyBezierSegment"> 
533 
        <xs:attribute name="Points" type="ST_PointsM3" use="required"> 
534 
            </xs:attribute> 
535 
        <xs:attribute name="IsStroked" type="ST_Boolean" default="true"> 
536 
            </xs:attribute> 
537 
    </xs:attributeGroup> 
538 
 
539 
    <xs:attributeGroup name="AG_PolyQuadraticBezierSegment"> 
540 

ECMA-388 
A. Schemas – W3C XML 
 
 First Edition, June 2009 
339 
        <xs:attribute name="Points" type="ST_PointsM2" use="required"> 
541 
            </xs:attribute> 
542 
        <xs:attribute name="IsStroked" type="ST_Boolean" default="true"> 
543 
            </xs:attribute> 
544 
    </xs:attributeGroup> 
545 
 
546 
    <xs:attributeGroup name="AG_Glyphs"> 
547 
        <xs:attribute name="BidiLevel" default="0"> 
548 
            <xs:simpleType> 
549 
              <xs:restriction base="xs:integer"> 
550 
                <xs:minInclusive value="0" /> 
551 
                <xs:maxInclusive value="61" /> 
552 
              </xs:restriction> 
553 
            </xs:simpleType> 
554 
            </xs:attribute> 
555 
        <xs:attribute name="CaretStops" type="ST_CaretStops"> 
556 
            </xs:attribute> 
557 
        <xs:attribute name="DeviceFontName" type="ST_UnicodeString"> 
558 
            </xs:attribute> 
559 
        <xs:attribute name="Fill" type="ST_RscRefColor"> 
560 
            </xs:attribute> 
561 
        <xs:attribute name="FontRenderingEmSize" type="ST_GEZero" use="required"> 
562 
            </xs:attribute> 
563 
        <xs:attribute name="FontUri" type="xs:anyURI" use="required"> 
564 
            </xs:attribute> 
565 
        <xs:attribute name="OriginX" type="ST_Double" use="required"> 
566 
            </xs:attribute> 
567 
        <xs:attribute name="OriginY" type="ST_Double" use="required"> 
568 
            </xs:attribute> 
569 
        <xs:attribute name="IsSideways" type="ST_Boolean" default="false"> 
570 
            </xs:attribute> 
571 
        <xs:attribute name="Indices" type="ST_Indices"> 
572 
            </xs:attribute> 
573 
        <xs:attribute name="UnicodeString" type="ST_UnicodeString"> 
574 
            </xs:attribute> 
575 
        <xs:attribute name="StyleSimulations" type="ST_StyleSimulations" 
576 
default="None"> 
577 
            </xs:attribute> 
578 
        <xs:attribute name="RenderTransform" type="ST_RscRefMatrix"> 
579 
            </xs:attribute> 
580 
        <xs:attribute name="Clip" type="ST_RscRefAbbrGeomF"> 
581 
            </xs:attribute> 
582 
        <xs:attribute name="Opacity" type="ST_ZeroOne" default="1.0"> 
583 
            </xs:attribute> 
584 
        <xs:attribute name="OpacityMask" type="ST_RscRef"> 
585 
            </xs:attribute> 
586 
        <xs:attribute name="Name" type="ST_Name"> 
587 
            </xs:attribute> 
588 
        <xs:attribute name="FixedPage.NavigateUri" type="xs:anyURI"> 
589 
            </xs:attribute> 
590 
        <xs:attribute ref="xml:lang"> 
591 
            </xs:attribute> 
592 
        <xs:attribute ref="x:Key" /> 
593 
    </xs:attributeGroup> 
594 
 
595 

A. Schemas – W3C XML 
ECMA-388 
340 
First Edition, June 2009 
    <xs:attributeGroup name="AG_Path"> 
596 
        <xs:attribute name="Data" type="ST_RscRefAbbrGeomF"> 
597 
            </xs:attribute> 
598 
        <xs:attribute name="Fill" type="ST_RscRefColor"> 
599 
            </xs:attribute> 
600 
        <xs:attribute name="RenderTransform" type="ST_RscRefMatrix"> 
601 
            </xs:attribute> 
602 
        <xs:attribute name="Clip" type="ST_RscRefAbbrGeomF"> 
603 
            </xs:attribute> 
604 
        <xs:attribute name="Opacity" type="ST_ZeroOne" default="1.0"> 
605 
            </xs:attribute> 
606 
        <xs:attribute name="OpacityMask" type="ST_RscRef"> 
607 
            </xs:attribute> 
608 
        <xs:attribute name="Stroke" type="ST_RscRefColor"> 
609 
            </xs:attribute> 
610 
        <xs:attribute name="StrokeDashArray" type="ST_EvenArrayPos"> 
611 
            </xs:attribute> 
612 
        <xs:attribute name="StrokeDashCap" type="ST_DashCap" default="Flat"> 
613 
            </xs:attribute> 
614 
        <xs:attribute name="StrokeDashOffset" type="ST_Double" default="0.0"> 
615 
            </xs:attribute> 
616 
        <xs:attribute name="StrokeEndLineCap" type="ST_LineCap" default="Flat"> 
617 
            </xs:attribute> 
618 
        <xs:attribute name="StrokeStartLineCap" type="ST_LineCap" default="Flat"> 
619 
            </xs:attribute> 
620 
        <xs:attribute name="StrokeLineJoin" type="ST_LineJoin" default="Miter"> 
621 
            </xs:attribute> 
622 
        <xs:attribute name="StrokeMiterLimit" type="ST_GEOne" default="10.0"> 
623 
            </xs:attribute> 
624 
        <xs:attribute name="StrokeThickness" type="ST_GEZero" default="1.0"> 
625 
            </xs:attribute> 
626 
        <xs:attribute name="Name" type="ST_Name"> 
627 
            </xs:attribute> 
628 
        <xs:attribute name="FixedPage.NavigateUri" type="xs:anyURI"> 
629 
            </xs:attribute> 
630 
        <xs:attribute ref="xml:lang"> 
631 
            </xs:attribute> 
632 
        <xs:attribute ref="x:Key" /> 
633 
    </xs:attributeGroup> 
634 
 
635 
    <xs:attributeGroup name="AG_PathFigure"> 
636 
        <xs:attribute name="IsClosed" type="ST_Boolean" default="false"> 
637 
            </xs:attribute> 
638 
        <xs:attribute name="StartPoint" type="ST_Point" use="required"> 
639 
            </xs:attribute> 
640 
        <xs:attribute name="IsFilled" type="ST_Boolean" default="true"> 
641 
            </xs:attribute> 
642 
    </xs:attributeGroup> 
643 
 
644 
    <xs:attributeGroup name="AG_Canvas"> 
645 
        <xs:attribute name="RenderTransform" type="ST_RscRefMatrix"> 
646 
            </xs:attribute> 
647 
        <xs:attribute name="Clip" type="ST_RscRefAbbrGeomF"> 
648 
            </xs:attribute> 
649 
        <xs:attribute name="Opacity" type="ST_ZeroOne" default="1.0"> 
650 

ECMA-388 
A. Schemas – W3C XML 
 
 First Edition, June 2009 
341 
            </xs:attribute> 
651 
        <xs:attribute name="OpacityMask" type="ST_RscRef"> 
652 
            </xs:attribute> 
653 
        <xs:attribute name="Name" type="ST_Name"> 
654 
            </xs:attribute> 
655 
        <xs:attribute name="RenderOptions.EdgeMode" type="ST_EdgeMode"> 
656 
            </xs:attribute> 
657 
        <xs:attribute name="FixedPage.NavigateUri" type="xs:anyURI"> 
658 
            </xs:attribute> 
659 
        <xs:attribute ref="xml:lang"> 
660 
            </xs:attribute> 
661 
        <xs:attribute ref="x:Key" /> 
662 
    </xs:attributeGroup> 
663 
 
664 
    <xs:attributeGroup name="AG_PageContent"> 
665 
        <xs:attribute name="Source" type="xs:anyURI" use="required"> 
666 
            </xs:attribute> 
667 
        <xs:attribute name="Width" type="ST_GEOne"> 
668 
            </xs:attribute> 
669 
        <xs:attribute name="Height" type="ST_GEOne"> 
670 
            </xs:attribute> 
671 
    </xs:attributeGroup> 
672 
 
673 
    <xs:attributeGroup name="AG_LinkTarget"> 
674 
        <xs:attribute name="Name" type="ST_NUName" use="required"> 
675 
            </xs:attribute> 
676 
    </xs:attributeGroup> 
677 
 
678 
    <xs:attributeGroup name="AG_DocumentReference"> 
679 
        <xs:attribute name="Source" type="xs:anyURI" use="required"> 
680 
            </xs:attribute> 
681 
    </xs:attributeGroup> 
682 
 
683 
    <xs:attributeGroup name="AG_MatrixTransform"> 
684 
        <xs:attribute name="Matrix" type="ST_Matrix" use="required"> 
685 
            </xs:attribute> 
686 
        <xs:attribute ref="x:Key" /> 
687 
    </xs:attributeGroup> 
688 
 
689 
    <xs:attributeGroup name="AG_FixedPage"> 
690 
        <xs:attribute name="Width" type="ST_GEOne" use="required"> 
691 
            </xs:attribute> 
692 
        <xs:attribute name="Height" type="ST_GEOne" use="required"> 
693 
            </xs:attribute> 
694 
        <xs:attribute name="ContentBox" type="ST_ContentBox"> 
695 
            </xs:attribute> 
696 
        <xs:attribute name="BleedBox" type="ST_BleedBox"> 
697 
            </xs:attribute> 
698 
        <xs:attribute ref="xml:lang" use="required"> 
699 
            </xs:attribute> 
700 
        <xs:attribute name="Name" type="ST_Name"> 
701 
            </xs:attribute> 
702 
    </xs:attributeGroup> 
703 
 
704 
    <xs:attributeGroup name="AG_AutomationProvider"> 
705 

A. Schemas – W3C XML 
ECMA-388 
342 
First Edition, June 2009 
        <xs:attribute name="AutomationProperties.Name" type="xs:string"> 
706 
            </xs:attribute> 
707 
        <xs:attribute name="AutomationProperties.HelpText" type="xs:string"> 
708 
            </xs:attribute> 
709 
    </xs:attributeGroup> 
710 
 
711 
    <xs:attributeGroup name="AG_SnapsToDevicePixels"> 
712 
        <xs:attribute name="SnapsToDevicePixels" type="ST_Boolean"> 
713 
            </xs:attribute> 
714 
    </xs:attributeGroup> 
715 
 
716 
    <!-- Simple data types --> 
717 
    <!-- A unique Name (ID with pattern restriction according to OpenXPS spec) --> 
718 
    <xs:simpleType name="ST_Name"> 
719 
        <xs:restriction base="xs:ID"> 
720 
            <xs:pattern 
721 
value="(\p{Lu}|\p{Ll}|\p{Lt}|\p{Lo}|\p{Nl}|_)(\p{Lu}|\p{Ll}|\p{Lt}|\p{Lo}|\p{Nl}|\p{Mn}
722 
|\p{Mc}|\p{Nd}|_)*" /> 
723 
        </xs:restriction> 
724 
    </xs:simpleType> 
725 
 
726 
    <!-- A non-unique Name (ID with pattern restriction according to OpenXPS spec) --> 
727 
    <xs:simpleType name="ST_NUName"> 
728 
        <xs:restriction base="xs:string"> 
729 
            <xs:pattern 
730 
value="(\p{Lu}|\p{Ll}|\p{Lt}|\p{Lo}|\p{Nl}|_)(\p{Lu}|\p{Ll}|\p{Lt}|\p{Lo}|\p{Nl}|\p{Mn}
731 
|\p{Mc}|\p{Nd}|_)*" /> 
732 
        </xs:restriction> 
733 
    </xs:simpleType> 
734 
 
735 
    <!-- Boolean with true and false only (no 0 or 1) --> 
736 
    <xs:simpleType name="ST_Boolean"> 
737 
        <xs:restriction base="xs:boolean"> 
738 
            <xs:pattern value="true|false" /> 
739 
        </xs:restriction> 
740 
    </xs:simpleType> 
741 
 
742 
    <!-- real number from 0.0 to 1.0 inclusive --> 
743 
    <xs:simpleType name="ST_ZeroOne"> 
744 
        <xs:restriction base="ST_Double"> 
745 
            <xs:minInclusive value="0.0" /> 
746 
            <xs:maxInclusive value="1.0" /> 
747 
        </xs:restriction> 
748 
    </xs:simpleType> 
749 
 
750 
    <!-- positive real number --> 
751 
    <xs:simpleType name="ST_GEZero"> 
752 
        <xs:restriction base="ST_Double"> 
753 
            <xs:minInclusive value="0.0" /> 
754 
        </xs:restriction> 
755 
    </xs:simpleType> 
756 
 
757 
    <!-- positive real number, equal or greater than one --> 
758 
    <xs:simpleType name="ST_GEOne"> 
759 
        <xs:restriction base="ST_Double"> 
760 

ECMA-388 
A. Schemas – W3C XML 
 
 First Edition, June 2009 
343 
            <xs:minInclusive value="1.0" /> 
761 
        </xs:restriction> 
762 
    </xs:simpleType> 
763 
 
764 
    <!-- Double --> 
765 
    <xs:simpleType name="ST_Double"> 
766 
        <xs:restriction base="xs:double"> 
767 
            <xs:whiteSpace value="collapse" /> 
768 
<!-- 
769 
            <xs:pattern value="[rn]"/> 
770 
--> 
771 
            <xs:pattern value="((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-
772 
|\+)?[0-9]+)?)" /> 
773 
        </xs:restriction> 
774 
    </xs:simpleType> 
775 
 
776 
    <!-- Point: 2 numbers, separated by , and arbitrary whitespace --> 
777 
    <xs:simpleType name="ST_Point"> 
778 
        <xs:restriction base="xs:string"> 
779 
            <xs:whiteSpace value="collapse" /> 
780 
<!-- 
781 
            <xs:pattern value="[rn][scs][rn]"/> 
782 
--> 
783 
            <xs:pattern value="((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-
784 
|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)" 
785 
/> 
786 
        </xs:restriction> 
787 
    </xs:simpleType> 
788 
 
789 
    <!-- PointGE0: 2 non-negative numbers, separated by , and arbitrary whitespace --> 
790 
    <xs:simpleType name="ST_PointGE0"> 
791 
        <xs:restriction base="xs:string"> 
792 
            <xs:whiteSpace value="collapse" /> 
793 
<!-- 
794 
            <xs:pattern value="[prn][scs][prn]"/> 
795 
--> 
796 
            <xs:pattern value="(\+?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-
797 
9]+)?)( ?, ?)(\+?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)" /> 
798 
        </xs:restriction> 
799 
    </xs:simpleType> 
800 
 
801 
    <!-- Points: List of ST_Point, separated by arbitrary whitespace --> 
802 
    <xs:simpleType name="ST_Points"> 
803 
        <xs:restriction base="xs:string"> 
804 
            <xs:whiteSpace value="collapse" /> 
805 
<!-- 
806 
            <xs:pattern value="[rn][scs][rn]( [rn][scs][rn])*"/> 
807 
--> 
808 
            <xs:pattern value="((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-
809 
|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( 
810 
((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-
811 
9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?))*" /> 
812 
        </xs:restriction> 
813 
    </xs:simpleType> 
814 
 
815 

A. Schemas – W3C XML 
ECMA-388 
344 
First Edition, June 2009 
    <!-- PointsM2: List of ST_Point, separated by arbitrary whitespace with a multiple 
816 
of 2 point count -->  
817 
    <xs:simpleType name="ST_PointsM2"> 
818 
      <xs:restriction base="xs:string"> 
819 
        <xs:whiteSpace value="collapse" /> 
820 
<!-- 
821 
            <xs:pattern value="[rn][scs][rn] [rn][scs][rn](( [rn][scs][rn]){2})*"/> 
822 
--> 
823 
        <xs:pattern value="((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-
824 
9]+)?)( ?, ?)((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?) ((\-
825 
|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-
826 
9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)(( ((\-|\+)?(([0-9]+(\.[0-
827 
9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-
828 
9]+))((e|E)(\-|\+)?[0-9]+)?)){2})*" /> 
829 
    </xs:restriction> 
830 
  </xs:simpleType> 
831 
 
832 
  <!-- PointsM3: List of ST_Point, separated by arbitrary whitespace with a multiple of 
833 
3 point count --> 
834 
  <xs:simpleType name="ST_PointsM3"> 
835 
    <xs:restriction base="xs:string"> 
836 
      <xs:whiteSpace value="collapse" /> 
837 
      <!-- 
838 
            <xs:pattern value="[rn][scs][rn]( [rn][scs][rn]){2}(( 
839 
[rn][scs][rn]){3})*"/> 
840 
--> 
841 
      <xs:pattern value="((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-
842 
9]+)?)( ?, ?)((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ((\-
843 
|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-
844 
9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)){2}(( ((\-|\+)?(([0-9]+(\.[0-
845 
9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-
846 
9]+))((e|E)(\-|\+)?[0-9]+)?)){3})*" /> 
847 
    </xs:restriction> 
848 
  </xs:simpleType> 
849 
 
850 
    <!-- EvenArray: List with even number of entries of non-negative numbers.   --> 
851 
    <xs:simpleType name="ST_EvenArrayPos"> 
852 
        <xs:restriction base="xs:string"> 
853 
            <xs:whiteSpace value="collapse" /> 
854 
<!-- 
855 
            <xs:pattern value="[prn] [prn]( [prn] [prn])*"/> 
856 
--> 
857 
            <xs:pattern value="(\+?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-
858 
9]+)?) (\+?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( (\+?(([0-9]+(\.[0-
859 
9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?) (\+?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-
860 
|\+)?[0-9]+)?))*" /> 
861 
        </xs:restriction> 
862 
    </xs:simpleType> 
863 
 
864 
    <!-- Array: List of numbers.  --> 
865 
    <xs:simpleType name="ST_Array"> 
866 
        <xs:restriction base="xs:string"> 
867 
            <xs:whiteSpace value="collapse" /> 
868 
<!-- 
869 
            <xs:pattern value="([rn] ?)*"/> 
870 

ECMA-388 
A. Schemas – W3C XML 
 
 First Edition, June 2009 
345 
--> 
871 
            <xs:pattern value="(((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-
872 
|\+)?[0-9]+)?) ?)*" /> 
873 
        </xs:restriction> 
874 
    </xs:simpleType> 
875 
 
876 
    <!-- ViewBox: 4 numbers, separated by , and arbitrary whitespace. Second number 
877 
pair must be non-negative --> 
878 
    <xs:simpleType name="ST_ViewBox"> 
879 
        <xs:restriction base="xs:string"> 
880 
            <xs:whiteSpace value="collapse" /> 
881 
<!-- 
882 
            <xs:pattern value="[rn][scs][rn][scs][prn][scs][prn]"/> 
883 
--> 
884 
            <xs:pattern value="((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-
885 
|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( 
886 
?, ?)(\+?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)(\+?(([0-
887 
9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)" /> 
888 
        </xs:restriction> 
889 
    </xs:simpleType> 
890 
 
891 
    <!-- ContentBox: 4 non-negative numbers, separated by commas and arbitrary 
892 
whitespace --> 
893 
    <xs:simpleType name="ST_ContentBox"> 
894 
        <xs:restriction base="xs:string"> 
895 
            <xs:whiteSpace value="collapse" /> 
896 
<!-- 
897 
            <xs:pattern value="[prn][scs][prn][scs][prn][scs][prn]"/> 
898 
--> 
899 
            <xs:pattern value="(\+?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-
900 
9]+)?)( ?, ?)(\+?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, 
901 
?)(\+?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)(\+?(([0-9]+(\.[0-
902 
9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)" /> 
903 
        </xs:restriction> 
904 
    </xs:simpleType> 
905 
 
906 
    <!-- BleedBox: 4 numbers, separated by , and arbitrary whitespace. Second number 
907 
pair must be non-negative --> 
908 
        <xs:simpleType name="ST_BleedBox"> 
909 
        <xs:restriction base="xs:string"> 
910 
            <xs:whiteSpace value="collapse" /> 
911 
<!-- 
912 
            <xs:pattern value="[rn][scs][rn][scs][prn][scs][prn]"/> 
913 
--> 
914 
            <xs:pattern value="((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-
915 
|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( 
916 
?, ?)(\+?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)(\+?(([0-
917 
9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)" /> 
918 
        </xs:restriction> 
919 
    </xs:simpleType> 
920 
 
921 
    <!-- Bare Matrix form: 6 numbers separated by , and arbitrary whitespace --> 
922 
    <xs:simpleType name="ST_Matrix"> 
923 
        <xs:restriction base="xs:string"> 
924 
            <xs:whiteSpace value="collapse" /> 
925 

A. Schemas – W3C XML 
ECMA-388 
346 
First Edition, June 2009 
<!-- 
926 
            <xs:pattern value="[rn][scs][rn][scs][rn][scs][rn][scs][rn][scs][rn]"/> 
927 
--> 
928 
            <xs:pattern value="((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-
929 
|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( 
930 
?, ?)((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-
931 
|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-
932 
9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-9]+(\.[0-
933 
9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)" /> 
934 
        </xs:restriction> 
935 
    </xs:simpleType> 
936 
 
937 
    <!-- Color: 6 or 8 hex digits --> 
938 
    <xs:simpleType name="ST_Color"> 
939 
        <xs:restriction base="xs:string"> 
940 
            <!-- The pattern restriction does not check for scRGB gamut --> 
941 
            <!-- The pattern restriction does not check for color profile URI validity 
942 
--> 
943 
            <xs:whiteSpace value="collapse" /> 
944 
<!-- 
945 
            <xs:pattern value="(#([0-9a-fA-F]{2})?[0-9a-fA-F]{6})|\ 
946 
                                (sc# ?[dec][scs][dec][scs][dec]([scs][dec])?)|\ 
947 
                                (ContextColor [\S]+ [dec]([scs][dec]){1,8})"/> 
948 
--> 
949 
            <xs:pattern value="(#([0-9a-fA-F]{2})?[0-9a-fA-F]{6})|(sc# ?(\-?(([0-
950 
9]+(\.[0-9]+)?)|(\.[0-9]+)))( ?, ?)(\-?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+)))( ?, ?)(\-
951 
?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+)))(( ?, ?)(\-?(([0-9]+(\.[0-9]+)?)|(\.[0-
952 
9]+))))?)|(ContextColor +[\S]+ ?(\-?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+)))(( ?, ?)(\-?(([0-
953 
9]+(\.[0-9]+)?)|(\.[0-9]+)))){3,8})" /> 
954 
        </xs:restriction> 
955 
    </xs:simpleType> 
956 
 
957 
    <!-- Indices grammar for Glyphs.CaretStops --> 
958 
    <xs:simpleType name="ST_CaretStops"> 
959 
        <xs:restriction base="xs:string"> 
960 
            <xs:whiteSpace value="collapse" /> 
961 
            <xs:pattern value="[0-9A-Fa-f]*" /> 
962 
        </xs:restriction> 
963 
    </xs:simpleType> 
964 
 
965 
    <!-- Indices grammar for Glyphs.Indices --> 
966 
    <xs:simpleType name="ST_Indices"> 
967 
        <xs:restriction base="xs:string"> 
968 
            <xs:whiteSpace value="collapse" /> 
969 
<!-- 
970 
            <xs:pattern value="(\ 
971 
                                ((\([pint](:[pint])?\))?[uint])?\ 
972 
                                (,[prn]?(,[rn]?(,[rn])?)?)?\ 
973 
                                )\ 
974 
                                (;\ 
975 
                                    ((\([pint](:[pint])?\))?[uint])?\ 
976 
                                    (,[prn]?(,[rn]?(,[rn])?)?)?\ 
977 
                                )*" /> 
978 
--> 
979 

ECMA-388 
A. Schemas – W3C XML 
 
 First Edition, June 2009 
347 
            <xs:pattern value="(((\(([1-9][0-9]*)(:([1-9][0-9]*))?\))?([0-
980 
9]+))?(,(\+?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)?(,((\-|\+)?(([0-
981 
9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)?(,((\-|\+)?(([0-9]+(\.[0-
982 
9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?))?)?)?)(;((\(([1-9][0-9]*)(:([1-9][0-
983 
9]*))?\))?([0-9]+))?(,(\+?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-
984 
9]+)?)?(,((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)?(,((\-
985 
|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?))?)?)?)*" /> 
986 
        </xs:restriction> 
987 
    </xs:simpleType> 
988 
 
989 
    <!-- UnicodeString grammar --> 
990 
    <xs:simpleType name="ST_UnicodeString"> 
991 
        <xs:restriction base="xs:string"> 
992 
            <xs:pattern value="(([^\{]|(\{\}))(.|[\r\n])*)?" /> 
993 
        </xs:restriction> 
994 
    </xs:simpleType> 
995 
 
996 
    <!-- Abbreviated Geometry grammar for Path.Data , clip and Geometries --> 
997 
    <xs:simpleType name="ST_AbbrGeomF"> 
998 
        <xs:restriction base="xs:string"> 
999 
            <xs:whiteSpace value="collapse" /> 
1000 
<!-- 
1001 
            <xs:pattern value="(F ?(0|1))?\ 
1002 
                                ( ?(M|m)( ?[rn][scs][rn]))\ 
1003 
                                (\ 
1004 
                                    ( ?(M|m)( ?[rn][scs][rn]))|\ 
1005 
                                    ( ?(L|l)( ?[rn][scs][rn])( [rn][scs][rn])*)|\ 
1006 
                                    ( ?(H|h|V|v)( ?[rn])( [rn])*)|\ 
1007 
                                    ( ?(Q|q|S|s)( ?[rn][scs][rn] [rn][scs][rn])(( 
1008 
[rn][scs][rn]){2})*)|\ 
1009 
                                    ( ?(C|c)( ?[rn][scs][rn]( [rn][scs][rn]){2})(( 
1010 
[rn][scs][rn]){3})*)|\ 
1011 
                                    ( ?(A|a)( ?[rn][scs][rn] [rn] [0-1] [0-1] 
1012 
[rn][scs][rn])\ 
1013 
                                                    ( [rn][scs][rn] [rn] [0-1] [0-1] 
1014 
[rn][scs][rn])*)|\ 
1015 
                                    ( ?(Z|z))\ 
1016 
                                )*"/> 
1017 
--> 
1018 
            <xs:pattern value="(F ?(0|1))?( ?(M|m)( ?((\-|\+)?(([0-9]+(\.[0-
1019 
9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-
1020 
9]+))((e|E)(\-|\+)?[0-9]+)?)))(( ?(M|m)( ?((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-
1021 
9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-
1022 
|\+)?[0-9]+)?)))|( ?(L|l)( ?((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-
1023 
9]+)?)( ?, ?)((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?))( ((\-
1024 
|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-
1025 
9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?))*)|( ?(H|h|V|v)( ?((\-|\+)?(([0-
1026 
9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?))( ((\-|\+)?(([0-9]+(\.[0-
1027 
9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?))*)|( ?(Q|q|S|s)( ?((\-|\+)?(([0-9]+(\.[0-
1028 
9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-
1029 
9]+))((e|E)(\-|\+)?[0-9]+)?) ((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-
1030 
9]+)?)( ?, ?)((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?))(( ((\-
1031 
|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-
1032 
9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)){2})*)|( ?(C|c)( ?((\-|\+)?(([0-
1033 
9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-9]+(\.[0-
1034 

A. Schemas – W3C XML 
ECMA-388 
348 
First Edition, June 2009 
9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-
1035 
9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-
1036 
|\+)?[0-9]+)?)){2})(( ((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( 
1037 
?, ?)((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)){3})*)|( ?(A|a)( 
1038 
?((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-
1039 
9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?) ((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-
1040 
9]+))((e|E)(\-|\+)?[0-9]+)?) [0-1] [0-1] ((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-
1041 
9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-
1042 
|\+)?[0-9]+)?))( ((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, 
1043 
?)((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?) ((\-|\+)?(([0-
1044 
9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?) [0-1] [0-1] ((\-|\+)?(([0-9]+(\.[0-
1045 
9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-
1046 
9]+))((e|E)(\-|\+)?[0-9]+)?))*)|( ?(Z|z)))*" /> 
1047 
        </xs:restriction> 
1048 
    </xs:simpleType> 
1049 
 
1050 
    <!-- Abbreviated Geometry grammar for PatGeometry.Figures --> 
1051 
    <xs:simpleType name="ST_AbbrGeom"> 
1052 
        <xs:restriction base="xs:string"> 
1053 
            <xs:whiteSpace value="collapse" /> 
1054 
<!-- 
1055 
            <xs:pattern value="( ?(M|m)( ?[rn][scs][rn]))\ 
1056 
                                (\ 
1057 
                                    ( ?(M|m)( ?[rn][scs][rn]))|\ 
1058 
                                    ( ?(L|l)( ?[rn][scs][rn])( [rn][scs][rn])*)|\ 
1059 
                                    ( ?(H|h|V|v)( ?[rn])( [rn])*)|\ 
1060 
                                    ( ?(Q|q|S|s)( ?[rn][scs][rn] [rn][scs][rn])(( 
1061 
[rn][scs][rn]){2})*)|\ 
1062 
                                    ( ?(C|c)( ?[rn][scs][rn]( [rn][scs][rn]){2})(( 
1063 
[rn][scs][rn]){3})*)|\ 
1064 
                                    ( ?(A|a)( ?[rn][scs][rn] [rn] [0-1] [0-1] 
1065 
[rn][scs][rn])\ 
1066 
                                                    ( [rn][scs][rn] [rn] [0-1] [0-1] 
1067 
[rn][scs][rn])*)|\ 
1068 
                                    ( ?(Z|z))\ 
1069 
                                )*"/> 
1070 
--> 
1071 
            <xs:pattern value="( ?(M|m)( ?((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-
1072 
9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-
1073 
|\+)?[0-9]+)?)))(( ?(M|m)( ?((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-
1074 
9]+)?)( ?, ?)((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)))|( 
1075 
?(L|l)( ?((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-
1076 
|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?))( ((\-|\+)?(([0-9]+(\.[0-
1077 
9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-
1078 
9]+))((e|E)(\-|\+)?[0-9]+)?))*)|( ?(H|h|V|v)( ?((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-
1079 
9]+))((e|E)(\-|\+)?[0-9]+)?))( ((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-
1080 
|\+)?[0-9]+)?))*)|( ?(Q|q|S|s)( ?((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-
1081 
|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?) 
1082 
((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-
1083 
9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?))(( ((\-|\+)?(([0-9]+(\.[0-
1084 
9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-
1085 
9]+))((e|E)(\-|\+)?[0-9]+)?)){2})*)|( ?(C|c)( ?((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-
1086 
9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-
1087 
|\+)?[0-9]+)?)( ((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, 
1088 
?)((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)){2})(( ((\-
1089 

ECMA-388 
A. Schemas – W3C XML 
 
 First Edition, June 2009 
349 
|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-
1090 
9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)){3})*)|( ?(A|a)( ?((\-|\+)?(([0-
1091 
9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-9]+(\.[0-
1092 
9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?) ((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-
1093 
9]+))((e|E)(\-|\+)?[0-9]+)?) [0-1] [0-1] ((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-
1094 
9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-
1095 
|\+)?[0-9]+)?))( ((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, 
1096 
?)((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?) ((\-|\+)?(([0-
1097 
9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?) [0-1] [0-1] ((\-|\+)?(([0-9]+(\.[0-
1098 
9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-
1099 
9]+))((e|E)(\-|\+)?[0-9]+)?))*)|( ?(Z|z)))*" /> 
1100 
        </xs:restriction> 
1101 
    </xs:simpleType> 
1102 
 
1103 
    <!-- Image reference via Uri --> 
1104 
    <xs:simpleType name="ST_UriImage"> 
1105 
        <xs:restriction base="xs:anyURI"> 
1106 
            <xs:pattern value="([^\{].*)?" /> 
1107 
        </xs:restriction> 
1108 
    </xs:simpleType> 
1109 
 
1110 
    <!-- Image reference via ColorConvertedBitmap --> 
1111 
    <xs:simpleType name="ST_CtxBmpImage"> 
1112 
        <xs:restriction base="xs:string"> 
1113 
            <xs:pattern value="\{ColorConvertedBitmap[\s]+[\S]+[\s]+[\S]+\}[\s]*" /> 
1114 
        </xs:restriction> 
1115 
    </xs:simpleType> 
1116 
 
1117 
    <!-- Image reference via Uri or ColorConvertedBitmap --> 
1118 
    <xs:simpleType name="ST_UriCtxBmp"> 
1119 
        <xs:union memberTypes="ST_UriImage ST_CtxBmpImage" /> 
1120 
    </xs:simpleType> 
1121 
 
1122 
    <!-- Resource reference --> 
1123 
    <xs:simpleType name="ST_RscRef"> 
1124 
        <xs:restriction base="xs:string"> 
1125 
            <xs:pattern value="\{StaticResource[\s]+[\S]+\}[\s]*" /> 
1126 
        </xs:restriction> 
1127 
    </xs:simpleType> 
1128 
 
1129 
    <!-- Resource reference OR Color --> 
1130 
    <xs:simpleType name="ST_RscRefColor"> 
1131 
        <xs:union memberTypes="ST_Color ST_RscRef" /> 
1132 
    </xs:simpleType> 
1133 
 
1134 
    <!-- Resource reference OR Compact Matrix--> 
1135 
    <xs:simpleType name="ST_RscRefMatrix"> 
1136 
        <xs:union memberTypes="ST_Matrix ST_RscRef" /> 
1137 
    </xs:simpleType> 
1138 
 
1139 
    <!-- Resource reference OR AbbrGeomF--> 
1140 
    <xs:simpleType name="ST_RscRefAbbrGeomF"> 
1141 
        <xs:union memberTypes="ST_AbbrGeomF ST_RscRef" /> 
1142 
    </xs:simpleType> 
1143 
 
1144 

A. Schemas – W3C XML 
ECMA-388 
350 
First Edition, June 2009 
    <!-- Sweep Direction enumeration --> 
1145 
    <xs:simpleType name="ST_SweepDirection"> 
1146 
        <xs:restriction base="xs:string"> 
1147 
            <xs:enumeration value="Clockwise" /> 
1148 
            <xs:enumeration value="Counterclockwise" /> 
1149 
        </xs:restriction> 
1150 
    </xs:simpleType> 
1151 
 
1152 
    <!-- Dash Cap enumeration --> 
1153 
    <xs:simpleType name="ST_DashCap"> 
1154 
        <xs:restriction base="xs:string"> 
1155 
            <xs:enumeration value="Flat" /> 
1156 
            <xs:enumeration value="Round" /> 
1157 
            <xs:enumeration value="Square" /> 
1158 
            <xs:enumeration value="Triangle" /> 
1159 
        </xs:restriction> 
1160 
    </xs:simpleType> 
1161 
 
1162 
    <!-- Line Cap enumeration --> 
1163 
    <xs:simpleType name="ST_LineCap"> 
1164 
        <xs:restriction base="xs:string"> 
1165 
            <xs:enumeration value="Flat" /> 
1166 
            <xs:enumeration value="Round" /> 
1167 
            <xs:enumeration value="Square" /> 
1168 
            <xs:enumeration value="Triangle" /> 
1169 
        </xs:restriction> 
1170 
    </xs:simpleType> 
1171 
 
1172 
    <!-- Line Join enumeration --> 
1173 
    <xs:simpleType name="ST_LineJoin"> 
1174 
        <xs:restriction base="xs:string"> 
1175 
            <xs:enumeration value="Miter" /> 
1176 
            <xs:enumeration value="Bevel" /> 
1177 
            <xs:enumeration value="Round" /> 
1178 
        </xs:restriction> 
1179 
    </xs:simpleType> 
1180 
 
1181 
    <!-- Tile Mode enumeration --> 
1182 
    <xs:simpleType name="ST_TileMode"> 
1183 
        <xs:restriction base="xs:string"> 
1184 
            <xs:enumeration value="None" /> 
1185 
            <xs:enumeration value="Tile" /> 
1186 
            <xs:enumeration value="FlipX" /> 
1187 
            <xs:enumeration value="FlipY" /> 
1188 
            <xs:enumeration value="FlipXY" /> 
1189 
        </xs:restriction> 
1190 
    </xs:simpleType> 
1191 
 
1192 
    <!-- Color Interpolation Mode enumeration --> 
1193 
    <xs:simpleType name="ST_ClrIntMode"> 
1194 
        <xs:restriction base="xs:string"> 
1195 
            <xs:enumeration value="ScRgbLinearInterpolation" /> 
1196 
            <xs:enumeration value="SRgbLinearInterpolation" /> 
1197 
        </xs:restriction> 
1198 
    </xs:simpleType> 
1199 

ECMA-388 
A. Schemas – W3C XML 
 
 First Edition, June 2009 
351 
 
1200 
    <!-- SpreadMethod Mode enumeration --> 
1201 
    <xs:simpleType name="ST_SpreadMethod"> 
1202 
        <xs:restriction base="xs:string"> 
1203 
            <xs:enumeration value="Pad" /> 
1204 
            <xs:enumeration value="Reflect" /> 
1205 
            <xs:enumeration value="Repeat" /> 
1206 
        </xs:restriction> 
1207 
    </xs:simpleType> 
1208 
 
1209 
    <!-- FillRule Mode enumeration --> 
1210 
    <xs:simpleType name="ST_FillRule"> 
1211 
        <xs:restriction base="xs:string"> 
1212 
            <xs:enumeration value="EvenOdd" /> 
1213 
            <xs:enumeration value="NonZero" /> 
1214 
        </xs:restriction> 
1215 
    </xs:simpleType> 
1216 
 
1217 
    <!-- Edge Mode enumeration --> 
1218 
    <xs:simpleType name="ST_EdgeMode"> 
1219 
        <xs:restriction base="xs:string"> 
1220 
            <xs:enumeration value="Aliased" /> 
1221 
        </xs:restriction> 
1222 
    </xs:simpleType> 
1223 
 
1224 
    <!-- Style Simulation Enumeration --> 
1225 
    <xs:simpleType name="ST_StyleSimulations"> 
1226 
        <xs:restriction base="xs:string"> 
1227 
            <xs:enumeration value="None" /> 
1228 
            <xs:enumeration value="ItalicSimulation" /> 
1229 
            <xs:enumeration value="BoldSimulation" /> 
1230 
            <xs:enumeration value="BoldItalicSimulation" /> 
1231 
        </xs:restriction> 
1232 
    </xs:simpleType> 
1233 
 
1234 
    <!-- ViewUnits Enumeration --> 
1235 
    <xs:simpleType name="ST_ViewUnits"> 
1236 
        <xs:restriction base="xs:string"> 
1237 
            <xs:enumeration value="Absolute" /> 
1238 
        </xs:restriction> 
1239 
    </xs:simpleType> 
1240 
 
1241 
    <!-- MappingMode Enumeration --> 
1242 
    <xs:simpleType name="ST_MappingMode"> 
1243 
        <xs:restriction base="xs:string"> 
1244 
            <xs:enumeration value="Absolute" /> 
1245 
        </xs:restriction> 
1246 
    </xs:simpleType> 
1247 
</xs:schema> 
1248 


ECMA-388 
A. Schemas – W3C XML 
 
 First Edition, June 2009 
353 
A.3 
Resource Dictionary Key 
The schema shown below is also provided in electronic form as a file named 
OpenXPSResourceDictionaryKey.xsd, which is contained in an accompanying zip archive named 
"OpenXPS WC3 Schemas.zip". If discrepancies exist between the representation as published 
below and the corresponding electronic version, the published version below is the definitive 
version. 
 
<?xml version="1.0" encoding="utf-8"?> 
1 
<xs:schema targetNamespace="http://schemas.openxps.org/oxps/v1.0/resourcedictionary-
2 
key" xmlns="http://schemas.openxps.org/oxps/v1.0/resourcedictionary-key" 
3 
xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" 
4 
blockDefault="#all"> 
5 
             
6 
  <xs:attribute name="Key"> 
7 
    <xs:simpleType> 
8 
      <xs:restriction base="xs:string"> 
9 
        <!-- A Key (pattern restriction according to OpenXPS spec) --> 
10 
        <xs:pattern 
11 
value="(\p{Lu}|\p{Ll}|\p{Lt}|\p{Lo}|\p{Nl}|_)(\p{Lu}|\p{Ll}|\p{Lt}|\p{Lo}|\p{Nl}|\p{Mn}
12 
|\p{Mc}|\p{Nd}|_)*" /> 
13 
      </xs:restriction> 
14 
    </xs:simpleType> 
15 
  </xs:attribute> 
16 
             
17 
</xs:schema> 
18 


ECMA-388 
A. Schemas – W3C XML 
 
 First Edition, June 2009 
355 
A.4 
Document Structure 
The schema shown below is also provided in electronic form as a file named 
OpenXPSDocumentStructure.xsd, which is contained in an accompanying zip archive named 
"OpenXPS WC3 Schemas.zip". If discrepancies exist between the representation as published 
below and the corresponding electronic version, the published version below is the definitive 
version. 
 
<?xml version="1.0" encoding="UTF-8"?><xs:schema 
1 
targetNamespace="http://schemas.openxps.org/oxps/v1.0/documentstructure" 
2 
xmlns="http://schemas.openxps.org/oxps/v1.0/documentstructure" 
3 
xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" 
4 
blockDefault="#all"> 
5 
 
6 
 
<xs:import namespace="http://www.w3.org/XML/1998/namespace" /> 
7 
 
8 
 
<!-- ============DocumentStructure Part================ --> 
9 
 
<!-- Complex Types --> 
10 
 
<xs:complexType name="CT_DocumentStructure"> 
11 
 
 
<xs:sequence> 
12 
 
 
 
<xs:element ref="DocumentStructure.Outline" minOccurs="0" /> 
13 
 
 
 
<xs:element ref="Story" minOccurs="0" maxOccurs="unbounded" /> 
14 
 
 
</xs:sequence> 
15 
 
</xs:complexType> 
16 
 
<xs:complexType name="CT_CP_Outline"> 
17 
  
 
<xs:sequence> 
18 
  
 
 
<xs:element ref="DocumentOutline" /> 
19 
  
 
</xs:sequence> 
20 
  
</xs:complexType> 
21 
 
<xs:complexType name="CT_DocumentOutline"> 
22 
 
 
<xs:sequence> 
23 
 
 
 
<xs:element ref="OutlineEntry" maxOccurs="unbounded" /> 
24 
 
 
</xs:sequence> 
25 
 
 
<xs:attributeGroup ref="AG_DocumentOutline" /> 
26 
 
</xs:complexType> 
27 
 
<xs:complexType name="CT_OutlineEntry"> 
28 
 
 
<xs:attributeGroup ref="AG_OutlineEntry" /> 
29 
 
</xs:complexType> 
30 
 
<xs:complexType name="CT_Story"> 
31 
 
 
<xs:sequence> 
32 
 
 
 
<xs:element ref="StoryFragmentReference" maxOccurs="unbounded" /> 
33 
 
 
</xs:sequence> 
34 
 
 
<xs:attributeGroup ref="AG_Story" /> 
35 
 
</xs:complexType> 
36 
 
<xs:complexType name="CT_StoryFragmentReference"> 
37 
 
 
<xs:attributeGroup ref="AG_StoryFragmentReference" /> 
38 
 
</xs:complexType> 
39 
 
<!-- Simple Types --> 
40 
 
<!-- A Name (ID with pattern restriction according to OpenXPS spec) --> 
41 
 
<xs:simpleType name="ST_Name"> 
42 
 
 
<xs:restriction base="xs:string"> 
43 

A. Schemas – W3C XML 
ECMA-388 
356 
First Edition, June 2009 
 
 
 
<xs:pattern 
44 
value="(\p{Lu}|\p{Ll}|\p{Lo}|\p{Lt}|\p{Nl})(\p{Lu}|\p{Ll}|\p{Lo}|\p{Lt}|\p{Nl}|\p{Mn}|\
45 
p{Mc}|\p{Nd}|\p{Lm}|_)*" /> 
46 
 
 
</xs:restriction> 
47 
 
</xs:simpleType> 
48 
 
<!-- A Unique Name (ID with pattern restriction according to OpenXPS spec) --> 
49 
 
<xs:simpleType name="ST_NameUnique"> 
50 
 
 
<xs:restriction base="xs:ID"> 
51 
 
 
 
<xs:pattern 
52 
value="(\p{Lu}|\p{Ll}|\p{Lo}|\p{Lt}|\p{Nl})(\p{Lu}|\p{Ll}|\p{Lo}|\p{Lt}|\p{Nl}|\p{Mn}|\
53 
p{Mc}|\p{Nd}|\p{Lm}|_)*" /> 
54 
 
 
</xs:restriction> 
55 
 
</xs:simpleType> 
56 
 
<!-- integer greater than or equal to 1 inclusive --> 
57 
 
<xs:simpleType name="ST_IntGEOne"> 
58 
 
 
<xs:restriction base="xs:int"> 
59 
 
 
 
<xs:minInclusive value="1" /> 
60 
 
 
</xs:restriction> 
61 
 
</xs:simpleType> 
62 
 
<!-- Elements --> 
63 
 
<xs:element name="DocumentStructure" type="CT_DocumentStructure"> 
64 
 
 
</xs:element> 
65 
 
<xs:element name="DocumentStructure.Outline" type="CT_CP_Outline"> 
66 
 
 
</xs:element> 
67 
 
<xs:element name="DocumentOutline" type="CT_DocumentOutline"> 
68 
 
 
</xs:element> 
69 
 
<xs:element name="OutlineEntry" type="CT_OutlineEntry"> 
70 
 
 
</xs:element> 
71 
 
<xs:element name="Story" type="CT_Story"> 
72 
 
 
</xs:element> 
73 
 
<xs:element name="StoryFragmentReference" type="CT_StoryFragmentReference"> 
74 
 
 
</xs:element> 
75 
 
<!-- Attribute Groups --> 
76 
 
<xs:attributeGroup name="AG_DocumentOutline"> 
77 
 
 
<xs:attribute ref="xml:lang" use="required"> 
78 
 
 
 
</xs:attribute> 
79 
 
</xs:attributeGroup> 
80 
 
<xs:attributeGroup name="AG_OutlineEntry"> 
81 
 
 
<xs:attribute name="OutlineLevel" type="ST_IntGEOne" use="optional" 
82 
default="1"> 
83 
 
 
 
</xs:attribute> 
84 
 
 
<xs:attribute name="OutlineTarget" type="xs:anyURI" use="required"> 
85 
 
 
 
</xs:attribute> 
86 
 
 
<xs:attribute name="Description" type="xs:string" use="required"> 
87 
 
 
 
</xs:attribute> 
88 
 
 
<xs:attribute ref="xml:lang" use="optional"> 
89 
 
 
 
</xs:attribute> 
90 
 
</xs:attributeGroup> 
91 
 
<xs:attributeGroup name="AG_Story"> 
92 
 
 
<xs:attribute name="StoryName" type="xs:string" use="required"> 
93 
 
 
 
</xs:attribute> 
94 
 
</xs:attributeGroup> 
95 
 
<xs:attributeGroup name="AG_StoryFragmentReference"> 
96 
 
 
<xs:attribute name="FragmentName" type="xs:string" use="optional"> 
97 
 
 
 
</xs:attribute> 
98 

ECMA-388 
A. Schemas – W3C XML 
 
 First Edition, June 2009 
357 
 
 
<xs:attribute name="Page" type="ST_IntGEOne" use="required"> 
99 
 
 
 
</xs:attribute> 
100 
 
</xs:attributeGroup> 
101 
 
<!-- ================StoryFragments Part============== --> 
102 
 
<!-- Complex Types --> 
103 
 
<xs:complexType name="CT_StoryFragments"> 
104 
 
 
<xs:sequence> 
105 
 
 
 
<xs:element ref="StoryFragment" maxOccurs="unbounded" /> 
106 
 
 
</xs:sequence> 
107 
 
</xs:complexType> 
108 
 
<xs:complexType name="CT_StoryFragment"> 
109 
 
 
<xs:sequence> 
110 
 
 
 
<xs:element ref="StoryBreak" minOccurs="0" /> 
111 
 
 
 
<xs:choice maxOccurs="unbounded"> 
112 
 
 
 
 
<xs:element ref="SectionStructure" /> 
113 
 
 
 
 
<xs:element ref="ParagraphStructure" /> 
114 
 
 
 
 
<xs:element ref="ListStructure" /> 
115 
 
 
 
 
<xs:element ref="TableStructure" /> 
116 
 
 
 
 
<xs:element ref="FigureStructure" /> 
117 
 
 
 
</xs:choice> 
118 
 
 
 
<xs:element ref="StoryBreak" minOccurs="0" /> 
119 
 
 
</xs:sequence> 
120 
 
 
<xs:attributeGroup ref="AG_StoryFragment" /> 
121 
 
</xs:complexType> 
122 
 
<xs:complexType name="CT_Break"> 
123 
 
 
</xs:complexType> 
124 
 
<xs:complexType name="CT_Section"> 
125 
 
 
<xs:choice maxOccurs="unbounded"> 
126 
 
 
 
<xs:element ref="ParagraphStructure" /> 
127 
 
 
 
<xs:element ref="ListStructure" /> 
128 
 
 
 
<xs:element ref="TableStructure" /> 
129 
 
 
 
<xs:element ref="FigureStructure" /> 
130 
 
 
</xs:choice> 
131 
 
</xs:complexType> 
132 
 
<xs:complexType name="CT_Paragraph"> 
133 
 
 
<xs:choice minOccurs="0" maxOccurs="unbounded"> 
134 
 
 
 
<xs:element ref="NamedElement" /> 
135 
 
 
</xs:choice> 
136 
 
</xs:complexType> 
137 
 
<xs:complexType name="CT_Table"> 
138 
 
 
<xs:choice maxOccurs="unbounded"> 
139 
 
 
 
<xs:element ref="TableRowGroupStructure" /> 
140 
 
 
</xs:choice> 
141 
 
</xs:complexType> 
142 
 
<xs:complexType name="CT_TableRowGroup"> 
143 
 
 
<xs:choice maxOccurs="unbounded"> 
144 
 
 
 
<xs:element ref="TableRowStructure" /> 
145 
 
 
</xs:choice> 
146 
 
</xs:complexType> 
147 
 
<xs:complexType name="CT_TableRow"> 
148 
 
 
<xs:choice maxOccurs="unbounded"> 
149 
 
 
 
<xs:element ref="TableCellStructure" /> 
150 
 
 
</xs:choice> 
151 
 
</xs:complexType> 
152 
 
<xs:complexType name="CT_TableCell"> 
153 

A. Schemas – W3C XML 
ECMA-388 
358 
First Edition, June 2009 
 
 
<xs:choice minOccurs="0" maxOccurs="unbounded"> 
154 
 
 
 
<xs:element ref="ParagraphStructure" /> 
155 
 
 
 
<xs:element ref="ListStructure" /> 
156 
 
 
 
<xs:element ref="TableStructure" /> 
157 
 
 
 
<xs:element ref="FigureStructure" /> 
158 
 
 
</xs:choice> 
159 
 
 
<xs:attributeGroup ref="AG_TableCell" /> 
160 
 
</xs:complexType> 
161 
 
<xs:complexType name="CT_List"> 
162 
 
 
<xs:choice maxOccurs="unbounded"> 
163 
 
 
 
<xs:element ref="ListItemStructure" /> 
164 
 
 
</xs:choice> 
165 
 
</xs:complexType> 
166 
 
<xs:complexType name="CT_ListItem"> 
167 
 
 
<xs:choice minOccurs="0" maxOccurs="unbounded"> 
168 
 
 
 
<xs:element ref="ParagraphStructure" /> 
169 
 
 
 
<xs:element ref="ListStructure" /> 
170 
 
 
 
<xs:element ref="TableStructure" /> 
171 
 
 
 
<xs:element ref="FigureStructure" /> 
172 
 
 
</xs:choice> 
173 
 
 
<xs:attributeGroup ref="AG_ListItem" /> 
174 
 
</xs:complexType> 
175 
 
<xs:complexType name="CT_Figure"> 
176 
 
 
<xs:choice minOccurs="0" maxOccurs="unbounded"> 
177 
 
 
 
<xs:element ref="NamedElement" /> 
178 
 
 
</xs:choice> 
179 
 
</xs:complexType> 
180 
 
<xs:complexType name="CT_NamedElement"> 
181 
 
 
<xs:attributeGroup ref="AG_NamedElement" /> 
182 
 
</xs:complexType> 
183 
 
<!-- Simple Types --> 
184 
 
<!-- FragmentType enumeration --> 
185 
 
<xs:simpleType name="ST_FragmentType"> 
186 
 
 
<xs:restriction base="xs:string"> 
187 
 
 
 
<xs:enumeration value="Content" /> 
188 
 
 
 
<xs:enumeration value="Header" /> 
189 
 
 
 
<xs:enumeration value="Footer" /> 
190 
 
 
</xs:restriction> 
191 
 
</xs:simpleType> 
192 
 
<xs:simpleType name="ST_TableSpan"> 
193 
 
 
<xs:restriction base="xs:int"> 
194 
 
 
 
<xs:minInclusive value="1" /> 
195 
 
 
</xs:restriction> 
196 
 
</xs:simpleType> 
197 
 
<!-- Elements --> 
198 
 
<xs:element name="StoryFragments" type="CT_StoryFragments"> 
199 
 
 
</xs:element> 
200 
 
<xs:element name="StoryFragment" type="CT_StoryFragment"> 
201 
 
 
</xs:element> 
202 
 
<xs:element name="StoryBreak" type="CT_Break"> 
203 
 
 
</xs:element> 
204 
 
<xs:element name="SectionStructure" type="CT_Section"> 
205 
 
 
</xs:element> 
206 
 
<xs:element name="ParagraphStructure" type="CT_Paragraph"> 
207 
 
 
</xs:element> 
208 

ECMA-388 
A. Schemas – W3C XML 
 
 First Edition, June 2009 
359 
 
<xs:element name="TableStructure" type="CT_Table"> 
209 
 
 
</xs:element> 
210 
 
<xs:element name="TableRowGroupStructure" type="CT_TableRowGroup"> 
211 
 
 
</xs:element> 
212 
 
<xs:element name="TableRowStructure" type="CT_TableRow"> 
213 
 
 
</xs:element> 
214 
 
<xs:element name="TableCellStructure" type="CT_TableCell"> 
215 
 
 
</xs:element> 
216 
 
<xs:element name="ListStructure" type="CT_List"> 
217 
 
 
</xs:element> 
218 
 
<xs:element name="ListItemStructure" type="CT_ListItem"> 
219 
 
 
</xs:element> 
220 
 
<xs:element name="FigureStructure" type="CT_Figure"> 
221 
 
 
</xs:element> 
222 
 
<xs:element name="NamedElement" type="CT_NamedElement"> 
223 
 
 
</xs:element> 
224 
 
<!-- Attribute Groups --> 
225 
 
<xs:attributeGroup name="AG_StoryFragment"> 
226 
 
 
<xs:attribute name="StoryName" type="xs:string" use="optional"> 
227 
 
 
 
</xs:attribute> 
228 
 
 
<xs:attribute name="FragmentName" type="xs:string" use="optional"> 
229 
 
 
 
</xs:attribute> 
230 
 
 
<xs:attribute name="FragmentType" type="ST_FragmentType" use="required"> 
231 
 
 
 
</xs:attribute> 
232 
 
</xs:attributeGroup> 
233 
 
<xs:attributeGroup name="AG_TableCell"> 
234 
 
 
<xs:attribute name="RowSpan" type="ST_TableSpan" use="optional" 
235 
default="1"> 
236 
 
 
 
</xs:attribute> 
237 
 
 
<xs:attribute name="ColumnSpan" type="ST_TableSpan" use="optional" 
238 
default="1"> 
239 
 
 
 
</xs:attribute> 
240 
 
</xs:attributeGroup> 
241 
 
<xs:attributeGroup name="AG_ListItem"> 
242 
 
 
<xs:attribute name="Marker" type="ST_NameUnique" use="optional"> 
243 
 
 
 
</xs:attribute> 
244 
 
</xs:attributeGroup> 
245 
 
<xs:attributeGroup name="AG_NamedElement"> 
246 
 
 
<xs:attribute name="NameReference" type="ST_Name" use="required"> 
247 
 
 
 
</xs:attribute> 
248 
 
</xs:attributeGroup> 
249 
</xs:schema> 
250 


ECMA-388 
A. Schemas – W3C XML 
 
 First Edition, June 2009 
361 
A.5 
Discard Control 
The schema shown below is also provided in electronic form as a file named 
OpenXPSDiscardControl.xsd, which is contained in an accompanying zip archive named 
"OpenXPS WC3 Schemas.zip". If discrepancies exist between the representation as published 
below and the corresponding electronic version, the published version below is the definitive 
version. 
 
<?xml version="1.0" encoding="UTF-8"?> 
1 
<xs:schema targetNamespace="http://schemas.openxps.org/oxps/v1.0/discard-control" 
2 
xmlns="http://schemas.openxps.org/oxps/v1.0/discard-control" 
3 
xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" 
4 
blockDefault="#all"> 
5 
                 
6 
 
<xs:complexType name="CT_DiscardControl"> 
7 
 
 
<xs:sequence> 
8 
 
 
 
<xs:element ref="Discard" minOccurs="0" maxOccurs="unbounded" /> 
9 
 
 
</xs:sequence> 
10 
 
</xs:complexType> 
11 
 
 
12 
 
<xs:complexType name="CT_Discard"> 
13 
 
 
<xs:attribute name="SentinelPage" type="xs:anyURI" use="required"> 
14 
            </xs:attribute> 
15 
        <xs:attribute name="Target" type="xs:anyURI" use="required"> 
16 
            </xs:attribute> 
17 
 
</xs:complexType> 
18 
 
19 
    <xs:element name="DiscardControl" type="CT_DiscardControl"> 
20 
        </xs:element> 
21 
 
 
22 
    <xs:element name="Discard" type="CT_Discard"> 
23 
        </xs:element> 
24 
     
25 
</xs:schema>
26 

A. Schemas – W3C XML 
ECMA-388 
362 
First Edition, June 2009 
A.6 
3D-Graphic Content 
The schema shown below is also provided in electronic form as a file named OpenXPS3D.xsd, 
which is contained in an accompanying zip archive named "OpenXPS WC3 Schemas.zip". If 
discrepancies exist between the representation as published below and the corresponding 
electronic version, the published version below is the definitive version. 
 
<?xml version="1.0" encoding="utf-8"?> 
1 
<xs:schema xmlns="http://schemas.openxps.org/oxps-3d/v1.0"  
2 
  xmlns:oxps="http://schemas.openxps.org/oxps/v1.0"  
3 
  xmlns:xs="http://www.w3.org/2001/XMLSchema"  
4 
  xmlns:x="http://schemas.openxps.org/oxps/v1.0/resourcedictionary-key"  
5 
  targetNamespace="http://schemas.openxps.org/oxps-3d/v1.0"  
6 
  elementFormDefault="qualified" blockDefault="#all"> 
7 
  <!-- Import OpenXPS and related XML Schemas --> 
8 
  <xs:import namespace="http://schemas.openxps.org/oxps/v1.0"/> 
9 
  <xs:import namespace= 
10 
    "http://schemas.openxps.org/oxps/v1.0/resourcedictionary-key"/> 
11 
  <xs:import namespace="http://www.w3.org/XML/1998/namespace"/> 
12 
  <!-- Names used for types and groups: 
13 
       ST_*        simpleType 
14 
       CT_*        complexType 
15 
        G_*            group 
16 
       AG_*        attributeGroup    --> 
17 
  <!-- Complex Types --> 
18 
  <xs:complexType name="CT_Brush3D"> 
19 
    <xs:sequence> 
20 
      <xs:element ref="oxps:ImageBrush.Transform" minOccurs="0"/> 
21 
    </xs:sequence> 
22 
    <xs:attributeGroup ref="AG_Brush3D"/> 
23 
  </xs:complexType> 
24 
  <!-- Root elements --> 
25 
  <xs:element name="Brush3D"> 
26 
    <xs:complexType> 
27 
      <xs:complexContent> 
28 
        <xs:extension base="CT_Brush3D"/> 
29 
      </xs:complexContent> 
30 
    </xs:complexType> 
31 
  </xs:element> 
32 
  <!-- Attribute Groups --> 
33 
  <xs:attributeGroup name="AG_Brush3D"> 
34 
    <xs:attribute name="Source3D" type="ST_UriImage3D" use="required"/> 
35 
    <xs:attribute ref="x:Key"/> 
36 
    <xs:attribute name="Transform" type="oxps:ST_RscRefMatrix"/> 
37 
    <xs:attribute name="Viewbox" type="oxps:ST_ViewBox" use="required"/> 
38 
    <xs:attribute name="Viewport" type="oxps:ST_ViewBox" use="required"/> 
39 
    <xs:attribute name="ViewboxUnits" type="oxps:ST_ViewUnits" use="required"  
40 
      fixed="Absolute"/> 
41 
    <xs:attribute name="ViewportUnits" type="oxps:ST_ViewUnits" use="required"  
42 
      fixed="Absolute"/> 
43 
  </xs:attributeGroup> 
44 
  <!-- Simple Types --> 
45 

ECMA-388 
A. Schemas – W3C XML 
 
 First Edition, June 2009 
363 
  <xs:simpleType name="ST_UriImage3D"> 
46 
    <xs:restriction base="xs:anyURI"> 
47 
      <xs:pattern value="([^\{].*)?"/> 
48 
    </xs:restriction> 
49 
  </xs:simpleType> 
50 
</xs:schema> 
51 


ECMA-388 
B. Schemas – RELAX NG 
 
 First Edition, June 2009 
365 
B. Schemas – RELAX NG 
This annex is informative 
B.1 
General Attribute Specification 
The schema shown below is also provided in electronic form as a file named xml.rnc, which is 
contained in an accompanying zip archive named "OpenXPS RELAX NG Schemas.zip". If 
discrepancies exist between the representation as published below and the corresponding 
electronic version, the published version below is the definitive version. 
This schema is included by several other schemas. 
 
default namespace = 
1 
  "http://schemas.openxps.org/oxps/v1.0/signature-definitions" 
2 
xml_lang = attribute xml:lang { xsd:language | xsd:string "" } 
3 
xml_space = attribute xml:space { "default" | "preserve" } 
4 
xml_base = attribute xml:base { xsd:anyURI } 
5 
xml_id = attribute xml:id { xsd:ID } 
6 
xml_specialAttrs = xml_base?, xml_lang?, xml_space?, xml_id? 
7 
B.2 
Driver Schemas 
The schema files described in this subclause are drivers that include other schema modules and 
that specify the top-level elements. 
B.2.1 
DiscardControl_Part 
The schema shown below is also provided in electronic form as a file named 
DiscardControl_Part.rnc, which is contained in an accompanying zip archive named "OpenXPS 
RELAX NG Schemas.zip". If discrepancies exist between the representation as published below 
and the corresponding electronic version, the published version below is the definitive version. 
 
include "OpenXPSDiscardControl.rnc" 
1 
start = dc_DiscardControl 
2 
B.2.2 
DocumentStructure_Part 
The schema shown below is also provided in electronic form as a file named 
DocumentStructure_Part.rnc, which is contained in an accompanying zip archive named 
"OpenXPS RELAX NG Schemas.zip". If discrepancies exist between the representation as 
published below and the corresponding electronic version, the published version below is the 
definitive version. 
 
include "OpenXPSDocumentStructure.rnc" 
1 
include "xml.rnc" 
2 

B. Schemas – RELAX NG 
ECMA-388 
366 
First Edition, June 2009 
start = ds_DocumentStructure 
3 
B.2.3 
FixedDocumentSequence_Part 
The schema shown below is also provided in electronic form as a file named 
FixedDocumentSequence_Part.rnc, which is contained in an accompanying zip archive named 
"OpenXPS RELAX NG Schemas.zip". If discrepancies exist between the representation as 
published below and the corresponding electronic version, the published version below is the 
definitive version. 
 
include "OpenXPSDocument.rnc" 
1 
include "OpenXPSResourceDictionaryKey.rnc" 
2 
include "xml.rnc" 
3 
start = oxps_FixedDocumentSequence 
4 
B.2.4 
FixedDocument_Part 
The schema shown below is also provided in electronic form as a file named 
FixedDocument_Part.rnc, which is contained in an accompanying zip archive named "OpenXPS 
RELAX NG Schemas.zip". If discrepancies exist between the representation as published below 
and the corresponding electronic version, the published version below is the definitive version. 
 
include "OpenXPSDocument.rnc" 
1 
include "OpenXPSResourceDictionaryKey.rnc" 
2 
include "xml.rnc" 
3 
start = oxps_FixedDocument 
4 
B.2.5 
FixedPage_Part 
The schema shown below is also provided in electronic form as a file named 
FixedPage_Part.rnc, which is contained in an accompanying zip archive named "OpenXPS 
RELAX NG Schemas.zip". If discrepancies exist between the representation as published below 
and the corresponding electronic version, the published version below is the definitive version. 
 
include "OpenXPSDocument.rnc" 
1 
include "OpenXPSResourceDictionaryKey.rnc" 
2 
include "xml.rnc" 
3 
start = oxps_FixedPage 
4 
B.2.6 
SignatureDefinitions_Part 
The schema shown below is also provided in electronic form as a file named 
SignatureDefinitions_Part.rnc, which is contained in an accompanying zip archive named 
"OpenXPS RELAX NG Schemas.zip". If discrepancies exist between the representation as 
published below and the corresponding electronic version, the published version below is the 
definitive version. 
 
include "OpenXPSSignatureDefinitions.rnc" 
1 
include "xml.rnc" 
2 
start = sd_SignatureDefinitions 
3 

ECMA-388 
B. Schemas – RELAX NG 
 
 First Edition, June 2009 
367 
B.2.7 
StoryFragments_Part 
The schema shown below is also provided in electronic form as a file named 
StoryFragments_Part.rnc, which is contained in an accompanying zip archive named "OpenXPS 
RELAX NG Schemas.zip". If discrepancies exist between the representation as published below 
and the corresponding electronic version, the published version below is the definitive version. 
 
include "OpenXPSDocumentStructure.rnc" 
1 
include "xml.rnc" 
2 
start = ds_StoryFragments 
3 


ECMA-388 
B. Schemas – RELAX NG 
 
 First Edition, June 2009 
369 
B.3 
Signature Definitions 
The schema shown below is also provided in electronic form as a file named 
OpenXPSSignatureDefinitions.rnc, which is contained in an accompanying zip archive named 
"OpenXPS RELAX NG Schemas.zip". If discrepancies exist between the representation as 
published below and the corresponding electronic version, the published version below is the 
definitive version. 
 
default namespace = 
1 
  "http://schemas.openxps.org/oxps/v1.0/signature-definitions" 
2 
namespace sd = 
3 
  "http://schemas.openxps.org/oxps/v1.0/signature-definitions" 
4 
namespace xs = "http://www.w3.org/2001/XMLSchema" 
5 
 
6 
sd_SignatureDefinitionsType = 
7 
  element SignatureDefinition { sd_SignatureDefinitionType }+ 
8 
sd_SpotLocationType = 
9 
  attribute PageURI { xsd:anyURI }, 
10 
  attribute StartX { xsd:double }, 
11 
  attribute StartY { xsd:double } 
12 
sd_SignatureDefinitionType = 
13 
  attribute SpotID { xsd:ID }, 
14 
  attribute SignerName { xsd:string }?, 
15 
  xml_lang?, 
16 
  element SpotLocation { sd_SpotLocationType }?, 
17 
  element Intent { xsd:string }?, 
18 
  element SignBy { xsd:dateTime }?, 
19 
  element SigningLocation { xsd:string }? 
20 
sd_SignatureDefinitions = 
21 
  element SignatureDefinitions { sd_SignatureDefinitionsType } 
22 


ECMA-388 
B. Schemas – RELAX NG 
 
 First Edition, June 2009 
371 
B.4 
OpenXPS Document 
The schema shown below is also provided in electronic form as a file named 
OpenXPSDocument.rnc, which is contained in an accompanying zip archive named "OpenXPS 
RELAX NG Schemas.zip". If discrepancies exist between the representation as published below 
and the corresponding electronic version, the published version below is the definitive version. 
 
default namespace oxps = "http://schemas.openxps.org/oxps/v1.0" 
1 
namespace x = 
2 
  "http://schemas.openxps.org/oxps/v1.0/resourcedictionary-key" 
3 
namespace xs = "http://www.w3.org/2001/XMLSchema" 
4 
 
5 
oxps_CT_MatrixTransform = oxps_AG_MatrixTransform 
6 
oxps_CT_SolidColorBrush = oxps_AG_Brush, oxps_AG_SolidColorBrush 
7 
oxps_CT_ImageBrush = 
8 
  oxps_AG_Brush, 
9 
  oxps_AG_TileBrush, 
10 
  oxps_AG_ImageBrush, 
11 
  oxps_ImageBrush.Transform? 
12 
oxps_CT_VisualBrush = 
13 
  oxps_AG_Brush, 
14 
  oxps_AG_TileBrush, 
15 
  oxps_AG_VisualBrush, 
16 
  oxps_VisualBrush.Transform?, 
17 
  oxps_VisualBrush.Visual? 
18 
oxps_CT_LinearGradientBrush = 
19 
  oxps_AG_Brush, 
20 
  oxps_AG_GradientBrush, 
21 
  oxps_AG_LinearGradientBrush, 
22 
  oxps_LinearGradientBrush.Transform?, 
23 
  oxps_LinearGradientBrush.GradientStops 
24 
oxps_CT_RadialGradientBrush = 
25 
  oxps_AG_Brush, 
26 
  oxps_AG_GradientBrush, 
27 
  oxps_AG_RadialGradientBrush, 
28 
  oxps_RadialGradientBrush.Transform?, 
29 
  oxps_RadialGradientBrush.GradientStops 
30 
oxps_CT_GradientStop = oxps_AG_GradientStop 
31 
oxps_CT_PathGeometry = 
32 
  oxps_AG_PathGeometry, oxps_PathGeometry.Transform?, oxps_PathFigure* 
33 
oxps_CT_Glyphs = 
34 
  oxps_AG_Glyphs, 
35 
  oxps_Glyphs.RenderTransform?, 
36 
  oxps_Glyphs.Clip?, 
37 
  oxps_Glyphs.OpacityMask?, 
38 
  oxps_Glyphs.Fill? 
39 
oxps_CT_Path = 
40 
  oxps_AG_Path, 
41 
  oxps_AG_AutomationProvider, 
42 
  oxps_AG_SnapsToDevicePixels, 
43 
  oxps_Path.RenderTransform?, 
44 
  oxps_Path.Clip?, 
45 

B. Schemas – RELAX NG 
ECMA-388 
372 
First Edition, June 2009 
  oxps_Path.OpacityMask?, 
46 
  oxps_Path.Fill?, 
47 
  oxps_Path.Stroke?, 
48 
  oxps_Path.Data? 
49 
oxps_CT_PathFigure = 
50 
  oxps_AG_PathFigure, 
51 
  (oxps_PolyLineSegment 
52 
   | oxps_PolyBezierSegment 
53 
   | oxps_ArcSegment 
54 
   | oxps_PolyQuadraticBezierSegment)+ 
55 
oxps_CT_ArcSegment = oxps_AG_ArcSegment 
56 
oxps_CT_PolyQuadraticBezierSegment = oxps_AG_PolyQuadraticBezierSegment 
57 
oxps_CT_PolyLineSegment = oxps_AG_PolyLineSegment 
58 
oxps_CT_PolyBezierSegment = oxps_AG_PolyBezierSegment 
59 
oxps_CT_Canvas = 
60 
  oxps_AG_Canvas, 
61 
  oxps_AG_AutomationProvider, 
62 
  oxps_Canvas.Resources?, 
63 
  oxps_Canvas.RenderTransform?, 
64 
  oxps_Canvas.Clip?, 
65 
  oxps_Canvas.OpacityMask?, 
66 
  (oxps_Path | oxps_Glyphs | oxps_Canvas)* 
67 
oxps_CT_ResourceDictionary = 
68 
  oxps_AG_ResourceDictionary, 
69 
  (oxps_ImageBrush 
70 
   | oxps_LinearGradientBrush 
71 
   | oxps_RadialGradientBrush 
72 
   | oxps_VisualBrush 
73 
   | oxps_SolidColorBrush 
74 
   | oxps_MatrixTransform 
75 
   | oxps_PathGeometry 
76 
   | oxps_Path 
77 
   | oxps_Glyphs 
78 
   | oxps_Canvas)* 
79 
oxps_CT_FixedPage = 
80 
  oxps_AG_FixedPage, 
81 
  oxps_FixedPage.Resources?, 
82 
  (oxps_Path | oxps_Glyphs | oxps_Canvas)* 
83 
oxps_CT_FixedDocument = oxps_PageContent+ 
84 
oxps_CT_PageContent = oxps_AG_PageContent, oxps_PageContent.LinkTargets? 
85 
oxps_CT_FixedDocumentSequence = oxps_DocumentReference+ 
86 
oxps_CT_DocumentReference = oxps_AG_DocumentReference 
87 
oxps_CT_LinkTarget = oxps_AG_LinkTarget 
88 
oxps_CT_CP_LinkTargets = oxps_LinkTarget+ 
89 
oxps_CT_CP_Transform = oxps_MatrixTransform 
90 
oxps_CT_CP_Visual = oxps_Path | oxps_Glyphs | oxps_Canvas 
91 
oxps_CT_CP_GradientStops = oxps_GradientStop+ 
92 
oxps_CT_CP_Geometry = oxps_PathGeometry 
93 
oxps_CT_CP_Brush = 
94 
  oxps_ImageBrush 
95 
  | oxps_LinearGradientBrush 
96 
  | oxps_RadialGradientBrush 
97 
  | oxps_SolidColorBrush 
98 
  | oxps_VisualBrush 
99 
oxps_CT_CP_Resources = oxps_ResourceDictionary? 
100 

ECMA-388 
B. Schemas – RELAX NG 
 
 First Edition, June 2009 
373 
oxps_MatrixTransform = 
101 
  element MatrixTransform { oxps_CT_MatrixTransform } 
102 
oxps_SolidColorBrush = 
103 
  element SolidColorBrush { oxps_CT_SolidColorBrush } 
104 
oxps_ImageBrush = element ImageBrush { oxps_CT_ImageBrush } 
105 
oxps_VisualBrush = element VisualBrush { oxps_CT_VisualBrush } 
106 
oxps_LinearGradientBrush = 
107 
  element LinearGradientBrush { oxps_CT_LinearGradientBrush } 
108 
oxps_RadialGradientBrush = 
109 
  element RadialGradientBrush { oxps_CT_RadialGradientBrush } 
110 
oxps_Glyphs = element Glyphs { oxps_CT_Glyphs } 
111 
oxps_Path = element Path { oxps_CT_Path } 
112 
oxps_Canvas = element Canvas { oxps_CT_Canvas } 
113 
oxps_GradientStop = element GradientStop { oxps_CT_GradientStop } 
114 
oxps_ResourceDictionary = 
115 
  element ResourceDictionary { oxps_CT_ResourceDictionary } 
116 
oxps_PathGeometry = element PathGeometry { oxps_CT_PathGeometry } 
117 
oxps_PathFigure = element PathFigure { oxps_CT_PathFigure } 
118 
oxps_PolyLineSegment = 
119 
  element PolyLineSegment { oxps_CT_PolyLineSegment } 
120 
oxps_ArcSegment = element ArcSegment { oxps_CT_ArcSegment } 
121 
oxps_PolyBezierSegment = 
122 
  element PolyBezierSegment { oxps_CT_PolyBezierSegment } 
123 
oxps_PolyQuadraticBezierSegment = 
124 
  element PolyQuadraticBezierSegment { 
125 
    oxps_CT_PolyQuadraticBezierSegment 
126 
  } 
127 
oxps_FixedPage = element FixedPage { oxps_CT_FixedPage } 
128 
oxps_FixedDocument = element FixedDocument { oxps_CT_FixedDocument } 
129 
oxps_PageContent = element PageContent { oxps_CT_PageContent } 
130 
oxps_FixedDocumentSequence = 
131 
  element FixedDocumentSequence { oxps_CT_FixedDocumentSequence } 
132 
oxps_DocumentReference = 
133 
  element DocumentReference { oxps_CT_DocumentReference } 
134 
oxps_LinkTarget = element LinkTarget { oxps_CT_LinkTarget } 
135 
oxps_PageContent.LinkTargets = 
136 
  element PageContent.LinkTargets { oxps_CT_CP_LinkTargets } 
137 
oxps_ImageBrush.Transform = 
138 
  element ImageBrush.Transform { oxps_CT_CP_Transform } 
139 
oxps_VisualBrush.Transform = 
140 
  element VisualBrush.Transform { oxps_CT_CP_Transform } 
141 
oxps_LinearGradientBrush.Transform = 
142 
  element LinearGradientBrush.Transform { oxps_CT_CP_Transform } 
143 
oxps_RadialGradientBrush.Transform = 
144 
  element RadialGradientBrush.Transform { oxps_CT_CP_Transform } 
145 
oxps_PathGeometry.Transform = 
146 
  element PathGeometry.Transform { oxps_CT_CP_Transform } 
147 
oxps_Glyphs.RenderTransform = 
148 
  element Glyphs.RenderTransform { oxps_CT_CP_Transform } 
149 
oxps_Path.RenderTransform = 
150 
  element Path.RenderTransform { oxps_CT_CP_Transform } 
151 
oxps_Canvas.RenderTransform = 
152 
  element Canvas.RenderTransform { oxps_CT_CP_Transform } 
153 
oxps_VisualBrush.Visual = 
154 
  element VisualBrush.Visual { oxps_CT_CP_Visual } 
155 

B. Schemas – RELAX NG 
ECMA-388 
374 
First Edition, June 2009 
oxps_LinearGradientBrush.GradientStops = 
156 
  element LinearGradientBrush.GradientStops { oxps_CT_CP_GradientStops } 
157 
oxps_RadialGradientBrush.GradientStops = 
158 
  element RadialGradientBrush.GradientStops { oxps_CT_CP_GradientStops } 
159 
oxps_Glyphs.Clip = element Glyphs.Clip { oxps_CT_CP_Geometry } 
160 
oxps_Path.Clip = element Path.Clip { oxps_CT_CP_Geometry } 
161 
oxps_Canvas.Clip = element Canvas.Clip { oxps_CT_CP_Geometry } 
162 
oxps_Glyphs.OpacityMask = 
163 
  element Glyphs.OpacityMask { oxps_CT_CP_Brush } 
164 
oxps_Path.OpacityMask = element Path.OpacityMask { oxps_CT_CP_Brush } 
165 
oxps_Canvas.OpacityMask = 
166 
  element Canvas.OpacityMask { oxps_CT_CP_Brush } 
167 
oxps_Glyphs.Fill = element Glyphs.Fill { oxps_CT_CP_Brush } 
168 
oxps_Path.Fill = element Path.Fill { oxps_CT_CP_Brush } 
169 
oxps_Path.Data = element Path.Data { oxps_CT_CP_Geometry } 
170 
oxps_Path.Stroke = element Path.Stroke { oxps_CT_CP_Brush } 
171 
oxps_Canvas.Resources = 
172 
  element Canvas.Resources { oxps_CT_CP_Resources } 
173 
oxps_FixedPage.Resources = 
174 
  element FixedPage.Resources { oxps_CT_CP_Resources } 
175 
oxps_AG_GradientStop = 
176 
  attribute Color { oxps_ST_Color }, 
177 
  attribute Offset { oxps_ST_Double } 
178 
oxps_AG_Brush = 
179 
   
180 
  ## default value: 1.0 
181 
  attribute Opacity { oxps_ST_ZeroOne }?, 
182 
  x_Key? 
183 
oxps_AG_TileBrush = 
184 
  attribute Transform { oxps_ST_RscRefMatrix }?, 
185 
  attribute Viewbox { oxps_ST_ViewBox }, 
186 
  attribute Viewport { oxps_ST_ViewBox }, 
187 
   
188 
  ## default value: None 
189 
  attribute TileMode { oxps_ST_TileMode }?, 
190 
  attribute ViewboxUnits { oxps_ST_ViewUnits }, 
191 
  attribute ViewportUnits { oxps_ST_ViewUnits } 
192 
oxps_AG_VisualBrush = attribute Visual { oxps_ST_RscRef }? 
193 
oxps_AG_GradientBrush = 
194 
   
195 
  ## default value: SRgbLinearInterpolation 
196 
  attribute ColorInterpolationMode { oxps_ST_ClrIntMode }?, 
197 
   
198 
  ## default value: Pad 
199 
  attribute SpreadMethod { oxps_ST_SpreadMethod }?, 
200 
  attribute MappingMode { oxps_ST_MappingMode } 
201 
oxps_AG_SolidColorBrush = attribute Color { oxps_ST_Color } 
202 
oxps_AG_ImageBrush = attribute ImageSource { oxps_ST_UriCtxBmp } 
203 
oxps_AG_LinearGradientBrush = 
204 
  attribute Transform { oxps_ST_RscRefMatrix }?, 
205 
  attribute StartPoint { oxps_ST_Point }, 
206 
  attribute EndPoint { oxps_ST_Point } 
207 
oxps_AG_RadialGradientBrush = 
208 
  attribute Transform { oxps_ST_RscRefMatrix }?, 
209 
  attribute Center { oxps_ST_Point }, 
210 

ECMA-388 
B. Schemas – RELAX NG 
 
 First Edition, June 2009 
375 
  attribute GradientOrigin { oxps_ST_Point }, 
211 
  attribute RadiusX { oxps_ST_GEZero }, 
212 
  attribute RadiusY { oxps_ST_GEZero } 
213 
oxps_AG_PathGeometry = 
214 
  attribute Figures { oxps_ST_AbbrGeom }?, 
215 
   
216 
  ## default value: EvenOdd 
217 
  attribute FillRule { oxps_ST_FillRule }?, 
218 
  attribute Transform { oxps_ST_RscRefMatrix }?, 
219 
  x_Key? 
220 
oxps_AG_ResourceDictionary = attribute Source { xsd:anyURI }? 
221 
oxps_AG_PolyLineSegment = 
222 
  attribute Points { oxps_ST_Points }, 
223 
   
224 
  ## default value: true 
225 
  attribute IsStroked { oxps_ST_Boolean }? 
226 
oxps_AG_ArcSegment = 
227 
  attribute Point { oxps_ST_Point }, 
228 
  attribute Size { oxps_ST_PointGE0 }, 
229 
  attribute RotationAngle { oxps_ST_Double }, 
230 
  attribute IsLargeArc { oxps_ST_Boolean }, 
231 
  attribute SweepDirection { oxps_ST_SweepDirection }, 
232 
   
233 
  ## default value: true 
234 
  attribute IsStroked { oxps_ST_Boolean }? 
235 
oxps_AG_PolyBezierSegment = 
236 
  attribute Points { oxps_ST_PointsM3 }, 
237 
   
238 
  ## default value: true 
239 
  attribute IsStroked { oxps_ST_Boolean }? 
240 
oxps_AG_PolyQuadraticBezierSegment = 
241 
  attribute Points { oxps_ST_PointsM2 }, 
242 
   
243 
  ## default value: true 
244 
  attribute IsStroked { oxps_ST_Boolean }? 
245 
oxps_AG_Glyphs = 
246 
   
247 
  ## default value: 0 
248 
  attribute BidiLevel { 
249 
    xsd:integer { minInclusive = "0" maxInclusive = "61" } 
250 
  }?, 
251 
  attribute CaretStops { oxps_ST_CaretStops }?, 
252 
  attribute DeviceFontName { oxps_ST_UnicodeString }?, 
253 
  attribute Fill { oxps_ST_RscRefColor }?, 
254 
  attribute FontRenderingEmSize { oxps_ST_GEZero }, 
255 
  attribute FontUri { xsd:anyURI }, 
256 
  attribute OriginX { oxps_ST_Double }, 
257 
  attribute OriginY { oxps_ST_Double }, 
258 
   
259 
  ## default value: false 
260 
  attribute IsSideways { oxps_ST_Boolean }?, 
261 
  attribute Indices { oxps_ST_Indices }?, 
262 
  attribute UnicodeString { oxps_ST_UnicodeString }?, 
263 
   
264 
  ## default value: None 
265 

B. Schemas – RELAX NG 
ECMA-388 
376 
First Edition, June 2009 
  attribute StyleSimulations { oxps_ST_StyleSimulations }?, 
266 
  attribute RenderTransform { oxps_ST_RscRefMatrix }?, 
267 
  attribute Clip { oxps_ST_RscRefAbbrGeomF }?, 
268 
   
269 
  ## default value: 1.0 
270 
  attribute Opacity { oxps_ST_ZeroOne }?, 
271 
  attribute OpacityMask { oxps_ST_RscRef }?, 
272 
  attribute Name { oxps_ST_Name }?, 
273 
  attribute FixedPage.NavigateUri { xsd:anyURI }?, 
274 
  xml_lang?, 
275 
  x_Key? 
276 
oxps_AG_Path = 
277 
  attribute Data { oxps_ST_RscRefAbbrGeomF }?, 
278 
  attribute Fill { oxps_ST_RscRefColor }?, 
279 
  attribute RenderTransform { oxps_ST_RscRefMatrix }?, 
280 
  attribute Clip { oxps_ST_RscRefAbbrGeomF }?, 
281 
   
282 
  ## default value: 1.0 
283 
  attribute Opacity { oxps_ST_ZeroOne }?, 
284 
  attribute OpacityMask { oxps_ST_RscRef }?, 
285 
  attribute Stroke { oxps_ST_RscRefColor }?, 
286 
  attribute StrokeDashArray { oxps_ST_EvenArrayPos }?, 
287 
   
288 
  ## default value: Flat 
289 
  attribute StrokeDashCap { oxps_ST_DashCap }?, 
290 
   
291 
  ## default value: 0.0 
292 
  attribute StrokeDashOffset { oxps_ST_Double }?, 
293 
   
294 
  ## default value: Flat 
295 
  attribute StrokeEndLineCap { oxps_ST_LineCap }?, 
296 
   
297 
  ## default value: Flat 
298 
  attribute StrokeStartLineCap { oxps_ST_LineCap }?, 
299 
   
300 
  ## default value: Miter 
301 
  attribute StrokeLineJoin { oxps_ST_LineJoin }?, 
302 
   
303 
  ## default value: 10.0 
304 
  attribute StrokeMiterLimit { oxps_ST_GEOne }?, 
305 
   
306 
  ## default value: 1.0 
307 
  attribute StrokeThickness { oxps_ST_GEZero }?, 
308 
  attribute Name { oxps_ST_Name }?, 
309 
  attribute FixedPage.NavigateUri { xsd:anyURI }?, 
310 
  xml_lang?, 
311 
  x_Key? 
312 
oxps_AG_PathFigure = 
313 
   
314 
  ## default value: false 
315 
  attribute IsClosed { oxps_ST_Boolean }?, 
316 
  attribute StartPoint { oxps_ST_Point }, 
317 
   
318 
  ## default value: true 
319 
  attribute IsFilled { oxps_ST_Boolean }? 
320 

ECMA-388 
B. Schemas – RELAX NG 
 
 First Edition, June 2009 
377 
oxps_AG_Canvas = 
321 
  attribute RenderTransform { oxps_ST_RscRefMatrix }?, 
322 
  attribute Clip { oxps_ST_RscRefAbbrGeomF }?, 
323 
   
324 
  ## default value: 1.0 
325 
  attribute Opacity { oxps_ST_ZeroOne }?, 
326 
  attribute OpacityMask { oxps_ST_RscRef }?, 
327 
  attribute Name { oxps_ST_Name }?, 
328 
  attribute RenderOptions.EdgeMode { oxps_ST_EdgeMode }?, 
329 
  attribute FixedPage.NavigateUri { xsd:anyURI }?, 
330 
  xml_lang?, 
331 
  x_Key? 
332 
oxps_AG_PageContent = 
333 
  attribute Source { xsd:anyURI }, 
334 
  attribute Width { oxps_ST_GEOne }?, 
335 
  attribute Height { oxps_ST_GEOne }? 
336 
oxps_AG_LinkTarget = attribute Name { oxps_ST_Name } 
337 
oxps_AG_DocumentReference = attribute Source { xsd:anyURI } 
338 
oxps_AG_MatrixTransform = 
339 
  attribute Matrix { oxps_ST_Matrix }, 
340 
  x_Key? 
341 
oxps_AG_FixedPage = 
342 
  attribute Width { oxps_ST_GEOne }, 
343 
  attribute Height { oxps_ST_GEOne }, 
344 
  attribute ContentBox { oxps_ST_ContentBox }?, 
345 
  attribute BleedBox { oxps_ST_BleedBox }?, 
346 
  xml_lang, 
347 
  attribute Name { oxps_ST_Name }? 
348 
oxps_AG_AutomationProvider = 
349 
  attribute AutomationProperties.Name { xsd:string }?, 
350 
  attribute AutomationProperties.HelpText { xsd:string }? 
351 
oxps_AG_SnapsToDevicePixels = 
352 
  attribute SnapsToDevicePixels { oxps_ST_Boolean }? 
353 
oxps_ST_Name = 
354 
  xsd:ID { 
355 
    pattern = 
356 
      
357 
"(\p{Lu}|\p{Ll}|\p{Lt}|\p{Lo}|\p{Nl}|_)(\p{Lu}|\p{Ll}|\p{Lt}|\p{Lo}|\p{Nl}|\p{Mn}|\p
358 
{Mc}|\p{Nd}|_)*" 
359 
  } 
360 
oxps_ST_Boolean = xsd:boolean { pattern = "true|false" } 
361 
oxps_ST_ZeroOne = 
362 
  xsd:double { 
363 
    pattern = 
364 
      "((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)" 
365 
    minInclusive = "0.0" 
366 
    maxInclusive = "1.0" 
367 
  } 
368 
oxps_ST_GEZero = 
369 
  xsd:double { 
370 
    pattern = 
371 
      "((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)" 
372 
    minInclusive = "0.0" 
373 
  } 
374 
oxps_ST_GEOne = 
375 

B. Schemas – RELAX NG 
ECMA-388 
378 
First Edition, June 2009 
  xsd:double { 
376 
    pattern = 
377 
      "((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)" 
378 
    minInclusive = "1.0" 
379 
  } 
380 
oxps_ST_Double = 
381 
  xsd:double { 
382 
    # whiteSpace="collapse" is removed. 
383 
    pattern = 
384 
      "((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)" 
385 
  } 
386 
oxps_ST_Point = 
387 
  xsd:string { 
388 
    # whiteSpace="collapse" is removed. 
389 
    pattern = 
390 
      "((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-
391 
|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)" 
392 
  } 
393 
oxps_ST_PointGE0 = 
394 
  xsd:string { 
395 
    # whiteSpace="collapse" is removed. 
396 
    pattern = 
397 
      "(\+?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)(\+?(([0-
398 
9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)" 
399 
  } 
400 
oxps_ST_Points = 
401 
  xsd:string { 
402 
    # whiteSpace="collapse" is removed. 
403 
    pattern = 
404 
      "((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-
405 
|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ((\-|\+)?(([0-
406 
9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-9]+(\.[0-
407 
9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?))*" 
408 
  } 
409 
oxps_ST_PointsM2 = 
410 
  xsd:string { 
411 
    # whiteSpace="collapse" is removed. 
412 
    pattern = 
413 
      "((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-
414 
|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?) ((\-|\+)?(([0-9]+(\.[0-
415 
9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-
416 
9]+))((e|E)(\-|\+)?[0-9]+)?)(( ((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-
417 
|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-
418 
9]+)?)){2})*" 
419 
  } 
420 
oxps_ST_PointsM3 = 
421 
  xsd:string { 
422 
    # whiteSpace="collapse" is removed. 
423 
    pattern = 
424 
      "((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-
425 
|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ((\-|\+)?(([0-
426 
9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-9]+(\.[0-
427 
9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)){2}(( ((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-
428 
9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-
429 
9]+))((e|E)(\-|\+)?[0-9]+)?)){3})*" 
430 

ECMA-388 
B. Schemas – RELAX NG 
 
 First Edition, June 2009 
379 
  } 
431 
oxps_ST_EvenArrayPos = 
432 
  xsd:string { 
433 
    # whiteSpace="collapse" is removed. 
434 
    pattern = 
435 
      "(\+?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?) (\+?(([0-
436 
9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( (\+?(([0-9]+(\.[0-9]+)?)|(\.[0-
437 
9]+))((e|E)(\-|\+)?[0-9]+)?) (\+?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-
438 
9]+)?))*" 
439 
  } 
440 
oxps_ST_Array = 
441 
  xsd:string { 
442 
    # whiteSpace="collapse" is removed. 
443 
    pattern = 
444 
      "(((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?) ?)*" 
445 
  } 
446 
oxps_ST_ViewBox = 
447 
  xsd:string { 
448 
    # whiteSpace="collapse" is removed. 
449 
    pattern = 
450 
      "((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-
451 
|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)(\+?(([0-
452 
9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)(\+?(([0-9]+(\.[0-
453 
9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)" 
454 
  } 
455 
oxps_ST_ContentBox = 
456 
  xsd:string { 
457 
    # whiteSpace="collapse" is removed. 
458 
    pattern = 
459 
      "(\+?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)(\+?(([0-
460 
9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)(\+?(([0-9]+(\.[0-
461 
9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)(\+?(([0-9]+(\.[0-9]+)?)|(\.[0-
462 
9]+))((e|E)(\-|\+)?[0-9]+)?)" 
463 
  } 
464 
oxps_ST_BleedBox = 
465 
  xsd:string { 
466 
    # whiteSpace="collapse" is removed. 
467 
    pattern = 
468 
      "((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-
469 
|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)(\+?(([0-
470 
9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)(\+?(([0-9]+(\.[0-
471 
9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)" 
472 
  } 
473 
oxps_ST_Matrix = 
474 
  xsd:string { 
475 
    # whiteSpace="collapse" is removed. 
476 
    pattern = 
477 
      "((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-
478 
|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-
479 
9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-9]+(\.[0-
480 
9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-
481 
9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-
482 
9]+))((e|E)(\-|\+)?[0-9]+)?)" 
483 
  } 
484 
oxps_ST_Color = 
485 

B. Schemas – RELAX NG 
ECMA-388 
380 
First Edition, June 2009 
  xsd:string { 
486 
    # whiteSpace="collapse" is removed. 
487 
    pattern = 
488 
      "(#([0-9a-fA-F]{2})?[0-9a-fA-F]{6})|(sc# ?(\-?(([0-9]+(\.[0-9]+)?)|(\.[0-
489 
9]+)))( ?, ?)(\-?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+)))( ?, ?)(\-?(([0-9]+(\.[0-
490 
9]+)?)|(\.[0-9]+)))(( ?, ?)(\-?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))))?)|(ContextColor 
491 
[\S]+ (\-?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+)))(( ?, ?)(\-?(([0-9]+(\.[0-9]+)?)|(\.[0-
492 
9]+)))){1,8})" 
493 
  } 
494 
oxps_ST_CaretStops = 
495 
  xsd:string { 
496 
    # whiteSpace="collapse" is removed. 
497 
    pattern = "[0-9A-Fa-f]*" 
498 
  } 
499 
oxps_ST_Indices = 
500 
  xsd:string { 
501 
    # whiteSpace="collapse" is removed. 
502 
    pattern = 
503 
      "(((\(([1-9][0-9]*)(:([1-9][0-9]*))?\))?([0-9]+))?(,(\+?(([0-9]+(\.[0-
504 
9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)?(,((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-
505 
9]+))((e|E)(\-|\+)?[0-9]+)?)?(,((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-
506 
|\+)?[0-9]+)?))?)?)?)(;((\(([1-9][0-9]*)(:([1-9][0-9]*))?\))?([0-9]+))?(,(\+?(([0-
507 
9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)?(,((\-|\+)?(([0-9]+(\.[0-
508 
9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)?(,((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-
509 
9]+))((e|E)(\-|\+)?[0-9]+)?))?)?)?)*" 
510 
  } 
511 
oxps_ST_UnicodeString = 
512 
  xsd:string { pattern = "(([^\{]|(\{\}))(.|[\r\n])*)?" } 
513 
oxps_ST_AbbrGeomF = 
514 
  xsd:string { 
515 
    # whiteSpace="collapse" is removed. 
516 
    pattern = 
517 
      "(F ?(0|1))?( ?(M|m)( ?((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-
518 
|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-
519 
9]+)?)))(( ?(M|m)( ?((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-
520 
9]+)?)( ?, ?)((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)))|( 
521 
?(L|l)( ?((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-
522 
|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?))( ((\-|\+)?(([0-
523 
9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-9]+(\.[0-
524 
9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?))*)|( ?(H|h|V|v)( ?((\-|\+)?(([0-9]+(\.[0-
525 
9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?))( ((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-
526 
9]+))((e|E)(\-|\+)?[0-9]+)?))*)|( ?(Q|q|S|s)( ?((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-
527 
9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-
528 
9]+))((e|E)(\-|\+)?[0-9]+)?) ((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-
529 
|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-
530 
9]+)?))(( ((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, 
531 
?)((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)){2})*)|( ?(C|c)( 
532 
?((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-
533 
|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ((\-|\+)?(([0-
534 
9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-9]+(\.[0-
535 
9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)){2})(( ((\-|\+)?(([0-9]+(\.[0-
536 
9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-
537 
9]+))((e|E)(\-|\+)?[0-9]+)?)){3})*)|( ?(A|a)( ?((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-
538 
9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-
539 
9]+))((e|E)(\-|\+)?[0-9]+)?) ((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-
540 

ECMA-388 
B. Schemas – RELAX NG 
 
 First Edition, June 2009 
381 
|\+)?[0-9]+)?) [0-1] [0-1] ((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-
541 
|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-
542 
9]+)?))( ((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-
543 
|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?) ((\-|\+)?(([0-9]+(\.[0-
544 
9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?) [0-1] [0-1] ((\-|\+)?(([0-9]+(\.[0-
545 
9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-
546 
9]+))((e|E)(\-|\+)?[0-9]+)?))*)|( ?(Z|z)))*" 
547 
  } 
548 
oxps_ST_AbbrGeom = 
549 
  xsd:string { 
550 
    # whiteSpace="collapse" is removed. 
551 
    pattern = 
552 
      "( ?(M|m)( ?((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( 
553 
?, ?)((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)))(( ?(M|m)( 
554 
?((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-
555 
|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)))|( ?(L|l)( ?((\-
556 
|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-
557 
9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?))( ((\-|\+)?(([0-9]+(\.[0-
558 
9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-
559 
9]+))((e|E)(\-|\+)?[0-9]+)?))*)|( ?(H|h|V|v)( ?((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-
560 
9]+))((e|E)(\-|\+)?[0-9]+)?))( ((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-
561 
|\+)?[0-9]+)?))*)|( ?(Q|q|S|s)( ?((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-
562 
|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-
563 
9]+)?) ((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-
564 
|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?))(( ((\-|\+)?(([0-
565 
9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-9]+(\.[0-
566 
9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)){2})*)|( ?(C|c)( ?((\-|\+)?(([0-9]+(\.[0-
567 
9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-
568 
9]+))((e|E)(\-|\+)?[0-9]+)?)( ((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-
569 
|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-
570 
9]+)?)){2})(( ((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, 
571 
?)((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)){3})*)|( ?(A|a)( 
572 
?((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-
573 
|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?) ((\-|\+)?(([0-9]+(\.[0-
574 
9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?) [0-1] [0-1] ((\-|\+)?(([0-9]+(\.[0-
575 
9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-
576 
9]+))((e|E)(\-|\+)?[0-9]+)?))( ((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-
577 
|\+)?[0-9]+)?)( ?, ?)((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-
578 
9]+)?) ((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?) [0-1] [0-1] 
579 
((\-|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?)( ?, ?)((\-
580 
|\+)?(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))((e|E)(\-|\+)?[0-9]+)?))*)|( ?(Z|z)))*" 
581 
  } 
582 
oxps_ST_UriImage = xsd:anyURI { pattern = "([^\{].*)?" } 
583 
oxps_ST_CtxBmpImage = 
584 
  xsd:string { 
585 
    pattern = "\{ColorConvertedBitmap[\s]+[\S]+[\s]+[\S]+\}[\s]*" 
586 
  } 
587 
oxps_ST_UriCtxBmp = oxps_ST_UriImage | oxps_ST_CtxBmpImage 
588 
oxps_ST_RscRef = 
589 
  xsd:string { pattern = "\{StaticResource[\s]+[\S]+\}[\s]*" } 
590 
oxps_ST_RscRefColor = oxps_ST_Color | oxps_ST_RscRef 
591 
oxps_ST_RscRefMatrix = oxps_ST_Matrix | oxps_ST_RscRef 
592 
oxps_ST_RscRefAbbrGeomF = oxps_ST_AbbrGeomF | oxps_ST_RscRef 
593 
oxps_ST_SweepDirection = "Clockwise" | "Counterclockwise" 
594 
oxps_ST_DashCap = "Flat" | "Round" | "Square" | "Triangle" 
595 

B. Schemas – RELAX NG 
ECMA-388 
382 
First Edition, June 2009 
oxps_ST_LineCap = "Flat" | "Round" | "Square" | "Triangle" 
596 
oxps_ST_LineJoin = "Miter" | "Bevel" | "Round" 
597 
oxps_ST_TileMode = "None" | "Tile" | "FlipX" | "FlipY" | "FlipXY" 
598 
oxps_ST_ClrIntMode = 
599 
  "ScRgbLinearInterpolation" | "SRgbLinearInterpolation" 
600 
oxps_ST_SpreadMethod = "Pad" | "Reflect" | "Repeat" 
601 
oxps_ST_FillRule = "EvenOdd" | "NonZero" 
602 
oxps_ST_EdgeMode = "Aliased" 
603 
oxps_ST_StyleSimulations = 
604 
  "None" 
605 
  | "ItalicSimulation" 
606 
  | "BoldSimulation" 
607 
  | "BoldItalicSimulation" 
608 
oxps_ST_ViewUnits = "Absolute" 
609 
oxps_ST_MappingMode = "Absolute" 
610 

ECMA-388 
B. Schemas – RELAX NG 
 
 First Edition, June 2009 
383 
B.5 
Resource Dictionary Key 
The schema shown below is also provided in electronic form as a file named 
OpenXPSResourceDictionaryKey.rnc, which is contained in an accompanying zip archive named 
"OpenXPS RELAX NG Schemas.zip". If discrepancies exist between the representation as 
published below and the corresponding electronic version, the published version below is the 
definitive version. 
 
namespace x = 
1 
  "http://schemas.openxps.org/oxps/v1.0/resourcedictionary-key" 
2 
namespace xs = "http://www.w3.org/2001/XMLSchema" 
3 
 
4 
x_Key = 
5 
  attribute x:Key { 
6 
    xsd:string { 
7 
      pattern = 
8 
        
9 
"(\p{Lu}|\p{Ll}|\p{Lt}|\p{Lo}|\p{Nl}|_)(\p{Lu}|\p{Ll}|\p{Lt}|\p{Lo}|\p{Nl}|\p{Mn}|\p
10 
{Mc}|\p{Nd}|_)*" 
11 
    } 
12 
  } 
13 


ECMA-388 
B. Schemas – RELAX NG 
 
 First Edition, June 2009 
385 
B.6 
Document Structure 
The schema shown below is also provided in electronic form as a file named 
OpenXPSDocumentStructure.rnc, which is contained in an accompanying zip archive named 
"OpenXPS RELAX NG Schemas.zip". If discrepancies exist between the representation as 
published below and the corresponding electronic version, the published version below is the 
definitive version. 
 
default namespace = 
1 
  "http://schemas.openxps.org/oxps/v1.0/documentstructure" 
2 
namespace ds = "http://schemas.openxps.org/oxps/v1.0/documentstructure" 
3 
namespace xs = "http://www.w3.org/2001/XMLSchema" 
4 
 
5 
ds_CT_DocumentStructure = ds_DocumentStructure.Outline?, ds_Story* 
6 
ds_CT_CP_Outline = ds_DocumentOutline 
7 
ds_CT_DocumentOutline = ds_AG_DocumentOutline, ds_OutlineEntry+ 
8 
ds_CT_OutlineEntry = ds_AG_OutlineEntry 
9 
ds_CT_Story = ds_AG_Story, ds_StoryFragmentReference+ 
10 
ds_CT_StoryFragmentReference = ds_AG_StoryFragmentReference 
11 
ds_ST_Name = 
12 
  xsd:string { 
13 
    pattern = 
14 
      
15 
"(\p{Lu}|\p{Ll}|\p{Lo}|\p{Lt}|\p{Nl})(\p{Lu}|\p{Ll}|\p{Lo}|\p{Lt}|\p{Nl}|\p{Mn}|\p{M
16 
c}|\p{Nd}|\p{Lm}|_)*" 
17 
  } 
18 
ds_ST_NameUnique = 
19 
  xsd:ID { 
20 
    pattern = 
21 
      
22 
"(\p{Lu}|\p{Ll}|\p{Lo}|\p{Lt}|\p{Nl})(\p{Lu}|\p{Ll}|\p{Lo}|\p{Lt}|\p{Nl}|\p{Mn}|\p{M
23 
c}|\p{Nd}|\p{Lm}|_)*" 
24 
  } 
25 
ds_ST_IntGEOne = xsd:int { minInclusive = "1" } 
26 
ds_DocumentStructure = 
27 
  element DocumentStructure { ds_CT_DocumentStructure } 
28 
ds_DocumentStructure.Outline = 
29 
  element DocumentStructure.Outline { ds_CT_CP_Outline } 
30 
ds_DocumentOutline = element DocumentOutline { ds_CT_DocumentOutline } 
31 
ds_OutlineEntry = element OutlineEntry { ds_CT_OutlineEntry } 
32 
ds_Story = element Story { ds_CT_Story } 
33 
ds_StoryFragmentReference = 
34 
  element StoryFragmentReference { ds_CT_StoryFragmentReference } 
35 
ds_AG_DocumentOutline = xml_lang 
36 
ds_AG_OutlineEntry = 
37 
   
38 
  ## default value: 1 
39 
  attribute OutlineLevel { ds_ST_IntGEOne }?, 
40 
  attribute OutlineTarget { xsd:anyURI }, 
41 
  attribute Description { xsd:string }, 
42 
  xml_lang? 
43 

B. Schemas – RELAX NG 
ECMA-388 
386 
First Edition, June 2009 
ds_AG_Story = attribute StoryName { xsd:string } 
44 
ds_AG_StoryFragmentReference = 
45 
  attribute FragmentName { xsd:string }?, 
46 
  attribute Page { ds_ST_IntGEOne } 
47 
ds_CT_StoryFragments = ds_StoryFragment+ 
48 
ds_CT_StoryFragment = 
49 
  ds_AG_StoryFragment, 
50 
  ds_StoryBreak?, 
51 
  (ds_SectionStructure 
52 
   | ds_ParagraphStructure 
53 
   | ds_ListStructure 
54 
   | ds_TableStructure 
55 
   | ds_FigureStructure)+, 
56 
  ds_StoryBreak? 
57 
ds_CT_Break = empty 
58 
ds_CT_Section = 
59 
  (ds_ParagraphStructure 
60 
   | ds_ListStructure 
61 
   | ds_TableStructure 
62 
   | ds_FigureStructure)+ 
63 
ds_CT_Paragraph = (ds_NamedElement)* 
64 
ds_CT_Table = (ds_TableRowGroupStructure)+ 
65 
ds_CT_TableRowGroup = (ds_TableRowStructure)+ 
66 
ds_CT_TableRow = (ds_TableCellStructure)+ 
67 
ds_CT_TableCell = 
68 
  ds_AG_TableCell, 
69 
  (ds_ParagraphStructure 
70 
   | ds_ListStructure 
71 
   | ds_TableStructure 
72 
   | ds_FigureStructure)* 
73 
ds_CT_List = (ds_ListItemStructure)+ 
74 
ds_CT_ListItem = 
75 
  ds_AG_ListItem, 
76 
  (ds_ParagraphStructure 
77 
   | ds_ListStructure 
78 
   | ds_TableStructure 
79 
   | ds_FigureStructure)* 
80 
ds_CT_Figure = (ds_NamedElement)* 
81 
ds_CT_NamedElement = ds_AG_NamedElement 
82 
ds_ST_FragmentType = "Content" | "Header" | "Footer" 
83 
ds_ST_TableSpan = xsd:int { minInclusive = "1" } 
84 
ds_StoryFragments = element StoryFragments { ds_CT_StoryFragments } 
85 
ds_StoryFragment = element StoryFragment { ds_CT_StoryFragment } 
86 
ds_StoryBreak = element StoryBreak { ds_CT_Break } 
87 
ds_SectionStructure = element SectionStructure { ds_CT_Section } 
88 
ds_ParagraphStructure = element ParagraphStructure { ds_CT_Paragraph } 
89 
ds_TableStructure = element TableStructure { ds_CT_Table } 
90 
ds_TableRowGroupStructure = 
91 
  element TableRowGroupStructure { ds_CT_TableRowGroup } 
92 
ds_TableRowStructure = element TableRowStructure { ds_CT_TableRow } 
93 
ds_TableCellStructure = element TableCellStructure { ds_CT_TableCell } 
94 
ds_ListStructure = element ListStructure { ds_CT_List } 
95 
ds_ListItemStructure = element ListItemStructure { ds_CT_ListItem } 
96 
ds_FigureStructure = element FigureStructure { ds_CT_Figure } 
97 
ds_NamedElement = element NamedElement { ds_CT_NamedElement } 
98 

ECMA-388 
B. Schemas – RELAX NG 
 
 First Edition, June 2009 
387 
ds_AG_StoryFragment = 
99 
  attribute StoryName { xsd:string }?, 
100 
  attribute FragmentName { xsd:string }?, 
101 
  attribute FragmentType { ds_ST_FragmentType } 
102 
ds_AG_TableCell = 
103 
   
104 
  ## default value: 1 
105 
  attribute RowSpan { ds_ST_TableSpan }?, 
106 
   
107 
  ## default value: 1 
108 
  attribute ColumnSpan { ds_ST_TableSpan }? 
109 
ds_AG_ListItem = attribute Marker { ds_ST_NameUnique }? 
110 
ds_AG_NamedElement = attribute NameReference { ds_ST_Name } 
111 


ECMA-388 
B. Schemas – RELAX NG 
 
 First Edition, June 2009 
389 
B.7 
Discard Control 
The schema shown below is also provided in electronic form as a file named 
OpenXPSDiscardControl.rnc, which is contained in an accompanying zip archive named 
"OpenXPS RELAX NG Schemas.zip". If discrepancies exist between the representation as 
published below and the corresponding electronic version, the published version below is the 
definitive version. 
 
default namespace = 
1 
  "http://schemas.openxps.org/oxps/v1.0/discard-control" 
2 
namespace dc = "http://schemas.openxps.org/oxps/v1.0/discard-control" 
3 
namespace xs = "http://www.w3.org/2001/XMLSchema" 
4 
 
5 
dc_CT_DiscardControl = dc_Discard* 
6 
dc_CT_Discard = 
7 
  attribute SentinelPage { xsd:anyURI }, 
8 
  attribute Target { xsd:anyURI } 
9 
dc_DiscardControl = element DiscardControl { dc_CT_DiscardControl } 
10 
dc_Discard = element Discard { dc_CT_Discard } 
11 

B. Schemas – RELAX NG 
ECMA-388 
390 
First Edition, June 2009 
B.8 
3D-Graphic Content 
The schema shown below is also provided in electronic form as a file named OpenXPS3D.rnc, 
which is contained in an accompanying zip archive named "OpenXPS RELAX NG Schemas.zip". 
If discrepancies exist between the representation as published below and the corresponding 
electronic version, the published version below is the definitive version. 
 
default namespace o3d = "http://schemas.openxps.org/oxps-3d/v1.0" 
1 
namespace oxps = "http://schemas.openxps.org/oxps/v1.0" 
2 
namespace x = 
3 
  "http://schemas.openxps.org/oxps/v1.0/resourcedictionary-key" 
4 
namespace xs = "http://www.w3.org/2001/XMLSchema" 
5 
 
6 
o3d_CT_Brush3D = o3d_AG_Brush3D, oxps_ImageBrush.Transform? 
7 
o3d_Brush3D = element Brush3D { empty } 
8 
o3d_AG_Brush3D = 
9 
  attribute Source3D { o3d_ST_UriImage3D }, 
10 
  x_Key?, 
11 
  attribute Transform { oxps_ST_RscRefMatrix }?, 
12 
  attribute Viewbox { oxps_ST_ViewBox }, 
13 
  attribute Viewport { oxps_ST_ViewBox }, 
14 
  attribute ViewboxUnits { oxps_ST_ViewUnits }, 
15 
  attribute ViewportUnits { oxps_ST_ViewUnits } 
16 
o3d_ST_UriImage3D = xsd:anyURI { pattern = "([^\{].*)?" } 
17 
End of informative text. 

ECMA-388 
C. Abbreviated Geometry Syntax Algorithm 
 
 First Edition, June 2009 
391 
C. Abbreviated Geometry Syntax Algorithm 
A path geometry specified using the abbreviated geometry syntax (see §11.2.3) is equivalent 
to a path specified using a path geometry. The following algorithm describes how the 
abbreviated path syntax can be transformed into a path geometry containing path figures that, 
in turn, contain various segments.  
This algorithm assumes that the presented string is well-formed according to the markup 
schema. Whitespace skipping is assumed without being explicitly spelled out in the algorithm. 
Let CURRENTPOINT = 0,0 
Create a new PathGeometry PG 
PG.FillRule = EvenOdd 
Let CURRENTPATHFIGURE = undefined 
 
Read input character CH 
 
if ( CH == 'F' ) 
{ 
   Read input character CH 
   if ( CH == '0' ) 
   { 
     PG.FillRule = EvenOdd 
   } 
   else 
   { 
     PG.FillRule = NonZero 
   } 
} 
else 
{ 
   GOTO label_first 
} 
 
label_repeat: 
Read input character CH 
 
label_first: 
 
if ( CH == 'm' ) 
{ 
   Read relative coordinate pair DX,DY 
   Let CURRENTPOINT.X = CURRENTPOINT.X + DX 
   Let CURRENTPOINT.Y = CURRENTPOINT.Y + DY 
   Create a new PathFigure CURRENTPATHFIGURE and add to PG 
   Let attribute CURRENTPATHFIGURE.StartPoint = CURRENTPOINT 
} 
else if ( CH == 'M' ) 
{ 
   Read coordinate pair X,Y 
   Let CURRENTPOINT.X = X 
   Let CURRENTPOINT.Y = Y 
   Create a new PathFigure CURRENTPATHFIGURE and add to PG 
   Let attribute CURRENTPATHFIGURE.StartPoint = CURRENTPOINT 
} 
else if ( CH == 'l' ) 
   { 
      Create new PolyLineSegment S 
      Add S to CURRENTPATHFIGURE 
label_1:    
 
 
 
 
      Read relative coordinate pair DX,DY 
      Let CURRENTPOINT.X = CURRENTPOINT.X + DX 
      Let CURRENTPOINT.Y = CURRENTPOINT.Y + DY 

C. Abbreviated Geometry Syntax Algorithm 
ECMA-388 
392 
First Edition, June 2009 
      Add CURRENTPOINT.X,CURRENTPOINT.Y to end of S.Points attribute list 
      if ( next character is not a letter )  
      { 
       
GOTO label_1 
      } 
   }    
 
 
 
   else if ( CH == 'L' ) 
   { 
      Create new PolyLineSegment S 
      Add S to CURRENTPATHFIGURE 
label_2:    
 
 
 
      Read coordinate pair X,Y 
      Let CURRENTPOINT.X = X 
      Let CURRENTPOINT.Y = Y 
      Add CURRENTPOINT.X,CURRENTPOINT.Y to end of S.Points attribute list 
      if ( next character is not a letter )  
      { 
         GOTO label_2 
      } 
   } 
   else if ( CH == 'h' ) 
   { 
      Create new PolyLineSegment S 
      Add S to CURRENTPATHFIGURE 
label_3:       
      Read relative coordinate value DX 
      Let CURRENTPOINT.X = CURRENTPOINT.X + DX 
      Add CURRENTPOINT.X,CURRENTPOINT.Y to end of S.Points attribute list 
      if ( next character is not a letter )  
      { 
         GOTO label_3 
      } 
   } 
   else if ( CH == 'H' ) 
   { 
      Create new PolyLineSegment S 
      Add S to CURRENTPATHFIGURE 
label_4:       
      Read coordinate value X 
      Let CURRENTPOINT.X = X 
      Add CURRENTPOINT.X,CURRENTPOINT.Y to end of S.Points attribute list 
      if ( next character is not a letter )  
      { 
         GOTO label_4 
      } 
   } 
   else if ( CH == 'v' ) 
   { 
      Create new PolyLineSegment S 
      Add S to CURRENTPATHFIGURE 
label_5:       
      Read relative coordinate value DY 
      Let CURRENTPOINT.Y = CURRENTPOINT.Y + DY 
      Add CURRENTPOINT.X,CURRENTPOINT.Y to end of S.Points attribute list 
      if ( next character is not a letter )  
      { 
         GOTO label_5 
      } 
   } 
   else if ( CH == 'V' ) 
   { 
      Create new PolyLineSegment S 
      Add S to CURRENTPATHFIGURE 
label_6:       
      Read coordinate value Y 
      Let CURRENTPOINT.Y = Y 
      Add CURRENTPOINT.X,CURRENTPOINT.Y to end of S.Points attribute list 
      if ( next character is not a letter )  
      { 

ECMA-388 
C. Abbreviated Geometry Syntax Algorithm 
 
 First Edition, June 2009 
393 
         GOTO label_6 
      } 
   } 
   else if ( CH == 'c' ) 
   { 
      Create new PolyBezierSegment S 
      Add S to CURRENTPATHFIGURE 
label_7:       
      Read relative coordinate pair DX,DY 
      Let POINT.X = CURRENTPOINT.X + DX 
      Let POINT.Y = CURRENTPOINT.Y + DY 
      Add POINT.X, POINT.Y to end of S.Points attribute list  
      Read coordinate pair DX,DY 
      Let POINT.X = CURRENTPOINT.X + DX 
      Let POINT.Y = CURRENTPOINT.Y + DY 
      Add POINT.X, POINT.Y to end of S.Points attribute list 
      Read coordinate pair DX,DY 
      Let CURRENTPOINT.X = CURRENTPOINT.X + DX 
      Let CURRENTPOINT.Y = CURRENTPOINT.Y + DY 
      Add CURRENTPOINT.X,CURRENTPOINT.Y to end of S.Points attribute list 
      if ( next character is not a letter )  
      { 
         GOTO label_7 
      } 
   } 
   else if ( CH == 'C' ) 
   { 
      Create new PolyBezierSegment S 
      Add S to CURRENTPATHFIGURE 
label_8:       
      Read coordinate pair X,Y 
      Let POINT.X = X 
      Let POINT.Y = Y 
      Add POINT.X, POINT.Y to end of S.Points attribute list  
      Read coordinate pair X,Y 
      Let POINT.X = X 
      Let POINT.Y = Y 
      Add POINT.X, POINT.Y to end of S.Points attribute list 
      Read coordinate pair X,Y 
      Let CURRENTPOINT.X = X 
      Let CURRENTPOINT.Y = Y 
      Add CURRENTPOINT.X,CURRENTPOINT.Y to end of S.Points attribute list 
      if ( next character is not a letter )  
      { 
         GOTO label_8 
      } 
   } 
   else if ( CH == 'q' ) 
   { 
      Create new PolyQuadraticBezierSegment S 
      Add S to CURRENTPATHFIGURE 
label_9:       
      Read relative coordinate pair DX,DY 
      Let POINT.X = CURRENTPOINT.X + DX 
      Let POINT.Y = CURRENTPOINT.Y + DY 
      Add POINT.X, POINT.Y to end of S.Points attribute list  
      Read relative coordinate pair DX,DY 
      Let CURRENTPOINT.X = CURRENTPOINT.X + DX 
      Let CURRENTPOINT.Y = CURRENTPOINT.Y + DY 
      Add CURRENTPOINT.X,CURRENTPOINT.Y to end of S.Points attribute list 
      if ( next character is not a letter )  
      { 
         GOTO label_9 
      } 
   } 
   else ( if CH == 'Q' ) 
   { 
      Create new PolyQuadraticBezierSegment S 

C. Abbreviated Geometry Syntax Algorithm 
ECMA-388 
394 
First Edition, June 2009 
      Add S to CURRENTPATHFIGURE 
label_10:       
      Read coordinate pair X,Y 
      Let POINT.X = X 
      Let POINT.Y = Y 
      Add POINT.X, POINT.Y to end of S.Points attribute list  
      Read coordinate pair X,Y 
      Let CURRENTPOINT.X = X 
      Let CURRENTPOINT.Y = Y 
      Add CURRENTPOINT.X,CURRENTPOINT.Y to end of S.Points attribute list 
      if ( next character is not a letter )  
      { 
         GOTO label_10 
      } 
   } 
   else if ( CH == 's' ) 
   { 
      Create new PolyBezierSegment S 
      Add S to CURRENTPATHFIGURE 
label_11:       
      if ( S.Points is non-empty ) 
      { 
         Let LASTCTRLPOINT = Point before last point in S.Points 
         Let POINT.X = 2 * CURRENTPOINT.X - LASTCTRLPOINT.X 
         Let POINT.Y = 2 * CURRENTPOINT.Y - LASTCTRLPOINT.Y 
      } 
      else if ( segment before CURRENTPATHSEGMENT is a PolyBezierSegment ) 
      { 
         Let LASTCTRLPOINT = Point before last point in previous PolyBezierSegment  
         Let POINT.X = 2 * CURRENTPOINT.X - LASTCTRLPOINT.X 
         Let POINT.Y = 2 * CURRENTPOINT.Y - LASTCTRLPOINT.Y 
      } 
      else 
      { 
         Let POINT = CURRENTPOINT 
      } 
       
      Add POINT.X, POINT.Y to end of S.Points attribute list  
      Read relative coordinate pair DX,DY 
      Let POINT.X = CURRENTPOINT.X + DX 
      Let POINT.Y = CURRENTPOINT.Y + DY 
      Add POINT.X, POINT.Y to end of S.Points attribute list  
      Read relative coordinate pair DX,DY 
      Let CURRENTPOINT.X = CURRENTPOINT.X + DX 
      Let CURRENTPOINT.Y = CURRENTPOINT.Y + DY 
      Add CURRENTPOINT.X,CURRENTPOINT.Y to end of S.Points attribute list 
      if ( next character is not a letter )  
      { 
         GOTO label_11 
      } 
    } 
   else if ( CH == 'S' ) 
   { 
      Create new PolyBezierSegment S 
      Add S to CURRENTPATHFIGURE 
label_12:       
      if ( S.Points is non-empty ) 
      { 
         Let LASTCTRLPOINT = Point before last point in S.Points 
         Let POINT.X = 2 * CURRENTPOINT.X - LASTCTRLPOINT.X 
         Let POINT.Y = 2 * CURRENTPOINT.Y - LASTCTRLPOINT.Y 
      } 
      else if ( segment before CURRENTPATHSEGMENT is a PolyBezierSegment ) 
      { 
         Let LASTCTRLPOINT = S.Point before last point in previous PolyBezierSegment  
         Let POINT.X = 2 * CURRENTPOINT.X - LASTCTRLPOINT.X 
         Let POINT.Y = 2 * CURRENTPOINT.Y - LASTCTRLPOINT.Y 
      } 
      else 

ECMA-388 
C. Abbreviated Geometry Syntax Algorithm 
 
 First Edition, June 2009 
395 
      { 
         Let POINT = CURRENTPOINT 
      } 
          
      Add POINT.X, POINT.Y to end of S.Points attribute list  
      Read coordinate pair X,Y 
      Let POINT.X = X 
      Let POINT.Y = Y 
      Add POINT.X, POINT.Y to end of S.Points attribute list  
      Read coordinate pair X,Y 
      Let CURRENTPOINT.X = X 
      Let CURRENTPOINT.Y = Y 
      Add CURRENTPOINT.X,CURRENTPOINT.Y to end of S.Points attribute list 
      if ( next character is not a letter )  
      { 
         GOTO label_12 
      } 
   } 
   else if ( CH == 'a' ) 
   { 
label_13:    
      Create new ArcSegment S 
      Add S to CURRENTPATHFIGURE 
      Read Radius Pair RX,RY 
      Read Rotation ROT 
      Read integer FLAG1 
      Read integer FLAG2 
      Read relative coordinate pair DX,DY 
      Let CURRENTPOINT.X = CURRENTPOINT.X + DX 
      Let CURRENTPOINT.Y = CURRENTPOINT.Y + DY 
      Let S.Point = CURRENTPOINT.X,CURRENTPOINT.Y 
      Let S.IsLargeArc = (FLAG1 == 1 ? true : false) 
      Let S.SweepDirection = (FLAG2 == 1 ? Clockwise : Counterclockwise) 
      Let S.RotationAngle = ROT 
      Let S.Size = RX, RY 
      if ( next character is not a letter )  
      { 
         GOTO label_13 
      } 
   } 
   else if ( CH == 'A' ) 
   { 
label_14:    
      Create new ArcSegment S 
      Add S to CURRENTPATHFIGURE 
      Read Radius Pair RX,RY 
      Read Rotation ROT 
      Read integer FLAG1 
      Read integer FLAG2 
      Read coordinate pair X,Y 
      Let CURRENTPOINT.X = X 
      Let CURRENTPOINT.Y = Y 
      Let S.Point = CURRENTPOINT.X,CURRENTPOINT.Y 
      Let S.IsLargeArc = (FLAG1 == 1 ? true : false) 
      Let S.SweepDirection = (FLAG2 == 1 ? Clockwise : Counterclockwise) 
      Let S.RotationAngle = ROT 
      Let S.Size = RX, RY 
      if ( next character is not a letter )  
      { 
         GOTO label_14 
      } 
   } 
   else if ( CH == 'z' or CH == 'Z' ) 
   { 
      Let attribute CURRENTPATHFIGURE.IsClosed = true 
      Let CURRENTPOINT = First point of first segment of CURRENTPATHFIGURE 
      Let CURRENTPATHFIGURE = undefined 
   } 

C. Abbreviated Geometry Syntax Algorithm 
ECMA-388 
396 
First Edition, June 2009 
/* This case can not occur, because the input is assumed to be well-formed according to the markup 
schema 
   else 
   { 
      ERROR: Invalid input character 
 
 
   } 
   */     
    
   if ( End of input reached ) 
   { 
      Terminate algorithm, return PG 
   } 
   else 
   { 
      GOTO label_repeat 
   } 

ECMA-388 
D. Standard Namespaces and Content Types 
 
 First Edition, June 2009 
397 
D. Standard Namespaces and Content Types 
The following tables list the namespaces and content types used in OpenXPS packages and 
OpenXPS Documents. 
D.1 
XML Namespace URIs 
Table D–1. Package-wide namespaces 
Description 
Namespace URI 
Content Types 
http://schemas.openxmlformats.org/package/2006/content-types 
Core Properties 
http://schemas.openxmlformats.org/package/2006/metadata/core-
properties 
Digital Signatures 
http://schemas.openxmlformats.org/package/2006/digital-signature 
Relationships 
http://schemas.openxmlformats.org/package/2006/relationships 
Markup 
Compatibility 
http://schemas.openxmlformats.org/markup-compatibility/2006 
Table D–2. OpenXPS Document namespaces 
Description 
Namespace URI 
DiscardControl  
http://schemas.openxps.org/oxps/v1.0/discard-
control  
Document Structure 
http://schemas.openxps.org/oxps/v1.0/documentstru
cture 
FixedDocument 
http://schemas.openxps.org/oxps/v1.0 
FixedDocumentSeque
nce 
http://schemas.openxps.org/oxps/v1.0 
FixedPage 
http://schemas.openxps.org/oxps/v1.0 
Resource Dictionary  
(Key attribute) 
http://schemas.openxps.org/oxps/v1.0/resourcedictio
nary-key 
Signature Definitions 
http://schemas.openxps.org/oxps/v1.0/signature-
definitions 
Story Fragments 
http://schemas.openxps.org/oxps/v1.0/documentstru
cture 
3D Graphics Content 
http://schemas.openxps.org/oxps-3d/v1.0 

D. Standard Namespaces and Content Types 
ECMA-388 
398 
First Edition, June 2009 
D.2 
Content Types 
The content types in the tables below MUST be used by producers without parameters  
[M12.8]. If a consumer encounters the presence of parameters on these content types when 
the affected part is accessed it MUST instantiate an error condition [M12.7]. 
Table D–3. Package-wide content types 
Description 
Content type 
Core Properties part 
application/vnd.openxmlformats-package.core-
properties+xml 
Digital Signature Certificate part 
application/vnd.openxmlformats-
package.digital-signature-certificate 
Digital Signature Origin part 
application/vnd.openxmlformats-
package.digital-signature-origin 
Digital Signature XML Signature part application/vnd.openxmlformats-
package.digital-signature-xmlsignature+xml 
Relationships part 
application/vnd.openxmlformats-
package.relationships+xml 
SignatureDefinitions 
application/vnd.ms-package.xps-
signaturedefinitions+xml 
Table D–4. OpenXPS Document content types 
Description 
Content type 
FixedDocument  
application/vnd.ms-package.xps-fixeddocument+xml 
FixedDocumentSequence 
application/vnd.ms-package.xps-
fixeddocumentsequence+xml 
FixedPage 
application/vnd.ms-package.xps-fixedpage+xml 
DiscardControl 
application/vnd.ms-package.xps-discard-control+xml 
DocumentStructure 
application/vnd.ms-package.xps-
documentstructure+xml 
Font 
application/vnd.ms-opentype 
ICC profile 
application/vnd.ms-color.iccprofile 
JPEG image 
image/jpeg 
Obfuscated font 
application/vnd.ms-package.obfuscated-opentype 
PNG image 
image/png 
Remote resource dictionary application/vnd.ms-package.xps-
resourcedictionary+xml 
StoryFragments 
application/vnd.ms-package.xps-storyfragments+xml 
TIFF image 
image/tiff 
Thumbnail part 
image/jpeg or image/png 
JPEG XR image 
image/vnd.ms-photo 
X3D image unicode 
model/x3d+xml 

ECMA-388 
D. Standard Namespaces and Content Types 
 
 First Edition, June 2009 
399 
Description 
Content type 
X3D image binary encoding model/x3d+binary 
D.3 
Relationship Types 
Table D–5. Package-wide relationship types 
Description 
Relationship type 
Core Properties  
http://schemas.openxmlformats.org/package/2006/rela
tionships/metadata/core-properties 
Digital Signature  
http://schemas.openxmlformats.org/package/2006/rela
tionships/digital-signature/signature 
Digital Signature 
Certificate  
http://schemas.openxmlformats.org/package/2006/rela
tionships/digital-signature/certificate 
Digital Signature 
Origin 
http://schemas.openxmlformats.org/package/2006/rela
tionships/digital-signature/origin 
Thumbnail 
http://schemas.openxmlformats.org/package/2006/rela
tionships/metadata/thumbnail 
Table D–6. OpenXPS Document relationship types 
Description 
Relationship type 
Digital Signature Definitions http://schemas.openxps.org/oxps/v1.0/signature-definitions 
DiscardControl 
http://schemas.openxps.org/oxps/v1.0/discard-control 
DocumentStructure 
http://schemas.openxps.org/oxps/v1.0/documentstructure 
PrintTicket 
http://schemas.openxps.org/oxps/v1.0/printticket 
Required Resource 
http://schemas.openxps.org/oxps/v1.0/required-resource  
Restricted Font 
http://schemas.openxps.org/oxps/v1.0/restricted-font 
StartPart 
http://schemas.openxps.org/oxps/v1.0/fixedrepresentation  
StoryFragments 
http://schemas.openxps.org/oxps/v1.0/storyfragments 


ECMA-388 
E. Recommended File Name Extension and Content Types 
 
 First Edition, June 2009 
401 
E. Recommended File Name Extension and Content 
Types 
This annex provides details for implementations and external systems to consistently identify 
OpenXPS Documents. 
E.1 
Identification of OpenXPS Documents 
Implementations are anticipated for multiple operating systems, including operating systems 
that use the concept of filename extension and/or content type to identify the format of files for 
processing. When required by such systems, and to enable interoperability with such systems, 
implementations SHOULD use a filename extension or termination sequence of .oxps and a 
content type of application/oxps [S14.1].  
To avoid conflicts between OpenXPS Documents defined in this Standard and legacy formats, 
producers MUST NOT create OpenXPS Documents with filenames that end in the uppercase, 
lowercase, or mixed-case sequence .xps [M14.1]. Implementations SHOULD NOT use 
application/vnd.ms-xpsdocument to identify OpenXPS Documents [S14.3]. 
E.2 
Embedding Producer Identification 
Producers SHOULD include an XML comment immediately following the start-tag of the 
FixedPage element. This comment SHOULD include details of the organization, product, and 
version that created the content [S14.2] with the intention that this could be used as an aid in 
the diagnosis of problem content. 
[Example: 
<FixedPage Width="816" Height="1056"  
  xmlns="http://schemas.openxps.org/oxps/v1.0" xml:lang="en-US"> 
  <!--Generated by: Henri Fazy A.G, Papon Café, Version: 3.14159265 --> 
  <Glyphs Fill="#ff000000"  
    FontUri="/Documents/1/Resources/Fonts/times.ttf" FontRenderingEmSize="12" 
      OriginX="348" OriginY="106.4" UnicodeString="Good food indeed." /> 
</FixedPage> 
end example] 
E.3 
Determination of OPC payload 
This subclause is informative 
OpenXPS Documents follow requirements set out in this Standard, as well as other normative 
references including the Open Packaging Conventions. Implementations may use the following 
steps to identify an unknown file or stream as an OpenXPS Document within an Open Packaging 
Conventions payload. 
1. Test that the file or stream is a ZIP file 
a. As required by §9.2 of the Open Packaging Conventions  

E. Recommended File Name Extension and Content Types 
ECMA-388 
402 
First Edition, June 2009 
b. First four bytes correspond to the local file header signature defined in the .ZIP File 
Format Specification from PKWARE, Inc., version 6.2.0 (2004)  
2. Test that a valid Package Relationships zip item exists 
a. As required by §8.3.4 of the Open Packaging Conventions 
b. Check that the content type for the package relationships zip item is correctly defined 
in the Content Types stream (see OPC §8.1.2) as a relationships part 
3. Test that the Package Relationships Part contains a relationship (see OPC §8.3) whose 
Target attribute points to a valid FixedDocumentSequence Part 
a. As required by §10.2 of this Standard 
b. Check that the content type for the FixedDocumentSequence part is correctly defined 
in the Content Types stream as a FixedDocumentSequence part 
End of informative text. 

ECMA-388 
F. Conformance Requirements 
 
 First Edition, June 2009 
403 
F. Conformance Requirements 
This annex is informative 
This annex restates the conformance requirements for producers and consumers implementing 
the Open XML Paper Specification. This restatement does not include conformance 
requirements from normative references such as ECMA-376:2006. 
In this annex, conformance requirements are divided into up to three tables per clause, 
respectively containing the conformance requirements that implementations must follow, those 
that they should follow, and those that are optional. Each conformance requirement is given a 
unique ID comprised of a letter (M indicates MUST; S indicates SHOULD; and O indicates 
OPTIONAL), a requirements group number, and a unique ID within that clause. 
Implementations can use these IDs to report error conditions. If a requirement is removed from 
this Standard, its ID will not be reused for any newly added requirement.  
F.1 
Implementation Conformance 
F.1.1 
MUST Conformance Requirements 
Table F–1. Implementation MUST conformance requirements 
ID 
Rule 
Reference 
M0.1 A conforming consumer MUST interpret and process the contents of OpenXPS 
Document instances in a manner conforming to this Standard. 
2.2 
M0.2 A conforming consumer is NOT REQUIRED to interpret or process all of the 
content in an OpenXPS Document instance. 
2.2 
M0.3 A conforming consumer MUST NOT instantiate an error condition in response to 
OpenXPS Document content conforming to this Standard. 
2.2 
M0.4 When “OPTIONAL” or “RECOMMENDED” features contained within OpenXPS 
Document instances are accessed by a consumer, the consumer MUST 
interpret and process those features in a manner conforming to this Standard. 
2.2 
M0.5 Any OpenXPS Document instances a conforming producer creates MUST 
conform to this Standard. 
2.2 
M0.6 A conforming producer MUST NOT introduce any non-conforming OpenXPS 
Document content when modifying an OpenXPS Document instance 
2.2 
M0.7 When a conforming producer chooses to use an “OPTIONAL” or 
“RECOMMENDED” feature in an OpenXPS Document instance, then the 
producer MUST create or modify that feature in a manner conforming to this 
Standard 
2.2 
F.1.2 
SHOULD Conformance Requirements 
Table F–2. Implementation SHOULD conformance requirements 
ID 
Rule 
Reference 
S0.1 A conformant consumer SHOULD instantiate an error condition when OpenXPS 
Document content not conforming to this Standard is encountered 
2.2 

F. Conformance Requirements 
ECMA-388 
404 
First Edition, June 2009 
F.2 
OpenXPS Document Format 
F.2.1 
MUST Conformance Requirements 
Table F–3. OpenXPS Document format MUST conformance requirements 
ID 
Rule 
Reference 
M1.1 OpenXPS Documents MUST observe all conformance requirements of the OPC 
Standard, except where specifically noted otherwise in this Standard. 
8, 9.2 
M1.2 The OpenXPS Document format MUST use a ZIP archive for its physical model. 
8.2 
F.2.2 
SHOULD Conformance Requirements 
Table F–4. OpenXPS Document format SHOULD conformance requirements 
ID 
Rule 
Reference 
S1.1 OpenXPS Documents SHOULD observe all recommendations of the OPC 
Standard, except where indicated otherwise . 
8 
F.3 
Parts and Relationships 
F.3.1 
MUST Conformance Requirements 
Table F–5. Parts and Relationships MUST conformance requirements 
ID 
Rule 
Reference 
M2.1 
All content to be rendered MUST be contained in the OpenXPS Document. 
9.1, 
9.1.1,9.1.
5, 9.1.7 
M2.2 
Each part contained in an OpenXPS Document MUST use only the 
appropriate content type. 
9.1, 
9.1.7.3 
M2.3 
An OpenXPS Document MUST contain exactly one FixedDocumentSequence 
part per fixed payload. 
9.1, 9.1.2 
M2.4 
An OpenXPS Document MUST contain at least one FixedDocument part per 
fixed payload. 
9.1 
M2.5 
An OpenXPS Document MUST contain at least one FixedPage part per fixed 
payload. 
9.1 
M2.6 
A <Glyphs> element in FixedPage markup MUST reference a Font part that 
exists in the OpenXPS Document. 
9.1 
M2.7 
An <ImageBrush> element in FixedPage markup MUST reference an Image 
part that exists in the OpenXPS Document. 
9.1 
M2.8 
If FixedPage markup references a Remote Resource Dictionary part, it 
MUST be included in the OpenXPS Document 
9.1 
M2.9 
This requirement was removed prior to Edition 1 of this Standard. 
 

ECMA-388 
F. Conformance Requirements 
 
 First Edition, June 2009 
405 
ID 
Rule 
Reference 
M2.10 Resources, which include fonts, images, color profiles, and remote resource 
dictionaries, that are referenced by URIs in FixedPage markup MUST use 
the Required Resource relationship from the FixedPage to the resource. If 
any resource references other resources, the producer MUST also use the 
Required Resource relationship from the FixedPage part to the indirectly 
referenced resource. 
9.1.1, 
9.1.5, 
9.1.7, 
15.2.3, 
15.2.4, 
15.2.5, 
15.2.6, 
15.3.7 
M2.11 This requirement was removed prior to Edition 1 of this Standard. 
 
M2.12 A Restricted Font relationship is REQUIRED for each print and preview font 
used, from the FixedDocument part to the preview and print Font part. 
9.1.1, 
9.1.7.2, 
9.1.7.4 
M2.13 Exactly one StartPart relationship is REQUIRED.  
9.1.1 
M2.14 The StartPart relationship MUST point from the package to the 
FixedDocumentSequence part that is the primary fixed payload root. 
9.1, 9.1.1 
M2.15 The order of <DocumentReference> elements in a 
FixedDocumentSequence part MUST be preserved. 
9.1.2 
M2.16 The order of <PageContent> elements in a FixedDocument MUST be 
preserved. 
9.1.3 
M2.17 JPEG image parts MUST contain images that are compressed according  to 
ITU-T T.81. 
9.1.5.1 
M2.18 PNG image parts MUST contain images that conform to the PNG 
specification. 
9.1.5.2 
M2.19 The PNG ancillary chunk tRNS MUST be supported. 
9.1.5.2 
M2.20 The PNG ancillary chunk iCCP MUST be supported. 
9.1.5.2 
M2.21 The PNG ancillary chunk sRGB MUST be ignored. 
9.1.5.2 
M2.22 The PNG ancillary chunk cHRM MUST be ignored. 
9.1.5.2 
M2.23 The PNG ancillary chunk gAMA MUST be ignored. 
9.1.5.2 
M2.24 The PNG ancillary chunk sBIT MUST be ignored. 
9.1.5.2 
M2.25 TIFF image parts MUST contain images that conform to the TIFF 
specification 
9.1.5.3 
M2.26 
OpenXPS Document consumers MUST support baseline TIFF  6.0 with the 
tag values described in Table 9–5 for the specified TIFF image types, 
excepting the tags described in §9.1.5.3. 
9.1.5.3 
M2.27 If a TIFF file contains multiple image file directories (IFDs), consumers 
MUST use only the first IFD and ignore all others. 
9.1.5.3 
M2.28 OpenXPS Document consumers MUST support TIFF images using CCITT 
bilevel encoding. 
9.1.5.3 
M2.29 OpenXPS Document consumers MUST support CMYK TIFF images. 
9.1.5.3 
M2.30 OpenXPS Document consumers MUST support TIFF images with associated 
alpha data. If the ExtraSamples tag is 1, the alpha is treated as pre-
multiplied alpha. With an ExtraSamples tag of 2, the alpha is treated as 
non-pre-multiplied alpha. 
9.1.5.3 

F. Conformance Requirements 
ECMA-388 
406 
First Edition, June 2009 
ID 
Rule 
Reference 
M2.31 OpenXPS Document consumers MUST support TIFF images using LZW 
compression. 
9.1.5.3 
M2.32 OpenXPS Document consumers MUST support TIFF images using 
differencing predictors. 
9.1.5.3 
M2.33 OpenXPS Document consumers MUST support TIFF images using JPEG 
compression (compression mode 7 only). 
9.1.5.3 
M2.34 OpenXPS Document consumers MUST support TIFF images with an 
embedded ICC profile. 
9.1.5.3 
M2.35 JPEG XR image parts MUST conform to the JPEG XR specification. 
9.1.5.4 
M2.36 Each FixedPage part MUST NOT have more than one thumbnail part 
attached. 
9.1.6 
M2.37 Thumbnails MUST be either JPEG or PNG images 
9.1.6 
M2.38 If using a fragment in the FontURI attribute of the <Glyphs> element to 
indicate the font face to use from a TrueType Collection, the attribute value 
MUST be an integer between 0 and n–1 inclusive, where n is the number of 
font faces in the TrueType Collection. 
9.1.7 
M2.39 OpenXPS Documents MUST support the OpenType font format (ISO/IEC 
14496-22:2007), including TrueType and CFF fonts. 
Although a subsetted font does not contain all the glyphs in the original 
font, it MUST be a valid Open Font Format file. 
9.1.7, 
9.1.7.1 
M2.40 Producers MUST observe the guidelines and mechanisms described in 
§9.1.7.2 in order to honor the licensing rights specified in Open Font 
Format fonts. 
9.1.7.2 
M2.41 Consumers MUST be able to process OpenXPS Documents using any 
combination of the embedding and obfuscation mechanisms described in 
§9.1.7.2 even if produced in violation of the production requirements. 
9.1.7.2 
M2.42 For fonts with “Restricted license embedding” licensing intent, producers 
MUST NOT embed the font. 
9.1.7.2 
M2.43 FixedDocuments  referencing any preview and print fonts MUST NOT be 
modified or edited. 
A producer MUST NOT modify or edit the FixedDocument or resources 
referenced from it. 
9.1.7.2, 
9.1.7.4 
M2.44 For fonts with “Print and preview embedding” licensing intent, producers 
MUST perform embedded font obfuscation. 
9.1.7.2 
M2.45 For fonts with “Print and preview embedding” licensing intent, consumers 
MUST NOT extract or permanently install the font. 
9.1.7.2 
M2.46 For fonts with “Editable embedding” licensing intent, producers MUST 
perform embedded font obfuscation. 
9.1.7.2 
M2.47 For fonts with “Editable embedding” licensing intent, consumers MUST NOT 
extract or permanently install the font. 
9.1.7.2 
M2.48 For fonts with “No subsetting” licensing intent, producers MUST perform 
embedded font obfuscation. 
9.1.7.2 
M2.49 For fonts with “No subsetting” licensing intent, producers MUST NOT subset 
the font. 
9.1.7.2 

ECMA-388 
F. Conformance Requirements 
 
 First Edition, June 2009 
407 
ID 
Rule 
Reference 
M2.50 For fonts with “No subsetting” licensing intent, consumers MUST NOT 
extract or permanently install the font. 
9.1.7.2 
M2.51 For fonts with “Bitmap embedding only” licensing intent, producers MUST 
perform embedded font obfuscation for bitmap characters only. If no 
bitmap characters are present in the font, the producer MUST NOT embed 
the font. 
9.1.7.2 
M2.52 For fonts with “Bitmap embedding only” licensing intent, consumers MUST 
NOT extract or permanently install the font. 
9.1.7.2 
M2.53 Producers and consumers MUST perform font obfuscation and de-
obfuscation according to the steps described in §9.1.7.3. 
9.1.7.3 
M2.54 The last segment of the part name for an obfuscated font MUST be the 
GUID generated during the font obfuscation process, with or without an 
extension. 
9.1.7.3 
M2.55 When processing <Glyphs> elements, the consumer MUST first select a 
cmap table from the Open Font Format following the order of preference 
shown inTable 9–8 (highest listed first). 
9.1.7.5 
M2.56 When processing <Glyphs> elements, if a WanSung, Big5, Prc, ShiftJis, or 
MacRoman cmap has been selected, the consumer MUST correctly map 
from Unicode code points in the UnicodeString attribute to the corresponding 
code points used by the cmap before looking up glyphs. 
9.1.7.5 
M2.57 When processing <Glyphs> elements that reference a cmap (3,0) encoding 
font, consumers MUST handle the case where the UnicodeString attribute 
contains character codes instead of PUA code points by computing the 
correct glyph index according to the general recommendations of the 
OpenType specification. 
9.1.7.5 
M2.58 This requirement was removed prior to Edition 1 of this Standard; its 
description is retained here for historical purposes. 
Consumers MUST process all PrintTicket parts when an OpenXPS Document 
is printed. 
 
M2.59 PrintTicket parts can be attached only to FixedDocumentSequence, 
FixedDocument, and FixedPage parts, and each of these parts MUST attach 
no more than one PrintTicket. 
9.1.9 
M2.60 This requirement was removed prior to Edition 1 of this Standard; its 
description is retained here for historical purposes. 
Consumers MUST process job-level, document-level and page-level settings 
of PrintTicket parts associated with FixedDocumentSequence parts. 
 
M2.61 This requirement was removed prior to Edition 1 of this Standard; its 
description is retained here for historical purposes. 
Consumers MUST process document-level and page-level settings of 
PrintTicket parts associated with FixedDocument parts and MUST ignore 
job-level settings of PrintTicket parts associated with FixedDocument parts. 
 

F. Conformance Requirements 
ECMA-388 
408 
First Edition, June 2009 
ID 
Rule 
Reference 
M2.62 This requirement was removed prior to Edition 1 of this Standard; its 
description is retained here for historical purposes. 
Consumers MUST process page-level settings of PrintTicket parts 
associated with FixedPage parts and MUST ignore job-level and document-
level settings of PrintTicket parts associated with FixedPage parts. 
 
M2.63 This requirement was removed prior to Edition 1 of this Standard; its 
description is retained here for historical purposes. 
When processing a PrintTicket, consumers MUST first remove all levels of 
PrintTicket content not applicable to the current element. 
 
M2.64 This requirement was removed prior to Edition 1 of this Standard; its 
description is retained here for historical purposes. 
When processing a PrintTicket, consumers MUST second validate the 
PrintTicket according to the methods defined in the PrintTicket Validation 
Checklist of the Print Schema documentation.  
 
M2.65 This requirement was removed prior to Edition 1 of this Standard; its 
description is retained here for historical purposes. 
Following validation of a PrintTicket, the printing consumer MUST properly 
interpret the print settings according to the rules for merging two 
PrintTicket parts. 
 
M2.66 This requirement was removed prior to Edition 1 of this Standard; its 
description is retained here for historical purposes. 
If there is no print setting merge conflict between different PrintTicket 
levels, a prefix-scoped element MUST be pushed down, or inherited, from a 
more general ticket to a more specific ticket. This case is isomorphic to the 
case where both tickets contain an identical element. 
 
M2.67 This requirement was removed prior to Edition 1 of this Standard; its 
description is retained here for historical purposes. 
If there is a print setting merge conflict between different PrintTicket levels, 
the setting from the most specific ticket MUST take precedence. 
 
M2.68 Consumers MUST use semantic document structure provided in included 
DocumentStructure and StoryFragments parts in preference to any other 
analysis method of generating such structure.  
9.1.11 
M2.69 Consumers MUST support Markup Compatibility and Extensibility elements 
and attributes in DocumentStructure, FixedDocument, 
FixedDocumentSequence, FixedPage, Relationships, Remote Resource 
Dictionary, SignatureDefinitions, and StoryFragments parts.  
Before attempting to validate one of these parts against a schema, 
consumers MUST remove all Markup Compatibility and Extensibility 
elements and attributes, ignorable namespace declarations, and all ignored 
elements and attributes not defined in the expected version of OpenXPS 
Document markup. 
9.3.1, 
9.3.2 
M2.70 XML content MUST be encoded using either UTF-8 or UTF-16. If any such 
part includes an encoding declaration (as defined in §4.3.3 of the XML 
Standard), that declaration MUST NOT name any encoding other than UTF-
8 or UTF-16. 
9.3.2 

ECMA-388 
F. Conformance Requirements 
 
 First Edition, June 2009 
409 
ID 
Rule 
Reference 
M2.71 DTD content MUST NOT be used in the XML markup defined in this 
Standard, and consumers MUST instantiate an error condition when 
encountering DTD content. 
9.3.2 
M2.72 XML content MUST be valid against the corresponding W3C XSD schema 
defined in this Standard. In particular, the XML content MUST NOT contain 
elements or attributes drawn from namespaces that are not explicitly 
defined in the corresponding XSD unless the XSD allows elements or 
attributes drawn from any namespace to be present in particular locations 
in the XML markup. 
9.3.2 
M2.73 XML content MUST NOT contain elements or attributes drawn from “xml” or 
“xsi” namespaces unless they are explicitly defined in the W3C XSD schema 
or by other means in the Standard. 
9.3.2 
M2.74 Properties MUST NOT be set more than once, regardless of the syntax used 
to specify the value. In certain cases, they can be specified using either 
property attributes or property elements. Consumers MUST instantiate an 
error condition when encountering properties that are specified in both 
ways. 
9.3.3.2 
M2.75 OpenXPS Document markup MUST NOT use the xml:space attribute. 
9.3.4 
M2.76 The language of the contents of an OpenXPS Document MUST be identified 
using the xml:lang attribute, the value of which is inherited by child and 
descendant elements. When the language of the contents is unknown and 
is required, the value “und” (undetermined) MUST be used. 
9.3.5.1 
M2.77 Producers that generate a relationship MUST include the target part in the 
OpenXPS Document for any of the following relationship types: 
DiscardControl, DocumentStructure, PrintTicket, Required Resource, 
Restricted Font, StartPart, StoryFragments, and Thumbnail. Consumers 
that access the target part of any relationship with one of these 
relationship types MUST instantiate an error condition if the part is not 
included in the OpenXPS Document. 
9.1.1 
M2.78 Consumers MUST support JPEG images that contain the EXIF-specified 
APP1 marker and interpret the EXIF color space correctly. 
9.1.5.1 
M2.79 
OpenXPS Document consumers MUST support TIFF images that include the 
EXIF IFD (tag 34665) as described in the EXIF specification. The EXIF color 
space MUST be interpreted correctly. 
9.1.5.3 
M2.80 
Each <DocumentReference> element in a FixedDocumentSequence part 
MUST reference a FixedDocument part by relative URI. 
9.1.2 
M2.81 
Each <PageContent> element in a FixedDocument part MUST reference a 
FixedPage part by relative URI. 
9.1.3 
M2.82 
<ImageBrush> and <Glyphs> elements MUST reference Image and Font 
parts by relative URI. 
9.1.4 
M2.83 
If the ExtraSamples tag value is 0, the associated alpha data in this 
channel MUST be ignored 
9.1.5.3 
M2.84 The payload containing an OpenXPS Document may include additional parts 
not defined by this Standard. Consumers MUST ignore parts in valid 
OpenXPS Documents that they do not understand. 
9.1 

F. Conformance Requirements 
ECMA-388 
410 
First Edition, June 2009 
ID 
Rule 
Reference 
M2.85 Consumers MUST ensure that they can distinguish between the uses of 
those markers listed in Table 9–3 and other data that is recorded using the 
same markers. 
9.1.5.1 
M2.86 Signature definitions MUST conform to the Signature Definitions schema as 
defined in §A.1. 
9.1.10 
M2.87 The order of child property elements is significant: they MUST occur before 
any contents of the parent element and they MUST appear in the sequence 
specified in the schema 
9.3.3.2.3 
M2.88 xml:lang is REQUIRED for <FixedPage> elements. 
9.3.5.1 
M2.89 xml:lang MUST NOT be used on any other fixed page markup element [than 
<FixedPage>, <Canvas>, <Path>, or <Glyphs>]. 
9.3.5.1 
M2.90 xml:lang is REQUIRED for the <DocumentOutline> element for document 
structure. 
9.3.5.1 
M2.91 JPEG XR image parts MUST use the Tag-based file format defined in 
Annex A of the JPEG XR specification. 
9.1.5.4 
M2.92 Regarding restricted license embedding, if only this bit is set, the font 
MUST NOT be modified, embedded or exchanged in any manner without 
obtaining permission from the legal owner. 
9.1.7.2 
M2.93 When editing content, producers MUST instantiate an error condition when 
encountering any font with the print and preview restriction bit set for 
which no Restricted Font relationship has been added to the 
FixedDocument part. 
9.1.7.4 
M2.94 Consumers MUST consider an OpenXPS Document valid even if the 
producer failed to properly set the Restricted Font relationship. 
9.1.7.4 
F.3.2 
SHOULD Conformance Requirements 
Table F–6. Parts and Relationships SHOULD conformance requirements 
ID 
Rule 
Reference 
S2.1 
It is RECOMMENDED that there be exactly one Required 
Resource relationship from the FixedPage part for each resource 
referenced from the markup. 
9.1.1 
S2.2 
This requirement was removed prior to Edition 1 of this 
Standard; its description is retained here for historical purposes. 
Each <DocumentReference> element in a 
FixedDocumentSequence part SHOULD reference a 
FixedDocument part by relative URI. 
 
S2.3 
This requirement was removed prior to Edition 1 of this 
Standard; its description is retained here for historical purposes. 
Each <PageContent> element in a FixedDocument part SHOULD 
reference a FixedPage part by relative URI. 
 
S2.4 
This requirement was removed prior to Edition 1 of this 
Standard; its description is retained here for historical purposes. 
<ImageBrush> and <Glyphs> elements SHOULD reference 
Image and Font parts by relative URI. 
 

ECMA-388 
F. Conformance Requirements 
 
 First Edition, June 2009 
411 
ID 
Rule 
Reference 
S2.5 
This requirement was removed prior to Edition 1 of this 
Standard; its description is retained here for historical purposes. 
(See [M8.41] and [M8.42].) 
Color profiles embedded in image files SHOULD be used if 
present and compatible with this Standard. 
 
S2.6 
It is RECOMMENDED that JPEG image part names end with the 
extension “.jpg”. 
9.1.5.1 
S2.7 
The use of CMYK JPEG images is NOT RECOMMENDED. TIFF or 
JPEG XR images SHOULD be used instead to represent CMYK 
images. 
9.1.5.1, 
15.3.4.3 
S2.8 
It is RECOMMENDED that PNG image part names end with the 
extension “.png”. 
9.1.5.2 
S2.9 
It is RECOMMENDED that TIFF image part names end with the 
extension ―.tif. 
9.1.5.3 
S2.10 
Consumers SHOULD ignore unsupported TIFF tags (those not 
described in Table 9–5 and §9.1.5.3). Producers SHOULD NOT 
include unsupported tags. 
9.1.5.3 
S2.11 Given the wide variety of incompliant TIFF images in circulation, 
consumers SHOULD accommodate common mistakes in TIFF 
images, and implement a reasonable recovery strategy when a 
problematic TIFF image is encountered. 
9.1.5.3 
S2.12 It is RECOMMENDED that JPEG XR image part names end with 
the extension “.jxr”. 
9.1.5.4 
S2.13 It is RECOMMENDED that if thumbnails are used for pages, a 
thumbnail SHOULD be included for every page in the document. 
9.1.6 
S2.14 Consumers SHOULD only process thumbnails associated via a 
package relationship from the package as a whole or via a 
relationship from a FixedPage part. Thumbnails attached to any 
other part SHOULD be ignored. 
9.1.6 
S2.15 Producers SHOULD use Unicode-encoded fonts. 
9.1.7, 
9.1.7.5 
S2.16 For fonts with “Installable embedding” licensing intent, 
producers SHOULD perform embedded font obfuscation. 
9.1.7.2 
S2.17 For fonts with “Installable embedding” licensing intent, 
consumers SHOULD NOT extract or permanently install the font. 
9.1.7.2 
S2.18 For fonts with “Restricted license embedding” licensing intent, 
producers SHOULD generate a path filled with an image brush 
referencing an image of rendered characters and SHOULD 
include the actual text in the AutomationProperties.Name attribute 
of the <Path> element. 
9.1.7.2 
S2.19 Although the licensing intent allows embedding of non-
obfuscated fonts and installation of the font on a remote client 
system under certain conditions, this is NOT RECOMMENDED in 
OpenXPS Documents. 
9.1.7.3 

F. Conformance Requirements 
ECMA-388 
412 
First Edition, June 2009 
ID 
Rule 
Reference 
S2.20 It is RECOMMENDED that the extension of an obfuscated Font 
part name be “.odttf” for TrueType fonts and “.odttc” for 
TrueType collections. 
9.1.7.3 
S2.21 This requirement was removed prior to Edition 1 of this 
Standard; its description is retained here for historical purposes. 
Producers SHOULD include only PrintTicket settings that support 
portability of the OpenXPS Document. 
 
S2.22 This requirement was removed prior to Edition 1 of this 
Standard; its description is retained here for historical purposes. 
Producers SHOULD only attach PrintTicket parts containing only 
document-level and page-level settings with FixedDocument 
parts. 
 
S2.23 This requirement was removed prior to Edition 1 of this 
Standard; its description is retained here for historical purposes. 
Producers SHOULD only attach PrintTicket parts containing only 
page-level settings with FixedPage parts. 
 
S2.24 The FixedDocumentSequence part SHOULD follow the part name 
recommendation “/<FixedDocSeq>.fdseq” where 
<FixedDocSeq> is the name of the FixedDocumentSequence. 
The FixedDocumentSequence SHOULD use the extension 
“.fdseq”. 
9.2 
S2.25 A FixedDocument part SHOULD follow the part name 
recommendation “/Documents/<n>/<FixedDocument>.fdoc” 
where <n> is a numeral that indicates the ordinal position of the 
fixed document in the fixed document sequence and 
<FixedDocument> is the name of the fixed document. 
FixedDocument parts SHOULD use the extension “.fdoc”. 
9.2 
S2.26 A FixedPage part SHOULD follow the part name recommendation 
“/Documents/<n>/Pages/<m>.fpage” where <n> represents 
the document that includes this page and <m> is the page 
number. FixedPage parts SHOULD use the extension “.fpage”. 
9.2 

ECMA-388 
F. Conformance Requirements 
 
 First Edition, June 2009 
413 
ID 
Rule 
Reference 
S2.27 A resource that is specific to a particular document SHOULD 
follow the part name recommendation 
“/Documents/<n>/Resources/<Resource>” where <n> is the 
document that uses the resource and <Resource> is the 
segments identifying the particular resource. 
A resource that is shared across multiple documents SHOULD 
follow the part name recommendation 
“/Resources/<Resource>”. 
A Font resource SHOULD use “Fonts/<FontName>.<FontExt>” 
for its <Resource> value, where <FontExt> SHOULD be either 
“.ttf” or “.odttf” for non-obfuscated and obfuscated fonts 
respectively. 
An Image resource SHOULD use 
“Images/<ImageName>.<ImageExt>” for its <Resource> 
value, where <ImageExt> is the correct extension for the image 
type. 
A Remote Resource Dictionary resource SHOULD use 
“Dictionaries/<DictName>.dict” for its <Resource> value. A 
Remote Resource Dictionary SHOULD use “.dict” as its 
extension. 
<FontName>, <ImageName>, and <DictName> SHOULD be a 
string representation of a GUID value if the resource is a shared 
resource. 
9.2 
S2.28 A DocumentStructure part SHOULD follow the part name 
recommendation 
“/Documents/<n>/Structure/<DocStruct>.struct” where <n> is 
the fixed document that the document structure applies to. 
DocumentStructure parts SHOULD use the extension “.struct”. 
9.2 
S2.29 A StoryFragments part SHOULD follow the part name 
recommendation 
“/Documents/<n>/Structure/Fragments/<m>.frag” where <n> 
is the fixed document that contains the story fragments and 
<m> is the page number the StoryFragments part applies to. 
StoryFragments parts SHOULD use the extension “.frag”. 
9.2 
S2.30 ICC profile parts SHOULD follow the part name recommendation 
“/Documents/<n>/Metadata/<ProfileName>.<ProfileExt>” 
where <n> is the fixed document that contains the profile. 
ICC profile parts shared across multiple documents SHOULD 
follow the part name recommendation 
“/Metadata/<ProfileName>.<ProfileExt>”. In this case, 
<ProfileName> SHOULD be a string representation of a GUID 
value. 
The <ProfileExt> SHOULD be appropriate to the color profile 
type, such as “.icm”. 
9.2 

F. Conformance Requirements 
ECMA-388 
414 
First Edition, June 2009 
ID 
Rule 
Reference 
S2.31 Thumbnail parts SHOULD follow the part name recommendation 
“/Documents/<n>/Metadata/<ThumbName>.<ThumbExt>” 
where <n> is the fixed document that contains the thumbnail. 
If the Thumbnail part represents the package as a whole, it 
SHOULD follow the part name recommendation 
“/Metadata/<ThumbName>.<ThumbExt>”. In this case, 
<ThumbName> SHOULD be a string representation of a GUID 
value. 
The <ThumbExt> SHOULD be appropriate to the image type, 
either “.png” or “.jpg”. 
9.2 
S2.32 PrintTicket part names associated with the entire job SHOULD be 
associated via relationship with the FixedDocumentSequence 
part and contain two segments, using “/Metadata/” as the first 
segment.  
PrintTicket parts associated with a particular fixed document or 
fixed page SHOULD contain four segments, using 
“/Documents/n/Metadata/” as the first three segments, where 
<n> is the fixed document that uses these parts.  
PrintTicket parts based on XML SHOULD use the extension 
“.xml”. 
9.2 
S2.33 The names of any non-standard parts that are associated with a 
particular fixed document SHOULD follow the part name 
recommendation “/Documents/<n>/Other/<PartName>”, where 
<n> is the fixed document to which the part belongs. 
9.2 
S2.34 Consumers SHOULD support JPEG images that contain JFIF-
specified APP0 and ICC-specified APP2 markers. 
9.1.5.1 
S2.35 
If the referenced font part is a TrueType Collection, then if the 
fragment portion of the URI is not recognized as a valid integer, 
consumers SHOULD instantiate an error condition. 
9.1.7 
S2.36 
If the consumer understands the content of the PrintTicket, then 
the PrintTicket part SHOULD be processed when the OpenXPS 
Document is printed. 
9.1.9 
S2.37 
For images that have a constant opacity, producers SHOULD 
NOT use the image format alpha channel; the Opacity attribute 
in the <ImageBrush> element SHOULD be used instead. 
9.1.5 
F.3.3 
OPTIONAL Conformance Requirements 
Table F–7. Parts and Relationships OPTIONAL conformance requirements 
ID 
Rule 
Reference 
O2.1 
Thumbnail parts MAY be included in an OpenXPS Document 
9.1 
O2.2 
PrintTicket parts MAY be included in an OpenXPS Document. 
9.1 
O2.3 
ICC Profile parts MAY be included in an OpenXPS Document. 
9.1, 15.1.8 
O2.4 
DocumentStructure parts MAY be included in an OpenXPS 
Document. 
9.1 

ECMA-388 
F. Conformance Requirements 
 
 First Edition, June 2009 
415 
ID 
Rule 
Reference 
O2.5 
StoryFragments parts MAY be included in an OpenXPS 
Document. 
9.1 
O2.6 
SignatureDefinitions parts MAY be included in an OpenXPS 
Document. 
9.1, 9.1.10 
O2.7 
DiscardControl parts MAY be included in an OpenXPS 
Document. 
9.1 
O2.8 
A Core Properties relationship MAY be included in an 
OpenXPS Document, from the package to the Core 
Properties part. 
9.1.1 
O2.9 
A Digital Signatures Origin relationship MAY be included in 
an OpenXPS Document, from the package to the Digital 
Signature Origin part. 
9.1.1 
O2.10 Digital Signature relationships MAY be included in an 
OpenXPS Document, from the Digital Signature Origin part 
to a Digital Signature XML Signature part. 
9.1.1 
O2.11 Digital Signature Certificate relationships MAY be included in 
an OpenXPS Document, from a Digital Signature XML 
Signature part to the Digital Signature Certificate part. 
9.1.1 
O2.12 Digital Signature Definitions parts MAY be included in an 
OpenXPS Document, from a FixedDocument part to the 
Digital Signature Definitions part. 
9.1.1 
O2.13 DiscardControl relationships MAY be included in an OpenXPS 
Document, from the package to a DiscardControl part. 
9.1.1 
O2.14 DocumentStructure relationships MAY be included in an 
OpenXPS Document, from a FixedDocument part to the 
DocumentStructure part. 
9.1.1 
O2.15 PrintTicket relationships MAY be included in an OpenXPS 
Document, from a FixedDocumentSequence, 
FixedDocument, or FixedPage part to a PrintTicket part. 
9.1.1 
O2.16 StoryFragments relationships MAY be included in an 
OpenXPS Document, from a FixedPage part to a 
StoryFragments part. 
9.1.1 
O2.17 Thumbnail relationships MAY be included in an OpenXPS 
Document, from the package to an Image part or from a 
FixedPage part to an Image part. 
9.1.1 
O2.18 Color Profiles MAY be embedded in image files. 
9.1.5 
O2.19 Thumbnail images MAY be attached to a FixedPage part 
using a Thumbnail relationship. 
9.1.6 
O2.20 Fonts MAY be subsetted based on glyph usage. 
9.1.7.1 
O2.21 Producers MAY use a 128-bit random number instead of a 
true GUID for an obfuscated font name. 
9.1.7.3 
O2.22 An obfuscated Font part MAY have an arbitrary extension. 
9.1.7.3 

F. Conformance Requirements 
ECMA-388 
416 
First Edition, June 2009 
ID 
Rule 
Reference 
O2.23 Producers MAY add digital signature requests and 
instructions to an OpenXPS Document in the form of 
signature definitions.  
9.1.10 
O2.24 A producer MAY sign against an existing signature definition 
to provide additional signature information.  
9.1.10 
O2.25 A recipient of an OpenXPS Document MAY also sign it 
against a signature definition. 
9.1.10 
O2.26 This requirement was removed prior to Edition 1 of this 
Standard. 
 
O2.27 Consumers MAY provide an algorithmic construction of the 
structure of an OpenXPS Document based on a page-layout 
analysis, provided such structure is not explicitly provided 
in DocumentStructure and StoryFragments parts. 
9.1.11 
O2.28 A resource that is intended to be used across multiple fixed 
documents MAY be named according to the guidelines for 
shared resources. 
9.2 
O2.29 Producers MAY include Markup Compatibility and 
Extensibility elements and attributes in DocumentStructure, 
FixedDocument, FixedDocumentSequence, FixedPage, 
Relationships, Remote Resource Dictionary, 
SignatureDefinitions, and StoryFragments parts. 
9.3.1 
O2.30 Wherever a single whitespace character is allowed in 
OpenXPS Document markup, multiple whitespace 
characters MAY be used (unless explicitly restricted by a 
pattern restriction in the corresponding schema).  
9.3.4 
O2.31 Attributes in OpenXPS Document markup that specify 
comma-delimited attribute values MAY, unless specified 
otherwise, OPTIONALLY include whitespace characters 
preceding or following the comma.  
9.3.4 
O2.32 Where the OpenXPS Document schema specifies attributes 
of types that allow whitespace collapsing, leading and 
trailing whitespace in the attribute value MAY be used along 
with other whitespace that relies on the whitespace 
collapsing behavior specified in the XML Schema Standard. 
9.3.4 
O2.33 xml:lang MAY be used with <Canvas>, <Path>, and 
<Glyphs> elements. 
9.3.5.1 
O2.34 xml:lang is OPTIONAL for the <OutlineEntry> element. 
9.3.5.1 
O2.35 The payload containing an OpenXPS Document MAY include 
additional parts not defined by this Standard. 
9.1 

ECMA-388 
F. Conformance Requirements 
 
 First Edition, June 2009 
417 
F.4 
Documents 
F.4.1 
MUST Conformance Requirements 
Table F–8. Document MUST conformance requirements 
ID 
Rule 
Reference 
M3.1 
The order of <DocumentReference> elements MUST match the order of the 
documents in the fixed document sequence. 
10.1 
M3.2 
The Source attribute of the <DocumentReference> element MUST specify a 
FixedDocument part within the OpenXPS Document. 
10.1.1 
M3.3 
Producers MUST NOT produce a document with multiple 
<DocumentReference> elements that reference the same fixed document. 
10.1.1 
M3.4 
The order of <PageContent> elements MUST match the order of the pages in 
the document. 
10.2 
M3.5 
The Source attribute of the <PageContent> element MUST specify a 
FixedPage part within the OpenXPS Document. 
10.2.1 
M3.6 
Producers MUST NOT produce markup where a <PageContent> element 
references the same fixed page referenced by any other <PageContent> 
element in the entire OpenXPS Document, even in other fixed documents 
within the fixed payload. 
10.2.1 
M3.7 
If the attribute is specified, the BleedBox BleedOriginX value MUST be less 
than or equal to 0. 
10.3.1 
M3.8 
If the attribute is specified, the BleedBox BleedOriginY value MUST be less 
than or equal to 0. 
10.3.1 
M3.9 
If the attribute is specified, the BleedBox BleedWidth value MUST be greater 
than or equal to the Width attribute value plus the absolute value of the 
BleedBox BleedOriginX value. 
10.3.1 
M3.10 If the attribute is specified, the BleedBox BleedHeight value MUST be greater 
than or equal to the fixed page Height value plus the absolute value of the 
BleedBox BleedOriginY value. 
10.3.1 
M3.11 If the attribute is specified, the ContentBox ContentOriginX value MUST be 
greater than or equal to 0 and less than the fixed page Width attribute value 
10.3.2 
M3.12 If the attribute is specified, the ContentBox ContentOriginY value MUST be 
greater than or equal to 0 and less than the fixed page Height attribute value. 
10.3.2 
M3.13 If the attribute is specified, the ContentBox ContentWidth value MUST be less 
than or equal to the difference between the fixed page Width attribute value 
and the ContentBox ContentOriginX value. 
10.3.2 
M3.14 If the attribute is specified, the ContentBox ContentHeight value MUST be less 
than or equal to the difference between the fixed page Height attribute value 
and the ContentBox ContentOriginY value. 
10.3.2 
M3.15 This requirement was removed prior to Edition 1 of this Standard; its 
description is retained here for historical purposes. 
When rendering a fixed page for printing, consumers MUST be aware of the 
interaction between the fixed page markup and the PrintTicket settings. 
 

F. Conformance Requirements 
ECMA-388 
418 
First Edition, June 2009 
ID 
Rule 
Reference 
M3.16 This requirement was removed prior to Edition 1 of this Standard; its 
description is retained here for historical purposes. 
producer bleed size — Represents the overflow (or “bleed”) box used by 
the producer for registration and layout. 
When the PrintTicket specifies the page scaling option 
FitApplicationBleedSizeToPageImageableSize, printing consumers MUST scale 
the bleed box (producer bleed size) to the PageImageableSize, preserving the 
aspect ratio. 
 
M3.17 This requirement was removed prior to Edition 1 of this Standard; its 
description is retained here for historical purposes. 
producer content size — Represents the content bounding box specified by 
the producer. 
When the PrintTicket specifies the page scaling option 
FitApplicationContentSizeToPageImageableSize, printing consumers MUST 
scale the content box (producer content size) to the PageImageableSize, 
preserving the aspect ratio. 
 
M3.18 This requirement was removed prior to Edition 1 of this Standard; its 
description is retained here for historical purposes. 
producer media size — Represents the physical media on which the content 
will be printed. 
When the PrintTicket specifies the page scaling option 
FitApplicationMediaSizeToPageImageableSize, printing consumers MUST scale 
the height and width (producer media size) to the PageImageableSize, 
preserving the aspect ratio. 
 
M3.19 This requirement was removed prior to Edition 1 of this Standard; its 
description is retained here for historical purposes. 
When the PrintTicket specifies the page scaling option 
FitApplicationMediaSizeToPageMediaSize, printing consumers MUST scale the 
height and width (producer media size) to the PageMediaSize, preserving the 
aspect ratio. 
 
M3.20 The x:Key attribute of the <Canvas> element MUST be present when the 
element is defined in a resource dictionary. It MUST NOT be specified outside 
a resource dictionary. 
10.4 
M3.21 The <PageContent> element has one allowable child element, 
<PageContent.LinkTargets>, and it MUST NOT contain more than a single 
child element. 
10.2.1 
M3.22 The fixed page MUST specify a height, width, and default language. 
10.3 
F.4.2 
SHOULD Conformance Requirements 
Table F–9. Document SHOULD conformance requirements 
ID 
Rule 
Reference 
S3.1 Specifying a ContentBox attribute for the <FixedPage> element is 
RECOMMENDED. 
10.3, 
10.3.2 

ECMA-388 
F. Conformance Requirements 
 
 First Edition, June 2009 
419 
ID 
Rule 
Reference 
S3.2 Invalid bleed box specifications SHOULD be ignored in favor of the default 
bleed box. 
10.3.1 
S3.3 Invalid content box specifications SHOULD be ignored in favor of the default 
content box. 
10.3.2 
S3.4 This requirement was removed prior to Edition 1 of this Standard; its 
description is retained here for historical purposes. 
physical media size — Represents the physical media on which the content 
will be printed. 
In the absence of media scaling, the fixed page content is imaged directly to 
the physical media with the origin of the fixed page aligned with the origin of 
the physical media size. Any fixed page content that extends beyond the 
dimension of the physical media size SHOULD be clipped. 
 
S3.5 By default, consumers SHOULD clip to the FixedPage Width and Height. 
10.3.3 
F.4.3 
OPTIONAL Conformance Requirements 
Table F–10. Document OPTIONAL conformance requirements 
ID 
Rule 
Reference 
O3.1 The positioning, scaling, orientation, and clipping of FixedPage content when 
mapping to physical media MAY be controlled by settings provided in the 
PrintTicket. 
10.3.3 
O3.2 Consumers MAY provide implementation-defined mechanisms to select 
alternative clipping strategies. 
10.3.3 
F.5 
Graphics 
F.5.1 
MUST Conformance Requirements 
Table F–11. Graphics MUST conformance requirements 
ID 
Rule 
Reference 
M4.1 The x:Key attribute of the <Path> element MUST be present when the 
element is defined in a resource dictionary. It MUST NOT be specified outside 
a resource dictionary. 
11.1 
M4.2 The x:Key attribute of the <PathGeometry> element MUST be present when 
the element is defined in a resource dictionary. It MUST NOT be specified 
outside a resource dictionary. 
11.2.1.1 
M4.3 A <PathGeometry> element contains a set of path figures specified either 
with the Figures attribute or with a child <PathFigure> element. Producers 
MUST NOT specify the path figures of a geometry with both the Figures 
attribute and a child <PathFigure> element. 
11.2.1.1 
M4.4 The <PathGeometry> element’s Figures attribute can be used to describe the 
path figures the geometry contains using abbreviated syntax with the 
exception that the FillRule command MUST NOT be used. 
11.2.1.3 
M4.5 The x or y radius in the Size attribute MUST NOT be negative. 
11.2.2.2.1 

F. Conformance Requirements 
ECMA-388 
420 
First Edition, June 2009 
ID 
Rule 
Reference 
M4.6 This [FillRule] command MUST appear only as the first command in the 
abbreviated geometry syntax. 
11.2.3 
M4.7 This [FillRule] command MUST NOT be specified in the value of the Figures 
attribute of the <PathGeometry> element. 
11.2.3 
M4.8 The first figure in a geometry MUST begin with a Move command. 
11.2.3 
F.5.2 
SHOULD Conformance Requirements 
Table F–12. Graphics SHOULD conformance requirements 
ID 
Rule 
Reference 
S4.1 Line segments and curve segments SHOULD NOT be specified as zero-length. 11.2.2.1 
F.5.3 
OPTIONAL Conformance Requirements 
Table F–13. Graphics OPTIONAL conformance requirements 
ID 
Rule 
Reference 
O4.1 Consumers or viewers that perform anti-aliasing MAY “snap” those control 
points of the path that are situated on the path bounding box to whole device 
pixels if the ignorable SnapsToDevicePixels attribute is specified as true. 
11.1, 
19.39 
O4.2 A path geometry MAY define the fill algorithm to be used on the component 
path figures. 
11.2 
O4.3 Abbreviated geometry syntax MAY be used to specify a geometry of one or 
more figures comprised of multiple segments. 
11.2.3 
O4.4 If entering more than one drawing command of the same type sequentially, 
the duplicate command entry MAY be omitted. 
11.2.3 
O4.5 Every geometry MAY specify one or more figures, and MAY be preceded by a 
FillRule command where allowed. 
11.2.3 
O4.6 Subsequent Move commands indicate the start of a new figure but MAY be 
omitted, indicating the current endpoint for the subsequent figure is the same 
as the end point of the previous figure. 
11.2.3 
F.6 
Text 
F.6.1 
MUST Conformance Requirements 
Table F–14. Text MUST conformance requirements 
ID 
Rule 
Reference 
M5.1 
If the CaretStops attribute is missing from the <Glyphs> element, a consumer 
MUST interpret the text as having a caret stop between each Unicode UTF-16 
code unit and at the beginning and end of the text. 
12.1 
M5.2 
If the UnicodeString attribute of the <Glyphs> element is not specified or 
contains an empty value (“” or “{}”), and if the Indices attribute is not 
specified or contains no glyph indices, then a consumer MUST instantiate an 
error condition. 
12.1, 
12.1.4 

ECMA-388 
F. Conformance Requirements 
 
 First Edition, June 2009 
421 
ID 
Rule 
Reference 
M5.3 
The x:Key attribute of the <Glyphs> element MUST be present when the 
element is defined in a resource dictionary. It MUST NOT be specified outside 
a resource dictionary. 
12.1 
M5.4 
The sum of the code unit counts for all the GlyphMapping entries in the Indices 
attribute MUST NOT exceed the number of UTF-16 code units in the 
UnicodeString attribute if the UnicodeString attribute is specified and does not 
contain an empty value (“” or “{}”). If a ClusterMapping is not specified 
within a GlyphMapping entry, the code unit count is 1. 
12.1.3 
M5.5 
If there is not a one-to-one mapping between code units in the UnicodeString 
attribute and the glyph indices, the GlyphIndex value in the Indices attribute 
MUST be specified. 
12.1.3 
M5.6 
The AdvanceWidth of the Indices attribute MUST be calculated as the exact 
unrounded origin of the subsequent glyph minus the sum of the calculated 
(that is, rounded) advance widths of the preceding glyphs. 
12.1.3 
M5.7 
A UnicodeString attribute value that begins with an open brace (“{”) MUST be 
escaped with a prefix of “{}”. If a UnicodeString attribute value starts 
with “{}”, consumers MUST ignore those first two characters in processing 
the UnicodeString and in calculating index positions for the characters of the 
UnicodeString. 
12.1.4 
M5.8 
This requirement was removed prior to Edition 1 of this Standard. 
 
M5.9 
If the UnicodeString attribute contains a Unicode code unit that cannot be 
mapped to a glyph index via a cmap table in the font and there is no 
corresponding GlyphIndex entry in the Indices attribute, the consumer MUST 
display the .notdef glyph 
12.1.4 
M5.10 In the absence of entries in the Indices attribute to override the Unicode code 
units in the UnicodeString attribute value, consumers MUST treat Unicode 
control marks in the UnicodeString attribute like ordinary characters and render 
the glyphs to which the Unicode control marks are mapped in the CMAP table. 
12.1.4 
M5.11 Because advance-widths, glyph indices, and caret-stops are associated with 
the generated Unicode string, consumers MUST NOT normalize the 
UnicodeString attribute value to produce an internal representation. 
12.1.4 
M5.12 Producers MUST lay out algorithmically emboldened glyphs using advance 
widths that are 2% of the em size larger than when not algorithmically 
emboldened. 
12.1.5 
M5.13 Consumers MUST implement the effect of algorithmic emboldening such that 
the black box of the glyph grows by 2% of the em size. When advance widths 
are omitted from the markup and the glyphs are algorithmically emboldened, 
the advance widths obtained from the horizontal metrics font table (if 
IsSideways is false) or the vertical metrics font table (if IsSideways is true) of 
the font MUST be increased by 2% of the em size. 
12.1.5 
M5.14 Producers MUST lay out algorithmically italicized glyphs using exactly the 
same advance widths as when not algorithmically italicized. 
12.1.5 
M5.15 Producers MUST NOT specify text that is both right-to-left (BidiLevel attribute 
set to an odd value) and vertical (IsSideways attribute set to true). 
12.1.6.2 
M5.16 If a consumer does not understand the specified device font name, it MUST 
render the embedded version of the font. 
12.1.7 

F. Conformance Requirements 
ECMA-388 
422 
First Edition, June 2009 
ID 
Rule 
Reference 
M5.17 When rendering a printer device font, consumers MUST use the UnicodeString 
attribute and ignore the glyph index components of the Indices attribute.  
12.1.7 
M5.18 When rendering a printer device font, consumers MUST still honor the 
advance width and x,y offset values present in the Indices attribute. 
12.1.7 
M5.19 For producers, a <Glyphs> element with a specified device font name MUST 
have exactly one Indices glyph per character in the UnicodeString attribute. Its 
Indices attribute MUST NOT include any cluster specifications. If the Indices 
attribute includes a cluster mapping, the consumer MUST NOT use the device 
font and MUST render the embedded version of the font. 
12.1.7 
M5.20 If a device font name is specified, each of the <Glyphs> element’s  Indices 
glyphs MUST include a specified advance width and MUST include specified x 
and y offset values if they are non-zero 
12.1.7 
M5.21 This requirement was removed prior to Edition 1 of this Standard. 
M5.22 If there are insufficient flags in the CaretStops attribute value to correspond to 
all the UTF-16 code units in the UnicodeString attribute value, all remaining 
UTF-16 code units in the Unicode string MUST be considered valid caret stops. 
12.1.9 
M5.23 If the Indices attribute is specified, the values provided MUST be used in 
preference to values determined from the UnicodeString attribute alone. 
12.1.3 
M5.24 If the Indices attribute specifies a GlyphIndex that does not exist in the font, 
the consumer MUST instantiate an error condition. 
12.1.3 
M5.25 The Indices attribute MUST adhere to the glyph specification syntax. 
12.1.3 
M5.26 AdvanceWidth’s advance MUST be 0 or greater. 
12.1.3 
M5.27 For larger blocks of text, the producer MAY specify the xml:lang attribute on 
the <Canvas> element. 
12.1.8 
M5.28 If the Unicode string contains Unicode scalar values that require two UTF-16 
code units, a cluster map with a many-to-one or many-to-many mapping 
MUST be specified for the values. 
12.1.4 
F.6.2 
SHOULD Conformance Requirements 
Table F–15. Text SHOULD conformance requirements 
ID 
Rule 
Reference 
S5.1 The value of the CaretStops attribute SHOULD indicate that the caret cannot 
stop in front of most combining marks and the second UTF-16 code unit of UTF-
16 surrogate pairs. 
12.1 
S5.2 If producers include control marks in the Unicode string, they SHOULD include 
an Indices attribute to specify glyph indices and/or character-to-glyph mapping 
information for the control marks. 
12.1.4 
S5.3 If alternate vertical character representations are available in the font, the 
producer SHOULD use those and provide their glyph indices in the Indices 
attribute 
12.1.6 
S5.4 Producers SHOULD NOT produce markup that will result in different rendering 
between consumers using the embedded font to render and consumers using 
the device font to render. 
12.1.7 

ECMA-388 
F. Conformance Requirements 
 
 First Edition, June 2009 
423 
ID 
Rule 
Reference 
S5.5 Specifying a UnicodeString for <Glyphs> elements is RECOMMENDED, as it 
supports searching, selection, and accessibility. 
12.1.4 
S5.6 When rendering glyphs where the StyleSimulations value is specified as 
BoldSimulation, consumers SHOULD offset each glyph up and to the right by 
1% of the em size so that baseline and left edge alignments are preserved. 
12.1.5 
F.6.3 
OPTIONAL Conformance Requirements 
Table F–16. Text OPTIONAL conformance requirements 
ID 
Rule 
Reference 
O5.1 
Producers MAY include Unicode control marks in the Unicode string. Such 
marks include control codes, layout controls, invisible operators, deprecated 
format characters, variation selectors, non-characters, and specials, 
according to their definition within the Unicode Standard. 
12.1.4 
O5.2 
Producers MAY choose to generate UnicodeString attribute values that are not 
normalized by any Unicode-defined algorithm. 
12.1.4 
O5.3 
Consumers that understand the device font name MAY ignore the embedded 
font and use the device-resident version. 
12.1.7 
O5.4 
Glyph indices MAY be omitted from markup where there is a one-to-one 
mapping between the positions of Unicode scalar values in the UnicodeString 
attribute and the positions of glyphs in the glyph string and the glyph index 
is the value in selected character mapping table of the font. 
12.1.10.1 
O5.5 
Glyph advance widths MAY be omitted from markup where the advance width 
desired is specified in the font tables, once adjusted for algorithmic 
emboldening. 
12.1.10.2 
O5.6 
Glyph horizontal and vertical offsets MAY be omitted from markup where the 
offset is 0.0. 
12.1.10.2 
O5.7 
The <Glyphs> element MAY have an Indices attribute. 
12.1.3 
O5.8 
The glyph specifications within the Indices attribute are OPTIONAL. 
12.1.3 
O5.9 
The GlyphIndex portion of the Indices attribute MAY be used to specify a 
series of glyphs, complex character-to-glyph cluster mappings, or a 
combination of both. 
12.1.3 
O5.10 The Indices attribute MAY include glyph placement information. 
12.1.3 
O5.11 The GlyphIndex entry MAY be empty. 
12.1.3 
O5.12 A cluster map specification MAY precede the glyph specification for the first 
glyph of the cluster. 
12.1.3.1 
O5.13 The language defaults to the value specified for the xml:lang attribute of the 
<FixedPage> element but MAY be overridden by an xml:lang attribute on a 
<Glyphs> element. 
12.1.8 

F. Conformance Requirements 
ECMA-388 
424 
First Edition, June 2009 
F.7 
Brushes 
F.7.1 
MUST Conformance Requirements 
Table F–17. Brushes MUST conformance requirements 
ID 
Rule 
Reference 
M6.1 The x:Key attribute of the <SolidColorBrush> element MUST be present when 
the element is defined in a resource dictionary. It MUST NOT be specified 
outside a resource dictionary. 
13.1 
M6.2 The x:Key attribute of the <ImageBrush> element MUST be present when the 
element is defined in a resource dictionary. It MUST NOT be specified outside a 
resource dictionary. 
13.2 
M6.3 An <ImageBrush> element MUST reference a JPEG, PNG, TIFF, or JPEG XR 
Image part within the OpenXPS Document package. 
13.2 
M6.4 The x:Key attribute of the <VisualBrush> element MUST be present when the 
element is defined in a resource dictionary. It MUST NOT be specified outside a 
resource dictionary. 
13.3 
M6.5 The x:Key attribute of the <LinearGradientBrush> element MUST be present 
when the element is defined in a resource dictionary. It MUST NOT be specified 
outside a resource dictionary. 
13.5 
M6.6 The x:Key attribute of the <RadialGradientBrush> element MUST be present 
when the element is defined in a resource dictionary. It MUST NOT be specified 
outside a resource dictionary. 
13.6 
M6.7 ViewboxUnits specifies the unit type for the Viewbox attribute. MUST have the 
value “Absolute”. 
13.4 
M6.8 ViewportUnits specifies the unit type for the Viewport attribute. MUST have the 
value “Absolute”. 
13.4 
F.8 
Common Properties 
F.8.1 
MUST Conformance Requirements 
Table F–18. Common properties MUST conformance requirements 
ID 
Rule 
Reference 
M7.1 
Individual resource values MUST be specified within a resource dictionary. 
14.2 
M7.2 
Namespace prefixes in resource definitions MUST apply in the context of the 
definition, rather than in the context of the resource reference. 
14.2.3 
M7.3 
An xml:lang attribute within a resource definition MUST be interpreted in the 
context of the resource reference, not the resource definition. 
14.2.3 
M7.4 
A remote resource dictionary MUST follow the requirements that apply to 
inline resource dictionaries.  
14.2.3.1 
M7.5 
A remote resource dictionary MUST NOT contain any resource definition 
children that reference another remote resource dictionary. 
14.2.3.1 
M7.6 
A <ResourceDictionary> element that specifies a remote resource dictionary 
in its Source attribute MUST NOT contain any resource definition children. 
14.2.3.1 

ECMA-388 
F. Conformance Requirements 
 
 First Edition, June 2009 
425 
ID 
Rule 
Reference 
M7.7 
Inline references to fonts or images in remote resource dictionary entries 
MUST be interpreted with the same base URI as the Remote Resource 
Dictionary part, not from the base URI of the part referring to the particular 
remote resource dictionary entry. 
14.2.3.1 
M7.8 
When a resource definition references a previously defined resource with the 
same name in an ancestor resource dictionary, the reference MUST be 
resolved before the redefined resource is added to the dictionary 
14.2.5 
M7.9 
If a resource definition references another resource, the reference MUST be 
resolved in the context of the resource definition, not in the context of the 
resource use. 
14.2.5 
M7.10 If a resource dictionary contains Markup Compatibility and Extensibility 
elements and attributes, the processing of the Markup Compatibility and 
Extensibility markup MUST occur in the context of the definition of the 
resource dictionary, not in the context of resource references. 
14.2.6 
M7.11 The x:Key attribute of the <MatrixTransform> element MUST be present when 
the element is defined in a resource dictionary. It MUST NOT be specified 
outside a resource dictionary. 
14.4.1 
M7.12 The Opacity property attribute value MUST fall within the 0 (fully transparent) 
to 1 (fully opaque) range, inclusive. 
14.1 
M7.13 The <Canvas.Resources> or <FixedPage.Resources> property elements 
MUST precede any property elements of the <Canvas> or <FixedPage> 
elements. 
14.2 
M7.14 The <Canvas.Resources> or <FixedPage.Resources> property elements 
MUST precede any path, glyphs, or canvas children of the <Canvas> or 
<FixedPage> elements. 
14.2 
M7.15 <FixedPage.Resources> and <Canvas.Resources> elements that include a 
remote resource dictionary MUST include exactly one <ResourceDictionary> 
element. 
14.2.3.1 
M7.16 The value of the x:Key attribute MUST be unique within the resource 
dictionary. 
14.2.5 
F.8.2 
SHOULD Conformance Requirements 
Table F–19. Common properties SHOULD conformance requirements 
ID 
Rule 
Reference 
S7.1 A consumer SHOULD instantiate an error condition if a static resource reference 
cannot be resolved, or if it can be resolved but the resource type does not 
match the usage at the location of reference. 
14.2.4 
S7.2 A consumer SHOULD instantiate an error condition if the search has continued 
to the root <FixedPage> element and a specified resource has not been found 
14.2.5 

F. Conformance Requirements 
ECMA-388 
426 
First Edition, June 2009 
F.8.3 
OPTIONAL Conformance Requirements 
Table F–20. Common properties OPTIONAL conformance requirements 
ID 
Rule 
Reference 
O7.1 Resource dictionaries MAY be declared, either inline inside a 
<FixedPage.Resources> or <Canvas.Resources> element, or in a separate part 
and referenced by a <ResourceDictionary> element inside a 
<FixedPage.Resources> or <Canvas.Resources> element.  
14.2, 
14.2.3.1 
O7.2 A resource definition MAY reference another resource defined prior to the point 
of reference, including a resource earlier within the same resource dictionary. 
14.2.3 
O7.3 If the resource dictionary does not appear in a separate part, a resource 
definition MAY reference a previously defined resource in a resource dictionary 
of a parent or ancestor <Canvas> or <FixedPage> element. 
14.2.3 
O7.4 This requirement was removed prior to Edition 1 of this Standard. 
 
O7.5 The resource dictionary of a <Canvas> element MAY re-use (and thus override 
within the scope of the re-use) an x:Key value defined in the resource 
dictionary of a parent or ancestor <Canvas> or <FixedPage> element. 
14.2.5 
O7.6 A resource definition MAY reference a previously defined resource with the 
same name that is defined in an ancestor resource dictionary. 
14.2.5 
O7.7 An abbreviated matrix transformation syntax MAY be used to specify a 
RenderTransform or Transform attribute value. 
14.4 
F.9 
Color 
F.9.1 
MUST Conformance Requirements 
Table F–21. Color MUST conformance requirements 
ID 
Rule 
Reference 
M8.1 
Consumers MUST support alpha and gradient blending in sRGB. 
15.1, 15.5 
M8.2 
Consumers MUST support sRGB colors in image data, using the JPEG, 
PNG, TIFF, or JPEG XR image formats. 
15.1 
M8.3 
Consumers MUST support scRGB color specification in vector data, with 
and without alpha. 
15.1 
M8.4 
Consumers MUST support scRGB colors in image data, using the JPEG XR 
image format. 
15.1 
M8.5 
Consumers MUST support CMYK colors in vector data. 
15.1 
M8.6 
Consumers MUST support CMYK colors in image data, using the TIFF or 
JPEG XR image formats. 
15.1 
M8.7 
Consumers MUST support N-Channel and Named colors in vector data. 
15.1 
M8.8 
Consumers MUST support N-Channel and Named colors in image data, 
using the JPEG XR image format. 
15.1 

ECMA-388 
F. Conformance Requirements 
 
 First Edition, June 2009 
427 
ID 
Rule 
Reference 
M8.9 
This requirement was removed prior to Edition 1 of this Standard; its 
description is retained here for historical purposes. It was subsumed by 
[M8.53]. 
Consumers MUST support profiles as specified in the ICC specification. 
 
M8.10 This requirement was removed prior to Edition 1 of this Standard; its 
description is retained here for historical purposes. 
Consumers MUST support profiles compliant with ICC.1:2001-04 with a 
Windows Color System (WCS) profile embedded as a private tag. 
 
M8.11 This requirement was removed prior to Edition 1 of this Standard, and 
replaced with S8.21; its description is retained here for historical 
purposes. 
Consumers MUST inspect the PageDeviceColorSpaceProfileURI PrintTicket 
setting to determine that this particular color specification is a native 
device color and MUST NOT be color-managed according to the included 
profile unless forced to do so for transparency effects or gradient 
blending. 
 
M8.12 OpenXPS producers and consumers MUST provide color management 
using ICC profiles conforming to the requirements of the ICC Color Profile 
specification, ICC.1:2001-04, for color spaces other than sRGB and 
scRGB. 
15.1.8, 15.6 
M8.13 All ICC profiles used in OpenXPS Documents MUST be an Input profile, 
an Output profile, a Monitor (RGB) profile, a ColorSpace Conversion 
profile, or a Named Color profile. 
15.1.8 
M8.14 Real numbers specified for color channel values of scRGB and 
ContextColor colors MUST NOT use exponent forms of numbers. 
15.2 
M8.15 Although alpha values smaller than 0.0 and larger than 1.0 can be 
specified in scRGB images, the alpha values MUST be clamped to the 
valid range from 0.0 to 1.0 before any further processing. 
15.2.2 
M8.16 Although alpha values smaller than 0.0 and larger than 1.0 can be 
specified in CMYK images, the alpha values MUST be clamped to the valid 
range from 0.0 to 1.0 before any further processing. 
15.2.3 
M8.17 For N-Channel colors, the context color MUST specify the number of 
channel float values equal to the number of channels in the profile. 
15.2.3, 
15.2.5 
M8.18 Although alpha values smaller than 0.0 and larger than 1.0 can be 
specified in N-Channel images, the alpha values MUST be clamped to the 
valid range from 0.0 to 1.0 before any further processing. 
15.2.5 
M8.19 In the case of a named color with an associated tint LUT implemented in 
an ICC monochrome profile, the profile MUST include an AtoB1Tag 
(relative colorimetric rendering intent), mapping the named color tint 
values to valid PCS values. 
15.2.6 
M8.20 Although alpha values smaller than 0.0 and larger than 1.0 can be 
specified in named color images, the alpha values MUST be clamped to 
the valid range from 0.0 to 1.0 before any further processing. 
15.2.6 
M8.21 This requirement was removed prior to Edition 1 of this Standard. 
 

F. Conformance Requirements 
ECMA-388 
428 
First Edition, June 2009 
ID 
Rule 
Reference 
M8.22 This requirement was removed prior to Edition 1 of this Standard; its 
description is retained here for historical purposes. 
The color name specified by the DocumentImpositionColor PrintTicket 
setting MUST be matched only to profiles containing exactly one non-
zero-length colorant name in the profile’s colorantTable.  
 
M8.23 This requirement was removed prior to Edition 1 of this Standard; its 
description is retained here for historical purposes. 
The color name specified by the DocumentImpositionColor setting serves 
as a label for that color only and MUST NOT be matched against any 
Named Colors known by the consumer. 
 
M8.24 This requirement was removed prior to Edition 1 of this Standard; its 
description is retained here for historical purposes. 
The comparison of the color name specified by the 
DocumentImpositionColor PrintTicket setting with the colorant name in 
the profile’s colorantTable MUST be performed as a case-sensitive ASCII 
comparison after trimming leading and trailing whitespace from each 
string. 
 
M8.25 For gradients, the specified blending color space in the blending color 
space  setting is used only if no gradient stop color values are specified 
using sRGB or scRGB colors. If any of the gradient stop color values are 
specified using sRGB or scRGB colors or the consumer does not 
understand the blending color space PrintTicket setting, the color 
interpolation mode of the gradient brush MUST be used instead. 
15.5 
M8.26 This requirement was removed prior to Edition 1 of this Standard. 
 
M8.27 This requirement was removed prior to Edition 1 of this Standard; its 
description is retained here for historical purposes. 
If the PageDeviceColorSpaceUsage is set to MatchToDeviceDefault and 
the profile specified by the PageDeviceColorSpaceURI PrintTicket setting 
cannot be used as a device color space profile, elements using the profile 
MUST be color managed like any other element using a color profile. 
 
M8.28 This requirement was removed prior to Edition 1 of this Standard; its 
description is retained here for historical purposes. 
If the PageBlendColorSpace PrintTicket setting is set to ICCProfile, the 
profile MUST be an output profile, otherwise it MUST be ignored.  
 
M8.29 This requirement was removed prior to Edition 1 of this Standard; its 
description is retained here for historical purposes. 
Elements using the named color identified by the 
DocumentImpositionColor PrintTicket setting MUST appear on all color 
separations. 
 
M8.30 If no usable profile is present with an image, then a consumer MUST 
apply a color rule based on the pixel format. Each pixel format is 
interpreted to be the encoding of a particular color space as shown in 
Table 15–3. 
9.1.5.1, 
9.1.5.2, 
9.1.5.3, 
9.1.5.4, 
15.3.7 

ECMA-388 
F. Conformance Requirements 
 
 First Edition, June 2009 
429 
ID 
Rule 
Reference 
M8.31 Channel and tint float values in CMYK, N-Channel, and Named Color 
syntax MUST be clamped to the valid range from 0.0 to 1.0 before 
further processing. Before the value is used as input for an ICC profile 
color transformation, it MUST be linearly scaled (with specified 
rounding/clipping) to the range from 0 to 255 or from 0 to 65535, 
depending on whether the profile uses 8-bit or 16-bit input tables. 
15.2.3, 
15.2.4, 
15.2.5, 
15.2.6 
M8.32 For 1-channel color, i.e., monochrome, use a monochrome input (or 
output) profile. The profile MUST include the ICC-optional AToB1Tag 
(relative colorimetric intent) if the single color is chromatic (not neutral). 
15.2.5, 
15.3.5 
M8.33 A named color with an associated tint LUT MUST be implemented in an 
OpenXPS Document using an associated ICC monochrome profile. 
15.2.6 
M8.34 The ICC profile for a named color with an associated tint LUT MUST 
contain the tint LUT for a single named color. 
15.2.6 
M8.35 The ICC profile for a named color with an associated tint LUT MUST be an 
ICC monochrome input or output profile.   
15.2.6 
M8.36 In the case of a named color with an associated tint LUT the ASCII 
prefix-root-suffix name of the named color MUST be encoded into the 
profileDescriptionTag of the ICC profile. 
15.2.6 
M8.37 In the case of a named color with an associated tint LUT the profile 
header color space signature MUST be ‘GRAY’. 
15.2.6 
M8.38 Two or more named colors implemented in an OpenXPS Document using 
a single associated profile MUST use an ICC Named Color type profile. 
15.2.6 
M8.39 An ICC Named Color type profile MUST contain the namedColor2Tag 
including the ASCII prefix-root-suffix name for each named color. 
15.2.6, 
15.3.6 
M8.40 The namedColor2Tag in a Named Color type profile MUST be populated 
with the ICC PCS color value for each named color. 
15.2.6, 
15.3.6 
M8.41 If present and usable, an associated profile MUST be used by consumers.  
15.3.7 
M8.42 If present and usable, a color profile embedded in an image file MUST be 
used by consumers when no usable associated profile is present with the 
image.  
15.3.7 
M8.43 A producer MUST associate or embed a usable color profile if the color 
rules of Table 15–3 do not guarantee appropriate color interpretation for 
an image.  
15.3.7 
M8.44 Profiles associated as described in Table 15–1, and determined to be 
usable, MUST be used by consumers. 
15.2 
M8.45 If no usable profile is present in a context color syntax, then a consumer 
MUST apply a color rule based on the context color syntax.  
15.2 
M8.46 Single component integer default for vector data MUST be grayscale with 
the sRGB non-linearity, black point, and white point.  
15.2 
M8.47 Three component integer default for vector data MUST be sRGB. 
15.2 
M8.48 Three component float default for vector data MUST be scRGB. 
15.2 
M8.49 The specific CMYK to be used as the four component data default for 
vector data MUST be determined by the consumer.  
15.2 

F. Conformance Requirements 
ECMA-388 
430 
First Edition, June 2009 
ID 
Rule 
Reference 
M8.50 N-Channel data with N <=3 and any named color data:  the data of the 
first channel MUST be interpreted independently as grayscale. Other 
channels are disregarded.  
15.2 
M8.51 N-Channel with N > 4 MUST be treated as four component data using the 
four component data default for vector data determined by the 
consumer.  
15.2 
M8.52 A producer MUST associate or embed a usable color profile if the color 
rules above do not guarantee appropriate color interpretation for the 
vector color content. 
15.2 
M8.53 OpenXPS consumers MUST use associated and embedded ICC profiles, 
according to the precedence order of §15.3.7 for raster images and 
according to §15.2 for vector content. 
15.1.8 
M8.54 Implementations MUST ignore and preserve private tags that they do not 
understand 
15.1.8 
M8.55 For Named colors, the OpenXPS context color syntax MUST specify the 
matching number of tint float values. 
15.2.6 
M8.56 Consumers MUST support grayscale colors (single channel) in vector 
data, with and without alpha. 
15.1 
M8.57 Consumers MUST support grayscale colors in image data, using the 
JPEG, PNG, TIFF, or JPEG XR image formats. 
15.1 
M8.58 Producers MUST restrict associated ICC profiles to conform to the 
requirements of the older ICC Color Profile specification, ICC.1:2001-04, 
when consumer support of the newer ISO version cannot be ascertained. 
15.1.8 
M8.59 If a Producer includes an image with an embedded profile conforming to 
the requirements of ISO 15076-1, then the Producer MUST associate an 
ICC profile conforming to the requirements of the older ICC Color Profile 
specification, ICC.1:2001-04, to have precedence over such an 
embedded profile, when consumer support of the newer ISO version 
cannot be ascertained. 
15.1.8 
F.9.2 
SHOULD Conformance Requirements 
Table F–22. Color SHOULD conformance requirements 
ID 
Rule 
Reference 
S8.1 
This requirement was removed prior to Edition 1 of this Standard; its 
description is retained here for historical purposes. It was subsumed by 
[M8.53] and [M8.41] through [M8.44]. 
ICC profiles SHOULD be used when embedded in any image format with any 
color space. Images with integer pixel formats are assumed to have sRGB as 
the default color space and images with floating point pixel formats are 
assumed to have scRGB as the default color space; in these cases, an ICC 
profile is unnecessary. 
 
S8.2 
If consistency of appearance of grayscale images is important, the producer 
SHOULD adjust the gray tone response curve of such images before adding 
to the OpenXPS Document. 
15.1.8 

ECMA-388 
F. Conformance Requirements 
 
 First Edition, June 2009 
431 
ID 
Rule 
Reference 
S8.3 
This requirement was removed prior to Edition 1 of this Standard; its 
description is retained here for historical purposes. 
A producer of OpenXPS documents containing named colors SHOULD create 
the color profile in such a way that a linear ramp of the channel values 
corresponding to a named colorant maps to PCS values resulting in the same 
color appearance for consumers unaware of named colors (or the specific 
colorant). 
 
S8.4 
This requirement was removed prior to Edition 1 of this Standard; its 
description is retained here for historical purposes. 
The ContextColor syntax requires a minimum of 1 Alpha value and 3 Channel 
values for named colors. It is RECOMMENDED that a 1 or 2 tone profile uses 
the first 1 or 2 channels, respectively, and specifies 0 for the remaining 
channels. 
 
S8.5 
This requirement was removed prior to Edition 1 of this Standard; its 
description is retained here for historical purposes. 
If the consumer does not know ALL of the colorants named in the clrt tag, it 
SHOULD treat the profile as if it were a regular N-channel source profile and 
SHOULD NOT attempt to use any of the known colorants, as that would 
result in undefined results. 
 
S8.6 
This requirement was removed prior to Edition 1 of this Standard; its 
description is retained here for historical purposes. 
Support for JPEG CMYK images varies by implementation and SHOULD NOT 
be used in OpenXPS Documents. 
 
S8.7 
For consumers that do perform separation, the occurrence of the document 
registration named color in a color syntax is only an indicator that the tint 
level supplied in the syntax SHOULD be used when drawing the registration 
marking in each colorant separation. 
15.4 
S8.8 
Producers SHOULD create the profile for the document registration named 
color in such a way that it does not lay down excessive ink when printed on a 
device that does not perform separation. 
15.4 
S8.9 
A page-level PrintTicket setting can be used to specify the blending color 
space that SHOULD be used for blending gradients and transparencies. If a 
consumer understands the blending color space PrintTicket setting, it 
SHOULD convert all color to the specified blending color space before 
performing a blend operation. 
15.5 
S8.10 This requirement was removed prior to Edition 1 of this Standard; its 
description is retained here for historical purposes.  
If the PageDeviceColorSpaceUsage PrintTicket setting is set to 
MatchToDeviceDefault, the device’s internal color profile SHOULD be used for 
color management of all elements not using the profile specified by the 
PageDeviceColorSpaceProfileURI PrintTicket setting.  
 

F. Conformance Requirements 
ECMA-388 
432 
First Edition, June 2009 
ID 
Rule 
Reference 
S8.11 This requirement was removed prior to Edition 1 of this Standard; its 
description is retained here for historical purposes.  
If the PageDeviceColorSpaceUsage PrintTicket setting is set to 
OverrideDeviceDefault and the profile specified by the 
PageDeviceColorSpaceProfileURI PrintTicket setting has a number of channels 
matching the number of primaries of the device, it SHOULD be used instead 
of the device’s internal color management for all elements. 
 
S8.12 This requirement was removed prior to Edition 1 of this Standard; its 
description is retained here for historical purposes.  
If the PageBlendColorSpace PrintTicket setting is set to ICCProfile, the Uri 
property of the option specifies an ICC profile defining the color space that 
SHOULD be used for blending. 
 
S8.13 This requirement was removed prior to Edition 1 of this Standard; its 
description is retained here for historical purposes.  
The PageICMRenderingIntent PrintTicket setting SHOULD be ignored for 
elements using a profile that specifies the rendering intent in the profile. 
 
S8.14 This requirement was removed prior to Edition 1 of this Standard; its 
description is retained here for historical purposes. It was subsumed by new 
rules for named colors in §15.2.3. 
A consumer incapable of supporting named colors SHOULD treat the colorant 
table for named colors tag in an ICC profile as a user-defined custom tag, 
and therefore ignore it. The consumer SHOULD instead use the color tables 
as provided in the profile to convert the specified colors to the Profile 
Connection Space (PCS). 
 
 
S8.15 This requirement was removed prior to Edition 1 of this Standard; its 
description is retained here for historical purposes. It was replaced by new 
rules M8.58 and M8.59. 
Producers SHOULD restrict ICC profiles to conform to the requirements of the 
older ICC Color Profile specification, ICC.1:2001-04, when consumer support 
of the newer ISO version cannot be ascertained. 
 
S8.16 
If the OpenXPS system environment allows the use of ICC ISO 15076-1 
profiles, the optional colorantTableTag SHOULD be included in such ISO 
15076-1 profiles to indicate the names and corresponding PCS values of the 
individual N-color colorants. 
15.2.5, 
15.3.5 
S8.17 A profile associated or embedded with an image SHOULD be considered 
unusable by a consumer if 1) The profile is not compatible with the pixel 
format of the image, 2) The profile contains optional tags that can cause 
ambiguity when used in OpenXPS, and 3) The profile contains invalid tag 
type signatures that invalidate OpenXPS use. 
15.3.7 
S8.18 A profile associated as in Table 15–1 SHOULD be considered unusable by a 
consumer if 1) The profile is not compatible with the context color syntax, 2) 
The profile contains optional tags that can cause ambiguity when used in 
OpenXPS, and 3) The profile contains invalid tag type signatures that 
invalidate OpenXPS use. 
15.2 

ECMA-388 
F. Conformance Requirements 
 
 First Edition, June 2009 
433 
ID 
Rule 
Reference 
S8.19 The specific CMYK to be used as the four-component raster data default, and 
the N-Channel (N=>4) default, is implementation-defined. In the absence of 
specific requirements the use of CGATS/SWOP TR003 2007 CMYK is 
recommended. 
15.3.7 
S8.20 In the absence of ICC rendering intents, in a typical case, with ICC profiles 
conforming to the ICC Color Profile specification, ICC.1:2001-04, a consumer 
SHOULD apply the defaults shown in Table 15–4. 
15.6 
S8.21 If a consumer recognizes that a profile given in the syntax for a page 
element matches the page level PrintTicket output-ready ICC profile and that 
the page level PrintTicket output-ready ICC profile is suitable for the output 
device conditions, then the consumer SHOULD elect to treat the element 
colors as output-ready colors and not color-manage them, unless forced to 
do so for transparency effects or gradient blending. 
15.1.7 
S8.22 The name of the document registration named color is given in the profile’s 
profileDescriptionTag. Such a document registration named color SHOULD be 
unique for that use in the OpenXPS Document instance. 
15.4 
S8.23 When using only two channels of a named color raster image with a Named 
Color ICC profile containing two named colors, the third component of the 
JPEG XR image plane SHOULD be ignored by a consumer. 
15.3.6 
S8.24 When using only two channels of a named color raster image with a Named 
Color ICC profile containing two named colors, a producer SHOULD zero all 
values in the third component of the JPEG XR. 
15.3.6 
S8.25 When using only two channels of a color raster image with a ‘2CLR’ ICC 
profile, the third component of the JPEG XR image plane SHOULD be ignored 
by a consumer. 
15.3.5 
S8.26 When using only two channels of a color raster image with a ‘2CLR’ ICC 
profile, a producer SHOULD zero all values in the third component of the 
JPEG XR.  
15.3.5 
F.9.3 
OPTIONAL Conformance Requirements 
Table F–23. Color OPTIONAL conformance requirements 
ID 
Rule 
Reference 
O8.1 
Consumers are not required to handle all color spaces natively through 
every processing stage, but, rather, MAY convert data specified in a color 
space other than sRGB to sRGB at an early stage (possibly resulting in 
reduced fidelity). 
15.1 
O8.2 
This requirement was removed prior to Edition 1 of this Standard; its 
description is retained here for historical purposes. 
An ICC profile MAY contain the private tag, “MS00”, which specifies an 
embedded Windows Color System (WCS) profile. 
 

F. Conformance Requirements 
ECMA-388 
434 
First Edition, June 2009 
ID 
Rule 
Reference 
O8.3 
When a named color is used in a gradient brush or with transparency, the 
result produced by consumers determining the color from the ASCII color 
name found in the associated ICC Profile MAY differ significantly from the 
result produced by consumers using the encoded color value of the 
named color from the associated ICC profile. 
15.2.6 
O8.4 
This requirement was removed prior to Edition 1 of this Standard; its 
description is retained here for historical purposes. 
A named color profile MAY be used with images for spot coloring. 
 
O8.5 
Producers MAY elect to generate content that provides registration marks 
for consumers that perform color separation. 
15.4 
O8.6 
Consumers MAY support alpha and gradient blending with color spaces 
such as scRGB or CMYK. Consumers that encounter any document using 
non-sRGB colors MAY process those colors using conversion to the simpler 
sRGB color space, resulting in deviations, especially for alpha blending. 
15.5 
O8.7 
This requirement was removed prior to Edition 1 of this Standard; its 
description is retained here for historical purposes.  
If the PageColorManagement PrintTicket setting specifies a value of 
Driver, the driver MAY color manage elements or convert them to 
different color spaces. 
 
O8.8 
This requirement was removed prior to Edition 1 of this Standard; its 
description is retained here for historical purposes.  
Elements using the profile specified by PageBlendColorSpace PrintTicket 
setting with a value of ICCProfile MAY be blended naively (channel-by-
channel) without converting through PCS. 
 
O8.9 
OpenXPS producers and consumers MAY provide color management using 
ICC profiles conforming to the requirements of ISO 15076-1. 
15.1.8, 15.6 
O8.10 This requirement was removed prior to Edition 1 of this Standard; its 
description is retained here for historical purposes. 
The specific CMYK to be used as the four-component raster data default, 
and the N-Channel (N=>4) default, is implementation-defined. In the 
absence of specific requirements the use of CGATS/SWOP TR003 2007 
CMYK is recommended.  Alternatively, a consumer MAY choose to 
instantiate an error condition. 
 
 
O8.11 A single named color MAY be implemented in an OpenXPS Document 
using an associated ICC Named Color type profile. 
15.2.6 
O8.12 An the case of an ICC Named Color type profile the namedColor2Tag MAY 
be populated with specific device color values for each named color. 
15.2.6, 
15.3.6 
O8.13 A consumer incapable of supporting a particular ICC profile tag that is 
optional in both ICC and OpenXPS MAY treat this tag as a user-defined 
custom tag, and therefore ignore it. 
15.2, 15.3.7 
O8.14 When no usable profile is present a consumer MAY choose to instantiate 
an error condition.  
15.2, 15.3.7 
O8.15 ICC profiles embedded in any image format (according to the restrictions 
of the image file format) with any color space. 
15.1.8 

ECMA-388 
F. Conformance Requirements 
 
 First Edition, June 2009 
435 
ID 
Rule 
Reference 
O8.16 OpenXPS producers MAY include ICC profiles for sRGB and scRGB color 
spaces. 
15.1.8 
O8.17 An ICC profile MAY contain private tags. 
15.1.8 
O8.18 Implementations MAY act on private tags. 
15.1.8 
O8.19 Producers and consumers MAY support N-Channel colors in image data, 
using the TIFF image format. 
15.1 
O8.20 A consumer MAY use the profile to obtain the encoded name of the named 
color. 
15.2.6 
O8.21 A consumer MAY use the encoded name of a named color to lookup a 
device-specific color value for the named color. 
15.2.6 
O8.22 A consumer MAY use the profile to obtain the encoded name of the named 
color. 
15.2.6, 
15.3.6 
O8.23 A consumer MAY use the encoded name of a named color to lookup a 
device-specific color value for the named color. 
15.2.6, 
15.3.6 
O8.24 A consumer MAY use the encoded name of a named color to lookup a 
device-specific color value for the named color 
15.3.6 
O8.25 Consumers MAY use the ASCII name in the ICC profile or MAY compute a 
color approximation using a specified color value in the ICC profile; the 
results of these two methods MAY differ significantly.  
15.3.6 
O8.26 A document registration named color identified in a PrintTicket MAY occur 
in an OpenXPS Document using the single named color and monochrome 
profile with tint LUT syntax. 
15.4 
F.10 Document Structure and Interactivity 
F.10.1 MUST Conformance Requirements 
Table F–24. Document structure MUST conformance requirements 
ID 
Rule 
Reference 
M9.1 
In order to merge the table cells and rows correctly, producers MUST specify 
empty <TableCellStructure> elements for cells that do not break across story 
fragments. 
16.1.2 
M9.2 
If hyperlinked <Path> or <Glyphs> elements are rendered as overlapping on 
the page, consumers MUST treat the topmost element as the only hyperlink 
that can be activated in the overlapping region. 
16.2.1 
M9.3 
If a producer specifies a FixedPage.NavigateUri attribute on a <Canvas> 
element, consumers MUST treat all child elements of that canvas that do not 
override this value with their own FixedPage.NavigateUri attribute setting as 
having an associated hyperlink. 
16.2.1 
M9.4 
Relative internal hyperlinks between FixedPage parts MUST specify, at a 
minimum, the named address relative to the FixedDocument part. 
16.2.1 
M9.5 
In order to be addressable by either a hyperlink or the document outline, the 
named address MUST appear in the <PageContent.LinkTargets> element in 
the fixed document. 
16.2.1 

F. Conformance Requirements 
ECMA-388 
436 
First Edition, June 2009 
ID 
Rule 
Reference 
M9.6 
If a named address appears in the <PageContent.LinkTargets> element in the 
fixed document but is not found in the Name attribute of an element within 
the associated fixed page, consumers MUST treat the top of the associated 
fixed page as the named address. 
16.2.1 
M9.7 
If a named address in a URI fragment is not found, consumers MUST ignore 
the fragment portion of the URI. 
16.2.1 
M9.8 
Internal references MUST specify a page address relative to the fixed 
document sequence. 
16.2.2 
M9.9 
Consumers MUST expose every element of the fixed page markup to an 
accessibility interface in the determined reading order, even if the elements 
are not referenced in the content structure markup. 
16.4.1 
M9.10 The Name attribute MUST NOT be specified on any children of a 
<ResourceDictionary> element. 
16.2.3 
M9.11 The FragmentName attribute MUST be unique within the scope of the story. 
16.1.1.6 
M9.12 A <StoryBreak> element MUST NOT be included in a position other than the 
first or last child element of a <StoryFragment> element. 
16.1.2 
M9.13 A <TableRowGroupStructure> element is REQUIRED in order to specify a set 
of <TableRowStructure> elements. 
16.1.2.7 
M9.14 
If specified, the Name value MUST meet the following requirements: The 
initial character MUST be an underscore character or a letter, that is, it falls 
within the Lu, Ll, Lo, Lt, and Nl categories. Trailing characters MUST be an 
underscore character or a letter or number, that is, they fall within the Lu, Ll, 
Lo, Lt, Nl, Mn, Mc, and Nd categories. 
16.2.3 
F.10.2 SHOULD Conformance Requirements 
Table F–25. Document structure SHOULD conformance requirements 
ID 
Rule 
Reference 
S9.1 
Every meaningful element in the fixed page markup SHOULD specify a Name 
attribute in order for the document structure markup to refer to it 
16.1.1 
S9.2 
This requirement was removed prior to Edition 1 of this Standard. 
 
S9.3 
Document structure markup SHOULD NOT refer to a single named element 
more than once in the document content or to a named element that 
embeds another named element that it also refers to. When referring to a 
<Canvas> element, producers SHOULD consider all descendant elements to 
be referenced in markup order. 
16.1.1 
S9.4 
If a <StoryBreak> element is not present at the beginning of the content 
structure markup, consumers SHOULD consider the markup a continuation 
of the previous story fragment that must be merged. Likewise, if a 
<StoryBreak> element is not present at the end of the content structure 
markup, consumers SHOULD consider the markup a continuation to the 
next story fragment that must be merged to determine the cross-fragment 
content structure. 
16.1.2 

ECMA-388 
F. Conformance Requirements 
 
 First Edition, June 2009 
437 
ID 
Rule 
Reference 
S9.5 
Producers authoring document structure information SHOULD reference 
every element of the fixed page markup that has semantic meaning (such 
as text or images) in the StoryFragments parts. 
16.1.2.2 
S9.6 
If consumers enable user interactivity, they SHOULD support hyperlink 
activation and addressing. 
16.2 
S9.7 
When activating a hyperlink, consumers SHOULD load the specified resource 
if they understand the URI type. If the URI is an internal reference to the 
OpenXPS Document, consumers SHOULD navigate to the URI. 
16.2.1 
S9.8 
The value of the Name attribute on a <FixedPage>, <Canvas>, <Path>, or 
<Glyphs> element SHOULD be unique within the scope of the fixed 
document. 
16.2.1 
S9.9 
It is RECOMMENDED that Name attribute values on <FixedPage>, 
<Canvas>, <Path>, and <Glyphs> elements be unique within an entire 
fixed document sequence. 
16.2.1 
S9.10 If the Name attribute is specified, producers SHOULD also create a 
corresponding <LinkTarget> element in the FixedDocument part within the 
<PageContent> element that links to the parent fixed page 
16.2.3 
S9.11 A hyperlink destination in the same fixed document SHOULD be expressed 
as a relative URI. 
16.2.4 
S9.12 This requirement was removed prior to Edition 1 of this Standard. 
If selection is supported, consumers SHOULD provide a visual cue over or 
around selected elements.  
 
 
S9.13 Selection order within an OpenXPS Document SHOULD follow reading order. 
16.3 
S9.14 In the absence of document structure provided in the OpenXPS Document, 
consumers SHOULD, at minimum, rely on the markup order to determine 
reading order. 
16.4.1 
S9.15 Producers SHOULD order the markup in FixedPage parts to reflect the order 
in which it is intended to be read. 
16.4.1 
S9.16 When document structure information is present, consumers SHOULD rely 
on the order of appearance of named elements in the content structure 
markup to determine reading order. 
16.4.1 
S9.17 The RECOMMENDED reading order of a page-centric application is 1) order 
the content by page, 2) order by story fragment within the page based on 
the order the <StoryFragment> elements are specified in the 
StoryFragments part for that page, 3) order by <NamedElement> reference 
within the <StoryFragment> element, 4) append all un-referenced elements 
that appear in the fixed page markup, ordered by markup order. 
16.4.1 
S9.18 Producers SHOULD order <StoryFragment> elements in each 
StoryFragments part in their intended reading order. 
16.4.1 

F. Conformance Requirements 
ECMA-388 
438 
First Edition, June 2009 
ID 
Rule 
Reference 
S9.19 The RECOMMENDED reading order of a story-centric application is as 
follows: 1) Order content by story in the sequence the <Story> elements 
appear in the DocumentStructure part. 2) Within a story, order 
<StoryFragmentReference> elements in the sequence they appear in the 
DocumentStructure part. 3) Within a story fragment, order by 
<NamedElement> references in the StoryFragments part markup. 4) 
Append all un-referenced elements that appear in the fixed page markup, 
ordered by page number, then markup order 
16.4.1 
S9.20 Producers SHOULD order <Story> elements in the DocumentStructure part 
in their intended reading order. 
16.4.1 
S9.21 Producers SHOULD order <StoryFragmentReference> elements within a 
<Story> element in their intended reading order. 
16.4.1 
S9.22 A screen reader consumer SHOULD read the document according to its 
reading order. 
16.4.2 
S9.23 A screen reader SHOULD use the UnicodeString attribute of each <Glyphs> 
element to determine the text to read. 
16.4.2 
S9.24 If a screen reader provides features to navigate the document by structural 
elements, such as paragraphs or table rows, it SHOULD use any document 
structure information included in the OpenXPS Document. 
16.4.2 
S9.25 If the screen reader provides features to describe images, it SHOULD read 
the text provided in the AutomationProperties.Name and 
AutomationProperties.HelpText attributes. 
16.4.2 
S9.26 If the screen reader provides features to describe hyperlink addresses, it 
SHOULD read the text provided in the FixedPage.NavigateUri attribute. 
16.4.2 
S9.27 Images and graphics SHOULD specify text alternatives for images and 
graphics to make this content accessible to vision-impaired individuals. The 
AutomationProperties.Name attribute SHOULD contain a short description of 
the basic contents of the image or vector graphic. Individual <Path> 
elements that do not provide any semantic meaning (such as a line between 
sections or outlining a table) SHOULD NOT specify these text alternative 
attributes. 
16.4.3 
S9.28 An image SHOULD specify the AutomationProperties.Name and 
AutomationProperties.HelpText attributes on the <Path> element that is filled 
with an <ImageBrush> that describes the content specified by the 
ImageSource attribute of the <ImageBrush> element. 
16.4.3 
S9.29 A vector graphic (a collection of one or more <Path> elements representing 
a single drawing) SHOULD specify the AutomationProperties.Name and 
AutomationProperties.HelpText attributes only once, directly on a <Canvas> 
element wrapping the <Path> elements comprising the graphic. 
16.4.3 
S9.30 Children of <VisualBrush> elements SHOULD NOT be referenced by 
document structure markup. 
16.1.1, 
16.1.2.13 

ECMA-388 
F. Conformance Requirements 
 
 First Edition, June 2009 
439 
F.10.3 OPTIONAL Conformance Requirements 
Table F–26. Document structure OPTIONAL conformance requirements 
ID 
Rule 
Reference 
O9.1 
Producers MAY choose to add document structure information to OpenXPS 
Documents. Consumers MAY ignore any authored document structure or 
hyperlinks. 
Clause 
16 
O9.2 
Producers MAY provide either the document outline or the document content, 
or both; consumers MAY ignore either or both. 
16.1 
O9.3 
Consumers MAY choose to interpret document structure markup that refers to 
a single named element more than once, or refers to a named element that 
embeds another named element that is also referenced, as duplicate content. 
16.1.1 
O9.4 
Consumers MAY first attempt to locate named elements for document 
structure directly from the FixedDocument part markup, where they might 
appear as <LinkTarget> elements if that named element is also intended as 
an addressable location. 
16.1.1 
O9.5 
A <TableStructure> element is the complete definition of a table. An 
implementation MAY use it to build special functionality, such as row or 
column selection. 
16.1.2.6 
O9.6 
Internal hyperlinks can specify a named element fragment relative to a 
particular fixed document, but consumers MAY interpret such a URI relative to 
the entire fixed document sequence instead 
16.2.1 
O9.7 
Consumers MAY ignore the Name attribute. 
16.2.3 
O9.8 
Consumers MAY ignore the FixedPage.NavigateUri attribute. 
16.2.4 
O9.9 
Viewing consumers that support interactivity MAY support selection and 
copying. 
16.3 
O9.10 Consumers MAY use the FragmentType attribute of the <StoryFragment> 
element to determine selection behavior, such as disallowing selection of both 
the page header and the page contents while allowing independent selection 
within those stories. 
16.3 
O9.11 In the absence of document structure information provided in the OpenXPS 
Document, consumers MAY infer the reading order from the position of 
elements on the page. 
16.4.1 
O9.12 Consumers MAY use the FragmentType attribute of the <StoryFragment> 
element to determine reading order by interpreting elements that have 
FragmentType values of Header and Footer as belonging first or last in the 
reading order, respectively. 
16.4.1 
O9.13 Screen readers MAY inspect the Indices attribute to resolve potential 
ambiguities in the UnicodeString attribute. 
16.4.2 
O9.14 The <DocumentStructure> element MAY contain a single 
<DocumentStructure.Outline> element and zero or more <Story> elements 
16.1.1.1 
O9.15 A <StoryFragment> element MAY be identified with a FragmentName 
attribute to distinguish it from other fragments for the same story on a single 
page. 
16.1.2.2 
O9.16 The <TableCellStructure> element defines the appearance of a table cell. It 
MAY contain nested <TableStructure> elements 
16.1.2.9 

F. Conformance Requirements 
ECMA-388 
440 
First Edition, June 2009 
ID 
Rule 
Reference 
O9.17 The FixedPage.NavigateUri attribute is OPTIONAL. 
16.2.4 
F.11 OpenXPS Document Package Features 
F.11.1 MUST Conformance Requirements 
Table F–27. OpenXPS Document package feature MUST conformance requirements 
ID 
Rule 
Reference 
M10.1 
Consumers MUST be prepared to correctly process interleaved packages in 
which the PrintTicket or the portion of the relationship data attaching the 
PrintTicket appears in the package after the affected part. 
17.1 
M10.2 
Consumers MUST be able to consume packages regardless of their 
interleaving structure. 
17.1.3 
M10.3 
This requirement was removed prior to Edition 1 of this Standard; its 
description is retained here for historical purposes. 
Consumers that lack the resources to process a part MUST instantiate  an 
error condition. 
 
 
M10.4 
When consuming interleaved packages, consumers MUST NOT discard any 
parts without instruction from a DiscardControl part unless they have the 
ability to access the parts again. 
17.1.3 
M10.5 
If a consumer encounters a reference to an unknown part, it MUST 
continue to receive further bytes of the package until the unknown part 
has been transmitted or until the end of the package is reached (indicating 
an error condition). 
17.1.3 
M10.6 
The DiscardControl part MUST NOT reference itself. 
17.1.4.1 
M10.7 
If either the Target attribute or the SentinelPage attribute of the <Discard> 
element contain an invalid reference (refer outside the package), the 
<Discard> element MUST be ignored. 
17.1.4.1.2 
M10.8 
All producers and consumers signing and verifying signatures for end users 
or applications MUST adhere to the OpenXPS Document signature policy, 
and producers and consumers MUST interpret digital signatures 
consistently. 
17.2.1 
M10.9 
Consumers MUST NOT prevent an end user from taking an action solely 
because doing so will invalidate a signature. 
17.2.1 

ECMA-388 
F. Conformance Requirements 
 
 First Edition, June 2009 
441 
ID 
Rule 
Reference 
M10.10 An OpenXPS Document MUST be considered signed according to the 
OpenXPS Document signing policy, regardless of the validity of that 
signature, if the signing rules described in §17.2.1.1 are observed. 
The following parts MUST be signed: All FixedDocument parts referenced in 
the markup of the FixedDocumentSequence part; FixedDocumentSequence 
part that is the target of the Start Part package relationship; All FixedPage 
parts referenced by all signed FixedDocument parts; <SignedInfo> portion 
of the Digital Signature XML Signature part containing this signature; All 
parts associated with each signed FixedPage part by means of a Required 
Resource relationship; All DocumentStructure parts associated via a 
Document Structure relationship with all signed FixedDocument parts; All 
StoryFragments parts associated via Story Fragments relationship with all 
signed FixedPage parts; All SignatureDefinitions parts associated via a 
Signature Definitions relationship with any signed FixedDocument part; All 
Thumbnail parts associated via a Thumbnail relationship from the package 
root or with any signed FixedPage or FixedDocument part 
17.2.1.1 
M10.11 An OpenXPS Document MUST NOT be considered signed according to the 
OpenXPS Document signing policy if any part not covered by the signing 
rules is included in the signature or if any relationship not covered by the 
signing rules is included in the signature. 
17.2.1.1 
M10.12 An OpenXPS Document digital signer MUST NOT sign an OpenXPS 
Document that contains content (parts or relationships parts) to be signed 
that defines the Markup Compatibility namespace but the signer does not 
fully understand all elements, attributes, and alternate content 
representations introduced through the markup compatibility mechanisms. 
17.2.1.1 
M10.13 An OpenXPS Document digital signature MUST be treated as an 
incompliant digital signature if it violates any of the signing rules regarding 
parts or relationships that MUST or MUST NOT be signed. 
17.2.1.2 
M10.14 An OpenXPS Document digital signature MUST be shown as a broken 
digital signature if it is not an incompliant digital signature and it violates 
any of the signing rules described above regarding parts or relationships 
that MUST be signed, and it is not an incompliant digital signature, but the 
signature fails the signature validation routines described in the OPC. 
17.2.1.2 
M10.15 An OpenXPS Document digital signature MUST be shown as a questionable 
digital signature if it is not an incompliant or broken digital signature, but 
the certificate cannot be authenticated against the certificate authority or 
the signed content (parts and relationships) contain elements or attributes 
from an unknown namespace introduced through Markup Compatibility 
mechanisms. 
17.2.1.2 
M10.16 An OpenXPS Document digital signature MUST be shown as a valid digital 
signature if it is not an incompliant, broken, or questionable digital 
signature. 
17.2.1.2 
M10.17 To prohibit additional signatures in an OpenXPS Document, the signing 
application MUST sign all the Digital Signature Origin part’s relationships of 
relationship type Digital Signature with the same signature as the rest of 
the content. 
17.2.1.3 

F. Conformance Requirements 
ECMA-388 
442 
First Edition, June 2009 
ID 
Rule 
Reference 
M10.18 OpenXPS Document signatures MUST NOT refer to a remote certificate 
store. All certificates MUST be stored in the OpenXPS Document either as a 
Certificate part or in the Digital Signature XML Signature part. 
17.2.1.4 
M10.19 To link a <SignatureDefinition> to a signature, the value of the SpotID 
MUST be specified in the Id attribute of the corresponding <Signature> 
element in the Digital Signature XML Signature part. 
17.2.2.2.1 
M10.20 Due to space and rendering limitations, producers MUST NOT assume that 
consumers will use the values specified in the <SpotLocation> element. 
17.2.2.3 
M10.21 Consumers MUST display the full value of the <Intent> element to the 
signing party, either in the signature spot or through some other 
mechanism. 
17.2.2.4 
M10.22 If specified, the <SignBy> date and time MUST be specified as a complete 
date plus hours, minutes, and seconds in UTC time, as described in the 
W3C Note “Date and Time Formats.” 
17.2.2.5 
M10.23 There MUST NOT be more than one DiscardControl package relationship. 
17.1.4.1 
M10.24 In some cases, producers might rewrite the contents of a package so that 
parts are provided more than once, allowing consumers to discard a part in 
order to free resources for additional processing. Each instance of a part 
MUST be stored as a new, uniquely named part in the package. 
17.1.4.1 
M10.25 An OpenXPS Document digital signer MUST NOT sign a PrintTicket part if it 
does not fully understand the PrintTicket content. 
17.2.1.1 
M10.26 If the SignatureDefinitions part exists, it MUST contain only one 
<SignatureDefinitions> element. 
17.2.2.1 
M10.27 If the SignatureDefinitions part exists, there MUST be at least one 
<SignatureDefinition> element. 
17.2.2.2 
M10.28 The SpotID attribute is REQUIRED. 
17.2.2.2.1 
M10.29 The value of this attribute MUST be globally unique to ensure that a 
Signature part can be linked to only one <SignatureDefinition> element. 
17.2.2.2.1 
F.11.2 SHOULD Conformance Requirements 
Table F–28. OpenXPS Document package feature SHOULD conformance requirements 
ID 
Rule 
Reference 
S10.1 
When interleaving, the Content Types stream SHOULD be interleaved 
according to the recommendations in the OPC Standard. 
17.1 
S10.2 
When interleaving, PrintTicket parts SHOULD be written to the package 
before the part to which they are attached. 
17.1 
S10.3 
When interleaving, the portion of the relationship data attaching the 
PrintTicket to a part SHOULD be written to the package before the part to 
which it is attached or in close proximity to the part to which it is attached. 
17.1 

ECMA-388 
F. Conformance Requirements 
 
 First Edition, June 2009 
443 
ID 
Rule 
Reference 
S10.4 
When interleaving, if no PrintTicket settings are specified for a 
FixedDocumentSequence, FixedDocument, or FixedPage part, an empty 
PrintTicket part SHOULD be attached to the part, and the portion of the 
relationship data attaching the empty PrintTicket SHOULD be written to the 
package before the part to which it is attached or in close proximity to the 
part to which it is attached. 
17.1 
S10.5 
When interleaving, the last piece of the Relationships part for a FixedPage 
part SHOULD be written to the package in close proximity to the first piece 
of the FixedPage part. 
17.1 
S10.6 
It is RECOMMENDED that one empty PrintTicket be shared for all parts that 
attach an empty PrintTicket. 
17.1.1 
S10.7 
Producers, such as drivers, that target resource-constrained consumers 
SHOULD: 1) Conservatively model the memory usage of the device. 2) 
Interleave pieces of parts in the correct order. 3) Decide when certain parts 
can be discarded by the consumer and inform the consumer within the 
package stream. 4) Add to the package a uniquely named copy of a 
resource that could have been discarded, if the resource is referenced by a 
part sent later in the stream. 
17.1.4 
S10.8 
This requirement was removed prior to Edition 1 of this Standard; its 
description is retained here for historical purposes. 
DiscardControl parts that are not well formed SHOULD NOT be processed 
and an error condition SHOULD NOT be instantiated. 
 
S10.9 
If a <Discard> element is encountered where either or both of the Target 
attribute and SentinelPage attribute identify a part which has not been 
processed yet (is still unknown), the <Discard> element SHOULD be 
retained until both parts identified by the Target attribute and SentinelPage 
attribute have been processed or until the end of the package is reached. 
17.1.4.1.2 
S10.10 When adding a digital signature to an interleaved package, producers of 
digitally signed documents that are intended for streaming consumption 
SHOULD add all digital signature parts and the package relationship to the 
digital signature parts at the beginning of the package, before adding any 
other part. 
17.1.5 
S10.11 Consumers SHOULD inform the end user if an action they are going to take 
will invalidate an existing signature.  
17.2.1 
S10.12 This requirement was removed prior to Edition 1 of this Standard; its 
description is retained here for historical purposes. 
When printing signed documents, the PrintTicket setting 
JobDigitalSignatureProcessing SHOULD be used to control the digital 
signature processing behavior. Consumers SHOULD process this PrintTicket 
setting, if present 
 
S10.13 If the location specified by the <SpotLocation> element is not used when 
the signature spot is displayed, it is RECOMMENDED that consumers choose 
a location that does not contain any page content. 
17.2.2.3 
S10.14 It is RECOMMENDED that consumers render signature spots as consistently 
sized rectangles that include the signer name, the intent, the signing 
location, and the scope of the OpenXPS Document to be signed.  
17.2.2.3 

F. Conformance Requirements 
ECMA-388 
444 
First Edition, June 2009 
ID 
Rule 
Reference 
S10.15 It is RECOMMENDED that a signature spot be a clickable area used to 
launch the digital signing process. 
17.2.2.3 
S10.16 If the <SignBy> element is specified, the consumer SHOULD NOT allow the 
signing party to sign the document using this particular signature spot after 
the date and time specified. 
17.2.2.5 
S10.17 The values specified in the Core Properties part SHOULD refer to the entire 
fixed payload, including the root FixedDocumentSequence part and the 
compilation of all FixedDocument parts it references. 
17.3 
S10.18 Head-first OpenXPS Document consumers SHOULD attempt to detect 
inconsistent packages as soon as possible and SHOULD instantiate an error 
condition, even if they have already processed the pages that resulted in 
the error. 
17.1 
S10.19 The viewing consumer SHOULD use the values specified in the 
<SpotLocation> element to place a signature spot. 
17.2.2.3 
S10.20 The relationships for the DiscardControl part and the StartPart SHOULD 
both be written in the first piece of the package relationship part, and that 
piece SHOULD be before the first FixedPage part in the package. 
17.1 
S10.21 The piece of the DiscardControl part that includes a Discard element with a 
SentinelPage attribute referencing a FixedPage part SHOULD be written to 
the package before that FixedPage part.  
17.1 
S10.22 Consumers that support printing of signed documents SHOULD support 
control through PrintTicket settings pertaining to the treatment of OpenXPS 
Documents with invalid or questionable signatures. 
17.2.1.5 
S10.23 If a consumer encounters a reference to an unknown part, it must continue 
to receive further bytes of the package until the unknown part has been 
transmitted or until the end of the package is reached (indicating an error 
condition); if the end of the package is reached the consumer SHOULD 
instantiate an error condition. 
17.1.3 
F.11.3 OPTIONAL Conformance Requirements 
Table F–29. OpenXPS Document package feature OPTIONAL conformance requirements 
ID 
Rule 
Reference 
O10.1 
Interleaving is OPTIONAL. 
17.1 
O10.2 
Producers MAY optimize the interleaving order of parts to help consumers 
avoid stalls during read-time streaming, and to allow consumers to manage 
their memory resources more efficiently. 
17.1.2 
O10.3 
Consumers MAY discard FixedPage parts once they have been processed. 
17.1.3 
O10.4 
Consumers MAY discard FixedDocument and FixedDocumentSequence 
parts after all their child elements and their closing tags have been 
processed. 
17.1.3 
O10.5 
In the absence of explicit directives to the contrary, consumers MAY 
discard parts as directed by the DiscardControl part. 
17.1.3 
O10.6 
Some producers (typically drivers) MAY choose a suitable interleaving order 
by modeling the resource management behavior of the consumer. 
17.1.4 

ECMA-388 
F. Conformance Requirements 
 
 First Edition, June 2009 
445 
ID 
Rule 
Reference 
O10.7 
A consumer MAY decide to ignore a malformed DiscardControl part in its 
entirety or from the first malformed node onward. 
17.1.4.1 
O10.8 
An OpenXPS Document digital signer MAY choose not to sign any content 
(parts or relationships parts) that defines the Markup Compatibility 
namespace, even if the content is fully understood. 
17.2.1.1 
O10.9 
An OpenXPS Document digital signature MAY be shown as a questionable 
digital signature if it is not an incompliant or broken digital signature, but 
contains some other detectable problem at the discretion of the consumer. 
17.2.1.2 
O10.10 OpenXPS Documents MAY be signed more than once. 
17.2.1.3 
O10.11 This requirement was removed prior to Edition 1 of this Standard; its 
description is retained here for historical purposes. 
Producers MAY include the JobDigitalSignatureProcessing setting in the job-
level PrintTicket within the OpenXPS Document content. 
 
O10.12 The SpotID attribute of the <SignatureDefinition> element MAY be used to 
link to an existing signature. 
17.2.2.2.1 
O10.13 Consumers MAY choose a size and shape to display a signature spot based 
on the desired display information and page content. 
17.2.2.3 
O10.14 The <SigningLocation> element MAY be set by the original producer of the 
OpenXPS Document or by the signing party at the time of requesting a 
signature. 
17.2.2.6 
O10.15 The <SpotLocation> element is OPTIONAL. 
17.2.2.3 
O10.16 The following parts MAY be signed: CoreProperties, Digital Signature 
Certificate, Digital Signature Origin, DiscardControl, and PrintTicket. 
17.2.1.1 
O10.17 Consumers MAY elect not to instantiate an error condition when 
encountering DiscardControl parts that do not conform to this specification. 
17.1.4.1 
F.12 Rendering Rules 
F.12.1 MUST Conformance Requirements 
Table F–30. Rendering rules MUST conformance requirements 
ID 
Rule 
Reference 
M11.1 
Producers MUST generate OpenXPS Documents that can be accurately 
rendered by following the rules described in the “Rendering Rules” clause. 
Consumers MUST adhere to the rules described in the “Rendering Rules”  
clause when rendering OpenXPS Documents 
18 
M11.2 
If a non-invertible transform is encountered during rendering, consumers 
MUST omit rendering the affected element and all of its child and 
descendant elements. 
18.1.3 
M11.3 
If a non-invertible transform is encountered on a geometry (as specified 
directly on the geometry or through concatenation), the geometry MUST be 
considered to contain no area. 
18.1.3 
M11.4 
Producers MUST NOT assume a specific placement error for curve 
decomposition or rely on side-effects of a specific consumer implementation. 
18.1.5 

F. Conformance Requirements 
ECMA-388 
446 
First Edition, June 2009 
ID 
Rule 
Reference 
M11.5 
If a consumer encounters markup with characteristics outside its 
implementation-defined limits, it MUST instantiate an error condition 
18.2 
M11.6 
The alpha information in TIFF images using an ExtraSamples tag value of 1 
and in JPEG XR images using pixel formats 32bppPBGRA, 64bppPRGBA or 
128bppPRGBAFloat MUST be interpreted as pre-multiplied alpha information. 
18.4.1 
M11.7 
Composition MUST have the same effect as the application of the rules 
in §18.5, in sequence. 
18.5 
M11.8 
The precise source coordinates as specified by the viewbox MUST be used to 
place an up-sampled image tile, which is equivalent to using fractional pixels 
of the original source image. 
18.7.2 
M11.9 
Consumers MUST precisely position the tiles specified by the image brush 
and visual brush. If the specified values result in fractional device pixels, the 
consumer MUST calculate a running placement-error delta and adjust the 
placement of the next tile where the delta reaches a full device pixel in order 
to keep the tiles from being increasingly out of phase as the expanse of the 
path is filled. 
18.7.3 
M11.10 The Width and Height values specified in the Viewbox and Viewport attributes 
of an <ImageBrush> or <VisualBrush> element MUST NOT be negative. 
18.1.3 
F.12.2 SHOULD Conformance Requirements 
Table F–31. Rendering rules SHOULD conformance requirements 
ID 
Rule 
Reference 
S11.1 
Coordinates are real numbers. All computations on coordinate values 
SHOULD be performed with at least single floating-point precision. Final 
conversion (after all transforms have been computed) to device coordinates 
SHOULD retain at least as much fractional precision as a 28.4 fixed-point 
representation before performing pixel coverage calculations. 
18.1.2, 
Table 
18–1 
S11.2 
An ideal consumer implementation SHOULD render pixels in an 8x8 sub-
pixel space, perform an 8x8 box filter sampling, and set the pixel to the 
resulting color value. 
18.1.4 
S11.3 
When rendering a shape, a practical implementation (such as a bi-tonal 
printing device) SHOULD turn on each pixel whose center (at x+0.5) is 
covered by the shape, or is touched by the shape with the shape extending 
beyond the pixel center in the positive x or y direction of the device. 
18.1.4, 
18.6.12 
S11.4 
When rendering geometries, consumers SHOULD render curves so they 
appear smooth from a normal viewing distance. 
18.1.5 
S11.5 
When no anti-aliasing is used, abutting shapes that share the same device 
coordinates for the end-points and control-points of an edge SHOULD be 
rendered without overlap and without gaps. Ideally, an implementation 
SHOULD also follow this rule for shapes that are mathematically abutting 
without sharing device coordinates for end-points and control-points of 
edges. 
18.1.7 

ECMA-388 
F. Conformance Requirements 
 
 First Edition, June 2009 
447 
ID 
Rule 
Reference 
S11.6 
Clipping occurs as if a mask were created from the clip geometry according 
to the pixel inclusion rules. An ideal consumer SHOULD create such a mask 
in an 8x8 sub-pixel space and subsequently draw only those sub-pixels of a 
shape that correspond to “ON” sub-pixels in the mask. 
18.1.8 
S11.7 
A practical implementation (such as a bi-tonal printing device) SHOULD 
create a pixel mask according to the pixel inclusion rules and subsequently 
draw only those pixels of a shape that correspond to “ON” pixels in the 
mask. In creating the mask and drawing the shape, the abutment of shapes 
rule SHOULD be observed so that no pixel of the shape is drawn that would 
not have been drawn if the clip geometry were another abutting shape. 
18.1.8 
S11.8 
A typical consumer SHOULD be able to process markup with the 
implementation limit characteristics indicated in Table 18–1. Producers 
SHOULD produce only OpenXPS Documents that stay within these 
implementation limits. 
18.2 
S11.9 
This requirement was removed prior to Edition 1 of this Standard; its 
description is retained here for historical purposes. 
Coordinates are real numbers and SHOULD be computed with at least single 
floating point precision. 
 
S11.10 If the nesting level of <VisualBrush> elements is higher than 16, a 
consumer SHOULD attempt to find alternative processes such as flattening 
the nested content to a bitmap representation rather than failing to draw. 
18.2 
S11.11 Gradients SHOULD be rendered according to the guidelines described 
in §18.3. 
18.3 
S11.12 Consumers SHOULD pre-process gradient stops for all gradients using the 
steps described in §18.3.1.1. 
18.3.1.1 
S11.13 If any gradient stops use an sRGB or scRGB color specification consumers 
SHOULD blend colors between gradient stops in the color space indicated 
by the ColorInterpolationMode attribute of the gradient brush, unless a 
PrintTicket setting provides an alternative blending color space that the 
consumer understands. 
If none of the gradient stop elements uses an sRGB or scRGB color 
specification and the consumer understands the blending color space 
PrintTicket setting, the blending color space PrintTicket setting SHOULD be 
used. 
 
18.3.1.2 
S11.14 If a ColorInterpolationMode value of SRgbLinearInterpolation is used, the 
BLEND() function SHOULD convert the color values to sRGB first, and then 
perform a linear interpolation between them. 
18.3.1.2 
S11.15 If a ColorInterpolationMode value of ScRgbLinearInterpolation is used, the 
BLEND() function SHOULD convert the color values to scRGB first, and then 
perform a linear interpolation between them. 
18.3.1.2 

F. Conformance Requirements 
ECMA-388 
448 
First Edition, June 2009 
ID 
Rule 
Reference 
S11.16 In the presence of transformations or when individual gradient stops are 
very close, the local color gradient at the offset used in the BLEND() 
function might be large, resulting in a large change over the extent of a 
single device pixel. In this case, it is RECOMMENDED that the BLEND() 
function interpolate the gradient over the extent of each device pixel. 
Producers SHOULD NOT, however, rely on a specific effect for such dense 
gradient specifications. 
18.3.1.2 
S11.17 Producers SHOULD either avoid very close gradient stops to the gradient 
end point when specifying radial gradients where the outside area is visible 
or avoid specifying radial gradients with a gradient origin on or outside the 
ellipse (in which case there is no outside area) to ensure consistent 
rendering results. 
18.3.1.2 
S11.18 All opacity calculations SHOULD be performed with at least 8-bit precision 
to provide sufficient quality for nested content. 
18.4 
S11.19 When composing superluminous colors, management of out-of-gamut 
colors SHOULD be deferred until the result is rendered to the final target, at 
which point out-of-gamut colors are clipped or color managed. 
18.4.1 
S11.20 The color and appearance of the surface created to hold drawing content as 
it is composed SHOULD match the destination color and appearance, 
typically a solid white background for a fixed page or transparent for a 
canvas. 
18.5 
S11.21 Contours and dashes SHOULD be rendered so that they have the same 
appearance as if rendered by sweeping the complete length of the contour 
or dash with a line segment that is perpendicular to the contour and 
extends with half its length to each side of the contour. All points covered 
by the sweep of this perpendicular line are part of the dash or contour. 
18.6 
S11.22 Consumers SHOULD ensure that parallel edges of strokes appear parallel. 
18.6.1 
S11.23 Consumers SHOULD produce a visually consistent appearance of stroke 
thickness for thin lines, regardless of their orientation or how they fit on the 
device pixel grid. 
18.6.2 
S11.24 Consumers SHOULD select line and curve drawing algorithms that behave 
symmetrically and result in the same set of device pixels being drawn 
regardless of the direction of the line or curve (start point and end point 
exchanged). 
18.6.3 
S11.25 If the current render transform is an invertible matrix, consumers SHOULD 
perform computations on poly line segments and poly Bézier segments with 
sufficient accuracy to avoid producing zero-length segments. 
18.6.8 
S11.26 If both width and height of a tile are nearly zero, implementations SHOULD 
average the color values of the brush contents, resulting in a constant-color 
brush. 
18.7.1 
S11.27 Producers SHOULD avoid producing extreme cases where either the height, 
width, or both height and width are nearly zero and SHOULD NOT rely on 
any specific behavior when they do 
18.7.1 

ECMA-388 
F. Conformance Requirements 
 
 First Edition, June 2009 
449 
ID 
Rule 
Reference 
S11.28 Source sampling SHOULD be done from the center of the pixel and should 
be mapped to the center of the pixel in the device-space. With one extent 
of the viewbox zero, sampling SHOULD be done along a line parallel to the 
non-zero side. With both extents of the viewbox zero, a point sample 
SHOULD be taken. 
18.7.2 
S11.29 When up-sampling an image presented at a lower resolution than the 
device resolution, bilinear filtering SHOULD be used. 
18.7.2 
S11.30 When down-sampling an image presented at a higher resolution than the 
device resolution, at least a bilinear filter SHOULD be used. 
18.7.2 
S11.31 A stroke using the consistent nominal stroke width convention SHOULD be 
rendered with a width consistent with other strokes using the convention 
that have, after application of relevant transforms, the same StrokeThickness 
attribute value, and consumers aware of this convention SHOULD render 
such a stroke no thinner than the thinnest visible line that a bi-tonal 
consumer supports without dropouts or an anti-aliasing consumer can 
represent as a solid line. In the particular case of StrokeThickness attribute 
value of "0" the stroke SHOULD be rendered with a 1-pixel thickness if the 
nominal stroke width convention applies. 
18.6.12 
S11.32 Producers SHOULD NOT create files containing the extreme degenerate 
case of StrokeDashArray = "0 0". Such lines SHOULD be rendered as a solid 
line. 
18.6.4.6 
S11.33 Consumers SHOULD render an element filled with a linear gradient brush 
using an implementation of the BLEND() function such that the appearance 
is the same as if the steps described in §18.3.2 had been taken. 
18.3.2 
S11.34 Consumers SHOULD render an element filled with a radial gradient brush 
using an implementation of the BLEND() function such that the appearance 
is the same as if thee steps described in §18.3.3 had been taken. 
18.3.3 
F.12.3 OPTIONAL Conformance Requirements 
Table F–32. Rendering rules OPTIONAL conformance requirements 
ID 
Rule 
Reference 
O11.1 
Very high resolution devices MAY use lower fractional precision than a 28.4 
fixed-point representation to represent device coordinates. 
18.1.2 
O11.2 
Consumers MAY use different rendering logic as long as it closely 
approximates the logic of rendering pixels in an 8x8 sub-pixel space, 
performing an 8x8 box filter sampling, and setting the pixel to the resulting 
color value. 
18.1.4 
O11.3 
Devices MAY use sub-pixel masking. 
18.1.4 
O11.4 
An implementation capable of anti-aliasing MAY draw a thin line in a way 
that blends with the background to varying degrees. 
18.1.4 
O11.5 
A bi-tonal implementation on a printer MAY draw thin lines with or without 
drop-outs, or by applying half-toning, depending on the desired output 
quality. 
18.1.4, 
18.5 
O11.6 
Consumers MAY apply pixel placement rules optimized for character 
rendering to individual glyphs in a <Glyphs> element. 
18.1.6 

F. Conformance Requirements 
ECMA-388 
450 
First Edition, June 2009 
ID 
Rule 
Reference 
O11.7 
Behavior of blending with very close gradient stops MAY vary in an 
implementation-defined manner (see S11.16). 
18.3.1.2 
O11.8 
When a radial gradient origin is on or outside the ellipse, the “outside” area 
(outside the cone defined by the origin and the ellipse) MAY be filled with an 
interpolated color value, depending on the resolution. 
18.3.1.2 
O11.9 
In certain scenarios (such as when rendering 3D scenes to a bitmap), 
producers MAY choose to create pre-multiplied bitmap data specifying 
“superluminous” colors. 
18.4.1 
O11.10 Consumers MAY handle superluminous colors natively or MAY instead 
choose to convert pre-multiplied source data containing superluminous 
colors to non-pre-multiplied data before composition by ignoring the 
superluminous portion of each color channel value. 
18.4.1 
O11.11 A consumer MAY choose always to initialize the alpha channel of the surface 
created to hold the drawing content as it is composed to 0.0 (transparent) 
and the color value to black. 
18.5 
O11.12 When doing page composition, if all elements on a canvas and the canvas 
itself are opaque (an opacity of 1.0) and parent or ancestor <Canvas> 
elements are also opaque, the elements MAY be drawn directly to the 
containing fixed page (or canvas), provided all render transform and clip 
values are observed 
18.5.1 
O11.13 When doing page composition, if an element is fully transparent (an opacity 
of 0.0), it MAY be skipped. 
18.5.1 
O11.14 When doing page composition, if a canvas has an opacity of 0.0, it and all of 
its child and descendant elements MAY be skipped. 
18.5.1 
O11.15 When doing page composition, if a canvas has a Clip property with no 
contained area, the canvas and all of its child and descendant elements MAY 
be skipped. 
18.5.1 
O11.16 When doing page composition, a consumer MAY further restrict the size of 
the temporary surface it creates by the effective extent of the geometry 
specified by the Clip property of the canvas. 
18.5.1 
O11.17 When doing page composition, a consumer MAY use methods to achieve 
transparency other than creating a temporary surface. Such methods MAY 
include planar mapping. 
18.5.1 
O11.21 If only one of the width and height values of a tile is nearly zero, the brush 
should be constant-colored along lines parallel to the narrow side of the 
viewport, but implementations MAY differ. 
18.7.1 
O11.22 Consumers MAY choose to implement a more sophisticated algorithm for 
down-sampling an image presented at a higher resolution than the device 
resolution, such as a Fant scaler, to prevent aliasing artifacts. 
18.7.2 
O11.23 Consumers MAY choose any technique desired to achieve the requirement 
to precisely place a tile possibly resulting in fractional device pixel 
placement, such as linear filtering for seams, stretching of the tile (up-
sampling or down-sampling), or pre-computing multiple tiles and adjusting 
behavior according to how the tiles fit on a grid. 
18.7.3 
O11.24 Temporary work canvases MAY be re-used when tiling transparent brushes. 
18.7.4 

ECMA-388 
F. Conformance Requirements 
 
 First Edition, June 2009 
451 
ID 
Rule 
Reference 
O11.25 Producers MAY generate a <Path> element intended to be treated as 
having a consistent nominal stroke width by specifying the StrokeDashArray 
attribute and by specifying the StrokeDashOffset attribute value less than -
1.0 times the sum of all the numbers in the StrokeDashArray attribute value. 
18.6.12 
O11.26 If an implementation chooses to draw thin lines, then it MAY choose to draw 
them with drop outs, following requirement S11.3 in §18.1.4, or as solid 
rules of 1 pixel thickness. 
18.1.4 
F.13 Additional Conformance Requirements 
F.13.1 MUST Conformance Requirements 
Table F–33. Additional MUST conformance requirements 
ID 
Rule 
Reference 
M12.1 FixedDocument parts MUST be referenced by <DocumentReference> 
elements within the FixedDocumentSequence part in ascending order. If 
additional FixedDocument parts are inserted into a fixed document sequence, 
producers MUST NOT unintentionally change the order of the existing 
FixedDocument part references. 
 
– 
M12.2 A FixedDocument part MUST NOT be referenced more than once by a 
FixedDocumentSequence part. 
– 
M12.3 A FixedPage part MUST NOT be referenced more than once in total, 
throughout all FixedDocument parts. 
– 
M12.4 FixedPage parts MUST be referenced by <PageContent> elements within a 
fixed document in ascending order. If additional FixedPage parts are inserted 
into a FixedDocument part, producers MUST NOT unintentionally change the 
order of the existing FixedPage part references. Documents in languages for 
which the reading order of pages is back-to-front can be accommodated by 
adding <PageContent> elements to the FixedDocument in reverse order or by 
binding the right side of the page. 
– 
M12.5 This requirement was removed prior to Edition 1 of this Standard; its 
description is retained here for historical purposes.  
Any FixedDocumentSequence, FixedDocument, or FixedPage part that is 
reachable from the primary fixed payload root or its related parts by 
relationship or by the Source attribute on a <DocumentReference> or 
<PageContent> element MUST have no more than one attached PrintTicket 
part. 
 
M12.6 Every Font part reachable from the primary fixed payload root or its related 
parts by relationship or by the Source attribute on a <DocumentReference> or 
<PageContent> element MUST be a valid OpenType font. 
– 
M12.7 If a consumer encounters the presence of parameters on the content types in 
the tables in this subclause when the affected part is accessed it MUST 
instantiate an error condition. 
D.2 

F. Conformance Requirements 
ECMA-388 
452 
First Edition, June 2009 
ID 
Rule 
Reference 
M12.8 The content types in the tables in this subclause MUST be used by producers 
without parameters. 
D.2 
F.14 3D Graphic Content 
F.14.1 MUST Conformance Requirements 
Table F–34. 3D Graphic Content MUST conformance requirements 
ID 
Rule 
Reference 
M13.1 A consumer that renders OpenXPS pages for printing on a 2D medium 
MUST NOT read and render the 3D content to a 2D representation unless at 
least one of the following is true: It has been explicitly configured to do so 
by the user; or it provides explicit feedback to the user that the 3D content 
is being used rather than the 2D representation. 
G 
M13.2 The X3D file MUST conform to one of the following standards meeting the 
X3D “Interoperability” conformance level: ISO/IEC 19775-1:2008, ISO/IEC 
19776-1:2005, ISO/IEC 19776-3:2007. 
G  
M13.3 3D Producers MUST use a <Brush3D> element within a <Path.Fill> 
element, with Markup Compatibility, to place the 3D content on a page 
within a defined Viewport. 
G  
M13.4 3D producers MUST define a conforming <AlternateContent.Fallback> 
element within the parent <Path> element of the <Brush3D> element. The 
<AlternateContent.Fallback> element MUST contain a 2D representation for 
viewing and printing of the 3D content. 
G  
M13.5 3D Producers MUST define the AlternateContent.Fallback that is visually 
representative of the default 3D viewpoint. 
G 
M13.6 Implementations that modify the 3D default viewpoint MUST update the 
AlternateContent.Fallback to match that 3D viewpoint prior to printing or 
saving the file 
G 
M13.7 3D Consumers MUST display at least the AlternateContent.FallBack. 
G 
M13.8 The active 3D window display MUST be contained within the defined 
Brush3D.Viewport. 
G 
F.14.2 SHOULD Conformance Requirements 
Table F–35. 3D Graphic Content SHOULD conformance requirements 
ID 
Rule 
Reference 
S13.1 
3D Consumers SHOULD allow user interaction to navigate and play 
animations present in the 3D graphics content. 
G 
S13.2 
3D Producers generating X3D model content SHOULD follow these rules: 
1. Use Triangle based X3D elements to facet the model. 2. Use positive 
values for all X Y Z coordinates. 3. Define a face normal for all Triangle 
faces. 4. Define Triangle faces counter clockwise (right-hand rule) when 
facing outwards or upwards in ground terrain models. 5. Ensure that all 
triangle faces share two points with their neighboring faces. 
G 

ECMA-388 
F. Conformance Requirements 
 
 First Edition, June 2009 
453 
ID 
Rule 
Reference 
S13.3 
 This requirement was removed prior to Edition 1 of this Standard; its 
description is retained here for historical purposes.  
3D Producers SHOULD define equivalent AlternateContent.Fallback 
sufficient for 2D viewing and printing 
 
S13.4 
3D Consumers SHOULD display the X3D 3D content rendered to display 
the default 3D viewpoint and perspective as defined in the X3D part. 
G 
S13.5 
3D consumers SHOULD display an active, navigable 3D window. If 
UI controls are located outside the viewport, no resizing of viewport 
SHOULD cause repagination or alteration of the page fixed format  
G 
F.14.3 OPTIONAL Conformance Requirements 
Table F–36. 3D Graphic Content OPTIONAL conformance requirements 
ID 
Rule 
Reference 
O13.1 An OpenXPS producer MAY include three-dimensional (3D) graphics within 
an OpenXPS package. 
G 
F.15 Recommended File Name Extension and Content Types 
F.15.1 MUST Conformance Requirements 
Table F–37. Recommended File Name Extension and Content Types MUST conformance requirements 
ID 
Rule 
Reference 
M14.1 To avoid conflicts between OpenXPS Documents defined in this Standard 
and legacy formats, producers MUST NOT create OpenXPS Documents with 
filenames that end in the uppercase, lowercase, or mixed-case sequence 
.xps. 
E.1 
F.15.2 SHOULD Conformance Requirements 
Table F–38. Recommended File Name Extension and Content Types SHOULD conformance requirements 
ID 
Rule 
Reference 
S14.1 
Implementations are anticipated for multiple operating systems, including 
operating systems that use the concept of filename extension and/or 
content type to identify the format of files for processing. When required 
by such systems, and to enable interoperability with such systems, 
implementations SHOULD use a filename extension or termination 
sequence of .oxps and a content type of application/oxps. 
E.1 
S14.2 
Producers SHOULD include an XML comment immediately following the 
start-tag of the FixedPage element. This comment SHOULD include details 
of the organization, product, and version that created the content. 
E.2 
S14.3 
Implementations SHOULD NOT use application/vnd.ms-xpsdocument to 
identify OpenXPS Documents. 
E.1 
End of informative text. 


ECMA-388 
G. 3D Graphic Content 
 
 First Edition, June 2009 
455 
G. 3D Graphic Content 
An OpenXPS producer MAY include three-dimensional (3D) graphics within an OpenXPS 
package [O13.1]. The 3D graphics content provides OpenXPS documents with animatable 
3D models to supplement the document text providing a visually richer user experience in 
3D Consumers for purposes such as, but not limited to: 
1. 3D model examination and walkthroughs. 
2. Animations depicting assembly instructions. 
3. Animations showing usage instructions. 
4. Animations depicting proposed phased building construction projects. 
3D content is included in such a way that an alternative representation that is suitable for use 
in two-dimensional (2D) rendering is provided for a consumer that does not support 
3D content; e.g., for printing on paper.  
This Annex does not introduce any additional requirements for a producer or consumer that 
does not support 3D content. 
3D content is included using a <Brush3D> to fill a path in the same way as with other brushes; 
see §11. 
A consumer that renders OpenXPS pages for printing on a 2D medium MUST NOT read and 
render the 3D content to a 2D representation unless at least one of the following is true 
[M13.1]: 
1. It has been explicitly configured to do so by the user; or 
2. It provides explicit feedback to the user that the 3D content is being used rather than 
the 2D representation. 
An instance of 3D graphics content is created by placing a conformant X3D file within the 
OpenXPS document OPC Package. The X3D file MUST conform to one of the following standards 
meeting the X3D “Interoperability” conformance level [M13.2]: ISO/IEC 19775-1:2008, 
ISO/IEC 19776-1:2005, or ISO/IEC 19776-3:2007. 
Markup compatibility is used to encapsulate the 3D content and its 2D alternative 
representation. 
A 3D Content Capable Producer (3D Producer) is defined as an OpenXPS producer that 
understands the “http://schemas.openxps.org/oxps-3d/v1.0” namespace. 
A 3D Content Capable Consumer (3D Consumer) is defined as an OpenXPS consumer that 
understands the “http://schemas.openxps.org/oxps-3d/v1.0” namespace. 
3D Producers generating X3D model content SHOULD follow these rules [S13.2]: 
1. Use Triangle based X3D elements to facet the model. 
2. Use positive values for all X Y Z coordinates. 
3. Define a face normal for all Triangle faces. 

G. 3D Graphic Content 
ECMA-388 
456 
First Edition, June 2009 
4. Define Triangle faces counter clockwise (right-hand rule) when facing outwards or 
upwards in ground terrain models. 
5. Ensure that all triangle faces share two points with their neighboring faces. 
3D Producers MUST use a <Brush3D> element within a <Path.Fill> element, with Markup 
Compatibility, to place the 3D content on a page within a defined Viewport [M13.3]. 
3D producers MUST define a conforming <AlternateContent.Fallback> element within the 
parent <Path> element of the <Brush3D> element. The <AlternateContent.Fallback> element 
MUST contain a 2D representation for viewing and printing of the 3D content [M13.4]. 
3D Producers MUST define the AlternateContent.Fallback that is visually representative of the 
default 3D viewpoint [M13.5]. 
Implementations that modify the 3D default viewpoint MUST update AlternateContent.Fallback 
to match that 3D viewpoint prior to printing or saving the file [M13.6]. 
Example G–1. 3D graphics content in FixedPage.fpage 
<FixedPage xmlns="http://schemas.openxps.org/oxps/v1.0" Height="1056" Width="816" 
xml:lang="und"  
  xmlns:fp="http://schemas.openxps.org/oxps-3d/v1.0"  
  xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"> 
  <Canvas Name="dwfresource_1" RenderTransform="96,-0,-0,96,0,0"> 
    <Path Data="M0,0 L8.5,0 L8.5,11 L0,11 z"> 
      <Path.Fill> 
        <mc:AlternateContent> 
           <mc:Choice Requires="fp"> 
              <fp:Brush3D fp:Source3D="olympus.x3d" fp:Viewport="0,2.3125, 
                8.5,8.6875" fp:ViewportUnits="Absolute" fp:Viewbox="0,0, 
                640,640" fp:ViewboxUnits="Absolute"/> 
           </mc:Choice> 
           <mc:Fallback> 
             <ImageBrush ImageSource="ProxyGraphics.png" Viewport="0,2.3125,  
                8.5,8.6875" ViewportUnits="Absolute" Viewbox="0,0, 640,640"  
                ViewboxUnits="Absolute"/> 
           </mc:Fallback> 
        </mc:AlternateContent> 
      </Path.Fill> 
    </Path> 
  </Canvas> 
</FixedPage> 
3D consumers SHOULD display an active, navigable 3D window. If UI controls are located 
outside the viewport, no resizing of viewport SHOULD cause repagination or alteration of the 
page fixed format [S13.5]. 
Non-3D Consumers will display AlternateContent.Fallback; as shown below: 

ECMA-388 
G. 3D Graphic Content 
 
 First Edition, June 2009 
457 
 
 
end example] 
Example G–2. 3D graphics content in FixedPage.fpage 
<FixedPage xmlns="http://schemas.openxps.org/oxps/v1.0" Height="1056"  
  Width="816" xml:lang="und"  
  xmlns:fp="http://schemas.openxps.org/oxps-3d/v1.0"  
  xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"> 

G. 3D Graphic Content 
ECMA-388 
458 
First Edition, June 2009 
  <Canvas Name="dwfresource_1" RenderTransform="96,-0,-0,96,0,0"> 
    <Path> 
      <mc:AlternateContent> 
         <mc:Choice Requires="x3d"> 
            <Path.Fill> 
              <fp:Brush3D fp:Source3D="3dcube.x3d" fp:Viewport="0,2.3125, 
                8.5,8.6875" fp:ViewportUnits="Absolute" fp:Viewbox="0,0, 
                640,640" fp:ViewboxUnits="Absolute"/> 
            </Path.Fill> 
          </mc:Choice> 
          <mc:Fallback> 
            <Path.Data> 
              <PathGeometry> 
                <PathFigure StartPoint="120,160" IsClosed="true"> 
                  <PolySegment Points="70,0 120,160 170,80 120,160"/> 
                </PathFigure> 
<PathFigure StartPoint="120,160" IsClosed="true"> 
                  <PolySegment Points="170,0 220,160 270,80 120,160"/> 
                </PathFigure> 
<PathFigure StartPoint="120,160" IsClosed="true"> 
                  <PolySegment Points="30,0 60,80 10,40  
                      120,0"/> 
                </PathFigure> 
              </PathGeometry> 
            </Path.Data> 
          </mc:Fallback> 
      </mc:AlternateContent> 
    </Path> 
  </Canvas> 
</FixedPage> 
end example] 

ECMA-388 
G. 3D Graphic Content 
 
 First Edition, June 2009 
459 
 
3D Consumers MUST display at least the AlternateContent.FallBack [M13.7].  
3D Consumers SHOULD display the X3D 3D content rendered to display the default 
3D viewpoint and perspective as defined in the X3D part [S13.4].  
3D Consumers SHOULD allow user interaction to navigate and play animations present in the 
3D graphics content [S13.1]. The active 3D window display MUST be contained within the 
defined Brush3D.Viewport [M13.8]. 
targetNamespace:  http://schemas.openxps.org/oxps-3d/v1.0 
G.1 
Brush3D 
Table 13–1. Brush types is extended by the addition of the following brush type: 
 
Name 
Description 
3D Content Brush 
Fills a region with a 3D graphics model 
In the following diagrams and text the prefix “fp” refers to the FixedPage name space. See §19 
for definitions of those elements and attributes. 

G. 3D Graphic Content 
ECMA-388 
460 
First Edition, June 2009 
 
diagram 
 
namespace 
http://schemas.openxps.org/oxps-3d/v1.0 
type 
extension of CT_Brush3D 
properties 
content  complex 
children 
oxps:ImageBrush.Transform 
attributes 
Name   
Type   
Use   
Default   
Fixed   
annotation 
Source3D 
ST_UriImage3D  
required   
   
   
Specifies the 
URI of an X3D 
resource. The 
URI MUST 
refer to parts 
in the package 
[M2.1]. 
x:Key 
 
   
   
   
Specifies a 
name for a 
resource in a 
resource 
dictionary. 
x:Key MUST 
be present 
when the 
current 
element is 
defined in a 
resource 
dictionary. 
x:Key MUST 
NOT be 
specified 
outside of a 
resource 
dictionary 
[M4.1]. 
Transform 
oxps:ST_RscRefMatrix 
   
   
   
Describes the 
matrix 

ECMA-388 
G. 3D Graphic Content 
 
 First Edition, June 2009 
461 
transformation 
applied to the 
coordinate 
space of the 
brush. The 
Transform 
property is 
concatenated 
with the 
current 
effective 
render 
transform to 
yield an 
effective 
render 
transform local 
to the brush. 
The viewport 
for the brush 
is transformed 
using that 
local effective 
render 
transform. 
Viewbox 
 oxps:ST_ViewBox 
required   
   
   
Specifies the 
position and 
dimensions of 
the brush's 
source 
content. 
Specifies four 
comma-
separated real 
numbers (x, y, 
Width, 
Height), where 
width and 
height are 
non-negative. 
The 
dimensions 
specified are 
relative to the 
image’s 
physical 
dimensions 
expressed in 
units of 1/96". 
The corners of 
the viewbox 
are mapped to 
the corners of 
the viewport, 
thereby 
providing the 
default 
clipping and 
transform for 
the brush’s 
source 
content. 
Viewport 
 oxps:ST_ViewBox 
required   
   
   
Specifies the 
region in the 
containing 
coordinate 
space of the 
prime brush 
tile that is 

G. 3D Graphic Content 
ECMA-388 
462 
First Edition, June 2009 
(possibly 
repeatedly) 
applied to fill 
the region to 
which the 
brush is 
applied. 
Specifies four 
comma-
separated real 
numbers (x, y, 
Width, 
Height), where 
width and 
height are 
non-negative. 
The alignment 
of the brush 
pattern is 
controlled by 
adjusting the x 
and y values. 
ViewboxUnits 
 oxps:ST_ViewUnits 
required   
   
Absolute   
Specifies the 
relationship of 
the viewbox 
coordinates to 
the containing 
coordinate 
space 
ViewportUnits 
 oxps:ST_ViewUnits 
required   
   
Absolute   
Specifies the 
relationship of 
the viewport 
coordinates to 
the containing 
coordinate 
space. 
source 
<xs:element name="Brush3D"> 
  <xs:complexType> 
    <xs:complexContent> 
      <xs:extension base="CT_Brush3D"/> 
    </xs:complexContent> 
  </xs:complexType> 
</xs:element> 
[Example: 
<Brush3D Source3D="olympus.x3d" Viewport="0,2.3125, 8.5,8.6875" 
ViewportUnits="Absolute" Viewbox="0,0, 640,640" ViewboxUnits="Absolute"/> 
This example shows the required attributes and example values. The Source3D attribute is a 
URI that must resolve to a conforming X3D file contained within the OpenXPS OPC Package. 
See §19 for definitions of Viewport, ViewportUnits, Viewbox, ViewBoxUnits and 
ImageBrush.Transform. end example]

ECMA-388 
H. Bibliography 
 
 First Edition, June 2009 
463 
H. Bibliography 
A Nonaliasing, Real-Time Spatial Transform Technique. Fant, Karl M. IEEE Computer Graphics 
and Applications 6 (Jan. 1986): 71–80. 
ISO/IEC 19757-2:2008 Information technology — Document Schema Definition Language 
(DSDL) — Part 2: Regular-grammar-based validation — RELAX NG 
JPEG File Interchange Format, Version 1.02. Hamilton, Eric. World Wide Web Consortium. 1992. 
http://www.w3.org/Graphics/JPEG/jfif3.pdf 
OS/2 and Windows Metrics. Microsoft Corporation. 2001. 
http://www.microsoft.com/typography/otspec/os2.htm 
OpenType Font File. Microsoft Corporation. 2001. 
http://www.microsoft.com/typography/otspec/otff.htm 
OpenType Specification, Version 1.4. Microsoft Corporation. 2004. 
http://www.microsoft.com/typography/otspec/default.htm 
Draft TIFF Technical Note #2, 17 March 1995, Tom Lane, the Independent JPEG Group. 
http://www.npes.org/pdf/DftTIFF_TN2_JPEG.pdf


ECMA-388 
I. Index 
 
I. Index 
In the index that follows, italic page numbers are used to indicate illustrations and examples 
with illustrations. Bold page numbers are used to indicate a primary reference when several 
pages are listed. Page ranges are elided. “See” references indicate the primary index location 
for that topic, while “See also” references indicate related index topics. 
 
3 
3D Graphic Content ............................................................ 455 
A 
abbreviated geometry syntax ....... See geometry, abbreviated 
syntax 
accessibility ........................................................................... 45 
document structure, enabled by ..................................... 203 
image text alternative, long 
described ..................................................................... 225 
on canvas ....................................................................... 54 
on path........................................................................... 61 
image text alternative, short 
described ..................................................................... 225 
on canvas ....................................................................... 54 
on path........................................................................... 61 
importance of .................................................................. 224 
mentioned ....................................................................... 203 
of text .............................................................................. 100 
page elements, requirement to expose all ...................... 224 
reading order 
document structure, dependent on ............................ 224 
fragment type, dependent on...................................... 224 
markup order, dependent on ...................................... 224 
of page-centric application .......................................... 224 
of story-centric application .......................................... 224 
screen reader 
considerations ............................................................. 225 
mentioned ........................................................... 203, 224 
alpha ...................................................................... See opacity 
anti-aliasing 
disabling of ........................................................................ 54 
rendering of ..................................................................... 245 
arc ................................................ See geometry, segment, arc 
B 
bleed area ............................................... See page, bleed area 
bookmark .............................. See document structure, outline 
brush ................................................................................... 113 
alpha ................................................................... See opacity 
described ........................................................................ 113 
gradient computations ............................................. 247–54 
gradient stop 
color, specifying .......................................................... 150 
described ..................................................................... 150 
offset ........................................................................... 150 
specifying .................................................................... 149 
image brush 
described ............................................................. 115, 116 
example ....................................................................... 116 
image ................................................................. See image 
mentioned ............................................................... 26, 59 
source, specifying ........................................................ 115 
tile size and placement ..................... See brush, view port 
tile source .......................................... See brush, view box 
linear gradient brush 
color interpolation mode ............................................ 137 
described ..................................................................... 138 
end point ..................................................................... 137 
example ....................................................................... 138 
gradient stops, specifying ............................................ 142 
mappng mode ............................................................. 137 
rendering ..................................................................... 249 
specifying .................................................................... 137 
spread method 
described ................................................................. 139 
Pad ........................................................................... 139 
Reflect ...................................................................... 140 
Repeat ...................................................................... 141 
specifying ................................................................. 137 
start point .................................................................... 137 
opacity ................................................................ See opacity 
radial gradient brush 
described ..................................................................... 144 
example ....................................................................... 145 
gradient center ............................................................ 143 
gradient origin ............................................................. 143 
gradient stops, specifying ............................................ 149 
gradient x-radius ......................................................... 143 
gradient y-radius ......................................................... 143 
mappng mode ............................................................. 143 
rendering ..................................................................... 251 
specifying .................................................................... 143 
spread method 

I. Index 
ECMA-388 
466 
First Edition, June 2009 
described .................................................................. 146 
Pad ........................................................................... 146 
Reflect ...................................................................... 147 
Repeat ...................................................................... 148 
specifying ................................................................. 143 
solid color brush ...................................................... 113, 114 
tile 
behavior ........................................... See brush, tile, mode 
image scaling ............................................................... 273 
mode 
described ............................................................ 126–36 
FlipX .................................................................... 131–32 
FlipXY .................................................................. 135–36 
FlipY .................................................................... 133–34 
mentioned ................................................................ 122 
None ................................................................... 126–28 
specifying ................................................. 115, 118, 121 
Tile ...................................................................... 129–30 
placement ......................................... See brush, view port 
size .................................................... See brush, view port 
small tile rendering ...................................................... 273 
source ................................................ See brush, view box 
transparent brush tiling ............................................... 274 
transformation ....................................... See transformation 
view box 
calculating source coordinates for images .................. 122 
described ............................................................. 121, 122 
example ................................................................. 122–25 
larger than image................................................. 122, 125 
mapping to view port .................................. 115, 118, 460 
specifying for image brush ........................................... 115 
specifying for visual brush ........................................... 118 
syntax........................................................... 115, 118, 460 
unit type ...................................................... 115, 118, 121 
units, for images .......................................... 115, 122, 460 
view port 
described ............................................................. 121, 122 
example ................................................................. 122–25 
placement precision .................................................... 274 
specfying for image brush............................................ 115 
specifying for visual brush ........................................... 118 
syntax........................................................... 115, 118, 460 
unit type ...................................................... 115, 118, 121 
visual brush 
described ............................................................. 118, 119 
example ....................................................................... 120 
visual .................................................................... 118, 120 
C 
canvas 
anti-aliasing control........................................................... 54 
clipping ............................................................... See clipping 
composing properties ....................................................... 56 
described ........................................................................... 54 
opacity .................................................................See opacity 
opacity mask .............................................. See opacity mask 
transformation....................................... See transformation 
caret stop .......................................... See selection, caret stop 
CFF font ................................................................ See font:CFF 
circle ............................................. See geometry, segment, arc 
clipping 
described ........................................................................ 164 
elements applied to ................................................ 155, 156 
geometry, reference to ..................................................... 68 
of canvas ................................................................... 54, 164 
of glyphs ................................................................... 88, 167 
of path ...................................................................... 61, 165 
rules ................................................................................ 245 
CMYK .......................................... See color, color space, CMYK 
color 
alpha ................................................................... See opacity 
blending .............................................................................. 7 
behavior described ...................................................... 201 
blend color space for linear gradient brush ................ 137 
for gradients ................................................................ 248 
implementation dependent ........................................ 201 
brush, specifying for .............................................. See brush 
color profile 
embedded in image . 26, 27, 28, 29, 30, 31, 188, 199, 429 
ICC profile 
color channels supported ........................................ 189 
described ................................................................. 188 
grayscale image, usage with .................................... 189 
parts .................................................................See parts 
profile types allowed ............................................... 189 
Windows Color System (WCS) profile 
embedded in ICC profile .......................................... 189 
color separation .............................................................. 200 
color space 
CMYK ........................................................................... 188 
in images .................................................................. 187 
in vector graphics .................................................... 187 
gray colors ................................................................... 188 
ICC profile 
version supported ..................... 189, 201, 427, 433, 435 
named color ............................................................ 8, 188 
n-channel .................................................................... 188 
in images .................................................................. 187 
in vector graphics .................................................... 187 
scRGB .......................................................................... 188 
in images .................................................................. 187 
in vector graphics .................................................... 187 
spot colors ............... See color, color space, named colors 
sRGB ............................................................................ 187 
in images .................................................................. 187 
in vector graphics .................................................... 187 
support required ......................................................... 187 
support summarized ................................................... 187 
fidelity, improved ........................................................... 187 
raster image support 
associating a color profile part .................................... 198 
CMYK ........................................................................... 196 

ECMA-388 
I. Index 
 
 First Edition, June 2009 
467 
gray colors ................................................................... 195 
named colors ............................................................... 198 
n-channel ..................................................................... 197 
scRGB ........................................................................... 195 
sRGB ............................................................................. 194 
syntax 
CMYK ........................................................................... 192 
named color ................................................................. 193 
n-channel ..................................................................... 192 
scRGB ........................................................................... 191 
sRGB ............................................................................. 191 
summarized ................................................................. 190 
where used .................................................................. 189 
color profile .......................................... See color, color profile 
composability of properties .. See OpenXPS Document format, 
properties, composability 
compression 
image .................................................................... See image 
package ........... See Open Packaging Conventions, Standard 
conformance 
inherited from Open Packaging Conventions ............ 17, 404 
of implementation .............................................................. 3 
requirements tables ................................................ 399–451 
consumer ................................................................................ 7 
implementation burden .......................................... 399–451 
content area ........................................ See page, content area 
content type ........................................................................... 7 
namespace ................................................... See namespace 
summarized ..................................................................... 398 
usage of ............................................................................. 21 
contour intersection point ...................................................... 7 
copy and paste ............................................. See also selection 
document structure, improved by .................................. 203 
core properties .................... See Open Packaging Conventions 
curve ................................................... See geometry, segment 
D 
device ...................................................................................... 7 
device color ....................... See color, color space, device color 
digital signature 
certificate 
relationship to................................................................ 24 
store ............................................................................. 237 
validity ......................................................................... 236 
co-signature .......See digital signature, signature definitions 
multiple signatures .......................................................... 236 
namespace ................................................... See namespace 
Open Packaging Conventions, extended from ................ 234 
origin 
part ....................................................................  See parts 
relationship to................................................................ 24 
parts ....................................................................... See parts 
printing ............................................................................ 237 
relationship to ................................................................... 24 
relationships .............................................. See relationships 
request ............... See digital signature, signature definitions 
signature definitions ........................................................... 9 
described ............................................................... 38, 237 
markup example .......................................................... 237 
mentioned ..................................................................... 22 
namespace ..................... See namespace, See namespace 
relationship to ............................................................... 24 
sign by date and time .................................................. 240 
signer name ................................................................. 238 
signing intent ............................................................... 240 
signing location ........................................................... 240 
specifying .................................................................... 238 
spot ID ................................................................. 238, 239 
spot location ................................................................ 239 
signature policy 
conditions where policy does not apply ...................... 235 
described ..................................................................... 234 
markup compatibility impact .............................. 235, 236 
parts to sign 
optional .................................................................... 235 
required ................................................................... 234 
relationships to sign 
as a group, required ................................................. 235 
conditionally required .............................................. 235 
required ................................................................... 235 
signing rules ...................................................... 9, 234–36 
signing validity ............................................................. 236 
single signature ........................................................... 235 
signature spot .... See digital signature, signature definitions 
signature status 
broken ............................................................................. 7 
broken digital signature .............................................. 236 
compliant ........................................................................ 7 
incompliant ..................................................................... 7 
incompliant digital signature ....................................... 236 
questionable .................................................................... 7 
questionable digital signature ..................................... 236 
valid ................................................................................. 7 
valid digital signature .................................................. 236 
discard control 
consumer considerations ................................................ 231 
elements ................................................................. 232, 233 
markup example ............................................................. 232 
namespace ................................................... See namespace 
part ........................................................................ See parts 
reference, invalid ............................................................ 233 
reference, not yet encountered...................................... 233 
resource constraints, addressing .................................... 231 
sentinel page................................................................... 233 
target resource ............................................................... 233 
usage of .................................................................. 232, 246 
document 
markup .................. See OpenXPS elements, document-level  
namespace ................................................... See namespace 
order of ............................................................................. 47 
reference to ...................................................................... 47 
document conventions ......................................................... 11 

I. Index 
ECMA-388 
468 
First Edition, June 2009 
diagram notes ................................................................... 11 
document outline ................. See document structure, outline 
document roll-up ................................ See document, order of 
document sequence, namespace .................... See namespace 
document structure 
constructed algorithmically ............................................... 38 
constructed explicitly ........................................................ 38 
content ............................................................................ 203 
content structure ................................................................ 7 
document content............................................................... 7 
figure ............................................................................... 220 
list 
item 
marker ...................................................................... 220 
specifying ................................................................. 220 
specifying ..................................................................... 219 
markup example ............................................................. 204 
named element ................................................................... 8 
canvas descendant elements ....................................... 204 
described ..................................................................... 203 
link target, optimizing location with ............................ 204 
markup compatibility, updating for ............................. 221 
referencing each once ................................................. 204 
specifying ..................................................................... 221 
visual brush descendants prohibited ........................... 204 
namespace ................................................... See namespace 
naming page elements ............................................ 155, 203 
outline ......................................................................... 7, 203 
language ........ See language, of outline , See language, of 
outline  
levels ............................................................................ 206 
markup described ........................................................ 205 
markup example .......................................................... 206 
mentioned ..................................................................... 38 
outline entry ................................................................ 206 
target URI..................................................................... 206 
paragraph 
specifying ..................................................................... 217 
parts ....................................................................... See parts 
relationships ............................................... See relationships 
section 
specifying ..................................................................... 217 
story .................................................................................... 9 
described ............................................................... 38, 203 
markup ........................................................................ 207 
markup example .......................................................... 209 
story fragment, correlating to page ............................. 208 
story fragment, reference to ....................................... 208 
story fragment .................................................................... 9 
break indicator..................................................... 210, 217 
content structure, contains ................................... 39, 203 
described ............................................................... 39, 203 
fragment name ............................................................ 214 
fragment name, uniqueness ........................................ 208 
fragment type .............................................................. 214 
markup described ................................................ 213, 214 
markup elements summarized .................................... 209 
markup example ................................................. 215, 216 
merging fragments ................................................ 210–13 
referencing every page element ................................. 215 
relation to fixed page .................................................. 203 
story belonged to ........................................................ 214 
story, not belonging to any ......................................... 214 
story fragments ........................................... See namespace 
table 
cell 
column span ............................................................ 219 
merging .................................................................... 210 
row span .................................................................. 219 
specifying ................................................................. 219 
row group, specifying .................................................. 218 
row, specifying ............................................................ 218 
specifying .................................................................... 218 
thread ................................... See document structure, story 
usage of ............................................................................ 38 
usage optional ................................................................ 203 
driver ...................................................................................... 7 
described ........................................................................ 231 
E 
effective coordinate space ......... See layout, coordinate space 
elements ............................................. See OpenXPS elements 
error condition ....................................................................... 4 
EXIF 
usage in JPEG ...................................... See image, JPEG, EXIF 
usage in TIFF ........................................ See image, TIFF, EXIF 
extensibility of OpenXPS Documents .................... See markup 
compatibility 
F 
figure 
illustration........................... See document structure, figure 
shape ................................................... See geometry, figure 
fill 
algorithm .................................. See geometry, fill algorithm 
of path .....................................................See path, fill brush 
of stroke ............................................ See path, stroke brush 
find ....................................................................... 45, 100, 107 
fixed document sequence .................. See document, order of 
fixed page ................................................................... See page 
fixed payload ......................... See OpenXPS Document format 
FixedDocument part ............................................................... 8 
FixedDocumentSequence part ............................................... 8 
FixedPage part ........................................................................ 8 
font 
CFF ............................................................................ 33, 102 
compatibility encoding ..................................................... 36 
device font ................................................................ 88, 106 
embedding ............................................................ 33–36, 35 
extraction.................................................................... 34, 35 
language impact on copy and paste ................................. 45 

ECMA-388 
I. Index 
 
 First Edition, June 2009 
469 
licensing rights....................................................... 33, 35, 36 
obfuscation ................................................................. 34, 35 
algorithm ....................................................................... 35 
OpenType .......................................................................... 33 
parts ....................................................................... See parts 
rasterization ...................................................................... 34 
relationships ................ See relationships, required resource 
restricted editing .............. See relationships, restricted font 
restricted font ................................................................... 25 
sharing ............................................................................... 33 
subsetting .................................................................... 33, 34 
TrueType ........................................................................... 33 
TrueType collection (TTC) .......................................... 33, 414 
Unicode encoding.............................................................. 33 
usage of ............................................................................. 33 
G 
geometry 
abbreviated syntax ........................................ 70, 80–86, 419 
algorithm ..................................................................... 391 
circle ......................................... See geometry, segment, arc 
curve ................................................ See geometry, segment 
described ........................................................................... 67 
figure 
closed ................................................................. 70, 79, 83 
described ....................................................................... 67 
fill control ....................................................................... 70 
markup ........................................................................... 70 
reference to ............................................................. 68, 70 
segments, composed of ................................................. 67 
start point ................................................................ 70, 81 
stroking of segments ..................................................... 67 
figures, composed of ......................................................... 67 
fill algorithm 
described ....................................................................... 69 
EvenOdd ........................................................................ 69 
mentioned ............................................................. 67, 420 
NonZero ......................................................................... 70 
specifying ................................................................. 68, 81 
filled area .......................................................................... 69 
segment 
arc ...................................................................... 72–75, 82 
Bézier curve ............................................................. 76, 82 
Bézier curve, quadratic ............................................ 78, 82 
Bézier curve, smooth ............................................... 82, 84 
line ........................................................................... 77, 81 
segment, degenerate ...................................................... 271 
transformation ....................................... See transformation 
usage described................................................................. 68 
glyphs ........................................................................... See text 
gradient ...................................................See brush, See brush 
graphics ....................................................................... See path 
grouping markup .................................................... See canvas 
H 
hairline .......................................................See stroke, hairline 
hyperlink 
activation ........................................................................ 221 
addressability 
appearance in link targets ........................................... 222 
mentioned ............................................................. 49, 222 
missing name, handling of ........................................... 222 
name ........................................................................... 222 
name uniqueness ........................................................ 222 
of canvas ............................................................... 54, 222 
of glyphs ................................................................ 88, 222 
of page................................................................... 51, 222 
of path ................................................................... 61, 222 
of visual brush contents .............................................. 222 
page number ............................................................... 222 
document-level listing ......................... See hyperlink, target 
example .......................................................................... 222 
mentioned ...................................................................... 203 
overlapping behavior ...................................................... 221 
source 
base URI ...................................................................... 223 
described ..................................................................... 223 
from canvas ........................................................... 54, 221 
from glyphs............................................................ 88, 221 
from path .............................................................. 61, 221 
inheritance of .............................................................. 221 
specifying .................................................................... 155 
support recommended ................................................... 223 
target 
addressability .......................See hyperlink, addressability 
document-level definition of ......................................... 50 
external ....................................................................... 221 
internal ........................................................................ 221 
link target, specifying as ................................................ 49 
missing behavior ......................................................... 222 
name ..................................................................See name 
relative target handling ............................................... 222 
relative target recommended ..................................... 223 
relative to document, at minimum ............................. 221 
I 
ICC ........................................................ See color, color profile 
image 
brush ................................................ See brush, image brush 
JPEG ............................................................................ 22, 26 
APP markers ............................................................ 26, 27 
CMYK ............................................................................. 27 
EXIF ................................................................................ 26 
naming........................................................................... 26 
JPEG XR ....................................................................... 22, 26 
CMYK ............................................................................. 32 
features supported ........................................................ 32 
grayscale ........................................................................ 32 

I. Index 
ECMA-388 
470 
First Edition, June 2009 
named color ................................................................... 32 
naming ........................................................................... 31 
N-channel ...................................................................... 32 
profiled RGB ................................................................... 32 
scRGB ............................................................................. 32 
specification ................................................................... 31 
sRGB............................................................................... 32 
parts ....................................................................... See parts 
PNG ............................................................................. 22, 26 
chunks ............................................................................ 27 
naming ........................................................................... 27 
specification ................................................................... 27 
relationships ................ See relationships, required resource 
resolution ........................................................................ 122 
resource ........................................................... See resource 
sharing ............................................................................... 26 
thumbnail .......................................................................... 22 
TIFF .............................................................................. 22, 26 
alpha, associated ........................................................... 31 
CCITT bilevel encoding ................................................... 30 
CMYK ............................................................................. 30 
compression .................................................................. 31 
EXIF ................................................................................ 31 
features, supported ....................................................... 30 
image file directory (IFD) ............................................... 30 
naming ........................................................................... 28 
specification ............................................................. 28, 31 
tags, supported .............................................................. 28 
tags, unsupported .......................................................... 30 
tags, unsupported .......................................................... 31 
variations, handling ....................................................... 31 
types supported ........................................................ 26, 116 
usage described .......................................................... 26, 59 
image part 
JPEG ................................................................................... 26 
JPEG XR.............................................................................. 31 
PNG ................................................................................... 27 
TIFF .................................................................................... 28 
implementation limits .................................................. 246–47 
implementation-defined behavior.......................................... 8 
ink area ................................................ See page, content area 
interleaving ..... See Open Packaging Conventions, interleaving 
J 
JPEG ................................................................ See image, JPEG 
JPEG XR ...................................................... See image, JPEG XR 
L 
language 
markup ...................................................................... 46, 156 
of canvas ........................................................................... 54 
of glyphs .................................................................... 88, 107 
of outline ................................................................... 46, 205 
of outline entry ......................................................... 46, 206 
of page .............................................................................. 51 
of path .............................................................................. 61 
of resource ...................................................................... 160 
of signature definition .................................................... 238 
usage................................................................................. 45 
layout ..................................... See also transformation, matrix 
composition 
behavior ...................................................................... 258 
examples ............................................................... 259–61 
optimization ................................................................ 258 
rules............................................................................. 257 
coordinate rounding ....................................................... 243 
coordinate space ............................................................ 167 
composability ................................................................ 52 
effective coordinate space .............................................. 7 
described ................................................................... 44 
mentioned 51, 61, 88, 99, 113, 122, 137, 143, 156, 162 
mentioned ..................................................................... 47 
origin ........................................................................... 243 
transformation ................................... See transformation 
units ............................................................................ 243 
x-axis ........................................................................... 243 
y-axis ........................................................................... 243 
degenerate segments ..................................................... 271 
implementation limits ................ See implementation limits 
page dimensions ..................................................... See page 
pixel 
center location ........................................ See layout, pixel 
inclusion ...................................................................... 244 
placement ................................................................... 244 
placement behavior for glyphs .................................... 245 
placement error maximum ......................................... 245 
rendering ..................................................................... 244 
sub-pixel masking ........................................................ 245 
PrintTicket interactions..................................................... 53 
shape abutment.............................................................. 245 
line 
characteristics of................................................... See stroke 
curved ............................................. See geometry, segment 
drawing of ............................................................... See path 
geometry of ............................. See geometry, segment, line 
linear gradient ....................... See brush, linear gradient brush 
link ....................................................................... See hyperlink 
link target ................................................ See hyperlink, target 
list ................................................ See document structure, list 
M 
markup compatibility 
digital signature, impacted by ........................................ 235 
document structure, usage in ......................................... 221 
mentioned .......................................................................... 1 
namespace ................................................... See namespace 
mentioned ..................................................................... 43 
preprocessing requirements ............................................. 43 
processing required .......................................................... 42 

ECMA-388 
I. Index 
 
 First Edition, June 2009 
471 
property elements, usage with ......................................... 44 
resource dictionary, usage in .......................................... 164 
usage of ............................................................................. 42 
memory management, device ........... See interleaving; discard 
control 
miter ........................................................ See stroke, line, join 
N 
name 
elements applied to ........................................................ 155 
link target correspondence ............................................. 223 
link target, specifying as .................................................... 49 
purpose of ....................................................................... 222 
resource entries, prohibited for ...................................... 223 
syntax .............................................................................. 223 
uniqueness ...................................................................... 222 
named color ..................... See color, color space, named color 
namespace .......................................................................... 397 
content type .................................................................... 397 
core properties ................................................................ 397 
digital signatures ............................................................. 397 
discard control ................................................................ 397 
document ........................................................................ 397 
document sequence ........................................................ 397 
document structure ........................................................ 397 
markup compatibility ...................................................... 397 
page ................................................................................. 397 
relationships .................................................................... 397 
resource dictionary key ................................................... 397 
signature definitions ....................................................... 397 
story fragments ............................................................... 397 
naming of parts .............. See parts, naming recommendations 
natural language .................................................. See language 
n-channel color .................... See color, color space, n-channel 
O 
opacity 
blending ................................................. See color, blending 
brush initial opacity ......................................................... 122 
composition effects ......................................................... 258 
computations ............................................................ 254–56 
described ......................................................................... 156 
elements applied to ........................................................ 155 
mask .......................................................... See opacity mask 
of canvas ........................................................................... 54 
of color ...... 32, 114, 137, 143, 187, 190, 191, 192, 193, 194, 
201, 312 
of glyphs ............................................................................ 88 
of image brush ................................................................ 115 
of linear gradient brush ................................................... 137 
of path ............................................................................... 61 
of pixel formats ............................................... 195, 196, 197 
of radial gradient brush ................................................... 143 
of solid color brush .......................................................... 113 
of stroke .......................................................................... 258 
of visual brush ................................................................. 118 
pre-multiplied alpha ....................................................... 256 
superluminous colors...................................................... 256 
transparent brush tiling .................................................. 274 
value range ..................................................................... 254 
opacity mask 
brush, filling with .................................................. See brush 
described ........................................................................ 150 
elements applied to ................................................ 155, 156 
example .................................................................. 150, 151 
of canvas ................................................................... 54, 182 
of glyphs.................................................................... 88, 185 
of path ...................................................................... 61, 183 
Open Packaging Conventions 
core properties ............................................................... 241 
namespace ............................................... See namespace 
digital signature .................................... See digital signature 
interleaving 
consumer considerations ............................................ 231 
optimization ................................................................ 227 
parsing head-first vs. tail first ...................................... 228 
piece ................................................................................ 8 
package ............................................................................... 8 
packaging model ....................................................... 8, 19 
relationship ..................................................................... 8 
physical model .............................................................. 8, 19 
Open XML Paper Specification 
document format ............... See OpenXPS Document format 
organization of .................................................................. 17 
OpenType font .......................................... See font:OpenType 
OpenXPS Document format ....................................... 8, 17, 21 
content types .................................................................. 398 
described ...................................................................... 1, 47 
example ............................................................................ 23 
extensibility .................................. See markup compatibility 
fixed payload ................................................................ 7, 21 
fixed payload root ......................................................... 7, 21 
illustrated .......................................................................... 19 
language .......................................................... See language 
markup elements ............................. See OpenXPS elements 
parts ............................................................................ 19, 21 
payload ............................................................................. 21 
properties 
attribute syntax ............................................................. 44 
composability ........................................................ 44, 155 
described ....................................................................... 43 
element syntax .............................................................. 44 
model ............................................................................ 43 
ordering ................................................................. 44, 410 
property attribute ........................................................... 9 
property element ............................................................ 9 
property value ........................................................... 9, 43 
property .............................................................................. 8 
relationship types ........................................................... 399 
relationships ............................................................... 19, 24 
RELAX NG schema 

I. Index 
ECMA-388 
472 
First Edition, June 2009 
3D-Graphic Content ..................................................... 390 
discard control ............................................................. 389 
document structure ..................................................... 385 
driver 
DiscardControl_Part ................................................. 365 
DocumentStructure_Part ......................................... 365 
FixedDocument_Part ............................................... 366 
FixedDocumentSequence_Part ................................ 366 
FixedPage_Part......................................................... 366 
SignatureDefinitions_Part ........................................ 366 
StoryFragments_Part ............................................... 367 
General Attribute Specification ................................... 365 
OpenXPS Document ..................................................... 371 
resource dictionary key ............................................... 383 
signature definitions .................................................... 369 
root ................................................................................... 47 
versioning ..................................... See markup compatibility 
XML 
DTDs prohibited ............................................................. 42 
markup design ............................................................... 41 
markup model ......................................................... 43–45 
namespaces ........................................................... 43, 397 
Unicode encodings permitted ....................................... 42 
usage.............................................................................. 42 
whitespace ..................................................................... 45 
XML and XSI namespace usage ...................................... 43 
XML schema (XSD) 
3D-Graphic Content ..................................................... 362 
characteristics ................................................................ 43 
discard control ............................................................. 361 
document structure ..................................................... 355 
OpenXPS Document ..................................................... 329 
resource dictionary key ............................................... 353 
signature definitions .................................................... 327 
validity requirement ...................................................... 43 
OpenXPS elements 
digital signature 
<Intent> ............................................................... 240, 293 
<SignatureDefinition> .......................................... 238, 316 
<SignatureDefinitions> ........................................ 238, 317 
<SignBy> .............................................................. 240, 316 
<SigningLocation> ................................................ 240, 317 
<SpotLocation> .................................................... 239, 318 
discard control 
<Discard> ............................................................. 233, 279 
<DiscardControl> ................................................. 232, 280 
document structure 
<DocumentOutline> ............................................ 205, 280 
<DocumentStructure.Outline> ............................ 205, 281 
<DocumentStructure> ......................................... 204, 281 
<FigureStructure> ................................................ 220, 282 
<ListItemStructure> ............................................. 220, 297 
<ListStructure> .................................................... 219, 297 
<NamedElement> ................................................ 221, 298 
<OutlineEntry> ..................................................... 206, 299 
<ParagraphStructure> ......................................... 217, 301 
<SectionStructure> .............................................. 217, 315 
<Story> ................................................................ 207, 319 
<StoryBreak> ....................................................... 217, 319 
<StoryFragment> ................................................. 214, 320 
<StoryFragmentReference> ................................ 208, 321 
<StoryFragments> ............................................... 213, 321 
<TableCellStructure> ........................................... 219, 321 
<TableRowGroupStructure>................................ 218, 322 
<TableRowStructure> .......................................... 218, 322 
<TableStructure> ................................................. 218, 323 
document-level 
<DocumentReference> ......................................... 47, 281 
<FixedDocument> ................................................. 48, 282 
<FixedDocumentSequence> .................................. 47, 282 
<LinkTarget> .......................................................... 50, 296 
<PageContent.LinkTargets> .................................. 49, 300 
<PageContent> ...................................................... 48, 300 
page-level 
<ArcSegment> ....................................................... 72, 275 
<Brush3D> ................................................................... 459 
<Canvas.Clip> ...................................................... 164, 278 
<Canvas.OpacityMask> ....................................... 182, 278 
<Canvas.RenderTransform> ................................ 171, 279 
<Canvas.Resources> ............................................ 158, 279 
<Canvas> ............................................................... 54, 276 
<FixedPage.Resources> ....................................... 157, 284 
<FixedPage> .......................................................... 51, 283 
<Glyphs.Clip> ....................................................... 167, 289 
<Glyphs.Fill> ........................................................ 111, 289 
<Glyphs.OpacityMask> ........................................ 185, 290 
<Glyphs.RenderTransform> ................................ 173, 290 
<Glyphs> ................................................................ 88, 285 
<GradientStop> ................................................... 149, 290 
<ImageBrush.Transform> .................................... 175, 293 
<ImageBrush> ..................................................... 115, 291 
<LinearGradientBrush.GradientStops> ............... 142, 295 
<LinearGradientBrush.Transform> ...................... 179, 296 
<LinearGradientBrush> ....................................... 137, 294 
<MatrixTransform> ............................................. 168, 298 
<Path.Clip> .......................................................... 165, 306 
<Path.Data> ........................................................... 64, 306 
<Path.Fill> .............................................................. 65, 306 
<Path.OpacityMask> ........................................... 183, 307 
<Path.RenderTransform> .................................... 172, 307 
<Path.Stroke> ........................................................ 66, 307 
<Path> ................................................................... 60, 302 
<PathFigure> ......................................................... 70, 308 
<PathGeometry.Transform> ............................... 174, 310 
<PathGeometry> ................................................... 68, 309 
<PolyBezierSegment> ............................................ 76, 310 
<PolyLineSegment> ............................................... 77, 311 
<PolyQuadraticBezierSegment> ............................ 78, 311 
<RadialGradientBrush.GradientStops> ............... 149, 314 
<RadialGradientBrush.Transform> ...................... 180, 314 
<RadialGradientBrush> ....................................... 143, 312 
<ResourceDictionary> ......................................... 159, 315 
<SolidColorBrush> ............................................... 113, 317 
<VisualBrush.Transform> .................................... 176, 325 

ECMA-388 
I. Index 
 
 First Edition, June 2009 
473 
<VisualBrush.Visual> ............................................ 120, 326 
<VisualBrush> ...................................................... 118, 324 
optimization 
for streaming consumption ................... See Open Packaging 
Conventions, interleaving 
of composition rules ........................................................ 258 
of digital signatures ......................................................... 233 
of glyphs .......................................................................... 107 
of interleaving ........................................................... 228–31 
of named element location ............................................. 204 
of pixel placement rules .................................................. 245 
outline ................................... See document structure, outline 
P 
packaging model .................. See Open Packaging Conventions 
page 
bleed area ................................................................... 51, 52 
content area ........................................................ 51, 53, 243 
height of .................................................................... 51, 243 
height, advisory ................................................................. 49 
layout ............................................................ See also layout 
markup grouping ................................................. See canvas 
namespace ................................................... See namespace 
order of pages ................................................................... 48 
orientation of .................................................................... 53 
reference to ....................................................................... 48 
root of ............................................................................... 51 
scaling for print ................................................................. 53 
uniqueness of .................................................................... 49 
width of ..................................................................... 51, 243 
width, advisory .................................................................. 49 
paragraph ........................ See document structure, paragraph 
part ......................................................................................... 8 
part name ............................................................................ 8 
PrintTicket ......................................................................... 37 
parts ................................See also OpenXPS Document format 
core properties See Open Packaging Conventions, Standard 
digital signature 
certificate 
part ........... See Open Packaging Conventions, Standard 
digital signature origin ..... See Open Packaging Conventions, 
Standard 
DiscardControl ........................................................... 22, 232 
DocumentStructure ............................................. 22, 38, 203 
FixedDocument ........................................................... 21, 25 
FixedDocumentSequence ............................................ 21, 25 
FixedPage .................................................................... 21, 26 
font ........................................................................ 22, 33–37 
ICC profile .......................................................................... 22 
image ..................................................................... 22, 26–33 
naming recommendations .......................................... 39–41 
PrintTicket ......................................................................... 22 
remote resource dictionary ......................................... 22, 37 
SignatureDefinitions .................................................... 22, 38 
StoryFragments ................................................... 22, 39, 209 
thumbnail ................................................................... 22, 32 
thumbnail, package ........ See Open Packaging Conventions, 
Standard 
XML digital signature ...... See Open Packaging Conventions, 
Standard 
path 
clipping .............................................................. See clipping 
described .................................................................... 59, 60 
fill brush ............................................................................ 61 
geometry, reference to ............................................... 61, 64 
opacity ................................................................ See opacity 
opacity mask .............................................. See opacity mask 
shape .............................................................. See geometry 
stroke brush ...................................................................... 61 
stroke control .......................................................See stroke 
transformation ....................................... See transformation 
usage described ................................................................ 64 
payload ...............................8, See OpenXPS Document format 
physical model..................... See Open Packaging Conventions 
physical organization .......... See Open Packaging Conventions, 
interleaving; ZIP 
pixel ................................................................ See layout, pixel 
pixel snapping................................................... See stroke, line 
PNG ................................................................. See image, PNG 
positioning content ........... See layout; transformation, matrix 
primary fixed payload root ..................................................... 8 
printing 
bleed area ............................................ See page, bleed area 
content area .................................... See page, content area 
device fonts ......................................... See font, device font 
digital signature .................................... See digital signature 
discard control ........................................ See discard control 
font, print and preview restricted.. See font, licensing rights 
interleaving . See Open Packaging Conventions, interleaving 
layout ....................................................................See layout 
orientation .................................... See PrintTicket keywords 
PrintTicket .................. See PrintTicket; PrintTicket keywords 
resource constraints ............................... See discard control 
scaling ........................................... See PrintTicket keywords 
PrintTicket .............................................................................. 8 
empty PrintTicket, markup of ......................................... 228 
mapping content levels to parts ....................................... 38 
parts ....................................................................... See parts 
relationships .............................................. See relationships 
producer ................................................................................. 8 
implementation burden .......................................... 399–451 
property .............. See OpenXPS Document format, properties 
R 
radial gradient ....................... See brush, radial gradient brush 
raster graphics .......................................................... See image 
reading order ........................... See accessibility, reading order 
relationship ............................................................................ 9 
StartPart .............................................................................. 8 
relationships ................... See also OpenXPS Document format 

I. Index 
ECMA-388 
474 
First Edition, June 2009 
core properties .................................................................. 24 
digital signature................................................................. 24 
digital signature certificate ............................................... 24 
digital signature definitions ............................................... 24 
digital signature origin ...................................................... 24 
DiscardControl .................................................................. 24 
DocumentStructure ........................................................... 24 
external prohibited ........................................................... 24 
namespace ................................................... See namespace 
PrintTicket ......................................................................... 24 
purpose of ......................................................................... 24 
relationship types, reference table ................................. 399 
required resource .............................................................. 25 
restricted font ....................................................... 25, 34, 36 
StartPart ...................................................................... 21, 25 
StoryFragments ................................................................. 25 
thumbnail .......................................................................... 25 
usage of ............................................................................. 25 
relationships part .................................................................... 9 
rendering .......................................................... See also layout 
rules described .......................................................... 243–74 
required part .......................................................................... 9 
resource .............. See resource dictionary, resource definition 
resource constraints .................................. See discard control 
resource definition ............. See resource dictionary, resource 
definition 
resource dictionary ................................................................. 9 
described ................................................................. 156, 159 
example ........................................... 157, 158, 160, 161, 162 
markup compatibility usage ............................................ 164 
remote .... 9, See resource part, remote resource dictionary 
resource definition .............................................................. 9 
described ............................................................. 156, 159 
key 
described .................................................................. 156 
namespace ............................................ See namespace 
on canvas ................................................................... 54 
on geometry ............................................................... 68 
on glyphs .................................................................... 88 
on image brush ........................................................ 115 
on linear gradient brush ........................................... 137 
on matrix transformation ......................................... 168 
on path ....................................................................... 61 
on radial gradient brush ........................................... 143 
on solid color brush .................................................. 113 
on visual brush ......................................................... 118 
uniqueness ............................................................... 163 
language ...................................................................... 160 
locating ........................................................................ 163 
namespace prefixes, interpreting ................................ 160 
referencing previously-defined resources ... 160, 161, 163 
usefulness of path, glyphs, and canvas as ................... 157 
sharing ......... See resource part, remote resource dictionary 
specifying .......................................................... 156, 157–61 
where usable ................................................................... 157 
resource part 
color profile ....................................... See color, color profile 
font .......................................................................... See font 
image .................................................................... See image 
reference to ................................................................ 24, 26 
relationships to .......................................... See relationships 
remote resource dictionary .........................22, 24, 157, 161 
required resource ............................................................. 24 
usage of ............................................................................ 24 
resource reference ................................................................. 9 
described ................................................................ 156, 162 
example .......................................................................... 162 
scope............................................................................... 163 
syntax.............................................................................. 162 
rotating content ............................ See transformation, matrix 
S 
scalable vector graphics (SVG) ...... See geometry, abbreviated 
syntax 
scaling 
content ...................................... See transformation, matrix 
for print......................................... See page:scaling for print 
scRGB ......................................... See color, color space, scRGB 
search .......................................................................... See find 
section .................................. See document structure, section 
segment ............................................. See geometry, segment 
selection 
behavior .......................................................................... 224 
caret stop .................................................................. 88, 107 
document structure, enabled by ............................ 203, 224 
fragment type, behavior depending on .......................... 224 
mentioned ...................................................... 100, 107, 203 
order ............................................................................... 224 
recommended ................................................................ 224 
shear.............................................. See transformation, matrix 
signature definitions ................................ See digital signature 
signature spot ... 9, See digital signature, signature definitions 
skewing content ............................ See transformation, matrix 
sRGB ............................................ See color, color space, sRGB 
starting part................................... See relationships, StartPart 
story ......................................... See document structure, story 
story fragment.......... See document structure, story fragment 
stream .................................................................................... 9 
stretching content ......................... See transformation, matrix 
stroke 
brush ................................................. See path, stroke brush 
consistent nominal width ....................... See stroke, hairline 
contour rendering ........................................................... 262 
dash 
cap ............................................................................... 263 
flat............................................................................ 263 
round ....................................................................... 264 
square ...................................................................... 263 
style ........................................................................... 61 
triangle..................................................................... 264 
offset ............................................................................. 61 
overlapping ................................................................. 265 

ECMA-388 
I. Index 
 
 First Edition, June 2009 
475 
style ............................................................................... 61 
drawing algorithm, symmetry of ..................................... 262 
edge parallelization ......................................................... 262 
fill rule, independence from ............................................ 272 
hairline ............................................................................ 272 
line 
cap ............................................................................... 265 
end ............................................................................. 61 
flat ............................................................................ 266 
for dashed stroke ..................................................... 266 
round ........................................................................ 266 
square ...................................................................... 266 
start ............................................................................ 61 
triangle ..................................................................... 266 
join 
bevel ......................................................................... 268 
miter ................................................................... 269–71 
round ........................................................................ 267 
style ............................................................................ 61 
miter limit ...................................................................... 61 
pixel snapping ................................................................ 61 
thin stroke anti-aliasing behavior ................................ 245 
zero-length, avoided ...................................................... 71 
multi-figure path, behavior with ..................................... 272 
phase control .................................................................. 262 
segments, mixed stroked and non-stroked ..................... 272 
thickness............................................................................ 61 
T 
table See document structure, table, See document structure, 
table 
table of contents ................... See document structure, outline 
text 
baseline .......................................... See text, glyph, baseline 
bidirectional .............................................................. 88, 103 
bold ............................................... See text, style simulation 
clipping ............................................................... See clipping 
fill brush .................................................................... 88, 111 
font ................................................................... See also font 
device font, reference to ....................................... 88, 106 
reference to ................................................................... 88 
glyph 
advance width.............................................. 93, 94, 98, 99 
baseline .......................................................................... 93 
black box ........................................................................ 93 
cluster map .................................. 94–97, 97, 99, 100, 423 
indices 
described .............................................................. 97, 98 
reference to non-existant glyph ................................. 98 
restriction of length .................................................... 98 
specifying ................................................................... 88 
syntax ......................................................................... 97 
metrics ........................................................................... 93 
offset .................................................. 94, 97, 99, 103, 423 
origin ........................................................................ 93, 94 
origin, sideways ............................................................. 93 
side-bearing, bottom ..................................................... 94 
side-bearing, left ........................................................... 93 
side-bearing, right ......................................................... 93 
side-bearing, top ........................................................... 94 
glyphs usage for ................................................................ 87 
italic .............................................. See text, style simulation 
markup .............................................................................. 88 
markup examples ........................................................... 108 
markup optimization ...................................................... 107 
opacity ................................................................ See opacity 
opacity mask .............................................. See opacity mask 
position ....................................... See also text, glyph, offset 
horizontal text ............................................................... 88 
vertical text ................................................................. 101 
sideways (vertical) ............................................................ 88 
advance width ....................................................... 98, 102 
bidirectional text, intersection with ............................ 102 
described ..................................................................... 101 
example, sideways ...................................................... 104 
example, vertical ................................................. 104, 105 
horizontal text, including ............................................. 101 
origin calculation ......................................................... 101 
vertical glyphs, preference for .................................... 101 
size .................................................................................... 88 
style simulation ......................................................... 88, 100 
transformation ....................................... See transformation 
underline................................................................. See path 
Unicode string ........................................ See also text, glyph 
escaping open brace character ................................... 100 
mapping code units to glyphs........................................ 94 
normalization prohibited............................................. 100 
specifying ...................................................................... 88 
Unicode control marks, inclusion of ............................ 100 
Unicode scalar value, split into code units .................... 94 
unmappable code unit behavior ................................. 100 
usage of ....................................................................... 100 
UTF-16 code units, consisting of ................................... 94 
vertical ...................................... See text, sideways (vertical) 
thread ....................................... See document structure, story 
thumbnail ............................................................................... 9 
described .................................................................... 22, 32 
formats ................................................................. See image 
parts ....................................................................... See parts 
relationship ....................................................................... 25 
usage ................................................................................. 32 
TIFF .................................................................. See image, TIFF 
transformation 
composability.................................................................. 244 
described ................................................................ 167, 244 
effective transform ........ See transformation, composability 
elements applied to ................................................ 155, 156 
matrix 
abbreviated syntax ...................................................... 168 
abbreviated syntax example ....................................... 171 
described ..................................................................... 168 
example ....................................................................... 170 

I. Index 
ECMA-388 
476 
First Edition, June 2009 
inverting x-axis ............................................................. 169 
inverting y-axis ............................................................. 169 
multiplying ................................................................... 168 
positioning ................................................................... 169 
rotating ........................................................................ 169 
scaling .......................................................................... 169 
skewing ........................................................................ 169 
specifying ..................................................................... 168 
mentioned ....................................................................... 243 
non-invertible transform, rendering of elements with ... 244 
of brush ........................................................................... 113 
of canvas ................................................................... 54, 171 
of geometry ............................................................... 68, 174 
of glyphs .................................................................... 88, 173 
of image brush ........................................................ 115, 175 
of linear gradient brush ........................................... 137, 179 
of path ....................................................................... 61, 172 
of radial gradient brush ........................................... 143, 180 
of tiles ............................................................................. 176 
of tiles, example .............................................................. 178 
of visual brush ......................................................... 118, 176 
transparency ...........................................................See opacity 
TrueType collection (TTC) font ... See font:TrueType collection 
(TTC) 
TrueType font ............................................. See font:TrueType 
V 
vector graphics ........................................................... See path 
versioning ........................................ See markup compatibility 
W 
whitespace See OpenXPS Document format, XML, whitespace 
Windows Color System (WCS) ............. See color, color profile, 
Windows Color System (WCS) profile 
X 
XML ...............................See OpenXPS Document format, XML 
XML namespaces ........... See namespace; OpenXPS Document 
format, XML, namespaces 
Z 
ZIP 
archive .............................................................................. 19 
utilities .............................................................................. 35 
 

