 
 
Computational Studies of 
Rotations and Quaternions  
 
 
 
 
 
 
 
Joseph Tuttle 
 
 
 
Submitted under the supervision of Demoz Gebre-Egziabher to the University Honors Program 
at the University of Minnesota-Twin Cities in partial fulfillment of the requirements for the 
degree of Bachelor Science summa cum laude in Aerospace Engineering and Mechanics Honors. 
 
 
 
April 27th 2011 
 
 

2 
 
Table of Contents 
 
Abstract………………………………………………………………………………………..……….. 3 
Body 
 
Introduction ......................................................................................... 4 
 
Euler’s Theorem and Angles................................................................ 7 
 
Quaternions ......................................................................................... 20 
 
Conic Sections Proof............................................................................    26 
Works Cited.................................................................................................... 34 
Appendices..................................................................................................... 35 
 
 

3 
 
Abstract 
 
 
As a fundamental description of motion, rotations are important aspects of kinematics 
and engineering.  All rotations can be described either as vector rotations, in which a series of 
vectors are rotated, or frame rotations, in which the entire frame is rotated. Each type of 
rotation can be expressed through three main notations. 
 
The first is the directional cosine matrix or DCM. Through matrix multiplication of the 
DCM and a vector, the resultant vector is produced. By applying the product of three DCMs, the 
Aerospace Rotation sequence can be expressed in terms of the Euler Angles. These three angles 
can describe the orientation of the body in almost every position. A series of rotations can also 
be expressed as a single rotation with a known angle and axis of rotation. With these two 
parameters, the rotation can be expressed through quaternions. Through hyper complex 
operations, quaternions offer another method of calculating both frame and vector rotations. 
Each of these representations are investigated and related through computational means. 
 
Although each representation has their own advantages and disadvantages, quaternions 
are very significant for applications with a known axis of rotation. An example is proving the 
intersection of any plane and a double cone produces the conic sections. To eliminate a variable 
and express the intersection in two dimensions, a rotation must be applied. By calculating the 
axis and angle of rotation, the required rotation is found by method of quaternions.  
 
 

4 
 
Introduction 
 
 
Take a glance around you and your eyes will stumble upon some form of rotation. 
Whether it is the fan blades rapidly spinning above you, or the gradual turning of the clock’s 
hands, the motion is the resultant of applied torque. The body rotates around an axis always 
perpendicular to the motion, and either lies through a pin, or center of mass if unsupported. 
The direction of this axis is determined through convention by the right hand rule, by which 
curling your right hand in the direction of motion places the thumb in the axis’s direction.   
The right hand rule governs whether a rotation is positive or negative with respect to an 
axis of rotation. From the rule, the axes of x-y-z space can be placed by forcing the z axis to act 
as the axis of rotation when the x axis is rotated in the direction of the y axis. As a result, the 
rotation of y onto z creates the x axis and z onto x creates the y axis; an important circle to 
remember. Note that reversing the rotation flips the axis of rotation, so that y onto x results in 
the –z axis as the rotation axis. 
 
There are two types of rotations, frame rotation and point rotation. In point rotations, 
one or more points are rotated as the frame remains stationary. In frame rotation, the opposite 
is true. As in the relativity of motion between two objects, frame rotation is identical and 
impossible to distinguish from a point rotation of the opposite angle.  As a warning, it is very 
important to recognize which rotation is occurring. Otherwise all calculations are thrown off 
from a simple negative sign.  Although the frame is often seen as three orthogonal unit vectors, 
these three vectors do not in fact represent the frame. While the frame shifts about the origin, 

5 
 
the vector stays stationary. The idea that every coordinate is measured with respect to the 
frame relates the frame rotation to the point rotation. 
 
Now that the convention has been addressed, the equations of rotation can be derived. 
Starting with the classic x-y plane, label an arbitrary point, as shown in Figure 1a, with 
coordinates (  ,   ). Note that by the right hand rule, the z axis points out the page, producing 
a positive angle is in the counterclockwise direction. A rotation of angle θ is applied to the 
frame, as shown in Figure 1b, in which the new coordinates of the point are (  ,   ). By finding 
the perpendiculars dropped from one frame onto its counterparts, or h and I, in familiar terms, 
a system of equations can relate the new coordinates to the original coordinates as shown:  
 
            
                                        
Now    can be found as followed:  
                                 
       
   
  
                     
      
                               
Figure 1a 
Figure 1b 

6 
 
Written in matrix form, a rotation around the z axis is: 
Equation 1 
 
 
 
  
  
  
   
      
      
 
       
      
 
 
 
 
   
 
 
 
  
This is known as a direction cosine matrix, or DCM. Note that any further derivations will 
be located in the Appendices. 
In summary, Equation 1 calculates the coordinates with respect to the rotated frame 
given the original coordinates. Several properties are verified from this one equation. First, the 
z coordinates remain constant when the axis of rotation is the z axis. Second, the determent of 
the square or rotation matrix A is 1 as shown in Appendix 1a. This is essential if properties such 
as distance between points and the origin are conserved. Third, the rotation matrix in the 
opposite direction is the inverse matrix, which is also the transpose. In other words, if the frame 
is rotated   and then rotated back, the frame returns to its original position and the 
coordinates remain unchanged. Fourth and final, if the frame is rotated an angle   and then 
angle φ, the resultant rotation matrix consist of the angle sum of   and φ, also in Appendix 1b. 
Therefore, two consecutive rotations about the same axis can be represented as one. 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

7 
 
Euler’s Theorem and Angles 
 
 
Considered one of the greatest mathematicians, Leonard Euler was a significant figure in 
three dimension rotations. According to Euler, any orientation of the frame can be described 
through a maximum three rotations about the principal axis, as long as there are no successive 
rotations around the same axis. In total, there are twelve different combinations, six that utilize 
all three axes, and six that has the same axis for the first and last rotation. The first two 
rotations swing the last axis into the desired position, and the last rotation locks a second axis 
into place. Since the axes are orthogonal, the last axis is forced into position by the last rotation 
as well. 
One possible combination, the Aerospace Sequence of ZYX, will be investigated. Note 
that the sequence is read from left to right; the matrix representation is applied from right to 
left. In the Aerospace Sequence, the frame is first rotated around the z axis through a heading 
angle of ψ (psi), then around the y axis through elevation angle, θ (theta), and finally the bank 
angle, φ (phi) about the x axis. Motions about these axes are yaw, pitch, and roll respectively. 
Using methods similar to those that led to Equation 1, the rotation matrices around the 
y and x axes are: 
Equation 2:                               
 
 
 
 
      
      
 
       
      
     
 
                 
      
 
       
 
 
 
      
 
      
                         
      
      
 
       
      
 
 
 
 
  

8 
 
     Since matrix multiplication becomes tedious, the Aerospace sequence can be 
calculated by use of a simple Matlab script, given in Appendix 2 (Angles of π/4 are used as 
placeholders). From here on out, problems resolved through numerical computations will be 
executed through Matlab and Mathematica for symbolic expressions. Expanded, the rotational 
matrix is listed below in Equation 3. 
Equation 3:  Aerospace Sequence A = Ax*Ay*Az =  
 
            
            
       
                               
                               
             
                               
                               
            
  
There are more than meets the eye in the equation. Most obvious is the lone         
term, allowing the angle of elevation to be found easily, as the elevation ranges from -90˚ to 
90˚. Next are the remaining terms in the first row and last column, in which all four terms are 
used to determine the heading and bank angle, both which range from -180˚ to 180˚. The 
multiple cosine terms determine whether the angle is negative or positive, and the cosine-sine 
term determines the sector. For those quite familiar with trigonometry, one might see that the 
sum of the squares of each term in the first row, as well as the last column is equal to one. 
Following this hunch, the same is true for any column and row. The reason for this, at least for 
rows, lies on the restraint of any point remains the same distance from the origin. Taking into 
account the transpose of the matrix, which is also its inverse, is also a rotation and must also 
obey. Maybe not as obvious, but the determent of the matrix is always one. 
As an additional bonus, all these properties apply to any series of rotations. As discussed 
in Euler’s Theorem, every rotational matrix can be represented as a series of three non 
repetitive rotations, including the Aerospace sequence. A simple Matlab script can be written to 

9 
 
find the three desired angles (Appendix 3) with a portion shown below. Notice how the heading 
and bank angles are tested of whether or not they are in the negative/positive ninety degree 
range by the ‘if’ statements. 
theta = asin(-A(1,3)); 
psi = atan(A(1,2)/A(1,1)); 
phi = atan(A(2,3)/A(3,3)); 
  
if A(1,1) < 0 
    psi = psi + pi; 
end 
  
if A(3,3) < 0 
    phi = phi + pi; 
end 
 
 Of course, there is a specific rotation matrix to every set of angles (in a practical range) 
and so the other six elements must correspond to Equation 3. With the three angles, the 
remaining of the script tests the other six elements. The total difference of the predicted and 
actual elements is compared to a small error (to take account for the approximations made by 
Matlab). Note that for the other eleven valid permutations of triple rotations, there is a similar 
scenario, allowing the angles to be determined as well. In order to prevent multiple sets of 
angles representing the same rotation, a range like the Aerospace Sequence must be 
administered. 
It is clear that a series of rotation results in a single rotation matrix A, but is there a 
resultant axis of rotation, v? In other words, is there a line of points that remain stationary after 
the series of rotations? This can be equated as A*V = V = I*V, or (A-I)*V = 0. According to 
Cramer’s rule, in order for V to be non-zero, as well as the solutions to be linear, det(A-I) = 0.  
As proven in Appendix 4, the condition is true.  

10 
 
With the original equation for the rotation of axis, the axis can be solved for any general 
rotation matrix, A by means of the Matlab script in Appendix 5. To begin, the results of A – I is 
found and named matrix B.   
 Before going on, the resolving of singularities must be addressed. Due to the nature of 
the techniques to solve these problems, dividing by zero is possible and even common. In this 
case, the rotation axis may lie on the x-plane in which    will always be zero. ‘If-else’ 
statements become plentiful and require almost the same code to be repeated three times. In 
addition, there are times when specific solutions require additional extreme cases. For this 
example, the following code determines if the axis of rotations is (1, 0, 0): 
elseif (B(1,1) == 0) & (B(1,2) == 0) & (B(1,3) == 0) & (B(2,1) == 0) & 
(B(3,1) == 0) 
    v = [1; 0; 0;] 
return; 
 
For the above case, B =  
 
 
 
 
 
 
 
 
 
   , which leads to A =  
 
 
 
 
 
 
 
 
 
   . This indicates that 
the only rotation possible is about the x axis. Similar tests are applied for the cases when V = (0, 
0, 1) and (0, 1, 0). 
To simplify the method, let the x coordinate of the axis,   , equal one. If B = 
 
 
 
 
 
 
 
 
 
 
    B*V can be rewritten as  
 
 
 
 
 
 
 
 
 
  
 
  
  
   
 
 
 
 , which can be rearranged to 
  
 
 
     
       
   . From here,    and    can be solved assuming the determent of the 
coefficients is non-zero through the psuedocode: 
Bcx = [B(2,2) B(2,3); B(3,2) B(3,3)]; 
 
if det(Bcx) ~= 0 

11 
 
     
By = [-B(2,1) B(2,3); -B(3,1) B(3,3)]; 
Bz = [B(2,2) -B(2,1); B(3,2) -B(3,1)];     
  
vx = 1; 
vy = det(By)/det(Bcx); 
vz = det(Bz)/det(Bcx); 
 
 If the determent is zero, then    or    can be set to one instead, stressing the idea of 
repeating the same code three times. The final touches are applied to ensure that the axis is 
both a unit vector and has a positive x coordinate, unless it happens to be zero. In that case, the 
y coordinate is positive, and the z coordinate if the condition arises twice ( V = (0,0,1) ). 
With an axis of rotation established, there remains the final element, the angle of 
rotation. Combining these values describes any sequence of rotations, no matter how 
complicated and long. The axis was relatively easy to find and can be checked by the condition 
that A*V = V, which also guarantees that there is a single rotation. The angle will require some 
vector computations, and can only be tested with simple tests.  
Let us begin with the fact that any vector along the axis does not rotate, while every 
other vector does. The vector is separated into two vectors, one parallel to the axis, and the 
other perpendicular. By the right hand rule, the angle of the perpendicular as it is rotated 
counterclockwise (if the axis is pointing out of the page).  From the law of cosines, the angle is 
at its maximum when only the perpendicular is considered compared to the entire vector 
rotated, as the perpendicular’s magnitude is the shortest distance to the axis. 
 
 

12 
 
To save time, only a vector completely perpendicular to the axis is considered. Using the 
dot product, the vector can be calculated with the previously obtained rotation axis. For 
simplicity, two coordinates are defined as one, and the other coordinate is calculated as 
followed from the script (Appendix 6): 
if vz ~= 0 
    rx = 1; 
    ry = 1; 
    rz = -(vx + vy)/vz; 
r = [rx;ry;rz]; 
r = r/norm(r); 
s = A*r; 
 
 
 
Of course, the code above is rewritten two more times just in case   ,   , or    equals 
zero. With respect to the code, the perpendicular vector is labeled   and is normalized, and   is 
the resultant of the rotation applied to  . Although the angle can be found from the law of 
cosines and the side lengths, there is a much simpler method: the dot product of two unit 
vectors is equal to the cosine of the angle between them, as calculated with the following line: 
ang = acos(dot(r,s));  
 
 
Unfortunately, there lies one little catch. The drawbacks of the dot product is its 
commutative property, a.b = b.a. Because order does not matter, the sign or direction of the 
angle cannot be determined. Instead, the cross product comes into play. Taking the cross 
product of   and   should give a vector parallel to the axis, or at least it should. The sign of the 
angle is determined by below: 
d = -1*cross(r,s);   
                     
if dot(d,v) < 0 
    ang = -1*ang; 
end 
 

13 
 
The vector   is either aligned with the axis or against the axis. If the axis and   are in the 
same direction, the dot product is positive.  The sign of   is negative due to the fact that a 
vector rotates in the opposite direction as a frame rotation.  
 To celebrate our newfound ability to calculate both the resultant axis and angle of any 
rotations, let us test them against fairly simple examples. First, consider a 90˚ rotation about 
the z axis, then another 90˚ rotation about the x axis.  Tracing each frame, the y frame rotates 
90˚ in two orthogonal directions, resulting in a total of 90˚ The x frame rotates 90˚ once in the 
first rotation, and the z frame rotates by the same amount in the second. From intuition, the 
angle of rotation must be 90˚. What about the axis of rotation? Well, the x axis goes about the z 
axis as it reaches the original y axis. But the y axis rotates about the x axis, and the z axis spins 
about y axis. How could there be an inconsistent axis of rotation, but consistent angle? 
After finding the rotation matrix (or operator), the two previous Matlab methods can be 
applied to find the true axis and angle of rotations. Knowing that psi and phi are both 90˚, while 
theta is 0 degrees, A =  
 
 
 
 
 
 
 
 
 
  , which looks simple enough to handle. The axis of rotations 
results in V =  
     
     
     
 , which turns out to have all coordinates to be the square root of three. 
The angle of rotation is surprisingly 120 degrees. 
 Now it all makes perfect sense. Imagine the overhead view of the axis, so it represents 
the center pin. The axis are spread 120 degrees from another like a spinner of an old board 
game. 
 
 

14 
 
 
 
 
 Each axis moves onto another, in this case, in alphabetical order. But if the operator   is 
applied to a vector in the x direction:  
 
 
 
 
 
 
 
 
 
   
 
 
 
  = 
 
 
 
  which, along with the vectors in the 
other directions, is found to be in reverse alphabetical order. This illustrates the difference 
between frame and point rotations. The best way to understand the distinction is to observe 
both a vector on the x axis becomes the new z axis is equivalent as the z frame rotating into the 
x frame. Although both are correct, the former is better suited for calculations. 
Just to be safe, a script to calculate the rotation matrix, given the rotation axis and 
angle, should be developed. Clearly, for every axis and angle value, there exists a specific matrix 
(although not vice versa). After the axis is normalized and singularity cases are tested (either 
the rotation axis being the x, y, or z axis indicating a single rotation), a series of vectors, known 
as R, are created perpendicular to the axis, just as before. 
 Now instead of being able to find the rotated vector   by simply multiplying   and   to 
find the angle, the angle is used to calculate the   vector. But the angle alone can only 
determine a circle of possible values. The axis must be included to ensure that S is also 
perpendicular to the axis by means of the dot product. With two possible values left, the true 
value is determined by the direction of the rotation, or sign of the angle.  As before, the cross 
product is applied and consideration is taken for   to be the result of a frame rotation. There is 
one catch to guarantee that   is also a unit vector: the magnitude of the rotation axis must be 

15 
 
equal to the product of the magnitudes of   and   (both of which are 1) and the sine of the 
angle. For those who are curious, this is the formula for the area of a parallelogram. Now with 
three equations and three variables, the vector S can now be solved, as shown below in 
Equation 4. Of course, if    is zero, then similar equations are found for a non-zero coordinate 
of the rotation axis. 
Equation 4:   
  
  
  
  
  
  
 
  
   
   
  
  
  
  = 
       
 
          
  
           
           
             
  
With A composed of nine values, nine equations must be found. Since a single   vector 
results in three equations, three   vectors are required, with a corresponding three S vectors, 
arranged below in Equation 5: 
Equation 5:  
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
  
How can A be solved? Typically, the habit for solving a set of equations is by multiplying 
each side by the inverse of the first (coefficient) matrix, leaving the second equation separated. 
In this case, the reverse is desired, in which the first matrix is found. Fortunately, a powerful, 
but forgotten matrix property of the associative rule saves the day. Basically, if A, B, and C are 
matrices, then A*B*C = (A*B)*C, so as long the dimensions match. So instead of (A-1*A)*R = R = 
A-1*S, the equation is solved as A*(R*R-1) = A = S*R-1.  
A problem arises in which   it is not invertible, even though it is a square matrix. Before 
tossing all this progress into the wastebasket, there must be a reason why  -1 does not exist. It 
is known that   exists, and that the problem is not due to matrix S (at least for now). Taking a 

16 
 
look at the possible   vectors, they are defined to be perpendicular to the rotation axis, and 
therefore are planar. Of course, this is where the issue lies! 
 Interpret the situation from a graphical perspective. The sum of two vectors, if 
multiplied by some magnitudes   and  , results in a third vector that lies on the shared plane 
between the two vectors. In technical terms, the third vector is linear dependent on the two 
vectors. If a matrix is linear dependent, then it is not invertible as the third vector does not 
produce any additional information given by the two first vectors.  If a single   vector is 
replaced with a non perpendicular vector, such as the axis   itself (which also acts as the S 
vector by definition), then no possible combination of the   vectors can add up to  , and the   
matrix is now linear independent. Overall, the results are demonstrated in Equation 6 and the 
pseudo-code from the script (Appendix 7). 
Equation 6:     
   
   
  
   
   
  
   
   
  
   
   
   
  
   
   
  
   
   
  
 
  
 
% M * s = N 
  
if vx ~= 0 
M1 = [r1x r1y r1z; vx vy vz; 0 r1z -r1y;]; 
M2 = [r2x r2y r2z; vx vy vz; 0 r2z -r2y;]; 
N = [cos(ang); 0; vx*sin(ang);]; 
  
end 
  
s1 = inv(M1)*N; 
s2 = inv(M2)*N; 
  
R = [r1x r2x vx; r1y r2y vy; r1z r2z vz]; 
S = [s1(1) s2(1) vx; s1(2) s2(2) vy; s1(3) s2(3) vz;]; 
  
A = S*inv(R) 
 
 
 
 

17 
 
 
Surely enough, if a axis of rotation is set at   =  
 
 
 
 , and an angle of 120 degrees is 
entered, the rotation matrix is   =     
 
 
 
 
 
 
 
 
 
 , as our second guess predicted. What if the axis 
is turned upside down so it is   =  
  
  
  
 ?  This time,    =  
 
 
 
 
 
 
 
 
 
 , which is the frame rotating 
the other way. This matrix is also the transpose of the previous operation matrix, which is the 
same as the inverse, making perfect sense as the direction reverses by the right hand rule. As 
expected, if   is returned to  
 
 
 
 , but the angle is reversed to -120 degrees., the inverse matrix 
   is also produced. All in all, a series of rotations can be treated as a single rotation, 
represented solely by a single axis and angle. 
Even if the difference between a single frame and point rotation is the sign of an angle, 
all precautions in the world must be taken when multiple rotations are involved. One rotation is 
simple enough to track with the frame moving in one direction, or any point moving in the 
other direction. The setup of the problem all comes down to perspective. Now consider two 
frame rotations, say first about the z axis, and then the y axis.  It would seem, from the other 
perspective, the point would move about the z axis, and the y axis as well, just in opposite 
angles. WRONG. Instead, the correct perspective would be rotation about the y axis first, the z 
axis, still of opposite angles.  
The key is to understanding multiple rotations is to rely completely on a mathematical 
approach, and not on intuition. As shown, the series can be represented as a single rotation. If 
the frame rotation is composed of           , then the point rotation can be represented 

18 
 
as  -1 or transpose   .  Using the associative rule,                              
           . Again, the associative rule allows                              .  A 
general case can be applied to demonstrate that the inverse of a series of rotations is the 
inverse of each rotation (direction reversed) in reverse order. 
Unlike linear motion, even the most reasonable assumptions cannot be made, even if 
the logic appears concrete. Already, two mistakes have been made so far about multiple 
rotations, which is understandable but still not acceptable. This is all due to the attempt of 
“adding” the rotational motions like vectors on non-curved space. The term “linear” has more 
implications than relating to a line. In general, anything linear can be added and the whole is 
equal to the sum of the parts. In mathematic terms, if x = y + z, then f(x) = f(y) + f(z). Until now, 
the majority of operations could be assumed linear in some sense. With the loss of linearity, the 
operations and calculations become more complicated, and all faith must lie on the 
mathematics and the resultant produced. 
With the complications of a series of rotations, a single resultant rotation proves to the 
most beneficial. Even a simple set of two ninety degree rotations is enough to perplex anyone. 
Although scripts have been designed to determine the axis and angle of rotation from a 
rotational matrix, and vice versa, the results can still be hidden amongst the answer. Although it 
is quite simple to understand that a rotation matrix of  
     
 
      
 
 
 
     
 
     
    is a 60˚ rotation 
about the y axis, only a set of calculations can make meaning of the operation matrix 
 
     
      
      
     
     
     
     
     
     
 , let alone know that it is fake (finding the determent equaling one 

19 
 
is not a sufficient test alone, see Appendix 8 for other criteria). There must be some way to 
perform a single rotation about any axis and angle while the information encoded in the 
resulting “operator” can be easily read.    Perhaps the notion of quaternions can prove to be 
more useful than a set of new mathematical rules.  
 
 

20 
 
Quaternions 
  
 
Although we have a method to create a Direction Cosine Matrix from the axis and angle 
or rotation, there must be a more efficient and quicker method. Let us take a different 
approach. 
 
Suppose there exist a rotation Q, which takes the x frame, and rotates it onto the axis of 
rotation   of matrix A. This same rotation Q, also takes   and rotates it onto the vector (1, 0 , 
0). Any rotation about the x axis, Rx, of this vector will always result in the same vector. In other 
words,           , which can also be represented as                 As 
discussed before, the rotation       will have the same axis of rotation as  , but are they 
identical? If   lies on the x axis, then no rotations are required to bring   onto x, and     . 
Then             , and the angle of rotation is given by   . 
 
Now, exactly how do we represent   in terms of  ? Although there are many options, 
suppose we treat the situation as an Aerospace Sequence, and have a rotation first about the z 
axis with angle α (Qz), then the y axis of angle β (Qy). From an overhead view, the rotation 
becomes that on an xy plane in which        =       ),with two different values on the unit 
circle for α. In this case, α = tan-1      ) if    is positive, or tan-1      ) + 180 otherwise if 
   is negative. β, on the other hand, is limited to a half circle range (-90˚ to 90˚), and simply sin-
1(-  ). Note that due to the right hand rule , a positive rotation around the y axis actually 
projects the x axis into the negative z direction. 
 
With angles α and β in terms of the rotation axis, as well as the rotation angle, a 
symbolic expression of the matrix is now possible. Beginning with   , the matrix composes of 

21 
 
calculating both the sine and cosine of a tangent inverse of a ratio. Even worse, the expression 
is complicated even more with the condition of whether 180˚ was added. On the bright side,    
is slightly easier with only the sine and cosine of the tangent inverse, and    is left as is in terms 
of the rotation angle. The final step requires the product of all five matrices            
        . Multiplying two matrices of that size by hand is enough to torture even the most 
mathematically combined, and these matrices are nowhere close to be considered “clean” or 
“nice”. Overall, a symbolic expression through matrices is possible, but just simply not worth it.  
 
Before all hope is lost, let us investigate quaternions as a cleaner and innovative method 
for rotation. They are defined as hyper complex number of rank four (in which the familiar 
imaginary number   is ranked one). Just as imaginary number is defined by only one law of i2 = -
1, quaternions have imaginary numbers i, j, and k, all governed by the same law. The product of 
i,j, and k respectively also results in -1. Everything about quaternions can be summed with this 
line: 
i2 + j2 + k2 = ijk = -1 
 
Beware, the product of complex numbers is not commutative, (but is associative) similar 
to matrices. From the laws above, it is possible to take ijk = -1 and multiply each side by i, to 
give –jk = -i, or jk = i. Notice how this relates to the cross product of j x k = i, where i,j and k 
represents unit vectors in the x,y, and z direction respectively. Continuing the same method, 
the products jk = i, ki = j, as well as being equal to the negative of their reversed counterparts. 
For example kj = -i, extending the similarity to cross products. But they are not the same and 
should never be assumed to, as the case of i x i = 0, while ii = -1. 

22 
 
 
Just as complex numbers have both a real and imaginary components, quaternions have 
one real and three imaginary components. A general quaternion is represented as either a + bi 
+ cj + dk, or (a,b,c,d). The product of two quaternions is simply the product of each term, as 
exemplified:  qr = (a + bi + cj + dk)(e + fi + gj + hk) = ae + afi + agj + ahk + bei + bfii + bgij + bhik + 
cej + cfji + cgjj + chjk + dek + dfki + dgkj + dhkk. This is simplified to the form ae – (bf + cg + dh) 
+ a(fi + gj + hk) + e(bi + cj + dk) + i(ch – dg) + j(df – hb) + k(bg –cf). In order to make sense of 
these results, let us divide a quaternion q into two parts, the real, q0, and the imaginary vector, 
q, so q = q0 + q. Then the product qr = q0r0 – q · r +q0r +r0q + q x r, which is a blessing to those 
who have Matlab with a simple pseudo-code stated below. 
q0 = q(1); 
r0 = r(1); 
qv = [q(2) q(3) q(4)]; 
rv = [r(2) r(3) r(4)]; 
  
s0 = q0*r0 - dot(qv,rv); 
sv = q0*rv + r0*qv + cross(qv,rv); 
  
s = [s0 sv] 
 
 
If q = r, then q2 = q0
2 - |q|2 + 2q0 q based on the previously derived equation in which q x 
q =   . If the imaginary components are left equivalent, so q = r, but r0 = -q0, then the product qr 
shortens even further to –( q0
2 + |q|2), all of which is real. Taking the opposite of r, so instead q 
= -r and r0 = q0, the product is now ( q0
2 + |q|2), or the magnitude of the whole quaternion, 
|q|2. Due to the striking resemblance to a complex conjugate, r will be named the conjugate 
quaternion of q.  
 
Intuition suggests that there must be more to quaternions than meets the eye. Let us 
continue by letting q = au aud r = bu, where u is some unit vector. The two product     

23 
 
       –                   should be familar to those with a fair knowledge of 
mathematics. Going back to trigonometry reveals those are the sum of angles for cosine and 
sine, in which if                     and                     , then          
                      . As a bonus, the conjugate                       
                   .  There is now a strong promise of a connection to rotations. 
 
Suppose we represent a vector by the imaginary elements i,j and k and the real element 
be zero. The product                                                      . 
Unfortunately, this is not a valid vector, as there is a real part, but another quaternion. As a last 
resort, what if the product was multiplied the same quaternion as qvq? Applying the product 
rule again, (                                                                
                                                                  
                         . To begin the simplification process, let us begin 
with                        , which can be distributed as                   
               . Observe that       creates a vector perpendicular to both        , and so 
the entire expression is simply                  .  For the imaginary terms,           
                 can be also be distributed as                      +                     .  
 
Strangely, the real components do not cancel out as desired, but instead adds to 
2*                 . If one of the products contains –u, the real parts cancel out and the 
result is a pure vector. In other words, if the products are q’vq and qvq’, but which is a frame 
rotation, and which is a point rotation. As the first test, let us rotate (1,0,0) 90˚ around the z 
axis, in which     ˚ and u = (0,0,1) through q’vq. If the result is (0,0,1,0), the product is a 
point rotation,(0,0,-1,0) if it is a frame rotation, and neither for any other result. Updating the 

24 
 
Matlab script to carry out the product twice reveals that q’vq rotated (0,-1,0,0). Although this is 
not a desired answer, the result is equivalent to a 180 degree rotation. Rewriting the code 
again, let Matlab half the angle first. A second attempt reveals (0,0,-1,0), indicating a successive 
frame rotation. 
 
Even with several drawbacks, a promising alternative to DCM appears to be in our 
hands. The problem is we have only proven one case, and not every case. The current 
hypothesis is that if                        , then q’vq resembles the frame rotation of v 
through angle   and unit axis  . Broadening the example, we continue letting u = (0,0,1), but 
leave   and v as variables, so q = (        ,0,0,          ). The product q’vq proves to result in 
the rotation about the z axis as expected and can be found in Appendix 9, and can be repeated 
in a similar fashion for the other principal axes. Remember by associative property, q’vq can be 
expressed either as (q’v)q or q’(vq), as long as the order remains the same.  
Now consider a second rotation r, so the product is r’q’vqr or (r’q’)v(qr), which can be 
collected as a single rotation s’vs, in which qr = s.  A little work also reveals that r’q’ = s’, from 
properties such as (-r)·(-q) = q·r, and (-r) x (-q) = - q x r. The quaternion s is required to have a 
resultant axis and angle of rotation. Although the proof can be obtained through the strategies 
explained previously, the most direct and better suited method would be through spherical 
geometry and trigonometry. These fields are much more complex than their high school 
counterparts. As much as I wish to go into detail, all I will say is the proof relies on half angles, 
as well as finding a point on the sphere that remains stationary after the two rotations. Tying in 
Euler’s Theorem, any and all rotations can be expressed as a single quaternion rotation, similar 
to a matrix. The main difference and advantage the rotation can be found easily given the axis 

25 
 
and angle, in a four dimensional vector. For the quaternion,                        , the 
unit vector   is still the unit rotation axis and   is the rotation angle for all rotations. 
 
 

26 
 
Conic Sections Proof 
 
 
The greatest advantage quaternions have over any other method is requiring only the 
rotation axis and angle to carry out either a frame or vector rotation. An example application is 
the proving the name basis of conic sections. Glorified by the Greeks, the conics are rightly 
named after the intersection of a plane and a double cone (similar to an hourglass). Due to the 
single dimension of the plane, the conic is also of one dimension, although represented by 
three coordinates.  
 
From math analysis, one is able to determine if a curve of two variables is a conic 
sections and of what type. For three variables, the situation is not as simple as it seems. A 
common method for solving multiple equations and variables is substitution, in which a variable 
is eliminated. The greatest issue that is often missed is the solution produces a projection or 
shadow onto the plane of the remaining variables and is not equivalent to original curve. An 
example is the shadow of a coin from a light surface above. Both the projection and coin are 
circles if the coin is held horizontal. As the coin is tilted, the shadow becomes more and more 
elliptical until the coin is standing vertical, in which the shadow is only as wide as the coin’s 
thickness. 
 
To preserve the shape of the curve, the locus of points are rotated to an orientation 
such that the z value is constant (all points lie on a plane parallel to the xy plane). The first step 
is to rotate the plane of              of which the conic section lies on        . If 
one recalls, the gradient of a function is the vector normal to the surface. For the two planes, 

27 
 
the gradients are             and             . Letting            , we can 
normalize the gradients as     
 
  
 
  
 
   and           . From these two vectors, both a 
rotation axis and angle can be determined. Take caution of noting that to find a unique rotation 
axis and angle (or DCM or any other rotation notation) requires two vectors, but we are 
interested in rotating vector    onto   , in which any values on Plane 1 will be represented on 
Plane 2. This detail is crucial and the backbone on the validity of the proof.  
 
From the many possible rotation axis that exist, the one we desire is perpendicular to 
both    and   . This is guaranteed by taking                  . An essential step, the 
normalization is taken as                . The rotation angle can be found through the law 
of cosines as             
               
 . Quaternions of course require half angles, which are 
typically avoided at all costs due to the square root and the determination of the sine. But due 
to the nature of the cross product, the sign is constantly positive, and the cosine value is a 
simple fraction. The two half angles are    
 
         
 
     
   and    
 
         
 
     
  . 
For a vector rotation, the quaternion operator is: 
  
 
 
 
 
 
 
 
 
 
 
   
   
         
   
   
         
 
    
  
 
 
 
 
 
 
 
 
 
 
 
 

28 
 
 
As a first test, suppose we want to rotate the gradient vector obtained earlier,          
to some vector       . Take a point on Plane 1 that lies along the gradient vector, so that the 
rotated point is not only in a form with x and y coordinates of 0, but also  the z coordinate is 
equal to the distance. Start by plugging in            into the plane and solving for t. From 
simple algebra,        and the coordinate is  
 
   
 
   
 
   . Due to the symbolism, 
Mathematica is the ideal software to use for computations of quaternions and other operations 
and this is applied to find that: 
 
  
 
 
 
 
 
 
 
   
   
         
   
   
         
 
    
  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
  
 
  
 
  
  
 
 
 
 
 
 
 
 
 
 
 
    
   
         
  
   
         
 
    
  
 
 
 
 
 
 
 
 
=
 
 
 
  
 
  
 
  
 
 
 
 
From the result the following can be determined: 
1. The x and y coordinates are 0 
2. The value of the z coordinate is      
3. The equation of the new plane is –        
 
All these statements are desired and agree with what is expected, especially considering that one can 
show the distance from the origin to both Plane 1 and 2 is   .  
 
For any point on Plane 1, it can be rotated to a unique point on Plane 2. This is important for 
two reasons. First, due to the dependence of variable z on x and y, z can be expressed in terms of x and 
y. Second, the uniqueness guarantees that for each x and y (and determined z value) on Plane 1, there 
exist only one x’ and y’ value on Plane 2 (z’ is expected to be     ). For these reason, the algebraic 
curve (this case a conic section) is preserved. The main reason why the projection stated earlier fails to 

29 
 
identify equivalence is due to the idea of uniqueness. In the example of the coin and its shadow, the 
coin is rotated until it is completely vertical, producing a slit shaped shadow. Each point of the shadow 
represents a vertical piece of the coin from directly above. In other words, the point of the shadow is 
not unique. The method of projecting curve fails for other reasons, but is already shown to not be a valid 
proof method.  
 
Solving the equation of Plane 1, the coordinates are       
       
 
 . Taking the quaternion 
product: 
 
 
 
 
 
 
 
   
   
         
   
   
         
 
    
  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
       
 
 
 
 
 
 
 
 
 
 
 
 
 
    
   
         
  
   
         
 
    
  
 
 
 
 
 
 
 
 
= 
  
  
  
 
  
where 
                                                       
         
 
                                                       
         
 
     
  
With a great sigh of relief, the z’ component is exactly the desired value of 
  
 . Note that the z’ 
value can be negative and is only due to the set up of the cross product. In the end, the sign 
does not matter as long as it is constant, as it is equal to the previous z’ value.  In order to 
rotate coordinates from Plane 1 to Plane 2, x and y must be expressed in terms of x’ and y’ 
instead of vice versa. This is achieved by doing the following linear algebra: 
   
         
      
      
       
            
         

30 
 
 
    
          
        
        
          
           
                  
  
  
   
      
        
        
        
          
        
 
Taking the necessary products results in: 
         
                  
            
   
         
                  
            
   
 
Now that the transformation of any point from Plane 1 to Plane 2 can be executed, there is only 
one piece of the puzzle missing; the actual intersection of the double cone and Plane 1. Letting the 
double cone be represented by            and recalling Plane 1 is             . 
Although one can perform substitution by hand, the Groebner Basis can be taken to make life easier. 
Either way, if the variable z is eliminated the resulting generator is                     
                 . Note that by the Extension Theorem, all partial solutions of a, b, and c 
extend, by which any value of a, b, and c are acceptable. By substituting the above expression and 
simplifying the expression (including eliminating d), and replacing x’ and y’ with u and v for clarity, the 
following is acquired: 
                                                                 
                                                
 
Finally, the long pursued equation is calculated and simplified into such a simple equation.  The 
common algebraic definition of a conic section is an equation in the form of                
      . As you can see from above, this is true. The connection between the geometric and algebra 
representation is established. To determine which conic the above produces, the determinant, 

31 
 
      , is calculated. It is an ellipse if it is less than 0, a hyperbola if it is greater than 0, and a 
parabola if it is equal to 0.  The discriminant is given below in a simple form: 
                           
 
To test the derived equation, let us give some values of a, b, and c into 
derived equation and compare the results to the graph of the intersection of the 
plane and double cone. The first case is when            . This produces 
the equation,            , or a circle of radius 1. As shown to the right, 
this matches well with the intersection graph. This makes sense as the plane is 
completely horizontal and z is simply replaced by a value of -1. 
 
 
 
 
 
How about            ? This time the equation is         , a 
hyperbole. Once again, the graph below agrees with conic equation. This time, y is 
a constant -1 and a vertical plane is produced. 
 
 
 
 
 
 
 
What about producing a parabola? In order to have a single vertex, the 
plane must be parallel to the slant of the cone.  Taking the gradient and setting it 
to the set, a possible value             is obtained. Once again, the graph 

32 
 
agrees as the equation is           . Notice that the graph is only a parabola if          
 
 
 
Let us take a random set of values for a, b, and c, such as 
            . The corresponding conic is  
                                            
The discriminant is 43897460, which is much greater than 0 and therefore 
a hyperbola.  
 
 
 
 
 
This concludes the proof of conic sections through quaternions.  The entire basis of the proof 
was the ability to rotate one plane onto another by calculating the rotation axis and angle. Because the 
rotation axis is either a known or desired parameter, quaternion offers the most straightforward 
method to many applications in comparison to DCM and Euler Angles. As shown, there was not a single 
“singularity” allowing the proof to be true for all planes (degenerate cases require a simple limit). 
Another benefit was how simple the quaternion operator that completely eliminated the need for any 
trigonometric functions. This is most useful for computational purposes of many incremental rotations.  
 
In the case of engineering, quaternions are ideal for attitude determination. By use of sensors 
(at least two), the attitude of a spin stabilized craft can be compared to the expected orientation as 
determined by quaternions, given the rotation axis and angular rate.   
 
An example is if a satellite is spinning at 10 rad/s. Sensor 1 measures [0.500, 0.500, .707] before 
and [0.200, 0.600, 0.775] after, and the axis of rotation is [0.258, 0.413 ,0.873]. The difference between 
the time of measurements is 0.1 seconds. What is the expected orientation of sensor 1 and is this close 

33 
 
to the measured result?  It is easily calculated that the angle of rotation is 1 rad. By plugging the axis and 
angle of rotation into the appropiate Matlab script, the expected orientation is [0.2591,   -0.4129,    
0.8731]. The values are similar, but are still significantly different suggesting that a slight disturbance 
affected the motion of the spacecraft.  
 
Overall, quaternions are applicable to any situation that involves rotations or orientation. Just 
remember that different situations sometimes require a specific method to analyze rotations, such as 
the direction cosine matrix or Euler angles. An example is the use of the Euler angles in the orientation 
of aircraft. As shown, it is possible to translate values from one method to another. This allows a 
combination of the methods described to be used if necessary. Either way, the topics covered allows a 
multitude of engineering as well as mathematical situations to be solved. 
 
 
 
 

34 
 
Works Cited 
 
C o h e n ,  F a v i f .  P r e c a l c u l u s :  W i t h  U n i t - C i r c l e  T r i g o n o m e t r y .  4 t h .  B e l m o n t ,  C A :  B r o o k s / C o l e ,  
2 0 0 6 .  8 8 0 - 8 5 .  P r i n t .  
 
K u i p e r s ,  J a c k  B .  Q u a t e r n i o n s  a n d  R o t a t i o n  S e q u e n c e s .  P r i n c e t o n ,  N J :  P r i n c e t o n  U n i v e r s i t y  
P r e s s ,  1 9 9 9 .  P r i n t .  
 
 

35 
 
Appendices 
 
Appendix 1 
1a 
 
      
      
 
       
      
 
 
 
 
           
 
      
            
 
       
            
      
       
        
 
      
      
 
       
      
 
 
 
 
                                     
 
1b 
 
      
      
 
       
      
 
 
 
 
   
      
      
 
       
      
 
 
 
 
 
  
                            
                           
 
                             
                            
 
 
 
 
 
  
        
        
 
         
        
 
 
 
 
  
 
 
 

36 
 
Appendix 2 
Aerospace Sequence Script 
clc 
  
psi = pi/4; 
theta = pi/4; 
phi = pi/4; 
  
%  
% psi = rand()*pi; 
% theta = rand()*pi; 
% phi = rand()*pi; 
  
rz = [ cos(psi)    sin(psi)    0     ;... 
      -sin(psi)    cos(psi)    0     ;... 
          0          0         1     ;   ]; 
       
ry = [ cos(theta)    0    -sin(theta);... 
          0          1         0     ;... 
       sin(theta)    0     cos(theta);   ]; 
    
rx = [    1          0         0     ;... 
          0       cos(phi)  sin(phi) ;... 
          0      -sin(phi)  cos(phi) ;   ]; 
       
A = rx*ry*rz 
  
 
 
 
 
 
 
 
 
 
 

37 
 
Appendix 3 
Heading, Bank, and Elevation Angles from Rotation Matrix Script 
 
  
% Matrix A is assumed to be already stored in the variables. 
  
theta = asin(-A(1,3)); 
psi = atan(A(1,2)/A(1,1)); 
phi = atan(A(2,3)/A(3,3)); 
  
if A(1,1) < 0 
    psi = psi + pi; 
end 
  
if A(3,3) < 0 
    phi = phi + pi; 
end 
  
C = [                              cos(psi)*cos(theta)                              
cos(theta)*sin(psi)         -sin(theta); 
 cos(psi)*sin(phi)*sin(theta) - cos(phi)*sin(psi) cos(psi)*cos(phi) + 
sin(psi)*sin(phi)*sin(theta)      cos(theta)*sin(phi); 
 sin(psi)*sin(phi) + cos(phi)*cos(psi)*sin(theta) 
cos(phi)*sin(psi)*sin(theta) - cos(psi)*sin(phi)      cos(phi)*cos(theta);]; 
  
D = C - A; 
  
if sum(sum(D)) < 0.0001 
    theta 
    psi 
    phi 
else 
    disp('matrix A is not a valid rotation matrix'); 
end 
  
  
 
 
 
 

38 
 
Appendix 4 
Proof of the Existence of a Rotation Axis 
 
Let       –     = x 
 
Knowing that                          and                       (A’ is the 
inverse of A): 
 
 
 
      –                             
         –                –                –         
       –          
 
 
Because A’ represents another rotation, for example rotation B, x and –x should be 
indistinguishable: 
           
      –                  –     
 
 

39 
 
Appendix 5 
Axis of Rotation Script 
% rot_init 
  
B = A - eye(3); 
  
if B == [0 0 0; 0 0 0; 0 0 0;] 
    error('No rotation around origin') 
     
elseif (B(3,1) == 0) & (B(3,2) == 0) & (B(3,3) == 0) & (B(2,3) == 0) & 
(B(1,3) == 0) 
  v = [0; 0; 1;] 
return; 
     
elseif (B(2,1) == 0) & (B(3,2) == 0) & (B(2,3) == 0) & (B(2,2) == 0) & 
(B(1,2) == 0) 
    v = [0; 1; 0;] 
return; 
  
elseif (B(1,1) == 0) & (B(1,2) == 0) & (B(1,3) == 0) & (B(2,1) == 0) & 
(B(3,1) == 0) 
    v = [1; 0; 0;] 
return; 
end 
  
     
% Note that det(B) = 0 only for a rotational matrix 
  
Bcx = [B(2,2) B(2,3); B(3,2) B(3,3)]; 
Bcy = [B(1,1) B(1,3); B(3,1) B(3,3)]; 
Bcz = [B(1,1) B(1,2); B(2,1) B(2,2)]; 
  
if det(Bcx) ~= 0 
     
By = [-B(2,1) B(2,3); -B(3,1) B(3,3)]; 
Bz = [B(2,2) -B(2,1); B(3,2) -B(3,1)];     
  
vx = 1; 
vy = det(By)/det(Bcx); 
vz = det(Bz)/det(Bcx); 
  
elseif det(Bcy) ~= 0 
     
Bx = [-B(1,2) B(1,3); -B(3,2) B(3,3)]; 
Bz = [B(1,1) -B(1,2); B(3,1) -B(3,2)];     
  
vx = det(Bx)/det(Bcy); 
vy = 1; 
vz = det(Bz)/det(Bcy); 

40 
 
  
elseif det(Bcz) ~= 0 
     
Bx = [-B(1,3) B(1,2); -B(2,3) B(2,2)]; 
By = [B(1,1) -B(1,3); B(2,1) -B(2,3)];     
  
vx = det(Bx)/det(Bcz); 
vy = det(By)/det(Bcz); 
vz = 1; 
  
end 
  
v = [vx; vy; vz;]; 
v = v/norm(v); 
  
if vx ~= 0 
    v = sign(vx)*v 
elseif vy ~= 0 
    v = sign(vy)*v 
else 
    v = sign(vz)*v 
end 
  
 
 
 

41 
 
Appendix 6 
Angle of Rotation Script 
axis_rot 
  
if vz ~= 0 
    rx = 1; 
    ry = 1; 
    rz = -(vx + vy)/vz; 
elseif vy ~= 0 
    rx = 1; 
    rz = 1; 
    ry = -(vx + vz)/vy; 
elseif vx ~= 0 
    ry = 1; 
    rz = 1; 
    rx = -(vy + vz)/vx; 
else 
    error('No rotation around origin'); 
end 
  
r = [rx;ry;rz]; 
r = r/norm(r); 
s = A*r; 
  
ang = acos(dot(r,s));  
  
% Since the cos(a) = cos(-a), the direction is determined by 
% the right hand rule about the axis of rotation 
  
  
d = -1*cross(r,s);  % Note the  pt and frame 
                    % rotations are opposite 
                     
  
if dot(d,v) < 0 
    ang = -1*ang; 
end 
ang 
 
 

42 
 
Appendix 7 
Axis and Angle to Matrix Script 
% Determines rotation matrix A from axis of rotation v and angle ang 
  
clc; 
  
v = input('Enter axis of rotation [vx;vy;vz;] \n'); 
ang = input('Enter angle of rotation (-pi,pi) \n'); 
  
v = v/norm(v); 
  
vx = v(1); 
vy = v(2); 
vz = v(3); 
  
if v == [1;0;0;] | v == [-1;0;0;] 
    A  = [    1          0         0     ;... 
          0       cos(vx*ang)  sin(vx*ang) ;... 
          0      -sin(vx*ang)  cos(vx*ang) ;   ] 
    return; 
elseif v == [0;1;0] | v == [0;-1;0;] 
    A = [ cos(vy*ang)    0    -sin(vy*ang);... 
          0          1         0     ;... 
       sin(vy*ang)    0     cos(vy*ang);   ] 
   return; 
elseif v == [0;0;1;] | v == [0;0;-1;] 
    A  = [ cos(vz*ang)    sin(vz*ang)    0     ;... 
      -sin(vz*ang)    cos(vz*ang)    0     ;... 
          0          0         1     ;   ] 
    return; 
end 
  
  
if vz ~= 0 
    r1x = rand(); 
    r1y = rand(); 
    r1z = -(r1x*vx + r1y*vy)/vz; 
     
    r2x = rand(); 
    r2y = rand(); 
    r2z = -(r2x*vx + r2y*vy)/vz; 
     
     
elseif vy ~= 0 
    r1x = rand(); 
    r1z = rand(); 
    r1y = -(r1x*vx + r1z*vz)/vy; 
     
    r2x = rand(); 
    r2z = rand(); 

43 
 
    r2y = -(r2x*vx + r2z*vz)/vy; 
     
     
elseif vx ~= 0 
    r1y = rand(); 
    r1z = rand(); 
    r1x = -(r1y*vy + r1z*vz)/vx; 
     
    r2y = rand(); 
    r2z = rand(); 
    r2x = -(r2y*vy + r2z*vz)/vx; 
     
     
end 
  
r1 = [r1x;r1y;r1z]; 
r1 = r1/norm(r1); 
r1x = r1(1); 
r1y = r1(2); 
r1z = r1(3); 
  
r2 = [r2x;r2y;r2z]; 
r2 = r2/norm(r2); 
r2x = r2(1); 
r2y = r2(2); 
r2z = r2(3); 
  
% M * s = N 
  
if vx ~= 0 
M1 = [r1x r1y r1z; vx vy vz; 0 r1z -r1y;]; 
M2 = [r2x r2y r2z; vx vy vz; 0 r2z -r2y;]; 
N = [cos(ang); 0; vx*sin(ang);]; 
  
elseif vy ~= 0 
M1 = [r1x r1y r1z; vx vy vz; -r1z 0 r1x;]; 
M2 = [r2x r2y r2z; vx vy vz; -r2z 0 r2x;]; 
N = [cos(ang); 0; vy*sin(ang);]; 
  
elseif vz ~= 0 
M1 = [r1x r1y r1z; vx vy vz; r1y -r1x 0;]; 
M2 = [r2x r2y r2z; vx vy vz; r2y -r2x 0;]; 
N = [cos(ang); 0; vz*sin(ang);]; 
  
  
end 
  
s1 = inv(M1)*N; 
s2 = inv(M2)*N; 
  
R = [r1x r2x vx; r1y r2y vy; r1z r2z vz]; 
S = [s1(1) s2(1) vx; s1(2) s2(2) vy; s1(3) s2(3) vz;]; 
  
A = S*inv(R) 

44 
 
Appendix 8 
Consider the rotational matrix A multiplying a general set of coordinates as shown: 
 
 
 
 
 
 
 
 
 
 
 
   
 
 
 
   
        
        
        
  
In order for rotational matrix to be valid, one of the requirements is for the distance 
from the origin to be constant, as demonstrated (note that only the first squared term was 
partially expanded): 
 
                                            = 
                   
 
Usually, one would compare like terms, but it is difficult with the product of two 
variables. As we will see, those terms can be ignored, by increasing x by Δx: 
 
                                             
 
Taking the difference between the previous equation, and the one before, then dividing 
by Δx : 
                             
 
Since both x and   , are both independent variables, like terms can now be compared, 
resulting in           , as well as                                . Repeating 
for variables y and z, as well taking the transpose (since the transpose is also a valid rotation) 
reveals these two properties: 
 
1. The sum of the squares of any column or row is equal to one. 
2. The sum of the Hadamard (such as             ) of two columns or two rows is 
equal to zero. 
 
It is as if each column and row is a vector, and is orthogonal to another column/row. 
This becomes obvious when the rotation matrix is multiplied by the identity matrix, which not 
only results in the rotation matrix repeated but the coordinates of the unit vectors, lying on the 
original coordinate frame. 
 
 
 
 
 
 

45 
 
Appendix 9 
Taking a general vector (        ), and rotating it around the z axis through angle θ: 
Allowing, θ/2 to be α,                         ). Recall that for quaternions   and  ,  
qr = q0r0 – q · r +q0r +r0q + q x r 
Then                                                               
                , where the imaginary portion is left as a vector. Expressing the result as a 
quaternion,  
                                                           
      . 
 Finishing the rotation of     , the result is multiplied by                   . The real 
part is  
                                   , 
as expected. The imaginary part is a little more complicated, but expressed as: 
                     
                                                           
                                                       
Collecting the terms: 
                                  cos                 cos        
                                       
Using the double angle properties for sine and cosine, the equation is simplified to 
                                              
This should be well known by know as the rotation about the z axis. 
 

