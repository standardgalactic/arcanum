
Introduction to
Fuzzy Sets,
Fuzzy Logic,
and
Fuzzy Control
Systems


Introduction to
Fuzzy Sets,
Fuzzy Logic,
and
Fuzzy Control
Systems
Guanrong Chen
University of Houston
Houston, Texas
Trung Tat Pham
University of Houston, Clear Lake
Houston, Texas
Boca Raton   London   New York   Washington, D.C.
CRC Press

This book contains information obtained from authentic and highly regarded sources. Reprinted material
is quoted with permission, and sources are indicated. A wide variety of references are listed. Reasonable
efforts have been made to publish reliable data and information, but the author and the publisher cannot
assume responsibility for the validity of all materials or for the consequences of their use.
Neither this book nor any part may be reproduced or transmitted in any form or by any means, electronic
or mechanical, including photocopying, microﬁlming, and recording, or by any information storage or
retrieval system, without prior permission in writing from the publisher.
The consent of CRC Press LLC does not extend to copying for general distribution, for promotion, for
creating new works, or for resale. Speciﬁc permission must be obtained in writing from CRC Press LLC
for such copying.
Direct all inquiries to CRC Press LLC, 2000 N.W. Corporate Blvd., Boca Raton, Florida 33431.
Trademark Notice: Product or corporate names may be trademarks or registered trademarks, and are
used only for identiﬁcation and explanation, without intent to infringe.
© 2001 by CRC Press LLC
No claim to original U.S. Government works
International Standard Book Number 0-8493-1658-8
Library of Congress Card Number 00-045431
Printed in the United States of America  1  2  3  4  5  6  7  8  9  0
Printed on acid-free paper
Library of Congress Cataloging-in-Publication Data
Chen, G. (Guanrong)
Introduction to fuzzy sets, fuzzy logic, and fuzzy control systems / Guanrong Chen,
    Trung Tat Pham.
p.   cm.
Includes bibliographical references and index.
ISBN 0-8493-1658-8 (alk. paper)
  1. Soft computing. 2. Fuzzy systems. I. Pham, Trung Tat. II. Title.
QA76.9.S63 C48 2000
0063—dc21
00-045431

Preface
This textbook is an enlarged and enhanced version of the authors’ lecture
notes used for a graduate course in fuzzy sets, fuzzy logic, fuzzy systems, and 
fuzzy control theories. This course has been taught for seven years at the
University of Houston, with emphasis on fuzzy systems and fuzzy control,
regarding both basic mathematical theories and their potential engineering
applications.
The word “fuzzy” is perhaps no longer fuzzy to many engineers today.
Introduced in the earlier 1970s, fuzzy systems and fuzzy control theories as an 
emerging technology targeting industrial applications have added a promising
new dimension to the existing domain of conventional control systems
engineering. It is now a common belief that when a complex physical system
does not provide a set of differential or difference equations as a precise or
reasonably accurate mathematical model, particularly when the system
description requires certain human experience in linguistic terms, fuzzy
systems and fuzzy control theories have some salient features and
distinguishing merits over many other approaches. 
Fuzzy control methods and algorithms, including many specialized
software and hardware available on the market today, may be classified as one 
type of intelligent control. This is because fuzzy systems modeling, analysis,
and control incorporate a certain amount of human knowledge into its
components (fuzzy sets, fuzzy logic, and fuzzy rule base). Using human
expertise in system modeling and controller design is not only advantageous
but often necessary. Classical controller design has already incorporated
human skills and knowledge: for instance, what type of controller to use and
how to determine the controller structure and parameters largely depend on
the decision and preference of the designer, especially when multiple choices
are possible. The relatively new fuzzy control technology provides one more
choice for this consideration; it has the intention to be an alternative, rather
than a simple replacement, of the existing control techniques such as classical 
control and other intelligent control methods (e.g., neural networks, expert
systems, etc.). Together, they supply systems and control engineers with a
more complete toolbox to deal with the complex, dynamic, and uncertain real
world. Fuzzy control technology is one of the many tools in this toolbox that
is developed not only for elegant mathematical theories but, more importantly, 
for many practical problems with various technical challenges.
Compared with conventional approaches, fuzzy control utilizes more
information from domain experts and relies less on mathematical modeling
about a physical system. 
On the one hand, fuzzy control theory can be quite heuristic and somewhat 
ad hoc. This sometimes is preferable or even desirable, particularly when low-
cost and easy operations are required where mathematical rigor is not the main 
concern. There are many examples of this kind in industrial applications, for

Preface
which fuzzy sets and fuzzy logic are easy to use. Within this context,
determining a fuzzy set or a fuzzy rule base seems to be somewhat subjective, 
where human knowledge about the underlying physical system comes into
play. However, this may not be any more subjective than selecting a suitable
mathematical model in the deterministic control approach (“linear or
nonlinear?” “if linear, what’s the order or dimension and, yet, if nonlinear,
what kind of nonlinearity?” “what kind of optimality criterion to use?” “what
kind of norm for robustness measure?” etc.). It is also not much more
subjective than choosing a suitable distribution function in the stochastic
control approach (“Gaussian or non-Gaussian noise?” “white noise or just
unknown but bounded uncertainty?” and the like). Although some of these
questions can be answered on the basis of statistical analysis of available
empirical data in classical control systems, the same is true for establishing an 
initial fuzzy rule base in fuzzy control systems.
On the other hand, fuzzy control theory can be rigorous and fuzzy
controllers can have precise and analytic structures with guaranteed closed-
loop system stability and some performance specifications, if such
characteristics are intended. In this direction, the ultimate objective of the
current fuzzy systems and fuzzy control research is appealing: the fuzzy
control system technology is moving toward a solid foundation as part of the
modern control theory. The trend of a rigorous approach to fuzzy control,
starting from the mid-1980s, has produced many exciting and promising
results. For instance, some analytic structures of fuzzy controllers, particularly 
fuzzy PID controllers, and their relationship with corresponding conventional
controllers are much better understood today. Numerous analysis and design
methods have been developed, which have turned the earlier "art" of building
a working fuzzy controller to the "science" of systematic design. As a
consequence, the existing analytical control theory has made the fuzzy control 
systems practice safer, more efficient, and more cost-effective.
This textbook represents a continuing effort in the pursuit of analytic
theory and rigorous design for fuzzy control systems. More specifically, the
basic notion of fuzzy mathematics (Zadeh fuzzy set theory, fuzzy membership 
functions, interval and fuzzy number arithmetic operations) is first studied in
this text. Consequently, in a comparison with the classical two-valued logic,
the fundamental concept of fuzzy logic is introduced.  The ultimate goal of
this course is to develop an elementary practical theory for automatic control
of uncertain or imperfectly modeled systems encountered in engineering
applications using fuzzy mathematics and fuzzy logic, thereby offering an
alternative approach to control systems design and analysis under irregular
conditions, for which conventional control systems theory may not be able to
manage or well perform. Therefore, this part of the text on fuzzy mathematics 
and fuzzy logic is followed by the basic fuzzy systems theory (Mamdani and
Takagi-Sugeno modeling, along with parameter estimation and system
identification) and fuzzy control theory. Here, fuzzy control theory is
introduced, first based on the developed fuzzy system modeling, along with
the concepts of controllability, observability, and stability, and then based on

Preface
the well-known classical Proportional-Integral-Derivative (PID) controllers
theory and design methods. In particular, fuzzy PID controllers are studied in
greater detail. These controllers have precise analytic structures, with rigorous
analysis and guaranteed closed-loop system stability; they are comparable,
and also compatible, with the classical PID controllers. To that end, fuzzy
adaptive and optimal control issues are also discussed, albeit only briefly,
followed by some potential industrial application examples.
The primary purpose of this course is to provide some rather systematic
training for systems and control majors, both senior undergraduate and first-
year graduate students, and to familiarize them with some fundamental
mathematical theory and design methodology in fuzzy control systems.  We
have tried to make this book self-contained, so that no preliminary knowledge 
of fuzzy mathematics and fuzzy control systems theory is needed to
understand the material presented in this textbook.  Although we assume that
the students are aware of the classical set theory, two-valued logic, and
elementary classical control systems theory, the fundamentals of these
subjects are briefly reviewed throughout for their convenience.
Some familiar terminology in the field of fuzzy control systems has become
quite standard today. Therefore, as a textbook written in a classical style, we
have taken the liberty to omit some personal and specialized names such as
“TS fuzzy model” and “t-norm.” One reason is that too many names have to
be given to too many items in doing so. Nevertheless, closely related
references are given at the end of each chapter for crediting and for the
reader’s further reading. Also, we have indicated by * in the Table of Contents
those relatively advanced materials that are beyond the basic scope of the
present text; they are used for reader's further studies of the subject.
It is our hope that students will benefit from this textbook in obtaining
some relatively comprehensive knowledge about fuzzy control systems theory
which, together with their mathematical foundations, can in a way better
prepare them for the rapidly developing applied control technologies in
modern industry.
The Authors


Table of Contents
1.
Fuzzy Set Theory................................................................................
1
I. Classical Set Theory....................................................................
1
A. Fundamental Concepts...........................................................
1
B. Elementary Measure Theory of Sets......................................
3
II. Fuzzy Set Theory ........................................................................
5
III. Interval Arithmetic ......................................................................
9
A. Fundamental Concepts...........................................................
9
B. Interval Arithmetic.................................................................
12
C. Algebraic Properties of Interval Arithmetic...........................
13
D. Measure Theory of Intervals..................................................
17
E. Properties of the Width of an Interval....................................
20
F. Interval Evaluation.................................................................
22
G. Interval Matrix Operations.....................................................
25
H. Interval Matrix Equations and Interval Matrix Inversion ......
30
IV. Operations on Fuzzy Sets............................................................
37
A. Fuzzy Subsets ........................................................................
37
B. Fuzzy Numbers and Their Arithmetic....................................
42
Problems.............................................................................................
54
References ..........................................................................................
56
2.
Fuzzy Logic Theory ...........................................................................
57
I. Classical Logic Theory................................................................
58
A. Fundamental Concepts...........................................................
58
B. Logical Functions of the Two-Valued Logic.........................
61
II. The Boolean Algebra...................................................................
62
A. Basic Operations of the Boolean Algebra..............................
62
B. Basic Properties of the Boolean Algebra ...............................
63
III. Multi-Valued Logic.....................................................................
65
A. Three-Valued Logic...............................................................
65
B. n-Valued Logic ......................................................................
65
IV. Fuzzy Logic and Approximate Reasoning ..................................
66
V. Fuzzy Relations...........................................................................
69
VI. Fuzzy Logic Rule Base................................................................
75
A. Fuzzy IF-THEN Rules...........................................................
75
B. Fuzzy Logic Rule Base..........................................................
77
C. Interpretation of Fuzzy IF-THEN Rules ................................
80

D. Evaluation of Fuzzy IF-THEN Rules.....................................
82
Problems.............................................................................................
84
References ..........................................................................................
87
3.
Fuzzy System Modeling.....................................................................
89
I. Modeling of Static Fuzzy Systems..............................................
90
A. Fuzzy Logic Description of Input-Output Relations..............
90
B. Parameters Identification in Static Fuzzy Modeling..............
96
II. Discrete-Time Dynamic Fuzzy Systems and Their Stability
Analysis....................................................................................... 102
A. Dynamic Fuzzy Systems without Control.............................. 103
B. Dynamic Fuzzy Systems with Control................................... 109
III. Modeling of Continuous-Time Dynamic Fuzzy Control 
Systems ....................................................................................... 114
A. Fuzzy Interval Partitioning .................................................... 115
B. Dynamic Fuzzy System Modeling......................................... 119
IV. Stability Analysis of Continuous-Time Dynamic Fuzzy 
Systems ....................................................................................... 124
V. Controllability Analysis of Continuous-Time Dynamic
Fuzzy Systems............................................................................. 129
VI. Analysis of Nonlinear Continuous-Time Dynamic Fuzzy
Systems ....................................................................................... 133
Problems............................................................................................. 136
References .......................................................................................... 138
4.
Fuzzy Control Systems....................................................................... 139
I. Classical Programmable Logic Control....................................... 140
II. Fuzzy Logic Control (I): A General Model-Free Approach........ 145
A. A Closed-Loop Set-Point Tracking System........................... 147
B. Design Principle of Fuzzy Logic Controllers......................... 150
C. Examples of Model-Free Fuzzy Controller Design ............... 160
III. Fuzzy Logic Control (II): A General Model-Based Approach.... 170
Problems............................................................................................. 178
References .......................................................................................... 182
5.
Fuzzy PID Controllers........................................................................ 183
I. Conventional PID Controllers: Design........................................ 183

II. Fuzzy PID Controllers Design .................................................... 192
A. Fuzzy PD Controller .............................................................. 193
B. Fuzzy PI Controller................................................................ 207
C. Fuzzy PI+D Controller........................................................... 209
III. Fuzzy PID Controllers: Stability Analysis .................................. 223
A. BIBO Stability and the Small Gain Theorem ........................ 223
B. BIBO Stability of Fuzzy PD Control Systems....................... 226
C. BIBO Stability of Fuzzy PI Control Systems ........................ 229
D. BIBO Stability of Fuzzy PI+D Control Systems ................... 231
E. Graphical Stability Analysis of Fuzzy PID Control
Systems.................................................................................. 232
Problems............................................................................................. 236
References .......................................................................................... 237
6.
Adaptive Fuzzy Control ..................................................................... 239
I. Fundamental Adaptive Fuzzy Control Concept .......................... 240
A. Operational Concepts............................................................. 240
B. System Parameterization........................................................ 242
C. Adjusting Mechanism............................................................ 243
D. Guidelines for Selecting an Adaptive Fuzzy Controller ........ 245
II. Gain Scheduling.......................................................................... 246
III. Fuzzy Self-Tuning Regulator ...................................................... 252
IV. Model Reference Adaptive Fuzzy Systems................................. 255
V. Dual Control................................................................................ 257
VI. Sub-Optimal Fuzzy Control ........................................................ 258
A. SISO Control Systems ........................................................... 259
B. MIMO Control Systems......................................................... 260
Problems............................................................................................. 266
References .......................................................................................... 269
7.
Some Applications of Fuzzy Control ................................................. 271
I. Health Monitoring Fuzzy Diagnostic Systems............................ 271
A. Fuzzy Rule-Based Health Monitoring Expert Systems.......... 272
B. Computer Simulations ........................................................... 276
C. Numerical Results.................................................................. 277
II. Fuzzy Control of Image Sharpness for Autofocus Cameras........ 281
A. Basic Image Processing Techniques...................................... 282
B. Fuzzy Control Model............................................................. 283
C. Computer Simulation Results ................................................ 286

III. Fuzzy Control for Servo Mechanic Systems ............................... 291
A. Fuzzy Modeling of a Servo Mechanic System ...................... 292
B. Fuzzy Controller of a Servo Mechanic System...................... 294
C. Computer Simulations and Numerical Results ...................... 295
IV. Fuzzy PID Controllers for Servo Mechanic Systems.................. 300
A. Fuzzy PID Controller of a Servo Mechanic System .............. 300
B. Adaptive Fuzzy Controller of a Servo Mechanic System...... 301
V. Fuzzy Controller for Robotic Manipulator.................................. 302
A. Fuzzy Modeling of a 2-Link Planar Manipulator................... 304
B. Fuzzy Controller of a 2-Link Planar Manipulator.................. 307
C. Numerical Simulations........................................................... 307
Problems............................................................................................. 311
References .......................................................................................... 313
Index................................................................................................... 315

CHAPTER 1
Fuzzy Set Theory
The classical set theory is built on the fundamental concept of  “set” of
which an individual is either a member or not a member.  A sharp, crisp, and
unambiguous distinction exists between a member and a nonmember for any
well-defined “set” of entities in this theory, and there is a very precise and
clear boundary to indicate if an entity belongs to the set.  In other words, when 
one asks the question “Is this entity a member of that set?”  The answer is
either “yes” or “no.”  This is true for both the deterministic and the stochastic 
cases.  In probability and statistics, one may ask a question like “What is the
probability of this entity being a member of that set?”  In this case, although
an answer could be like “The probability for this entity to be a member of that 
set is 90%,” the final outcome (i.e., conclusion) is still either “it is” or “it is
not” a member of the set.  The chance for one to make a correct prediction as 
“it is a member of the set” is 90%, which does not mean that it has 90%
membership in the set and in the meantime it possesses 10% non-membership.
Namely, in the classical set theory, it is not allowed that an element is in a set 
and not in the set at the same time.  Thus, many real-world application
problems cannot be described and handled by the classical set theory,
including all those involving elements with only partial membership of a set.
On the contrary, fuzzy set theory accepts partial memberships, and, therefore,
in a sense generalizes the classical set theory to some extent.
In order to introduce the concept of fuzzy sets, we first review the
elementary set theory of classical mathematics.  It will be seen that the fuzzy
set theory is a very natural extension of the classical set theory, and is also a
rigorous mathematical notion.
I. CLASSICAL SET THEORY
A. Fundamental Concepts
Let S be a nonempty set, called the universe set below, consisting of all the 
possible elements of concern in a particular context.  Each of these elements is 
called a member, or an element, of S.  A union of several (finite or infinite)
members of S is called a subset of S.  To indicate that a member s of S
belongs to a subset S of S, we write
s ∈S.
If s is not a member of S, we write
s ∉S.
To indicate that S is a subset of S, we write
S ⊂S.

2
Fuzzy Set Theory •• 1
Usually, this notation implies that S is a strictly proper subset of S in the sense 
that there is at least one member x ∈S but x ∉S.  If it can be either S ⊂S or S
= S, we write
S ⊆S.
An empty subset is denoted by ∅.  A subset of certain members that have
properties P1, ... , Pn will be denoted by a capital letter, say A, as
A = { a | a has properties P1, ..., Pn }.
An important and frequently used universe set is the n-dimensional
Euclidean space Rn.  A subset A ⊆ Rn that is said to be convex if
x = 
⎥
⎥
⎥
⎦
⎤
⎢
⎢
⎢
⎣
⎡
n
x
x
M
1
∈A
and
y = 
⎥
⎥
⎥
⎦
⎤
⎢
⎢
⎢
⎣
⎡
n
y
y
M
1
∈A
implies
λx + (1 −λ)y ∈A
for any λ ∈ [0,1].
Let A and B be two subsets.  If every member of A is also a member of B,
i.e., if a ∈A implies a ∈B, then A is said to be a subset of B.  We write A ⊂B.
If both A ⊂B and B ⊂A are true, then they are equal, for which we write A = 
B.  If it can be either A ⊂B or A = B, then we write A ⊆B.  Therefore, A ⊂B
is equivalent to both A ⊆B and A ≠B.
The difference of two subsets A and B is defined by
A −B = { c | c ∈A and c ∉B }.
In particular, if A = S is the universe set, then S −B is called the
complement of B, and is denoted by B , i.e.,
B  = S −B.
Obviously,
B  = B,
S  = ∅,
and
∅ = S.
Let r ∈ R be a real number and A be a subset of R.  Then the multiplication of 
r and A is defined to be
r A = { r a | a ∈A }.
The union of two subsets A and B is defined by
A ∪B = B ∪A = { c | c ∈A or c ∈B }.
Thus, we always have
A ∪S = S,
A ∪∅ = A,
and
A ∪A  = S.
The intersection of two subsets A and B is defined by
A ∩B = B ∩A = { c | c ∈A and c ∈B }. 
Obviously,
A ∩S = A,
A ∩∅ = ∅,
and
A ∩A  = ∅.
Two subsets A and B are said to be disjoint if
A ∩B = ∅.
Basic properties of the classical set theory are summarized in Table 1.1, where 
A ⊆S and B ⊆S.

1 •• Fuzzy Set Theory
3
In order to simplify the notation throughout the rest of the book, if the
universe set S has been specified or is not of concern, we simply call any of its
subsets a set.  Thus, we can consider two sets A and B in S, and if A ⊂B then 
A is called a subset of B.
For any set A, the characteristic function of A is defined by
XA(x) = 
⎩
⎨
⎧
∉
∈
.
A
x
,
A
x
if
0
if
1
It is easy to verify that for any two sets A and B in the universe set S and for
any element x ∈S, we have
XA∪B(x) = max{ XA(x), XB(x) },
XA∩B(x) = min{ XA(x), XB(x) },
A
X
(x) = 1 −XA(x).
B*.Elementary Measure Theory of Sets
In this subsection, we briefly review the basic notion of measure in the
classical set theory which, although may not be needed throughout this book,
will be useful in further studies of some advanced fuzzy mathematics.
Table 1.1  Properties of Classical Set Operations
Involutive law
A  = A
Commutative law
A ∪B = B ∪A
A ∩B = B ∩A
Associative law
( A ∪B ) ∪C = A ∪ ( B ∪C )
( A ∩B ) ∩C = A ∩ ( B ∩C )
Distributive law
A ∩ ( B ∪C ) = ( A ∩B ) ∪ ( A ∩C )
A ∪ ( B ∩C ) = ( A ∪B ) ∩ ( A ∪C )
A ∪A = A
A ∩A = A
A ∪ ( A ∩B ) = A
A ∩ ( A ∪B ) = A
A ∪ ( A ∩B ) = A ∪B
A ∩ ( A ∪B ) = A ∩B
A ∪S = S
A ∩∅ = ∅
A ∪∅ = A
A ∩S = A
A ∩A  = ∅
A ∪A  = S
DeMorgan’s law
B
A∩
 = A ∪B
B
A∪
 = A ∩B

4
Fuzzy Set Theory •• 1
Let S be the universe set and A a nonempty family of subsets of S.  Let,
moreover,
µ:
A → [0,∞]
be a nonnegative real-valued function defined on (subsets of) A, which may
assume the value ∞.
A set B in A, denoted as an element of A by B ∈A, is called a null set with 
respect to µ if µ(B) = 0, where 
µ(B) = { µ(b) | b ∈B }.
µ is said to be additive if
µ( U
n
i 1
=
Ai ) = U
n
i 1
=
µ(Ai)
for any finite collection {A1,...,An} of sets in A satisfying both U
n
i
iA
1
=
∈A and 
Ai ∩Aj = ∅, i ≠j, i,j=1,...,n. µ is said to be countably additive if n = ∞ in the 
above.  Moreover, µ is said to be subtractive if
A ∈A,
B ∈A,
A ⊆B,
B −A ∈A,
and
µ(B) < ∞
together imply
µ(B −A) = µ(B) −µ(A).
It can be verified, however, that if µ is additive then it is also subtractive.
Now, µ is called a measure on A if it is countably additive and there is a
nonempty set C ∈A such that µ(C) < ∞.
For example, if we define a function µ by µ(A) = 0 for all A ∈A, then µ is 
a measure on A, which is called the trivial measure.  As the second example,
suppose that A contains at least one finite set and define µ by µ(A) = the
number of elements belonging to A.  Then µ is a measure on A, which is
called the natural measure.
A measure µ on A has the following two simple properties: (i) µ(∅) = 0,
and (ii) µ is finitely additive.
Let µ be a measure on A.  Then a set A ∈A is said to have a finite measure
if µ(A) < ∞, and have a σ-finite measure if there is a sequence {Ai} of sets in
A such that
A ⊆U
∞
=1
i
iA
and
µ(Ai) < ∞
for all i = 1,2,….
µ is finite (resp., σ-finite) on A if every set in A has a finite (resp., σ-finite)
measure.
A measure µ on A is said to be complete if
B ∈A ,
A ⊆B ,
and
µ(B) = 0
together imply µ(A) = 0. µ is said to be monotone if
A ∈A ,
B ∈A , 
and
A ⊆B
together imply
µ(A) ≤µ(B).
µ is said to be subadditive if
µ(A) ≤µ(A1) + µ(A2)
for any A, A1, A2 ∈A with A = A1 ∪A2. µ is said to be finitely subadditive if

1 •• Fuzzy Set Theory
5
µ(A) ≤∑
=
µ
n
i
i )
A
1
(
for any finite collection {A,A1,...,An} of subsets in A satisfying A = U
n
i
iA
1
=
,
and µ is said to be countably subadditive if n = ∞ in the above.
It can be shown that if µ is countably subadditive and µ(∅) = 0, then it is 
also finitely subadditive.
Let A ∈A.  A measure µ on A is said to be continuous from below at A if
{Ai} ⊂A,
A1 ⊆A2 ⊆ ...,
and
→∞
ilim Ai = A
together imply
→∞
ilim µ(Ai) = µ(A),
and µ is said to be continuous from above at A if
{Ai} ⊂A,
A1 ⊇A2 ⊇ ...,
µ(A1) < ∞,
and
→∞
ilim Ai = A
together imply
→∞
ilim µ(Ai) = µ(A).
µ is continuous from below (resp., above) on A if and only if it is continuous
from below (resp., above) at every set A ∈A, and µ is said to be continuous if 
it is continuous both from below and from above (at A, or on A).
Let A1 and A2 be families of subsets of A such that A1 ⊆A2, and let µ1 and 
µ2 be measures on A1 and A2, respectively. µ2 is said to be an extension of µ1
if µ1(A) = µ2(A) for every A ∈A1.
For example, let A = (−∞,∞), A1 = { [a,b) | −∞< a < b < ∞ }, A2 =
family of all finite, disjoint unions of bounded intervals of the form [c,d), and 
a measure µ1 be defined on A1 by
µ1([a,b)) = b −a.
Then µ1 is countably additive and so is a finite measure on A1.  This µ1 can be 
extended to a finite measure µ2 on A2 by defining
µ2([a,b)) = µ1([a,b))
for all [a,b) ∈A1.
More generally, if f is a finite, nondecreasing, and left-continuous real-valued
function of a real variable, then
µf ([a,b)) := f(b) −f(a)
for all [a,b) ∈A1,
defines a finite measure on A1, and it can be extended to be a finite measure µ2
on A2.
II.
FUZZY SET THEORY
In Section I.A, we have defined the characteristic function XA of a set A by 
XA(x) = 
⎩
⎨
⎧
∉
∈
,
A
x
if
,
A
x
if
0
1
which is an indicator of members and nonmembers of the crisp set A.  In the
case that an element has only partial membership of the set, we need to

6
Fuzzy Set Theory •• 1
generalize this characteristic function to describe the membership grade of this 
element in the set: larger values denote higher degrees of the membership.
To give more motivation for this concept of partial membership, let us
consider the following examples.
Example 1.1. Let S be the set of all human beings, used as the universe
set, and let
Sf = { s ∈S | s is old }.
Then Sf is a “fuzzy subset” of S because the property “old” is not well defined 
and cannot be precisely measured:  given a person who is 40 year old, it is not 
clear if this person belongs to the set Sf.  Thus, to make the subset Sf well-
defined, we have to quantify the concept “old,” so as to characterize the subset 
Sf in a precise and rigorous way.
For the time being, let us say, we would like to describe the concept “old”
by the curve shown in Figure 1.1(a) using common sense, where the only
people who are considered to be “absolutely old” are those 120 years old or
older, and the only people who are considered to be “absolutely young” are
those newborns.  Meanwhile, all the other people are old as well as young,
depending on their actual ages.  For example, a person 40 years old is
considered to be “old” with “degree 0.5” and at the same time also “young”
with “degree 0.5” according to the measuring curve that we used.  We cannot
exclude this person from the set Sf described above, nor include him
completely.  Thus, the curve that we introduce in Figure 1.1(a) establishes a
mathematical measure for the “oldness” of a human being, and hence can be
used to define the partial membership of any person relative to the subset Sf
described above.  The curve shown in Figure 1.1(a), which is indeed a
generalization of the classical characteristic function XSf (it can be used to
conclude a person who either “is” or “is not” a member of the subset Sf), is
called a membership function associated with the subset Sf.
Of course, one may also use the piecewise linear membership function
shown in Figure 1.1(b) to describe the same concept of oldness for the same
subset Sf, depending on whichever is more meaningful and more convenient
in one’s concern, where both are reasonable and acceptable in common sense.
The reader may suggest many more good candidates for such a membership
function for the subset Sf described above.  There is yet no fixed, unique, and
universal rule or criterion for selecting a membership function for a particular
“fuzzy subset” in general: a correct and good membership function is
determined by the user based on his scientific knowledge, working
experience, and actual need for the particular application in question.  This
selection is more or less subjective, but the situation is just like in the classical 
probability theory and statistics where if one says “we assume that the noise is 
Gaussian and white,” what he uses to start with all the rigorous mathematics is 
a subjective hypothesis that may not be very true, simply because the noise in 
question may not be exactly Gaussian and may not be perfectly white.  Using
the same approach, we can say, “we assume that the membership function that 

1 •• Fuzzy Set Theory
7
describes the oldness is the one given in Figure 1.1(a),” to start with all the
rigorous mathematics in the rest of the investigation.
The fuzzy set theory is taking the same logical approach as what people
have been doing with the classical set theory: in the classical set theory, as
soon as the two-valued characteristic function has been defined and adopted,
rigorous mathematics follows; in the fuzzy set case, as soon as a multi-valued
characteristic function (the membership function) has been chosen and fixed, a 
rigorous mathematical theory can be fully developed.
Now, we return to the subset Sf introduced above.  Suppose that the
membership function associated with it, say the one shown in Figure 1.1(a),
has been chosen and fixed.  Then, this subset Sf  along with the membership
function used, which we will denote by µSf(s) with s ∈Sf, is called a fuzzy
subset of the universe set S.  A fuzzy subset thus consists of two components: 
a subset and a membership function associated with it.  This is different from
the classical set theory, where all sets and subsets share the same (and the
unique) membership function: the two-valued characteristic function
mentioned above.
Throughout this book, if no confusion would arise, we will simply call a
fuzzy subset a fuzzy set, keeping in mind that it has to be a subset of some
universe set and has to have a pre-described membership function associated
with it.
To familiarize this new concept, let us now discuss one more example.
Example 1.2. Let S be the (universe) set of all real numbers, and let
Sf = { s ∈S | s is positive and large }.
This subset, Sf, is not well-defined in the classical set theory because, although 
the statement “s is positive” is precise, the statement “s is large” is vague.
However, if we introduce a membership function that is reasonable and
meaningful for a particular application for the characterization or measure of
the property “large,” say the one shown in Figure 1.2 quantified by the
function
µSf(s) = 
⎩
⎨
⎧
>
−
≤
−
,
s
e
,
s
s
0
if
1
0
if
0
then the fuzzy subset Sf, associated with this membership function µSf(s), is
well defined.
Similarly, a membership function for the subset
40
80
120
age
1.0
0.5
0.8
0
40
80
120
age
1.0
0.5
0.8
0
Figure 1.1(a)  An example of 
Figure 1.1(b)  Another example
membership functions.
of membership functions.

8
Fuzzy Set Theory •• 1
f
S~  = { s ∈S |  |s| is small }
may be chosen to be the one shown in Figure 1.3, where the cutting edge E is 
determined by the user according to his concern in the application.
Other commonly used membership functions for fuzzy sets that are
convenient in various applications are shown in Figure 1.4, where we have
normalized their maximum value to be 1, as usual, since 1 = 100% describes a 
full membership and is convenient to use.
Obviously, a membership function is a nonnegative-valued function, which 
differs from the probability density functions in that the area under the curve
of a membership function need not be equal to unity (in fact, it can be any
value between 0 and ∞, including 0 and ∞).  Another distinction between the
fuzzy set theory and the classical one (actually, the entire theory of classical
mathematics) is that a member of a fuzzy set may assume two or more (even
conflicting) membership values.  For example, if we use the two membership
functions shown in Figure 1.5 to measure “positive and large” and “negative
and small,” respectively, then a member s = 0.1 has the first membership
value 0.095 and the second 0.08:  they do not sum up to 1.0 nor cancel out to 
be 0.  Moreover, the two concepts are conflicting: s is positive and in the
meantime negative, a situation just like someone is old and also is young,
which classical mathematics cannot accept.  Such a vague and conflicting
description of a fuzzy set is acceptable by the fuzzy mathematics, however,
which turns out to be very useful in many real-world applications.  More
importantly, the use of conflicting membership functions like this will not
cause any logical or mathematical problems in the consequence, provided that 
a correct approach is taken in the sequel.
s
1
µSf
(  )
s
0
R
µSf
(  ).
Figure 1.2
A membership function for a positive and large real number.
-E
E
1
µSf
( ).
~
R
0
Figure 1.3
A membership function for a real number of small magnitude.

1 •• Fuzzy Set Theory
9
III.
INTERVAL ARITHMETIC
In the last section, we introduced the concept of fuzzy (sub)sets, which
consists of two parts: a (sub)set defined in the classical sense and a
membership function defined on the (sub)set that is also defined in the
ordinary  sense.  In this section, we first study some fundamental properties
and operation rules pertaining to a special yet important kind of sets −
intervals − and then in the next section, we will study properties and
operations of membership functions defined on intervals.
A. Fundamental Concepts
Our concern here is the situation where the value of a member s of a set is 
uncertain.  We assume, however, that the information on the uncertain value
of s provides an acceptable range:
s ≤s ≤s ,
where [ s , s ] ⊂ R is called the interval of confidence about the values of s.
As a special case, when s = s , we have the certainty of confidence [ s , s ] = 
[s , s ] = s.  We mainly study closed intervals in this book; so an interval will
always mean a closed and bounded interval throughout, unless otherwise
indicated. In the two-dimensional case, an interval of confidence has a
1
1
1
1
1
1
Figure 1.4 Various shapes of commonly used membership functions.
1.0
-1
1
2
R
Figure 1.5 The real number s = 0.1 is both “positive large” and “negative
small” at the same time.

10
Fuzzy Set Theory •• 1
rectangular shape as shown in Figure 1.6, and is sometimes called the region
of confidence.
In the next subsection, we will introduce operational rules among intervals
of confidence, which are important and useful in their own right in regards to
engineering applications that are relative to intervals such as robust modeling, 
robust stability, and robust control.  To prepare for that, we first give the
following definitions.
Definition 1.1.
(a)
Equality:  Two intervals [ s1,
1s ] and [ s2,
2s ] are said to be equal:
[ s1,
1s ]  =  [ s2,
2s ]
if and only if s1 = s2 and 
1s  = 
2s .
(b)
Intersection:  The intersection of two intervals [ s1,
1s ] and [ s2,
2s ] is 
defined to be
[ s1,
1s ] ∩  [ s2,
2s ] = [ max{s1,s2} , min{
1s ,
2s } ]
and
[ s1,
1s ] ∩  [ s2,
2s ] = ∅
if and only if s1 >
2s  or s2 >
1s .
(c)
Union:  The union of two intervals [ s1,
1s ] and [ s2,
2s ] is defined to 
be
[ s1,
1s ] ∪  [ s2,
2s ] = [ min{s1,s2} , max{
1s ,
2s } ],
provided that [ s1,
1s ] ∩  [ s2,
2s ] ≠∅. Otherwise, it is undefined
(since the result is not an interval).
(d)
Inequality:  Interval [ s1,
1s ] is said to be less than (resp., greater
than) interval [ s2,
2s ], denoted by
[ s1,
1s ] <  [ s2,
2s ]
(resp., [ s1,
1s ] >  [ s2,
2s ] )
s
s
s
s
1
1
2
2
_
_
Figure 1.6
An interval of confidence in the two-dimensional case.

1 •• Fuzzy Set Theory
11
if and only if 
1s
< s2 (resp., s1 >
2s ).  Otherwise, they cannot be
compared.  Note that the relations ≤ and ≥ are not defined for
intervals.
(e)
Inclusion:  The interval [ s1,
1s ] is said to be included in [ s2,
2s ],
denoted by
[ s1,
1s ] ⊆ [ s2,
2s ]
if and only if s2 ≤s1 and 
1s
≤
2s .  This is equivalent to saying that
the interval [ s1,
1s ] is a subset or subinterval of [ s2,
2s ].
(f)
Width:  The width of an interval [ s , s ] is defined to be
w{ [ s , s ] } = s −s.
Hence, a singleton s = [s,s] has a width zero: w{ s } = w{ [s,s] } = 0, 
for all s ∈ R.
(g)
Absolute Value:  The absolute value of an interval [ s , s ] is defined 
to be
| [ s , s ] | = max{ | s |, | s | }.
Thus, the absolute value of a singleton s = [s,s] is its usual absolute
value: | [s,s] | = | s | for all s ∈ R.
(h)
Midpoint (mean):  The midpoint (or mean) of an interval [ s , s ] is
defined to be
m{ [ s , s ] } = 2
1  ( s + s  ).
(i)
Symmetry:  Interval [ s , s ] is said to be symmetric if and only if 
s = −s
or
m{ [ s , s ] } =  0.
Example 1.3. For three given intervals, S1 = [−1,0], S2 = [−1,2], and S3 =
[2,10], we have
S1 ∩S2 = [−1,0] ∩ [−1,2] = [−1,0],
S1 ∩S3 = [−1,0] ∩ [2,10] = ∅,
S2 ∩S3 = [−1,2] ∩ [2,10] = [2,2] = 2,
S1 ∪S2 = [−1,0] ∪ [−1,2] = [−1,2],
S1 ∪S3 = [−1,0] ∪ [2,10] = undefined,
S2 ∪S3 = [−1,2] ∪ [2,10] = [−1,10],
S1 = [−1,0] < [2,10] = S3,
S1 = [−1,0] ⊂ [−1,2] = S2,
w{S1} = w{ [−1,0] } = 0 − (−1) = 1,
w{S2} = w{ [−1,2] } = 2 − (−1) = 3,
w{S3} = w{ [2,10] } = 10 − 2 = 8,
| S1 | = | [−1,0] | = max{ |−1|, |0| } = 1,
| S2 | = | [−1,2] | = max{ |−1|, |2| } = 2,
| S3 | = | [2,10] | = max{ |2|, |10| } = 10,
m{S1} = m{ [−1,0] } = 2
1 (−1 + 0) = −2
1 ,

12
Fuzzy Set Theory •• 1
m{S2} = m{ [−1,2] } = 2
1 (−1 + 2) = 2
1 ,
m{S3} = m{ [2,10] } = 2
1 (2 + 10) = 6.
B. Interval Arithmetic
Let [ s , s ], [ s1,
1s ], and [ s2,
2s ] be intervals.  The basic arithmetic of
intervals is defined as follows.
Definition 1.2.
(1)
Addition.
[ s1,
1s ] + [ s2,
2s ] = [ s1 + s2,
1s +
2s ].
(2)
Subtraction.
[ s1,
1s ] − [ s2,
2s ] = [ s1 −
2s ,
1s −s2 ].
(3)
Reciprocal.
If 0 ∉ [ s , s ] then [ s , s ]–1 = [ 1/ s , 1/s ];
if 0 ∈ [ s , s ] then [ s , s ]–1 is undefined.
(4)
Multiplication.
[ s1,
1s ] . [ s2,
2s ] = [ p, p  ].
Here
p
=
min{ s1s2, s1
2s ,
1s s2,
1s
2s  },
p
=
max{ s1s2, s1
2s ,
1s s2,
1s
2s  }.
(5)
Division.
[ s1,
1s ] / [ s2,
2s ] = [ s1,
1s ] . [ s2,
2s ]–1,
provided that 0 ∉ [ s2,
2s ].
Here, it is very important to note that interval arithmetic intends to obtain
an interval as the result of an operation such that the resulting interval contains 
all possible solutions. Therefore, all these operational rules are defined in a
conservative way in the sense that it intends to make the resulting interval as
large as necessary to avoid loosing any true solution. For example,
[0,2]
[0,1]
[1,2]
=
−
 means for any 
[1,2]
∈
a
 and any 
[0,1]
∈
b
, it is guaranteed 
that
.
b
a
[0,2]
∈
−
 It is also very important to point out that the conservatism may cause
some unusual results that could seem to be inconsistent with the ordinary
numerical solutions. For instance, according to the subtraction rule (2), we
have [1,2] – [1,2] = [–1,1] ≠ [0,0] = 0. The result [–1,1] here contains 0, but
not only 0. The reason is that there can be other possible solutions: if we take
1.5 from the first interval and 1.0 from the second, then the result is 0.5 rather 
than 0; and 0.5 is indeed contained in [–1,1]. Thus, an interval subtract itself is 
equal to zero (a point) only if this interval is itself a point (a trivial interval). In 
general, we have the following:
For any interval Z,

1 •• Fuzzy Set Theory
13
Z −Z = 0;
or
Z / Z = I (0 ∉Z)
only if w{Z} = 0, i.e., Z = [z,z] is a point, where I = [1,1].
Associated with this is the following:
For any intervals X, Y,  and Z,
X + Z = Y + Z ⇒X = Y.
Moreover, we have the following:
For any interval Z, with 0 ∈Z,
Z2 = Z . Z = [ z, z ] . [ z, z ] = [ p, p ],
where
p
= min{ z2, z z , z 2 } = z z ,
p = max{ z2, z z , z 2 } = max{ z2, z 2}.
It should be noted that this is consistent with the definition of interval
multiplication, Definition 1.2 (4).  However, if one changed it to the
following:
Z2 = ( [ z, z ] )2 = { z2 | z ∈Z } = [ 0, max{ z2, z 2} ],
then it would be more natural in the sense that a square is always nonnegative, 
but it is not consistent with the interval multiplication definition.  Observe,
moreover, that if we take a negative number from the first interval and a
positive one from the second to multiply, a negative number does result.
Therefore, we will use the first square rule shown above, although, oftentimes,
it gives a more conservative result in an interval operation involving interval
squares.
For three intervals, X = [ x, x  ], Y = [ y, y  ], and Z = [ z, z ], if we
consider the interval operations of addition (+), subtraction (–), multiplication 
(⋅), and division (/) to be (set-variable and set-valued) functions, namely,
Z = f(X,Y) = X * Y,
* ∈ {+, −, ., / },
then it can be verified that all these four functions are continuous on compact
sets such as intervals (see Section III-D below).  Each function, f(X,Y),
therefore, assumes a maximum and a minimum value, as well as all values in
between, on any (closed and bounded) interval.  Thus X * Y is, again, a (closed 
and bounded) interval.  The set of intervals is therefore closed under the four
operations {+, −, ., / } defined above.
It is also clear that the real numbers x, y, z, … . are isomorphic to intervals 
of the form [x,x], [y,y], [z,z], ...  For this reason, we will simplify the notation
[x,x] * Y of a point-interval operation to x * Y.  On the other hand, the
multiplication symbol “.” will often be dropped, and the division symbol “/”
may sometimes be replaced by “÷” for convenience.
We collect together the most important and useful interval operation rules
in the next subsection.
C. Algebraic Properties of Interval Arithmetic
Let X, Y, and Z be intervals.  We first have the following simple but
important rules.

14
Fuzzy Set Theory •• 1
Theorem 1.1. The addition and multiplication operations of intervals are
commutatitve and associative but not distributive.  More precisely:
(1)
X + Y = Y + X;
(2)
Z + ( X + Y ) = ( Z + X ) + Y;
(3)
Z ( X Y ) = ( Z X ) Y;
(4)
X Y = Y X;
(5)
Z + 0 = 0 + Z = Z and Z0 = 0Z = 0, where 0 = [0,0];
(6)
ZI = IZ = Z, where I = [1,1];
(7)
Z ( X + Y ) ≠ZX + ZY, except when
(a) Z = [z,z] is a point; or
(b) X = Y = 0; or
(c) xy ≥ 0 for all x ∈X and y ∈Y.
In general, we only have the subdistributive law:
Z ( X + Y ) ⊆ZX + ZY.
Proof.  For (1) and (4), let * ∈ {+, . }.  Then
X * Y
= { x * y | x ∈X, y ∈Y }
= { y * x | y ∈Y, x ∈X }
= Y * X.
For (2) and (3), let * ∈ {+, . }.  Then
Z * ( X * Y )
= { z * a | z ∈Z, a ∈X * Y }
= { z * ( x * y ) | z ∈Z, x ∈X, y ∈Y }
= { ( z * x ) * y | z ∈Z, x ∈X, y ∈Y }
= { b * y | b ∈Z * X, y ∈Y }
= ( Z * X ) * Y.
For (5) and (6), let * ∈ {+, . }.  Then
Z * 0
= { z * 0 | z ∈Z, 0 ∈0 }
= { 0 * z | 0 ∈0, z ∈Z }
= 0 * Z.
Z . I
= { z . 1 | z ∈Z, 1 ∈ I }
= { 1 . z | 1 ∈ I, z ∈Z }
= { z | z ∈Z }
= Z.
For (7):
(a)
z ( X + Y )
= { z . a | a ∈X + Y }
= { z . ( x + y ) | x ∈X, y ∈Y }
= { z . x + z . y | x ∈X, y ∈Y }
=
z X + z Y.
(b)
Z ( 0 + 0 )
= Z 0
= 0
= Z 0 + Z 0
by (5)

1 •• Fuzzy Set Theory
15
(c)
Without loss of generality, we only consider the case where x
≥ 0 and y ≥ 0 in X = [ x, x  ] and Y = [ y, y  ].  If z ≥ 0, then 
we have
Z ( X + Y ) = [ z ( x + y ), z  ( x  + y  ) ]
and
Z X + Z Y
= [ z x, z x ] + [ z y, z y ]
= [ z ( x + y ), z ( x  + y ) ],
i.e., the equality holds.  If z ≤ 0 then by considering −Z we
have the same situation and result.  Now, if z z < 0, then we
have
Z ( X + Y ) = [ z ( x  + y  ), z  ( x  + y  ) ]
and
Z X + Z Y
= [ z x , z x  ] + [ z y , z y ]
= [ z ( x  + y ), z ( x  + y ) ],
which proves the final case.
We note that in case (7), we do not even have the distributive law
Z(x + y) = Zx + Zy for points x and y.  We also note that more conditions under 
which this equality holds can be found in Theorem 1.3.  A counterexample for 
the distributive law is the following.
Example 1.4. Let Z = [1,2], X = I = [1,1], and Y = −I = [−1,−1].  Then we 
have
Z ( X + Y ) =
[1,2] ( I − I ) = [1,2].0 = 0;
Z X + Z Y
=
[1,2] . [1,1] + [1,2] . [−1,−1] = [−1,1] ≠0.
A more general rule for interval arithmetic operations is the following
fundamental monotonic inclusion law.
Theorem 1.2. Let X1, X2, Y1, and Y2 be intervals such that
X1 ⊆Y1
and
X2 ⊆Y2.
Then for the operations * ∈ { +, −, ., / }, we have
X1 * X2 ⊆Y1 * Y2.
Proof.  Since X1 ⊆Y1 and X2 ⊆Y2, it follows that
X1 * X2
= { x1 * x2 | x1 ∈X1, x2 ∈X2 }
⊆{ y1 * y2 | y1 ∈Y1, y2 ∈Y2 }
= Y1 * Y2.
In particular, for any interval Z we have
0 ∈Z −Z
and
1 ∈Z / Z
(0 ∉Z),
as discussed before.
A particularly useful special case of the theorem is the following.
Corollary 1.1. Let X and Y be intervals with x ∈X and y ∈Y.  Then
x * y ∈X * Y
for any * ∈ { +, −, ., / }.

16
Fuzzy Set Theory •• 1
The following properties can be easily verified by following the method of 
proof of Theorem 1.1.
Theorem 1.3. Let X, Y, and Z be symmetric intervals in the sense that the
means m{X} = 0, m{Y} = 0, and m{Z} = 0.  Then
(1)
| Z | = 2
1  w{Z};
(2)
Z = | Z | [–1,1];
(3)
X + Y = X – Y = ( | X | + | Y | ) [–1,1];
(4)
XY = | X |  | Y | [–1,1];
(5)
Z ( X ± Y ) = ZX ± ZY = | Z | ( | X | + | Y | ) [–1,1];
(6)
Z = m{Z} + 2
1  w{Z} [–1,1];
(7)
if X and Y are symmetric but Z is arbitrary, then
(a)
ZX = | Z | X; and
(b)
Z ( X + Y ) = ZX + ZY.
We note that the equality X + Y = X −Y in (3) seems to be very strange, but 
it is true for symmetric intervals X and Y, which can be verified as follows:
X −Y
= [x, x ] – [y, y ] = [min{x–y,x– y }, max{ x –y, x −y }]
= [min{ x+|y|, x−|y| }, max{ x +|y|, x –|y|}]
= [x+y, x + y ]
= X + Y,
where one should recall that Y = [−|y|, |y|] because it is symmetric.
We close this subsection by discussing the problem of solving the interval
equation
AX = B,
where A and B are both given intervals with 0 ∉A, and X is to be determined. 
Theorem 1.4. Let X be a solution of the interval equation
AX = B,
0 ∉A.
Then X ⊆B / A.
Proof.  For any x ∈X, there exist a ∈A and b ∈B  such that ax = b.
Hence, x = b/a ∈B / A since 0 ∉A.
Note, however, that even if B/A is undefined, the interval equation AX = B
may still have a solution.  For example, the equation
[–1/3,1] X = [–1,2]
has 0 ∈ [–1/3,1], so that [–1,2]/[–1/3,1] is undefined.  Yet X = [–1,2] is its
unique solution.  This can be verified by direct multiplication [–1/3,1] ⋅ [–1,2],
which gives [–1,2].  The uniqueness is verified by examining all possible
solutions for X = [ x, x ] that satisfy
[−1/3,1] ⋅ [ x, x ] = [–1,2]
via multiplication operations.
Note also that the above interval equation may not have a solution at all
even if 
.
A
∉
0
 One example is [1,2]X = [2,3].

1 •• Fuzzy Set Theory
17
The matrix equation AX = B and its solvability will be further discussed in 
Section III.H.
D. Measure Theory of Intervals
In this subsection, we only introduce the notion of distance in the concern
of measure theory for a family of intervals.
Definition 1.3. Let X = [ x, x ] and Y = [ y, y ] be intervals.  The distance
between X and Y is defined by
d(X,Y) = max{ | x – y |, | x – y  | }
It can be verified that the set-variable function d(.,.) satisfies the following 
properties:
(1) d(X,Y) ≥ 0, and d(X,Y) = 0 if and only if X = Y;
(2) d(X,Y) ≤ d(X,Z) + d(Z,Y) for any interval Z (the triangular inequality).
The triangular inequality can be verified as follows:
d(X,Z) + d(Z,Y)
= max{ | x −z |, | x −z  | } + max{ | z −y |, | z −y  | }
≥
max{ | x −z | + | z −y |, | x −z  | + | z −y  | }
≥
max{ | x −y |, | x −y  | }
= d(X,Y).
For real numbers x and y, this distance reduces to the standard one:
d( [x,x], [y,y] ) = | x −y |.
It can also be verified that the interval distance function d(.,.) defined here 
induces a metric, a Hausdorff metric, which is a generalization of the distance 
between two singleton points in a usual metric space.  In fact, for any two
nonempty compact sets X and Y of real numbers, including intervals, the
Hausdorff distance is defined by
h(X,Y) = max{ 
X
x
Y
y
inf
sup
∈
∈
d(x,y),
Y
y
X
x
inf
sup
∈
∈
d(x,y) }.
The introduction of a metric into the family of intervals, denoted I, makes
it a metric space.  Thus, the concepts of convergence and continuity can be
defined and used in the standard way.
Definition 1.4. Let 
∞
=1
}
{
n
n
X
 be a sequence of intervals in I.  This sequence 
is said to be  convergent to an interval X ∈I if the sequences of the upper and 
lower bounds of the individual members of the sequence of intervals converge 
to the corresponding bounds of X = [ x, x ], namely,
∞
→
nlim xn  = x     and
∞
→
nlim
n
x  = x ,
where Xn = [xn,
n
x ].  In this case, we write
∞
→
nlim Xn  = X.
Then, it can be verified by a standard argument that every Cauchy
sequence of intervals converges to an interval in I, that is, we have the
following result.

18
Fuzzy Set Theory •• 1
Theorem 1.5. The topological space I, when equipped with the metric
defined by d(⋅,⋅), is a complete metric space (I,d).
The next result characterizes the convergence behavior of an important
class of interval sequences.
Theorem 1.6. Let 
∞
=1
}
{
n
n
X
 be a sequence of intervals such that
X1 ⊇X2 ⊇X3 ⊇ ...
Then
∞
→
nlim Xn  = X, where
X = 
I
∞
=1
n
n
X
.
Proof.  Consider the sequence of bounds
x1 ≤x2 ≤x3 ≤ ... ≤
3
x ≤
2
x
≤
1x .
The sequence of the lower bounds of 
∞
=1
}
{
n
n
X
 is a monotonic nondecreasing
sequence of real numbers with an upper bound, say 
1x
< ∞. Thus, it
converges to a real number, x.  Similarly, the monotonic nonincreasing
sequence of real numbers 
∞
=1
}
{
n
n
x
 converges to a real number, x , for which x
≤x .  Hence, it follows that
∞
→
nlim Xn = [x, x ] = X = I
∞
=1
n
n
X
.
Corollary 1.2. If 
X1 ⊇X2 ⊇X3 ⊇ ... ⊇Y,
then
∞
→
nlim Xn = X
with
X ⊇Y.
The next important property is fundamental, as mentioned in the last
subsection.
Theorem 1.7. The interval operations { +, −, ., / }, introduced in Section
III-B, are continuous functions of intervals.
Proof.  We only show the addition operation; the others are similar.
Let
∞
=1
}
{
n
n
X
 and 
∞
=1
}
{
n
n
Y
 be two sequences of intervals in I, with
∞
→
nlim Xn = X
and
∞
→
nlim Yn = Y.
The sequence of interval sums 
∞
=
+
1
}
{
n
n
n
Y
X
 then satisfies
∞
→
nlim (Xn+Yn)
=
∞
→
nlim [xn+yn,
n
x +
n
y ]
=
[
∞
→
nlim (xn+yn),
∞
→
nlim (
n
x +
n
y ) ]
=
[ x+y, x + y  ]
=
X + Y.
Corollary 1.3. Let f be an ordinary continuous function and X be an
interval.  Let
fI(X) = [ 
X
xmin
∈
f(x),
X
xmax
∈
f(x) ].

1 •• Fuzzy Set Theory
19
Then fI(X) is a continuous interval-variable and interval-valued function.
This corollary can be easily verified by using the continuity of the real
function f, which guarantees the continuity of all important interval-variable
and interval-valued functions like Xn, eX, sin(X),
|
| X
, etc. 
Theorem 1.8. Let X = [x, x ], Y = [y, y ], Z = [z, z ], and S = [s, s ] be
intervals in I.  Then
(1)
d(X+Y,X+Z) = d(Y,Z);
(2)
d(X+Y,Z+S) ≤ d(X,Z) + d(Y,S);
(3)
d(λX,λY) = |λ| d(X,Y),
λ ∈ R;
(4)
d(XY,XZ) ≤ |X| d(Y,Z).
Proof. For (1), it follows from the definition of d(.,.) that
d(X+Y,X+Z) = max{ | (x + y) − (x + z) |, | ( x  + y ) − ( x  + z ) | }
= max{ | y −z |, | y −z  | }
= d(Y,Z).
For (2), using the triangular inequality, part (1) above, and the symmetry of
d(.,.), we have 
d(X+Y,Z+S)
≤
d(X+Y,Y+Z) + d(Z+S,Y+Z)
≤
d(X,Z) + d(Y,S).
For (3), for any real number λ ∈ R, we have
d(λX,λY)
= max{ | λx −λy |, | λ x −λ y  | }
= |λ| max{ | x −y |, | x −y  | }
= |λ| d(X,Y).
For (4), for an interval A = [a, a ], we will use l(A) = a and u(A) = a  for
convenience in this proof.  Then, what we need to show is
max{ | l(XY) −l(XZ) |, | u(XY) −u(XZ) | } ≤ |X| d(Y,Z).
We only show that
| l(XY) −l(XZ) | ≤ |X| d(Y,Z)
and the inequality | u(XY) −u(XZ) | ≤ |X| d(Y,Z) can be verified in the same
manner.  Without loss of generality, assume that
l(XY) ≥l(XZ);
the case of l(XY) < l(XZ) can be similarly analyzed.  Then, since
XZ = { xz | x ∈X, z ∈Z },
there exists an x ∈X such that
l(XZ) = l(xZ).
On the other hand, we have
xY ⊆XY,
which implies that
l(xY) ≥l(XY).
Hence, we have
l(xY) −l(xZ) ≥l(XY) −l(XZ) ≥ 0,
so that
| l(XY) −l(XZ) |
= l(XY) −l(XZ)

20
Fuzzy Set Theory •• 1
≤
l(xY) −l(xZ)
= | l(xY) −l(xZ) |
≤
|x| d(Y,Z)
≤
|X| d(Y,Z).
E. Properties of the Width of an Interval
In this subsection, we summarize some interesting and useful properties of
the width of an interval, which is defined in Definition 1.1 (f), as follows.  For 
an interval S = [s, s ], the width of S is w{S} = s – s , which is equivalent to
w{S} = 
S
s,
smax
∈
2
1
| s1 – s2 |.
In addition to the properties listed in Problem P1.2, we have the following.
Theorem 1.9. Let X and Y be intervals.  Then
(1)
w{XY} ≤ w{X} |Y|  +  |X| w{Y};
(2)
w{XY} ≥max{ |X| w{Y} , |Y| w{X} };
(3)
w{Xn} ≤n |X|n–1  w{X},
n=1,2,...;
(4)
w{ (X–x)n } ≤ 2 ( w{X} )n,
x ∈X, n=1,2,....
Proof.  For (1), using the equivalent definition w{S} = 
S
s,
smax
∈
2
1
|s1 – s2|, we
have
w{XY} =
Y
y,
y
;
X
x,
x
max
∈
∈
2
1
2
1
| x1y1 – x2y2 |
=
Y
y,
y
;
X
x,
x
max
∈
∈
2
1
2
1
| x1y1 – x1y2 + x1y2 – x2y2 |
≤
Y
y,
y
;
X
x,
x
max
∈
∈
2
1
2
1
{ | x1 ( y1 – y2 ) | + | y2 ( x1 – x2 ) | }
≤
Y
y,
y
;
X
x,
x
max
∈
∈
2
1
2
1
 |x1| |(y1 – y2)| +
Y
y,
y
;
X
x,
x
max
∈
∈
2
1
2
1
|y2| |(x1 – x2)|
= (
X
xmax
∈
1
 |x1| ) (
Y
y,
ymax
∈
2
1
|(y1 – y2)| ) 
+ (
Y
ymax
∈
2
 |y2| ) (
X
x,
xmax
∈
2
1
|(x1 – x2)| )
= |X| w{Y} + w{X} |Y|.
For (2), we first have
w{XY} =
Y
y,
y
;
X
x,
x
max
∈
∈
2
1
2
1
| x1y1 – x2y2 |
≥
Y
y,
y
;
X
x,
x
max
∈
∈
2
1
2
1
| x1y1 – x1y2 |
=
Y
y,
y
;
X
x,
x
max
∈
∈
2
1
2
1
| x1 |  | y1 – y2 |
= |X| w{Y}.
Similarly, we can show that
w{XY} ≥
|Y| w{X}.
Hence, the inequality (2) follows.
For (3), we use mathematical induction.  First, for n = 1, the inequality
holds.  If the inequality is true for n ≥ 1, then it follows from part (1) above
that

1 •• Fuzzy Set Theory
21
w{Xn+1} = w{XnX}
≤
n |X|n–1 w{X} |X|  +  |X|n w{X}
= (n + 1) |X|n w{X}.
This completes the induction.
For (4), since x ∈X, we have w{x} ≤ w{X} (see Problem P1.2), so that
w{(X – x)n}
≤
w{(X – X)n}
= w{ [ –w{X}, w{X} ]n }
= w{ [ –( w{X} )n, ( w{X} )n ] }
= 2 ( w{X} )n,
where we recall  that X – X  is not  zero in general; but if X – X = 0 the above 
inequality holds as well.
Theorem 1.10. Let X and Y be intervals.  Then
(1)
X ⊆Y implies that
2
1 ( w{Y} − w{X} ) ≤ d(X,Y) ≤ w{Y} + w{X};
(2)
if X is symmetric, then
XY = |Y| X
and
w{XY} = |Y| w{X},
where the second equality is also valid for the case of 0 ∈X, if either 
y ≥ 0 or y ≤ 0.
Proof.  For (1), since X ⊆Y, we have y ≤x ≤x ≤y , so that
d(X,Y)
= max{ | x −y |, | x −y  | }
= max{ x −y, y −x  }
≤
y −x  + x −y
= ( y −y ) − ( x −x )
= w{Y} − w{X}.
On the other hand, we have
d(X,Y)
= max{ x −y, y −x  }
≥
2
1 ( x −y + y −x  )
=
2
1 ( w{Y} – w{X} ).
For (2), X is symmetric means that X = –X, or equivalently, x = – x = x.
Thus, we have
XY
= [ min{xy,x y ,–xy,–x y }, max{xy,x y ,−xy,–x y } ]
= [ x min{y,–y, y ,– y }, x max{y,–y, y ,– y } ]
= [ x ( –|Y| ), x |Y| ]
= [–x,x] |Y|
= |Y| X.
It then follows from w{λX} = |λ| w{X} (see Problem P1.2) that
w{XY} = |Y| w{X}.
The other cases can be similarly verified.

22
Fuzzy Set Theory •• 1
F. Interval Evaluation
In this subsection, we extend the ordinary real-variable and real-valued
functions f:R→R to interval-variable and interval-valued functions f:I→I,
where I is the family of intervals.  This will further generalize the function
Z = f(X,Y) = X * Y,
* ∈ { +, −, ⋅, / },
where X, Y, Z ∈I, which was discussed in Section III.C.
We first recall from Corollary 1.3 of Section III.C that for any ordinary
continuous function f:R→R and any interval X ∈I, the interval-variable and
interval-valued function
fI(X) = [ min
X
x∈
f(x), max
X
x∈
f(x) ]
is also continuous in the interval metric.  We further extend this function, fI(.),
as follows.  Let A1, ..., Am be intervals in I, and suppose that each constant ak
∈Ak, k = 1, 2,...,m, assumes only one value in any evaluation of a continuous 
function f:R→R in the following discussions.  For any interval X ∈I, consider 
a function f(x;a1,...,am) defined on X, depending on m parameters ak ∈Ak, k = 
1, 2,...,m. Define an interval expression of f by
fI(X;A1,...,Am) = { f(x;a1,...,am) | x ∈X, ak ∈Ak, 1 ≤k ≤m }
= [
min
X
x
m
k
A
a
k
k
∈
≤
≤
∈
1,
f(x;a1,...,am),
max
X
x
m
k
A
a
k
k
∈
≤
≤
∈
1,
f(x;a1,...,am) ].
In the following, we always assume that an interval expression can be
computed in finitely many steps. In this case, the expression is called a finite
interval expression.  Moreover, we only consider those finite interval
expressions that consist of rational operations, namely, addition, subtraction,
multiplication, and division. An interval expression of this kind is called a
rational interval expression, which is similarly defined for multi-valuable
case.
Example 1.5. Consider the real-variable and real-valued function
f(x;a) = 
x
x
a
−
1
,
x ≠ 1,
x ≠ 0.
If X = [2,3] and A = [0,2] are intervals with x ∈X and a ∈A, then we have the 
rational interval expression of f given by
fI(X;A)
=
⎪⎭
⎪⎬
⎫
⎪⎩
⎪⎨
⎧
≤
≤
≤
≤
−
2
0,3
2
1
a
x
x
x
a
= [
x
x
a
max
x
x
a
min
a
x
a
x
−
−
≤
≤
≤
≤
≤
≤
≤
≤
1
,
1
2
0
,3
2
2
0
,3
2
]
= [−4,0].
The following theorem is very important and useful, which states that all
rational interval expressions have the inclusion monotonic property.
Theorem 1.11. Let f:Rn+m→R be a real-variable and real-valued function
that has a rational interval expression fI(X1,...,Xn,A1,...,Am).  Then for all

1 •• Fuzzy Set Theory
23
Xk ⊆Yk,
k = 1,2,...,n,
Al ⊆Bl,
l = 1,2...,m,
we have
fI(X1,...,Xn,A1,...,Am) ⊆fI(Y1,...,Yn,B1,...,Bm).
Proof.  It is a consequence of Theorem 1.2 and Corollary 1.1, established
in Section III.C, and the definition of rational interval expressions.
Example 1.6. Let X = [0.2,0.4] and Y = [0.1,0.5].  Then X ⊂Y.
(a)
X–1 = 
]
4
0
2
0
[
1
.
,
.
 = [2.5,5.0],
Y–1 = 
]
5
0
1
0
[
1
.
,
.
 = [2.0,10.0],
X–1 ⊂Y–1 .
(b)
1 – X = [1.0,1.0] – [0.2,0.4] = [0.6,0.8],
1 – Y = [1.0,1.0] – [0.1,0.5] = [0.5,0.9],
1 – X ⊂ 1 – Y.
(c)
X
−
1
1
 = 
]
8
0
6
0
[
1
.
,
.
 = [5/4,5/3],
Y
−
1
1
 = 
]
9
0
5
0
[
1
.
,
.
 = [10/9,2.0],
X
−
1
1
⊂
Y
−
1
1
.
Next, we should point out a very important issue in the evaluation of an
interval expression: the number of intervals involved in a rational interval
expression should be reduced (whenever possible) before evaluating (i.e.,
computing) the expression, in order to obtain less-conservative lower and
upper bounds of the resulting interval expression.
Example 1.7. Consider, again, the function f defined in Example 1.5,
namely,
f(x;a) = 
x
x
a
−
1
,
x ≠ 1,
x ≠ 0.
We now rewrite it as
)
;
(
~
a
x
f
 = 
1
1 −
x
a
,
x ≠ 1,
x ≠ 0.
As a real-variable and real-valued function, 
f
f~≡
.  Actually, for x ∈X = [2,3] 
and a ∈A = [0,2], we have
fI(X;A) = [–4,0]
from Example 1.5, and also have
If~ (X;A) = {
1
1
−
x
/
a
 | 2 ≤x ≤ 3, 0 ≤a ≤ 2 }

24
Fuzzy Set Theory •• 1
= [
2
0
3
2
≤
≤
≤
≤
a
x
min
1
1
−
x
/
a
,
2
0
3
2
≤
≤
≤
≤
a
x
max
1
1
−
x
/
a
]
= [–4,0]
= fI(X;A),
as expected.  However, if we formally perform interval arithmetic (rather than 
numerical minimization and maximization as we just did), then we have
fI(X;A) = 
[2,3]
1
[2,3]
.
[0,2]
−
 = 
1]
2,
[
[0,6]
−
−
 = [0,6] . [−1,−1/2] = [−6,0]
and
If~ (X;A) =
1
[2,3]
1
[0,2]
−
 = 
1
]
2
1
,
3
1
[
[0,2]
−
 = 
]
2
1
,
3
2
[
[0,2]
−
−
= [0,2].[–2,–3/2]
= [–4,0].
Thus,
If~ (X;A) ≠fI(X;A) but 
If~ (X;A) ⊆fI(X;A).  The reason is that formula
fI(X;A) has three intervals but 
If~ (X;A) has only two.  Thus, intuition shows
that the calculation “errors” accumulated in the former can be larger than that
of the latter.  This example convinces this observation.  Indeed, from the
above evaluation using numerical minimization and maximization we know
that the correct answer should be [–4,0], and the result of [–6,0] is too
conservative in bounding the actual result.  Hence, one should always try to
reduce the number of intervals involved in an evaluation of a rational interval
expression.
As another example, in calculating a power series of intervals
fI(X) = I + X + X2 + X3 + ... + Xn,
the best way is to reformulate it as
If~ (X) = I + X(I + X(I + ... + X(I + X) ... )
before we actually carry out the calculations.  The reason is that one needs to
apply
1 + 2 + 3 + ... + n = 
2
)1
( +
n
n
times of the interval X in computing fI but only n times of X in the formula
If~ , where X(I+X) ⊆X + X2 by Theorem 1.1 (7).
We should remark that the best way to evaluate a rational interval
expression fI(X1,...,Xn,A1,...,Am) is to use the definition directly and apply both
minimization and maximization to determine the exact lower and upper
bounds for the result:
fI(X1,...,Xn,A1,...,Am) = [
m
l
,
A
a
n
k
,
X
x
l
l
k
k
min
≤
≤
∈
≤
≤
∈
1
1
fI(x1,...,xn,a1,...,am),

1 •• Fuzzy Set Theory
25
m
l
,
A
a
n
k
,
X
x
l
l
k
k
max
≤
≤
∈
≤
≤
∈
1
1
fI(x1,...,xn,a1,...,am)].
This is not always possible, however, unless a computer is used to perform the 
minimization and maximization numerically. Yet, interval arithmetic is much
simpler in many cases, even for complicated rational functions consisting of
only addition, subtraction, multiplication, and division. Therefore, the above
observation is practically important.
G. Interval Matrix Operations
When some entries of a constant matrix are uncertain, namely, when they
are intervals rather than exact numbers, the matrix becomes an interval matrix.
For example, the following two matrices are interval matrices:
AI = 
⎥⎦
⎤
⎢⎣
⎡
[2,3]
[1,2]
[0,1]
[2,3]
,
BI = 
⎥⎦
⎤
⎢⎣
⎡
[60,140]
[0,120] .
Two n×m interval matrices AI = [AI(i,j)] and BI = [BI(i,j)] are said to be equal
if AI(i,j) = BI(i,j) for all 1 ≤i ≤n and 1 ≤j ≤m.  Similarly, AI is said to be
contained in BI, denoted AI ⊆BI, if AI(i,j) ⊆BI(i,j) for all 1 ≤i ≤n and 1 ≤j
≤m.  In particular, if A is an (ordinary) constant matrix contained in BI, we
write A ⊆BI.
The fundamental operations of interval matrices are defined as follows:
(1)
Addition and Subtraction:  Let AI and BI be n×m interval matrices.
Then
AI ± BI = [AI(i,j) ± BI(i,j)].
(2)
Multiplication:  Let AI and BI be n×r and r×m interval matrices,
respectively.  Then
AI BI = [ 
k
r
=
∑
1
AI(i,k) BI(k,j)].
In particular, if BI = X is an interval, we define
AI X = X AI = [X AI(i,j)].
Let A and B be two constant matrices and AI and BI be two interval
matrices, respectively, of appropriate dimensions.  If A ∈AI and B ∈BI, then 
we have
{ AB | A ∈AI, B ∈BI } ⊆ { C | C ∈AIBI }.
This relation can be verified by using the inclusion monotonic property of the
interval operations.  Note that the equality does not hold in general as can be
seen from the following example.
Example 1.8. Let
A = AI = 
⎥⎦
⎤
⎢⎣
⎡
−
1
1
1
1
and
BI = 
⎥⎦
⎤
⎢⎣
⎡
[0,1]
[0,1] .
Then we have
A BI =
⎥⎦
⎤
⎢⎣
⎡
−1,1]
[
[0,2]
.

26
Fuzzy Set Theory •• 1
However, the matrix
C = 
⎥⎦
⎤
⎢⎣
⎡
−1
2
∈A BI,
but there is no matrix B ∈BI  that satisfies A B = C.  This fact implies that
{ AB | A ∈AI , B ∈BI } 
≠⊂ { C | C ∈AI BI }.
In the following, we summarize some useful properties of interval matrix
operations.  First, we point out that the fundamental property of inclusion
monotonicity is also valid for interval matrix operations.
Theorem 1.12. Let A, B, C be constant matrices and AI, BI, CI be interval
matrices, respectively, of appropriate dimensions.  Then
(1)
{ A ± B | A ∈AI , B ∈BI } = AI ± BI;
(2)
{ A B | A ∈AI } = AIB = B AI;
(3)
AI + BI = BI + AI;
(4)
AI + ( BI + CI ) = ( AI + BI ) + CI;
(5)
AI + 0 = 0 + AI = AI,
0 = zero matrix;
(6)
AI I = I AI = AI,
I = identity matrix;
(7)
Subdistributive Law:
⎩
⎨
⎧
+
⊆
+
+
⊆
+
;
)
(
,
)
(
I
I
I
I
I
I
I
I
I
I
I
I
I
I
B
C
A
C
B
A
C
C
B
C
A
C
B
A
(8)
( AI + BI ) C = AI C + BI C;
(9)
C ( AI + BI ) = C AI + C BI;
(10) Associative and Subassociative Laws:
(a)
AI ( B C ) ⊆ ( AI B ) C;
(b)
( A BI ) CI ⊆A ( BI CI ),
if CI = –CI;
(c)
A ( BI C ) = ( A BI ) C;
(d)
AI ( BI CI ) = ( AI BI ) CI,
if BI = –BI   and CI = –CI.
Proof.  Formulas (1)-(9) can be verified by using the formulas of Theorem 
1.1.  Here, we only prove the formulas in (10).  For simplicity of  notation, we 
assume that all matrices are square with the same dimension, n.
Formula (a):
AI ( B C ) =
⎥⎥
⎦
⎤
⎢⎢
⎣
⎡
⎥⎦
⎤
⎢⎣
⎡
∑
∑
=
=
n
j
n
l
lk
jlC
B
)
j,i(
A
1
1
I
⊆
⎥
⎦
⎤
⎢
⎣
⎡∑∑
=
=
n
j
n
l
lk
jlC
B
)
j,i(
A
1
1
I
=
⎥
⎥
⎦
⎤
⎢
⎢
⎣
⎡
⎥
⎦
⎤
⎢
⎣
⎡
∑∑
=
=
n
l
lk
n
j
jl C
B
)
j,i(
A
1
1
I
= ( AI B ) C.
Formula (b):  Since CI = –CI, we have

1 •• Fuzzy Set Theory
27
( A BI ) CI
=
⎥
⎦
⎤
⎢
⎣
⎡
⎥⎦
⎤
⎢⎣
⎡
∑∑
=
=
n
l
n
k
ik
)
j,l(
C
)
l,
k
(
B
A
1
1
I
I
=
⎥
⎦
⎤
⎢
⎣
⎡∑∑
=
=
n
l
n
k
ik
)
j,l(
C
)
l,
k
(
B
A
1
1
I
I
⊆
⎥
⎦
⎤
⎢
⎣
⎡
⎥⎦
⎤
⎢⎣
⎡
∑∑
=
=
n
l
n
k
ik
)
j,l(
C
|)
l,
k
(
B
||
A
|
1
1
I
I
⊆
⎥
⎦
⎤
⎢
⎣
⎡
⎥⎦
⎤
⎢⎣
⎡
∑∑
=
=
n
l
n
k
ik
)
j,l(
C
|)
l,
k
(
B
||
A
|
1
1
I
I
=
⎥
⎦
⎤
⎢
⎣
⎡
⎥⎦
⎤
⎢⎣
⎡
∑
∑
=
=
n
k
n
l
ik
)
j,l(
C
|)
l,
k
(
B
|
|
A
|
1
1
I
I
=
⎥
⎦
⎤
⎢
⎣
⎡
⎥⎦
⎤
⎢⎣
⎡
∑
∑
=
=
n
k
n
l
ik
)
j,l(
C
)
l,
k
(
B
A
1
1
I
I
= A ( BI CI ).
Formula (c):
( A BI ) C
=
⎥
⎦
⎤
⎢
⎣
⎡
⎥⎦
⎤
⎢⎣
⎡
∑∑
=
=
n
l
n
k
ik
j
l
C
l
k
B
A
1
1
)
,
(
)
,
(
I
=
⎥
⎦
⎤
⎢
⎣
⎡
⎥⎦
⎤
⎢⎣
⎡
∑∑
=
=
n
l
n
k
ik
j
l
C
l
k
B
A
1
1
)
,
(
)
,
(
I
=
⎥
⎦
⎤
⎢
⎣
⎡
⎥⎦
⎤
⎢⎣
⎡
∑
∑
=
=
n
k
n
l
ik
j
l
C
l
k
B
A
1
1
)
,
(
)
,
(
I
= A ( BI C ).
Formula (d):  Since BI = –BI and CI = –CI, we have
AI ( BI CI ) =
⎥
⎦
⎤
⎢
⎣
⎡
⎥⎦
⎤
⎢⎣
⎡
∑
∑
=
=
n
k
n
l
)
j,l(
C
)
l,
k
(
B
)
k,i(
A
1
1
I
I
I
=
⎥
⎦
⎤
⎢
⎣
⎡
⎥⎦
⎤
⎢⎣
⎡
∑
∑
=
=
n
k
n
l
)
j,l(
C
|)
l,
k
(
B
|
)
k,i(
A
1
1
I
I
I
=
⎥
⎦
⎤
⎢
⎣
⎡
⎥⎦
⎤
⎢⎣
⎡
∑
∑
=
=
n
k
n
l
)
j,l(
C
|)
l,
k
(
B
|
|)
k,i(
A
|
1
1
I
I
I
=
⎥
⎦
⎤
⎢
⎣
⎡
⎥⎦
⎤
⎢⎣
⎡
∑∑
=
=
n
l
n
k
)
j,l(
C
|)
l,
k
(
B
||)
k,i(
A
|
1
1
I
I
I
=
⎥
⎦
⎤
⎢
⎣
⎡
⎥⎦
⎤
⎢⎣
⎡
∑∑
=
=
n
l
n
k
)
j,l(
C
)
l,
k
(
B
|)
k,i(
A
|
1
1
I
I
I

28
Fuzzy Set Theory •• 1
=
⎥
⎦
⎤
⎢
⎣
⎡
⎥⎦
⎤
⎢⎣
⎡
∑∑
=
=
n
l
n
k
)
j,l(
C
)
l,
k
(
B
)
k,i(
A
1
1
I
I
I
= ( AI BI ) CI.
We remark that in the formulas (a) and (b) established in part (10) above,
we do not have the following identities:
(a’)
AI ( B C ) = ( AI B ) C
(b’) ( A BI ) CI = A ( BI CI ), even if CI = −CI.
Counterexamples can be easily constructed.  For example, we can check with
the following matrices:
AI = 
⎥⎦
⎤
⎢⎣
⎡
−
−
−
[0,1]
1]
1,
[
[1,1]
1,1]
[
,
B = 
⎥⎦
⎤
⎢⎣
⎡
1
0
1
1
,
C = 
⎥⎦
⎤
⎢⎣
⎡
−
−
1
1
0
1
.
This example shows that (a’) does not hold:
AI ( B C ) = 
⎥⎦
⎤
⎢⎣
⎡
−
[0,1]
[0,1]
2,0]
[
[1,1]
≠
⎥⎦
⎤
⎢⎣
⎡
−
−
[0,1]
[0,1]
2,0]
[
1,3]
[
 = ( AI B ) C.
Theorem 1.13. Let 
1
I
A ,
2
I
A ,
1
I
B , and 
2
I
B  be interval matrices of the same 
dimension, with
1
I
A ⊆
1
I
B
and
2
I
A
⊆
2
I
B ,
and let X and Y  be intervals with X ⊆Y.  Then the relations
1
I
A *
2
I
A
⊆
1
I
B
*
2
I
B
and
X
1
I
A ⊆Y
1
I
B
hold for * ∈ { +, −, . }.
This result can be proved by using Theorem 1.2.
As a special case, we have
A ∈AI,
B ∈BI
⇒
A * B ∈AI * BI,
* ∈ { +, −, . }
and
x ∈X,
A ∈AI
⇒
x A ∈X AI.
We next recall the concepts of width and absolute value for an interval
from Definition 1.1, which are now used to define the width and absolute
value of an interval matrix.
Definition 1.5. Let AI = [AI(i,j)] be an interval matrix.  The real
nonnegative matrix
w(AI) = [ w(AI(i,j)) ]
is called the width of AI, and the real nonnegative matrix
|AI| = [ |AI(i,j)| ]
is called the absolute value of AI.
Some basic properties of width and absolute value of an interval matrix are 
now summarized in the following theorem. A proof can be given by
comparing it with Exercises P1.1 and P1.2.  In this theorem, we use the

1 •• Fuzzy Set Theory
29
standard partial ordering, defined for constant matrices by A ≤B, if and only
if A(i,j) ≤B(i,j) for all entries of A and B.
Theorem 1.14. Let AI and BI be interval matrices of the same dimension.
Then
(1)
AI ⊆BI
⇒
w(AI) ≤ w(BI);
(2)
w(AI + BI) = w(AI) + w(BI);
(3)
w(AI) = 
IA
A~
,
A
sup
∈
|A~
A
| −
,
( |
A~
A−
| = [|
ij
ij
A~
A −
|] );
(4)
| AI | = 
IA
A
sup
∈
| A |,
( | A | = [ |Aij| ] );
(5)
AI ⊆BI ⇒| AI | ≤ | BI |;
(6)
| AI | ≥0, where | AI | = 0
if and only if AI = 0;
(7)
| AI + BI | ≤ | AI | + | BI |;
(8)
| a AI | = | AI a | = |a| | AI |, (a = real number);
(9)
| AI BI | ≤ | AI | | BI |;
(10) w( AI BI ) ≤ w( AI ) | BI |  +  | AI | w( BI );
(11) w( AI BI ) ≥ | AI | w( BI )
and
w( AI BI ) ≥ | BI | w( AI );
(12) w( a AI ) = | a | w( AI ),
(a = real number);
(13) w( A AI ) = | A | w( AI )
and   w( AI A ) = w( AI ) | A |;
(14) 0 ∈AI ⇒ | AI | ≤ w( AI ) ≤ 2 | AI |;
(15) AI = –AI ⇒AI BI = AI | BI | ;
(16) 0 ∈AI and 0 ∉BI ⇒ w( AI BI ) = w( AI ) | BI |.
We next recall the measure theory of intervals, particularly the concept of
distance between two intervals given in Definition 1.3.  Using this distance,
we can define the distance between two interval matrices.
Definition 1.6. Let AI and BI be two interval matrices.  The real
nonnegative matrix
D(AI,BI) = [ d(AI(i,j),BI(i,j)) ]
is called the distance  between AI and BI.
The following results can be easily verified.
Theorem 1.15. Let AI, BI, CI, and DI be interval matrices of appropriate
dimensions.  Then
(1)
D(AI,BI) = 0 if and only if AI = BI;
(2)
D(AI,BI) ≤D(AI,CI) + D(CI,BI);
(3)
D(AI+CI,BI+CI) = D(AI,BI);
(4)
D(AI+BI,CI+DI) ≤D(AI,CI) + D(BI,DI);
(5)
D(AIBI,AICI) ≤ | AI | D(BI,CI).
With the help of a distance, we can then use a monotonic matrix norm
(e.g., the ordinary spectral norm),  || ⋅ ||, to define a metric for a family of
interval matrices.  For instance, we can use || D(AI,BI) || as a metric.  Under
this metric, we can introduce the concept of normed linear space for interval
matrices, which can be a complete metric space.  Consequently, the concept of 
convergence can also be introduced, which is equivalent to the convergence of 

30
Fuzzy Set Theory •• 1
individual entries of the sequence of interval matrices.  More precisely, we
have the following.
Definition 1.7. A sequence 
∞
=1
)
( }
{
n
n
AI
 of p×m interval matrices is said to
converge to an interval matrix AI, denoted
∞
→
nlim
)
n
(
AI
 = AI,
if for all entries of 
,
)
(n
AI
 we have
∞
→
nlim
)
n
(
AI
(i,j) = AI(i,j), 1 ≤i ≤p, 1 ≤j ≤m.
As a consequence of Theorems 1.6 and 1.7, we have the following.
Corollary 1.4. Let 
∞
=1
)
( }
{
n
n
AI
 be a sequence of n×m interval matrices such 
that
L
⊇
⊇
⊇
)
3
(
)
2
(
)1(
I
I
I
A
A
A
Then
∞
→
nlim
)
n
(
AI
 = AI, where
AI(i,j) = I
∞
=1
n
)
n
(
AI
(i,j), 1 ≤i ≤p, 1 ≤j ≤m.
Corollary 1.5. The interval matrix operations {+,−,.} introduced in this
section are continuous functions of interval matrices.
Corollary 1.6. For interval matrices AI, BI, CI, and DI, we have the
following inclusion monotonic property:
AI ⊆CI and BI ⊆DI ⇒AI ∩BI ⊆CI ∩DI .
Moreover, this intersection operation is a continuous function of interval
matrices.
H. Interval Matrix Equations and Interval Matrix Inversion
In this section, we consider the problem of solving an interval matrix
equation, namely, finding a solution matrix XI such that for given interval
matrices AI and BI, we have
AI XI = BI.
Usually, BI is an interval vector, and so is XI (if it exists). Let
S = { X | AX = B, A ∈AI, B ∈BI }
be the solution set of the problem.  If the problem has no solutions, then S =
∅.  To have some idea about this general problem of solving an interval
matrix equation, we first consider the following specific example.
Example 1.9. Let
AI = 
⎥⎦
⎤
⎢⎣
⎡
[2,3]
[1,2]
[0,1]
[2,3]
and
BI = 
⎥⎦
⎤
⎢⎣
⎡
[60,240]
[0,120] .
Find XI = 
⎥⎦
⎤
⎢⎣
⎡
)
2
(
)1(
I
I
X
X
 with XI(1) ≥ 0 and XI(2) ≥ 0, such that AIXI = BI.
We first write

1 •• Fuzzy Set Theory
31
⎩
⎨
⎧
=
+
=
+
],
240
,
60
[
)
2
(
]
3,2
[
)1(
]
2,1[
]
120
,0
[
)
2
(
]1,0
[
)1(
]
3,2
[
I
I
I
I
X
X
X
X
which implies that
0 ≤ 2 XI(1) ≤ 120,
0 ≤ 3 XI(1) + XI(2) ≤ 120,
60 ≤XI(1) + 2 XI(2) ≤ 240,
60 ≤ 2 XI(1) + 3 XI(2) ≤ 240.
If XI = X is a constant vector in the solution set S, then it must satisfy the
property that the interval on the left-hand side of the equation AIXI = BI
intersects the interval on the right-hand side of the equation.  It follows from
the first inequality that
XI(1) ≥ 0
and
XI(1) ≤ 60.
Since XI(2) ≥ 0 by assumption, we see that the second inequality
0 ≤ 3 XI(1) + XI(2)
is satisfied.  We then look at all the extremal cases (boundary lines):
(a)
XI(1) = 0
(b)
XI(2) = 0
(c)
XI(1) = 60
(d)
3XI(1) + XI(2) = 120
(e)
XI(1) + 2XI(2) = 60
(f)
XI(1) + 2XI(2) = 240
(g)
2XI(1) + 3XI(2) = 60
(h)
2XI(1) + 3XI(2) = 240,
which together yield the following results (note that XI(1) = XI(2) = 0 is not a 
solution):
(i)
XI(1) = 0
(from (a)), and
XI(2) = 120
(from (d))
⇒
(XI(1),XI(2)) = (0,120);
XI(2) = 30
(from (e))
⇒
(XI(1),XI(2)) = (0,30);
XI(2) = 120
(from (f))
⇒
(XI(1),XI(2)) = (0,120);
XI(2) = 20
(from (g))
⇒
(XI(1),XI(2)) = (0,20);
X
XI
I
(2)
(1)
50
100
50
100
150
Figure 1.7
The polyhedron solution set of Example 1.9 with restrictions.

32
Fuzzy Set Theory •• 1
XI(2) = 80
(from (h))
⇒
(XI(1),XI(2)) = (0,80);
(ii)
XI(1) = 60
(from (c)), and
XI(2) = −60
(from (d))
⇒
contradicts XI(2) ≥ 0;
XI(2) = 0
(from (e))
⇒
(XI(1),XI(2)) = (60,0);
XI(2) = 90
(from (f))
⇒
(XI(1),XI(2)) = (60,90);
XI(2) = −20
(from (g))
⇒
contradicts XI(2) ≥ 0;
XI(2) = 40
(from (h))
⇒
(XI(1),XI(2)) = (60,40);
(iii)
XI(2) = 0
(from (b)), and
XI(1) = 40
(from (e))
⇒
(XI(1),XI(2)) = (40,0);
XI(1) = 60
(from (f))
⇒
(XI(1),XI(2)) = (60,0);
XI(1) = 240
(from (g))
⇒
contradicts XI(1) ≤ 60;
XI(1) = 30
(from (h))
⇒
(XI(1),XI(2)) = (30,0);
XI(1) = 120
(from (h))
⇒
contradicts XI(1) ≤ 60.
The solution set S is located inside all these boundary lines, as shown in
Figure 1.7.
If we do not restrict the solution set to be with XI(1) ≥ 0 and XI(2) ≥ 0, then 
the solution set  for the interval matrix equation AIXI = BI, namely,
⎥⎦
⎤
⎢⎣
⎡
]
3,2
[
]
2,1[
]1,0
[
]
3,2
[
⎥⎦
⎤
⎢⎣
⎡
)
2
(
)1(
I
I
X
X
 = 
⎥⎦
⎤
⎢⎣
⎡
]
140
,
60
[
]
120
,0
[
is visualized by Figure 1.8, which is, however, very difficult to find without
using a computer.
In general, a solution set S of an interval matrix equation AIXI = BI is not a 
convex bounded set, but its intersection with each othrant of Rn is a convex
polyhedron, where n is the dimension of the square matrix AI (or the
dimension of the interval vectors XI and BI).
Now, let us consider again the interval matrix equation
AIXI = BI,
where AI and BI are given n×m and n×1 interval matrix and vector,
respectively, and XI is to be determined.
The interval matrix AI is said to be regular if every A ∈AI is nonsingular.
In the above example, the matrix
AI = 
⎥⎦
⎤
⎢⎣
⎡
]
3,2
[
]
2,1[
]1,0
[
]
3,2
[
is regular.  Thus, we may expect to find XI by inverting AI as
XI = [AI]–1 BI,
as usually done in linear algebra.  In so doing, we have
det[AI] = [2,3][2,3] – [0,1][1,2] = [4,9] – [0,2] = [2,9],
so that
[AI]–1
=
]
det[
]
[
adj
I
I
A
A
 = 
]
9,2
[
]
3,2
[
]1
,2
[
]
0,1
[
]
3,2
[
⎥⎦
⎤
⎢⎣
⎡
−
−
−

1 •• Fuzzy Set Theory
33
=
⎥⎦
⎤
⎢⎣
⎡
−
−
−
]
2
/
3,9
/
2
[
]
9
/
1
,1
[
]
0,2
/
1
[
]
2
/
3,9
/
2
[
.
Consequently, we have
XI = [AI]–1 BI = 
⎥⎦
⎤
⎢⎣
⎡
−
−
]
360
,3
/
320
[
]
180
,
120
[
.
Note, however, that a better solution can be obtained by using another
approach (to be discussed below), that is,
*
I
X  = 
⎥⎦
⎤
⎢⎣
⎡
−
−
]
240
,
60
[
]
90
,
120
[
∈XI.
This means that the direct matrix inversion method [AI] = adj[AI] / det[AI]
gives a rather conservative interval matrix solution.
It is very important to point out that either XI or 
*
I
X  shown above only
gives an interval matrix solution that contains all the true solutions (namely,
the solution set S shown in Figures 1.7 or 1.8).  In other words, both XI and
*
I
X  are intervals that cover all true solutions in which 
*
I
X  is less conservative 
than XI.
We recall from Example 1.7 that the more interval operations we use, the
more conservative the result will be.  Hence, to find a less conservative
solution for the inverse matrix [AI]–1 for a regular interval matrix AI, we
should look for a method that uses less interval operations.  The so-called
Hansen inverse method provides one of such good approaches.
-50
-100
-50
-100
50
100
150
200
50
XI(1)
XI(2)
(-120,240)
(90,-60)
Figure 1.8
The polyhedron solution set of Example 1.9 without restrictions.

34
Fuzzy Set Theory •• 1
For a given regular interval matrix AI, to find its inverse [AI]–1, we first
write
AI = [A, A ] = [ A0 – ∆A, A0 + ∆A ],
where A0 = ½[A +A] and ∆A = ½[A –A] are the nominal matrix and
perturbation matrix, respectively, of AI.  We then find the inverse matrix
[AI]–1 via the following procedure.  For this purpose, we need a norm for an
interval matrix.  For any n×m interval matrix FI = [FI(i,j)], the norm that we
use is defined by
|| FI || = 
n
i
max
≤
≤
1
∑
=
m
j 1
| FI(i,j) |.
For example, if FI = 
⎥
⎥
⎦
⎤
⎢
⎢
⎣
⎡
]
,
[
]
,
[
]
,
[
]
,
[
4
4
3
3
2
2
1
1
f
f
f
f
f
f
f
f
, then
|| FI || = max{ max{ |f1| , |
1f | } + max{ |f2| , |
2f |},
max{ |f3| , |
3f | } + max{ |f4| , |
4f |} }.
The Hansen Matrix Inversion Algorithm
Step 1.
Choose Ar = A0 = ½[A +A] ∈AI.
Step 2.
Compute G = 
1
−
r
A
.
Note that G is contained in [AI]–1 by the inclusion monotonic
property.
Step 3.
Introduce the error matrix Er = I −ArG.  Obviously, Er = 0.  But 
we note that
Er = I −ArG ∈ I −AIG := EI,
where EI ≠0.  If || EI || < 1, then we have a convergent series
formula:
[ I −EI ]–1 = I + EI + 
2
I
E  + 
3
I
E  + ....
Step 4.
Compute
)
(m
SI
 and 
)
(m
PI
defined as follows.
First, we observe that since Er = 0, we formally have
1
−
r
A
= G [ I −Er ]–1
= G[I+Er+
2
r
E +
3
r
E +...+
m
r
E
+
1
+
m
r
E
+
2
+
m
r
E
+ ...]
= G[(I+Er+...+
m
r
E
)+
1
+
m
r
E
(I+Er+...)]
= G[I+Er(I+Er(I+...+Er(I+Er)...)) +
1
+
m
r
E
(I−Er)–1]
= G[
)
(m
r
S
 + 
1
+
m
r
E
(I−Er)–1 ]
= G[
)
(m
r
S
 + 
)1
(
+
m
r
R
 ],
where
||
)1
(
+
m
r
R
 || = || 
1
+
m
r
E
(I−Er)–1 || ≤
||
||
1
||
||
1
r
m
r
E
E
−
+
.

1 •• Fuzzy Set Theory
35
Since Er ∈EI, by the inclusion monotonic property we have
)1
(
+
m
r
R
∈
)1
(
+
m
RI
 and ||
)1
(
+
m
r
R
|| ≤ ||
)1
(
+
m
RI
||, where
||
)1
(
+
m
RI
 || = || 
1
+
m
EI
(I−EI)–1 || ≤
||
||
1
||
||
1
I
I
E
E
m
−
+
.
This inequality is what we need later.
Then, we construct an n×n interval matrix 
)
(m
PI
 with
identical entries of the form [–P,P], namely,
)
(m
PI
 = 
⎥
⎥
⎥
⎦
⎤
⎢
⎢
⎢
⎣
⎡
−
−
−
−
]
,
[
]
,
[
]
,
[
]
,
[
P
P
P
P
P
P
P
P
L
M
O
M
L
,
such that 
)1
(
+
m
RI
⊆
)
(m
PI
.  For instance, if 
)1
(
+
m
RI
 = 
⎥⎦
⎤
⎢⎣
⎡
−
−
]
2.0,1.0
[
]
4.0,2.0
[
]
2.0,1.0
[
]1.0,1.0
[
,
then
||
)1
(
+
m
RI
 || = max{ 0.1+0.2, 0.4+0.2 } = 0.6;
we can pick
)
(m
PI
 = 
⎥⎦
⎤
⎢⎣
⎡
−
−
−
−
]
6.0,6.0
[
]
6.0,6.0
[
]
6.0,6.0
[
]
6.0,6.0
[
.
In general, we can pick P = || EI ||m+1/( 1−|| EI || ) since ||
)1
(
+
m
RI
|| ≤
|| EI ||m+1/( 1−|| EI || ).  Thus we can rewrite
1
−
r
A
= G [ 
)
(m
r
S
 + 
)1
(
+
m
r
R
 ]
∈G [ 
)
(m
SI
 + 
)1
(
+
m
RI
 ]
⊆G [ 
)
(m
SI
 + 
)
(m
PI
 ]
=
)
(m
M I
,
where
)
(m
SI
 = I + EI(I + EI (I+...+EI (I + EI)...) ).
Step 5.
Answer:  The desired [AI]–1 is 
)
m
(
M I
.
Note that the inverse matrix so obtained is usually much less
conservative.  In summary, we have an effective formula for the
inverse of a regular interval matrix AI:
 [AI]–1 = G [ 
)
m
(
SI
 + 
)
m
(
PI
 ],
where
)
m
(
SI
 = I + EI (I + EI (I+...+EI (I + EI)...) ),

36
Fuzzy Set Theory •• 1
)
m
(
PI
 =
⎥
⎥
⎥
⎦
⎤
⎢
⎢
⎢
⎣
⎡
−
−
−
−
]
,
[
]
,
[
]
,
[
]
,
[
P
P
P
P
P
P
P
P
L
M
O
M
L
,
P = 
||
||
1
||
||
1
I
I
E
E
m
−
+
,
with
G = 
1
−
r
A
 (Ar ∈AI),
EI = I −AIG,
|| EI || = 
n
i
max
≤
≤
1
∑
=
m
j 1
| EI (i,j) |.
Example 1.10. Given
AI = 
⎥⎦
⎤
⎢⎣
⎡
−
−
]
01
.1,
999
.0
[
]
001
.0,
001
.0
[
]
001
.0,
001
.0
[
]
01
.1,
999
.0
[
.
Find [AI]–1.
Step 1.
We pick
Ar = 2
1 [AI,
I
A ] = 
⎥⎦
⎤
⎢⎣
⎡
0045
.1
0
0
0045
.1
,
where
AI = 
⎥⎦
⎤
⎢⎣
⎡
−
−
999
.0
001
.0
001
.0
999
.0
and
I
A  = 
⎥⎦
⎤
⎢⎣
⎡
010
.1
001
.0
001
.0
010
.1
.
Step 2.
Compute
G = 
1
−
r
A
 = 
⎥⎦
⎤
⎢⎣
⎡
9955201
.0
0
0
9955201
.0
.
Step 3.
Compute
Er = I −ArG = 0,
EI = I −AIG = 
⎥⎥
⎦
⎤
⎢⎢
⎣
⎡
×
×
−
×
×
−
×
×
−
×
×
−
−
−
−
−
−
−
−
−
]
10
475402
.5,
10
475283
.5
[
]
10
955202
.9,
10
955202
.9
[
]
10
955202
.9,
10
955202
.9
[
]
10
475402
.5,
10
475283
.5
[
3
3
4
4
4
4
3
3
,
and
|| Er || = 0 < 1,
|| EI || = max{ max{ |−5.475283×10–3|, |5.475283×10–3| }
+ max{ |−9.955202×10–4|, |9.955202×10–4| },
max{ |−5.475283×10–3|, |5.475283×10–3| } +
+ max{ |−9.955202×10–4|, |9.955202×10–4| } }

1 •• Fuzzy Set Theory
37
= 6.470881 ×10–3 < 1.
Step 4.
Compute
P = 
||
||
1
||
||
1
I
I
E
E
m
−
+
.
If we pick m = 1, say, then we have
P = 
2
2
2
10
294184
.1
1
)
10
294184
.1(
−
−
×
−
×
 = 4.2145 × 10–5,
and so we have
)1(
IP
 = 
⎥⎥
⎦
⎤
⎢⎢
⎣
⎡
×
×
−
×
×
−
×
×
−
×
×
−
−
−
−
−
−
−
−
−
]
10
2145
.4,
10
2145
.4
[
]
10
2145
.4,
10
2145
.4
[
]
10
2145
.4,
10
2145
.4
[
]
10
2145
.4,
10
2145
.4
[
5
5
5
5
5
5
5
5
.
Also, we have
)1(
I
S
 = I + EI = 
⎥⎥
⎦
⎤
⎢⎢
⎣
⎡
×
×
−
×
×
−
−
−
−
−
]
005475
.1,
994524
.0
[
]
10
955202
.9,
10
955202
.9
[
]
10
955202
.9,
10
955202
.9
[
]
005475
.1,
994524
.0
[
4
4
4
4
.
Step 5.
Answer:
 [AI]–1 =
)1(
I
M
 = G [ 
)1(
I
S
 + 
)1(
IP
 ] 
=
⎥⎦
⎤
⎢⎣
⎡
−
−
]
001013
.1,
990027
.0
[
]
001033
.0,
001033
.0
[
]
001033
.0,
001033
.0
[
]
001013
.1,
990027
.0
[
.
In this example, if we pick m = 2, then, we will obtain
 [AI]–1 = 
)
2
(
I
M
 = 
⎥⎦
⎤
⎢⎣
⎡
−
−
]
00100
.1,
990038
.0
[
]
001021
.0,
001021
.0
[
]
001021
.0,
001021
.0
[
]
00100
.1,
990038
.0
[
.
Obviously,
)
2
(
I
M
⊂
)1(
I
M
, giving a less conservative result to
the inverse matrix.  In the limit, we will have
)1(
I
M
⊃
)
2
(
I
M
⊃... ⊃ [AI]–1.
IV. OPERATIONS ON FUZZY SETS
A. Fuzzy Subsets
Let Sf be a fuzzy subset defined in a universe set S, together with a
membership function µSf(s), as shown in Figure 1.9.
Definition 1.8. The two subsets, Sα and 
α
S
, of Sf defined by
 Sα = { s ∈Sf | µSf (s) > α }
α ∈ [0,1)
α
S
 = { s ∈Sf | µSf(s) ≥α }
α ∈ (0,1]

38
Fuzzy Set Theory •• 1
are called the strong α-cut and weak α-cut, respectively.
The concept of α-cuts is visualized in Figure 1.10.
We remark that the weak α-cut is also called the α level-set, which is
easier to deal with in general.  We also remark that if the membership function 
is continuous, then the distinction of strong and weak α-cuts is not necessary
in applications. We only use α level-sets below.
Definition 1.9. A fuzzy subset Sf of S = R is convex if and only if every
ordinary subset (α level-set)
α
S
 = { s ∈Sf | µSf(s) ≥α }
α ∈ (0,1]
is convex, namely, for any s1, s2 ∈Sf and any λ ∈ [0,1],
µSf(λs1+(1−λ)s2) ≥ min{ µ Sf (s1), µ Sf(s2) }.
We remark that in Figure 1.10, S0.8 is convex but S0.6 is not.  If S = R and
the membership function is continuous, then the α level-set of a convex fuzzy 
set is a closed interval.
To proceed further, we need some new notation.  For two real numbers s1
and s2, we define
⎩
⎨
⎧
=
∨
=
∧
}.
,
max{
},
,
min{
2
1
2
1
2
1
2
1
s
s
s
s
s
s
s
s
Recall also that for a subset S of R, the ordinary characteristic function is
defined by
1.0
0.5
µSf(s)
s
Figure 1.9
A membership function associated with a fuzzy subset.
1.0
0.5
µSf(s)
s
S0.6 = Union of two subintervals
S0.8
Figure 1.10
Examples of α-cuts.

1 •• Fuzzy Set Theory
39
XS (s) = 
⎩
⎨
⎧
∉
∈
.
if
0
,
if
1
S
s
S
s
Theorem 1.16. Let Sf be a fuzzy subset with the membership function
µSf(s), and let XS be the characteristic function of the set S.  Then for any
s ∈Sf, we have
µSf(s) = 
]1,0
(
∈
α
sup { α ∧XS α (s) }
and
µSf(s) = 
)1,0
[
∈
α
sup { α ∧XS (s) }
Proof.  Since
XS α (s) = 
⎪⎩
⎪⎨
⎧
α
<
µ
∉
α
≥
µ
∈
α
α
),
)
(
.,
.
(
if
0
),
)
(
.,
.
(
if
1
s
e
i
S
s
s
e
i
S
s
f
f
S
S
we have, for each s ∈Sf,
]1,0
(
∈
α
sup { α ∧XS α (s) }
=
)]
(
,0
(
s
f
S
sup
µ
∈
α
{ α ∧XS α (s) } ∨
]1
),
(
(
s
f
S
sup
µ
∈
α
{ α ∧XS α (s) }
=
)]
(
,0
(
s
f
S
sup
µ
∈
α
{ α ∧ 1 } ∨
]1
),
(
(
s
f
S
sup
µ
∈
α
{ α ∧ 0 }
=
)]
(
,0
(
s
f
S
sup
µ
∈
α
{ α } ∨ 0
= µSf (s).
The other equality can be similarly proved.
Now, we introduce a new fuzzy subset, α
α
S
, by defining
α
α
S
 = { s ∈Sf | 
)
(s
Sα
α
µ
 = α ∧X S α (s) }.
Then, it can be verified that
1
α
0
R
µS(  )
s
f
µαSα_(  )
s
Figure 1.11
Graph of the function
)
(s
Sα
α
µ
.

40
Fuzzy Set Theory •• 1
Sf = U
]1,0
(
∈
α
α
α
S
,
which implies that the fuzzy subset has been completely decomposed into the
union of α
α
S
 for all α ∈ (0,1].  This is the Resolution Principle.
A few remarks are in order.  First, for the fuzzy subset α
α
S
 defined
above, we have
)
(s
Sα
α
µ
 = α ∧XS α (s) = 
⎩
⎨
⎧
∉
∈
α
α
α
.
if
,0
,
if
,
S
s
S
s
This is visualized in Figure 1.11.
Second, it is clear from Figure 1.11 that 
α1 < α2
⇒
1
1
α
α S
⊃
2
2
α
α S
.
Third, there is a one-to-one correspondence:
µSf(s)
1 1
−
←
→
⎯
⎯
α
α
S
α ∈ (0,1],
which means that a fuzzy subset can be defined and described by α-cuts only
(without using a membership function).  This is the so-called Representation
Theorem.
Next, we introduce the important Extension Principle.
Consider an ordinary function F:S→Y, mapping from an ordinary set S to
another ordinary set Y.  Let Sf be a fuzzy subset of S with an associated
membership function µSf(s), as shown in Figure 1.12.
Since Sf is a fuzzy subset, the image of Sf under F, namely, the subset F(Sf)
defined by
Yf = F(Sf) = { y ∈Y | y = F(s), s ∈Sf },
is also a fuzzy subset.  The question is: What is the membership function
µYf(y) associated with the fuzzy subset Yf?  The answer is: For any fixed y ∈Y,
there are some s ∈Sf satisfying y = f(s), and so we can define
µYf(y) = 
y
s
F
s
sup
=
)
(
:
µYf(s).
S
s
Y
F
y
Yf = F( Sf )
1
Sf
µSf(  )
s
s
Figure 1.12
An ordinary function together with a fuzzy subset.

1 •• Fuzzy Set Theory
41
In doing so, we have extended the domain and range of an ordinary function
from ordinary sets to fuzzy subsets.  This is the important Extension Principle,
where f is called an extended function.
Example 1.11. Consider the ordinary function
y = F(s) = –2s2 + 1,
with domain S = R and range Y = (–∞,1].  Suppose that Sf = [0,2] is a fuzzy
subset with the membership function shown in Figure 1.13.
The fuzzy subset Yf = F(Sf) is given via the interval arithmetic by
Yf
= F(Sf) = F([0,2]) = −2[0,2].[0,2] + 1
= −2[0,4] + 1 = [−8,0] + 1
= [−7,1].
The membership function µYf(s) associated with Yf is determined as follows.
Let y run through from –7 to 1. For each y, find the corresponding s ∈Sf
satisfying y = F(s). Then for all such s, calculate µYf(s):  if there is only one s
satisfying y = F(s), then
µYf(y) = µYf(s)
at this s; if there are more than one s satisfying y = F(s), then
µYf(y) = 
y
s
F
s
=
)
(
:
sup
µSf(s).
In this example, it is clear that for any y ∈ [−7,1], there is always one s ∈ [0,2] 
satisfying y = F(s) = –2s2 + 1.  Hence, it can be easily verified that the
y
1
1
2
µYf
(  )
y
1
3
4
5
6
7
−
−
−
−
−
−
−
Figure 1.14
The resulting membership function of Example 1.11.
1
y
R
F(  ) =   2    + 1
s
s2
−
1
1
−
1
−
s
1
1
2
µSf
(  )
s
0
Figure 1.13
An example of the Extension Principle.

42
Fuzzy Set Theory •• 1
membership function µYf(y) is as shown in Figure 1.14.  For example, when
s = 1/2, µSf(1/2) = 1 from Figure 1.13.  For this value of s, we have y =
−2(1/2)2 + 1 = 1/2.  Hence, we let µYf(1/2) = µSf(1/2) = 1, which yields the
point (y, µYf(y)) = (1/2,1) in Figure 1.14.  As another example, when s = 2, we 
have µSf(0) = 0 from Figure 1.13.  Then, y = −2(2)2 + 1 = −7.  At this value,
we let µYf(–7) = µSf(2) = 0, which yields the point (y, µYf(y)) = (–7,0) in Figure 
1.14. In the next section, we will show that there is an easier routine procedure 
to do such calculations.
If the ordinary function y = F(s) is one-to-one and onto, then its inverse
function exists:
s = F–1(y).  Using the fuzzy subset Yf and its associated
membership function µYf(y) introduced above, we can define the inverse image
of a fuzzy subset Wf ⊆Yf (see Figure 1.15) as follows.  Let
Vf = F–1(Wf) = { s ∈S | s = F–1(y), y ∈Wf}.
The question is, again, what is the membership function µVf(s) associated with 
the fuzzy subset Vf ?  To answer this question, we define
µVf(s) = µWf(s) |y=f(s) = µYf(y) |y=f(s),
where we don’t have to consider the “sup” on the right-hand side since F is
one-to-one, namely, there is always one and only one corresponding value.
If we consider Example 1.11 again, where y = F(s) = −2s2 + 1, which is
one-to-one from [0,2] to [−7,1], we see that the inverse image has the
membership function µSf(s) shown in Figure 1.13, which is obtained from
µVf(y) shown in Figure 1.14.
B. Fuzzy Numbers and Their Arithmetic
For a normal fuzzy subset, where the membership function is convex and
achieves the maximum number 1 with a convex fuzzy subset, if its weak α-cut
(α level-set) is a closed interval, then it is called a fuzzy number.  Hence, a
S
s
Y
F
Vf
-1
Yf
y
Wf
Figure 1.15
The inverse image of an ordinary function defined on a fuzzy
subset.

1 •• Fuzzy Set Theory
43
fuzzy number is a convex fuzzy subset, which has a normalized membership
function and represents an interval of confidence.
We remark that the fuzzy subset, with subset [0,∞) and the associate fuzzy 
membership function µ(x) = 1 – e–x, is considered to be normal.  Although this 
membership function does not attain the maximum value 1, it approaches 1 as 
a limit.  We consider all such fuzzy subsets as normal in this book.
For the arithmetic of fuzzy numbers, there is a general rule.
The General Rule. Let Sx and Sy be two fuzzy subsets of the universe set
S, Z ⊆R, and consider a two-variable extended function
F: Sx × Sx →Z.
Let Sz be the image of F, which is a fuzzy subset of Z as discussed above, and 
µSx(x), µSy(y), and µSz(z) be the associate membership functions.  Given µSx(x)
and µSy(y), we define
µSz(z) = 
)
,
(
sup
y
x
F
z=
{ µSx(x) ∧µSy(y) }.
The reason for choosing the smaller value in this definition is that when one
has two different degrees of confidence about two events, then the confidence
about both events together is lower. Using the α-cut notation, this is
equivalent to the following:
α
)
(
z
S
= F(
α
)
(
x
S
,
α
)
(
y
S
 ) 
= { z ∈Sz | z = F(x,y), x ∈
α
)
(
x
S
, y ∈
α
)
(
y
S
 }.
Now, given two fuzzy numbers x~  and y~ , which are two normal and
convex fuzzy subsets 
x
S~  and 
y
S~  with membership functions 
x
S~
µ
 and 
y
S~
µ
,
respectively, consider a two-variable function
F: X × Y →Z
defined by z = F(x,y), x ∈
x
S~ , y ∈
y
S~ , via the general operation rule. We
only discuss the fuzzy number arithmetic for addition, subtraction,
multiplication, division, minimum, and maximum operations. These results
will be needed in the next chapter.
(1)
Addition.  Let z = F(x,y) = x + y.  Then z~  = x~  + y~  with
z
S~  = { z ∈Z | z = x + y, x ∈
x
S~ , y ∈
y
S~  }
and
)
(
~ z
z
S
µ
 = 
y
x
z
+
=
sup  { 
)
(
~ x
x
S
µ
∧
)
(
~ y
y
S
µ
 }.
In the α-cut notation:
α
)
(
~z
S
 = F(
α
)
(
~x
S
,
α
)
(
~y
S
 ) = 
α
)
(
~x
S
 + 
α
)
(
~y
S
.
Example 1.12. Let x~  and y~  be such that
x
S~  = [–5,1],
y
S~  = [–5,12],
with associate membership functions shown in Figure 1.16:

44
Fuzzy Set Theory •• 1
)
(
~ x
x
S
µ
 = 
⎪
⎩
⎪
⎨
⎧
≤
≤
−
+
−
−
≤
≤
−
+
,1
2
,
3
1
3
,2
5
,
3
5
3
x
x
x
x
and
)
(
~ y
y
S
µ
 = 
⎪
⎪
⎪
⎩
⎪⎪
⎪
⎨
⎧
≤
≤
+
−
≤
≤
−
+
−
≤
≤
−
.
12
4
8
12
8
,4
3
7
3
7
,3
5
0
y
y
y
y
y
Then, by the general operation rule we have
z
S~  = 
x
S~  + 
y
S~  = [−5,1] + [−5,12] = [−10,13]
and, by comparing 
)
(
~ x
x
S
µ
 and 
)
(
~ y
y
S
µ
 pointwise, we obtain
)
(
~ z
z
S
µ
=
y
x
z
sup
+
=
{
)
(
~ x
x
S
µ
∧
)
(
~ y
y
S
µ
 }
=
⎪⎪
⎪
⎩
⎪⎪
⎪
⎨
⎧
≤
≤
+
−
≤
≤
−
+
−
≤
≤
−
.
13
2
,
11
13
11
,2
8
,
10
8
10
,8
10
,0
z
z
z
z
z
Here, it is clear that the general “sup” rule does not yield the explicit formulas 
easily.  In contrast, this resulting explicit formula of 
)
(
~ z
z
S
µ
 can be easily
obtained by using the equivalent α-cut operation as follows.
In the α-cut notation, for any α value, the α-cut of 
x
S~  is obtained by
letting α = x/3 + 5/3 and α = −x/3 + 1/3, respectively, which give x1 = 3α − 5 
and x2 = −3α + 1, as shown in (the enlarged) Figure 1.17.  Hence, the
projection interval is
α
)
(
~x
S
 = [x1,x2] = [3α − 5,−3α + 1].
Similarly,
1
1
0
0
-5
-5
-10
10
5
5
15
-15
x
y
µ
µ
Figure 1.16
Two membership functions.

1 •• Fuzzy Set Theory
45
α
)
(
~y
S
 = [7α − 3,−8α + 12],
so that
α
)
(
~z
S
 = 
α
)
(
~x
S
 + 
α
)
(
~y
S
 = [10α − 8,−11α + 13].
Setting z1 = 10α − 8 and z2 = −11α + 13 gives α = z1/10 + 8/10 and α =–z2/11
+ 12/11, which yield the membership function shown in Figure 1.18.
Taking
z
S~  = [−10,13] into account, we finally arrive at
)
(
~ z
z
S
µ
 = 
⎪⎪
⎪
⎩
⎪⎪
⎪
⎨
⎧
≤
≤
+
−
≤
≤
−
+
−
≤
≤
−
.
13
2
,
11
13
11
,2
8
,
10
8
10
,8
10
,0
z
z
z
z
z
 (2)
Subtraction.  Let z = F(x,y) = x −y.  Then z~  = x~ −y~  with
z
S~  = { z ∈Z | z = x −y, x ∈
x
S~ , y ∈
y
S~  }
and
1
α
-5
0
1
2
3
-2
µ
x1
x2
x
Figure 1.17
The α-cut of the membership function 
)
(
~ x
x
S
µ
.
1
-10
-5
0
5
10
15
z 1
z2
α
µ
α =   /10 + 8/10
1
α =      /11 + 13/11
2
−z
z
Figure 1.18
The resulting membership function of Example 1.12.

46
Fuzzy Set Theory •• 1
)
(
~ z
z
S
µ
 = 
y
x
z
sup
−
=
 { 
)
(
~ x
x
S
µ
∧
)
(
~ y
y
S
µ
 }.
In the α-cut notation:
α
)
(
~z
S
 = F(
α
)
(
~x
S
,
α
)
(
~y
S
 ) = 
α
)
(
~x
S
−
α
)
(
~y
S
.
Example 1.13. Let x~  and y~  be such that
x
S~  = [0,20],
y
S~  = [0,10],
with the membership functions
)
(
~ x
x
S
µ
 = 
⎪
⎪
⎪
⎩
⎪⎪
⎪
⎨
⎧
≤
≤
≤
≤
+
−
≤
≤
−
≤
≤
,
20
19
,0
,
19
14
,
5
19
5
,
14
7
,1
7
,7
0
,0
x
x
x
x
x
x
and
)
(
~ y
y
S
µ
 = 
⎪⎪
⎪
⎩
⎪⎪
⎪
⎨
⎧
≤
≤
+
−
≤
≤
−
≤
≤
.
10
5
,2
5
,5
3
,
2
3
2
,3
0
,0
y
y
y
y
y
Then we have, via the interval arithmetic,
z
S~  = 
x
S~ –
y
S~  = [–10,20],
with
)
(
~ z
z
S
µ
 = 
⎪
⎪
⎪
⎩
⎪⎪
⎪
⎨
⎧
≤
≤
≤
≤
+
−
≤
≤
−
+
−
≤
≤
−
.
20
16
,0
,
16
9
7
16
7
,9
3
12
3
12
,3
10
,0
z
z
z
z
z
z
 (3)
Multiplication.  Let z = F(x,y) = x ⋅y.  Then z~  = x~ ⋅y~  with
z
S~  = { z ∈Z | z = x y, x ∈
x
S~ , y ∈
y
S~  }
and
)
(
~ z
z
S
µ
 = 
y
x
z
sup
⋅
=
 { 
)
(
~ x
x
S
µ
∧
)
(
~ y
y
S
µ
 }.
In the α-cut notation:
α
)
(
~z
S
 = F(
α
)
(
~x
S
,
α
)
(
~y
S
 ) = 
α
)
(
~x
S
.
α
)
(
~y
S
.
Example 1.14. Let x~  and y~  be such that
x
S~  = [2,5],
y
S~  = [3,6],
with the membership functions

1 •• Fuzzy Set Theory
47
)
(
~ x
x
S
µ
 = 
⎪⎩
⎪⎨
⎧
≤
≤
+
−
≤
≤
−
,5
3
,
2
5
2
,3
2
,2
x
x
x
x
and
)
(
~ y
y
S
µ
 = 
⎪⎩
⎪⎨
⎧
≤
≤
+
−
≤
≤
−
,6
5
,6
,5
3
,
2
3
2
y
y
y
y
as shown in Figure 1.19.
In the α-cut notation, for any α value, letting
α = x – 2
and
α = −2
x  + 2
5
gives
x1 = α + 2
and
x2 = –2α + 5,
so that
α
)
(
~x
S
 = [ α + 2, –2α + 5 ].
Similarly,
1
1
2
3
4
5
6
1
1
2
3
4
5
6
x
y
µ
µ
Figure 1.19
Two membership functions for Example 1.14.
0.5
1.0
5
10
15
20
25
30
2α
2 − 17α + 30
−4α
2 + 4α + 15
−α
2 + 4α + 12
2α
2 + 7α + 6
α
Figure 1.20
The intermediate membership functions of Example 1.14.

48
Fuzzy Set Theory •• 1
α
)
(
~y
S
 = [ 2α + 3, –α + 6 ].
It then follows that
z
S~  = [6,30]
and
α
)
(
~z
S
=
α
)
(
~x
S
⋅⋅
α
)
(
~y
S
= [α + 2, –2α + 5 ] ⋅⋅ [ 2α + 3, –α + 6 ]
= [p(α),
)
(α
p
],
where
p(α) = min{2α2+7α+6,–α2+4α+12,–4α2+4α+15,2α2–17α+30},
)
(α
p
= max{2α2+7α+6,– α2+4α+12,–4α2+4α+15,2α2–17α+30},
with the curves shown in Figure 1.20.
Hence, p(α) = 2α2+7α+6, and 
)
(α
p
= 2α2–17α+30, so that
α
)
(
~z
S
= [p(α),
)
(α
p
]
= [ 2α2+7α+6, 2α2–17α+30 ].
Let, moreover,
z1 = 2α2+7α+6,
z2 = 2α2–17α+30.
We solve them for α, subject to 0 ≤α ≤ 1, and obtain
α = 
4
8
1
7
1z
+
+
−
,
or
α = 
4
8
49
17
2z
+
−
.
Consequently, we have
)
(
~ z
z
S
µ
 = 
⎪
⎪
⎩
⎪⎪
⎨
⎧
≤
≤
+
−
≤
≤
+
+
−
,
30
15
,
4
8
49
17
,
15
6
,
4
8
1
7
z
z
z
z
as shown in Figure 1.21.
5
10
15
20
25
30
1
µ
z
Figure 1.21
The resulting membership function of Example 1.14.

1 •• Fuzzy Set Theory
49
(4)
Division.  Let z = F(x,y) = y
x .  Then z~  = y
x
~
~
 with
z
S~  = { z ∈Z | z =x/y, x ∈
x
S~ , y ∈
y
S~  }
and
)
(
~ z
z
S
µ
 = 
y
x
z
sup
/
=
 { 
)
(
~ x
x
S
µ
∧
)
(
~ y
y
S
µ
 }.
In the α-cut notation:
α
)
(
~z
S
 = F(
α
)
(
~x
S
,
α
)
(
~y
S
 ) = 
α
α
)
(
)
(
~
~
y
x
S
S
.
Example 1.15. Let x~ and y~  be such that
x
S~  = [18,33],
y
S~  = [5,8],
with the membership functions
)
(
~ x
x
S
µ
 = 
⎪
⎩
⎪
⎨
⎧
≤
≤
+
−
≤
≤
−
,
33
22
,3
11
,
22
18
,
4
18
4
x
x
x
x
and
)
(
~ y
y
S
µ
 = 
⎪⎩
⎪⎨
⎧
≤
≤
+
−
≤
≤
−
,8
6
,4
2
,6
5
,5
y
y
y
y
as shown in Figure 1.22.
In the α-cut notation, let
α = 4
x – 4
18
and
α = – 11
x  + 3.
We obtain
x1 = 4α + 18
and
x2 = −11α + 33,
so that
α
)
(
~x
S
 = [ 4α + 18, –11α + 33 ].
Similarly,
α
)
(
~y
S
 = [ α + 5, –2α + 8 ].
x
y
5
10
15
20
25
30
35
5
10
0.5
1.0
0.5
1.0
µ
µ
Figure 1.22
The two membership functions for Example 1.15.

50
Fuzzy Set Theory •• 1
Hence,
α
)
(
~z
S
=
α
α
)
(
)
(
~
~
y
x
S
S
 = 
]
8
2
,5
[
]
33
11
,
18
4
[
+
α
−
+
α
+
α
−
+
α
=
⎥⎦
⎤
⎢⎣
⎡
+
α
+
α
−
+
α
−
+
α
5
33
11
,
8
2
18
4
.
Next, letting
z1 = 
8
2
18
4
+
α
−
+
α
and
z2 = 
5
33
11
+
α
+
α
−
gives
α =
4
2
18
8
1
1
+
−
z
z
and
α =
11
33
5
2
2
+
+
−
z
z
,
so that
)
(
~ z
z
S
µ
 = 
⎪
⎩
⎪
⎨
⎧
≤
≤
+
+
−
≤
≤
+
−
,
5
33
3
11
,
11
33
5
,
3
11
4
9
,
4
2
18
8
z
z
z
z
z
z
as shown in Figure 1.23.
 (5)
Minimum and Maximum.  Let x~  and y~  be two fuzzy numbers with
x
S~  = [a,b] and 
y
S~  = [c,d], and with membership functions
)
(
~ x
x
S
µ
and
)
(
~ y
y
S
µ
, respectively.  For any α value, let us denote
a
b
c
d
1
a
b
c
d
1
Minimum
Maximum
µSx~
µSy~
µSy~
µSx~
Figure 1.24
Fuzzy minimum and fuzzy maximum membership functions.
2
3
1
4
5
6
7
9/4
11/3
33/5
Figure 1.23
The resulting membership function of Example 1.15.

1 •• Fuzzy Set Theory
51
α
)
(
~x
S
 = [x(α), x (α)]
and
α
)
(
~y
S
 = [y(α), y (α)].
Then, the fuzzy minimum of x~  and y~  is defined to be z~  = x~ ∧y~ ,
with
z
S~  = [ min{a,c}, min{b,d} ]
and
)
(
~ z
z
S
µ
=
}
,
{
y
x
min
z
sup
=
 { 
)
(
~ x
x
S
µ
∧
)
(
~ y
y
S
µ
 }
=
y
x
z
∧
=∨{
)
(
~ x
x
S
µ
∧
)
(
~ y
y
S
µ
 }
In the α-cut notation:
α
)
(
~z
S
=
α
)
(
~x
S
∧
α
)
(
~y
S
= [ x(α) ∧y(α), x (α) ∧y (α) ].
Similarly, the fuzzy maximum of x~  and y~  is defined as z~  =
x~ ∨y~ , with
z
S~  = [ max{a,c}, max{b,d} ]
and
)
(
~ z
z
S
µ
=
y
x
z
∨
=∨ { 
)
(
~ x
x
S
µ
∧
)
(
~ y
y
S
µ
 }.
In the α-cut notation:
α
)
(
~z
S
=
α
)
(
~x
S
∨
α
)
(
~y
S
= [ x(α) ∨y(α), x (α) ∨y (α) ].
These two extrema are visualized in Figure 1.24. Graphically, if we
draw horizontal lines to cut the two membership functions, then the
resulting membership functions have all left-hand or right-hand
crossing points, respectively.
Example 1.16. Let x~  and y~  be such that
x
S~  = [–2,6],
y
S~  = [–4,5],
with the membership functions
)
(
~ x
x
S
µ
 = 
⎪
⎩
⎪
⎨
⎧
≤
≤
+
−
≤
≤
−
+
,6
0
,1
6
,0
2
,1
2
x
x
x
x
)
(
~ y
y
S
µ
 = 
⎪
⎩
⎪
⎨
⎧
≤
≤
+
−
≤
≤
−
+
,5
3
,
2
5
2
,3
4
,
7
4
7
y
y
y
y
as shown in Figure 1.25.

52
Fuzzy Set Theory •• 1
In the α-cut notation, following the procedure described above, we obtain
α
)
(
~x
S
 = [ 2α – 2, –6α + 6 ],
and
α
)
(
~y
S
 = [ 7α – 4, –2α + 5 ],
so that
α
)
(
~z
S
=
α
)
(
~x
S
∧
α
)
(
~y
S
= [ (2α – 2) ∧ (7α – 4), (–6α + 6) ∧ (–2α + 5) ]
=
⎪⎩
⎪⎨
⎧
≤
α
≤
+
α
−
−
α
≤
α
≤
+
α
−
−
α
≤
α
≤
+
α
−
−
α
,1
5
/
2
],
6
6
,2
2
[
,5
/
2
4
/
1
],
6
6
,4
7
[
,4
/
1
0
],
5
2
,4
7
[
in which by matching 2α – 2 = 7α – 4 and –6α + 6 = –2α + 5 we can find the 
switching points α = 1/4 and α = 2/5, respectively.  It then yields 
z
S~  = [–4,5],
with
)
(
~ z
z
S
µ
 = 
⎪
⎪
⎪
⎪
⎩
⎪⎪
⎪
⎪
⎨
⎧
≤
≤
+
−
≤
≤
+
−
≤
≤
−
+
−
≤
≤
−
+
−
,5
2
9
,
2
5
2
,
2
9
0
,1
6
,0
5
6
,1
2
,
5
6
4
,
7
4
7
z
z
z
z
z
z
z
z
as shown in Figure 1.26. Graphically, if we draw horizontal lines to cut the
two membership functions, then the resulting membership function has all
left-hand crossing points.
Similarly, it can be verified that
α
)
(
~z
S
=
α
)
(
~x
S
∨
α
)
(
~y
S
= [ (2α – 2) ∨ (7α – 4), (–6α + 6) ∨ (–2α + 5) ]
=
⎪⎩
⎪⎨
⎧
≤
α
≤
+
α
−
−
α
≤
α
≤
+
α
−
−
α
≤
α
≤
+
α
−
−
α
,1
5
/
2
],
5
2
,4
7
[
,5
/
2
4
/
1
],
5
2
,2
2
[
,4
/
1
0
],
6
6
,2
2
[
and
5
0
-5
1
5
0
-5
1
µ
µ
x
y
Figure 1.25
Two membership functions in Example 1.16.

1 •• Fuzzy Set Theory
53
)
(
~ z
z
S
µ
 = 
⎪
⎪
⎪
⎪
⎩
⎪⎪
⎪
⎪
⎨
⎧
≤
≤
+
−
≤
≤
+
−
≤
≤
−
+
−
≤
≤
−
+
,6
2
9
,1
6
,
2
9
3
,
2
5
2
,3
5
6
,
7
4
7
,
5
6
2
,1
2
z
z
z
z
z
z
z
z
as shown in Figure 1.27. Graphically, if we draw horizontal lines to cut the
two membership functions, then the resulting membership function has all
right-hand crossing points.
5
0
-5
1
µ
z
Figure 1.26
The resulting fuzzy minimum membership function.
5
0
-5
1
µ
z
Figure 1.27
The resulting fuzzy maximum membership function.

54
Fuzzy Set Theory •• 1
PROBLEMS
P1.1
Verify the following properties of the absolute value of an interval:
(1)
| X | ≥ 0 and | X | = 0 if and only if X = 0 = [0,0];
(2)
| X + Y | ≤ | X | + | Y |;
(3)
| λX | = | λ | | X |,
λ ∈ R;
(4)
| XY | = | X | | Y |;
(5)
X ⊆Y implies | X | ≤ | Y |.
P1.2
Verify the following properties of the width of an interval:
(1)
w{ X } = | X −X |;
(2)
X ⊆Y implies w{ X } ≤ w{ Y };
(3)
w{ X ± Y } =  w{ X } + w{ Y };
(4)
w{ λX } = | λ | w{ X },
λ ∈ R;
(5)
| X | ≤ w{ X } ≤ 2 | X |, if 0 ∈X.
P1.3
The remark given prior to Example 1.4 shows that
Z(x+y) ≠Zx + Zy
for some points x and y.  Theorem 1.1, part 7(c), shows that generally 
we have
Z(x+y) ⊆Zx + Zy.
However, someone tries to show the equality by the following
argument:
Z(x+y)
= { z.(x+y) | z ∈Z }
= { z.x + z.y | z ∈Z }
= Zx + Zy.
What is wrong with this proof?
P1.4
Give an example to show that for a constant matrix A and two
interval matrices BI and CI of appropriate dimensions,
(ABI)CI ≠A(BICI)
even if CI = –CI.  This shows that the equality in Theorem 1.12, part 
(10), formula (b), does not hold in general.
P1.5
Consider the circuit
R1
R2
R3
V2
V1
+
−
−
+
I 1
I 2
In the normal case we have

1 •• Fuzzy Set Theory
55
⎥⎦
⎤
⎢⎣
⎡
+
+
3
2
2
2
2
1
R
R
R
R
R
R
⎥⎦
⎤
⎢⎣
⎡
2
1
I
I
 = 
⎥⎦
⎤
⎢⎣
⎡
2
1
V
V
.
Now, assume that V1 = 1, V2 = 0, but all the resistors have
uncertainties, so that
R1 = R2 = R3 = RI = [ 0.98, 1.02 ].
Find the interval solution of the current vector by using both the
direct matrix inversion method
⎥⎦
⎤
⎢⎣
⎡
2
1
I
I
 = [RI]–1
⎥⎦
⎤
⎢⎣
⎡
2
1
V
V
 = 
]
det[
]
[
adj
I
I
R
R
⎥⎦
⎤
⎢⎣
⎡
2
1
V
V
and the Hansen inverse method.  Compare your results.
P1.6
Verify Theorems 1.14 and 1.15.
P1.7*
Verify the Resolution Principle
Sf = U
]1,0
(
∈
α
α
αS
,
which is formulated and discussed in Section IV.A.
P1.8
Consider the ordinary real function
y = F(s) = −2s2 + 1
defined on a fuzzy set Sf = [−2,2] with the membership function
µSf(s) = 1 −1
4 s2, s ∈ [−2,2].
Find the fuzzy set Yf and its associate membership function µYf(y).
P1.9
Let Sx = [1,5] and Sy = [2,6] with fuzzy membership functions
⎩
⎨
⎧
≤
≤
−
≤
≤
−
=
µ
,5
2
,3
/)
5
(
,2
1
),
1
(
x
x
x
x
x
S
and
⎩
⎨
⎧
≤
≤
−
≤
≤
−
=
µ
,6
4
,2
/)
6
(
,4
2
,2
/)
2
(
y
y
y
y
y
S
respectively.  Compute the following six operations to obtain Sz and 
µSz:
z = F(x,y) = x * y for
* ∈ { +, −, ., /, max, min }.
P1.10
Consider Figure 1.20.  Can these four curves get crossed in a general 
case?  If so, show one example; if not, explain why (a few sentences
only).

56
Fuzzy Set Theory •• 1
REFERENCES
[1]
G. Alefeld and J. Herzberger. Introduction to Interval Computations.
New York, NY: Academic Press (1983).
[2]
A. Deif.
Sensitivity Analysis in Linear Systems.  New York, NY:
Springer-Verlag (1992).
[3]
E. Hansen.  “Interval Arithmetic in Matrix Computations, Part I.”
SIAM Journal of Numerical Analysis, Vol. 2 (1965), pp 308-320.
[4]
E. Hansen.  “On Linear Algebraic Equations with Interval
Coefficients.” Topics in Interval Analysis (E. Hansen, ed.).  Oxford, 
England:  Claredon Press (1969).
[5]
E. Hansen and R. Smith.  “Interval Arithmetic in Matrix
Computations, Part II.” SIAM Journal of Numerical Analysis, Vol. 4 
(1967), pp 1-9.
[6]
A. Kaufmann and M. M. Gupta. Introduction to Fuzzy Arithmetic:
Theory and Applications.  New York, NY: Van Nostrand Reinhold
(1991).
[7]
R. B. Kearfott. Rigorous Global Search: Continuous Problems.
Boston, MA: Kluwer Academic Publishers (1996).
[8]
G. J. Klir, U. H. St. Clair, and B. Yuan.
Fuzzy Set Theory:
Foundations and Applications.  Upper Saddle River, NJ: Prentice-
Hall PTR (1997).
[9]
R. E. Moore.
Methods and Applications of Interval Analysis.
Philadelphia, PA:  SIAM Press (1979).

CHAPTER 2
Fuzzy Logic Theory
Fuzzy logic is a logic. Logic refers to the study of methods and principles 
of human reasoning.
Classical logic, as common practice, deals with propositions (e.g.,
conclusions or decisions) that are either true or false.  Each proposition has an 
opposite.  This classical logic, therefore, deals with combinations of variables
that represent propositions.  As each variable stands for a hypothetical
proposition, any combination of them eventually assumes a truth value (either
true or false), but never is in between or both (i.e., is not true and false at the
same time).
The main content of classical logic is the study of rules that allow new
logical variables to be produced as functions of certain existing variables.
Suppose that n logical variables, x1, ..., xn , are given, say
x1
is true;
x2
is false;
M
xn
is false.
Then a new logical variable, y, can be defined by a rule as a function of x1, ..., 
xn that has a particular truth value (again, either true or false).  One example of
a rule is the following:
Rule:
IF x1 is true AND x2 is false AND ... AND xn is false
THEN y is false.
Because one, and only one truth value (either true or false) is assumed by a 
logical function of a (finite) number of logical variables (hypothetical
propositions), the classical logic is also called a two-valued logic.
The fundamental assumption upon which the classical logic is based is that 
every proposition is either true or false.  This principle has been questioned by 
many philosophers, ever since Aristotle (in his treatise On Interpretation).
It is now well understood and well accepted that many propositions are
both partially true and partially false.  To describe such partial truth values by 
some new rules, in a way to extend and generalize the two-valued logic, multi-
valued logics were proposed and developed.  As the first attempt, several
three-valued logics have now been well established, with their own rationale.
It is common in these logics to introduce a “neither” in between “true” and
“false.” It has turned out that three-valued logics are successful both logically
and mathematically. Motivated by the useful three-valued logics, n-valued
logics were developed in the 1930s.  In particular, the n-valued logic of
Lukasiewicz even allows n = ∞.
It has lately been understood that there exists an isomorphism between the
two-valued logic and the crisp set theory, and, similarly, there is an

58
Fuzzy Logic Theory •• 2
isomorphism between the Lukasiewicz logic and the fuzzy set theory.  In fact, 
the isomorphism for the former is the standard characteristic function
y = XA(x) =
⎩
⎨
⎧
∉
∈
,
if
0
,
if
1
A
x
A
x
which can be interpreted as
y  =
⎩
⎨
⎧
false;
is
if
false
,
true
is
if
true
x
x
and the latter is a fuzzy membership function, which has been thoroughly
studied in Chapter 1.
In this chapter, we study in somewhat detail the classical two-valued logic
and its operations (the Boolean algebra), a three-valued logic, an n-valued
logic (the Zadeh-Lukasiewicz logic with n = ∞), and the fuzzy logic.  Since
the ultimate goal of developing the fuzzy logic is to provide foundations for
approximate reasoning, approximate reasoning using fuzzy logic will also be
discussed briefly in this chapter. Finally, two important topics, fuzzy relation
and fuzzy logic rule base, are studied. In particular, fuzzy logic rule base is the
core for fuzzy systems and fuzzy control – the main subjects to be studied in
detail in the rest of the book.
I. CLASSICAL LOGIC THEORY
A. Fundamental Concepts
To introduce the basic concepts in the classical logic theory, we consider a 
typical example of a process (a system, or a plant) that is operated by a
console consisting of a lock (with a key) and an ON-OFF switch as shown in
Figure 2.1.
For this console, we use L to denote the situation of the lock:
L = 
⎩
⎨
⎧
locked.
is
console
the
if
0
unlocked,
is
console
the
if
1
lock
key
ON
OFF
switch
Figure 2.1
A console lock with a switch.

2 •• Fuzzy Logic Theory
59
The two digits, 0 and 1, are used here to represent the two states of the logical 
variables. L, S, and P are logical functions, which only assume one of these
two values, 0 or 1.
After the logical variables and functions are defined, it is common practice 
to establish a truth table for their relationships and possible outcomes of the
relations.  This truth table displays all rules of the two-valued logic for the
particular problem in consideration.  For this console example, we have the
truth table shown as in Table 2.1, which is sometimes called a look-up table.
On the other hand, we use S to denote the state of the switch:
S = 
⎩
⎨
⎧
.
is
switch
the
if
0
,
is
switch
the
if
1
OFF
ON
Moreover, we use P to denote the status of the process:
P =
⎩
⎨
⎧
down.
shut
is
process
the
if
0
running,
is
process
the
if
1
In Table 2.1, it is important to point out that the process P is an input (the 
current status) as well as an output (the resulting status), where its current
status may affect its future status.  For example, if L = 0 (the key is not in the 
lock, or the console is locked), then the process will remain its current status,
regardless of the state of the ON-OFF switch.
A truth table is interpreted row by row.  For instance, the fourth row of
Table 2.1 is interpreted as follows:
IF the key is in the lock (the console is unlocked)
AND the switch is turned to OFF
AND the process is currently running
THEN the process will be shutdown.
This is a rule.  In general, a rule may have any number of inputs and
outputs like
IF (input 1) AND (input 2) AND ... AND (input n)
THEN (output 1) AND (output 2) AND ... AND (output m).
Table 2.1
Truth Table for the Console-Controlled Process
Inputs
Outputs
L
S
P
P
0
0
1
1
0
0
1
1
0
0
0
0
1
1
1
1
0
1
0
1
0
1
0
1
0
1
0
0
0
1
1
1

60
Fuzzy Logic Theory •• 2
From this simple example, one can see that a classical logic string consists 
of several two-valued inputs, several rules, and several two-valued outputs.  It 
will be seen later that fuzzy logic has the same structure except that both the
inputs and outputs are n-valued, with n ≥ 2 (probably, n = ∞).
As a second example, let us consider the push-button switch shown in
Figure 2.2.
For this push-button switch, we use L to denote the situation of the ON
button:
L = 
⎩
⎨
⎧
released.
is
button
the
if
0
depressed,
is
button
the
if
1
ON
ON
On the other hand, we use S to denote the state of the OFF button:
S = 
⎩
⎨
⎧
released.
is
button
the
if
0
depressed,
is
button
the
if
1
OFF
OFF
Finally, we use P to denote the status of the process under control:
P = 
⎩
⎨
⎧
down.
shut
is
process
current
the
if
0
running,
is
process
current
the
if
1
Then, one can easily establish the truth table for this push-button control
process, as shown in Table 2.2.
It is important and interesting to compare Tables 2.1 and 2.2.  The most
significant difference can be seen from the last rows of the two tables, in
ON
OFF
Figure 2.2
A push-button switch.
Table 2.2
Truth Table for the Console-Controlled Process
Inputs
Outputs
L
S
P
P
0
0
0
0
1
1
1
1
0
0
1
1
0
0
1
1
0
1
0
1
0
1
0
1
0
1
0
0
1
1
0
0

2 •• Fuzzy Logic Theory
61
which the three inputs (1,1,1) produce an output 1 in Table 2.1 but an output 0 
in Table 2.2.  The reason is that S = 1 means “ON” in Table 2.1 but it means
“OFF” in Table 2.2, due to the nature of the two different switches.
B. Logical Functions of the Two-Valued Logic
Suppose that we are given n logical variables, x1, ..., xn.  These n variables 
can have 2n different combinations of truth values.  Hence, there are a total of 
22n possible logical functions defining these variables.  For example, for n = 2, 
there are 22 = 4 combinations of logical variables: (1,1), (1,0), (0,1), and (0,0).
The 222 = 16 logical functions are listed in Table 2.3, where the resulting
logical variables are denoted by y1, ..., y16.  Logical functions of one or two
variables are usually called logical operations.
It can be seen from Table 2.3 that the number of logic functions of n
variables grows extremely rapidly with increasing values of n.  However, it is
known that the logical functions listed in Table 2.3, and those created from
Table 2.3
Logic Functions of Two Variables
x1
x2
1  0  1  0
1  1  0  0
Name of Function
Symbol
y1
0  0  0  0
zero function
0
y2
0  0  0  1
nor (not-or) function
x1 ∨x2
y3
0  0  1  0
proper inequality
x1 ←x2
y4
0  0  1  1
negation
2
x
y5
0  1  0  0
proper inequality
x1 →x2
y6
0  1  0  1
negation
1x
y7
0  1  1  0
nonequivalence
x1
x2
y8
0  1  1  1
nand (not-and) function
x1 ∧x2
y9
1  0  0  0
and function
x1 ∧x2
y10
1  0  0  1
equivalence
x1 ⇔x2
y11
1  0  1  0
identity
x1
y12
1  0  1  1
implication
x1 ⇐x2
y13
1  1  0  0
identity
x2
y14
1  1  0  1
implication
x1 ⇒x2
y15
1  1  1  0
or function
x1 ∨x2
y16
1  1  1  1
unity
1

62
Fuzzy Logic Theory •• 2
them, can be obtained from a set of few primary logical functions.  Two sets
of primary logical functions are: (i) negation, and function, and or function;
(ii) negation and the two implications.  Using either set of primary logical
functions, we can form any other logical functions via appropriate algebraic
expressions, called logical formulas.  For example, using the first set of
primary logical functions, namely, negation −, and function ∧, and or function
∨, logical formulas can be defined recursively as follows:
(a) The truth values 0 and 1 are logical formulas.
(b) If x is a logical variable, then both x and x are logical formulas.
(c) If x1 and x2 are logical formulas, then both x1 ∧x2 and x1 ∨x2 are
logical formulas.
(d) The only logical formulas are those defined by (a), (b), and (c).
Then, every logical formula of this type defines a logical function by
composing it from the three primary logical functions −, ∧, and ∨.  To define a 
unique function, the composition order must be specified, say using
parentheses.  For example,
(
1x ∨
2
x  ) ∧ ( x1 ∨
3x  ) ∧ ( x2 ∨x3 )
defines a unique logical function of three variables.  When two logical
formulas a and b are equivalent, we usually write a = b.  For instance, one has
(
1x ∧
2
x  ) ∨ ( x1 ∧
3x  ) ∨ ( x2 ∧x3 )
= ( 
2
x
∧
3x  ) ∨ ( 
1x ∧x3 ) ∨ ( x1 ∧x2 ).
This equivalence can be verified by evaluating each of the two formulas for all 
eight combinations of truth values of the logical variables x1, x2, and x3.  The
Boolean algebra to be studied in the next section can help simplify such
verifications.
II. THE BOOLEAN ALGEBRA
A. Basic Operations of the Boolean Algebra
An algebra of the two-valued logic is the Boolean algebra, named after the 
nineteenth-century English mathematician and logician George Boole.  In this
algebra, there are only three basic logic operations: negation ¬, and ∧, and or
∨.  For ease of algebraic operations, it is common to use symbols –, ⋅⋅, and +,
as summarized in Table 2.4.
A Boolean algebraic formula can be completely described by a truth table, 
where all the variables appearing in the formula are listed as inputs and the
value of the entire formula is the output.  Conversely, one can write Boolean
algebraic formulas for any truth table.  For example, returning to the console
lock example, the second, sixth, seventh, and eighth rows of Table 2.1 can be
written together in Boolean algebra as
Poutput = ( L ⋅⋅S ⋅⋅P ) + ( L ⋅⋅S ⋅⋅P ) + ( L ⋅⋅ S ⋅⋅P  ) + (L ⋅⋅ S ⋅⋅P ),
which is the same as the logic formula
Poutput = ( L ∧S ∧P) ∨ ( L ∧S ∧P) ∨ (L ∧ S ∧P ) ∨ (L ∧ S ∧P),

2 •• Fuzzy Logic Theory
63
and they both yield the same output Poutput = 1.  Indeed, we have
Poutput
= ( 0 ⋅⋅0 ⋅⋅1) + ( 0 ⋅⋅0 ⋅⋅1) + (0 ⋅⋅0 ⋅⋅1 ) + (0 ⋅⋅0 ⋅⋅0)
= (1 ⋅⋅1 ⋅⋅1) + (1 ⋅⋅0 ⋅⋅1) + (0 ⋅⋅0 ⋅⋅0) + (0 ⋅⋅0 ⋅⋅0)
= 1 + 0 + 0 + 0
= 1.
We remark that this Boolean algebraic formula can be reduced to a simple,
equivalent formula using some useful properties of the Boolean algebra to be
discussed in the next subsection.
B. Basic Properties of the Boolean Algebra
Basic and useful properties of the Boolean algebra are summarized in
Table 2.5, in which not all properties are necessary for an axiomatic
characterization of the Boolean algebra.
It is important to note that some rules of the Boolean algebra are the same
as those of the ordinary algebra, such as
a . 0 = 0,
a . 1 = a,
 and
a + 0 = a,
but some are quite different, e.g.,
a + 1 = 1.
Hence, one must be very careful not to fall into the trap of applying ordinary
algebraic rules to logical formulas.
Now, to show an application of the Boolean algebraic laws to simplifying
some complicated logic formulas, we return to the console lock example
discussed in the last subsection:
Poutput
= ( L ⋅S ⋅P ) + ( L ⋅S ⋅P ) + ( L ⋅S ⋅P ) + ( L ⋅S ⋅P ) 
=
L ⋅P ⋅ ( S  + S ) + S ⋅L ⋅ ( P  + P )
[Commutative and Distributive Laws]
=
L ⋅P ⋅ 1 + S ⋅L ⋅ 1
[Inclusion]
=
L ⋅P + S ⋅L
[Characteristics].
It can be easily seen that this final, simplified formula is equivalent to the
original one:  for the second row of Table 2.1, say, we have
Poutput
=
0 ⋅ 1 + 0 ⋅ 0 = 1 ⋅ 1 + 0 ⋅ 0 = 1 + 0 = 1,
and for the sixth row, we have
Poutput
=
0 ⋅ 1 + 1 ⋅ 0 = 1 ⋅ 1 + 1 ⋅ 0 = 1 + 0 = 1.
Table 2.4
Boolean Operations
Name
Symbol
Example
Meaning
AND
.
a . b
Both a and b must be true for the entire
formula to be true.
OR
+
a + b
If either a or b, or both, is true then the
entire formula is true.
NOT
−
a
If a is true then the entire formula is false; if 
a is false then the entire formula is true.

64
Fuzzy Logic Theory •• 2
Table 2.5
Properties of the Boolean Algebra
Laws
Formulas
Characteristics
a . 0 = 0
a . 1 = a
a + 0 = a
a + 1 = 1
Commutative Law
a + b = b + a
a . b = b . a
Associative Law
a + b + c = a + ( b + c) = ( a + b ) + c
a . b . c = a ( b . c ) = ( a . b ) . c
Distributive Law
a . ( b + c ) = a . b + a . c
Idempotence
a . a = a
a + a = a
Negation
a  = a
Inclusion
a ⋅a  = 0
a + a  = 1
Absorptive Law
a + a ⋅b = a
a ⋅ ( a + b ) = a
Reflective Law
a + a ⋅b = a + b
a ⋅ ( a  + b ) = a . b
a ⋅b + a ⋅b ⋅c = a ⋅b + b ⋅c
Consistency
a ⋅b + a ⋅b  = a
( a + b ) ⋅ ( a + b  ) = a
DeMorgan’s Laws
b
a ⋅
 = a  + b
b
a+  = a ⋅b
Table 2.6
Isomorphisms Among Classical Set Theory, Boolean Algebra, and
Classical Logic
Classical Set Theory
Boolean Algebra
Two-Valued Logic
∪
∩
−
S
∅
⊂
=
+
.
−
1
0
<
=
∨
∧
−
1
0
⇒
⇔

2 •• Fuzzy Logic Theory
65
We have to point out, however, that although the Boolean algebra is an
effective method for reducing a logical formula to its simplest possible form,
it can become quite tedious in real applications if many variables are involved 
in the formulas.
Finally, we note that there are interesting isomorphisms among the
classical set theory, the Boolean algebra, and the two-valued logic.  We list
their correspondences in Table 2.6.
III.
MULTI-VALUED LOGIC
A. Three-Valued Logic
The classical two-valued logic can be extended to a three-valued logic in
various ways, each having its own rationale.
In a typical three-valued logic, we denote the truth, falsity, and
indeterminacy by values of 1, 0, and 1/2, respectively.  The negation a  of a
proposition a is usually defined to be 1 −a. Thus, in this three-valued logic,
we have
1  = 0,
0  = 1,
and
)
2
/
1(
 = 1/2.
Other primary logical operations, such as ∧, ∨, ⇒, and ⇔, will differ from
one logic to another.  A commonly used three-valued logic is shown in Table
2.7.
Comparing the three-valued logic shown in Table 2.7 with the two-
valued logic, one can see that the only new operations are those involving the
new truth value 1/2.  It should also be clear that the three-valued logic does
not satisfy many basic operation laws of the two-valued logic, such as
a ∧a  = 0
and
a ∨a  = 1.
B. n-Valued Logic
Once a three-valued logic is accepted as a meaningful and useful tool for
applications, it is not difficult to further extend it to an n-valued logic, for 3 < 
n < ∞.  For a given finite positive integer, n > 3, an n-valued logic assumes a 
Table 2.7
A Three-Valued Logic
a
b
∧
∨
⇒
⇔
0
0
0
1/2
1/2
1/2
1
1
1
0
1/2
1
0
1/2
1
0
1/2
1
0
0
0
0
1/2
1/2
0
1/2
1
0
1/2
1
1/2
1/2
1
1
1
1
1
1
1
1/2
1
1
0
1/2
1
1
1/2
0
1/2
1
1/2
0
1/2
1

66
Fuzzy Logic Theory •• 2
rational truth value in the range [0,1], defined by the following equally spaced 
partition:
0 = 
1
0
−
n
,
1
1
−
n
,
1
2
−
n
, ..., 
1
2
−
−
n
n
,
1
1
−
−
n
n
 = 1. 
Each of these truth values describes a degree of truth.
The commonly used n-valued logic, particularly in fuzzy set and fuzzy
systems theories, is the Lukasiewicz-Zadeh n-valued logic.  Lukasiewicz
developed an n-valued logic in the 1930s, using only the negation − and the
implication ⇒ logical operations.  Based on that, one can define
a ∨b =  ( a ⇒b ) ⇒b,
a ∧b =
b
a ∨
,
a ⇔b = ( a ⇒b ) ∧ ( b ⇒a ).
The fuzzy set theory was developed by Zadeh in 1960s, which has been
thoroughly studied in Chapter 1.  To develop an n-valued logic, with 2 ≤n ≤
∞, such that it is isomorphic to the fuzzy set theory in the same way as the
two-valued logic is isomorphic to the classical set theory, Zadeh modified the
Lukasiewicz logic and established an infinite-valued logic, by defining the
following primary logic operations:
a
=
1 −a,
a ∧b
=
min{ a, b },
a ∨b
=
max{ a, b },
a ⇒b =
min{ 1, 1 + b −a },
a ⇔b =
1 − | a −b |.
It has been shown, in logic theory, that all these logical operations become 
the same as those for the two-valued logic when n = 2, and the same as those
for the three-valued logic shown in Table 2.7 when n = 3.  More importantly,
when n = ∞, this logic does not restrict the truth values to be rational: they can 
be any real numbers in [0,1].  It has also been shown that this infinite-valued
logic is isomorphic to the fuzzy set theory that employs the min, max, and 1−a
operation for fuzzy set intersection, union, and complement, respectively, in
the same way as the classical two-valued logic is isomorphic to the crisp set
theory. These verifications are beyond the scope of this text and, hence, are
omitted.
IV. FUZZY LOGIC AND APPROXIMATE REASONING
Fuzzy logic is a logic; its ultimate goal is to provide foundations for
approximate reasoning using imprecise propositions based on fuzzy set
theory, in a way similar to the classical reasoning using precise propositions
based on the classical set theory.
To introduce this notion, we first recall how the classical reasoning works, 
using only precise propositions and the two-valued logic. The following
syllogism is an example of such reasoning in linguistic terms:

2 •• Fuzzy Logic Theory
67
(i)
Everyone who is 40 years old or older is old.
(ii)
David is 40 years old and Mary is 39 years old.
(iii)
David is old but Mary is not.
This is a very precise deductive inference, correct in the sense of the two-
valued logic.
In this classical (precise) reasoning using the two-valued logic, when the
(output) logical variable represented by a logical formula is always true
regardless of the truth values of the (input) logical variables, it is called a
tautology.  If, on the contrary, it is always false, then it is called a
contradiction.  Various tautologies can be used for making deductive
inferences, which are referred to as inference rules.  The four frequently used
inference rules in classical reasoning are:
modus ponens:
( a ∧ ( a ⇒b ) ) ⇒b;
modus tollens:
( b ∧ ( a ⇒b ) ) ⇒a ;
syllogism:
( a ⇒b ) ∧ ( b ⇒c ) ⇒ ( a ⇒c );
contraposition:
( a ⇒b ) ⇒ ( b ⇒a  ). 
These inference rules are very easily understood and, indeed, have been
commonly used in one’s daily life.  For example, the modus ponens is
interpreted as follows:
IF “a is true” AND the statement “IF a is true THEN b is true” is
true THEN “b is true.”
Using this logic, we see that the deductive inference
IF “40 years old or older is old” AND “IF 40 years old or older is
old THEN David is old” THEN “David is old”
is a modus ponens, and the deductive inference
IF “Mary is not old” AND “IF Mary is 40 years old or older then
Mary is old” THEN “Mary is not 40 years old nor older”
is a modus tollens.
With the above discussion in mind, we now consider the following
example of approximate reasoning in linguistic terms that cannot be handled
by the classical (precise) reasoning using two-valued logic:
(i)
Everyone who is 40 to 70 years old is old but is very old if he (she) is 
71 years old or above; everyone who is 20 to 39 years old is young
but is very young if he (she) is 19 years old or below.
(ii)
David is 40 years old and Mary is 39 years old.
(iii)
David is old but not very old; Mary is young but not very young.
This is of course a meaningful deductive inference, which indeed has been 
frequently used in one’s daily life.  This is an example of what is called
approximate reasoning.
In order to deal with such imprecise inference, fuzzy logic can be
employed.  Briefly, fuzzy logic allows the imprecise linguistic terms such as:
• fuzzy predicates: old, rare, severe, expensive, high, fast
• fuzzy quantifiers: many, few, usually, almost, little, much
• fuzzy truth values: very true, true, unlikely true, mostly false, false,
definitely false

68
Fuzzy Logic Theory •• 2
Example 1.1 of Chapter 1 best explains the idea and approach of fuzzy logic
for approximate reasoning.
To describe fuzzy logic mathematically, we introduce the following
concepts and notation.  Let S be a universe set and A a fuzzy set associated
with a membership function, µA(x), x ∈S.  If y = µA(x0) is a point in [0,1],
representing the truth value of the proposition “x0 is a,” or simply “a,” then the 
truth value of “not a” is given by
y  = µA(x0 is not a) = 1 −µA(x0 is a) = 1 −µA(x0) = 1 −y.
Consequently, for n members x1, ..., xn in S with n corresponding truth values
yi = µA(xi) in [0,1], i = 1,...,n, by applying the extension principle (Section
IV.A of Chapter 1) the truth values of “not a” is defined as
iy  = 1 −yi,
i=1,...,n.
Here, we note that, actually, n = ∞ is allowed.  With n > 3, following logic
theory (which is beyond the scope of this book) we define the logical
operations and, or, not, implication, and equivalence as follows: for any a, b
∈S,
µA(a∧b) = µA(a) ∧µA(b) = min{ µA(a), µA(b) };
µA(a∨b) = µA(a) ∨µA(b) = max{ µA(a), µA(b) };
µA( a ) = 1 −µA(a);
µA(a⇒b) = µA(a) ⇒µA(b) = min{ 1, 1 + µA(b) - µA(a) };
µA(a⇔b) = µA(a) ⇔µA(b) = 1 − | µA(a) −µA(b) |.
For multi-point cases, e.g., ai, bj ∈S, with µA(ai), µA(bj) ∈ [0,1], i=1,...,n,
j=1,...,m, where 1 ≤n, m ≤∞, we can define
µA(a1,...,an) ∧µA(b1,...,bm) = 
m
j
n
i max
≤
≤
≤
≤
1,
1
{ min{ µA(ai), µA(bj) } }.
This is equivalent to the minimum between two fuzzy numbers a ∧b (see the
fuzzy minimum operation discussed in Section IV.B of Chapter 1).
Other
operations are defined accordingly.
In the classical two-valued logic, for instance in the modus ponens, the
inference rule is
( a ∧ ( a ⇒b ) ) ⇒b.
In terms of membership values, this is equivalent to the following:
IF µ(a) = 1
AND µ(a⇒b) = min{ 1, 1 + µ(b) – µ(a) } = min{ 1, µ(b)} = 1
THEN µ(b) = 1.
Otherwise, it will contradict either µ(a) = 1 or µ(a⇒b) = 1.
In fuzzy logic, the inference rule reads the same: for the modus ponens, we 
have
( a ∧ ( a ⇒b ) ) ⇒b.
But in terms of membership values, we have
IF µ(a) > 0
AND µ(a⇒b) = min{ 1, 1 + µ(b) – µ(a) } > 0
THEN µ(b) > 0.
Here, of course, µ > 0 is equivalent to µ ∈ (0,1] since, as usual, we have
normalized all membership values.  One can see that this reference is much

2 •• Fuzzy Logic Theory
69
more flexible.  This fuzzy logic inference can be interpreted as follows:  IF a
is true with a certain degree of confidence AND “IF a is true with a certain
degree of confidence THEN b is true with a certain degree of confidence”
THEN b is true with a certain degree of confidence.  All these “degrees of
confidence” can be quantitatively evaluated by using the corresponding
membership functions.  This example is a generalized modus ponens, called
fuzzy modus ponens.
It is important to note that in the extremal cases, fuzzy logic is consistent
with the classical logic.  This can be easily verified by replacing “>0” with
“=1” in the above fuzzy logic inference.
Example 2.1. In the classical two-valued logic, the modus tollens is
( b ∧ ( a ⇒b ) ) ⇒a .
The following is a simple case:
Premise
David cannot work
Implication
If David is young then he can work
Conclusion
David is not young
This example does not make much sense, of course, since it implies also that
David cannot work at all.  So we see a limitation of the two-valued logic in
applications.  But two-valued logic can only describe “young or old,” “can or
cannot,” etc., and this is the best one can do for this example using two-valued
logic.  In contrast, the fuzzy modus tollens has the same rule:
( b ∧ ( a ⇒b ) ) ⇒a ,
but provides a much more meaningful inference as follows, which only
implies that David cannot work so hard:
Premise
David cannot work much
Implication
If David is much younger then he can work more
Conclusion
David is not so young
In such examples, one only needs to select reasonable membership functions
to describe “young, very young, old, very old, much, much more, hard, very
hard,” etc., such that they are meaningful and practical for the applications in
consideration.
V.
FUZZY RELATIONS
Let S be a universe set, and A and B be subsets of S.  Similar to the
Cartesian products, A × B denotes a product set in the universe set S × S.  A
fuzzy relation is a relation between elements of A and elements of B, described 
by a membership function µA×B(a,b), a ∈A and b ∈B.

70
Fuzzy Logic Theory •• 2
A simple example of a fuzzy relation is the following.  Let S = R and A = 
B = [0,1] ⊂ R.  Define a membership function µA×B(a,b) for the relation “a is
slightly larger than b” by
µA×B(a,b) = 
⎩
⎨
⎧
>
≤
−
−
,
e
,
0
)
(
b
a
b
a
b
a
which is shown in Figure 2.3.  Then, A, B, and µA×B together define a fuzzy
relation between a ∈A and b ∈B.
For discrete supports, fuzzy relations can be defined by tables or matrices.
For example, let S = R, A = { a1, a2, a3, a4 } = { 1, 2, 3, 4 } and B = { b1, b2,
b3} = { 0, 0.1, 2 }.  Then the following table defines a fuzzy relation “a is
considerably larger than b.”
b1
b2
b3
a1
0.6
0.6
0.0
a2
0.8
0.7
0.0
a3
0.9
0.8
0.4
a4
1.0
0.9
0.5
a
b
a = b
1
(1,1)
1
1
0
1
e-1
µ
Figure 2.3
The fuzzy relation “a is slightly larger than b” on [0,1]×[0,1].

2 •• Fuzzy Logic Theory
71
Example 2.2. Let S = R with subsets A, B ⊆ R.  Consider two fuzzy
subsets:
(i)
A with the associate membership function µA(a), a ∈A;
(ii)
B with the associate membership function µB(b), b ∈B.
Let µA×B(a,b) be the membership function defined on A × B by
µA×B(a,b) = min{ µA(a), µB(b) },
(a,b) ∈A × B.
Then, A, B, and µA×B together define a fuzzy relation.
For notational convenience, we denote by 
)
,
(
~
B
A
R
 a fuzzy relation defined
on a product set A × B by two subsets A and B of a universe set, S, and an
associate membership function, µA×B.
For two fuzzy relations 
1
)
,
(
~
B
A
R
 and
2
)
,
(
~
B
A
R
, defined on the same product set 
A × B, their union and intersection,
1
)
,
(
~
B
A
R
∪
2
)
,
(
~
B
A
R
 and 
1
)
,
(
~
B
A
R
∩
2
)
,
(
~
B
A
R
,
are defined by  the membership functions
)
,
(
2
1
~
~
b
a
R
R ∪
µ
 = max{
)
,
(
1
~
b
a
R
µ
,
)
,
(
2
~
b
a
R
µ
 },
(a,b) ∈A×B;
)
,
(
2
1
~
~
b
a
R
R ∩
µ
 = min{
)
,
(
1
~
b
a
R
µ
,
)
,
(
2
~
b
a
R
µ
 },
(a,b) ∈A×B,
respectively.
Example 2.3. Let S = R, A = { a1, a2, a3, a4 } = { 1, 2, 3, 4 }, and B = { b1,
b2, b3 } = { 0, 0.1, 2 }.  Let 
1
)
,
(
~
B
A
R
 be the fuzzy relation “a is considerably
larger than b” defined by the following table:
b1
b2
b3
a1
0.6
0.6
0.0
1
)
,
(
~
B
A
R
:
a2
0.8
0.7
0.0
a3
0.9
0.8
0.4
a4
1.0
0.9
0.5
Let
2
)
,
(
~
B
A
R
 be the fuzzy relation “a is considerably close to b” defined by the
following table:
b1
b2
b3
a1
0.2
0.2
0.5
2
)
,
(
~
B
A
R
:
a2
0.1
0.1
1.0
a3
0.0
0.0
0.3
a4
0.0
0.0
0.5

72
Fuzzy Logic Theory •• 2
Then,
1
)
,
(
~
B
A
R
∪
2
)
,
(
~
B
A
R
and
1
)
,
(
~
B
A
R
∩
2
)
,
(
~
B
A
R
 are given by the following two
tables, respectively:
b1
b2
b3
a1
0.6
0.6
0.5
1
)
,
(
~
B
A
R
∪
2
)
,
(
~
B
A
R
:
a2
0.8
0.7
1.0
a3
0.9
0.8
0.4
a4
1.0
0.9
0.5
b1
b2
b3
a1
0.2
0.2
0.0
1
)
,
(
~
B
A
R
∩
2
)
,
(
~
B
A
R
:
a2
0.1
0.1
0.0
a3
0.0
0.0
0.3
a4
0.0
0.0
0.5
Here, in this example, 
1
)
,
(
~
B
A
R
∪
2
)
,
(
~
B
A
R
 means that “a is either considerably
larger than  or considerably close to b,” and 
1
)
,
(
~
B
A
R
∩
2
)
,
(
~
B
A
R
 means that “a is 
considerably larger than, as well as considerably close to, b.”  The latter
statement is somewhat self-contradictory but is acceptable by fuzzy relations,
and, however, has small membership values in general.
For two fuzzy relations, 
1
)
,
(
~
B
A
R
 and 
2
)
,
(
~
C
B
R
, we cannot perform their union 
and intersection by the same rule because they are defined on different
product sets, A×B and B×C, respectively.  However, we can perform their
compositions, since they have a common set B in between A and C.  Among
some other important compositions, the max-min composition is the most
useful one in applications.
Let
1
)
,
(
~
B
A
R
 and 
2
)
,
(
~
C
B
R
 be two fuzzy relations. Their max-min composition
is defined to be the new relation
R~
(A,B,C) =
1
)
,
(
~
B
A
R
°
2
)
,
(
~
C
B
R
with the membership function
)
,
(
2
1 ~
~
c
a
R
R o
µ
 = 
B
bmax
∈
{ min{
)
,
(
1
~
b
a
R
µ
,
)
,
(
2
~
c
b
R
µ
}}, (a,c) ∈A×C.
Next, we provide some basic properties of the max-min composition of
fuzzy relations for the case where A = B = C.
A fuzzy relation R~
(A,A) is said to be reflexive if
)
,
(
~
a
a
R
µ
 = 1
for all a ∈A.

2 •• Fuzzy Logic Theory
73
This fuzzy relation R~
(A,A) is said to be symmetric if
)
,
(
~
b
a
R
µ
 = 
)
,
(
~
a
b
R
µ
for all a , b ∈A.
But, this fuzzy relation is said to be antisymmetric if
a ≠b ⇒
⎪⎩
⎪⎨
⎧
=
µ
=
µ
µ
≠
µ
0
)
,
(
)
,
(
)
,
(
)
,
(
~
~
~
~
a
b
b
a
or
a
b
b
a
R
R
R
R
for all a , b ∈A;
and perfectly antisymmetric if
a ≠b ⇒ ( µ ~R (a,b) > 0 ⇒µ ~R (b,a) = 0 )
for all a , b ∈A.
Finally, this fuzzy relation R~
(A,A) is said to be transitive if 
)
,
(
~
~
b
a
R
Ro
µ
≤
)
,
(
~
b
a
R
µ
for all a , b ∈A.
Example 2.4. Consider the following three fuzzy relations, R~ i(a,a), where 
a ∈A and i = 1, 2, 3.
a1
a2
a3
a4
a1
0.4
0.0
0.1
0.8
R~ 1(a,a):
a2
0.8
1.0
0.0
0.0
a3
0.0
0.6
0.7
0.0
a4
0.0
0.2
0.0
0.0
a1
a2
a3
a4
a1
0.4
0.8
0.7
0.0
R~ 2(a,a):
a2
0.0
1.0
0.9
0.6
a3
0.8
0.4
0.7
0.4
a4
0.0
0.1
0.0
0.0
a1
a2
a3
a4
a1
0.4
0.8
0.1
0.8
R~ 3(a,a):
a2
0.8
1.0
0.0
0.2
a3
1.0
0.6
0.7
0.1
a4
0.0
0.2
0.0
0.0
It can be verified that 
1
~R  is perfectly antisymmetric while 
2
~R  is only
antisymmetric but not perfectly.  As to 
3
~R , it is a nonsymmetric fuzzy
relation in the sense that there are a , b ∈A such that

74
Fuzzy Logic Theory •• 2
3
~R
µ
(a,b) ≠
3
~R
µ
(b,a),
which is not antisymmetric and so is not perfectly antisymmetric either.
Now, we can state the following basic properties of the max-min
composition of fuzzy relations, which can be verified by some standard
procedures discussed in Chapter 1.
Theorem 2.1. Let R~ ,
1
~R ,
2
~R ,
3
~R , etc. be fuzzy relations defined on the 
same product set A×A, and let “°“ be the max-min composition operation for
these fuzzy relations.  Then
(1)
The max-min composition is associative:
(
1
~R
°
2
~R  ) °
3
~R  = 
1
~R
° ( 
2
~R
°
3
~R  ).
(2)
If
1
~R  is reflexive and 
2
~R  is arbitrary, then
)
,
(
2
~
b
a
R
µ
≤
)
,
(
2
1 ~
~
b
a
R
R o
µ
,
for all a, b ∈A,
and
)
,
(
2
~
b
a
R
µ
≤
)
,
(
1
2 ~
~
b
a
R
R o
µ
,
for all a, b ∈A.
(3)
If
1
~R  and 
2
~R  are reflexive, then so are 
1
~R °
2
~R  and 
2
~R °
1
~R .
(4)
If
1
~R  and 
2
~R  are symmetric and 
1
~R °
2
~R  = 
2
~R °
1
~R , then 
1
~R °
2
~R
is symmetric.  In particular, if R~  is symmetric then so is R~ ° R~ .
(5)
If R~  is symmetric and transitive, then
)
,
(
~
b
a
R
µ
≤
)
,
(
~
a
a
R
µ
,
for all a, b ∈A.
(6)
If R~  is reflexive and transitive, then
R~
° R~  = R~ .
(7)
If
1
~R  and 
2
~R  are transitive and 
1
~R
°
2
~R  = 
2
~R
°
1
~R , then 
1
~R
°
2
~R  is
transitive.
Finally in this section, we show by example an application of the fuzzy
relations and their max-min compositions in fuzzy logic for approximate
reasoning.
Example 2.5. Let S = { 1, 2, 3, 4 } and A = { 1, 2, 3, 4 } with the following 
membership function for the fuzzy description “small”:
µA(a) = 
⎪
⎪
⎩
⎪⎪
⎨
⎧
=
=
=
=
.4
if
0.0
,3
if
3.0
,2
if
7.0
,1
if
0.1
a
a
a
a
Let
R~
be a fuzzy relation between two members in A, meaning
“approximately equal,” and be defined by the following table:

2 •• Fuzzy Logic Theory
75
1
2
3
4
1
1.0
0.5
0.0
0.0
R~ :
2
0.5
1.0
0.5
0.0
3
0.0
0.5
1.0
0.5
4
0.0
0.0
0.5
1.0
Suppose that we want to perform the following fuzzy logic inference
(approximate reasoning):
Premise
a is small
Implication
a and b are approximately equal
Conclusion
b is somewhat small
Then, we can apply the max-min composition of the fuzzy relations as
follows:
(i)
“a is small”: µA(a) is available;
(ii)
“a and b are approximately equal”: 
)
,
(
~
b
a
R
µ
 is given by the table;
(iii)
let µB(b) be the membership function for the conclusion (a fuzzy
modus ponens for this example):
µB(b) = 
A
amax
∈
{ min{ µA(a),
)
,
(
~
b
a
R
µ
 } } ,
b∈B=A.
The result, for b = 2, say, is
µB(2) =
A
amax
∈
{ min{ µA(a),
)
2,
(
~ a
R
µ
 } }
= max{ min{1.0,0.5}, min{0.7,1.0}, min{0.3,0.5},
min{0.0,0.0} }
= max{ 0.5, 0.7, 0.3, 0.0 }
= 0.7.
Similarly, one can evaluate µB(1), µB(3), and µB(4).  The final result is
µB(b) = 
⎪
⎪
⎩
⎪⎪
⎨
⎧
=
=
=
=
.4
if
3.0
,3
if
5.0
,2
if
7.0
,1
if
0.1
b
b
b
b
VI. FUZZY LOGIC RULE BASE
A. Fuzzy IF-THEN Rules
In Section IV, we discussed in somewhat detail the fuzzy logic operations
and, or, not, implication, and equivalence:
a ∧b,
a ∨b,
a ,
a ⇒b,
a ⇔b

76
Fuzzy Logic Theory •• 2
and their evaluations on a fuzzy set A with the membership function µA(⋅):
µA(a∧b)
= µA(a) ∧µA(b) = min{ µA(a), µA(b) };
µA(a∨b)
= µA(a) ∨µA(b) = max{ µA(a), µA(b) };
µA( a )
=
A
µ
(a) = 1 −µA(a);
µA(a⇒b)
= µA(a) ⇒µA(b) = min{ 1, 1 + µA(b) - µA(a) };
µA(a⇔b)
= µA(a) ⇔µA(b) =  1 − | µA(a) – µA(b) |.
In Section V, we also discussed fuzzy relations between elements of two
subsets A and B, on  which  a  membership function µA×B(a,b) is defined, with 
a ∈A and b ∈B.  It is clear that one can consider the above fuzzy logic
operations as some special fuzzy relations, with A = B and µA×A = µA.
In this section, we take a closer look at the implication relation a ⇒b and 
its application in fuzzy logic rules.
The implication relation a ⇒b can be interpreted, in linguistic terms, as
“IF a is true THEN b is true.”  Of course, this is valid for both the classical
(two-valued) logic and the fuzzy (multi-valued) logic.  For fuzzy logic
performed on a fuzzy subset A, we have a membership function µA describing 
the truth values of a ∈A and b ∈A.  In this case, a more complete linguistic
statement would be
“(IF a ∈A is true with a truth value µA(a) THEN b ∈A is 
true with a truth value µA(b) ) has a truth value
µA(a⇒b) = min{ 1, 1 + µA(b) – µA(a) }.”
In the above, both a and b belong to the same fuzzy subset A and share the 
same membership function µA.  If they belong to different fuzzy subsets A and 
B with different membership functions µA and µB, then we have a nontrivial
fuzzy relation, which can be quite complicated.  In most cases, however, the
implication relation a ⇒b, performed on fuzzy subsets A and B, where a ∈A
and b ∈B, is simply defined in linguistic terms as 
“IF a ∈A is true with a truth value µA(a) THEN b ∈B is 
true with a truth value µB(b).”
Throughout this book, we often consider this kind of implication.  Because 
such statements have a standard format and their meaning is clear, it is
common to write them in the following simple form:
“IF a is A THEN b is B.”
A fuzzy logic implication statement of this form is usually called a fuzzy IF-
THEN rule.
To be more general, let A1,...,An, and B be fuzzy subsets with
membership functions µA1,...,µAn, and µB, respectively. 
Definition 2.1. A General Fuzzy IF-THEN Rule has the form
“IF a1 is A1 AND ... AND an is An THEN b is B.”
Using the fuzzy logic AND operation, this rule is implemented by the
following evaluation formula:
µA1(a1) ∧ ... ∧µAn(an) ⇒µB(b),
where

2 •• Fuzzy Logic Theory
77
µAi(ai) ∧µAj(aj) = min{ µAi(ai), µAj(aj) },
1 ≤i, j ≤n, and, therefore,
µA1(a1) ∧ ... ∧µAn(an) = min{ µA1(a1), ..., µAn(an) }.
About this general fuzzy IF-THEN rule and its evaluation, a few issues
have to be clarified:
(i)
There is no fuzzy logic OR operation in a general fuzzy IF-THEN
rule.  What should we do if a fuzzy logic implication statement
involves the OR operation?
(ii)
There is no fuzzy logic NOT operation in a general fuzzy IF-THEN
rule.  What should we do if a fuzzy logic implication statement
involves the NOT operation? 
(iii)
How do we interpret a fuzzy IF-THEN rule in a particular
application?  Is this interpretation unique?
We provide answers to these questions in the next two subsections.
B. Fuzzy Logic Rule Base
We first consider questions (i) and (ii).  Let us first discuss, for example,
the following fuzzy IF-THEN rule containing an OR operation:
“IF a1 is A1 AND a2 is A2 OR a3 is A3 AND a4 is A4 THEN b is B.”
By convention, this is understood in logic as
“(IF a1 is A1 AND a2 is A2) OR (IF a3 is A3 AND a4 is A4)
THEN (b is B).”
With this convention and understanding, it is clear that this statement is
equivalent to the combination of the following two fuzzy IF-THEN rules:
(1)
“IF a1 is A1 AND a2 is A2 THEN b is B.”
(2)
“IF a3 is A3 AND a4 is A4 THEN b is B.”
Hence, the fuzzy logic OR operation is not necessary to use:  it may shorten a 
statement of a fuzzy IF-THEN rule, but it increases the format complexity of
the rules.
As to the fuzzy logic NOT operation, although we may have a negative
statement like “IF a is not A,” we can always interpret this negative statement
by a positive one “IF a  is A” or “IF a is A ,” where A  means “not A” in
logic and “complement of A” in set theory.  Moreover, the statement “ a  is A”
or “a is A “ can be evaluated by
µA( a ) = 
A
µ
(a) = 1 – µA(a).
Example 2.6. Given a fuzzy logic implication statement
“IF a1 is A1 AND a2 is not A2 OR a3 is not A3 THEN b is B,”
how can we rewrite it as a set of equivalent general fuzzy IF-THEN rules in
the unified form?
We may first drop the fuzzy logic OR operation by rewriting the given
statement as
(1)
“IF a1 is A1 AND a2 is not A2  THEN b is B.”
(2)
“IF a3 is not A3 THEN b is B.”
We may then drop the fuzzy logic NOT operation by rewriting them as

78
Fuzzy Logic Theory •• 2
(1’)
“IF a1 is A1 AND a 2 is A2  THEN b is B.”
(2’)
“IF a 3 is A3 THEN b is B.”
Finally, these two general fuzzy IF-THEN rules can be evaluated as follows:
µA1(a1) ∧µA2(
2
a ) ⇒µB(b),
where µA2(
2
a ) = 1 – µA2(a2), and 
µA3(
3
a ) ⇒µB(b),
where µA3(
3
a ) = 1 – µA3(a3).  Therefore, we only need two general fuzzy IF-
THEN rules (1’) and (2’) and three membership values µA2(a1), µA2(a2), and
µA3(a3) to infer the conclusion “b is B,” namely, b ∈B with the truth value
µB(b).
All the other fuzzy logic operations can be simply defined and expressed
by the AND and OR operations. They can be evaluated via the min and max
operations as follows:
µA1(a1) ∧µA2(a2) = min{ µA1(a1), µA2(a2) };
µA1(a1) ∨µA2(a2) = max{ µA1(a1), µA2(a2) };
µA( a ) = 
A
µ
(a) = 1 −µA(a);
µA(a⇒a~ )
= µA(a) ⇒µA( a~ ) = min{ 1, 1+µA( a~ ) – µA(a) };
µA(a⇔a~ ) = µA(a) ⇔µA( a~ ) =  1 – | µA(a) – µA( a~ ) |.
Thus, all finite combinations of these fuzzy logic operations can also be
expressed by the AND and OR operations, so that in any finite fuzzy logic
inference statement
IF ... THEN ...,
the condition part “IF ...” can be expressed only by the AND and OR
operations. This eventually leads to using only the AND operation, as
discussed above.
In summary, a finite fuzzy logic implication statement can always be
described by a set of general fuzzy IF-THEN rules containing only the fuzzy
logical AND operation, in the form
(1)
“IF a11 is A11 AND ... AND a1n is A1n THEN b1 is B1.”
(2)
“IF a21 is A21 AND ... AND a2n is A2n THEN b2 is B2.”
...
(m)
“IF am1 is Am1 AND ... AND amn is Amn THEN bm is Bm.”
This family of general fuzzy IF-THEN rules is usually called a fuzzy logic rule 
base.
We remark that the number of components in each rule above needs not to 
be the same.  If n = 2 but a rule has only one component in the condition part, 
say
“IF a11 is A11 THEN b1 is B1,”
we can formally rewrite it as
“IF a11 is A11 AND a12 is I12 THEN b1 is B1,”
where I12 is a fuzzy subset with µI12(a) = 1 for all a ∈I12.  Here, we actually
insert a “always true” (redundant) condition into the “IF ... AND ...” part to

2 •• Fuzzy Logic Theory
79
fill in the gap of the statement.  In so doing, we can keep the format of a fuzzy 
logic rule base simple in all the general discussions throughout the book.
One can also verify that such a general form of a fuzzy logic rule base
includes the nonfuzzy case and the unconditional (degenerate) case (with only 
“b is B”) as special cases.  Moreover, this general fuzzy logic rule base (with
only the fuzzy logical AND operation in the condition part) also covers many
unusual fuzzy logic implication statements, such as the one shown in the next
example.
Example 2.7. Given a fuzzy logic implication statement
“b is B unless a1 is A1 AND ... AND an is An,”
which is understood in logic as
“(b is B) unless (a1 is A1 AND ... AND an is An),”
one can first convert it by using the fuzzy logic NOT and OR operations as
follows:
“IF a1 is 
1
A  OR ... OR an is 
n
A  THEN b is B,”
and then replace all the OR operations by a fuzzy logic rule base of the form:
(1)
“IF a1 is 
1
A  THEN b is B,”
(2)
“IF a2 is 
2
A  THEN b is B,”
...
(n)
“IF an is 
n
A  THEN b is B.”
This rule base is in the general format, indeed.
In this example, however, we should note that the given statement is not
equivalent to the following:
“IF a1 is A1 AND ... AND an is An THEN b is NOT B,”
since the conclusion can be “b has no relation with B.”
Finally, we remark that a fuzzy rule base has to satisfy some properties or
requirements.  For example, a fuzzy rule base has to be complete in the sense
that no other possible conditions are left out.  The following rule base is
incomplete:
(1)
IF a > 0 THEN b > 0,
(2)
IF a = 0 THEN b < 0,
because the case of a < 0 is left out. Also, a fuzzy rule base has to be
consistent in the sense that no conclusions are contradictive.  The following
rule base is inconsistent:
(1)
IF a > 0 THEN b > 0,
(2)
IF a > 0 THEN b = 0,
(3)
IF a = 0 THEN b < 0,
(4)
IF a < 0 THEN b = 0,
since the first two rules contradict each other. Yet this rule base is complete.
Note that the following two rules are consistent:
(1)
IF a > 0 THEN b > 0,
(2)
IF a = 0 THEN b > 0,
where two different conditions give the same conclusion, which is not a
conflict, and the following two rules are consistent, too:

80
Fuzzy Logic Theory •• 2
(1)
IF a > 0 THEN b > 0,
(2)
IF a > 0 THEN c > 0,
which are equivalent to “IF a > 0 THEN b > 0 AND c > 0.”
Some other requirements may need to be imposed as well for a fuzzy rule
base in a particular application. For example, a rule base should be concise
with less or no redundancy.
C. Interpretation of Fuzzy IF-THEN Rules
Now, we return to Definition 2.1 and consider question (iii) thereafter:
how do we interpret a fuzzy IF-THEN rule in a particular application, and is
such an interpretation unique?
In the classical two-valued logic, the IF-THEN rule can be easily
interpreted, namely,
“IF a is A THEN b is B”
is itself clear: the condition “a is A” infers the conclusion “b is B.”  For
example, the statement
“IF a is positive THEN b is negative”
is crisp, nonvague, and absolute.  In fuzzy multi-valued logic, however, both A
and B are fuzzy subsets associated with fuzzy membership functions µA and
µB.  Depending on the actual membership values, µA(a) and µB(b) for the
actual member values a ∈A and b ∈B, respectively, both the condition “a is 
A” and the conclusion “b is B” can have various interpretations.  We explain
this in more detail by the following example.
Example 2.8. Let
y = f(x)
be a real-variable real-valued and invertible function defined on X = [0,4] with 
range Y = [–4,0] as shown in Figure 2.4 (a).  If a crisp value x is given then y = 
f(x) and if a crisp value y is given then x = f –1(y).  Suppose that we don’t
actually know the exact formula of f.  We let µS(⋅), µM(⋅), and µL(⋅) be
membership functions defined on X and Y, describing “small,” “medium,” and 
“large” in absolute values, respectively, as shown in Figure 2.4 (b).  Thus, we
may approximate the real function y = f(x) by the following fuzzy rule base as 
shown in Figure 2.4 (c):
(1)
“IF x is positive small THEN y is negative small.”
(2)
“IF x is positive medium THEN y is negative medium.”
(3)
“IF x is positive large THEN y is negative large.”
Using the brief notation “a is A” to mean “a ∈A has a membership value
µA(a)” as we did before, one may now rewrite the above three implication
statements as follows:
(1’) “IF x is PS
THEN y is NS.”
(2’) “IF x is PM THEN y is NM.”
(3’) “IF x is PL
THEN y is NL.”
Comparing it to the classical two-valued logic inference,
“IF x is positive THEN y is negative”

2 •• Fuzzy Logic Theory
81
or
“IF x is small THEN y is small,”
we see that we need the following long statement from the classical logic to
express the same meaning of the fzzy logic inference (1):
“IF x is positive AND x is small THEN y is negative AND y
is small.”
Even if so, the classical logic can only be used to determine “x is small” or 
“x is not small,” while the fuzzy membership function µS gives infinitely
many different truth values to describe how small x is. 
We note that in this example we only use one membership function for one 
evaluation, namely, if we are interested in the fuzzy implication statement (1), 
then we only apply the membership function µS to both x and y, but the other
two membership functions µM and µL are not used.  Later, we will discuss the
cases where we apply more than one membership functions to one evaluation, 
to describe the situations like “x is small as well as medium” with different
x
y
1
2
3
4
1
2
3
4
−
−
−
−
=
y
f (   )
x
x
1
2
3
4
1
x
1
2
3
4
1
x
1
2
3
4
1
µS
µM
µL
x
y
1
2
3
4
1
2
3
4
−
−
−
−
=
y
f (   )
x
µL
µM
µM
µL
µS
µS
~
~
~
(c)
(b)
(a)
Figure 2.4
An example of approximating a real function by a fuzzy rule
base.

82
Fuzzy Logic Theory •• 2
membership values for “small” and “medium” at the same time. As explained
in Example 1.1, where a person can be young as well as old at the same time
by common sense, such conflicting statements are acceptable by fuzzy logic
rules.
We also note that this example gives only some interpretations to a fuzzy 
IF-THEN rule.  If different membership functions are used, say we delete µL
and change µS and µM for the values of y ∈Y = [–4,0], then the above fuzzy
implication statements (1)-(3) will be changed.  That is, unlike the classical
logic, a fuzzy IF-THEN rule can be interpreted in different ways: it depends
on the membership functions that we use, or, in other words, it depends on the 
definitions of the fuzzy subsets involved in the condition and the conclusion
of the implication.  Table 2.8 lists some interpretations of fuzzy IF-THEN
rules, where the first and the last ones are classical logic implication rules that 
are special cases of fuzzy logic rules.
D. Evaluation of Fuzzy IF-THEN Rules
In this subsection, we discuss the problem of evaluating a fuzzy IF-THEN
rule
µA⇒B(a,b) = µA(a) ⇒µB(b),
a ∈A, b ∈B.
For the classical two-valued logic, this evaluation is simple:
µB(b) = 
⎩
⎨
⎧
=
µ
=
µ
,0
)
(
if
0
,1
)
(
if
1
a
a
A
A
namely, “a ∈A ⇒b ∈B,” and
⎩
⎨
⎧
=
µ
=
µ
=
µ
,0
)
(
if
0
,1
)
(
if
1
)
(
a
a
b
A
A
B
that is, “a ∉A ⇒b ∉B.”  For fuzzy logic, we have the following options for 
the IF-THEN rule  “µA(a) ⇒µB(b)”:
(a)
µA⇒B(a,b) = min{ µA(a), µB(b) };
(b)
µA⇒B(a,b) = µA(a) ⋅µB(b);
(c)
µA⇒B(a,b) = min{ 1, 1 + µB(b) – µA(a) };
(d)
µA⇒B(a,b) = max{ min{ µA(a), µB(b) }, 1 – µA(a) };
(e)
µA⇒B(a,b) = max{ 1 – µA(a), µB(b) };
(f)
Goguen’s formula:
Table 2.8
Interpretation of Fuzzy IF-THEN Rules
Premise (IF)
Conclusion (THEN)
a is A
a is very A
a is very A
a is more or less A
a is more or less A
a is not A
a is not A
b is B
b is very B
b is B
b is more or less B
b is B
b is unknown
b is not B

2 •• Fuzzy Logic Theory
83
µA⇒B(a,b) = 
⎪⎩
⎪⎨
⎧
µ
>
µ
µ
µ
µ
≤
µ
).
(
)
(
if
)
(
)
(
),
(
)
(
if
1
b
a
a
b
b
a
B
A
A
B
B
A
We remark that all these evaluation formulas are valid for the fuzzy logic
inference purpose, provided that one uses consistently the same formula for
the implication relation ⇒.  Of course, different formulas give different
resulting values, which merely imply different degrees of inference based on
different logical systems, but not the validness of the answers. Obviously,
formulas (a) and (b) are very simple to use; but they are the same as the
logical AND operation ∧.  The most common one in applications is formula
(c), which we will use throughout the book.
We also remark that for the following general fuzzy IF-THEN rule:
“IF a1 is A1 AND ... AND an is An THEN b is B,”
we can first evaluate the condition part by either
µA(a1,...,an) = min{ µA1(a1),..., µAn(an) }
or, sometimes,
µA(a1,...,an) = µA1(a1) ... µAn(an),
and then evaluate
µA(a1,...,an) ⇒µB(b) = µA⇒B(a1,...,an,b) = min{ 1, 1+µB(b)–µA(a) }.

84
Fuzzy Logic Theory •• 2
PROBLEMS
P2.1
Construct a truth table for the output of the following expressions, in
which A, B, and C are inputs:
(1)
A ⋅⋅B ⋅⋅C
(2)
( A + B ) ⋅⋅ ( B + C )
(3)
(A + B ) + ( B + C )
(4)
A + A ⋅⋅B + A ⋅⋅B ⋅⋅C
(5)
( A + A  ) ⋅⋅ ( B + B  ) ⋅⋅ ( C + C  ).
P2.2
Which of the following Boolean equations are true, and which are
false?
(1)
A + B = A + A ⋅⋅B
(2)
A ⋅⋅B = A ⋅⋅ (B ⋅⋅A + B ⋅⋅A  )
(3)
A = A + A ⋅⋅B + A ⋅⋅B
(4)
A = A ⋅⋅ ( B + B  ) + A ⋅⋅ ( C + C )
(5)
A = A ⋅⋅ ( B + B  ) + B ⋅⋅C ⋅⋅C .
P2.3
Verify:
(1)
A ∨ ( B ∧A  ) = A ∨B.
(2)
)
(
(
C
B
A
∧
∨
∧B = A ∧ ( B ∧C ).
P2.4
Use truth tables to determine which of the following formulas are
equivalent to each other:
(a)
( P ∧Q ) ∨ ( P ∧Q  )
(b)
P ∧Q
(c)
( P ∨Q ) ∧ ( Q ∨P )
(d)
(
Q
P∨
 )
(e)
( Q ∧P ) ∧P .
P2.5
Use truth tables to determine which of the following statements are
tautologies, which are contradictions, and which are neither:
(a)
( P ∨Q ) ∧ ( P ∨Q )
(b)
( P ∨Q ) ∧ ( P ∧Q )
(c)
( P ∨Q ) ∨ ( P ∨Q )
(d)
( P ∨ ( Q ∨R ) ) ∨ ( P ∨R ).
P2.6
(a)
Show that P ⇔Q is equivalent to (P ∧Q) ∨ ( P ∧Q ).
(b)
Show that (P →Q) ∧ (Q →R) is equivalent to (P ∨Q) →R.

2 •• Fuzzy Logic Theory
85
P2.7
Simplify the following formula:
(P ∧Q ) ∨ ( P ∧Q) ∨ ( P ∧Q ).
P2.8
Which of the following formulas are equivalent?
(a)
P ⇒ ( Q ⇒R )
(b)
Q ⇒ ( P ⇒R )
(c)
( P ⇒Q ) ∧ ( P ⇒R )
(d)
( P ∧Q ) ⇒R
(e)
P ⇒( Q ∧R ).
P2.9
Complete the following truth tables:
(a)
P
Q
Q
P ∨Q
(
Q
P∨
 )
F
F
F
T
T
F
T
T
(b)
P
Q
R
P ∧Q
(
Q
P∧
 )
R
(
Q
P∧
 ) ∨R
F
F
F
F
F
T
F
T
F
F
T
T
T
F
F
T
F
T
T
T
F
T
T
T
P2.10
Establish the logical form of the following statement:
(a)
If it is raining, then it is windy and the sun is not shining.
Then establish the following statements. Also, for each statement,
determine whether the statement is equivalent to either the above
statement or its converse.
(b)
It is windy and not sunny only if it is raining.
(c)
Rain is a sufficient condition for wind with no sunshine.
(e)
Rain is a necessary condition for wind with no sunshine.
(f)
Wind is a necessary condition for it to be rainy, and so has no
sunshine.
P2.11
Compute the following logical operation:
“IF µ(a) = 0.9 AND µ(a⇒b) = 0.3 THEN µ(b) = ?”

86
Fuzzy Logic Theory •• 2
P2.12
Let
µ1(x) = 
⎪
⎪
⎪
⎩
⎪⎪
⎪
⎨
⎧
≤
≤
<
≤
−
+
−
−
<
≤
−
+
,
12
1
,0
,1
2
,
3
1
3
,2
5
,
3
5
3
x
x
x
x
x
and
µ2(x) = 
⎪
⎪
⎪
⎩
⎪⎪
⎪
⎨
⎧
≤
≤
+
−
<
≤
−
+
−
<
≤
−
.
12
4
,
8
12
8
,4
3
,
7
3
7
,3
5
,0
x
x
x
x
x
Find
]
12
,5
[−
∈
x max min{µ1(x),µ2(x)} = ?
P2.13
Let the fuzzy relations 
1
~R ,
2
~R , and 
3
~R  be given by the three tables 
shown in Example 2.4.
Find the composition results of 
1
~R °
2
~R °
3
~R . [Hint: Rename 
1
~R (a,a) as 
1
~R (a,b),
2
2
~R (b,c),
3
~R (a,a) as 
3
~R (c,a). Then perform (
1
~R (a,b) °
2
~R (b,c)) °
3
~R (c,a).]
P2.14
In Example 2.3, suppose that the first table gives the membership
function µ1 for the Premise “a is considerably larger than b” and the
second table gives the membership function µ2 for the Implication “b
is considerably close to a.”  Find the membership value µ3(b=2) for
the Conclusion “a3 is considerably larger than and considerably close 
to b3.”
P2.15
Verify that the logical statement “IF a1 is A1 AND ... AND an is An
THEN b is NOT B” is not equivalent to the logical statement “b is B
UNLESS a1 is A1 AND ... AND an is An.”

2 •• Fuzzy Logic Theory
87
REFERENCES
[1]
C. R. Asfahl. Robots and Manufacturing Automation. New York,
NY: Wiley (1985); and 2nd ed. (1992).
[2]
G. J. Klir, U. H. St.Clair, and B. Yuan.
Fuzzy Set Theory:
Foundations and Applications.  Upper Saddle River, NJ: Prentice-
Hall PTR (1997).
 [3]
G. J. Klir and T. A. Folger.
Fuzzy Sets, Uncertainty, and
Information.  Englewood Cliffs, NJ:  Prentice-Hall (1988).
[4]
L. X. Wang.
Adaptive Fuzzy Systems and Control:  Design and
Stability Analysis.  Englewood Cliffs, NJ:  Prentice-Hall (1994).
[5]
H. J. Zimmermann.
Fuzzy Set Theory and Its Applications (2nd
Edition).  Boston, MA:  Kluwer Academic Publishers (1991).
[6]
K. Tanaka. An Introduction to Fuzzy Logic for Practical
Applications. New York, NY: Springer (1996).


CHAPTER 3
Fuzzy System Modeling
Modeling, in a general sense, refers to the establishment of a description of 
a system (a plant, a process, etc.) in mathematical terms, which characterizes
the input-output behavior of the underlying system.
To describe a physical system, such as a circuit or a microprocessor, we
have to use a mathematical formula or equation that can represent the system
both qualitatively and quantitatively.  Such a formulation is a mathematical
representation, called a mathematical model, of the physical system.  Most
physical systems, particularly those complex ones, are extremely difficult to
model by an accurate and precise mathematical formula or equation due to the 
complexity of the system structure, nonlinearity, uncertainty, randomness, etc. 
Therefore, approximate modeling is often necessary and practical in real-
world applications.  Intuitively, approximate modeling is always possible.
However, the key questions are what kind of approximation is good, where
the sense of “goodness” has to be first defined, of course, and how to
formulate such a good approximation in modeling a system such that it is
mathematically rigorous and can produce satisfactory results in both theory
and applications.
From the detailed studies in the last two chapters, it is clear that interval
mathematics and fuzzy logic together can provide a promising alternative to
mathematical modeling for many physical systems that are too vague or too
complicated to be described by simple and crisp mathematical formulas or
equations. When interval mathematics and fuzzy logic are employed, the
interval of confidence and the fuzzy membership functions are used as
approximation measures, leading to the so-called fuzzy systems modeling.
Following the traditional classification in the field of control systems, a
system that describes the input-output behavior in a way similar to a
mathematical mapping without involving a differential operator or equation is
called a static system. In contrast, a system described by a differential operator 
or equation is called a dynamic system. In this chapter, static fuzzy systems
modeling is first discussed, including its stability analysis, and the dynamic
fuzzy systems modeling will then follow, along with its stability and
controllability analyses.
The subject of fuzzy systems modeling is very important and useful in its
own right, not necessarily related to controls.  They are, of course, essential
for the investigation of fuzzy systems control in later chapters of the book.
The fundamental concept of systems modeling can be illustrated as
follows.  Suppose that we have an unknown system (“black box”), for which
only a set of its inputs x1, ..., xn and outputs y1, ..., ym can be measured (or
observed) and so these data are available. Here, both inputs and outputs can be 
either discrete-time series or continuous signals. We want to find a

90
Fuzzy System Modeling •• 3
mathematical description to qualitatively and quantitatively characterize this
unknown system, in the sense that by inputting x1, ..., xn into the mathematical
description we can always obtain the corresponding outputs y1, ..., ym.
Establishing such a mathematical description is called mathematical modeling
for the unknown system (Figure 3.1).  As usual, the mathematical description
can be a mathematical formula, such as a mapping or a functional that relates
the inputs to the outputs in the form
⎪⎩
⎪⎨
⎧
=
=
);
,...,
(
),
,...,
(
1
1
1
1
n
m
m
n
x
x
f
y
x
x
f
y
M
(3.1)
or a set of differential equations (assuming proper conditions) in the form
⎪⎩
⎪⎨
⎧
=
=
);
,...,
,
,...,
(
),
,...,
,
,...,
(
1
1
1
1
1
1
n
n
m
m
n
n
x
x
x
x
g
y
x
x
x
x
g
y
&
&
M
&
&
(3.2)
or a logical linguistic statement, which can be quantified mathematically, in
the form
IF (input x1) AND ... AND (input xn)
THEN (output y1) AND ... AND (output ym).
(3.3)
Fuzzy systems modeling is to quantify the logical linguistic form (3.3) by
using fuzzy logic and the mathematical functional model (3.1), or by using
fuzzy logic together with the differential equation model (3.2).  The result of
the former is called a static fuzzy system and the latter, a dynamic fuzzy system.
In this chapter, we study both static and dynamic fuzzy systems modeling.
We first study static fuzzy systems in Sections I and II, and then discuss
dynamic fuzzy systems in the rest of the chapter.
I.
MODELING OF STATIC FUZZY SYSTEMS
A. Fuzzy Logic Description of Input-Output Relations
Return to the “black box” shown in Figure 3.1. Since all the inputs x1, ...,
xn and outputs y1, ..., ym are assumed to be available, the logical linguistic
statement (3.3), namely,
IF (input x1) AND ... AND (input xn)
THEN (output y1) AND ... AND (output ym)
(3.4)
black box
...
...
x1
x2
xn
y1
y2
ym
Figure 3.1 An unknown system as a “black box.”

3 •• Fuzzy System Modeling
91
has actually described the unknown system, on the basis of the available data.
Yet this is not the ultimate purpose of mathematical modeling, since if a new
input xn+1 comes in, we don’t know what the corresponding output should be.
The main purpose of mathematical modeling, therefore, is not only to
correctly describe the existing input-output relations through the unknown
system but also to enable the established model to approximately describe
other possible hidden input-output relations of the system.
Thus, a general approach is to first quantify the linguistic statement (3.4)
and then to relay the quantified logical input-output relations by using the
mathematical functionals (3.1), or differential equations (3.2).  In this section, 
we discuss this general approach using fuzzy logic quantization and the
mathematical functionals (3.1), that is, the static fuzzy systems modeling.
Recall from Section VI.B of Chapter 2 that a finite fuzzy logic implication
statement can always be described by a set of general fuzzy IF-THEN rules
containing only the fuzzy logic AND operation, in the following multi-input
single-output form:
(1)
“IF (x1 is X11) AND ... AND (xn is X1n) THEN (y is Y1).”
(2)
“IF (x1 is X21) AND ... AND (xn is X2n) THEN (y is Y2).”
M
(N)
“IF (x1 is XN1) AND ... AND (x n is XNn) THEN (y is Y N).”
Here, we should recall that the phrase “x is X” is an abbreviation of the
complete statement “x belongs to the fuzzy subset X with a corresponding
membership value µX(x).”  We should now restrict our discussion on closed
intervals for the fuzzy subsets X11, ..., XNn and Y1, ..., YN, so that interval
arithmetic can be applied.  Furthermore, we suppose that all these are fuzzy
numbers in the sense that their membership functions are convex and
normalized (Section IV.B of Chapter 1).
For simplicity of discussion, we first consider the simplest case where N = 
1 with only one fuzzy IF-THEN rule:
 “IF (x1 is X1) AND ... AND (xn is Xn) THEN (y is Y).”
An example is the following:
R1:
IF (x1 is X1) AND ... AND (xn is Xn)
THEN y = a0 + a1x1 + ... + anxn,
where {a0,a1,...,an} are constants.  When we are given a set of particular
inputs,
x1 = 
0
1x
∈X1, ..., xn = 
0
n
x
∈Xn,
together with their available membership values µX1(
0
1x ), ..., µXn(
0
n
x ), the
output y will assume the value
y0 = a0 + a1
0
1x  + ... + an
0
n
x ,
   (3.5)
with membership value given by the following general rule (Section IV.B of
Chapter 1):
µY (y0) = 
0
0
0
...
n
nx
a
a
y
sup
+
+
=
{µ X1(
0
1x )∧...∧µXn(
0
n
x )}.
   (3.6)

92
Fuzzy System Modeling •• 3
If there are more than one fuzzy IF-THEN rule (N>1):
Ri:
IF (x1 is Xi1) AND ... AND (xn is Xin)
THEN yi = ai0 + ai1x1 + ... + ainxn,
i=1,...,N,
then, with the given set of inputs
x1 = 
0
1x
∈X1, ..., xn = 
0
n
x
∈Xn,
namely, the same inputs applied to all the different rules, we will have
0
1y  = a10 + a11
0
1x  + ... + a1n
0
n
x ,
0
2
y  = a20 + a21
0
1x  + ... + a2n
0
n
x ,
M
(3.7)
0
N
y
 = aN0 + aN1
0
1x  + ... + aNn
0
n
x .
The corresponding membership values for these outputs are given, again by
the general rule, as
µY(
0
iy ) = 
0
0
0
...
n
in
i
i
x
a
a
y
sup
+
+
=
{µX1(
0
1x )∧...∧µXn(
0
n
x )},
(3.8)
where i = 1, ..., N.  In a typical modeling approach, the final single output, y, is 
usually obtained via the following weighted average formula, using all 
0
iy
with the weights µY(
0
iy ), usually called the center-of-gravity formula:
y = 
∑
∑
=
=
µ
⋅
µ
N
i
i
Y
N
i
i
i
Y
y
y
y
1
0
1
0
0
)
(
)
(
,
    (3.9)
where “⋅“ is the ordinary algebraic multiplication (since all quantities here are
real numbers). This operation is a convex combination of all outputs.
It should be noted that we are talking about modeling here, so the weighted 
average formula (3.9) is merely a natural choice for the purpose of generating
a sensible system output which, although has proven to be successful in many
applications, is by no means the only possible formula to use (and may not be 
optimal in general).
For the most general situation, we assume that all the coefficients
{ai0,ai1,...,ain | i=1,...,N} are uncertain and belong to certain intervals:
ai0 ∈A0, ..., ain ∈An,
i=1,...,N,
where, for example,
A0 = [ min{a10,a20,...,aN0}, max{ a10,a20,...,aN0} ],
A1 = [ min{ a11,a21,...,aN1}, max{ a11,a21,...,aN1} ],
M
An = [ min{a1n,a2 n,...,aNn }, max{ a1n,a2 n,...,aNn } ].
Thus, with the given inputs
x1 ∈X1, x2 ∈X2, ..., xn ∈Xn,
the output becomes
Y = A0 + A1⋅⋅X1 + ... + An⋅⋅Xn,
(3.10)

3 •• Fuzzy System Modeling
93
which yields the fuzzy subset (interval) for y, with the membership functions
given by the general rule as
µY,i (yi) = 
n
in
i
i
x
a
a
y
sup
+
+
=
...
0
{µX1(
0
1x )∧...∧µXn(
0
n
x )},
(3.11)
where i = 1, ..., N.  In the α-cut notation, this algorithm can be represented by
α
)
(
y
S
 = { yi ∈Yi | yi = ai0 + ai1x1 + ... + ainxn,
x1∈
α
)
(
1x
S
, ..., xn∈
α
)
(
n
x
S
 },
in which, since all aij’s are real numbers, their membership functions are set
identically to be 1.  Finally, the output y is computed by 
y =
∑
∑
=
=
µ
⋅
µ
N
i
i
i
Y
N
i
i
i
i
Y
y
y
y
1
,
1
,
)
(
)
(
 = ∑
=
⋅
β
N
i
i
i
y
1
(3.12)
where
βi =
∑
=
µ
µ
N
i
i
i
Y
i
i
Y
y
y
1
,
,
)
(
)
(
.
This is a convex combination of the outputs yi , i=1,...,N.
The three formulas (3.7)-(3.9) or (3.10)-(3.12) are sometimes called the
input-output algorithm for static fuzzy system modeling under the fuzzy IF-
THEN rules Ri, i = 1, ..., N, where the former has constant coefficients while
the latter has interval coefficients.
Before we demonstrate the static fuzzy system modeling, some remarks are 
in order.  First, the coefficients aij do not explicitly contribute to the
computation of µY,i  in (3.11) because they only rescale the values of xi but do 
not change their confidence degrees. Second, the center-of-gravity formula
(3.12) is just a natural and commonly used one, which is by no means the only 
choice for the purpose.  A designer can, indeed, use any formula that is
meaningful for the application, since mathematical modeling usually does not
lead to a unique choice of its mathematical framework.  For instance, one may 
use
y = 
∑
∑
=
α
=
α
µ
⋅
µ
N
i
i
i
Y
N
i
i
i
i
Y
y
y
y
1
,
1
,
))
(
(
))
(
(
,
0 ≤α < ∞,
which produces formula (3.12) when α = 1, and yields a non-weighted
average formula when α = 0.  Finally, for n > 2, the calculation
µ X1(.) ∧ ... ∧µ Xn(.)

94
Fuzzy System Modeling •• 3
in formula (3.11) can be performed pairwise by repeating the general rule
studied in Section IV.B of Chapter 1 (see, also, Example 1.12) since the
logical AND operation satisfies the associative law (Table 2.5).
The next example explains the above discussion and computation, and
particularly shows how to apply the input-output algorithm for static fuzzy
modeling.
Example 3.1. Consider an unknown system with two inputs, x1, x2 , and
one output, y, as shown in Figure 3.2 (a).  Let inputs x1 be within the range X1
= [0,20] and x2 in X2 = [0,10].  Suppose that X1 has two associate membership 
functions, µS1(⋅) and µL1(⋅), describing “small” and “large,” respectively, and
similarly X2 has µS2(⋅) and µ L2(⋅), as shown in Figure 3.2 (b)-(c).
Now, suppose that we know, from experiments, the following input-output
relations (fuzzy IF-THEN implication rules):
R1:
IF x1 is small AND x2 is small THEN y = x1 + x2
R2:
IF x1 is large THEN y = 1
2 x1
R3:
IF x2 is large THEN y = 1
3 x2.
Otherwise, y = 0. Here, we assume that x1 and x2 will not both be large in this 
example.
Let
0
1x  = 13 and 
0
2
x  = 4 be given, for instance.  It can be found from
Figures 3.2 (b)-(c) that
µ S1(
0
1x ) = 2/15,
µ L1(
0
1x ) = 3/10,
µ S2(
0
2
x ) = 1/5,
µ L2(
0
2
x ) = 1/7.
Then, following the input-output algorithm, we compute the following:
(i)
The corresponding outputs:
0
1y  = 
0
1x  + 
0
2
x  = 13 + 4 = 17,
black box
x1
x2
y
(a)
5
10
15
20
25
1
x1
µS1
µL1
0
5
10
1
x2
µS2
µL2
0
(b)
(c)
Figure 3.2 The unknown system and its two inputs in Example 3.1.

3 •• Fuzzy System Modeling
95
0
2
y  = 1
2
0
1x  = 13
2 ,
0
3
y  = 1
3
0
2
x  = 4
3 .
(ii)
The fuzzy subset Y: Since a11 = 1, a12 = 1, a21 = ½, a22 = 0, a31 = 0,
a32 = 1/3, we have
A1 = [ min{1, 1
2 ,0}, max{1, 1
2 ,0} ] = [0,1],
A2 = [ min{1,0, 1
3 }, max{1,0, 1
3 } ] = [0,1],
Y = A1⋅⋅X1 + A2⋅⋅X2 = [0,1] ⋅⋅ [0,20] + [0,1] ⋅⋅ [0,10] = [0,30].
(iii)
The fuzzy membership values of the outputs:
µY,1(
0
1y ) =
0
2
0
1
0
1
x
x
y
sup
+
=
{ µ S1(
0
1x ) ∧µ S2(
0
2
x ) }
= { µ S1(
0
1x ) ∧µ S2(
0
2
x ) }
= min { 2
15 , 1
5  }
=
2
15 ,
µ Y,2(
0
2
y ) = min { µ L1(
0
1x )  } = 3
10 ,
µ Y,3( y3
0 ) = min { µ L2(
0
2
x )  } = 1
7 .
(iv)
The average value of the final output, corresponding to the input 
0
1x
= 13 and 
0
2
x  = 4:
y0 = 
∑
∑
=
=
µ
⋅
µ
3
1
0
,
3
1
0
0
,
)
(
)
(
i
i
i
Y
i
i
i
i
Y
y
y
y
=
7
1
10
3
15
2
3
4
7
1
2
13
10
3
15
2 17
+
+
⋅
+
⋅
+
⋅
≈ 7.649.
1
5
10
15
20
25
30
µS(  )
y
y
1
5
10
15
20
25
30 y
(  )
µL y
1
1
5
10
15
20
25
30 y
µL (  )
y
2
Figure 3.3
The three output membership functions in Example 3.1.

96
Fuzzy System Modeling •• 3
(v)
The three membership functions, one “small” and two “large,” for the 
final output:
µS(y) = 
⎪⎩
⎪⎨
⎧
≤
≤
≤
≤
+
−
,
30
20
,0
,
20
0
,1
20
y
y
y
µL1(y) = 
⎪⎩
⎪⎨
⎧
≤
≤
≤
≤
−
≤
≤
,
30
10
0
,
10
5
,1
,5
0
,0
5
y
y
y
y
µL2(y) = 
⎪
⎩
⎪⎨
⎧
≤
≤
≤
≤
−
≤
≤
,
30
0
,
1
,
,1
0
,0
3
10
3
10
7
3
7
3
y
y
y
y
in which µS(y) can be computed from µS1 and µS2 by the α-cut operations (see 
Example 1.12), and, similarly, µL1(y) from µL1(
0
1x ) and µL2(y) from µL2(
0
2
x ),
respectively.  Here, to find µL1(y) from µL1(
0
1x ), for instance, we use α-cut on 
the membership function curve µL1(x1): α = (x − 10), and obtain x11 = 10α +
10, while x12 = 20 is obtained from Figure 3.2 (b).  Thus, we have [x11,x12] =
[10α+10,20].  It then follows from the implication rule R2 (y2 = 2
1 x1) that the 
output interval is [y21,y22] = [5α+5,10].  Then, by setting y21 = 5α + 5, we
have α = y21/5 − 1 on [5,10] (since µL1(y=5) = 0 and µL1(y=10) = 1). These
membership functions are finally extended to the interval Y = [0,30]. The
resulting three output membership functions are shown in Figure 3.3 (see
Problem P3.1).
B. Parameters Identification in Static Fuzzy Modeling
It should be pointed out that the approach discussed in the last subsection, 
including the input-output algorithm and the example given therein, is about
how to describe the input-output relations there for an unknown system. Note
that the input-output relations are partially known, namely, the constant
coefficients in the relations
yi = ai0 + ai1x1 + ... + ainxn,
xi ∈Xi,
i=1,...,N,
are all given (see Example 3.1).  Hence, this is not a complete issue of
modeling.
Very often, we only have the knowledge of the structure of the unknown
system, say in the form of the above linear relations (implications), where the
constant coefficients are unknown.  We note that if the structure is also
unknown, then the modeling problem becomes extremely difficult, which will
not be further discussed in this book.  Nevertheless, we can use the above
relations (implications) to approximate the unknown system, regardless of its
hidden structure, by finding out good (if not the best) coefficients such that
these relations can well represent (approximate) the unknown system.  In
general, we need to identify the unknown coefficients (system parameters)

3 •• Fuzzy System Modeling
97
based on the available input-output data under a certain meaningful model-
matching criterion such as least-squares.  This is called the system parameter
identification problem.
In order to solve the system modeling problem, we have to determine the
following five items by using the available input-output data:
(i)
x1,...,xn: input variables, used as the premises of fuzzy logic
implications.
(ii)
X1,...,Xn:  input variable intervals, used as fuzzy subsets.
(iii)
µX1,...,µXn: membership functions of the input variables, used to
measure the qualities and quantities of the inputs.
(iv)
Ri: relations (implications), used as descriptions of system input-
output behavior, which take the form
yi = ai0 + ai1x1 + ... + ainxn,
xi ∈Xi,
i=1,...,N.
(v)
ai0,...,ain (i=1,...,N): constant parameters of the model, used for the
overall mathematical model.
Once these steps have been carried out, the fuzzy system modeling can be
completed by applying the input-output algorithm studied in the last
subsection.
In Step (i), generally speaking, to choose input variables x1,...,xn, we first
select some important ones from all possible inputs based on knowledge and
experience.  Then we carry out the next few steps to come out with the
corresponding system outputs.  Finally, we compute the errors between the
output values of the model and the actual (measured) output data of the
unknown system, and then improve the choice of the input variables by
minimizing these errors.
In Step (ii), all the input variable intervals are determined by estimating the 
ranges of the input values, or taking the minimum and maximum values of
input variables directly from the data.
In Step (iii), all the membership functions of input variables are selected,
more or less subjectively, by the designer based on his experience and the
meaning of these functions to the real physical system. Again, this is a
modeling (or design) problem which does not lead to a unique choice in
general. An experienced designer usually comes up with a better mathematical 
model using the same set of available data. Uniform shape(s) of membership
functions are usually desirable for computational efficiency, simple memory,
easy analysis, etc.  The most common choices of simple and efficient
membership functions are triangular, trapezoidal, Gaussian functions, etc., as
shown in Figure 1.4.  Since all input variables assume real values in general,
or can be identified by (or mapped to) real values, the uniform triangular
membership functions describing negative large (NL), negative medium
(NM), negative small (NS), zero (Z), positive small (PS), positive medium
(PM), and positive large (PL), all in absolute values, as shown in Figure 3.4,
are very effective for system input (and output) variables.  One may also use

98
Fuzzy System Modeling •• 3
very small, very large, very very large, etc., to extend the covering of the
membership functions whenever necessary.
In Step (iv), for simplicity of design we have taken the linear input-output
relations (implications) in this discussion, which will be fixed after being
selected. In general, these relations should be obtained from the physics of the 
unknown system, reasonable mathematical description of the system, or
human experience.
Finally, in Step (v), constant parameters are determined by minimizing the
errors between the output values of the model and the actual (measured)
output data of the unknown system.  Here, the most convenient way to
perform the minimization is to use the standard least-squares method.  In the
case that measurement noise is taken into account in the data, some successful 
optimal estimation techniques such as the Kalman filtering may also be
employed.
We now show how the least-squares method can be applied to determine
optimal constant parameters for the static fuzzy modeling problem discussed
above.
The Least-Squares Parameter Identification Scheme: Start with the
fuzzy IF-THEN rules that provide the input-output relations (implications):
R1:
IF x1 is X11 AND ... AND xn is X1n
THEN y1 = a10 + a11x1 + ... + a1nxn,
M
RN:
IF x1 is XN1 AND ... AND xn is XNn
THEN yN  = aN0 + aN1x1 + ... + aNnxn,
where, for each i = 1,...,N, all Xij share the same fuzzy subset Xj and the same 
membership function µXj, j = 1,...,n, and
ai0 ∈A0, ai1 ∈A1, ..., ain ∈An.
The final output y for the inputs x1,...,xn is given by formulas (3.11)-(3.12):
y = 
(
) (
)
(
)
∑
∑
=
=
µ
µ
+
+
+
⋅
µ
µ
∧
∧
∧
∧
N
i
n
X
X
N
i
n
in
i
i
n
X
X
x
x
x
a
x
a
a
x
x
in
i
in
i
1
1
1
1
1
0
1
)
(
...
)
(
...
)
(
...
)
(
1
1
,
(3.13)
xmin
xmax
NL
NM
NS
PS
PM
PL
Z
0
1
Figure 3.4 Uniform triangular membership functions over the value range
[xmin,xmax] of an input variable x.

3 •• Fuzzy System Modeling
99
where µXij(xj) = µXj(xj) is the membership value of xj obtained in the rule Ri, i
= 1,...,N, j=1,...,n.  Let
βi = 
(
)
∑
=
µ
∧
∧
µ
µ
∧
∧
µ
N
i
n
X
X
n
X
X
x
x
x
x
in
i
in
i
1
1
1
)
(
...
)
(
)
(
...
)
(
1
1
,
i=1,...,N,
(3.14)
and rewrite (3.13) as
y
=
)
...
(
1
1
0
1
n
in
i
i
N
i
i
x
a
x
a
a
+
+
+
β
∑
=
=
[
]
⎥
⎥
⎥
⎥
⎦
⎤
⎢
⎢
⎢
⎢
⎣
⎡
β
β
β
∑
=
in
i
i
N
i
n
i
i
i
a
a
a
x
x
M
1
0
1
1
...
.
(3.15)
Suppose that a set of input-output data is given:
1
1x ,
1
2x ,
...,
1
nx ,
y1;
2
1x ,
2
2x ,
...,
2
nx ,
y2;
M
M
x1 ,
M
x2 ,
...,
M
nx
,
yM.
To determine the coefficient parameters {ai0,ai1,...,ain| i = 1,...,N } by using this 
set of data, we use the standard least-squares method and write, by
substituting the data set into (3.15) successively, a system of algebraic
equations,
ΛΛθθ = b,
(3.16)
where
ΛΛ =
ΛΛM×(N×(n+1))
=
⎥
⎥
⎥
⎦
⎤
⎢
⎢
⎢
⎣
⎡
β
β
β
β
β
β
β
β
β
β
β
β
NM
M
n
M
M
n
NM
M
M
M
NM
M
N
n
n
N
N
x
x
x
x
x
x
x
x
L
L
L
L
M
M
M
M
M
M
L
L
L
L
1
1
1
1
1
1
1
11
1
1
1
1
11
1
1
1
11
,
θθ
=
[
]T
1
))
1
(
(
1
1
11
0
10
×
+
× n
N
Nn
n
N
N
a
a
a
a
a
a
L
L
L
L
,
b
= [
] T
1
2
1
×
M
M
y
y
y
L
,
βkj = 
(
)
∑
=
µ
∧
∧
µ
µ
∧
∧
µ
N
k
j
n
X
j
X
j
n
X
j
X
x
x
x
x
kn
k
kn
k
1
1
1
)
(
...
)
(
)
(
...
)
(
1
1
,
k = 1,...,N;
j = 1,...,M.
It then follows from the standard least-squares method that the optimal
coefficients θθ* are given by (i) if ΛΛ has a full column-rank:
θθ* = [ΛΛT ΛΛ ]–1 ΛΛT b,
(3.17)
or (ii) if ΛΛ does not have a full column-rank, then decompose ΛΛ = LC, where 
L has a full column-rank and C has a full row-rank; both need not be square,
which is always possible, and

100
Fuzzy System Modeling •• 3
θθ* = C T [ CC T ]–1 [ L T L ]–1 L T b.
(3.18)
This is the pseudo-inverse solution of the least-squares optimization.
Example 3.2. Consider an unknown system with one input x and one
output y, as shown in Figure 3.5 (a).  Let the input x be within the range X =
[0,10], with the associate membership functions µS(⋅) and µL(⋅) describing
“small” and “large,” respectively, as shown in Figure 3.5 (b)-(c).
Suppose that the unknown system is the following precise fuzzy static
system:
Real system:
1
0
R :
IF x is small with a membership value µS(x)
THEN y = 2 + 0.5x.
2
0
R :
IF x is large with a membership value µL(x)
THEN y = 9 + 0.3x.
Suppose, on the other hand, that we try to identify this system by the
following estimated fuzzy static model:
R1:
IF x is small with a membership value 
)
(
~
x
S
µ
THEN y = a10 + a11x.
R2:
IF x is large with a membership value 
)
(
~
x
L
µ
THEN y = a20 + a21x.
Here, in general, 
S
µ~  and 
L
µ~  are likely different from µS and µL, respectively, 
since we don’t exactly know the real system.  For simplicity of discussion in
this example, however, let us suppose that we set the membership functions in 
the modeling phase in such a way that 
S
µ~  = 
S and 
L
µ~  = µ , but we don’t
a10 a11 a20
a21
Now, suppose that we have carried out some experiments on the unknown
Input Output Data
0.2
0.4
0.8
1.0
10.0
y
2.8
3.5
1.5
...
10.4
Suppose also that in this example, we created the data by using the true input-
1
0
R  and 
2
0
R  in the real system, namely, y = 2 + 0.5x and y = 9 
+ 0.3x, respectively, by incorporating with pseudo Gaussian white noise of
zero mean and a small covariance.
x
y
black box
1
5
10
µS
x
0
1
5
10
µL
x
0
(a)
(b)
(c)
Figure 3.5 The unknown system and its two input membership functions.

3 •• Fuzzy System Modeling
101
To follow the least-squares parameter identification scheme, we first
compute the following (see Figure 3.5 (b)-(c) and Table 3.1):
µS(x1)
= µS(0.2)
= 0.97,
µS(x2)
= µS(0.4)
= 0.94,
M
µS(x50)
= µS(10.0)
= 0.00,
and
µL(x1)
= µL(0.2)
= 0.00,
M
µL(x49)
= µL(9.8)
= 0.97,
µL(x50)
= µL(10.0)
= 1.00.
Then, we compute:
β1,1 = 
)
(
+
)
(
)
(
1
1
1
x
x
x
L
S
S
µ
µ
µ
,
β2,1 = 
)
(
+
)
(
)
(
1
1
1
x
x
x
L
S
L
µ
µ
µ
,
β1,2 = 
)
(
+
)
(
)
(
2
2
2
x
x
x
L
S
S
µ
µ
µ
,
β2,2 = 
)
(
+
)
(
)
(
2
2
2
x
x
x
L
S
L
µ
µ
µ
,
M
M
β1,50 = 
)
(
+
)
(
)
(
50
50
50
x
x
x
L
S
S
µ
µ
µ
,
β2,50 = 
)
(
+
)
(
)
(
50
50
50
x
x
x
L
S
L
µ
µ
µ
.
Finally, we solve the following equation by using the least-squares formula
(3.17) or (3.18):
ΛΛθθ = b,
where, in this example,
ΛΛ = 
4
50
50
,2
50
50
,1
50
50
,2
50
,1
1,2
1
1,1
1
1,2
1,1
×
⎥
⎥
⎥
⎦
⎤
⎢
⎢
⎢
⎣
⎡
β
β
β
β
β
β
β
β
x
x
x
x
M
M
M
M
,
θθ = [
]T
1
4
21
11
20
10
×
a
a
a
a
,
b = [
]T
1
50
50
2
1
...
×
y
y
y
,
x
y
1
2
3
4
5
6
7
8
9
10
11
12
5
10
15
Figure 3.6 Experimental input-output data for Example 3.2.

102
Fuzzy System Modeling •• 3
in which xk and yk, k = 1, 2, ..., 50, are given in Table 3.1 (or Figure 3.6).  The
result is obtained from the given simulation data as
θθ* = [ ΛΛTΛΛ ]–1 ΛΛT b = 
⎥
⎥
⎥
⎥
⎦
⎤
⎢
⎢
⎢
⎢
⎣
⎡
38
.0
56
.0
68
.8
87
.1
.
Thus, the identified model, which is optimal in the sense of least-squares, is
obtained as follows:
R1:
IF x is small with a membership value
)
(
~
x
S
µ
THEN y = 1.87 + 0.56x.
R2:
IF x is large with a membership value 
)
(
~
x
L
µ
THEN y = 8.68 + 0.38x.
The associate membership functions are 
S
µ~  = µS and 
L
µ~  = µL, as shown in
Figure 3.5 (b)-(c).
II. DISCRETE-TIME DYNAMIC FUZZY SYSTEMS AND THEIR 
STABILITY ANALYSIS
In the last section, we discussed how to establish a static fuzzy model for
an unknown system that has a linear input-output relationship.  The result is a 
static fuzzy model given by a set of fuzzy IF-THEN rules in the form
Ri:
IF x1 is Xi1 AND ... AND xn is Xin
THEN yi = ai0 + ai1x1 + ... + ainxn,
i=1,...,N,
(3.19)
and the final output is
y = 
∑
∑
=
=
µ
⋅
µ
N
i
i
i
Y
N
i
i
i
i
Y
y
y
y
1
,
1
,
)
(
)
(
 ,
(3.20)
where  i=1,...,N.
This fuzzy modeling by its nature is static.  Yet if the input-output
relations are such that
x1 = x(k),
x2 = x(k−1),
M
xn = x(k−(n−1)),
and
yi = yi(k),
i=1,...,N,
so that we have a system of input-output relations of the form
yi(k) = ai0 + ai1x(k) + ai2x(k−1) + ... + ainx(k–(n–1)),
(3.21)
i=1,...,N, then this new system is considered to be dynamic, since it is
described by a set of difference equations rather than a simple input-output

3 •• Fuzzy System Modeling
103
mapping.  This case is special in that all the inputs x1,..., xn are related (each
state is the delay of its previous one) and the output is given at the last step of 
the process.  Equation (3.21) is a typical discrete-time dynamic system in the
classical systems theory if all quantities involved are crisp.
A. Dynamic Fuzzy Systems without Control
We are interested in the stability of a discrete-time dynamic (fuzzy) system 
described by (3.21).  The reason is that when we are doing system modeling,
we would like that the resulting model works well in the sense that it
approximates the unknown system closely (preferably, optimal in some sense)
and performs its actions stably, particularly for dynamic processes.  In other
words, stability is one criterion, or one of the few most important issues, in
dynamic system modeling, as is in common practice of system engineering.
Definition 3.1. A typical single-input/single-output (SISO), discrete-time,
dynamic fuzzy system is a fuzzy model described by a set of fuzzy IF-THEN
rules of the form
Ri:
IF x(k) is Xi1 AND ... AND x(k−(n–1)) is Xin
THEN yi(k) = ai0 + ai1x(k) + ai2x(k–1) + ... + ainx(k–(n–1)),
i=1,...,N,
with x(k+1) = cky(k+1), k = 0, 1, 2, ..., in which
y(k+1)  =
∑
∑
=
=
+
⋅
N
i
i
N
i
i
i
w
k
y
w
1
1
)1
(
,
k=0,1,2,....
Here, the fuzzy sets consist of intervals {Xj| j=1,...,n } with the associate fuzzy 
membership functions {µXj | j=1,...,n }, and { wi | i=1,...,N } is a set of weights 
satisfying wi ≥ 0, i=1,...,N, and ∑=
N
i
i
w
1
> 0.
In this definition, in all the rules Ri, i=1,...,N, Xij share the same fuzzy
subset Xj and the same membership function µXj, for each j=1,...,n.
We also note that, similar to formula (3.20), the weights  {wi | i=1,...,N}
usually are chosen to be equal to µYi(yi). Moreover, for simplicity of notation
and discussion in the following, we will always let ck = 1 for all k=0,1,2,...,
and ai0 = 0 for all i=1,...,N, although this is not necessary in general.
Now, we start with a given SISO, discrete-time, dynamic fuzzy system,
where the fuzzy sets (both intervals and membership functions) and constant
coefficients are all known (given, or have been identified).  We want to study
under what conditions on those constant coefficients the dynamic fuzzy
system is asymptotically stable.  This criterion is important and useful for a
designer to verify if the established fuzzy model is in good working
conditions.
We first recall some standard concepts and stability results in classical
systems theory.

104
Fuzzy System Modeling •• 3
Definition 3.2. A multi-input/multi-output (MIMO), nonlinear, discrete-
time, dynamic system of the form
x(k+1) = f(x(k)),
x(k) ∈Rm,
k=0,1,2,...,
is said to be asymptotically stable about an equilibrium point xe, or xe is an
asymptotically stable equilibrium point of the system, if
xe = f(xe)
and, starting from any x(0) ∈Rm, all x(k) are bounded and
x(k) →xe
(k→∞).
In this definition, the convergence x(k) →xe (k→∞) is usually measured by 
the l2-norm (the “length” of a vector), namely,
→∞
klim  || x(k) – xe ||2 = 0,
where
|| [ x1 ... xm ]T ||2 = 
2
2
1
...
m
x
x
+
+
.
Also, in this definition, since we allow the initial state x(0) to be arbitrary, 
this asymptotic stability is sometimes said to be “in the large,” meaning
“globally” in Rm.  Since we only discuss this global asymptotic behavior of the 
system trajectories in this section, we will not distinguish it from any other
local stabilities.
The following stability criterion is well known in classical systems theory.
Theorem 3.1. Suppose that the MIMO, nonlinear, discrete-time, dynamic
system
x(k+1) = f(x(k)),
x(k) ∈Rm,
k=0,1,2,...,
has an equilibrium point xe = 0, and that there exists a scalar-valued function
V(x(k)) satisfying
(i)
V(0) = 0;
(ii)
V(x(k)) > 0 for all x(k) ≠ 0;
(iii)
V(x(k)) →∞ as || x(k) ||2 →∞; and
(iv)
V(x(k+1)) −V(x(k)) < 0 for all x(k) ≠ 0, and for all k=0,1,2,....
Then this system is asymptotically stable about the equilibrium point 0.
In this theorem, the function V(x(k)), if it exists, is called a Lyapunov
function.
We note that this theorem particularly applies to all linear time-invariant
state-space systems of the form
x(k+1) = A x(k),
x(k) ∈Rm,
k=0,1,2,....
(3.22)
For this linear time-invariant system, however, there is a very simple criterion 
for the determination of its asymptotic stability.
Theorem 3.2. Let λj, j = 1, ..., m, be eigenvalues, counting multiple ones,
of the constant matrix A in the linear time-invariant system (3.22).  Then the
system is asymptotically stable about the equilibrium point 0 if and only if
| λj | < 1
for all j=1,...,m.
Now, return to the single-input/single-output, linear, discrete-time dynamic 
fuzzy system described in Definition 3.1.  To apply the classical stability
theorem 3.1 or 3.2 to it, we first reformulate it in the state-space setting as

3 •• Fuzzy System Modeling
105
follows.  Let ck = 1, k = 0, 1, 2, ..., and ai0 = 0, i = 1, ..., N, in the system (for 
simplicity, as mentioned above). Define
x(k) = [ x(k) x(k−1) x(k−2) … x(k−(n−1)) ]T,
Ai = 
⎥
⎥
⎥
⎥
⎥
⎥
⎦
⎤
⎢
⎢
⎢
⎢
⎢
⎢
⎣
⎡
−
0
1
0
0
0
0
0
1
0
0
0
0
1
1
,
2
1
L
M
O
M
M
L
L
L
in
n
i
i
i
a
a
a
a
.
Although this (canonical) formulation has some redundancy (only the first
equation is essential), it is convenient to use for stability analysis. We can then 
rewrite the system as
x(k+1) = 
∑
∑
=
=
N
i
i
N
i
i
i
w
k
A
w
1
1
)
(
x
k=0,1,2,....
(3.23)
Corollary 3.1. In the dynamic fuzzy system (3.23), let
A = 
i
n
i
n
i
i
A
wi
w
∑∑
=
=
1
1
,
and assume that {wi}  are constants independent of k. Then, the system is
asymptotically stable if and only if all eigenvalues of A, λi, i=1,...,n, satisfying 
| λi | < 1, 
i=1,...,n.
Proof. This is an immediate consequence of Theorem 3.2.
We must point out an important fact that differing from the classical linear 
system (3.22), the linear fuzzy system (3.23) may not be asymptotically stable 
about its equilibrium point 0 even if each constant matrix Ai has eigenvalues
satisfying
| λij | < 1
i=1,...,N;
j=1,...,m.
This is because (3.23) is generally a time-varying system due to the fact that
membership functions are involved, so that its weights depend on the discrete-
time variable, k, and the system actually switches between its subsystems from 
time to time, as explained by the following example.
Example 3.3. Consider the discrete-time, linear, dynamic fuzzy system
described by
R1:
IF x(k−1) is Xa THEN x1(k+1) = x(k) −1
2 x(k−1),
R1:
IF x(k−1) is Xb THEN x2(k+1) = −x(k) −1
2 x(k−1),
where Xa = Xb = [−1,1] with membership functions µa and µb shown in Figure 
3.7, and with initial conditions x(1) = 0.90 and x(0) = −0.70. Here, x1(k+1) and 
x2(k+1) are the same x(k+1) in which the subscripts 1 and 2 only indicate that
they are the results of rules R1 and R2, respectively. In the next iteration,
x(k+1) comes into the right-hand sides of the two equations.
It can be easily verified that the two subsystem matrices
A1 = 
⎥⎦
⎤
⎢⎣
⎡
−
0
1
2
/
1
1
,
A2 = 
⎥⎦
⎤
⎢⎣
⎡
−
−
0
1
2
/
1
1

106
Fuzzy System Modeling •• 3
have all eigenvalues with absolute values strictly less than 1, so the two
subsystems are asymptotically stable. This is shown in Figure 3.8 (a)-(b).
However, the entire system is unstable, whose output plots are shown in
Figure 3.8 (c). The reason is that the fuzzy system output is given by
y(k+1) = x(k+1) = 
2
1
2
2
1
1
)
(
)
(
w
w
k
x
A
w
k
x
A
w
+
+
,
in which the weights w1 and w2 are time-varying, as shown in Figure 3.8 (d).
For this type of linear time-varying system, Theorem 3.2 does not apply in
general.
We now return to the discrete-time dynamic fuzzy system (3.23), which
generally is a linear time-varying (or, oftentimes, nonlinear) system due to the 
use of the fuzzy membership functions in the weights even if all system
matrices Ai are constant.  We next establish a useful stability criterion
1
0
–1
1
µa
a
1
0
–1
1
µb
b
Figure 3.7 Two membership functions in Example 3.3.
x
1
−1
0
k
x
1
−1
0
k
(a)
(b)
x
5
−5
0
k
w
1
0
k
w1
w2
(c)
(d)
Figure 3.8  System outputs of Example 3.3:
(a) output of x(k+1) = A1x(k);
(b) output of x(k+1) = A2x(k);
(c) output of the entire fuzzy system; 
(d) weights (output membership functions).

3 •• Fuzzy System Modeling
107
(condition) for this kind of fuzzy system.  To do so, we first need a
preliminary result from the classical systems theory.
Lemma 3.1. Let P be a positive definite matrix such that
ATPA −P < 0
and
BTPB −P < 0
for some matrices A and B of the same dimension.  Then
ATPB + BTPA − 2P < 0.
Proof. Since P is positive definite, we have
−(A−B)TP(A−B) ≤ 0,
so that
ATPB + BTPA − 2P
= −(A−B)TP(A−B) + ATPA + BTPB − 2P
= −(A−B)TP(A−B) + ATPA −P + BTPB −P
<
0.
Now, we are in a position to prove the following result.
Theorem 3.3. The discrete-time dynamic fuzzy system (3.23) is
asymptotically stable about the equilibrium point 0 if there exists a common
positive definite matrix P such that
,0
T
<
−P
PA
A
i
i
      for all i=1,2,...,N.
Proof. We prove the theorem by using Theorem 3.1.  In so doing, we
construct a Lyapunov function candidate
V(x(k)) = xT(k) P x(k),
k=0,1,2,...,
where P is the common positive definite matrix stated in the theorem.
Clearly, this function satisfies the following properties:
(i)
V(0) = 0;
(ii)
V(x(k)) > 0 for all x(k) ≠ 0; 
(iii)
V(x(k)) →∞ as || x(k) ||2 →∞.
To verify that this function also satisfies the property
(iv)
V(x(k+1)) −V(x(k)) < 0 for all x(k) ≠ 0, k=0,1,2,...,
we carry out the calculations as follows:
V(x(k+1)) −V(x(k))
= xT(k+1)P x(k+1) −xT (k)P x(k)
= [
∑
∑
=
=
N
i
i
N
i
i
i
w
k
x
A
w
1
1
/)
(
]TP [
∑
∑
=
=
N
i
i
N
i
i
i
w
k
x
A
w
1
1
/)
(
] −xT(k)P x(k)
= xT (k) { [
∑
∑
=
=
N
i
i
N
i
i
i
w
A
w
1
1
T /
] P [
∑
∑
=
=
N
i
i
N
i
i
i
w
A
w
1
1
/
] −P } x(k)
=
∑∑
∑∑
=
=
=
=
−
N
i
N
j
j
i
N
i
N
j
j
i
j
i
w
w
k
x
P
PA
A
k
x
w
w
1
1
1
1
T
T
/)
(
]
)[
(
=
)
(
]
[)
(
T
1
T
2
k
x
P
PA
A
k
x
w
i
i
N
i
i
−
⎩
⎨
⎧∑
=
∑∑
∑
=
=
<
⎪⎭
⎪⎬
⎫
−
+
+
N
i
N
j
j
i
N
j
i
i
j
j
i
j
i
w
w
k
x
P
PA
A
PA
A
k
x
w
w
1
1
T
T
T
)
(
]
2
)[
(
< 0,

108
Fuzzy System Modeling •• 3
where the last inequality follows from Lemma 3.1 and the facts that wi ≥ 0 for 
all i=1,...,N, and ∑=
N
i
i
w
1
> 0.
Therefore, the conditions of Theorem 3.1 are all satisfied, so that its
conclusion follows.
We remark that the linear matrix inequality (LMI) problem stated in
Theorem 3.3 is equivalent to the following convex programming problem:
0
>
Pmin
N
imax
≤
≤
0
λmax(
T
iA P Ai – P ) < 0
where λmax(⋅) is the maximum eigenvalue of a matrix. This convex
programming problem can be solved efficiently by the “interior point
algorithm” using the LMI Control Toolbox with Matlab.
Theorem 3.3 brings up a question: in general, how can we tell if such a
common positive definite matrix P exists?  The following theorem provides a
necessary (but not sufficient) condition.
Theorem 3.4. Let Ai, i=1,...,N, be stable and nonsingular matrices, namely, 
with eigenvalues 
0 < | λi | < 1, 
i=1,...,N.
If there exists a common positive definite matrix P such that
T
iA P Ai −P <  0,
i=1,...,N,
then the product matrices Ai Aj are all stable for i,j=1,...,N.
Proof. If such a matrix P exists, then we have
P < [
1
−
iA
]T P [
1
−
iA
],
since Ai are nonsingular and [
1
−
iA
]T = [
T
iA ]–1, i=1,...,N.  Thus, it follows,
again from the given inequality, that
T
iA P Ai < P < [
1
−
j
A
]T P [
1
−
j
A
],
i,j=1,...,N.
This yields
T
j
A
T
iA  P Ai Aj −P < 0,
i,j=1,...,N.
That is, the product matrix AiAj is a stable matrix (with all the eigenvalues
having absolute values strictly less than one).
Returning to Example 3.3, we see that although the two subsystems are
stable, the product matrix
A1A2 = 
⎥⎦
⎤
⎢⎣
⎡
−
0
1
2
/
1
1
⎥⎦
⎤
⎢⎣
⎡
−
−
0
1
2
/
1
1
 = 
⎥⎦
⎤
⎢⎣
⎡
−
−
−
−
2
/
1
1
2
/
1
2
/
3
has eigenvalues λ1 = −0.135 and λ2 = −1.865, and so is unstable.  Hence, by
Theorem 3.4 there will not be a common positive definite matrix P satisfying
T
iA P Ai −P <  0,
i=1,...,N.
In other words, the asymptotic stability of the system in Example 3.3 cannot
be ensured.  Note, however, that this does not mean that the system must be
unstable, since the existence of P is only a sufficient condition for the
stability.  The instability (not the stability) has to be determined by other

3 •• Fuzzy System Modeling
109
methods. Plotting the system outputs, as shown in Figure 3.8 (c), is one
practical test, particularly for complex systems. 
B. Dynamic Fuzzy Systems with Control
Consider, again, the typical single-input/single-output (SISO), linear,
discrete-time, dynamic fuzzy system discussed in the last subsection
(Definition 3.1). We  now take into consideration also control inputs.
Definition 3.3. An SISO, discrete-time, dynamic fuzzy control system is a
fuzzy control model described by a set of fuzzy IF-THEN rules of the form
Ri:
(IF x(k) is Xi1 AND ... AND x(k−(n−1)) is Xin ) AND
(IF u(k) is Ui1 AND ... AND u(k−(m−1)) is Uim )
THEN yi(k) = ai0 + ai1x(k) + ... + ainx(k−(n−1))
+ bi0 + bi1u(k) + ... + bimu(k−(m−1)),
i=1,...,N,
with m ≤n and
x(k+1) = ck y(k+1),
k=0,1,2,...,
in which
y(k+1) = 
∑
∑
=
=
+
N
i
i
N
i
i
i
w
k
y
w
1
1
)1
(
k=0,1,2,...,
where the fuzzy sets consist of intervals {Xj|j=1,...,n} and {Uj|j=1,...,m}, and
their associate fuzzy membership functions {µXj|j=1,...,n} and {µUj|j=1,...,m},
respectively, and {wi|i=1,...,N} is a set of weights satisfying wi ≥ 0, i=1,...,N,
and ∑=
N
i
i
w
1
> 0.
Here, we note again that for each rule Ri, i=1,...,N, all the Xij share the same 
fuzzy subset Xj and the same membership function µXj, for each
j=1,...,n.
Also, the weights are usually quantified by the output membership functions
in the same way as in (3.20).
As before, for simplicity of notation and discussion, we will always
assume ck = 1 for all k=0,1,2,..., and ai0 = bi0 = 0 for all i=1,...,N, in this model.
It is clear that Definitions 3.1 and 3.3 have no essential difference if the
control inputs {u(k)} in Definition 3.3 are independent of the states {x(k)}.  In 
engineering control systems, however, most of the time we would like to have 
negative state-feedback controllers of the form
u(k)
= −K11x(k)
−K12x(k−1)
−... −K1nx(k−(n−1)),
u(k−1)
=
−K22x(k−1)
− ... −K2nx(k−(n−1)),
M
u(k−m) =
−Kmmx(k−m)
− ... −Kmnx(k−(n−1)),
where Kij are constant control gains to be determined.
Again, if these control inputs have crisp relations with the states, then
substituting them into the fuzzy control system described in Definition 3.3
results in a dynamic fuzzy system described by Definition 3.1.  However, if

110
Fuzzy System Modeling •• 3
these controllers are given by fuzzy descriptions, then the situation becomes
much more involved, both conceptually and mathematically.  In addition, a
control input may also depend on control inputs at the previous steps, which
will further complicate the computation.
To facilitate our discussion, let us consider a simple example. Suppose that 
a fuzzy control system is given by
1
S
R :
IF x(k) is X1 AND u(k) is U1
THEN x1(k+1) = a1x(k) + b1u(k).
2
S
R :
IF x(k) is X2 AND u(k) is U2
THEN x2(k+1) = a2x(k) + b2u(k).
Assume also that a state-feedback fuzzy controller is designed to be one
described by
1
C
R :
IF x(k) is X1 AND x(k−1) is X1
THEN u1(k) = −K11x(k) −K12x(k−1).
2
C
R :
IF x(k) is X2 AND x(k−1) is X2
THEN u2(k) = −K21x(k) −K22x(k−1).
Then, we can combine all possibilities, where it is important to note that for
“x(k) is X1 and u(k) is U1” there are two possibilities for the previous control
input u(k−1), either “is U1” or “is U2.” And the same is true for “x(k) is X2 and 
u(k) is U1.” We thus obtain
R11:
(IF x(k) is X1) AND (IF u(k) is U1 AND u(k−1) is U1)
THEN x11(k+1) := a1x(k) + b1u1(k)
= (a1 −b1K11) x(k) −b1K12x(k−1).
R12:
(IF x(k) is X1) AND (IF u(k) is U1 AND u(k−1) is U2)
THEN x12(k+1) := a1x(k) + b1u2(k)
= (a1 −b1K21) x(k) −b1K22x(k−1).
R21:
(IF x(k) is X2) AND (IF u(k) is U2 AND u(k−1) is U1)
THEN x21(k+1) := a2x(k) + b2u1(k)
= (a2 −b2K11) x(k) −b2K12x(k−1).
R22:
(IF x(k) is X2) AND (IF u(k) is U2 AND u(k−1) is U2)
THEN x22(k+1) := a2x(k) + b2u2(k)
= (a2 −b2K21) x(k) −b2K22x(k−1).
After all these state-feedback control inputs have been used, this fuzzy system, 
described by Definition 3.3, reduces to a new closed-loop dynamic fuzzy
system, given by the rules R11, R12, R21, and R22, in which there are no more
control variables u(k).  Thus, the stability conditions obtained in Theorem 3.3 
can be applied, namely, the designer can choose the feedback control gains
K11, K12, K21, and K22 to ensure the asymptotic stability of the overall
controlled system.
Example 3.4. Consider a fuzzy control system described by the following
rule base:
1
S
R :
IF x(k) is X1 AND x(k–1) is X1
THEN x1(k+1) = 2.178x(k) − 0.588x(k–1) + 0.603u(k).

3 •• Fuzzy System Modeling
111
2
S
R :
IF x(k) is X2 AND x(k–1) is X2
THEN x2(k+1) = 2.256x(k) − 0.361x(k−1) + 1.120u(k).
Let the fuzzy state-feedback controller be described by
1
C
R :
IF x(k) is X1 AND x(k–1) is X1
THEN u1(k) = r(k) −K11x(k) −K12x(k−1).
2
C
R :
IF x(k) is X2 AND x(k–1) is X2
THEN u2(k) = r(k) −K21x(k) −K22x(k−1).
Here, {r(k)} is a reference signal (set-points).
Since the control input u(k) does not appear in the condition parts, we
consider its membership values to be identically equal to 1 therein.  The
resulting closed-loop dynamic fuzzy system is then obtained as follows:
R11:
IF x(k) is X1 AND x(k–1) is X1
THEN x11(k+1) = (2.178−0.603K11) x(k)
    + (−0.588−0.603K12) x(k–1) + 0.603 r(k).
R12:
IF x(k) is X1 AND x(k–1) is X2
THEN x12(k+1) = (2.178−0.603K21) x(k)
   + (−0.588−0.603K22) x(k−1)  + 0.603 r(k).
R21:
IF x(k) is X2 AND x(k–1) is X1
THEN x21(k+1) = (2.256−1.120K11) x(k)
   + (−0.361−1.120K12) x(k−1) + 1.120 r(k).
R22:
IF x(k) is X2 AND x(k–1) is X2
THEN x22(k+1) = (2.256−1.120K21) x(k)
   + (−0.361−1.120K22) x(k−1) + 1.120 r(k).
The overall state output x(k+1) is then computed by
x(k+1) = 
4
3
2
1
22
4
21
3
12
2
11
1
)1
(
+
)1
(
+
)1
(
)1
(
w
w
w
w
k
x
w
k
x
w
k
x
w
k
x
w
+
+
+
+
+
+
+
+
for some weights wi ≥ 0, i=1,2,3,4, and ∑=
4
1
i
i
w > 0.
Suppose now that the membership functions µX1 and µX2 are given as
shown in  Figure 3.9. Then, the weights can be determined by using these
membership functions, as discussed before. Also, for simplicity, assume that
the reference signal r(k) = 0 for all k = 0,1,2,..., and that the controller in both 
1
C
R  and 
2
C
R  are the same:
u1(k) = u2(k) = –K x(k), k=0,1,2,.…
Then, the closed-loop fuzzy system reduces to the following simple one:
R1:
IF x(k) is X1 AND x(k–1) is X1
THEN x1(k+1) = (2.178−0.603K) x(k) − 0.588 x(k−1).
R2:
IF x(k) is X2 AND x(k–1) is X2
THEN x2(k+1) = (2.256−1.120K) x(k) − 0.361 x(k−1).
To analyze the stability of this closed-loop fuzzy system, Theorem 3.3 can 
be applied. Here, for this example of a linear time-invariant system, we show
another method of classical root locus analysis.

112
Fuzzy System Modeling •• 3
Figure 3.10 shows the root locus plots for the linear subsystems described
by R1 and R2, respectively, where 0 < K < ∞.  Recall that for discrete-time
systems, the stability boundary is the unit circle | z | = 1 on the eigenplane.  It 
is clear from Figure 3.10 that the two subsystems can be stabilized by
choosing 0.98 < K < 6.25 and 0.80 < K < 3.23, respectively, which together
yield the common stabilizing control gain range 0.98 < K < 3.23.
To verify this, we can also reformulate the closed-loop fuzzy control
system to the state-space setting, with
A1 = 
⎥⎦
⎤
⎢⎣
⎡
−
−
0
1
588
.0
603
.0
178
.2
K
,
A2 = 
⎥⎦
⎤
⎢⎣
⎡
−
−
0
1
361
.0
120
.1
256
.2
K
.
Pick a value for K, say K = 1.12, from the range 0.98 < K < 3.23, and pick a
positive definite matrix
P = 
⎥⎦
⎤
⎢⎣
⎡
−
−
0.1
3.1
3.1
0.2
.
Then, one can verify that the conditions
0
T
<
−P
PA
A
i
i
,
i=1,2,
are satisfied, so Theorem 3.3 ensures that the overall fuzzy control system is
asymptotically stable about its equilibrium point 0.
Finally, we note that if we combine the two subsystems together by the
weighted average formula
0.6
0.3
1
µX1
x(k)
0.7
0.4
1
µX2
x(k)
Figure 3.9 The two membership functions in Example 3.4.
Im
Re
−1
−1
1
1
0
K= 6.25
K= 0.98
Im
Re
−1
−1
1
1
0
K= 3.23
K= 0.80
Figure 3.10
The root locus plots for Example 3.4.

3 •• Fuzzy System Modeling
113
x(k+1) = 
2
1
2
2
1
1
)1
(
)1
(
w
w
k
x
w
k
x
w
+
+
+
+
for some constant weights w1 ≥ 0 and w2 ≥ 0, with w1 + w2 > 0, independent of 
k, then the stability of the overall closed-loop control system can be analyzed
by Corollary 3.1.  In this case, the root locus method may not be convenient to 
use.  Instead, by Corollary 3.1 one may simply choose a control gain K such
that the matrix
A = 
)
(
1
2
2
1
1
2
1
A
w
A
w
w
w
+
+
has all the eigenvalues with absolute value strictly less than 1, which is quite
easy in the case of this example.
Finally in this section, we return to system (3.23), now with control inputs, 
namely,
x(k+1) = A x(k) + B u(k),
k=0,1,2,...
(3.24)
where, in a general form,
A = ∑
=
N
i 1
βi Ai,
B = ∑
=
N
i 1
γi Bi,
with constant matrices Ai, Bi and coefficients βi, γi satisfying
0 ≤βi ≤ 1,
0 ≤γi ≤1,
i=1,2,...,N,
∑
=
N
i 1
βi = 1,
∑
=
N
i 1
γi = 1.
Note, again, that these coefficients usually depend on the discrete-time
variable k, and, in fact, depend on the state vector x(k) due to the involvement 
of the membership functions.
Suppose that a negative linear state-feedback controller is used:
u(k) = –K x(k),
k=0,1,2,...,
(3.25)
where K is a constant gain matrix to be determined. The controlled system is
x(k+1) = A x(k)
(3.26)
where
A  = A – B K = ∑
=
N
i 1
(βi Ai – γi Bi K).
Let ||⋅||s be the spectral norm of a constant matrix, which is equal to the largest 
singular value (namely, the largest absolute value of all the eigenvalues) of the 
matrix. Then, we have the following stability condition:
Theorem 3.5. If the feedback control gain matrix K in (3.25) is designed
such that the spectral norm of the matrix A  = A – B K is strictly less than 1,
uniformly with respect to x(k) and k, then the dynamic fuzzy controlled system 
(3.24) is asymptotically stable about its equilibrium point 0.
Proof. It is easily seen that if || A ||s < 1 uniformly with respect to x(k) and 
k, then
x(k+1) = A x(k) = 
2
A x(k–1) = ... = 
1
+
k
A
x(0),
so that

114
Fuzzy System Modeling •• 3
|| x(k+1) || ≤
1
||
+
k
s||
A
|| x(0) || → 0
(k →∞).
An easier (but rather conservative) condition is the following:
Corollary 3.2. Let
αi = max{ | βi |, | γi | },
|| Ai ||s ≤ai,
|| Bi ||s ≤bi,
i=1,2,...,N.
If
∑
=
N
i 1
αi (ai + bi) < 1
(3.27)
uniformly with respect to x(k) and k, then the dynamic fuzzy control system
(3.24) is asymptotically stable about its equilibrium point 0.
Proof. It suffices to note that
|| A ||s ≤∑
=
N
i 1
( | βi | ⋅ || Ai ||s + | γi | ⋅ || Bi ||s ) ≤∑
=
N
i 1
αi (ai + bi).
III*. MODELING OF CONTINUOUS-TIME DYNAMIC FUZZY 
CONTROL SYSTEMS
Modeling of a continuous-time dynamic system in the conventional
approach is to describe the physical system by, for example, a nonlinear
autonomous ordinary differential equation of the form
⎩
⎨
⎧
=
∞
<
≤
=
,
)
(
,
)),
(
),
(
(
)
(
0
0
0
x
t
x
t
t
t
u
t
x
f
t
x&
(3.28)
where x(t) ∈ Rn is the state-vector, u(t) ∈ Rm (m ≤n) is the control vector,
f:Rn×Rm→Rn is a nonlinear, usually integrable, function, and x0 is the initial
state of the system.  We will always assume that this mathematical model is
well defined on [t0,∞) in the sense that for each initial state x0 and each control 
input u(t) it has a unique solution x(t).  When certain control objectives are
taken into account, the model has to satisfy some additional conditions in
general.
The mathematical model (3.28), once established and accepted as an
appropriate description of the underlying physical system, represents a time-
evolutionary (dynamic) process via its explicit or implicit solution function
x(t) = x(t;u(t),x0).
We may consider this differential equation from a mathematical logic point 
of view:  at any instant t = t* ∈ [t0,∞), the system is described by the relation
that if the state vector x is equal to x(t*) and the control vector u is equal to
u(t*) then the derivative of the state vector, x& , is equal to 
*
d
)
(
d
t
t
t
t
x
=
.  As
mentioned above, since the differential equation (3.28) represents a time-
evolutionary process, we should view the system in a dynamic way.
However, this logic-based interpretation of the relation embedded in the

3 •• Fuzzy System Modeling
115
differential equation is also reasonable and, in fact, can be used for fuzzy
modeling of continuous-time dynamic systems.
Our purpose here is to establish a fuzzy version of the conventional
mathematical model (3.28), by using fuzzy logic and fuzzy mathematics.
To prepare for the development, we first briefly describe the fuzzy
contents that we need. In the continuous-time fuzzy modeling to be discussed
in this section, only triangular membership functions are used for simplicity.
Both the state and the control vectors, x and u, are assumed to have “fuzzy
values,” instead of having crisp values as in the classical setting, in the sense
that their values at any instant are located within certain subsets (usually,
intervals) with certain membership values, respectively.  Consequently, the
derivative of the state, &x , has a fuzzy value at each instant, as a logic-
inference result of both the state and the control.  Using the standard
terminology, a function y = y(t) assumes a fuzzy value at instant t = t~  is
described as follows:  If I is an interval with µI being the membership function 
defined on it, then the fuzzy value y( )
~t
 is located inside I with a
corresponding membership value measured by µI, namely, with the
membership value equal to µI( y( )
~t
). As usual, this is said “y is I.”
A. Fuzzy Interval Partitioning
To develop a continuous-time fuzzy modeling technique, we first need to
clearly describe a fuzzy set operation, which serves as a key in this approach.
Let σ > 0 be a chosen and fixed real number, and let
σ
nI   =  [ (n−1)σ , (n+1)σ ),
n = 0,±1,±2,...,
(3.29)
be a semi-closed interval in R, where the right-hand side of the interval can
actually be closed when interval arithmetic (Chapter 1) is performed, with the
associate normalized piecewise continuous membership function 
)
(x
nI σ
µ
defined on R, assuming nonzero values only on the interval 
σ
nI
. A simple
triangular membership function is used in this section for simplicity, which is
defined by
)
(x
nI σ
µ
 = 
⎪⎩
⎪⎨
⎧
σ
−
+
−
−
σ
0
)
/
(
)1
(
)1
(
)
/
(
x
n
n
x
else.
,
)1
(
)
(
if
,
)
(
)1
(
if
σ
+
≤
<
σ
σ
≤
<
σ
−
n
x
n
n
x
n
(3.30)
As usual, such an interval and its associated membership function together
define a fuzzy subset, denoted by Sn in the following. We first observe that
when n runs over all possible integers: n =0,±1,±2,..., these intervals together
cover the whole real line:
R  =  ( −∞ , ∞ )  =
U
∞
−∞
=
σ
n
n
I
,
which is called a fuzzy interval covering.

116
Fuzzy System Modeling •• 3
A fuzzy interval covering is visualized in Figure 3.11, where such a
partition of R is called a fuzzy interval partitioning because for x ∈ R,
.1
)
(
=
∑
σ
∞
−∞
=
x
Sn
n
 While a nonfuzzy partition specifies 
σ
n
S (x) = 1 for exactly
one n, the fuzzy partition defined here allows nonzero values for two adjacent 
intervals, with zero elsewhere, as is clear from Figure 3.11.
We note that the choice of equal-width intervals entails no loss of
generality, particularly in applications. We also note that Figure 3.11 serves as 
a fuzzification algorithm, which is to be discussed in more detail below. The
corresponding membership values can be associated with linguistic terms such 
as positive small (PS), positive medium (PM), and positive large (PL). These
linguistic labels have no impact on the modeling and analysis, but make fuzzy 
rules easy to understand and explain, as seen previously in discrete-time fuzzy 
modeling. Note that the real line can be covered simultaneously by several
fuzzy interval coverings with (probably different) scaling parameters, σ1,
σ2,....
We next introduce an interval operation into the coverings of the real line. 
Suppose that the real line has been covered by two interval coverings with
(probably different) scaling parameters σl and σ2:
R  =
U
∞
−∞
=
n
1
σ
nI
and
R  =
U
∞
−∞
=
m
2
σ
m
I
,
with the associate membership functions µIn
σ1(x) and µIn
σ2 (x) defined on them,
respectively. We first note that, in the covering R = 
∞
−∞
=
n
U
1
σ
nI
, for any
particular real-value x there always exists a unique integer n such that
nσl ≤x <  (n + 1)σl;
namely, x belongs to the intersection of two adjoining intervals, as shown in
Figure 3.12. In this case, we simply say that “x is 
1
σ
nI
∩
1
1
σ
+
nI
.”
Similarly, for any particular value of u in the second covering of R, there is 
a unique integer m satisfying
mσ2 ≤u <  (m+ 1)σ2;
and in this case, we say that “u is 
2
σ
m
I
∩
2
1
σ
+
m
I
.”
…
1
0
σ
2σ
3σ
4σ
…
Figure 3.11  Fuzzy interval covering of the real line.

3 •• Fuzzy System Modeling
117
Given these definitions, we now want to see IF x is 
1
σ
nI
∩
1
1
σ
+
nI
 AND u is 
2
σ
m
I
∩
2
1
σ
+
m
I
, THEN f(x, u). We are mainly concerned with the linear function 
f(x,u) = ax + bu for two arbitrary (yet crisp) real numbers a and b (not both
zero), which will eventually be extended to the case of a nonlinear function
f(x,u) in the last part of the section.  In order for this interval operation to be
closed, we expect to have the result in the form “ax + bu is 
3
σ
kI
∩
3
1
σ
+
kI
“ for
some real number σ3 > 0 and some integer k, calculated from the given σl, σ2,
n, m, a, and b. Here, we must have σ3 > 0 but the integer k can be either
positive, zero, or negative. 
If this can be done, then we should have
nσl ≤x <  (n+1)σl,
mσ2 ≤u <  (m+1)σ2,
kσ3 ≤ax + bu <  (k+1)σ3.
For a nontrivial linear combination ax + bu, which describes a single-
input/single-output (SISO) control system, we require a ≠ 0.  Thus, we have
only four cases to consider: (1) a > 0, b ≥ 0; (2) a > 0, b < 0; (3) a < 0, b ≥ 0; 
(4) a < 0, b < 0. We only discuss the first case here, since the other cases are
similar. In the first case, by matching both the lower and upper bounds of the
above three inequalities, we have
kσ3  = a(n)σl  + b(m)σ2,
(k+1)σ3  = a(n+1)σl  + b(m+1)σ2,
which yields
⎪⎩
⎪⎨
⎧
σ
+
σ
σ
+
σ
=
σ
+
σ
=
σ
,
)
(
)
(
,
2
1
2
1
2
1
3
b
a
m
b
n
a
k
b
a
guaranteeing
kσ3 ≤ax + bu < (k+1)σ3. All cases considered, where a ≠ 0
always, we arrive at
σ3  =  | a | σ1  +  | b | σ2
(3.31a)
and
0
σ
2σ
3σ
4σ
x
Figure 3.12
Position of a particular value of x.

118
Fuzzy System Modeling •• 3
k  =
⎪
⎪
⎩
⎪⎪
⎨
⎧
<
<
σ
σ
+
+
σ
+
≥
<
σ
σ
+
σ
+
<
>
σ
σ
+
+
σ
≥
>
σ
σ
+
σ
.0
,0
if
/
}
)1
(
)1
(
{
,0
,0
if
/
}
)
(
)1
(
{
,0
,0
if
/
}
)1
(
)
(
{
,0
,0
if
/
}
)
(
)
(
{
3
2
1
3
2
1
3
2
1
3
2
1
b
a
m
b
n
a
b
a
m
b
n
a
b
a
m
b
n
a
b
a
m
b
n
a
(3.31b)
Note that the value k obtained above is real but not necessarily an integer.
However, using the notation ⎣( l ) for the integer-floor of a real number l ,
namely:
⎣( l ) ≤l < ⎣( l ) + 1,
we always have
⎣(k)σ3 ≤ax + bu ≤  ( ⎣(k) + 2 )σ3,
so that, with p = ⎣(k),
IF x is 
1
σ
nI
∩
1
1
σ
+
nI
 AND u is 
2
σ
m
I
∩
2
1
σ
+
m
I
THEN ax + bu is 
3
σ
p
I
∩
3
1
σ
+
p
I
,
in which σ3 and k are calculated from (3.31a) and (3.31b), respectively.
We remark that in making this operation closed, we have actually enlarged
the range of the values of ax+bu whenever k is not an integer. It is however
important to point out that the enlargement makes the conclusion “THEN”
sufficient, although it is not necessary, and the situation is actually more
robust in the sense that if ax + bu satisfies
kσ3 ≤ax + bu < (k+1)σ3,
then it is always in 
3
σ
I
∩
3
1
σ
+
p
I
.  This is consistent with the interval arithmetic 
studied in Chapter 1.  Moreover, using
⎣(k) (or ⎣(k)+1) to replace (or,
approximate) k, we obtain the same partition of R:
R = 
U
(
)
3
k
k
U
∞
−∞
=
⎣
σ
+
⎣
)
(
1
)
(
3
k
k
I
.
This implies that using the integer ⎣(k) to replace (approximate) the real
number k only shifts the partition, and this, as will be seen in the sequel, has
no effect on the stability, controllability, and observability analyses as well as
optimal control computations discussed later in the book.
We next establish a mathematical formulation for fuzzy logic inference
rules, using the fuzzy interval operation introduced above.  To simplify the
statement of a rule, and to take into account the associate membership
functions, we will simply state as before that “x is 
σ
n
S “ instead of saying “x is 
σ
nI
∩
σ
+1
nI
 with the associate membership function value µ
σ
I (x).”  For
example, if x is  located as shown in Figure 3.12, then we will say “x is 
σ
2
S ,”
meaning that x belongs to the set 
σ
2I
∩
σ
3I
=[2σ,3σ) on the x-axis.
Formally, we define the following fuzzy logic inference rule:
IF x is 
1
σ
n
S
 AND u is 
2
σ
m
S

3 •• Fuzzy System Modeling
119
THEN y = f(x,u) = ax + bu is 
3
σ
p
S
,
(3.32)
where
⎩
⎨
⎧
⎣
=
σ
+
σ
=
σ
),
(
,
|
|
|
|
2
1
3
k
p
b
a
with k being defined in (3.31b).
This fuzzy rule formulation is a very natural logic-based description for the 
one-dimensional SISO system, conventionally described by y = ax + bu if all
functional values are crisp, which now has fuzzy means of both the state x and 
the controller u. Although at this moment what we have formulated is a simple 
SISO setting, it will shortly be extended to general multiple-input/multiple-
output (MIMO) systems and, eventually, generalized to some nonlinear
systems of the form y = f(x,u).  This simple rule (3.32) is key in all the
developments to be carried out below.
Because the 
σ
iS ’s overlap, a single rule for each of x or u may trigger
more than one rule. To determine a unique value for y, we use the following
weighted average defuzzification formula (see (3.12)):
y
=
∑
∑
×
)
(
)
(
value
membership
value
membership
member
of
value
(3.33)
B. Dynamic Fuzzy System Modeling
In this subsection, we describe continuous-time fuzzy modeling of a linear
MIMO control system, containing the SISO systems as a special case.
To motivate, we start with an SISO control system, with state x = x(t) and
control input u = u(t) defined on the time domain [0,∞). Suppose that the
system dynamics are described by the derivative of the state, x& , which is a
function of both x and u. If the relation between x&  and both (x,u) is known
exactly, then classical mathematical modeling techniques and the systems
control theory can be employed. The exact modeling x& = ax + bu simply
means, from a mathematical logic point of view, that at any instant t = t* ∈
[0,∞), if x is equal to x(t*) and u is equal to u(t*) then x&  is equal to 
*
d
)
(
d
t
t
t
t
x
= .
However, if this relation is not precisely given, then it is not well-defined and, 
hence, fuzzy modeling becomes necessary. In this case, our knowledge of the
plant (e.g., from experimental data) consists of statements like if x and u
belong to certain fuzzy sets, respectively, then x&  belongs to some other fuzzy 
set.  Each of such correspondence is called a realization of the hidden relation 
between x&  and (x,u). We next apply the fuzzy rule formulation (3.32) to
model such realizations.
We first consider the hidden relation to be linear in the sense that the
system dynamics x&  depends only on a linear combination of x and u; namely, 
there are two real (crisp) numbers a and b, not both zero, such that x&  is
determined by ax + bu, where both x and u are given only in fuzzy terms

120
Fuzzy System Modeling •• 3
(fuzzy sets to which they belong, and the values of membership functions that 
they assume). We model this linear realization in the following way: Let R(q)
be the qth realization of the system dynamics x& , described by the fuzzy rule
(3.32), and suppose that there are a total of l  realizations: 
q
x& , q = 1, ..., l :
Fuzzy Rules Base:
R(q):
IF x ∈
1
σ
q
n
S
 AND u ∈
2
σ
q
m
S
 THEN x& ∈
3
σ
q
p
S
,              (3.34)
where ∈ is used to mean “is” or “is in,” and 
⎩
⎨
⎧
⎣
=
σ
+
σ
=
σ
),
(
,
|
|
|
|
2
1
3
q
q
k
p
b
a
in which kq is defined in (3.31b), with n = nq and m = mq therein, q = 1, ..., l ,
and ⎣(.) is the integer-floor of a real number. 
We should point out that since normalized membership functions are used, 
this fuzzy model becomes nonfuzzy as all the scaling parameters σi approach
0, i = 1, 2, 3. That is, in this case the following logic-based description for the 
nonfuzzy model is obtained: at any instant t = t*, if x is equal to x(t*) and u is 
equal to u(t*) then x&  is equal to 
*)
(t
x&
, consistent with the classical theory.
Also, we note that for any x&  so determined, x&  belongs to two subsets,
3
σ
q
p
I
 and 
3
1
σ
+
q
p
I
, assuming two (probably different) membership values, say µq1
and µq2, respectively, for each realization q = 1,..., l .  For example, if
triangular membership functions are used, then the situation can be visualized 
by Figure 3.11. Using the defuzzification formula (3.33), the resulting system
dynamics,
)
(t
x&
, is calculated via the weighted-average defuzzification
formula
)
(t
x&
  =
∑
∑
=
=
µ
+
µ
µ
+
µ
l
l
&
&
1
1
}
{
)}
(
)
(
{
2
1
2
2
1
1
q
q
q
q
q
q
q
q
t
x
t
x
,
(3.35)
where all the multiplications are the ordinary arithmetic multiplications.
In this way, we have modeled the system dynamics as response to the
system states and control inputs that take fuzzy values. It is very important to
point out that the unknown system dynamics under modeling can indeed be
nonlinear or uncertain. As long as each of the fuzzy rules approximates the
system dynamics as a linear combination of the system state and control input, 
the unknown dynamics are modeled (and covered) by the above family of
fuzzy rules. The performance of this fuzzy modeling of an unknown system
dynamics will be evaluated via the analysis of stability and controllability
given later in this chapter.
The fuzzy model of an SISO control system works as follows: starting with 
a given initial state x0 and an initial control input u0, we first have
x0 ∈
1
σ
nI
∩
1
1
σ
+
nI
   and
u0 ∈
2
σ
m
I
∩
2
1
σ
+
m
I

3 •• Fuzzy System Modeling
121
for some integers n and m. Then, the dynamics of the control system, 
)
(t
x&
,
can be described by fuzzy IF-THEN rules (3.34), with the corresponding
scaling parameter σ3 and integer p determined for a small duration of time,
[t0,t1]. When the time goes on, until t > t1, so that either x(t) ∈
1
σ
nI
∩
1
1
σ
+
nI
 or 
u(t) ∈
2
σ
m
I
∩
2
1
σ
+
m
I
 is not satisfied, a new fuzzy rule, with a new n and/or a
new m, will be applied. As the time goes on and on, the fuzzy rules will be
switched again and again, and the system dynamics are then specified in this
piecewise manner throughout the entire process.
With the above motivation from the linear SISO system case, we now
extend the basic concepts and modeling techniques to MIMO control systems.
Consider a general MIMO linear control system of the form
⎩
⎨
⎧
=
+
=
,
)
(
),
(
)
(
)
(
0
0
x
t
x
t
u
B
t
x
A
t
x&
(3.36)
where
x(t) = [ x1(t) ... xr(t) ]T,
u(t) = [ u1(t) ... us(t) ]T,
A = 
⎥
⎥
⎥
⎦
⎤
⎢
⎢
⎢
⎣
⎡
rr
r
r
a
a
a
a
L
M
O
M
L
1
1
11
,
B = 
⎥
⎥
⎥
⎦
⎤
⎢
⎢
⎢
⎣
⎡
rs
r
s
b
b
b
b
L
M
O
M
L
1
1
11
,
in which, usually, 1 ≤s ≤r. We first investigate the free system
⎩
⎨
⎧
=
=
,
)
(
),
(
)
(
0
0
x
t
x
t
x
A
t
x&
(3.37)
with the fuzzy rules:
q
iR :
IF x ∈
i
in
S
1
σ  THEN x& ∈
i
ip
S
3
σ ,                                    (3.38)
where
⎪⎩
⎪⎨
⎧
σ
σ
α
⎣
=
σ
=
σ
∑
∑
=
=
),
(
,
|
|
1
3
1
1
1
3
r
v
i
v
iv
i
r
v
v
iv
i
p
a
in which
σiv = 
⎩
⎨
⎧
<
+
≥
,0
)1
(
,0
iv
v
iv
iv
v
iv
a
if
n
a
a
if
n
a
with i=1,...,r; q=1,..., l ; for the special case of σ3i = 0, we define pi = 0.
The free system (3.37), together with the fuzzy IF-THEN rules (3.38), is
called a fuzzy free system below.

122
Fuzzy System Modeling •• 3
In the above rules, σ3i and pi are determined as follows. First, it is clear that 
σ3i = 0 if and only if all aiν = 0, ν=1,...,r, namely, the ith row of the matrix A is 
identically zero, which means that the ith component of x&  has to be zero.
Hence, we define pi = 0 for this component of x& . Next, for a fixed implication 
q (hereafter, the fixed q is omitted), if xi(t) is 
i
in
S
1
σ , then we have
ni σ1i ≤xi(t)  <  (ni + 1) σ1i ,
i=1,...,r,
so that, in the case where all aij ≥ 0,
∑
∑
∑
=
=
=
σ
+
<
=
≤
σ
r
i
i
i
ji
r
i
i
ji
j
r
i
i
i
ji
n
a
t
x
a
t
x
n
a
1
1
1
1
1
)1
(
)
(
)
(
&
,
where j=1,...,r. All other cases can be verified similarly (see the discussion on 
(3.32) above), where the algebra is somewhat tedious but straightforward.
Now, to continue the case with all aij ≥ 0, we compare the above r inequalities 
with
kj σ3j ≤
jx&  <  (kj + 1) σ3j ,
j=1,...,r,
and obtain
kj σ3j = ∑=
σ
r
i
i
i
jin
a
1
1 ,
(kj + 1) σ3j = ∑=
σ
+
r
i
i
i
ji n
a
1
1
)1
(
,
where j=1,...,r.  The final rules (3.38) are then obtained by summarizing all
possible cases.
It is clear that in the special case where r = 1, this formulation reduces to
the one for SISO systems discussed in the last subsection.
Example 3.5. Consider a simple serial RL circuit shown in Figure 3.13,
where the input is the voltage source V(t), and the output is the current I(t)
observed at the ampmeter.  Assume that the initial condition for I(t) at t = 0 is 
I(0) = 0.
This typical RL circuit can be modeled in crisp mathematical formulation
using the Kirchoff law as
dt
t
dI )
(
= −L
R I(t)  +
L
1 V(t).
V t(  )
+
−
R
L
I  t(  )
t = 0
Figure 3.13
A serial RL circuit for Example 3.1.

3 •• Fuzzy System Modeling
123
This LC circuit can also be modeled with the fuzzy rules base (3.34) as
follows, if it has uncertainty, where for simplicity we let σ1 = σ2 = σ:
R(1):
IF I(t) ∈
σ
n
S  AND V(t) ∈
σ
m
S   THEN dI(t)/dt ∈
3
σ
p
S
.
In this example,
σ3 = (– L
R  + L
1 )σ,
k = [−L
R (n+1) + L
1 (m) ]σ,
p = ⎣(k).
Note that k is derived using equation (3.31b), with the knowledge that R > 0
and L > 0, which implies −R/L < 0 and 1/L > 0. As mentioned earlier, as σ→0,
this model reduces to the crisp equation.
In applications, one can also use the parameter identification technique
described in Section I.B and the observed data in a real circuit to determine p
and σ.
Example 3.6. Consider a simple mechanical system shown in Figure 3.14,
which is used in an automobile as a shock absorber for balancing (to provide
comfort to the driver on a road).  This system consists of three basic
mechanical components:  (i) a spring, (ii) a hydraulic, and (iii) a mass. The
spring is characterized by its stiffness K which provides a force proportional
to the displacement (position) of being stretched or compressed. The hydraulic 
is characterized by its damping B which provides a force proportional to the
rate of displacement (velocity) of being stretched or compressed. The mass is
characterized by the material of M which provides a force proportional to the
rate of the changing rate of displacement (acceleration) of being stretched or
compressed.  This typical system is sometimes referred to as a suspension
M
K
B
mass
stiffness
damping
y  t(  )
position
equilibrium
∆y  t(  )
displacement
Figure 3.14
A mechanical suspension system.

124
Fuzzy System Modeling •• 3
system.  Thus, an external force, f(t), will cause the system to oscillate around 
an equilibrium point as described by
M
)
(t
y&&
∆
−B
)
(t
y&
∆
−K ∆y(t) = f(t),
where ∆y(t) is the displacement of the mass, 
)
(t
y&
∆
 the velocity of the mass,
and
)
(t
y&&
∆
the acceleration of the mass. This equation can be rewritten as
)
(
/
1
0
)
(
)
(
/
/
1
0
)
(
)
(
2
1
2
1
t
u
M
t
x
t
x
M
B
M
K
t
x
t
x
⎥⎦
⎤
⎢⎣
⎡
+
⎥⎦
⎤
⎢⎣
⎡
⎥⎦
⎤
⎢⎣
⎡
=
⎥⎦
⎤
⎢⎣
⎡
&
&
,
where the state variables x1(t) = ∆y(t), x2(t) = 
)
(t
y&
∆
, and the control input u(t)
= f(t).
This suspension system can be described by the fuzzy rule base (3.34) as
follows, where, again, for simplicity, we let σ1 = σ2 = σ:
R(1):
IF x2(t) ∈
σ
2
n
S
 THEN 
)
(
1 t
x&
∈
31
1
σ
p
S
,
R(2):
IF x1(t) ∈
σ
1n
S
 AND x2(t) ∈
σ
2
n
S
 AND u(t) ∈
σ
m
S
THEN
)
(
2 t
x&
∈
32
2
σ
p
S
,
where
σ31 = σ,
σ32 = (K + B + 1) M
σ ,
p1 = ⎣(n2) = n2,
p2 = ⎣( K n1 + B n2+ m ) M
1 .
IV*. STABILITY ANALYSIS OF CONTINUOUS-TIME DYNAMIC 
FUZZY SYSTEMS
In this section, we first discuss the stability issue of the fuzzy modeling
established above, and then seek an answer to the question: If the nonfuzzy
linear MIMO free system
⎩
⎨
⎧
=
=
,
)
(
,
0
0
x
t
x
x
A
x&
(3.39)
is asymptotically stable about its equilibrium point 0, then is it also true for its 
corresponding fuzzy model? Many other general and significant results can
then be derived based on the positive answer to this question.
For this purpose, some basic concepts first need to be clarified. Recall that 
the concept of asymptotic stability given in Definition 3.2 is in the classical
sense. The linear free system (3.39) is said to be globally asymptotically stable 
about 0, if starting from any bounded initial state the system trajectory
remains to be bounded and eventually ||x(t)||2 → 0 as t →∞.
Now, we consider the fuzzy modeling of this free system, namely, the free
system (3.37) with the fuzzy IF-THEN rules (3.38) described in the last

3 •• Fuzzy System Modeling
125
subsection. For this fuzzy version of the free system, the conventional
asymptotic stability definition cannot be directly applied. Yet, the fuzzy model 
has the following stability, called the fuzzy σ-asymptotic stability, which is
consistent with the classical one when the model changes from fuzzy to
nonfuzzy as σ → 0. 
Definition 3.4. The fuzzy system (3.37) is said to be (globally) fuzzy σ-
asymptotically stable about its equilibrium point 0, if starting from any
bounded initial state the system trajectory remains to be bounded and
eventually satisfies ||x(t)||2 ≤σ as t →∞, where σ = max{σ11,...,σ1r}, which are 
given in the fuzzy rules (3.38).
Figure 3.15 illustrates this concept for a simple one-dimensional free
system with A = a < 0.
Obviously, a fuzzy σ-asymptotically stable system is asymptotically stable
in the classical sense if σ1i → 0 for all i=1,...,r, namely, if the fuzzy model
becomes nonfuzzy.
When the triangular membership functions (see Figure 3.11) are used, we
have the following result.
Theorem 3.6. The free fuzzy system described by (3.37) is fuzzy σ-
asymptotically stable about 0 if and only if all the eigenvalues of the system
matrix A have a negative real part.
Proof. The condition of negative real part for all eigenvalues of the system 
matrix A is necessary for the nonfuzzy case, even for the boundedness of the
solution trajectory alone, and is therefore necessary for the fuzzy setting.
Therefore, we only need to establish the sufficiency, namely, that if all the
eigenvalues of A have a negative real part then the fuzzy free system is σ-
asymptotically stable about 0.
To facilitate the arguments, we organize the proof as follow. We first give
a complete proof for the SISO systems. Then, we notice that a unitary
transform y = Ux, with any unitary matrix U, can change the free system x&  = 
Ax to y&  = Ay, such that A is a (block) diagonal matrix consisting of all the
complex eigenvalues of A, counting multiplicities. More importantly, observe
that this transform is stability-preserving, in the sense that the two systems
have the same stability, because the real parts of their eigenvalues are on the
diagonal and the imaginary parts and the multiplicities of the eigenvalues do
t
x0
0
σ1
–σ1
Figure 3.15
Fuzzy σ-asymptotic stability for a 1-D free system (with a < 0).

126
Fuzzy System Modeling •• 3
not alter the system stability.  Based on this fact, the stability of the MIMO
system can be justified in the same way as the SISO systems.  In the general
case, of course, standard yet tedious linear algebra is needed to complete a
rigorous proof.
Now, we start with an SISO system. Let a < 0 and the bounded initial
condition be x(t0) = x0. Consider a small time interval [t0, t1) where |t1−t0| < ε
for some ε > 0. Since x(t) is differentiable and continuous, there always exists 
an integer n (depending on the initial state x0) such that
nσ1 ≤x(t) < (n+1)σ1,
for all t∈[t0,t1),
provided that ε > 0 is small enough. Note that in so doing both x(t) and x& (t)
are well defined by the fuzzy rules on the interval [t0,t1). We next calculate x(t)
and x& (t).  First, x(t) belongs to the two subsets 
1
σ
nI
 and 
1
1
σ
+
nI
 with the
triangular membership function values
,
/]
)
(
[
)
(
,
/
)]
(
)1
[(
)
(
1
1
12
1
1
11
11
1
σ
σ
−
=
µ
=
µ
σ
−
σ
+
=
µ
=
µ
σ
+
σ
n
t
x
x
t
x
n
x
n
n
I
I
(3.40)
for the first implication with q = 1, where t∈[t0,t1). For simplicity of notation,
we only consider the case l = 1 in this proof, since for the general case where
l > 1, the following procedure can be carried out in exactly the same way
(which can be easily verified by noticing that the sum of the two triangular
membership function values at each point is always equal to one).
Now, the corresponding fuzzy rule, namely,
R:
IF x ∈
1
σ
n
S
∩
1
1
σ
+
n
S
 THEN x& ∈
3
σ
p
S
∩
3
1
σ
+
p
S
,
where
σ3 = | a | σ1
and
p = −(n+1),
(since a < 0), gives the following possible solutions for x& (t):
a (n + 1) σ1 ≤
)
(
11 t
x&
 < a (n − 1)σ1
and
a (n + 2) σ1 ≤
)
(
12 t
x&
 < a (n) σ1,
with µ11 and µ12 given by (3.40).  On the other hand, the weighted-average
formula (3.35) yields
x& (t) = 
12
11
12
12
11
11
)
(
)
(
µ
+
µ
µ
+
µ
t
x
t
x
&
&
.
It then follows that
12
11
11
µ
+
µ
µ
a (n + 1) σ1 + 
12
11
12
µ
+
µ
µ
a (n + 2) σ1
≤x& (t) <
12
11
11
µ
+
µ
µ
a (n − 1) σ1 + 
12
11
12
µ
+
µ
µ
a (n) σ1
or, after simplification,

3 •• Fuzzy System Modeling
127
a(n+1)σ1 + 
12
11
12
µ
+
µ
µ
aσ1 ≤x& (t) < a(n)σ1 −
12
11
11
µ
+
µ
µ
aσ1.
Substituting µ11 and µ12, which are given by (3.40), into the above yields
a x(t) + a σ1 ≤x& (t) < a x(t) – a σ1.
Consequently, by integrating the two systems obtained from the two
inequalities in the above, with the given initial condition, namely:
x& (t) = a x(t) ± a σ1,
x(t0) = x0,
we arrive at
(x0+σ1)ea(t-t0) – σ1 ≤x(t) < (x0–σ1)ea(t–t0) + σ1,
(3.41)
where t0 ≤t < t1, regardless where the x0 is located as long as it is bounded.
Note that this result is independent of the integer n.  Hence, when the time 
variable t goes beyond the interval [t0,t1), we can find another (probably
different) integer, n~  say, such that
( n~ )σ1 ≤x(t) < ( n~ +1)σ1
for t∈[t1,t2),
provided that we choose | t2 – t1 | ≤ε~  for another small (probably different)
ε~  > 0.  The same procedure can be repeated and leads to the relation (3.41)
for all t ∈ [t1,t2).
This process can then be continued, and eventually yields the following
sequential results:
(x0+σ1)ea(t-t0) – σ1 ≤x(t) < (x0–σ1)ea(t-t0) + σ1,
(t0 ≤t < t1)
(x1+σ1)ea(t-t1) −σ1 ≤x(t) < (x1−σ1)ea(t-t1) + σ1,
(t1 ≤t < t2)
(x2+σ1)ea(t-t2) −σ1 ≤x(t) < (x2−σ1)ea(t-t2) + σ1,
(t2 ≤t < t3)
M
where x1 in the second equation is given by the first equation with t = t1,
namely: x1 = x(t1) with
(x0+σ1)ea(t1–t0) – σ1 ≤x(t1) < (x0–σ1)ea(t1–t0) + σ1.
Substituting it into the second equation gives
(x0+σ1)ea(t-t0) – σ1 ≤x(t) < (x0–σ1)ea(t-t0) + σ1,
where t ∈ [t1,t2).  Then, repeating this procedure and observing that all the
resulting inequalities have the same formulation, we obtain generally
(x0+σ1)ea(t-t0) – σ1 ≤x(t) < (x0–σ1)ea(t-t0) + σ1,
(3.42)
where t ∈ [t0,tm) for any integer m ≥ 1.
To this end, we further argue that the sequence of time intervals, [t1,t2),
[t2,t3), ..., can be so chosen that tm →∞ as m →∞.  Actually, since
a(x0+σ1)ea(t-t0) ≤x& (t) < a(x0–σ1)ea(t-t0),
where t ∈ [t0,tm) for any m ≥ 1, we can show that the magnitude of the slope of 
x(t), namely |
)
(t
x&
|, becomes smaller as t tends to be larger: at t1 and t2, for
instance, we have
| x& (t1)| ≤max{ |a(x0+σ1)|ea(t1–t0), |a(x0–σ1)|ea(t1–t0) }
and
| x& (t2)| ≤max{ |a(x0+σ1)|ea(t2–t0), |a(x0–σ1)|ea(t2–t0) },
respectively, which implies that

128
Fuzzy System Modeling •• 3
max | x& (t2)| ≤max | x& (t1)|.
Indeed, it amounts to noting that if
|a(x0+σ1)|ea(t1–t0) ≥ |a(x0–σ1)|ea(t1–t0),
then multiplying to both sides by ea(t2–t1) ≥ 0 gives
|a(x0+σ1)|ea(t2–t0) ≥ |a(x0–σ1)|ea(t2–t0),
which implies that we only need to compare |a(x0+σ1)|ea(t1–t0) with
|a(x0+σ1)|ea(t2–t0), where the later is smaller.  Another case,
|a(x0+σ1)|ea(t1–t0) ≤ |a(x0–σ1)|ea(t1–t0)
yields the same result.  Hence, we always have  max | x& (t2)| ≤ max | x& (t1)|.
This means that the curve x(t) becomes flat on the interval [t2,t3) more than
that on [t1,t2), so that the length of the interval [t2,t3) can be chosen to be at
least as large as that of [t1,t2). The same is true for the consequent intervals
[t3,t4), [t4,t5), …, which implies that t →∞ as m →∞.
Thus, it follows from the general formulation (3.42), namely,
(x0+σ1) ea(t-t0)−σ1 ≤x(t) < (x0–σ1) ea(t-t0)+ σ1,
where t0 ≤t < ∞, that
–σ1 ≤
→∞
tlim x(t) ≤σ1.
We next return to the MIMO systems. Recall that by a unitary transform
we can assume without loss of any generality that the system matrix A is
(block) diagonal and consists of all its eigenvalues with negative real part on
the diagonal.  The reason is, again, that the imaginary parts and multiplicities
of the eigenvalues do not alter the system stability.
Similarly, we start with the initial state x(t0) = x0 and consider a small time 
interval [t0,t1). Since x(t) is differentiable, and is hence continuous, we can
always find some integers ni, i=1,...,r, such that
(ni)σ1i ≤xi(t) < (ni+1)σ1i,
where t ∈ [t0,t1) and i=1,...,r. With the corresponding membership function
values
,
/]
)
(
[
)
(
,
/
)]
(
)1
[(
)
(
1
1
12
1
1
11
1
1
1
i
i
i
i
i
I
i
i
i
i
i
i
I
i
n
t
x
x
t
x
n
x
i
in
i
in
σ
σ
−
=
µ
=
µ
σ
−
σ
+
=
µ
=
µ
σ
+
σ
i=1,...,r, t ∈ [t0,t1], we apply the MIMO version of the weighted average
formula (3.35) to obtain
A x(t) m A σ1 ≤x& (t) < A x(t) ± A σ1,
where σ1 = [ σ11 ... σ1r ]T and the inequality is held componentwise.
By solving the two linear systems
x& (t) = A x(t) ± A σ1
with the initial condition x(t0) = x0, we obtain
eA(t-t0)[x0+σ1] – σ1 ≤x(t) < eA(t-t0)[x0–σ1] +σ1,
which is an MIMO analogue of (3.41) over [t0,∞), in which the inequalities are 
held componentwise.  Since A is (block) diagonal having all the diagonal
elements with a negative real part, the above arguments can be similarly

3 •• Fuzzy System Modeling
129
repeated for each component, where the imaginary part of the eigenvalues can 
be ignored since they do not affect the stability. Thus, eventually, we have
–σ1 ≤
→∞
tlim x(t) ≤σ1
componentwise. This completes the proof of Theorem 3.6.
V*. CONTROLLABILITY ANALYSIS OF CONTINUOUS-TIME
DYNAMIC FUZZY SYSTEMS
In this section, we further study the important controllability property of
the fuzzy modeling discussed above. 
Consider a general (nonfuzzy) linear MIMO control system described by
(3.36), namely,
⎩
⎨
⎧
=
+
=
,
)
(
),
(
)
(
)
(
0
0
x
t
x
t
Bu
t
Ax
t
x&
(3.43)
where
x(t) = [ x1(t) ... xr(t) ]T ,
u(t) = [ u1(t) ... us(t) ]T ,
with 1 ≤s ≤r. The concept of (complete) controllability, for both fuzzy and
nonfuzzy systems, is defined as follows.
Definition 3.5. The linear MIMO control system (3.43), fuzzy or not, is
said to be (completely) controllable if, starting from any bounded initial state, 
the system trajectory can be brought to the target point 0 (the origin of the
state space), by a bounded control input within a finite period of time.
Recall from the classical control theory that a nonfuzzy linear MIMO
control system (3.43) is (completely) controllable if and only if
rank{ [ B AB  ... Ar–1B ] }  = r,
where r is the dimension of the system state vector x(t), whereas the control
vector u(t) is s-dimensional as indicated above, with 1 ≤s ≤r in general. In
particular, for one-dimensional systems the condition reduces to B = b ≠ 0.
For the fuzzy version of the linear MIMO control system, described also
by (3.43), we use the fuzzy rules:
q
iR :
IF xi ∈
i
in
S
1
σ  AND ui ∈
i
i
m
S
2
σ  THEN 
ix& ∈
i
ip
S
3
σ ,
where
⎪⎩
⎪⎨
⎧
σ
σ
β
+
σ
σ
α
⎣
=
σ
+
σ
=
σ
∑
∑
∑
∑
=
=
=
=
),
(
,
|
|
|
|
1
1
3
2
3
1
1
1
2
1
3
r
v
s
v
i
v
iv
i
v
iv
i
r
v
s
v
v
iv
v
iv
i
p
b
a
(3.44)
in which
αiv = 
⎩
⎨
⎧
<
+
≥
,0
if
)1
(
,0
if
iv
v
iv
iv
v
iv
a
n
a
a
n
a

130
Fuzzy System Modeling •• 3
βiv = 
⎩
⎨
⎧
<
+
≥
,0
if
)1
(
,0
if
iv
v
iv
iv
v
iv
b
m
b
b
m
b
with i=1, ...,r, q=1,...,l; and for the case of σ3i = 0, we define pi = 0, i=1,...,r.
Here, the superscript q has also been omitted, particularly for the case
where q is fixed, for the simplicity of notation.
For the fuzzy model (3.43) with (3.44), we have the following result.
Theorem 3.7. The linear MIMO fuzzy control system (3.43) is (completely) 
controllable if and only if
rank{ [ B AB  ... Ar–1B ] } = r.
Proof. Again, we first establish the theorem for the SISO systems, and
then explain how the arguments can be modified for the MIMO setting.
For an SISO system, it is clear that the condition b ≠ 0 is necessary for the 
controllability (otherwise there would not be any control input).  We therefore 
only verify the sufficiency.
Start with the given initial state x(t0)=x0. Suppose that we first apply a
control input u(t) (to be determined later) and obtain the state x(t) as the
corresponding output response of the system.  Consider an arbitrary (need not
be small) instant t > t0 after the control has been applied. For this t, there exist 
integers n and m such that 
(n)σ1 ≤x(t) < (n+1)σ1
and
(m)σ2 ≤u(t) < (m+1)σ2,
respectively. Hence, x(t) and u(t) belong to the two subsets 
1
σ
nI
∩
1
1
σ
+
nI
 and
2
σ
m
I
∩
2
1
σ
+
m
I
, respectively, with the membership function values
,
/]
)
(
[
)
(
,
/
)]
(
)1
[(
)
(
1
1
I
12
1
1
I
11
11
1
σ
σ
−
=
µ
=
µ
σ
−
σ
+
=
µ
=
µ
σ
+
σ
n
t
x
x
t
x
n
x
n
n
(3.45)
and
,
/]
)
(
[
)
(
,
/
)]
(
)1
[(
)
(
2
2
I
14
2
2
I
13
2 1
2
σ
σ
−
=
µ
=
µ
σ
−
σ
+
=
µ
=
µ
σ
+
σ
m
t
u
u
t
u
m
u
m
m
(3.46)
for the first implication with q = 1. Again, for simplicity we only consider the 
case where there is only one implication, l = 1, since the general case can be 
carried out in exactly the same manner.
Now, the fuzzy rule:
R(1):
IF x1(t) is 
1
σ
n
S
 AND u1(t) is 
2
σ
m
S
 THEN 
)
(
1 t
x&
 is 
3
σ
p
S
,
where
σ3 = a σ1 + b σ2 , 
p = ⎣(k),
in which k is defined in (3.31b), yields the following possible solutions:
(i)
a > 0 and b ≥−a
2
1
σ
σ ; or a < 0 and b ≥−a
2
1
σ
σ :

3 •• Fuzzy System Modeling
131
a(n−1)σ1+b(m−1)σ2 ≤
)
(
11 t
x&
< a(n+1)σ1+b(m+1)σ2
and
a(n)σ1+b(m)σ2 ≤
)
(
12 t
x&
< a(n+2)σ1+b(m+2)σ2 ;
(3.47)
(ii)
a < 0 and b ≤−a
2
1
σ
σ ; or a > 0 and b ≤−a
2
1
σ
σ :
a(n+1)σ1+b(m+1)σ2 ≤
)
(
13 t
x&
< a(n−1)σ1+b(m−1)σ2
and
a(n+2)σ1+b(m+1)σ1 ≤
)
(
14 t
x&
< a(n)σ1+b(m)σ2 ,
(3.48)
with µ11, µ12 and µ13, µ14 given respectively by (3.45) and (3.46).
Next, let us first consider Case (i), where a > 0 and b ≥−a σ1/σ2.  In this
case, we have the solutions given by (3.47).   Observe that the result of 
)
(
1 t
x&
contains two parts: One is contributed by x1(t) and the other by u1(t). Hence,
we take the weighted average over these two parts, in the manner of the
defuzzification defined in (3.33), as shown below:
⎭
⎬
⎫
⎩
⎨
⎧
σ
µ
+
µ
µ
+
σ
−
µ
+
µ
µ
1
12
11
12
1
12
11
11
)
(
)1
(
n
a
n
a
  +
⎭
⎬
⎫
⎩
⎨
⎧
σ
µ
+
µ
µ
+
σ
−
µ
+
µ
µ
2
14
13
14
2
14
13
13
)
(
)1
(
m
b
m
b
≤
)
(t
x&
<
⎭
⎬
⎫
⎩
⎨
⎧
σ
+
µ
+
µ
µ
+
σ
+
µ
+
µ
µ
1
12
11
12
1
12
11
11
)
2
(
)1
(
n
a
n
a
  +
⎭
⎬
⎫
⎩
⎨
⎧
σ
+
µ
+
µ
µ
+
σ
+
µ
+
µ
µ
2
14
13
14
2
14
13
13
)
2
(
)1
(
m
b
m
b
,
or, after simplifying, 
a(n)σ1 −
12
11
11
µ
+
µ
µ
aσ1 + b(m)σ2 –
14
13
13
µ
+
µ
µ
bσ2 ≤
)
(t
x&
<
a(n+1)σ1 + 
12
11
12
µ
+
µ
µ
aσ1 + b(m+1)σ2 + 
14
13
14
µ
+
µ
µ
bσ2.
Substituting µ11, µ12, µ13, and µ14 into the above yields
ax(t) −aσ1 + bu(t) −bσ2 ≤
)
(t
x&
< ax(t) + aσ1 + bu(t) + bσ1.
(3.49)
To this end, it is very important to notice that this relationship is independent
of the integers n and m, which means that at the very beginning of the proof,
we can actually consider any time instant (need not be small) t ≥t0, and note
also that this relationship, (3.49), holds over the entire time-interval [t0,∞).
Next, observe that the general solution of the left-hand equality in (3.49),
namely:
)
(t
x&
 = ax(t) −aσ1 + bu(t) −bσ2,
with initial condition x(t0) = x0, is given by

132
Fuzzy System Modeling •• 3
x(t) = σ1 + (x0−σ1)ea(t–t0) + ∫
τ
σ
−
τ
τ
−
t
t
t
a
d
u
b
e
0
]
)
(
[
2
)
(
.
(3.50)
To find a bounded control input u(t) to drive x(t) from x0 to 0 over a finite
duration of time, [t0,t*] say, we may first fix t = t* and then set
0 = σ1 + (x0−σ1)ea(t*–t0) + ∫
τ
σ
−
τ
τ
−
*
2
)
*
(
0
]
)
(
[
t
t
t
a
d
u
b
e
to solve for a solution input u(t), t ∈ [t0,t*]. The result is that u(t) must satisfy 
the following simple integral equation:
∫
τ
τ
τ
−
*
0
)
(
t
t
a
d
u
e
 = 
)
*
(
1
0
2
2
1
0t
t
a
e
b
x
a
a
b
−
⎟⎟
⎠
⎞
⎜⎜
⎝
⎛
σ
−
+
σ
−
σ
+
σ
−
.
Obviously, an exact control function u(t), t ∈ [t0,t*], always exists. For
example, a constant (or piecewise constant) control can be found, which can
be created by a standard fuzzy controller, where the fixed terminal instant t*
can be chosen arbitrarily according to the application at hand. The solvability
of equation (3.50) is equivalent to that the system trajectory x(t) can be
controlled from x0 at t = t0 to the target point 0 at t =t*.
Similarly, the right-hand equality of (3.49), namely:
)
(t
x&
 = ax(t) + aσ1 + bu(t) + bσ2,
with initial condition x(t0)=x0, gives
x(t)=
∫
τ
σ
+
τ
+
σ
+
+
σ
−
τ
−
−
t
t
t
a
t
t
a
d
u
b
e
e
x
0
0
]
)
(
[
)
(
2
)
(
)
(
1
0
1
(3.51)
and the control input u(t), t ∈ [t0,t*], which always exists and satisfies
∫
τ
τ
τ
−
*
0
)
(
t
t
a
d
u
e
 = 
)
*
(
1
0
2
2
1
0t
t
a
e
b
x
a
a
b
−
⎟⎟
⎠
⎞
⎜⎜
⎝
⎛
σ
+
+
σ
−
+
σ
−
σ
can drive the state x(t) from x0 to 0 over the time interval [t0,t*].
Finally, for other cases indicated in (i) and (ii), the above analysis and
calculation can be carried out in exactly the same way, using (3.48) instead of 
(3.47). And it leads to the same result, namely: the state x(t) of the system can 
be driven from x0 to 0 by a control input u(t) over a finite duration of time.
This completes the proof of the theorem for the SISO setting.
It is then routine to imitate the above proof, by using the control rules
(3.44).  In the same way, we can derive an MIMO analogue of (3.49), namely:
Ax(t) + Bu(t) − [Aσ1 + Bσ2] ≤x& (t) <
Ax(t) + Bu(t) + [Aσ1 + Bσ2],
(3.52)
where again the inequality is held componentwise.  Then, by examining the
two extremal cases (with equalities in (3.52)) and observing that the constant
vector Aσ0 + Bσ0 can be considered as a constant control input, which, as is
well known, does not affect the controllability, we arrive at two classical
(nonfuzzy) MIMO control systems. Since these two classical linear MIMO
control systems have the same system matrix A and control matrix B, the
result of the theorem follows immediately.

3 •• Fuzzy System Modeling
133
VI*.
ANALYSIS OF NONLINEAR CONTINUOUS-TIME DYNAMIC 
FUZZY SYSTEMS
In this section, we extend the results obtained in the previous sections to
certain nonlinear control systems. We only study the SISO setting here for
simplicity of notation and discussion.
Consider a nonlinear autonomous system of the form
⎩
⎨
⎧
=
=
,
)
(
)),
(
),
(
(
)
(
0
0
x
t
x
t
u
t
x
f
t
x&
(3.53)
where we assume, as usual, that the nonlinear system has unique solutions for
all feasible control inputs and bounded initial conditions. To apply the same
fuzzy modeling technique, developed above, to this nonlinear control system,
we use the following fuzzy rule:
IF x(t) ∈
1
σ
n
S
 AND u(t) ∈
2
σ
m
S
 THEN 
)
(t
x&
∈
3
σ
k
S
,
where σ3 and k are determined as follows:  If
n σ1 ≤x(t) < (n+1)σ1,
m σ2 ≤u(t) < (m+1)σ2,
then we expect to have
k σ3 ≤
)
(t
x&
 = f(x(t),u(t)) < (k+1)σ3,
and, under certain conditions on f (to be determined below),
f(nσ1,mσ2) ≤f(x,u) ≤f((n+1)σ1,(m+1)σ2) ,
so that
⎩
⎨
⎧
σ
σ
σ
=
σ
σ
−
σ
+
σ
+
=
σ
.
/)
,
(
|,
)
,
(
)
)1
(,
)1
((
|
3
2
1
2
1
2
1
3
m
n
f
k
m
n
f
m
n
f
Thus, following the same idea and arguments, we model the nonlinear control
system (3.53) in the same manner as before, namely, we have the fuzzy
nonlinear control system:
IF x(t) ∈
1
σ
n
S
 AND u(t) ∈
2
σ
m
S
 THEN 
)
(t
x&
∈
3
σ
p
S
,
(3.54)
where
σ3 = | f((n+1)σ1,(m+1)σ2) −f(nσ1,mσ2) |,
and
p = ⎣( f(nσ1,mσ2) / σ3 ),
in which ⎣(.) is the integer-floor of a real number.
In order to study the fuzzy nonlinear control system modeled by (3.54), we 
first recall from (3.50)-(3.51) that for a linear fuzzy control system we have
σ1 + (x0–σ1)ea(t–t0) + ∫
τ
σ
−
τ
τ
−
t
t
t
a
d
u
b
e
0
]
)
(
[
2
)
(
≤x(t) <
–σ1 + (x0+σ1)ea(t–t0) + ∫
τ
σ
+
τ
τ
−
t
t
t
a
d
u
b
e
0
]
)
(
[
2
)
(
.
(3.55)
For a nonlinear control system, which, in a more general situation, can be
nonautonomous, namely,
)
(t
x&
 = f(x(t),u(t),t),
x(t0) = x0,
(3.56)

134
Fuzzy System Modeling •• 3
if we can verify that under the same control u(t) the system state x(t) of the
nonlinear system (3.56) satisfies also the two inequalities (3.55), then we
know that all the results obtained above are applicable to this nonlinear
control system. Intuitively, there are many nonlinear control systems which
can produce a state trajectory x(t) satisfying the two inequalities (3.55) (see
Figure 3.15 for the geometric meaning of the inequalities). Our goal is then to 
find mathematical conditions which guarantee that the state trajectory of the
nonlinear system (3.56) satisfies the constraints (3.55).
To do so, suppose that the nonlinear control system (3.56) has been given, 
in which f(x(τ),u(τ),τ) is integrable with respect to τ for all x and u over [t0,∞).
Then, the system state x(t) is a solution of the following integral equation:
x(t) = x0 + ∫
τ
τ
τ
τ
t
t
d
u
x
f
0
)
),
(
),
(
(
,
t ≥t0.
(3.57)
Note that the unknown state x(t) appears on both sides of equation (3.57), and, 
hence, no explicit solution for it is obtained in this general formulation.
However, the following result characterizes the nonlinear control systems
(3.56) whose state trajectory x(t) satisfies the inequality constraints (3.55).
Theorem 3.8. Suppose that for all t0 ≤t < ∞ and all feasible control inputs 
u(t), the nonlinear functional f(x,u,t) is monotonically decreasing in x for fixed 
t and u, and, moreover, that f(⋅⋅,u(t),t) satisfies the following two inequalities:
ξ(t) ≤x0 + ∫
τ
τ
τ
τ
ζ
t
t
d
u
f
0
)
),
(
),
(
(
and
x0 + ∫
t
t f
0
( ξ(τ),u(τ),τ) dτ ≤ζ(t)
for all feasible control inputs u(t), where
ξ(t)
= σ1 + (x0–σ1)ea(t–t0) + ∫
τ
σ
−
τ
τ
−
t
t
t
a
d
u
b
e
0
,
]
)
(
[
2
)
(
ζ(t)
= −σ1 + (x0+σ1)ea(t–t0) + ∫
τ
σ
+
τ
τ
−
t
t
t
a
d
u
b
e
0
]
)
(
[
2
)
(
.
Then, any state x(t) of the nonlinear control system (3.56) satisfies
ξ(t) ≤x(t) ≤ζ(t),
t0 ≤t < ∞,
that is, satisfies the inequality constraints (3.55).
Proof. Suppose that the claim is not true. Then there exists a t~ ∈ [t0,t*]
such that, say,
ξ( t~ ) > x( t~ ).
It then follows from the decreasing property of f and the theorem assumptions
that
ξ( t~ ) > x( t~ ) =
∫
τ
τ
τ
τ
+
t
t
d
u
x
f
x
~
0
0
)
),
(
),
(
(
≥
∫
τ
τ
τ
τ
ζ
+ t
t
d
u
f
x
~
0
0
)
),
(
),
(
(
≥
ξ( t~ ),
which is a contradiction. Similarly, if there exists a tˆ ∈ [t0,t*] such that
x( $)t
> ζ( )ˆt ,

3 •• Fuzzy System Modeling
135
then we have another contradiction. Hence, the assertion of the theorem must
be correct.

136
Fuzzy System Modeling •• 3
PROBLEMS
P3.1
Verify Part (v) of Example 3.1; namely, provide detailed derivation 
for the resulting three membership functions shown in Figure 3.3.
P3.2
Given a non-singular matrix A = 
⎥
⎥
⎥
⎦
⎤
⎢
⎢
⎢
⎣
⎡
1
0
0
0
1
1
1
0
2
.
(1) Compute its inverse A−1.
(2) Compute its pseudo-inverse
+
1
A  = [AT A]−1 AT.
(3) Decompose A = LC such that L is 3 × 3 of full column-rank and 
C is 3 x 3 of full row-rank but L ≠A and C ≠A. Then compute
its pseudo-inverse
+
2
A  = CT [C CT]−1 [LT L]−1 LT.
(4) Compare your three results obtained above.
P3.3
Consider an unknown SISO system shown in Figure 3.16.
SISO System
x
y
Figure 3.16
An SISO system in P3.3.
Suppose that this system is described by the following two rules:
R1:
IF x is small THEN y = a1 x + b1 x2;
R2:
IF x is large THEN y = a2 x + b2 x2;
where the small and large membership functions are given by Figures 
3.17(a) and (b), respectively.
µS
1
0
5
10
µL
1
0
5
10
(a)
(b)
Figure 3.17
Two membership functions of P3.3.
Now, a set of experimental data on the system input-output relation is 
available:
x
0.0
1.0
2.0
3.0
4.0
5.0
6.0
7.0
8.0
9.0 10.0
y
0.4
0.8
1.5
2.1
2.8
3.4
4.0
4.7
5.5
6.4
7.3
Use the least-squares approach to determine the unknown constant
coefficients a1, a2, b1, and b2.

3 •• Fuzzy System Modeling
137
P3.4
Consider the discrete-time SISO linear dynamic fuzzy system
described by the rules
R1:
IF x(k−1) is small THEN x(k+1) = − x(k) −4
1 x(k−1);
R2:
IF x(k−1) is large THEN x(k+1) = + x(k) −4
1 x(k−1);
where the small and large membership functions for inputs are the
same as those given in Exercise P3.3 above, and the weights for the
output average are all equal to 1. Suppose that the system initial
conditions are x(−1) = x(0) = 1.0. Let the weights in the output
average be all identically equal to 1. Is this system asymptotically
stable? Why? (or why not?)
P3.5
Consider a fuzzy system of the form
z = −x −y,
where the fuzzy inputs x and y have membership functions as shown
in Figure 3.18 (a) and (b), respectively. Find the interval Z and
membership function µZ for the fuzzy output z.
1
µX
1
0
–1
µY
1
0
1
2
(a)
(b)
Figure 3.18
The input membership functions of P3.5.
P3.6*
By mimicking the discussion of Section V on the controllability of
fuzzy linear state-space systems, study the observability issue for the 
same setting (see Reference [2] for definitions).
P3.7*
Consider the fuzzy linear state-space system (3.43)-(3.44), along with 
its two boundary solutions (3.50) and (3.51) (see Figure 3.15 for their 
geometric meaning). Study a typical LQ optimal control problem for 
this setting, where LQ refers to the linear system (3.43)-(3.44) with a 
quadratic performance index (i.e., cost functional) to be minimized 
(see Reference [2] for more details).

138
Fuzzy System Modeling •• 3
REFERENCES
[1]
S. G. Cao, N. W. Rees, and G. Feng. “Stability Analysis of  Fuzzy
Control Systems.” IEEE Transactions on Systems, Man, and
Cybernetics (B), Vol. 26, No. 1, pp 201-204 (1996).
[2]
G. Chen, T. T. Pham, and J. J. Weiss.  “Fuzzy Modeling of Control
System.” IEEE Transactions on Aerospace and Electronics Systems,
Vol. 31, No. 1, pp 414-429 (1995).
[3]
C. K. Chui, and G. Chen.
Linear Systems and Optimal Control.
New York, NY:  Springer-Verlag (1989).
[4]
T. Takagi, and M. Sugeno. “Fuzzy Identification of Systems and Its
Applications to Modeling and Control.” IEEE Transactions on
Systems, Man, and Cybernetics, Vol. 15, No.1, pp 116-132 (1985).
[5]
K. Tanaka, and M. Sugeno. “Stability Analysis and Design of Fuzzy
Control Systems.” Fuzzy Sets and Systems, Vol. 45, pp 135-156
(1992).
[6]
K. Tanaka, and H. O. Wang.
Fuzzy Control Systems Design and
Analysis: A Linear Matrix Inequality Approach. New York, NY:
IEEE Press (1999).

CHAPTER 4
Fuzzy Control Systems
Control systems theory, or what is called modern control systems theory
today, can be traced back to the age of World War II, or even earlier, when the 
design, analysis, and synthesis of servomechanisms were essential in the
manufacturing of electromechanical systems.  The development of control
systems theory has since gone through an evolutionary process, starting from
some basic, simplistic, frequency-domain analysis for single-input single-
output (SISO) linear control systems, and generalized to a mathematically
sophisticated modern theory of multi-input multi-output (MIMO) linear or
nonlinear systems described by differential and/or difference equations.
It is believed that the advances of space technology in the 1950s
completely changed the spirit and orientation of the classical control systems
theory:  the challenges posed by the high accuracy and extreme complexity of 
the space systems, such as space vehicles and structures, stimulated and
promoted the existing control theory very strongly, developing it to such a
high mathematical level that can use many new concepts like state-space and
optimal controls.  The theory is still rapidly growing today; it employs many
advanced mathematics such as differential geometry, operation theory, and
functional analysis, and connects to many theoretical and applied sciences like 
artificial intelligence, computer science, and various types of engineering.
This modern control systems theory, referred to as conventional or classical
control systems theory, has been extensively developed.  The theory is now
relatively complete for linear control systems, and has taken the lead in
modern technology and industrial applications where control and automation
are fundamental.  The theory has its solid foundation built on contemporary
mathematical sciences and electrical engineering, as was just mentioned. As a
result, it can provide rigorous analysis and often perfect solutions when a
system is defined in precise mathematical terms.  In addition to these
advances, adaptive and robust as well as nonlinear systems control theories
have also seen very rapid development in the last two decades, which have
significantly extended the potential power and applicable range of the linear
control systems theory in practice.
Conventional mathematics and control theory exclude vagueness and
contradictory conditions.  As a consequence, conventional control systems
theory does not attempt to study any formulation, analysis, and control of
what has been called fuzzy systems, which may be vague, incomplete,
linguistically described, or even inconsistent.  Fuzzy set theory and fuzzy
logic, studied in some detail in Chapters 1 and 2, play a central role in the
investigation of controlling such systems.  The main contribution of fuzzy
control theory, a new alternative and branch of control systems theory that
uses fuzzy logic, is its ability to handle many practical problems that cannot

140
Fuzzy Control Systems •• 4
be adequately managed by conventional control techniques.  At the same time, 
the results of fuzzy control theory are consistent with the existing classical
ones when the system under control reduces from fuzzy to nonfuzzy.  In other 
words, many well-known classical results can be extended in some natural
way to the fuzzy setting.  In the last three chapters, we have seen many such
examples:  the interval arithmetic is consistent with the classical arithmetic
when an interval becomes a point; the fuzzy logic is consistent with the
classical logic when the multi-valued inference becomes two-valued; and the
fuzzy Lyapunov stability and fuzzy controllability (and observability) become
the classical ones when the fuzzy control systems become nonfuzzy.
Basically, the aim of fuzzy control systems theory is to extend the existing
successful conventional control systems techniques and methods as much as
possible, and to develop many new and special-purposed ones, for a much
larger class of complex, complicated, and ill-modeled systems – fuzzy
systems. This theory is developed for solving real-world problems.  The fuzzy 
modeling techniques, fuzzy logic inference and decision-making, and fuzzy
control methods to be studied in the following chapters, should all work for
real-world problems – if they are developed correctly and appropriately.  The
real-world problems exist in the first place.  Fuzzy logic, fuzzy set theory,
fuzzy modeling, fuzzy control methods, etc. are all man-made and
subjectively introduced to the scene.  If this fuzzy interpretation is correct and 
if the fuzzy theory works, then one should be able to solve the real-world
problems after the fuzzy operations have been completed in the fuzzy
environment and then the entire process is finally returned to the original real-
world setting.  This is what is called the “fuzzification – fuzzy operation –
defuzzification” routine in the fuzzy control systems theory.  We will study
this routine in detail for various control systems design and applications in this 
chapter.
Although fuzzy control systems theory is used for handling vague systems, 
this theory itself is not vague.  On the contrary, it is rigorous: as has been seen 
from Chapters 1 and 2, fuzzy logic is a logic, and fuzzy mathematics is
mathematics.  It will be seen in this chapter that fuzzy logic control is an
effective logical control technique using some simple fuzzy logic, in a way
comparable to the well-known programmable logic control (PLC) using
classical two-valued logic.  To motivate, the PLC theory is first reviewed in
the next section as an introduction to the general fuzzy logic control (FLC)
theory and methodology.
I. CLASSICAL PROGRAMMABLE LOGIC CONTROL
A programmable logic controller (PLC) is a simple microprocessor-based,
specialized computer that carries out logical control functions of many types,
with the general structure shown in Figure 4.1.
A PLC usually operates on ordinary house current but may control circuits 
of large amperage and voltage of 440V and higher.  A PLC typically has a

4 •• Fuzzy Control Systems
141
detachable programmer module, used to construct a new program or modify
an existing one, which can be taken easily from one PLC to another. The
program instructions are typed into the memory by the user via a keyboard.
The central processing unit (CPU) is the heart of the PLC, which has three
parts: the processor, memory, and power supply.  In the input-output (I/O)
modules, the input module has terminals into which the user enters outside
process electrical signals and the output module has another set of terminals
that send action signals to the processor.  A remote electronic system for
connecting the I/O modules to long-distance locations can be added, so that
the actual operating process under the PLC control can be some miles away
from the CPU and its I/O modules.  Optional units include racks, chassis,
printer, program recorder/player, etc.
To see how a PLC works, let us consider an example of a simple pick-and-
place robot arm working in an automatic cycle under the control of a PLC.
This simple robot arms is shown in Figure 4.2, which has three joints: one
rotational type and two sliding types, as indicated by the arrows; and has a
gripper that can close (to grasp an object) and open (to release the object).
To control this robot arm, according to the structure shown in Figure 4.2,
we need eight actions created by the PLC, called outputs of the PLC, as
follows:
A0:
rotate the base counterclockwise (CCW),
A1:
rotate the base clockwise (CW),
A2:
lift the arm,
Power
Supply
Memory
Back-up
battery
Microprocessor
CPU
User
Interface
I/O Interface
110V ac source
...
...
console
Outputs to Process
Inputs from Process
Figure 4.1
A programmable logic controller (PLC).

142
Fuzzy Control Systems •• 4
A3:
lower the arm,
A4:
extend the arm,
A5:
retract the arm,
A6:
close the gripper,
A7:
open the gripper.
Suppose that in each cycle of the control process, the entire job performance is 
completed in 12 steps sequentially within 40 seconds, as shown in Figure 4.3.
Step
Outputs
Time Duration in Activities
1
2
3
4
5
6
7
8
9
10
11
12
A4 (extend arm)
A3 (lower arm)
A6 (close gripper)
A2 (lift arm)
A5 (retract arm)
A0 (rotate base CCW)
A4 (extend arm)
A3 (lower arm)
A7 (open gripper)
A2 (lift arm)
A5 (retract arm)
A1 (rotate base CW)
4
2
1
2
4
7
4
2
1
2
4
7
time
0
5
10
15
20
25
30
35
40
(seconds)
Figure 4.3
Time duration of activities of the robot arm.
extend
the arm
rotate CCW
rotate
CW
lower
the arm
lift
the arm
retract
the arm
Figure 4.2
A pick-and-place robot arm controlled by a PLC.

4 •• Fuzzy Control Systems
143
In Figure 4.3, it is shown that the PLC is needed to first operate the “extend
arm” action for 4 seconds (from the beginning), and then stop this action.  To 
this end, the PLC operates the “lower arm” action for 2 seconds and then
stops, and so on.  For simplicity, we assume that the transitions between any
two consecutive steps are continuous and smooth, so that no time is needed
for any of these transitions.
To set up the PLC timer, called the drum-timer, so as to accomplish these
sequential activities of the robot arm, we need to select the time frequency for 
the PLC. Since the smallest step time in Figure 4.3 is the 1-second gripper
operation, we select a count frequency of 1 count per second.  The entire PLC 
drum-timer array is shown in Table 4.1, where 1 means ON and 0 means OFF,
as usual.
The above-described sequential control process is by nature an open-loop
control procedure.  Now, if we use sensors to provide feedback information at 
each step of the arm’s motion, then we can also perform a closed-loop logic
control.
For this purpose, mechanical limit switches (or proximity switches) can be
used to sense the point of completion of each arm motion and, hence, provide 
inputs to the PLC.  The PLC can then be programmed not to begin the next
step until the previous step has been completed, regardless of how much time
this might take.
We will use, by industrial convention, the number symbol 00 to represent
the input from the limit switch that signals completion of the previous output
A0 (“rotating the base counterclockwise”), the number symbol 01 to represent 
the input from the limit switch that signals completion of the previous output
A1 (“rotating the base clockwise”), and, finally, 07 for the input that signals
Table 4.1
PLC Drum-Timer Array for the Robot Arm
Step
Counts
Outputs
(count/sec)
A0
A1
A2
A3
A4
A5
A6
A7
1
4
0
0
0
0
1
0
0
0
2
2
0
0
0
1
0
0
0
0
3
1
0
0
0
0
0
0
1
0
4
2
0
0
1
0
0
0
0
0
5
4
0
0
0
0
0
1
0
0
6
7
1
0
0
0
0
0
0
0
7
4
0
0
0
0
1
0
0
0
8
2
0
0
0
1
0
0
0
0
9
1
0
0
0
0
0
0
0
1
10
2
0
0
1
0
0
0
0
0
11
4
0
0
0
0
0
1
0
0
12
7
0
1
0
0
0
0
0
0

144
Fuzzy Control Systems •• 4
completion of A7.  The entire scheme, together with necessary prior inputs for 
each arm motion, is shown in Table 4.2.
Note that in this diagram, usually two previous steps are sufficient as
prerequisite, but one more is needed in case two are not enough for distinction 
of different actions.
It is also important to remark that if we do not consider the necessary prior 
conditions, then when the PLC applies the logic control to the robot arm, it
may make mistakes.  For example, the second step in Table 4.2 is “lower
arm,” for which the completion is represented by 03.  If 03 were to be used as 
the logic input to trigger the next step in the sequential operations, the “close
gripper” action, the robot arm would always close its gripper after it executes
the action “lower arm.”  However, the eighth step of the program is also
“lower arm,” but it is followed by “open gripper” instead.  Hence, it is
necessary to provide other prior conditions to the eighth step to ensure that it
would not repeat the second step here.
Figure 4.4 shows the ladder logic diagram corresponding to Table 4.2, in
which the standard symbols listed in Table 4.3 are used, and the input contact 
P0 is used to represent a power-ON switch.  Here, the input contacts include
switches, relays, photoelectric sensors, limit switches, and other ON-OFF
signals from the logical system; the output loads include motors, valves,
alarms, bells, lights, actuators, or other electrical loads to be driven by the
logical system.  We should not confuse the input contact symbol with the
familiar circuit symbol for capacitors.  Also, we should note that output loads
can become input contacts in the following steps, depending on the actual
system structure.
In a routine yet somewhat tedious procedure, one can verify that the PLC
ladder logic diagram shown in Figure 4.4 performs the automatic control
Table 4.2
Robot Arm Control Scheme
Arm Motion
PLC Outputs PLC Inputs
Necessary Prior 
Conditions
extend arm
A4
04
01, 07
lower arm
A3
03
01, 04, 07
close gripper
A6
06
01, 03
lift arm
A2
02
01, 06
retract arm
A5
05
01, 02, 06
rotate base CCW
A0
00
05, 06
extend arm
A4
04
00, 06
lower arm
A3
03
00, 04, 06
open gripper
A7
07
00, 03
lift arm
A2
02
00, 07
retract arm
A5
05
00, 02, 07
rotate base CW
A1
01
05, 07

4 •• Fuzzy Control Systems
145
process summarized in Table 4.2. Under the indicated necessary prior
conditions for each step during the entire process, this PLC works for the
designed “pick-and-place” motion-control of the robot arm described by
Figure 4.3.  The design procedure is time-consuming. However, once a design 
has been completed, the PLC can be automatically programmed over and over 
again, to control the robot arm to repeat the same “pick-and-place” motion for 
the production line.  When the job assignment is changed, the PLC has the
flexibility to be reprogrammed to perform a new logic control process.
II. FUZZY LOGIC CONTROL (I): A GENERAL MODEL-FREE
APPROACH
The programmable logic controllers (PLCs) discussed in the last section,
which have been widely used in industries, can only perform classical two-
valued logic in programming some relatively simple but very precise
automatic control processes.  To carry out fuzzy logic-based control
programming, a new type of programmable fuzzy logic controllers is needed.
Table 4.3
Ladder Diagram Symbols
Input contacts
Output loads
A
Logical NOT
A
A
B
Logical AND
A ∧B
A
B
Logical OR
A ∨B

146
Fuzzy Control Systems •• 4
05
06
A0
00
P0
A0
05
00
A1
01
P0
A1
07
06
01
A2
02
P0
A2
07
00
04
04
01
A3
03
P0
A3
00
06
07
01
07
A4
04
P0
A4
00
06
05
06
A5
02
P0
A5
00
07
01
03
01
A6
06
P0
A6
03
00
A7
07
P0
A7
Figure 4.4
PLC ladder logic diagram for the robot arm.

4 •• Fuzzy Control Systems
147
The majority of fuzzy logic control systems are knowledge-based systems
in that either their fuzzy models or their fuzzy logic controllers are described
by fuzzy IF-THEN rules, which have to be established based on experts’
knowledge about the systems, controllers, performance, etc.  Moreover, the
introduction of input-output intervals and membership functions is more or
less subjective, depending on the designer’s experience and the available
information.  However, we emphasize once again that after the determination
of the fuzzy sets, all mathematics to follow are rigorous. Also, the purpose of
designing and applying fuzzy logic control systems is, above all, to tackle
those vague, ill-described, and complex plants and processes that can hardly
be handled by classical systems theory, classical control techniques, and
classical two-valued logic.  This is the first type of fuzzy logic control system: 
the fuzzy logic controller directly performs the control actions and thus
completely replaces a conventional control algorithm.  Yet, there is another
type of fuzzy logic control system: the fuzzy logic controller is involved in a
conventional control system and thus becomes part of the mixed control
algorithm, so far as to enhance or improve the performance of the overall
control system.  We will study these two types of fuzzy logic control systems, 
often alternatively, in the rest of this book.
In this section, we first discuss a general approach of fuzzy logic control
for a conventional (crisp) system (plant or process) of the feedback (closed-
loop) type.
A. A Closed-Loop Set-Point Tracking System
To facilitate our presentation and discussion, we consider the typical
continuous-time, closed-loop, set-point tracking system shown in Figure 4.5. 
In this figure, we assume that the plant is a conventional (crisp) one, which 
is given but its mathematical model may not be known, and that all the signals 
(r, e, and y) are crisp.  The closed-loop set-point tracking control problem is to 
design the controller such that the output signal of the controlled plant, y, can 
track the given reference signal r (need not be a constant):
e(t) := r(t) −y(t) → 0
(t→∞).
Instead of designing a conventional controller, in the following we study
how to design a fuzzy logic controller for the same purpose.  Recall that in
r
(reference
Controller
e
(error
+
−
u
(control
signal)
signal)
Plant
y
(output
signal)
signal)
ΣΣ
Figure 4.5
A typical closed-loop set-point tracking system.

148
Fuzzy Control Systems •• 4
designing a conventional controller, a precise mathematical model
(formulation) of the plant is usually necessary.  A typical example is the
conventional proportional-integral-derivative (PID) controller design, where
the first- or second-order linear plant transfer function has to be first given.
We will review and discuss these conventional PID controllers in Chapter 5.
Here, to design a fuzzy logic controller, not necessarily of PID-type, for set-
point tracking, we suppose that the mathematical formulation of the plant is
completely unknown.
If the mathematical formula of the plant is unknown, for instance we don’t 
even know if it is linear or nonlinear (and, if it is linear, we don’t know what
order it has; if it is nonlinear, we don’t know what kind of nonlinearity it has), 
how can we design a controller to perform the required set-point tracking?
One may think of designing a conventional controller and try to answer this
question at this point, to appreciate the ease of fuzzy logic controller design to 
be studied below.
Before we discuss how fuzzy logic can help in completing such a design
for a “black box” system, we need to clarify some basic concepts and to
introduce some new terminology.
First, the general structure of a fuzzy logic controller (FLC), or fuzzy
controller (FC) for short, consists of three basic portions: the fuzzification unit 
at the input terminal, the inference engine built on the fuzzy logic control rule 
base in the core, and the defuzzification unit at the output terminal, as shown
in Figure 4.6.
The fuzzification module transforms the physical values of the current
process signal, the error signal in Figure 4.5 which is input to the fuzzy logic
controller, into a normalized fuzzy subset consisting of a subset (interval) for
the range of the input values and an associate membership function describing 
the degrees of the confidence of the input belonging to this range.  The
purpose of this fuzzification step is to make the input physical signal
compatible with the fuzzy control rule base in the core of the controller.  Here, 
between the physical input signal and the fuzzy subset within the fuzzification 
unit, a pre-processing unit mapping the physical signal to some pointwise and
crisp real values (that the fuzzy subset can accept) may be needed, depending
on the nature of the underlying process.  Generally speaking, a universal fuzzy 
Fuzzification
Fuzzy Rule Base
Defuzzification
e
u
controller
input
controller
output
Fuzzy Logic Controller (FLC)
Figure 4.6
General structure of a fuzzy logic controller.

4 •• Fuzzy Control Systems
149
logic controller for the closed-loop set-point tracking system shown in Figure
4.5 is unlikely possible.  Hence, the fuzzy subset, both the subset and the
membership function, has to be selected by the designer according to the
particular application at hand.  In other words, depending on the nature and
characteristics of the given plant and reference signal, the FLC has to be
designed to fit to the need, so as to make the closed-loop fuzzy control system 
work for that particular application.  This situation is just like the design of a
conventional controller for a specifically given system, where there is no
universal controller in practical design.
The role of the inference engine in the FLC is key to make the controller
work − and work effectively.  The job of the “engine” is to create the control
actions, in fuzzy terms, according to the information provided by the
fuzzification module and the set-point tracking requirement (and perhaps other 
control performance requirements as well).  A typical fuzzy logic IF-THEN
rule base performing the inference is in the general form that was studied in
detail in Sections II-VI of Chapter 2.  More specifically, the rule base is a set
of IF-THEN rules of the form
R1:
IF controller input e1 is E11 AND ... AND 
controller input en is E1n
THEN controller output u1 is U1.
M
Rm:
IF controller input e1 is Em1 AND ... AND 
controller input en is Emn
THEN controller output um is Um.
Here, as discussed in Sections II-VI of Chapter 2, the fuzzy subsets E11, ...,
Em1 share the same subset E1 and the same membership function µE1 defined
on E1, and fuzzy subsets E1n, ..., Emn share the same subset En and the same
membership function µEn defined on En.  In general, m rules produce m
controller outputs, u1, ..., um, belonging to m fuzzy subsets, U1, ..., Um, in
which, of course, some of them may overlap.  The establishment of this rule
base depends heavily on the designer’s work experience, knowledge about the 
physical plant, analysis and design skills, etc., and is, hence, more or less
subjective.  Thus, a good design can make the controller work; a better design 
can make it work more effectively. This situation is just like conventional
design: any specific design is not unique in general.  Yet, there are some
general criteria and some routine steps for the designer to follow in a real
design, which will be discussed in more detail later.  Here, basically, what
have to be determined are the choices of the controller’s input and output
variables and the IF-THEN rules.
The defuzzification module is the connection between the control rule base 
and the physical plant to be controlled, which plays the role of a transformer
mapping the controller outputs (generated by the control rule base in fuzzy
terms) back to the crisp values that the plant can accept.  Hence, in a sense the 
defuzzification module is the inverse of the fuzzification module.  The

150
Fuzzy Control Systems •• 4
controller outputs u1, ..., um, generated by the rule base above, are fuzzy
signals belonging to the fuzzy subsets U1, ..., Um, respectively.  The job of the 
defuzzification module is to convert these fuzzy controller outputs to a
pointwise and crisp real signal, u, and then send it to the physical plant as a
control action for tracking. Between the defuzzification step and the physical
plant, a post-processing unit mapping the pointwise signal u to a physical
signal (that the plant can accept) may be needed, depending again on the
nature of the underlying process.  What has to be determined in this stage is
essentially a defuzzification formula.  There are several commonly used,
logically meaningful, and practically effective defuzzification formulas
available, which are by nature weighted average formulas in various forms.
This tree-step design routine, the “fuzzification – rule base establishment –
defuzzification” procedure, is further discussed in detail next.
B. Design Principle of Fuzzy Logic Controllers
Now, we are in a position to discuss some design principles of a fuzzy
logic controller, using the typical structure shown in Figure 4.6, for the set-
point tracking system depicted in Figure 4.5.
We only consider a continuous-time single-input/single-output (SISO)
system in this study for simplicity of notation.  Discrete-time and multi-
input/multi-output (MIMO) cases can be similarly discussed.
Suppose that a scalar-valued reference signal r, the set-point, is given,
which needs not be a constant in general.  For ease of explanation, we fix it to 
be constant in the following discussion.  A plant is also assumed to be given,
whose mathematical formulation is assumed to be unavailable.  The aim is to
design a fuzzy logic controller, to be put into the controller block of Figure
4.5, to derive the plant output y(t) to track the constant set-point r as t→∞, or, 
in other words, to force the error signal
e(t) := r −y(t) → 0
(t→∞).
The following is a general approach for the design of the fuzzy logic
controller.
(1)
The Fuzzification Module. The fuzzification module performs the
following functions:
(1.1)
It transforms the physical values (position, voltage, degree, etc.)
of the process signal, the error signal shown in Figure 4.6 which
is an input to the fuzzy logic controller, into a normalized fuzzy
subset consisting of a subset (interval) for the range of the input
values and a normalized membership function describing the
degree of confidence of the input belonging to this range.
For example, suppose that the physical error signal, the input to the fuzzy
logic controller shown in Figure 4.6, is the degree of temperature.  Suppose
also that the distribution of this temperature error signal is within the range

4 •• Fuzzy Control Systems
151
[−25°,45°] in an application in which the fuzzy logic controller needs to be
designed to reduce this error to 0°±0.01°.  In this case, the scale of 1° is too
large to use in the measurement of the control effect within ±0.01°.  Hence,
we may first try to rescale the range to be [−2500,4500] in the unit of 0.01°.
But this is not convenient in the calculation of fuzzy membership functions
either.  To have a compromise, a better choice can be a combination of two
different scales (see Figure 4.7):
Use [−25°,45°] when |error| > 1;
Use [−100*,100*] when |error| ≤ 1, with 1° = 100*.
(1.2)
It selects reasonable and good, ideally optimal, membership
functions under certain convenient criteria meaningful to the
application.
In the above-described temperature control example, one may use the
membership functions shown in Figure 4.7 to describe “the error is positive
large (PL),” or “the error is negative large (NL),” etc., in which one figure  is
in the 1° scale and the other is in the 1* = 0.01° scale. A designer may have
other choices, of course, but this example should provide some idea about
how the selection can be done in general.
In the fuzzification module, the input is a crisp physical signal (e.g.,
temperature) of the real process and the output is a fuzzy subset consisting of
intervals and membership functions.  This output will be the input to the next
module, the fuzzy logic IF-THEN rule base for the control, which requires
fuzzy-subset inputs in order to be compatible with the fuzzy logic rules.
 (2)
The Fuzzy Logic Rule Base. Designing a good fuzzy logic rule base is
key to obtaining a satisfactory controller for a particular application.
Classical analysis and control strategies should be incorporated in the
establishment of a rule base.  A general procedure in designing a fuzzy
logic rule base includes the following:
(2.1)
Determining the process states and control variables.
1
PL
NL
1o
−
0
45o
25o
−
1
0
PL
NL
1o
−1o
1o
Figure 4.7
Selection examples of membership functions for error signals.

152
Fuzzy Control Systems •• 4
In the set-point tracking example discussed above in Figures 4.5 and 4.6,
let us suppose that the physical process is a temperature control.  Thus, the
set-point r is a target temperature to be reached, say r = 45°.  In this
application, the process state is the overall controlled system output, y(t),
which is also temperature.  Finally, the error signal
e(t) = r −y(t),
(4.1)
as shown in Figure 4.8, is used to create the control variable u (see Figure 4.5) 
through the controller.
(2.2)
Determining input variables to the controller.
As mentioned above, the tracking error signal e(t) is an input variable to
the controller (see Figures 4.5 and 4.6).  Oftentimes, we need more auxiliary
input variables in order to establish a complete and effective rule base.  In this 
temperature control example, it can be easily seen that only the error signal
e(t) is not enough to write an IF-THEN control rule.  Indeed, let us say e > 0 at 
a moment.  Then we know
e = r −y > 0
or
r > y,
namely, at that moment the system output y is below the set-point.  This
indicates that the output y is either at position a or position d in Figure 4.8.
However, this information is not sufficient for determining a control strategy
that can bring the trajectory of y to approach the set-point thereafter: if the
output y is at position a then the controller should take action to keep the
trajectory going up; if y is at position d then the controller should turn the
trajectory to the opposite moving direction (from pointing down to pointing
up). Namely, in the first case the controller should maintain the previous
action but in the last case it should switch its previous action to the opposite.
Therefore, one more input variable that can distinguish these two situations is
necessary.
Recall from Calculus that if a curve is moving up its derivative is positive
and if it is moving down its derivative is negative.  Hence, the change of the
error signal, denoted e&  or ∆e, can help distinguish the two situations at points 
temperature
t
0
r = 45
o
y  t(  )
e  t(  )
a
b
c
d
Figure 4.8
Temperature set-point tracking example.

4 •• Fuzzy Control Systems
153
a and d, as well as that at points b and c, shown in Figure 4.8.  Hence, we
introduce the change of error as the second input variable for this temperature 
set-point tracking example.  More input variables can be introduced such as
the second derivative e&&  or the sum (integral) Σe of the errors, to make the
controller work more effectively.  However, this will also complicate the
design, and so there is a trade-off for the design engineer.  In order to simplify 
the design and for simplicity of discussion, in this example we only use two
input variables, e and e& , for the controller.
(2.3)
Establishing a fuzzy logic IF-THEN rule base.
The input variables determined in the previous step will be used in the
design of the rule base for control.  As mentioned above, successful classical
analysis and control strategies should also be incorporated in the design.  To
obtain some ideas and insights about the rule base design, we consider again
the above temperature control example.
In Figure 4.8, it is clear that essentially we have four situations to consider:
when the temperature output y(t) is at the situations represented by the points
a, b, c, and d.  We thus need at least four rules for this set-point tracking
application in order to make it work and work effectively.  In principle, also
intuitively, we can set up the following four control rules, where u is the
output (control action) of the controller:
R1:
IF e > 0 AND &e < 0 THEN u(t+) = u(t);
R2:
IF e < 0 AND &e < 0 THEN u(t+) = −u(t);
R3:
IF e < 0 AND &e > 0 THEN u(t+) = u(t);
R4:
IF e > 0 AND &e > 0 THEN u(t+) = −u(t).
Otherwise (e.g., e = 0 or e&  = 0), u(t+) = u(t), until the next step.
In Figure 4.8, it is very important to observe that
e& (t) = r& −y& (t) = −y& (t).
(4.2)
Hence, the rules R1, R2, R3, and R4 correspond to the situations indicated by
points a, b, c, and d, respectively, in Figure 4.8. In these rules, the notation
u(t+) = u(t) means that, conceptually, the controller retains its previous action 
unchanged, while u(t+) = −u(t) means that the controller turns its previous
action to the opposite (e.g., from a positive action to a negative action, or vice 
versa). Quantitative implementation of these actions will be further discussed
below.
To this end, it can be easily realized that by following the above four rules, 
the controller is able to drive the temperature output y(t) to track the set-point
r, at least in principle.  For example, if e > 0 and e&  < 0 then r > y and y& > 0, 
which means that the curve y is at position a of Figure 4.8. In this case, rule R1
implies that the controller should maintain its current action (to keep pushing
the system in the same way). The other three rules can be similarly analyzed.
However, some technical issues remain.  Let us again look at the situation
at point a in Figure 4.8, which has the control rule R1.  One problem with this 
rule is that if the previous control action u were small, this rule would let the

154
Fuzzy Control Systems •• 4
controller keep driving the output temperature up toward the set-point, but
very slowly; so it may need a long time to complete the task.  Another
problem with this rule, on the other side of the issue, is that if the previous
control action u were large, this rule would lead the controller to drive the
output temperature overshooting the set-point. As a result of such rules and
actions, the output temperature oscillates up and down around the set-point,
which may not eventually settle at the set-point, or take a very long time to do 
so.  Hence, these four rules have to be further improved to be practical.
Recall that we have fuzzified the error signal e in the fuzzification module.
If we also fuzzify the change of error, e& , in the fuzzification module, then we 
have two fuzzified input variables, e and e& , for the controller, and they have
corresponding membership functions to describe their properties of “positive
large,” “negative small,” etc.  These properties can be used to improve the
above rules.  Again, let us consider the situation at point a in Figure 4.8 and its 
corresponding control rule R1.  It is clear that if the error e > 0 is small then
the controller can take a smaller action, and if the error e > 0 is large then the 
controller can take a larger action. In doing so, the output trajectory y(t) will
be directed to the set-point correctly and more efficiently.  Therefore, we
should incorporate the membership values of the two input variables e and e&
in the four control rules.
To further simplify the notation and discussion below, we only use the
simple membership functions shown in Figure 4.9, rather than those shown in
Figure 4.7, for both e and e& .  In a real application, of course, a designer can
(and likely should) employ more membership functions.
Using these membership functions as weights for the control u(t), we can
accomplish the following task: if y is far away from r then the control action is 
large, but if y is close to r then the control action is small.  The improved
control rule base is obtained as follows:
R1:
IF e = PL AND &e < 0 THEN u(t+) = µPL(e) . u(t);
R2:
IF e = PS AND &e < 0 THEN u(t+) = (1−µPS(e)) . u(t);
R3:
IF e = NL AND &e < 0 THEN u(t+) = −µNL(e) . u(t);
R4:
IF e = NS AND &e < 0 THEN u(t+) = −(1−µNS(e)) . u(t);
R5:
IF e = NL AND &e > 0 THEN u(t+) = µNL(e) . u(t);
R6:
IF e = NS AND &e > 0 THEN u(t+) = (1−µNS(e)) . u(t);
R7:
IF e = PL AND &e > 0 THEN u(t+) = −µPL(e) . u(t);
1
0
H
µPL
µPS
e e.
,
1
0
H
µNL
µNS
e e.
,
−
(a)
(b)
Figure 4.9
Four membership functions for both e and &e .

4 •• Fuzzy Control Systems
155
R8:
IF e = PS AND &e > 0 THEN u(t+1) = −(1−µPS(e)) . u(t).
Here and below, “= PL” means “is PL,” etc.
These rules can be easily verified by taking into account the temperature
output curve y(t) shown in Figure 4.8, the relation y& (t) = −e& (t), and the four 
membership functions for e (and the same four membership functions for e& )
shown in Figure 4.9.  Note that “.” in the formulas of u(t+1) above are
algebraic multiplications.
To implement these rules on a digital computer, we actually use their
discrete-time version of the form
u(t) = u(kT)     and
u(t+) = u((k+1)T),
(4.3)
where T  is the sampling time and u(kT)  is the value of the new change of the 
control action: ∆u(t) at t = kT, k = 0, 1, 2, ....  Thus, the actual executive rules 
on a computer program become
R1:
IF e(kT) = PL AND e& (kT) < 0 
THEN u((k+1)T ) = µPL(e(kT)) . u(kT);
R2:
IF e(kT) = PS AND e& (kT) < 0 
THEN u((k+1)T) = (1−µPS(e(kT))) . u(kT);
R3:
IF e(kT) = NL AND e& (kT) < 0 
THEN u((k+1)T ) = −µNL(e(kT)) . u(kT);
R4:
IF e(kT) = NS AND e& (kT) < 0 
THEN u((k+1)T ) = −(1−µNS(e(kT))) . u(kT);
R5:
IF e(kT) = NL AND e& (kT) > 0 
THEN u((k+1)T ) = µNL(e(kT)) . u(kT);
R6:
IF e(kT) = NS AND e& (kT) > 0 
THEN u((k+1)T ) = (1−µNS(e(kT))) . u(kT);
R7:
IF e(kT) = PL AND e& (kT) > 0 
THEN u((k+1)T ) = −µPL(e(kT)) . u(kT);
R8:
IF e(kT) = PS AND e& (kT) > 0 
THEN u((k+1)T) = −(1−µPS(e(kT))) . u(kT),
for all k = 0, 1, 2, ..., where e& (kT) ≈1
T [e(kT) − e((k−1)T)], with the initial
conditions y(0) = 0, e(−T) = e(0) = r −y(0), e&  (0) = 1
T [e(0) − e(−T)] = 0.
We finally remark that another commonly used alternative for determining
the weight of  the control u(t)  is to give it a value of  PL, PS, NL, or NS.
More specifically, we put the above rule base in a tabular form as shown in
Table 4.4.
Table 4.4 is sometimes called a “look-up table,” which can be made more
accurate by dividing both e and e&  into more subcases.  Table 4.5 gives an
example of a more subtle rule-base table for fuzzy logic controller whose
control action is proportional to both e and e& , namely,
u((k+1)T) = a e(kT) + b e& (kT)

156
Fuzzy Control Systems •• 4
for some constants a > 0 and b > 0, where NM and ZO mean “negative
medium” and “zero,” respectively, and the other abbreviations are similarly
understood.
Finally, we need to select membership functions for the different control
outputs, given either by the formulas shown in the rule base R1- R8 above, or
by the linguistic terms PL, PS, NS, and NL shown in Table 4.4.  Figure 4.10 is 
a simple, yet typical choice for the membership functions of u, where P, N,
and ZO indicate positive, negative, and zero, respectively, and H is a real
number.
(2.4) Establishing a fuzzy logic inference engine.
In order to complete the fuzzy logic inference embedded in the control rule 
base, the general fuzzy IF-THEN rule given in Definition 2.1 of Chapter 2 has 
to be applied to each rule in the rule base.
Take the first rule as an example:
R1:
IF e(kT) = PL AND e& (kT) < 0 
THEN u((k+1)T) = µPL(e(kT)) . u(kT).
Table 4.4
A Rule Base in the Tabular Form for ∆u
e
e.
PL
PS
NS
NL
PL
PL
PS
PS
NS
NS
NL
NL
< 0
> 0
Table 4.5
A Rule Base Table for u = a e + b e&
e
e.
NL
NM
NS
ZO
PL
NM
PS
NL
PS
PM
PL
NL
NM
NS
ZO
PS
PM
PL
NL
NL
NL
NL
NL
NL
NL
NL
NL
NM
NM
NM
NM
ZO
ZO
ZO
ZO
ZO
ZO
PS
PS
PS
PS
PS
PS
PM
PM
PM
PM
PM
PM
PL
PL
PL
PL
PL
PL
PL
PL
PL
PL
PL
PL
PL
PL

4 •• Fuzzy Control Systems
157
In this rule, e(kT) = PL has a membership function µPL(e(kT)) shown in Figure 
4.9 (a), e& (kT) < 0 is nonfuzzy and so has membership values µN( e& (kT)) = 1,
and u((k+1)T) has three membership functions as shown in Figure 4.10.  Thus, 
the fuzzy logic inference
µPL(e(kT)) ∧µN( e& (kT)) ⇒µ(u((k+1)T))
yields the logical inference membership function (see Sections II, VI, Chapter 
2 for more detail):
µ(u((k+1)T)) = min { µPL(e(kT)) , µN( e& (kT)) } = µPL(e(kT))
without using the membership functions shown in Figure 4.10. 
Another approach is to use the output membership functions shown in
Figure 4.10, along with the weighted average formula (3.12), Chapter 3, as
shown in formula (4.5) below. This approach is quite common in practice.
Once this logical inference has a fuzzy logic membership function, it is
completed as a logical formula.  A fuzzy logic control rule base with all
complete logical inference membership functions is called a fuzzy logic
inference engine: it activates the rules with fuzzy logic.
We remark, however, that the logical inference membership functions
are usually not used in the design of a digital fuzzy logic controller in many
control engineering applications today, where only the control rule base
discussed in the last part, part (2.3), is essential. We will follow this common
practice to use the rule base rather than the inference engine in the rest of the
book. Remember, this is a design of a controller, for which the design
engineer has a choice of what approach to take. It is just like a classical
controller design for which the designer usually has different options.
 (3)
The Defuzzification Module. The defuzzification module is in a sense
the reverse of the fuzzification module:  it converts all the fuzzy terms
created by the rule base of the controller to crisp terms (numerical
values) and then sends them to the physical system (plant, process), so as 
to execute the control of the system.
The defuzzification module performs the following functions:
µZO
µP
µN
–H
H
0
∆u
1
Figure 4.10
Typical membership functions for ∆u.

158
Fuzzy Control Systems •• 4
(3.1)
It creates a crisp, overall control signal, u, by combining all
possible control outputs from the rule base into a weighted
average formula, such as 
u((k+1)T) = 
∑α
∑α
=
=
N
i
i
N
i
i
i
kT
u
1
1
)
(
,
(αi ≥ 0, ∑α
=
N
i
i
1
> 0).
(4.4)
In the control rule base R1- R8, established above, we obtained eight
different control outputs, u, which we now denote by ui(kT), i = 1, ..., 8.
Suppose that we have a fuzzy logic control rule base
Ri:
IF e(kT) is Ei AND e& (kT) is Fi THEN ui((k+1)T) is Ui,
where i = 1, ..., N; Ei, Fi, and Ui are fuzzy subsets consisting of some bounded 
intervals with their associated membership functions µEi(⋅), µFi(⋅), and µUi(⋅),
respectively. Note that this control rule base may also be given in a tabular
form like the one shown in Table 4.5.
There are several commonly used defuzzification formulas:
(i)
The “center-of-gravity” formula:
u((k+1)T) = 
∑µ
∑
⋅
µ
=
=
N
i
i
U
N
i
i
i
U
kT
u
kT
u
kT
u
i
i
1
1
))
(
(
)
(
))
(
(
,
(4.5)
which is by nature the same as the formula (3.12) introduced in Chapter 3.
The continuous-time version of this formula is
u(t) = 
∫
∫
µ
⋅
µ
U
U
U
U
u
d
u
u
d
u
u
~
)
~
(
~
~
)
~
(
,
(4.6)
where U is the value range (interval) of the control u~  in the rule base (the
continuous-time version):
R:
IF e(t) is E AND e& (t) is F THEN u(t+) is U.
In applications, namely, in a practical engineering design employing digital
computers, the continuous-time formulation is seldom used. However, the
continuous-time formula (4.6) best explains the name of the formula: if µU
represents the density function over a rigid body of volume U and u~  is a
coordinate variable, say the horizontal x-coordinate (in a three-dimensional
x-y-z Cartesian space), then formula (4.6) gives the x-coordinate of the center
of mass (gravity) of the body (at time t), as is well known in Calculus and
Mechanics.
(ii)
The “center-of-sums” formula:

4 •• Fuzzy Control Systems
159
u((k+1)T) = 
∑∑µ
∑µ
⋅
∑
=
=
=
=
N
i
N
j
i
U
N
j
i
U
N
i
i
kT
u
kT
u
kT
u
j
j
1
1
1
1
))
(
(
))
(
(
)
(
.
(4.7)
This formula can be computed faster than the “center-of-gravity” formula
(4.5).  Its continuous-time version is
u(t) = 
∫∑
∑
∫
=
=
µ
µ
⋅
U
N
j
U
N
j
U
U
u
d
u
u
d
u
u
j
j
1
1
~
)
~
(
~
)
~
(
~
.
(4.8)
(iii) The “mean-of-maxima” formula:
For each rule Ri, i = 1, ..., N, we first find the particular control output
value ui(kT) from its value range (interval) Ui at which its membership value
reaches the maximum: µUi(ui(kT)) = maximum (= 1 in the normalized case).  If 
there are several such values ui(kT) at which their membership values reach
the maxima, then we count the multiplicities.  If there is a continuum
(subinterval) of such values ui(kT)  at which their membership values reach
the maxima, then we pick the smallest and the largest values and count them
just twice.  Let us say the total number of such values of ui(kT), at which their 
membership values reach the maxima, is M.  Then we take their mean
(average) in the following form:
u(kT) = 
∑
=
M
i
i kT
u
M
1
)
(
~
1
.
(4.9)
Its continuous-time version is:
u(t) = 2
1 { inf{ u∈U | µU (u) = maximum } +
sup{u∈U | µU (u) = maximum } }.
(4.10)
There are other defuzzification formulas suggested in the literature, each of 
which has its own rationale, either from logical argument or from geometrical
reasoning, or from control principles.  We will however only discuss the
“center-of-gravity” formula (4.5) throughout the book.
(3.2)
Just like the first step of the fuzzification module, this step of the
defuzzification module transforms the afterall control output, u,
obtained in the previous step, to the corresponding physical
values (position, voltage, degree, etc.) that the system (plant,
process) can accept. This converts the fuzzy logic controller’s
numerical output to a physical means that can actually drive the
given plant (process) to produce the expected outputs.
The overall fuzzy logic controller that combines the “fuzzification - rule
base - defuzzification” modules has been shown in Figure 4.6, which is the
controller block in the closed-loop set-point control system of Figure 4.5.

160
Fuzzy Control Systems •• 4
Finally, it is very important to recall that the design of the fuzzy logic
controller that we discussed in this section does not require any information
about the system (plant, process):  it doesn’t matter if the system is linear or
nonlinear (nor the order of linearity, structure of nonlinearity, etc.) as long as
its output, y, can be measured by a sensor and used for the control.  In other
words, the design of the fuzzy logic controller is independent of the
mathematical model of the system under control. Comparing it with the
conventional controllers design, its advantages are obvious. The price that we
have to pay for this success is the complexity in computation in the design:
the “fuzzification - rule base - defuzzification” steps.  But this is what it is
supposed to be:  under a worse condition (the system model is unknown, or
only vaguely given), if we want to design a controller to achieve the same (or
better) set-point tracking performance then we have to do more analysis and
calculation in the design. This is generally true in a sensible comparison of a
fuzzy logic controller with a similar conventional one: it is likely impossible
to obtain a better controller with less effort for a system under even worse
conditions. However, the rapid development of modern high-speed computers 
has made such computational tasks affordable.
C. Examples of Model-Free Fuzzy Controller Design
Two examples are given in this section to illustrate the model-free fuzzy
control approach and to demonstrate its effectiveness in controlling a complex 
mechanical system without assuming its mathematical model.
Example 4.1. We first consider a truck-parking control problem, as shown 
in Figure 4.11. The objective is to design a fuzzy logic controller, without
assuming a mathematical model of the truck, to park the truck anywhere on
the x-axis. Suppose that the truck can move forward at a constant speed of v = 
0.5 m/s and it is assumed that the truck is equipped with sensors that can
measure location (x,y) and orientation (angle) θ at all times. The fuzzy logic
controller is to provide an input, u, to rotate the steering wheels and,
consequently, to maneuver the truck.
In the simulation, the input variables are the truck angle θ and the
vertical position coordinate, y, while the output variable is the steering angle
(signal), u.  The variable ranges are pre-assigned as
–100 ≤y ≤ 100,
–180° ≤θ ≤ 180°,
–30° ≤u ≤ 30°.
Here, clockwise rotations are considered positive in θ, and, therefore,
counterclockwise are negative. The linguistic terms used in this design are
given as follows:
Angle θ
y-position
Steering angle u
AB: Above
AO: Above much
NB: Negative big
AC: Above center
AR: Above
NM: Negative medium
CE: Center
AH: Above horizontal
NS: Negative small
BC: Below center
HZ: Horizontal
ZE: Zero
BE: Below
BH: Below horizontal
PS: Positive small
BR: Below
PM: Positive medium
BO: Below much
PB: Positive big 

4 •• Fuzzy Control Systems
161
The first step is to choose membership functions. They are as shown in
Figures 4.12 – 4.14. These choices of their shapes, ranges, and overlapping are 
somewhat arbitrary. We only note that narrow membership functions are used
to permit fine control near the designated parking spot, while wide
membership functions are used to perform fast controls when the truck is far
away from the parking place.
y
x
y
u
θ
A
B
x
Figure 4.11
A truck-driving control example.
–80
–60
–40
–20
0
20
40
60
80
y
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
µ
Figure 4.12
Fuzzy membership functions for the y-position.

162
Fuzzy Control Systems •• 4
–200
–150
–100
–50
0
50
100
150
200
y
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
µ
Figure 4.13
Fuzzy membership functions for the angle θ.
The rule base used in simulation is summarized in Table 4.6. Each rule has the 
form IF y is Y AND θ is Θ THEN u is U, as usual. A glance of these rules
reveals the symmetry, an intrinsic property of this controller, which is
reasonable for this parking application since the truck can move in any
direction. This is not always the case, however, as can be seen from the next
example where symmetry of control rules is not reasonable.
Table 4.6
Fuzzy Controller Rule Base
BE
BC
CE
AC
AB
BO
PB
PB
PM
PM
PS
BR
PB
PB
PM
PS
NS
BH
PB
PM
PS
NS
NM
HZ
PM
PM
ZE
NM
NM
AH
PM
PS
NS
NM
NB
AR
PS
NS
NM
NB
NB
AO
NS
NM
NM
NB
NB

4 •• Fuzzy Control Systems
163
–30
–20
–10
0
10
20
30
u
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
µ
Figure 4.14
Fuzzy membership functions for the control signal u.
Finally, we need to obtain the output action under the given input
conditions. The following standard weighted average defuzzification formula
was used in simulation:
u = 
∑µ
∑µ
=
=
4
1
4
1
)
(
)
(
i
i
i
i
i
u
u
u
.
A total of 12 computer simulations were performed. Their initial conditions
are summarized in Table 4.7, and the corresponding parking performances are 
shown in Figure 4.15.
The following is a simplified mathematical model for the motion of the
truck. This model was used to create data for simulation but was not used in
the design of the controller. This model directly follows from the geometry of 
the truck (see Figure 4.11):
θ(k+1) = θ(k) + v T tan( u(k) ) / L,
x(k+1) = x(k) + v T cos( θ(k) ),
(4.11)
y(k+1) = y(k) + v T sin( θ(k) ),
where
Table 4.7
Initial Conditions of the 12 Simulated Cases
Case
1
2
3
4
5
6
7
8
9
10
11
12
θ
0
0
0
90
90
90
180 180 180 –90 –90 –90
y
30
20
–20
30
10
–20
30
–20 –10 –10 –20
20

164
Fuzzy Control Systems •• 4
-0.8
-0.6
-0.4
-0.2
0
0.2
0.4
0
10
20
30
40
50
60
70
80
(a) profile of input u(t) vs. time t
-2
-1.5
-1
-0.5
0
0.5
1
0
10
20
30
40
50
60
70
80
(b) profile of output θ(t) vs. time t
0
5
10
15
20
25
0
10
20
30
40
50
60
70
80
(c) profile of output y(t) vs. time t
Figure 4.15
Model-free parking control simulation results.

4 •• Fuzzy Control Systems
165
-0.6
-0.4
-0.2
0
0.2
0.4
0
20
40
60
80
100
120
(a) profile of input u(t) vs. time t
-2
-1
0
1
2
0
20
40
60
80
100
120
(b) profile of output θ(t) vs. time t
0
10
20
30
0
20
40
60
80
100
120
(c) profile of output y(t) vs. time t
Figure 4.15
Model-free parking control simulation results (continued).

166
Fuzzy Control Systems •• 4
-0.4
-0.2
0
0.2
0.4
0.6
0.8
0
10
20
30
40
50
60
(a) profile of input u(t) vs. time t
0
1
2
3
4
5
0
10
20
30
40
50
60
(b) profile of output θ(t) vs. time t
0
4
8
12
0
10
20
30
40
50
60
(c) profile of output y(t) vs. time t
Figure 4.15
Model-free parking control simulation results (continued).

4 •• Fuzzy Control Systems
167
θ(k)
⎯
angle of the truck at time k,
x(k)
⎯
horizontal position of the truck rear-end at time k,
y(k)
⎯
vertical position of the truck rear-end at time k,
u(k)
⎯
steering angle as control input to the truck at time k,
L
⎯
length of the truck (L=2.5m),
T
⎯
sampling time of the discrete model (T=0.1s),
v
⎯
constant speed of the truck (v=0.5m/s).
Example 4.2. In this example, we show a landing control problem of a
model plane from a model-free approach. This airplane landing problem is
visualized by Figure 4.16, which differs from the truck-parking control
problem of Example 4.1 in that the airplane is not allowed to “overshoot” the
set-point (i.e., cannot hit the ground) in order to avoid crashing. Therefore, the 
control rule base will not have symmetry in this example.
 The objective is to design a fuzzy logic controller to land the plane
safely, anywhere on the ground (the x-axis). Assume that no mathematical
model for the plane is available for the design, but the plane is equipped with
sensors that can measure the height h(t) and the angle θ of motion of the
plane. Suppose that the model plane is moving forward at a constant speed of
v=5 m/s, and the controller is used to steer the angle of the plane. Let the
initial conditions be h(0)=1000m and θ (0)=0 deg. (horizontally). The fuzzy
logic controller is used to provide an input, u, which controls the angle of the
plane, so as to guide it to land on the ground safely.
The parameters involved in the control system are as follows:
θ(t)
⎯
angle of the plane at time t,
h(t)
⎯
vertical position of the plane at time t,
u(t)
⎯
control input to the plane at time t,
T
⎯
sampling time for discretization (1s),
v
⎯
constant speed of the plane (5m/s).
model plane
θ(t)
h(t)
Figure 4.16
A model airplane landing control problem.

168
Fuzzy Control Systems •• 4
We first define the ranges of the plane position and angle, as well as that of
the control input, throughout the landing process:
– 4
π ≤θ(t) ≤ 0,
– 4
π ≤u(t) ≤ 0,
0 ≤h(t) ≤ 1000.
Since the plane can land anywhere on the ground, we do not specify the
parameter for the horizontal axis. The final state is defined by h = 0 ± 1m and
θ = 0 ± 0.1 deg. (horizontally), to ease the simulation.
The following values are chosen before fuzzification, in order to quantify
the linguistic terms of positive small, negative large, etc.
height h
h
Z
PS
PM
PL
value
0
300
600
1000
Angle θ
θ
NL
NM
NS
Z
value
–π/4
–π/6
–π/8
0
The membership functions for the height h and the angle θ are chosen as
shown in Figures 4.17 and 4.18, respectively. 
200
400
600
800
h
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
µ
Figure 4.17
Fuzzy membership function for the height (h).

4 •• Fuzzy Control Systems
169
–2.5
–3
–1
–3.5
–2
–1.5
–0.5
θ (π/8)
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
µ
Figure 4.18
Fuzzy membership function for the angle (θ).
The fuzzy rule base used in the simulation is shown in Table 4.8, where V
means “very.” It is also in the form of  IF h is H AND θ is Θ THEN u is U.
Table 4.8
Fuzzy Control Rule Base
θ
h
NL
NM
NS
Z
Z
PMS
PS
PVS
Z
PS
PS
PVS
Z
NVS
PM
PVS
Z
NVS
NS
PL
Z
NVS
NS
NMS
The basic idea in constructing this simple control rule base is as follows: 
First, if the plane is far away from the ground, we increase the degree of the
plane angle (downward). Second, as the plane approaches the ground, the
desired plane angle will gradually turn from downward to horizontal, so that it 
can land smoothly and safely.
The defuzzfication formula used is, again, the weighted average of all
control actions, where the weights are the corresponding membership values:
u = 
∑µ
∑µ
=
=
n
i
i
n
i
i
i
u
u
u
1
1
)
(
)
(
.
For the purpose of computer simulation, the following simplified
mathematical model of the plane was used to create data for control (but it
was not used in the controller design):

170
Fuzzy Control Systems •• 4
θ(k+1) = θ(k) + vT tan(u(k))
y(k+1) = y(k) + vT sin(u(k)).
(4.12)
A simulation result is shown in Figure 4.19, which demonstrates the safe
landing process of the plane under the designed fuzzy logic controller.
III.
FUZZY LOGIC CONTROL (II): A GENERAL MODEL-BASED
APPROACH
In the last section, we have seen that fuzzy logic controllers can be
designed and work even without any knowledge about the structure of the
system (plant, process) for set-point tracking problems, if the system output
can be measured and used on-line.  The main idea was to use the error signal
(the difference between the reference signal and the system output) to drive
the fuzzy logic controller, so as to create a new control action each time.
These control actions should be able to alter the system outputs in such a way 
that the error signal is reduced until satisfactory set-point tracking
performance is achieved.
If the mathematical model, or a fairly good approximation of it, is
available, one may expect to be able to design a better fuzzy logic controller
with performance specifications and guaranteed stability.  In this section, we
discuss another general approach of fuzzy logic control that uses an
approximate mathematical model of the given system (plant, process).
In the last section, we used the set-point tracking control problem as a
prototype for illustrating the basic ideas and methods. To facilitate our
discussion in this section, we use the truck-driving example discussed in
Example 4.1 above as a platform.
Consider the simplified truck-driving control problem described in
Example 4.1.  Suppose that the truck is in the initial position A and we want to 
drive it to the target position B as shown in Figure 4.11.  In order not to get the 
actuator-dynamics involved in this study of basic design principles, we again
0
200
400
600
800
1000
1200
0
10
20
30
40
50
60
Figure 4.19
Airplane-landing control simulation result.

4 •• Fuzzy Control Systems
171
assume that the truck is driven by the actuator in a constant speed v while the 
control action is applied only to the steering angle of the front wheelers of the 
truck.  Thus, a very simple mathematical model for the motion of the truck
can be obtained from the geometry as shown in (4.11), which was used for
simulation purposes before but is employed for controller design here. The
model to be used is
θ(k+1) = θ(k) + v T tan(u(k)) / L,
x(k+1) = x(k) + v T cos(θ(k)),
(4.13)
y(k+1) = y(k) + v T sin(θ(k)),
with notation as defined in (4.11).
We note that this mathematical model, as it stands, is very simple and brief 
for describing the motion of the truck.  Nevertheless, our design of a fuzzy
logic controller u(k) that controls the steering angle will be based on this
approximate model.
We first discuss the general approach to this control problem.  To begin,
we convert this mathematical model to a fuzzy model described by the
following IF-THEN rules (see Section II.B of Chapter 3):
i
S
R :
IF θ(k) is Θi AND x(k) is Xi AND y(k) is Yi
THEN x(k+1) = fi(x(k)) + bi(u(k)),
i=1,...,N,
(4.14)
where
x(k) = [ θ(k) x(k) y(k) ]T,
fi(x(k)) = 
⎥
⎥
⎥
⎦
⎤
⎢
⎢
⎢
⎣
⎡
θ
+
θ
+
θ
))
(
sin(
)
(
))
(
cos(
)
(
)
(
k
vT
k
y
k
vT
k
x
k
,
bi(u(k)) = 
⎥
⎥
⎥
⎦
⎤
⎢
⎢
⎢
⎣
⎡
0
0
/))
(
tan(
L
k
u
vT
.
We then calculate the new state vector by the following standard weighted
average formula:
x(k+1) = 
∑
∑
=
=
+
N
i
i
N
i
i
i
k
w
k
k
w
1
1
)
(
)1
(
)
(
x
,
(4.15)
where
wi(k) = min{ µθ,i(θ(k)), µx,i(x(k)), µy,i(y(k)) },
wi(k) ≥ 0, 
∑
=
N
i
i k
w
1
)
(
> 0,
in which µθ,i(.), µx,i(.), µy,i(.) are membership functions defined on the fuzzy
subsets Θ, X, Y, and µθ,i, µx,i, µy,i are the corresponding membership values of
θ(k), x(k), y(k) in the IF-THEN rule Ri, i = 1,..., N, respectively. Example 4.1
discussed above shows a concrete case of this description.

172
Fuzzy Control Systems •• 4
We now design a state-feedback fuzzy logic controller for guiding the
steering angle of the front wheelers of the truck. This controller is governed
by the following fuzzy IF-THEN rules:
i
C
R :
IF θ(k) is Θi AND x(k) is Xi AND y(k) is Yi
THEN ui(k) = Ki x(k),
i=1,...,N,
(4.16)
where {Ki} are constant matrices (control gains) to be determined in the
design, with the averaged control action given by
u(k) = 
∑
∑
+
=
=
N
i
i
N
i
i
i
i
k
w
k
k
w
1
1
)
(
)1
(
)
(
x
K
,
(4.17)
where, for simplicity, we use the same weights as those obtained in the system 
model above.  Of course, it is possible to use different weights for the
controller to make it more effective in a real design.
Since this is a design, we may take different approaches. Here, to take a
simple approach, we continue our design by further simplifying the models in
two aspects:
(i)
We only study the simple case of horizontal parking of the truck, to 
position B of Figure 4.11, where the final horizontal position, x(k), is not
specified.  Hence, we can simply delete the second equation of (4.13) without 
altering the control effect on the process.
(ii)
We linearize the rest of the mathematical model as follows:
),
(
)
(
)1
(
),
(
)
(
)1
(
k
vT
k
y
k
y
k
u
L
vT
k
k
θ
+
=
+
+
θ
=
+
θ
(4.18)
where we note that
−θ(k) ≤ sin(θ(k)) ≤θ(k),
−π ≤θ(k) ≤π,
and
θ(k) → 0
⇒
sin(θ(k)) → 0,
θ(k) →±π
⇒
sin(θ(k)) → 0.
To avoid the singular points ±π at which the linearization is invalid, we only
consider the range
−π + ε ≤θ(k) ≤π −ε
for a small ε > 0.
Under these two simplications, we obtain the following two linearized
models for the truck-driving control problem:
1
−π+ε
π−ε
µ−
1
−π+ε
π−ε
µ0
1
−π+ε
π−ε
µ+
Figure 4.20
Membership functions for truck model linearization.

4 •• Fuzzy Control Systems
173
S1:
(when θ(k) → 0)
)
(
0
/
)
(
)
(
1
0
1
)1
(
)1
(
1 k
u
L
vT
k
y
k
vT
k
y
k
⎥⎦
⎤
⎢⎣
⎡
+
⎥⎦
⎤
⎢⎣
⎡θ
⎥⎦
⎤
⎢⎣
⎡
=
⎥⎦
⎤
⎢⎣
⎡
+
+
θ
;
S2:
(when θ(k) →±πmε)
)
(
0
/
)
(
)
(
1
0
1
)1
(
)1
(
2 k
u
L
vT
k
y
k
vT
k
y
k
⎥⎦
⎤
⎢⎣
⎡
+
⎥⎦
⎤
⎢⎣
⎡θ
⎥⎦
⎤
⎢⎣
⎡
ε
=
⎥⎦
⎤
⎢⎣
⎡
+
+
θ
.
Note that in these two linearized models, the data set {y(k)} is actually not 
used (they are zeroed out by the coefficient matrix) for the changes of the
angle θ(k). This is reasonable since the truck is moving to the horizontal
direction, θ(k) → 0, independently of the vertical position of the truck.
Converting these mathematical models to fuzzy ones, we have
1
~
S
R :
IF θ(k) is approximately 0
THEN x1(k+1) = A1 x(k) + b1 u(k);
2
~
S
R :
IF θ(k) is approximately π−ε OR θ(k) is approximately −π+ε
THEN x2(k+1) = A2 x(k) + b2 u(k),
where x(k) = [ θ(k)  y(k) ]T, and
A1 = 
⎥⎦
⎤
⎢⎣
⎡
1
0
1
vT
,
A2 = 
⎥⎦
⎤
⎢⎣
⎡
ε
1
0
1
vT
,
b1 = b2 = 
⎥⎦
⎤
⎢⎣
⎡
0
/ L
vT
,
with the membership functions for linearization defined by µ−, µ0, and µ+ in
Figure 4.20.  Note that 
2
~
S
R  is equivalent to the following two standard IF-
THEN rules:
21
~
S
R
:
IF θ(k) is approximately π−ε
THEN x21(k+1) = A2 x(k) + b2 u21(k);
22
~
S
R
:
IF θ(k) is approximately −π+ε
THEN x22(k+1) = A2 x(k) + b2 u22(k).
In the above rules, 
1
~
S
R ,
21
~
S
R
, and 
22
~
S
R
 have the associated membership
functions µ−, µ0, and µ+, respectively.  Hence, the averaged state vector is
given by
x(k+1) = 
)
(
)
(
)
(
)1
(
)
(
)1
(
)
(
)1
(
)
(
3
2
1
22
3
21
2
1
1
k
w
k
w
k
w
k
k
w
k
k
w
k
k
w
+
+
+
+
+
+
+
x
x
x
,
(4.19)
where w1(k) = µ0(θ(k)), w2(k) = µ+(θ(k)), and w3(k) = µ–(θ(k)).
The fuzzy logic controller for this system is described by the following two 
fuzzy IF-THEN rules:
1
~
C
R :
IF θ(k) is approximately 0
THEN u(k) = K1 x(k) = [ K11 K12 ] x(k);
2
~
C
R :
IF θ(k) is approximately π−ε OR θ(k) is approximately −π+ε
THEN u(k) = K2 x(k) = [ K21 K22 ] x(k),

174
Fuzzy Control Systems •• 4
where the constant gains, K11, K12, K21, and K22, are to be determined in the
design for the control task:  driving the truck from position A to the horizontal 
position B as shown in Figure 4.11.
Similar to the system rules, the second control rule is equivalent to the
following two standard IF-THEN rules:
21
~
C
R
: IF θ(k) is approximately π−ε
THEN u21(k) = K2 x(k) = [ K21 K22 ] x(k);
22
~
C
R
: IF θ(k) is approximately −π+ε
THEN u22(k) = K2 x(k) = [ K21 K22 ] x(k),
and the averaged control is given by
u(k) =
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
3
2
1
22
3
21
2
1
1
k
w
k
w
k
w
k
u
k
w
k
u
k
w
k
u
k
w
+
+
+
+
,
(4.20)
where, as mentioned above, we use the same weights w1(k), w2(k), and w3(k)
as those used in the system rules for simplicity of discussion.
Observe that our control task in this example is to drive the truck to
position B where θ(k*) = 0, x(k*)  is not specified (“don’t care”), and y(k*) =
0, for all large values of k*. This is guaranteed if we can design the fuzzy
controller u(k) such that the equilibrium point x* = 0 of the linear controlled
system (described by 
i
S
R~  and 
i
C
R~ , i = 1, 2) becomes asymptotically stable. If
so, then
θ(k) → 0,
y(k) → 0
as k →∞.
Therefore, we next complete the design by determining the constant control
gains, K1 = [K11 K12] and K2 = [K21 K22], such that the feedback controlled
system is asymptotically stable about its equilibrium point x* = [θ*
y*]T = 0.
By substituting the control rules 
1
~
C
R ,
21
~
C
R
,
22
~
C
R
 into
1
~
S
R ,
2
~
S
R , and then
using the averaged state vector (4.19), in which they have the same weights,
we obtain
x(k+1) = 
)
(
)
(
)
(
)
(
)
(
)
(
3
2
1
3
3
2
2
1
1
k
w
k
w
k
w
k
w
k
w
k
w
+
+
+
+
H
H
H
x(k),
(4.21)
where
H1 = A1 + b1 K1 = 
⎥⎦
⎤
⎢⎣
⎡+
1
/
/
1
12
11
vT
L
K
T
v
L
K
T
v
,
H2 =
2
1 [(A1 + b1 K1) + (A2 + b2 K2)]
=
⎥⎦
⎤
⎢⎣
⎡
ε
+
+
+
+
1
2
/
)
1(
2
/)
(
2
/)
(
1
22
12
21
11
vT
L
K
K
T
v
L
K
K
T
v
,
H3 = A2 + b2 K2 = 
⎥⎦
⎤
⎢⎣
⎡
ε
+
1
/
/
1
22
21
vT
L
K
T
v
L
K
T
v
.
It then follows from Theorem 3.3 of Chapter 3 that if we can choose K11, K12,
K21, and K22 such that there is a common positive definite matrix P satisfying
0
T
<
−P
H
P
H
i
i
,
i = 1, 2, 3,

4 •• Fuzzy Control Systems
175
then the feedback controlled system (4.21) will be asymptotically stable about 
its equilibrium point x* = 0.
As a numerical example, let
L = 2.8 m,
T = 1.0 sec.,
v = 1.0 m/sec.,
ε = 0.01π,
K11 = −0.4212,
K12 = −0.02944,
K21 = −0.0991,
K22 = −0.00967.
It can be verified that
P = 
⎥⎦
⎤
⎢⎣
⎡
29
.
26
25
.
75
25
.
75
0.
989
 > 0,
which yields
P
H
P
H
−
1
T
1
 = 
⎥⎦
⎤
⎢⎣
⎡
−
−
468
.1
008
.6
008
.6
4.
120
 < 0,
P
H
P
H
−
2
T
2
 = 
⎥⎦
⎤
⎢⎣
⎡
−
−
−
−
5079
.0
873
.5
873
.5
31
.
68
 < 0,
Table 4.9
Different Initial Positions of the Truck
θ(0) [deg.]
y(0)  [m]
1
0
30
2
0
20
3
0
10
4
0
–10
5
0
–20
6
0
–30
7
90
30
8
90
20
9
90
10
10
90
–10
11
90
–20
12
90
–30
13
180
30
14
180
20
15
180
10
16
180
–10
17
180
–20
18
180
–30
19
–90
30
20
–90
20
21
–90
10
22
–90
–10
23
–90
–20
24
–90
–30

176
Fuzzy Control Systems •• 4
P
H
P
H
−
3
T
3
 = 
⎥⎦
⎤
⎢⎣
⎡
−
−
−
−
0.1
000114
.0
000114
.0
0.
100
 < 0.
The computer simulation results of this fuzzy control, for the linearized
truck-driving system, with the target angle θ=0, and with 24 different initial
positions (the position A in Figure 4.11) listed in Table 4.9, are shown in
Figures 4.21 (a)-(d).
30
20
10
–30
–20
–10
0
Figure 4.21  (a) Control simulation results for Cases 1 - 6.
30
20
10
–30
–20
–10
0
Figure 4.21  (b)
Control simulation results for Cases 7 - 12.

4 •• Fuzzy Control Systems
177
30
20
10
–30
–20
–10
0
Figure 4.21  (c)
Control simulation results for Cases 13 - 18.
30
20
10
–30
–20
–10
0
Figure 4.21  (d)
Control simulation results for Cases 19 - 24.

178
Fuzzy Control Systems •• 4
PROBLEMS
P4.1
A conventional machine tool working in an automatic cycle is under
the control of a programmable logic controller (PLC).  This machine
tool is loaded and unloaded by an industrial robot arm that operates
according to a 2-second load cycle and then a 2-second unload cycle.
There are several other activities to be performed at scheduled
sequential times, some of them overlapping, as summarized in Figure 
4.22.
Outputs
Activities
A (robot load)
(clamp)
(coolant on)
(spindle on)
(tool advance)
(machine cycle)
(tool retract)
(robot unload)
B
C
D
E
F
G
H
1
2
3
4
5
0
6
7
8
9
10
11
12
13
14
time (seconds)
Figure 4.22
Activities of the machine tool.
Fill out the drum-timer array displayed in Table 4.10 for the machine 
tool.
Table 4.10
PLC Drum-Timer Array for the Machine Tool
Steps
Counts
(1 count/sec)
Outputs
1
2
3
4
5
6
7
A
B
C
D
E
F
G
H
2
1
2
4
1
1
2
P4.2
Consider the ladder logic diagram shown in Figure 4.23. Show what
the following logical operations in this diagram perform (in Boolean
algebraic notation):

4 •• Fuzzy Control Systems
179
A
C
B
X
X
Y
A
Z
X
D
Y
Figure 4.23
A ladder logic diagram.
P4-3
(Computer programming project)
Consider a unitless set-point tracking system shown in Figure 4.5,
where the set-point r = 2.0; the plant is given by the nonlinear model
y((k+1)T) = 
)
(
)]
(
[
2
2
kT
u
kT
y
T
+
,
(4.22)
where T = 0.1 is the sampling time, and u(kT) is the control input to
the plant created by the fuzzy logic controller shown in Figure 4.6.
Follow the general design principle discussed in Section IV.B to
design a fuzzy logic controller for this set-point tracking task (see
Figure 4.8).
In the design, use the four membership functions shown in Figure 4.9 
for both the error signal e(kT) and the change of error e& (kT), and the 
membership functions shown in Figure 4.10 for the control u(kT) and 
in the fuzzy logic control rule base. The common real constant H > 0 
in the membership functions in Figures 4.9 and 4.10 can be used as a 
tuning parameter for improving the tracking performance when
programming the control. Use the following initial conditions:
y(0) = 0,
e(0) = r −y(0) = 2.0,
and
e& (0) = 
)]
(
)
0
(
[
1
T
e
e
T
−
−
 = 
]
0.2
0.2
[
1.0
1
−
 = 0.

180
Fuzzy Control Systems •• 4
Describe clearly the entire design procedure, write a computer
program (in any computer programming language) for the described
simulation, and plot the final results in a graph similar to Figure 4.8.
P4-4
(Computer programming project)
Consider a model-based fuzzy control problem for an inverted
pendulum to track a specified trajectory.  Figure 4.24 shows the
inverted pendulum  system, which has the following mathematical
model:
1x&  = x2,
2
x&  = 
)
(
cos
3
/
4
)
cos(
2
/)
2
sin(
)
sin(
1
2
1
1
2
2
1
x
aml
l
u
x
a
x
amlx
x
g
−
−
−
,
(4.23)
where x1 is the angle in radians of the pendulum measured from the
vertical axis, x2 is the angular velocity in rad/sec, g =9.8 m/sec2 is the 
gravity acceleration constant,
m = 2.0 kg is the mass of the
pendulum, a = (m + M)–1, M = 8.0 kg is the mass of the cart, 2l = 1.0
m is the length of the pendulum, and u is the force input to the cart. A 
fuzzy model used to approximate this physical system is as follows: 
R1:
IF x1 is about 0,
THEN x&  = A1x + B1u
R2:
IF x1 is about ±π/2, THEN x&  = A1x + B1u,
where
A1 = 
⎥
⎥
⎦
⎤
⎢
⎢
⎣
⎡
−
0
3
/
4
1
0
aml
l
g
,
B1 = 
⎥
⎥
⎦
⎤
⎢
⎢
⎣
⎡
−
−
aml
l
a
3
/
4
0
,
A2 = 
⎥
⎥
⎦
⎤
⎢
⎢
⎣
⎡
β
−
π
0
)
3
/
4
(
2
1
0
2
aml
l
g
,
B2 = 
⎥
⎥
⎦
⎤
⎢
⎢
⎣
⎡
β
−
β
−
2
3
/
4
0
aml
l
a
.
The membership functions for Rules 1 and 2 are shown in Figure
4.25. Design a model-based fuzzy logic controller of the form ui =
Kixi to stabilize this inverted pendulum system such that x1 → 0 and
x2 → 0.
[Hint: First, discretize the model, and then follow the design
procedure discussed in Section III. One possible solution is
K1 = [–120.7 –22.7]
K2 = [–255.6 –746.0].
But this solution is by no means unique.]

4 •• Fuzzy Control Systems
181
l
mc
mg sin(θ)
θ = x1
θ&  = x2
Figure 4.24  The inverted pendulum system.
Rule 2
Rule 2
Rule 1
µ(x)
1
0
–1.57
1.57
0
Figure 4.25   The membership functions for the inverted pendulum.

182
Fuzzy Control Systems •• 4
REFERENCES
[1]
C. R. Asfahl. Robots and Manufacturing Automation.  New York,
NY:  Wiley (1992).
[2]
D. Drianker, H. Hellendoorn, and M. Reinfrank. An Introduction to
Fuzzy Control.  Berlin, Germany:  Springer-Verlag (1993).
[3]
K. Tanaka.  “Design of model-based fuzzy control using Lyapunov’s 
stability approach and its applications to trajectory stabilization of a
model car.” Theoretical Aspects of Fuzzy Control (ed. H. T. Nguyen, 
M. Sugeno, R. Tong, and R. R. Yager), pp 31-63, New York, NY:
Wiley (1995).
[4]
L. X. Wang.
Adaptive Fuzzy Systems and Control.  Englewood
Cliffs, NJ:  Prentice-Hall (1994).
[5]
J. W. Webb and R. A. Reis.
Programmable Logic Controllers:
Principles and Applications.  Englewood Cliffs, NJ:  Prentice-Hall
(1995).
[6]
L. A. Zadeh.  “The role of fuzzy logic in modeling, identification,
and control.” Modeling, Identification, and Control, Vol. 15, No. 3,
pp 191-203 (1994).

CHAPTER 5
Fuzzy PID Controllers
Conventional (classical) proportional-integral-derivative (PID) controllers
are perhaps the most well-known and most widely used controllers in modern
industries: statistics has shown that more than 90% controllers used in
industries todays are PID or PID-type of controllers.
Generally speaking, PID controllers have the merits of being simple,
reliable, and effective: they consume lower cost but are very easy to operate.
Besides, for lower-order linear systems (plants, processes), PID controllers
have remarkable set-point tracking performance and guaranteed stability.
Therefore, PID controllers are very popular in real-world applications.
In this chapter, we first give a brief review on the conventional PID
controllers, and then introduce the design and stability analysis of a new type
of fuzzy PID controller. We will also compare these two classes of PID
controllers and discuss their advantages as well as limitations. It will be seen
that the fuzzy PID controllers are generally superior to the conventional ones, 
particularly for higher-order, time-delayed, and nonlinear systems, and for
those systems that have only vague mathematical models which the
conventional PID controllers are difficult, if not impossible, to handle. For
lower-order linear systems, it will be seen that both conventional and fuzzy
PID controllers work equally well, so in these simple cases conventional PID
controllers are recommended due to their simple structures. The price to pay
for the success of the fuzzy PID controllers is that their design methods are
slightly more advanced and their resulting formulas are somewhat more
complicated (e.g., containing variable control gains in contrast to the
conventional PID controllers where the control gains are constant). It will be
seen that although the fuzzy PID controllers are designed by fuzzy
mathematics, their final form as controllers are conventional controllers. As
such, they can be used to directly replace the conventional ones in
applications. Moreover, their variable control gains are self-tuned formulas
that have adaptive capability to handle time-delay effects, nonlinearities, and
uncertainties of the given system. This chapter will make these points clear.
I. CONVENTIONAL PID CONTROLLERS
In this section, we provide a brief review on several basic types of
conventional PID controllers: their configuration, design methods, and
stability analysis, which will be needed in introducing the fuzzy PID
controller later, where the fuzzy PID controllers are natural extensions of the
conventional ones: they have the same structure but are defined based on
fuzzy mathematics and fuzzy control strategies.
Individually, the conventional proportional (P), integral (I), and derivative
(D) controllers for controlling a given system (plant, process) have the

184
Fuzzy PID Controllers •• 5
structures shown in Figure 5.1(a), (b), and (c), respectively, where r = r(t) is
the reference input (set-point), y = y(t) is the controlled system’s output, e =
e(t) := r(t) – y(t) is the set-point tracking error, and u = u(t) is the control
action (output of the controller) which is used as the input to the system.
In the time domain, they have the following solutions:
(i)
The P-controller
u(t) = KP e(t);
(ii)
The I-controller
u(t) = KI ∫
τ
t
e
0
)
(
dτ;
(iii)
The D-controller
u(t) = KD dt
d e(t).
Here, the three control gains, KP, KI, and KD, are constants to be
determined in the design for the set-point tracking performance and stability
consideration. To increase their control capabilities, they are usually used in
combinations, which will be further discussed below.
In the frequency domain, we have the following corresponding relations
for the individual P, I, and D controllers:
(i)
The P-controller
U(s) = KP E(s);
(ii)
The I-controller
U(s) = s
KI E(s);
(iii)
The D-controller
U(s) = KD s E(s).
Here and throughout the chapter, we use capital letters for the Laplace
transform L{⋅} of a continuous-time signal, or the z-transform Z{⋅} of a
discrete-time signal. Thus,
KP
system
r
e
u
y
+
–
(a) Proportional controller
KI ∫
t
0
system
r
e
u
y
+
–
(b) Integral controller
KD dt
d
system
r
e
u
y
+
–
(c) Derivative controller
Figure 5.1. Proportional-integral-derivative controllers.

5 •• Fuzzy PID Controllers
185
U(s) = L{ u(t) }
and
E(s) = L{ e(t) },
with zero initial conditions.
The following are some basic, typical combinations of P, I, and D
controllers (see Figure 5.2 for their configurations):
In the time domain:
(iv)
The PI-controller
u(t) = KP e(t) + KI ∫
τ
t
e
0
)
(
dτ;
(v)
The PD-controller
u(t) = KP e(t) + KD dt
d e(t);
(vi)
The PID-controller
u(t) = KP e(t) + KI ∫
τ
t
e
0
)
(
dτ + KD dt
d e(t);
(vii)
The PI+D-controller
u(t) = KP e(t) + KI ∫
τ
t
e
0
)
(
dτ – KD dt
d y(t).
Correspondingly, in the frequency domain:
(iv)
The PI-controller
U(s) = KP E(s) + s
KI E(s);
(v)
The PD-controller
U(s) = KP E(s) + KD s E(s);
(vi)
The PID-controller
U(s) = KP E(s) + s
KI E(s) + KD s E(s);
(vii)
The PI+D-controller
U(s) = KP E(s) + s
KI E(s) – KD s Y(s).
In the above,
Y(s) = L{ y(t) } = L{ r(t) – e(t) } = R(s) – E(s).
We note that the PID controller shown in Figure 5.2(c) is not a good
combination of the three controllers in practice, since if the error signal e(t)
has discontinuities then the D-controller will produce very bad (even
unbounded) responses. This combination is good only for illustration since it
has a neat formulation, and hence is called a “textbook PID controller.” A
practical combination of the three controllers is the PI+D controller shown in
Figure 5.2(d), where the system output signal y(t) is usually smoother than the 
error signal (through the I-controller and the system). More importantly, this
structure of closed-loop control systems has been validated to be efficient by
many practical examples and case studies.
To show how a PID-type of controller works and how to design such a
controller to perform set-point tracking with guaranteed stability, we study
two simple examples below.
Example 5.1. Consider the PI-control system shown in the frequency
domain by Figure 5.3, where the given linear system has a first-order transfer
function, 1/(as + b), with known constants a > 0 and b. The reference r is a
given constant (set-point). The design of the PI controller is to determine the

186
Fuzzy PID Controllers •• 5
two constant control gains, KP and KI, such that the system output y(t) can
track the reference:
y(t) →r
as
t →∞,
while the entire feedback control system is stable even if the given transfer
function 1/(as + b) is unstable.
We first observe from Figure 5.3 that
U(s) = KP E(s) + s
KI E(s),
KP
system
r
e
u
y
+
−
(a) PI controller
KI ∫
t
0
+
+
KP
system
r
e
u
y
+
−
(b) PD controller
+
+
KD dt
d
KP
system
r
e
u
y
+
−
(c) PID controller
+
+
KD
dt
d
KI ∫
t
0
+
KP
system
r
e
u
y
+
−
(d) PI+D controller
KI ∫
t
0
+
+
+
KD
dt
d
−
Figure 5.2
Some typical combinations of P, I, and D controllers.

5 •• Fuzzy PID Controllers
187
E(s) = R(s) – Y(s),
Y(s) = 
b
as +
1
U(s).
By combining these relations together, we can obtain the following overall
system input-output relation:
Y(s) = H(s) R(s) = 
b
as
K
s
K
+
+
I
P
R(s),
(5.1)
where H(s) is the transfer function of the overall feedback control system. It is 
easy to see that this transfer function has two poles:
s1,2 = 
a
aK
K
b
K
b
2
4
)
(
)
(
I
2
P
P
−
+
±
+
−
.
(5.2)
Thus, in our design, if we choose (note: a > 0)
KP > –b,
(5.3)
then we can guarantee that these two poles have negative real parts, so that the 
overall controlled system is stable.
What we want for set-point tracking is
∞
→
tlim e(t) = 0.
(5.4)
It follows from the Terminal-Value Theorem of Laplace transforms that
∞
→
tlim e(t) =
0
|
|lim
→
s
s E(s)
=
0
|
|lim
→
s
 s [ R(s) – Y(s) ]
=
0
|
|lim
→
s
 s [ 1 – H(s) ] R(s)
=
0
|
|lim
→
s
s ⋅
I
P
2
2
)
(
K
s
K
b
as
bs
as
+
+
+
+
⋅s
r
= 0.
It may appear that the set-point tracking task can always be done no matter
how we choose the control gain KI, provided that the other control gain, KP,
satisfies the condition (5.3), and this is true for any given constants a and b in 
the given system (plant). This observation is correct for this example.
However, in so doing it often happens that the system output y(t) tracks the
set-point r with higher-frequency oscillations caused by the pure imaginary
parts of the two poles given in (5.2). Hence, to eliminate such undesirable
oscillations so as to obtain better tracking performance, we can select the
KP
R(s)
+
−
s
KI
+
+
E(s)
U(s)
b
as +
1
Y(s)
Figure 5.3
A PI control system.

188
Fuzzy PID Controllers •• 5
control gain KI to zero out the pure imaginary parts of the poles s1 and s2.
Namely, we can force
(b + KP)2 – 4 a KI = 0,
which yields
KI = 
a
K
b
4
)
(
2
P
+
,
where KP has been determined by (5.3). Thus we complete the design of the PI 
controller for the given plant 1/(as + b), which can be originally unstable (i.e., 
b < 0). We thus obtain an overall stable feedback control system whose output 
can track the set-point without oscillations, at least in theory. Its output y(t)
generally has the shape as shown in Figure 5.4.
As seen, a PI controller so designed can completely eliminate both the
steady-state tracking error and the transient oscillations, but may not be able to 
reduce the maximum overshoot in the output. On the contrary, a PD controller 
can generally improve the tracking performance by reducing the maximum
overshoot of the output, but may not be able to eliminate the steady-state
tracking error, as can be seen from the next example.
Example 5.2. Consider the PD-control system shown in the frequency
domain by Figure 5.5, where the given linear system has a second-order
transfer function, 1/(as2 + bs + c), with known constants a > 0, b, and c. The
design of the PD controller is again to determine the two constant control
gains, KP and KD, such that the system output can track the set-point while the 
entire feedback control system is stable even if the given transfer function
1/(as2 + bs + c) is unstable.
It follows from Figure 5.5 that
U(s) = KP E(s) + KD s E(s),
E(s) = R(s) – Y(s),
Y(s) = 
c
bs
as
+
+
2
1
U(s),
so that
set
point
overshoot
0
t
Figure 5.4 A typical tracking performance of the PI controller.

5 •• Fuzzy PID Controllers
189
Y(s) = H(s) R(s) =
)
(
)
(
P
D
2
D
P
K
c
s
K
b
as
s
K
K
+
+
+
+
+
R(s).
The transfer function H(s) of the overall feedback control system has two
poles:
s1,2 = 
a
K
c
a
K
b
K
b
2
)
(
4
)
(
)
(
P
2
D
D
+
−
+
±
+
−
,
(5.5)
and so the selection (note a > 0)
KD > –b
(5.6)
and
KP = 
a
K
b
4
)
(
2
D
+
– c
(5.7)
can guarantee the controlled system be stable and have no oscillations on the
output trajectory during the set-point tracking process. However, the
asymptotic tracking error for this PD controlled system is
)
(
lim
t
e
t
∞
→
=
)
(
lim
0
|
|
s
E
s
s →
=
)
(
)]
(
[
lim
0
|
|
s
R
s
H
I
s
s
−
→
=
s
r
K
c
s
K
b
as
c
bs
as
s
P
D
s
⋅
+
+
+
+
+
+
⋅
→
)
(
)
(
lim
2
2
0
|
|
=
P
K
c
cr
+
,
which will not be zero if c ≠ 0 and r ≠ 0. This implies that the PD controller
generally cannot eliminate the steady-state error in set-point tracking.
The PD controller, as compared to the PI controller, has its advantages: it
can produce smaller maximum overshoot and is more sensitive (easier to tune) 
in general.  A typical set-point tracking performance of the PD control is
similar to that of the PI controller shown in Figure 5.4.
To implement a PI or PD controller on a computer, we need the digital
version of the analog one discussed above. To digitize an analog controller,
the following three discretization formulas can be used: 
(i)
The forward divided difference:
s = T
z
1
−
;
KP
R(s)
+
−
+
+
E(s)
U(s)
c
b
as
+
+
2
1
Y(s)
KD s
Figure 5.5 A PD control system.

190
Fuzzy PID Controllers •• 5
(ii)
The backward divided difference: s = 
T
z 1
1
−
−
;
(iii)
The trapezoidal formula:
s = 
1
1
2
+
−
z
z
T
,
where T > 0 is the sampling period. These formulas transform the analog
controller and the controlled system from the continuous-time frequency
domain (in the Laplace-transform s-variable) to the discrete-time frequency
domain (in the z-transform z-variable).  In particular, the last formula maps the 
entire left-half (right-half) s-plane into the entire inner (outer) unit circle in the 
z-plane in such a way that the mapping is one-to-one and the entire imaginary 
axis corresponds to the entire unit circle.  Hence, this formula preserves all
basic properties, particularly the stability, of the original controller and
controlled system, and hence is the one used most frequently. This trapezoidal 
formula is also known as the bilinear transform in engineering and the
conformal mapping in mathematics.
Using the bilinear transform
s = T
2
1
1
+
−
z
z
(5.8)
in the continuous-time PI controller, we obtain (see Figure 5.3):
s
KI →
2
IT
K
1
1
+
−
z
z
 = 
2
IT
K
1
1
1
)
1(
2
−
−
−
−
−
z
z
 = 
2
IT
K
 + 
1
I
1
−
−z
T
K
,
U(s) = (KP + s
KI ) E(s) →
)
(
~ z
U
 = (KP –
2
IT
K
 + 
1
I
1
−
−z
T
K
)
)
(
~ z
E
.
Let
P
~K = KP + s
KI
and
I
~K  = KI T.
(5.9)
Then we have
(1 – z–1)
)
(
~ z
U
 = 
P
~K (1 – z–1)
)
(
~ z
E
 + 
I
~K
)
(
~ z
E
.
It then follows from the inverse z-transform that
P
K~
e(nT)
+
−
v(nT)
T
T
1
z−1
T
1
I
K~
∆u(nT)
+
+
+
u(nT)
u(nT−T)
z−1
+
Figure 5.6 The digital PI controller.

5 •• Fuzzy PID Controllers
191
u(nT) – u(nT–T) = 
P
~K [ e(nT) – e(nT–T) ] +
I
~K e(nT),
so that
T
T
nT
u
nT
u
)
(
)
(
−
−
 = 
P
~K
T
T
nT
e
nT
e
)
(
)
(
−
−
 + T
KI
~
e(nT).
Let, furthermore,
∆u(nT) = 
T
T
nT
u
nT
u
)
(
)
(
−
−
(5.10)
be the incremental control and
v(nT) = 
T
T
nT
e
nT
e
)
(
)
(
−
−
.
(5.11)
We arrive at
u(nT) = u(nT–T) + T∆u(nT)
(5.12)
∆u(nT) = 
P
~K v(nT) + T
KI
~
e(nT),
(5.13)
which can be implemented as shown in Figure 5.6.
Similarly, using the bilinear transform (5.8) in the continuous-time PD
controller (see Figure 5.5), we obtain
s KD →T
2
1
1
+
−
z
z
KD = T
2
1
1
1
1
−
−
+
−
z
z
KD ,
U(s) = (KP + sKD) E(s) →
)
(
~ z
U
 = (KP + T
2
1
1
1
1
−
−
+
−
z
z
KD)
)
(
~ z
E
.
Let
P
~K  = KP
and
D
~K
= T
2 KD .
(5.14)
Then we have
(1 + z–1)
)
(
~ z
U
 = (1 + z–1)
P
~K
)
(
~ z
E
 + 
D
~K
(1 + z–1)
)
(
~ z
E
,
so that the inverse z-transform gives
u(nT−T)
P
K~
e(nT)
+
−
v(nT)
T
T
1
z−1
D
K~
z−1
∆u(nT)
+
+
+
−
u(nT)
z−1
T
1
d(nT)
+
+
Figure 5.7 The digital PD controller.

192
Fuzzy PID Controllers •• 5
∆u(nT) = 
P
~K d(nT) + 
D
~K
v(nT),
(5.15)
where
d(nT) = 
T
T
nT
e
nT
e
)
(
)
(
−
+
,
v(nT) = 
T
T
nT
e
nT
e
)
(
)
(
−
−
.
This digital PD controller, described by (5.15), can be implemented as shown
in Figure 5.7.
We remark that formula (5.15) can be rewritten as
u(nT) = –u(nT–T) + 
P
~K [e(nT) + e(nT–T)] + 
D
~K
[e(nT) – e(nT–T)],
so that
u(nT–T) = –u(nT–2T) + 
P
~K [e(nT–T) + e(nT–2T)]
+
D
~K
[e(nT–T) – e(nT–2T)].
Thus, by substituting u(nT–T) into u(nT), we obtain
u(nT) = u(nT–2T) + 
P
~K [e(nT) – e(nT–2T)]
+
D
~K
[e(nT) – 2e(nT–T) + e(nT–2T)]
= u(nT–2T) + 
P
~K T
T
T
nT
e
nT
e
)
2
(
)
(
−
−
+
D
~K
T2
2
)
2
(
)
(
2
)
(
T
T
nT
e
T
nT
e
nT
e
−
+
−
−
,
where the two finite divided differences are the discretization of 
)
(t
e&
 and
)
(t
e&&
, respectively, of the continuous-time error signal e(t), under the bilinear
transform. This formula shows clearly that the digital PD controller implicitly
uses the discretization of both 
)
(t
e&
 and 
)
(t
e&&
, as is known in conventional
control theory. Since this formula is equivalent to, but more complicated than, 
formula (5.15), we will not use it in the following.
The fuzzy PI, PD, and PI+D controllers to be introduced below employ the 
digital PI controller (5.12) and the digital PD controller (5.15), whose
implementations are shown in Figures 5.6 and 5.7, respectively.
II. FUZZY PID CONTROLLERS
We are now in a position to introduce the fuzzy PID controllers: their
design methods, performance evaluation, and stability analysis.
We first study the fuzzy PD controller design in detail, in which all the
basic ideas, design principles, and step-by-step derivation and calculations are 
discussed. The fuzzy PI controller design will be discussed briefly next,
followed by the fuzzy PI+D controller design. Having this background, many
other types of fuzzy PID controllers can be designed by following similar
procedures. The stability analysis of these fuzzy PID controllers will be
investigated in the last section of the chapter.

5 •• Fuzzy PID Controllers
193
Although it is possible to design a fuzzy logic type of PID controller by a
simple modification of the conventional ones, via inserting some meaningful
fuzzy logic IF-THEN rules into the control system (e.g., to self-tune the PID
control gains with the help of a “look-up” table), these approaches in general
complicate the overall design and do not come up with new fuzzy PID
controllers that capture the essential characteristics and nature of the
conventional PID controllers. Besides, they generally do not have analytic
formulas to use for control specification and stability analysis.
The fuzzy PD, PI, and PI+D controllers to be introduced below are natural 
extensions of their conventional versions, which preserve the linear structures
of the PID controllers, with simple and conventional analytical formulas as the 
final results of the design. Thus, they can directly replace the conventional
PID controllers in any operating control systems (plants, processes). The main 
difference is that these fuzzy PID controllers are designed by employing fuzzy
logic control principles and techniques, which have been studied in the last
few chapters, to obtain new controllers that possess analytical formulas very
similar to the conventional digital PID controllers. After the design is
completed, all the fuzzy logic IF-THEN rules, membership functions,
defuzzification formulas, etc. will not be needed any more in applications:
what one can see is a conventional controller with a few simple formulas
similar to the familiar PID controllers. Thus, in operations the controllers do
not use any “look-up” table at any step, and so can be operated in real time. A 
control engineer who doesn’t have any knowledge about fuzzy logic and/or
fuzzy control systems can use them just like the conventional ones,
particularly for higher-order, time-delayed, and nonlinear systems, and for
those systems that have only vague mathematical models or contain
significant uncertainties. The key reason, which is the price to pay, for such
success is that these fuzzy PID controllers are slightly more complicated than
the conventional ones, in the sense that they have variable control gains in
their linear structures. These variable gains are nonlinear functions of the
errors and changing rates of the error signals. The main contribution of these
variable gains in improving the control performance is that they are self-tuned
gains and can adapt to the rapid changes of the errors and the (changing) rates 
of the error signals caused by the time-delayed effects, nonlinearities, and
uncertainties of the underlying system (plant, process).
A. Fuzzy PD Controller
The overall fuzzy PD set-point tracking control system is shown in Figure
5.8, where the process under control is a discrete-time system (or a discretized 
continuous-time system), and r(nT) is the reference signal which can be a
constant (set-point). The fuzzy PD controller inside the dashed box differs
from the conventional digital PD controller (shown in Figure 5.7) in that there 
is an extra “fuzzy controller” in the path of the incremental control signal
∆u(nT). Moreover, a constant multiplication block has been changed from the
sampling period T to an adjustable constant control gain Ku in order to enable 
the new controller one more degree of freedom in the control process (but this 

194
Fuzzy PID Controllers •• 5
is not necessary). In this fuzzy PD controller, the “fuzzy controller” block is
the key that improves the conventional digital PD controller’s capabilities and 
performance.
To simplify the notation, we have let the adjustable control gains be
Kp = 
P
~K
and
Kd = 
D
~K
in Figure 5.8 (compared to Figure 5.7), and similarly let Ki = 
I
~K  when the
fuzzy PI controller is discussed later.
To illustrate how the “fuzzy controller” block works, we first introduce a
constant parameter (an adjustable scalar) L > 0, and decompose the plane by L
as twenty input-combination regions (IC1-IC20) as shown in Figure 5.9,
where the horizontal axis is the input signal Kpd(nT), and the vertical axis the
input signal Kdv(nT), to the “fuzzy controller.” Then, according to which
region the input signals (Kpd(nT), Kdv(nT)) belong, the “fuzzy controller”
block produces the following incremental outputs:
∆u(nT) =
|)
)
(
|
2
(
2
)]
(
)
(
[
nT
d
K
L
nT
v
K
nT
d
K
L
p
d
p
−
−
,
in IC1, IC2, IC5, IC6, (5.16)
=
|)
)
(
|
2
(
2
)]
(
)
(
[
nT
v
K
L
nT
v
K
nT
d
K
L
d
d
p
−
−
,
in IC3, IC4, IC7, IC8, (5.17)
= 2
1 [ L – Kdv(nT) ],
in IC9, IC10,
(5.18)
= 2
1 [ –L + Kpd(nT) ],
in IC11, IC12,
(5.19)
= 2
1 [ –L – Kdv(nT) ],
in IC13, IC14,
(5.20)
d(nT)
∆u(nT)
v(nT)
KP
e(nT)
+
−
fuzzy
controller
z−1
z−1
+
+
−
−
u(nT)
z−1
T
1
+
+
T
1
Kd
Ku
system
r(nT)
Figure 5.8
The fuzzy PD controller.

5 •• Fuzzy PID Controllers
195
= 2
1 [ L + Kpd(nT) ],
in IC15, IC16,
(5.21)
= 0,
in IC17, IC19,
(5.22)
= –L,
in IC18,
(5.23)
= L,
in IC20.
(5.24)
Here, if the input signals (Kpd(nT), Kdv(nT)) belong to a boundary line, then
either of the two neighboring regions can be used, since they will be the same 
(namely, all these control functions are continuous on the boundaries).
This completes the description for implementation of the fuzzy PD
controller in a set-point tracking system, regardless of any knowledge about
the system (plant, process) under control. The initial conditions for this control 
system are the following nature ones:
y(0) = 0,
∆u(0) = 0,
e(0) = r,
v(0) = 0.
(5.25)
Before we discuss how to derive these formulas for the “fuzzy controller”
block and in what sense this design is good, a few remarks on the above
formulas are in order.
First, we note that the above nine pieces of formulas are all conventional
(crisp) analytical formulas, from which one does not see any fuzzy contents
(membership functions, fuzzy logic IF-THEN rules, etc.). Therefore, the
“fuzzy controller” block, as well as the entire fuzzy PD controller shown in
Figure 5.8, are conventional controllers: the overall control system works in
the conventional manner despite the name “fuzzy.” As a result, this fuzzy PD
controller can be used to replace the conventional PD controller anywhere,
and a control engineer can operate this fuzzy PD controller in a way
completely analogous to the conventional one: what he needs to do is to tune
the control gains and parameters, Kp, Kd, Ku, and L, without the need of
knowledge of the fuzzy mathematics, fuzzy logic, and fuzzy control theory.
Second, the above nine pieces of formulas are continuously connected as a 
whole (on the boundaries between different regions shown in Figure 5.9). This 
can be verified by direct calculation of any two adjacent formulas on a
−L
−L
L
L
KPd(nT)
Kdv(nT)
IC1
IC2
IC3
IC4
IC5
IC6
IC7
IC8
IC9
IC10
IC11
IC12
IC13
IC14
IC15
IC16
IC17
IC18
IC19
IC20
Figure 5.9 Regions of the “fuzzy controller” input-combination values.

196
Fuzzy PID Controllers •• 5
boundary. Therefore, the control formula switching process does not have any 
jumps.
Third, since as usual all the control gains (Kp, Kd, and Ku) are positive real 
numbers, the above nine formulas can be computed from the two inputs
Kpd(nT) and Kdv(nT), where we have
Kp | d(nT) | = | Kpv(nT) |
and
Kd | v(nT) | = | Kdv(nT) |.
Finally, but most importantly, we should point out that the first formula
(5.16) preserves the linear structure of the conventional PD controller (see
formula (5.15)):
∆u(nT) =
⎥
⎥
⎦
⎤
⎢
⎢
⎣
⎡
−
|)
)
(
|
2
(
2
nT
d
K
L
LK
p
p
d(nT) +
⎥
⎥
⎦
⎤
⎢
⎢
⎣
⎡
−
−
|)
)
(
|
2
(
2
nT
d
K
L
LK
p
d
v(nT),
except that the two control gains here are variable gains: they are nonlinear
functions of the signal d(nT) = T
1 [e(nT) + e(nT–T)]. Similarly, the second
formula, (5.17), has the same linear structure but with two variable gains that
are nonlinear functions of the signal v(nT) = T
1 [e(nT) – e(nT–T)]. It is very
important to note that it is exactly these variable control gains that improve the 
performance of the controller: when the error signal e(nT) increases, for
instance, the signal d(nT) increases, so that the control gain L/2(2L–Kp|d(nT)|)
also increases automatically. This means that the controller takes larger
actions accordingly and, hence, has certain self-tuning and adaptive
capabilities in the control process. Here, it is also important to note that
Kp|d(nT)| will not exceed the constant L in the denominator of the control gain 
according to the definition of the input-combination (IC) regions shown in
Figure 5.9; otherwise, the formula will switch to another one of the nine
formulas.
We next discuss the design principle of the fuzzy PD controller described
above, and give detailed derivations to the resulting formulas (5.16)-(5.24).
We first recall that in a standard procedure, a fuzzy controller design
consists of three components: (i) fuzzification, (ii) rule base establishment,
and (iii) defuzzification. Our design of the fuzzy PD controller follows this
procedure.
In the fuzzification step, we employ two inputs: the error signal e(nT) and
the rate of change of the error signal v(nT), with only one control output u(nT)
(to be fed to the system under control). The input to the fuzzy PD controller,
namely, the “error” and the “rate” signals, have to be fuzzified before being
fed into the controller. The membership functions for the two inputs (error and 
rate) and the output of the controller that is used in our design are shown in
Figure 5.10, which are likely the simplest possible functions to use for this
purpose. Both the error and the rate have two membership values: positive and 
negative, while the output has three (singleton functions): positive, negative,

5 •• Fuzzy PID Controllers
197
and zero. The constant L > 0 used in the definition of the membership
functions is chosen by the designer according to the value ranges of the error,
rate, and output, which is used as a tunable parameter but can also be fixed
after being determined. Note that the constant L used in these three
membership functions can be different in general (according to the physical
meaning of the signals in the application), but we let them be the same here in 
order to simplify the design.
Based on these membership functions, the fuzzy control rules that we used 
are the following:
R(1)
IF error = ep AND rate = vp THEN output = oz.
R(2)
IF error = ep AND rate = vn THEN output = op.
R(3)
IF error = en AND rate = vp THEN output = on.
R(4)
IF error = en AND rate = vn THEN output = oz.
Here, “output” is the fuzzy control action ∆u(nT), “ep” means “error
positive,” “oz” means “output zero,” etc. The “AND” is the logical AND
defined by
µA AND µB = min{ µA, µB }
for any two membership values µA and µB on the fuzzy subsets A and B,
respectively.
The reason for establishing the rules in such formulation can be understood 
in the same way as that described in Chapter 4, Section II, which is briefly
repeated here for clarity. First, it is important to observe that since the error
signal is defined to be e = r – y, where r is the reference (set-point) and y is the 
system output (see Figure 5.4 for the general situation in the continuous-time
setting), we have e&  = r& – y&  = – y&  in the case that the set-point r is constant.
For Rule 1 (R(1)): condition ep (the error is positive, e > 0) implies that r > 
y (the system output is below the set-point) and condition vp ( e&  > 0) implies
that y& < 0 (the system output is decreasing). In this case, the controller at the
previous step is driving the system output, y, to move downward. Hence, the
controller should turn around and drive the system output to move upward. It
is very important to observe, however, that in our control law (see formula
(5.12) and Figure 5.8):
u(nT) = –u(nT–T) + Ku∆u(nT),
(5.26)
1
error
negative
0.5
0
L
−L
error
positive
µe(nT)
1
error
negative
0.5
0
L
−L
error
positive
µv(nT)
1
0
L
−L
µu(nT)
Figure 5.10
The membership functions of e(nT), v(nT), and u(nT).

198
Fuzzy PID Controllers •• 5
there is a minus sign in front of u(nT–T), which will automatically perform the 
expected task. For this reason, we set “output = oz” for the incremental control 
as the first rule, which means ∆u(nT) = 0 at this step.
For Rule 2 (R(2)): condition ep (e > 0) implies that r > u and condition vn
( e& < 0) implies that y& > 0. In this case, u is below r and the controller at the
previous step is driving the system output, y, to move upward. Hence, the
controller needs not to take any action. But, in control law (5.26), there is a
minus sign with u(nT–T) which will turn the control action to the opposite. To 
compensate for this, we should let ∆u be positive, i.e., “output = op.”
For Rule 3 (R(3)): condition en (e < 0) implies that r < y and condition vp
( e& > 0) implies that y& < 0. In this case, y is over r and the controller at the
previous step is driving the system output to move downward. Therefore, the
controller needs not to take any action. Similar to Rule 2, to compensate the
minus sign in (5.26), we let ∆u be negative, i.e., “output = on.”
For Rule 4 (R(4)): condition en (e < 0) implies that r < y and condition vn
( e& < 0) implies that y& > 0. In this case, y is over r and the controller at the
previous step is driving the system output to move upward. Hence, the
controller should turn its output around to drive the system output to move
downward. Because of the minus sign in (5.26), similar to Rule 1, the
controller needs not to take any action: “output = oz.”
Here, we remark that one may try to let the controller take some action to
speed up the system output in cases of Rules 1 and 4, but this will somewhat
complicate the design of the controller.
In the defuzzification step, we use the same logical AND as mentioned
above, and the membership functions shown in Figure 5.10 for the error e(nT),
the rate v(nT), and the output ∆u(nT) of the “fuzzy controller” block. Because 
we have two (positive and negative) membership values for the error and rate, 
the commonly used weighted average formula is used for defuzzification,
leading to
∆u(nT) = 
∑
∑
×
)
input
of
value
membership
(
)
output
of
value
ing
correspond
input
of
value
membership
(
(5.27)
The defuzzification procedure and its corresponding results are now
analyzed and summarized in the following.
First, we observe from (5.16)-(5.24) that, instead of the error signal e(nT),
we will actually use the average error signal d(nT). We will simply call
Kpd(nT) and Kdr(nT) the “error signal” and the “rate signal,” respectively.
Note that using the average error will not alter the above reasoning for the
control rules (R(1))-(R(4)), at least in principle.
Second, observe that the membership functions of the average error and
rate signals decompose their value ranges into twenty adjacent input-
combination (IC) regions, as shown in Figure 5.9. This figure is understood as 
follows.

5 •• Fuzzy PID Controllers
199
We put the membership function of the error signal (given by the first
picture of Figure 5.10) over the horizontal Kpd(nT)-axis in Figure 5.9, and put 
the membership function of the rate of change of the error signal (given by the 
second picture of Figure 5.10) over the vertical Kdr(nT)-axis in Figure 5.9.
These two membership functions then overlap and form the third-dimensional
picture (which is not shown in Figure 5.9) over the 2-D regions shown in
Figure 5.9. When we look at region IC1, for example, if we look upward to
the Kpd(nT)-axis, we see the domain [0,L] and the membership function (in the 
third dimension) over [0,L] of the error signal; if we look leftward to the
Kdr(nT)-axis, we see the domain [–L,0] and the membership function (in the
third dimension) over [–L,0] of the rate of change of the error signal.
Then, we consider the locations of the error Kpd(nT) and the rate Kdr(nT)
in the region IC1 and IC2 (see Figure 5.9). Let us look at region IC1, for
example, where we have ep > 0.5 > vp (see the first two pictures in Figure
5.10). Hence, the logical AND used in (R(1)) leads to
{“error = ep AND rate = vp”} = min{ ep, vp } = vp,
so that Rule 1 (R(1)) yields
R(1):
⎩
⎨
⎧
oz.
is
ue
output val
ing
correspond
the
vp;
is
value
membership
input
selected
the
Similarly, in region IC1, Rules 2-4, (R(2))-(R(4)), and the logical AND used in
(R(2))-(R(4)) together yield
R(2):
⎩
⎨
⎧
op.
is
ue
output val
ing
correspond
the
vn;
is
value
membership
input
selected
the
R(3):
⎩
⎨
⎧
on.
is
ue
output val
ing
correspond
the
en;
is
value
membership
input
selected
the
R(4):
⎩
⎨
⎧
oz.
is
ue
output val
ing
correspond
the
;
e
is
value
membership
input
selected
the
n
It can be verified that the above are true for the two regions IC1 and IC2.
Thus, in regions IC1 and IC2, it follows from the defuzzification formula
(5.27) that
∆u(nT) = 
en
en
vn
vp
oz
en
on
en
op
 vn 
oz
vp
+
+
+
⋅
+
⋅
+
⋅
+
⋅
.
It is very important to note that if one follows the above procedure to work
through the two cases, then it is found that both the last two cases give the
same result of en (i.e., the two en in the above formula are not the misprint of 
en and ep!). To this end, by applying op = L, on = –L, oz = 0 (obtained from
Figure 5.10), and the following straight line formulas from the geometry of
the membership functions associated with Figure 5.9:
ep = 
L
L
nT
d
K p
2
)
(
+
,
en = 
L
L
nT
d
K p
2
)
(
+
−
,

200
Fuzzy PID Controllers •• 5
vp = 
L
L
nT
v
Kd
2
)
(
+
,
vn = 
L
L
nT
v
Kd
2
)
(
+
−
,
we obtain
∆u(nT) = 
)]
(
2
[2
nT
d
K
L
L
p
−
 [Kpd(nT) – Kdv(nT)].
Here, we note that d(nT) ≥ 0 in regions IC1 and IC2.
In the same way, one can verify that in regions IC5 and IC6,
∆u(nT) = 
)]
(
2
[2
nT
d
K
L
L
p
−
 [Kpd(nT) – Kdv(nT)],
where it should be noted that d(nT) ≤ 0 in regions IC5 and IC6.
Therefore, by combining the above two formulas, we arrive at the
following result for the four regions IC1, IC2, IC5, and IC6:
∆u(nT) = 
]|)
(
|
2
[2
nT
d
K
L
L
p
−
 [Kpd(nT) – Kdv(nT)],
which is (5.16). Similarly, if Kpd(nT) and Kdv(nT) are located in the regions
IC3, IC4, IC7, and IC8, we have
Kp | d(nT) | ≤Kd | v(nT) | ≤ L,
and, in this case,
∆u(nT) = 
]|)
(
|
2
[2
nT
d
K
L
L
d
−
 [Kpd(nT) – Kdv(nT)],
which is (5.17). Finally, in the regions IC9-IC20, we have the corresponding
formulas shown as in (5.18)-(5.24).
To this end, we have determined all the control rules and formulas for the
fuzzy PID controller, with the control law (5.26) and the fuzzy control action
∆u(nT) calculated by (5.16)-(5.24) according to the different locations in
Figure 5.9 of the error signal Kpd(nT) and the rate of the change of the error
signal Kdv(nT). The initial conditions for the overall control system are the
following natural values: for the fuzzy control action ∆u(0) = 0, for the system 
output, y(0)= 0, for the original error and rate signals, e(0) = r (the set-point)
and v(0) = 0, respectively, as shown in (5.25).
Finally, we remark that in the steady-state situation, |e(nT)| = 0, so that
|v(nT)| = |d(nT)| = 0 in the denominators of the coefficients of ∆u(nT). Thus,
we obtain the steady-state relations between the conventional PD control gains 
c
d
K and
c
p
K and the fuzzy PD control gain Kp and Kd as follows:
c
d
K  = 
4
d
uK
K
and
c
p
K  = 
4
p
uK
K
.
(5.28)
Example 5.3. In order to compare the fuzzy PD controller with the
conventional one, we first consider a first-order linear system with transfer
function
H(s) = 
1
1
+
s
,

5 •• Fuzzy PID Controllers
201
and the reference (set-point) r = 10.0. For this sytem, the fuzzy controller
parameters are: T = 0.1, Kd = 0.5, Kp = 0.5, Ku = 1.0, and L = 361.0. The
control performance is shown in Figure 5.11.
We then consider a second-order linear system with transfer function
H(s) = 
3
4
1
2
+
+ s
s
,
and the reference (set-point) r = 10.0. The system response, controlled by the
fuzzy PD controller, is shown in Figure 5.12. The controller parameters are T
= 0.1, Kp = 0.51, Kd = 0.02, Ku = 0.232, and L = 1000.0.
In the above two cases, both conventional and fuzzy PD controllers work
equally well.
To show one more case of the second-order linear system, consider one
with the transfer function
H(s) = 
)
100
(
1
+
s
s
,
which is only marginally stable. This time, let’s make it more difficult by
setting the reference as a ramp signal, r(t) = t. The controller parameters used 
are T = 0.01, Kp = 25.0, Kd = –50.0, Ku = 0.5, and L = 3000.0, and the tracking 
tolerance is 5% of the steady-state error. For this example, it is easy to verify
that the steady-state error for the conventional PD controller is given
analytically by
ess(t) = 
c
p
K
100 .
Therefore, we have to use a high gain of 
c
p
K  = 2000.0 (along with 
c
d
K  =
10.0) to obtain specified performance (of 5% steady-state tracking error). The 
fuzzy control result is shown in Figure 5.13, where the solid curve is the set-
point while the dashed curve is the system output. This result demonstrates the 
advantage of the fuzzy PD controller over the conventional one (the former
uses very small control gains) even for a second-order linear process.
Next, consider a lower-order linear system with time-delay, with transfer
function
H(s) = 
2)1
100
(
1
+
s
e–3s.
The comparison is shown in Figure 5.14. The conventional PD controller,
with
c
p
K  = 66.0, 
c
d
K = 25.0, and T = 0.1, produces the solid curve. On the
contrary, the fuzzy PD controller, with T = 0.1, Kp = 49.3, Kd = 5.3, Ku = 0.8, 
and L = 19.0, yields the dashed curve in the same figure.
Finally, the conventional and fuzzy PD controllers are compared using two 
nonlinear systems. The first one has the simple nonlinear model
)
(t
y&
 = 0.0001 |y(t)| + u(t).
We used two different references: the constant set-point r = 1.0 and the ramp
signal r(t) = t. For the constant set-point case, the fuzzy PD controller has the 

202
Fuzzy PID Controllers •• 5
parameters T = 0.1, Kp = 19.5, Kd = 0.5, Ku = 0.1, and L = 20.0. The result is 
shown in Figure 5.15(a). The conventional PD controller, on the other hand,
cannot handle this nonlinear system no matter how one changes its two
constant gains. One control performance is shown in Figure 5.15(b), with 
c
p
K
= 3.0, 
c
d
K = 0.1, and T = 0.1. For the ramp signal reference case, the fuzzy PD 
controller produces a good tracking result with very small transient oscillation, 
shown in Figure 5.15(c), where Kp = 19.0, Kd = 0.5, Ku = 0.1, L = 40.0, and T
= 0.1. However, although the conventional PD controller also performs well
after a long transient period, as shown in Figure 5.15(d), its transient behavior 
is poorer (see Figure 5.15(e)), as compared to the fuzzy controller (Figure
5.15(c)).
The second nonlinear example is shown in Figure 5.16, where the system
is described by
)
(t
y&
 = –y(t) + 0.5y2(t) + u(t)
with the constant set-point r = 2.0. The fuzzy controller is designed with Kp = 
41.9, Kd = 15.4, Ku = 0.1, L = 239.0, and T = 0.1, which produces the tracking 
response shown in Figure 5.16. However, no matter how one adjusts the two
constant gains of the conventional PD controller, it does not show any
reasonable tracking results.
0
2.5
5
7.5
10
0
100
200
300
400
500
Figure 5.11 Output of a first-order linear fuzzy PD control system.

5 •• Fuzzy PID Controllers
203
0
0.5
1
1.5
2
2.5
3
0
5
10
15
20
25
30
Figure 5.13 Output of a second-order linear fuzzy PD control system.
0
2.5
5
7.5
10
12.5
0
500
1000
1500
Figure 5.12 Output of a second-order linear fuzzy PD control system.

204
Fuzzy PID Controllers •• 5
0
0.5
1
1.5
2
0
500
1000
1500
2000
2500
3000
3500
4000
4500
Figure 5.14 Comparison of outputs for a second-order linear fuzzy PD control 
system with a time delay.
0
0.25
0.5
0.75
1
1.25
0
100
200
300
400
500
Figure 5.15(a)
Output of a nonlinear fuzzy PD control system with a constant 
set-point.

5 •• Fuzzy PID Controllers
205
-2.5E+38
-2E+38
-1.5E+38
-1E+38
-5E+37
0
5E+37
1E+38
0
100
200
300
400
500
Figure 5.15(b)
Output of a nonlinear conventional PD control system (with a
constant set-point).
0
10
20
30
40
50
0
100
200
300
400
500
Figure 5.15(c)
Output of a nonlinear fuzzy PD control system (with a ramp
set-point).

206
Fuzzy PID Controllers •• 5
0
100
200
300
400
500
100
200
300
400
500
Figure 5.15(d)
Steady-state output of a nonlinear conventional PD control
system (with a ramp set-point).
-1.25E+38
-1E+38
-7.5E+37
-5E+37
-2.5E+37
0
2.5E+37
0
100
200
300
400
500
Figure 5.15(e)
Transient output of a nonlinear conventional PD control
system (with a ramp set-point).

5 •• Fuzzy PID Controllers
207
B. Fuzzy PI Controller
Design of the fuzzy PI controller is similar to that for the fuzzy PD
controller, and will be introduced briefly in this subsection.
The overall PI controller system is shown in Figure 5.17 (see Figure 5.6).
In Figure 5.17, we let Kp = 
P
~K and Ki = 
I
~K , as mentioned before. The “fuzzy 
controller” works in a way similar to that of the fuzzy PD controller. We first
decompose the plane with a scalar L > 0 into twenty input-combination (IC)
regions for the inputs Kie(nT) and Kpv(nT), where v(nT) = T
1 [e(nT)–e(nT–T)],
as shown in Figure 5.18. Here, Kie(nT) and Kpv(nT) are called the error signal 
and the rate of change of error signal, respectively, for convenience. Then,
according to the location of the inputs (Kie(nT), Kpv(nT)) to the “fuzzy
controller” block, the corresponding incremental control output are computed
by the following formulas:
∆u(nT) =
|)
)
(
|
2
(
2
)]
(
)
(
[
nT
e
K
L
nT
v
K
nT
e
K
L
i
p
i
−
+
,
in IC1, IC2, IC5, IC6, (5.29)
=
|)
)
(
|
2
(
2
)]
(
)
(
[
nT
e
K
L
nT
v
K
nT
e
K
L
p
p
i
−
+
,
in IC3, IC4, IC7, IC8, (5.30)
= 2
1 [ L + Kpv(nT) ],
in IC9, IC10,
(5.31)
0
0.5
1
1.5
2
2.5
0
50
100
150
200
Figure 5.16 Output of a highly nonlinear PD control system.

208
Fuzzy PID Controllers •• 5
= 2
1 [ L + Kie(nT) ],
in IC11, IC12,
(5.32)
= 2
1 [ –L + Kpv(nT) ],
in IC13, IC14,
(5.33)
= 2
1 [ –L + Kie(nT) ],
in IC15, IC16,
(5.34)
= 0,
in IC18, IC20,
(5.35)
= –L,
in IC17,
(5.36)
= L,
in IC19.
(5.37)
Then, the control action output of the fuzzy PI controller, which is the control 
input to the system (plant, process), is given by
u(nT) = u(nT–T) + Ku∆u(nT),
(5.38)
where Ku is an adjustable constant control gain, which may be fixed to be Ku = 
T to simplify the design (but one will then lose a degree of freedom in the
tuning of the controller).
In a comparison of the fuzzy PI and PD control laws (5.38) and (5.26), one 
can find the main difference: there is a minus sign in front of u(nT–T) in the
fuzzy PD controller. This minus sign makes the rule base design quite
different. Of course, their incremental controls ∆u(nT) are given by formulas
(5.16)-(5.24) and (5.29)-(5.37), respectively, which are also different.
Similarly, the initial conditions for the fuzzy PI controller are the following 
natural ones:
y(0) = 0,
∆u(0) = 0,
e(0) = r,
v(0) = 0.
(5.39)
–
–
–
+
y(nT)
u(nT)
∆u(nT)
d(nT)
e(nT)
r(nT)
z –1
T
1
T
1
Kp
Ki
fuzzy
controller
Ku
z –1
system
+
+
Figure 5.17
The fuzzy PI controller.

5 •• Fuzzy PID Controllers
209
A verification of the above fuzzy PI controller formulas can be carried out 
in a step-by-step procedure by mimicking the fuzzy PD controller’s design
given in the last subsection. This will be discussed in more detail in the next
subsection within the PI+D controller.
We remark once again that the nine pieces of formulas (5.29)-(5.37) are
conventional (crisp) formulas. So the “fuzzy controller” block as well as the
entire fuzzy PI controller shown in Figure 5.17 are conventional controllers:
the overall control system works in the conventional (crisp) manner despite
the name “fuzzy.” Therefore, this fuzzy PI controller can be used to replace
the conventional digital PI controller anywhere. A control engineer can
operate it without knowledge of fuzzy mathematics, fuzzy logic, and fuzzy
control theory: what he needs is to tune the control gains and parameters: Kp,
Ki, Ku, and L.
Finally, we remark that computer simulations for comparison of the fuzzy
and conventional PI controllers show similar results to those demonstrated in
Example 4.3. More simulations will be shown in the next subsection.
C. Fuzzy PI+D Controller
The conventional analog PI+D controller is shown in Figure 5.2(d).
Similar to the fuzzy PD controller design discussed in Section II.A, we will
first discretize it by applying the bilinear transform, then design the fuzzy PI
and a fuzzy D controller separately, and finally combine them together as a
whole in the closed-loop system.
In so doing, the design of the fuzzy PI controller is the same as that
mentioned briefly above, but the design of the fuzzy D controller is rather
different.
Starting with the conventional analog PI+D control system shown in
Figure 5.19, the output of the conventional analog PI controller in the
frequency s-domain, as can be verified easily from Figure 5.3, is given by
−L
−L
L
L
Kie(nT)
Kpv(nT)
IC1
IC2
IC3
IC4
IC5
IC6
IC7
IC8
IC9
IC10
IC11
IC12
IC13
IC14
IC15
IC16
IC17
IC18
IC19
IC20
Figure 5.18
Regions of the “fuzzy controller” input-combination values.

210
Fuzzy PID Controllers •• 5
UPI(s) = 
⎥
⎥
⎦
⎤
⎢
⎢
⎣
⎡
+ s
K
K
c
i
c
p
E(s),
where
c
p
K  and 
c
i
K  are the proportional and integral gains, respectively, and
E(s) is the tracking error signal, after taking the Laplace transform (with zero
initial conditions). This equation can be transformed into the discrete version
by applying the bilinear transformation (5.8), which results in the following
form:
UPI(z) = 
⎥
⎥
⎦
⎤
⎢
⎢
⎣
⎡
−
+
−
−1
1
2
z
T
K
T
K
K
c
i
c
i
c
p
E(z).
Letting
Kp = 
c
p
K
–
2
T
K c
i
and
Ki = 
c
i
K T,
(5.40)
and then taking the inverse z-transform, we obtain
uPI(nT) – uPI(nT–T) = Kp[ e(nT) – e(nT–T) ] + KiTe(nT).
Dividing this equation by T gives
∆uPI(nT) = Kpv(nT) + Kie(nT),
(5.41)
where
∆uPI(nT) = 
T
T
nT
u
nT
u
)
(
)
(
PI
PI
−
−
,
v(nT) = 
T
T
nT
e
nT
e
)
(
)
(
−
−
.
It follows that
uPI(nT) = uPI(nT–T) + T∆uPI(nT).
In the design of the fuzzy PI controller to be discussed later, we will replace
the coefficient T by a fuzzy control gain Ku,PI, so that
uPI(nT) = uPI(nT–T) + Ku,PI∆uPI(nT).
(5.42)
The D controller in the PI+D control system, as shown in Figure 5.19, has
y as its input and uD as its output. It is clear that
UD(s) = s
c
d
K Y(s),
where
c
d
K is the control gain and Y(s) is the output signal. Under the bilinear
transformation, the above equation becomes
PI
system
r
e
uPI
y
+
−
+
−
D
uD
uPID
Figure 5.19
The conventional continuous-time PI+D control system.

5 •• Fuzzy PID Controllers
211
UD(z) = T
2
1
1
+
−
z
z
c
d
K Y(z),
or
UD(z) = 
c
d
K
T
2
1
1
1
1
−
−
+
−
z
z
Y(z).
Consequently,
uD(nT) + uD(nT–T) = 
T
K c
d
2
[ y(nT) – y(nT–T) ].
Then, dividing this equation by T yields
∆uD(nT) = Kd∆y(nT)
(5.43)
where
∆uD(nT) = 
T
T
nT
u
nT
u
)
(
)
(
D
D
−
+
is the incremental control output of the fuzzy D controller,
∆y(nT) = 
T
T
nT
y
nT
y
)
(
)
(
−
−
is the rate of change of the output y, and
Kd = 
T
K c
d
2
.
(5.44)
As will be further described in the fuzzification step below, we modify (5.43)
by adding the signal Kyd(nT) to its right-hand side, where
yd(nT) = y(nT) – r(nT) = – e(nT),
e(nT)
+
v(nT)
T
1
z
−1
z
−1
∆uPI(nT)
−
+
−
+
+
r(nT)
KI
−
+
KP
Ku,PI
uPI(nT)
system
y(nT)
−
+
z
−1
T
1
∆y(nT)
KD
∆uD(nT)
Ku,D
z
−1
uD(nT)
−
+
−
−
Figure 5.20
The conventional digital PI+D control system.

212
Fuzzy PID Controllers •• 5
in order to obtain correct control rules. Thus, (5.43) becomes
∆uD(nT) = Kd∆y(nT) + Kyd(nT).
We always use K = 1 to simplify the discussion in this section, which is not
necessary in a real design. Note that from (5.43)
∆uD(nT) = 
T
T
nT
u
nT
u
)
(
)
(
D
D
−
+
,
so that
uD(nT) = – uD(nT–T) + T∆uD(nT).
When ∆uD(nT) becomes a fuzzy control action later in the design, we use Ku,D
as this fuzzy control gain (which will be determined later in the design). Thus, 
we can rewrite the above formula as
uD(nT) = – uD(nT–T) + Ku,D∆uD(nT).
(5.45)
Finally, the overall fuzzy PI+D control law can be obtained by
algebraically summing the fuzzy PI control law (5.42) and fuzzy D law (5.45) 
together. The result is
uPID(nT) = uPI(nT) – uD(nT),
or more precisely,
uPID(nT) = uPI(nT–T) + Ku,PI∆uPI(nT) +
uD(nT–T) – Ku,D∆uD(nT).
(5.46)
This equation will be referred to as the fuzzy PI+D control law below.
e(nT)
+
v(nT)
T
1
z
−1
z
−1
∆uPI(nT)
−
+
−
r(nT)
KI
−
+
KP
Ku,PI
uPI(nT)
system
y(nT)
z
−1
T
1
∆y(nT)
KD
Ku,D
z
−1
−
+
fuzzy (PI)
controller
uPID(nT)
fuzzy (D)
controller
–1
+
−
Figure 5.21
The fuzzy PI+D control system.

5 •• Fuzzy PID Controllers
213
The overall conventional PI+D control system is shown in Figure 5.20. To 
this end, the fuzzy PI and fuzzy D controllers will be inserted into Figure 5.20, 
resulting in the configuration shown in Figure 5.21.
In summary, the fuzzy PI+D control system is implemented by Figure
5.21, in which there are five constant control gains that can be tuned: Ki, Kp,
Ku,PI, KD, and Ku,D, where one may set Ku,PI = Ku,D = T to simplify the design.
In this implementation, the two incremental control actions ∆uPI(nT) and
∆uD(nT) have the analytical formulas as shown below.
Similar to Figure 5.18, we first divide the plane as twenty regions of the
“fuzzy (PI) controller” input-combination (IC) for (Kie(nT),Kpv(nT)), as
shown in Figure 5.22.
Then, the incremental control of the fuzzy PI controller is calculated by
formulas (5.29)-(5.37), namely,
∆uPI(nT) =
|)
)
(
|
2
(
2
)]
(
)
(
[
nT
e
K
L
nT
v
K
nT
e
K
L
i
p
i
−
+
, in IC1, IC2, IC5, IC6, (5.47)
=
|)
)
(
|
2
(
2
)]
(
)
(
[
nT
e
K
L
nT
v
K
nT
e
K
L
p
p
i
−
+
, in IC3, IC4, IC7, IC8, (5.48)
= 2
1 [ L + Kpv(nT) ],
in IC9, IC10,
(5.49)
= 2
1 [ L + Kie(nT) ],
in IC11, IC12,
(5.50)
= 2
1 [ –L + Kpv(nT) ],
in IC13, IC14,
(5.51)
= 2
1 [ –L + Kie(nT) ],
in IC15, IC16,
(5.52)
= 0,
in IC18, IC20,
(5.53)
= –L,
in IC17,
(5.54)
= L,
in IC19.
(5.55)
−L
−L
L
L
Ki e(nT)
KP v(nT)
IC1
IC2
IC3
IC4
IC5
IC6
IC7
IC8
IC9
IC10
IC11
IC12
IC13
IC14
IC15
IC16
IC17
IC18
IC19
IC20
Figure 5.22
Regions of the “fuzzy (PI) controller” input-combination values.

214
Fuzzy PID Controllers •• 5
For the fuzzy D controller, the twenty regions of the input-combination are 
shown in Figure 5.23. The incremental control of the fuzzy D controller is
calculated by the following formulas:
∆uD(nT) =
|)
)
(
|
2
(
2
)]
(
)
(
[
nT
y
K
L
nT
y
K
nT
Ky
L
d
d
d
−
∆
+
, in IC1, IC2, IC5, IC6,(5.56)
=
|)
)
(
|
2
(
2
)]
(
)
(
[
nT
y
K
L
nT
y
K
nT
Ky
L
d
d
d
d
−
∆
+
,
in IC3, IC4, IC7, IC8,(5.57)
= 2
1 [ L – Kd∆y(nT) ],
in IC9, IC10,
(5.58)
= 2
1 [ –L + Kyd(nT) ],
in IC11, IC12,
(5.59)
= 2
1 [ –L – Kd∆y(nT) ],
in IC13, IC14,
(5.60)
= 2
1 [ L + Kyd(nT) ],
in IC15, IC16,
(5.61)
= 0,
in IC18, IC20,
(5.62)
= –L,
in IC17,
(5.63)
= L,
in IC19.
(5.64)
−L
−L
L
L
K yd(nT)
Kd v(nT)
IC1
IC2
IC3
IC4
IC5
IC6
IC7
IC8
IC9
IC10
IC11
IC12
IC13
IC14
IC15
IC16
IC17
IC18
IC19
IC20
Figure 5.23
Regions of the “fuzzy (D) controller” input-combination values.
1
e, v
negative
0.5
0
L
−L
e, v
positive
e, v
1
output
negative
0.5
0
L
−L
output
positive
output
zero
∆uPI(nT)
Figure 5.24
Input membership
functions for the PI
component.
Figure 5.25 Output membership
functions for the PI
component.

5 •• Fuzzy PID Controllers
215
We next give detailed derivations of the above formulas of the fuzzy PI
and D controllers.
We first fuzzify the PI and D components of the PI+D control system
individually and then establish the desired fuzzy control rules for each of them 
taking into consideration the interconnected PI+D fuzzy control law given in
equation (5.46). The input and output membership functions of the PI
component are shown in Figures 5.24 and 5.25, respectively.
The fuzzy PI controller employs two inputs: the error signal e(nT) and the
rate of change of the error signal v(nT). The fuzzy PI controller has a single
output, ∆uPI(nT), as shown in Figure 5.21, where the constant L > 0 is a
tunable parameter (which can also be fixed after being determined).
Using these membership functions, the following control rules are
established for the fuzzy PI controller:
R(1):
IF e = en AND v = vn THEN PI-output =on.
R(2):
IF e = en AND v = vp THEN PI-output =oz.
R(3):
IF e = ep AND v = vn THEN PI-output =oz.
R(4):
IF e = ep AND v = vp THEN PI-output =op.
In these rules, e := r – y is the error, v = e&  = 0 – y& = – y&  is the rate of change 
of the error, “PI-output” is the fuzzy PI control output ∆uPI(nT), “ep” means
“error positive,” “op” means “output positive,” etc. Also, AND is the logical
AND operator defined as before.
If we look at the fuzzy control law for the D component, equation (5.43),
the only information it contains that is relevant to the output performance is
∆y(nT). Based on this signal alone, it is impossible to come up with a useful
fuzzy control law. We therefore look for another control signal that can be
used in conjunction with ∆y(nT), to provide information about the output
(above or below the reference signal). For this purpose, a logical and natural
choice is the negative error signal
yd(nT) = – e(nT).
(5.65)
Here, it is important to observe that yd positive (resp. negative) means that the 
system output y is above (resp. below) the reference r. This yd control signal is 
implemented as shown by the path with the –1 block in Figure 5.21 (compared 
with Figure 5.20).
1
yd, ∆∆y
negative
0.5
0
L
−L
yd, ∆∆y
positive
yd, ∆∆y
1
output
negative
0.5
0
L
−L
output
positive
output
zero
∆uD(nT)
Figure 5.26
Input membership
functions for the D
component.
Figure 5.27 Output membership
functions for the D
component.

216
Fuzzy PID Controllers •• 5
The input and output membership functions for the fuzzy D controller are
shown in Figures 5.26 and 5.27, respectively. 
Similarly, from the membership functions of the fuzzy D controller, the
following control rules are used for the D component:
R(5):
IF yd = ydp AND ∆y = ∆yp THEN D-output =oz.
R(6):
IF yd = ydp AND ∆y = ∆yn THEN D-output =op.
R(7):
IF yd = ydn AND ∆y = ∆yp THEN D-output =on.
R(8):
IF yd = ydn AND ∆y = ∆yn THEN D-output =oz.
In the above rules, “D-output” is the fuzzy D control output ∆uD(nT), and the
other terms are defined similar to the PI components.
These eight rules altogether yield the control actions for the fuzzy PI+D
control law.
Formulation of these rules can be understood as follows. For Rule 1 (R(1)):
if we look at this rule for the PI controller, condition “en” (error is negative)
implies that the system output, y, is above the set-point, and “vn” (rate of error 
is negative) implies y&  > 0 (meaning that the controller at the previous step is
driving the system output to move upward). Since the ∆uPI(nT) component of
formula (5.46) contains more control terms with gain parameters than the D
controller, we set this term to be negative and set the ∆uD(nT) component to
be zero. Thus, the combined control action will drive the system output to
move downward by Rules 1 and 5 of both controllers.
We note that one could have set the output of the D controller to be
positive in order to drive the output to move downward faster. However,
having both controllers’ outputs being nonzero at the same time will
complicate the design of the controller. Computer simulations have
demonstrated that the simple design described above performs sufficiently
well in all numerical examples tested, so more sophisticated design is not
discussed here.
Similarly, for Rule 2 (R(2)), since the output is above the set-point and is
moving downward, we set the “larger” component of formula (5.46), namely,
the term ∆uPI(nT), to be zero, and set the “smaller” component ∆uD(nT) to be
positive. Thus, the combined controller will tend to drive the system output to 
move downward faster by the combined action of these two rules.
Rules 3 and 4 are similarly determined.
In the defuzzification step, for both fuzzy PI and D controllers, the same
weighted average formula is employed to defuzzify the incremental control of
the fuzzy control law:
∆u(nT) = 
∑
∑
×
)
input
of
value
membership
(
)
output
of
value
ing
correspond
input
of
value
membership
(
(5.66)
For the fuzzy PI controller, the value ranges of the two inputs, the error,
and the rate of change of the error are actually decomposed into twenty
adjacent input-combination (IC) regions, as shown in Figure 5.22. This figure

5 •• Fuzzy PID Controllers
217
is understood as follows: We put the membership function of the error signal
(given by the curves for e in Figure 5.24) over the horizontal Kie(nT)-axis on
Figure 5.22, and put the membership function of the rate of change of the
error signal (given by the same curves in Figure 5.24 for v) over the vertical
Kpv(nT)-axis on Figure 5.22. These two membership functions then overlap
and form the third-dimensional picture (which is not shown in Figure 5.22)
over the two-dimensional regions shown in Figure 5.22. When we look at
region IC1, for example, if we look upward to the Kie(nT)-axis, we see the
domain [0,L] and the membership function (in the third dimension) over [0,L]
of the error signal; if we look leftward to the Kpv(nT)-axis, we see the domain 
[–L,0] and the membership function (in the third dimension) over [–L,0] of the 
rate of change of the error signal. This situation is completely analogous to the 
analysis of the fuzzy PD controller studied in Section II.A.
The control rules for the fuzzy PI controller (R(1)-R(4)), with membership
functions and IC regions together, are used to evaluate appropriate fuzzy
control formulas for each region.
In doing so, we consider the locations of the error Kie(nT) and the rate
Kpv(nT) in the regions IC1 and IC2 (see Figure 5.22). Let us look at region
IC1, for example, where we have e > 0.5 > v(nT) (see Figure 5.24). Hence, the 
logical AND used in (R(1)) leads to
{“error = e AND rate = v”} = min{ e, v } = e,
so that Rule 1 (R(1)) yields
R(1):
⎩
⎨
⎧
.
is
ue
output val
ing
correspond
the
;
is
value
membership
input
selected
the
on
en
Similarly, in region IC1, Rules 2-4, (R(2))-(R(4)), are obtained as
R(2):
⎩
⎨
⎧
.
is
ue
output val
ing
correspond
the
;
is
value
membership
input
selected
the
oz
en
R(3):
⎩
⎨
⎧
.
is
ue
output val
ing
correspond
the
;
is
value
membership
input
selected
the
oz
vn
R(4):
⎩
⎨
⎧
.
is
ue
output val
ing
correspond
the
;
is
value
membership
input
selected
the
op
vp
It can be verified that the above are true for the two regions IC1 and IC2.
Thus, in regions IC1 and IC2, it follows from the defuzzification formula
(5.66) that
∆u(nT) = 
vp
vn
en
en
op
vp
oz
vn
oz
en
on
en
+
+
+
×
+
×
+
×
+
×
.
It is very important to note that if one follows the above procedure to work
through the two cases, then it is found that both the last two cases give the
same result of en (i.e., the two en in the above formula are not the misprint of 
en and ep!). To this end, by applying op = L, on = –L, oz = 0 (obtained from

218
Fuzzy PID Controllers •• 5
Figure 5.25), and the following straight line formulas from the geometry of
the membership functions associated with Figure 5.22:
ep = 
L
L
nT
e
Ki
2
)
(
+
,
en = 
L
L
nT
e
Ki
2
)
(
+
−
,
vp = 
L
L
nT
v
K p
2
)
(
+
,
vn = 
L
L
nT
v
K p
2
)
(
+
−
,
we obtain
∆uPI(nT) = 
)]
(
2
[2
)]
(
)
(
[
nT
e
K
L
nT
v
K
nT
e
K
L
i
p
i
−
+
.
Here, we note that e(nT) ≥ 0 in regions IC1 and IC2. In the same way, one can 
verify that in regions IC5 and IC6,
∆uPI(nT) = 
)]
(
2
[2
)]
(
)
(
[
nT
e
K
L
nT
v
K
nT
e
K
L
i
p
i
+
+
,
where it should be noted that e(nT) ≤ 0 in regions IC5 and IC6. Thus, by
combining the above two formulas, we arrive at the following control formula 
for the four regions IC1, IC2, IC5, and IC6:
∆uPI(nT) = 
|]
)
(
|
2
[2
)]
(
)
(
[
nT
e
K
L
nT
v
K
nT
e
K
L
i
p
i
−
+
.
Working through all regions in the same way, we obtain the PI control
formulas (5.47)-(5.55) for the twenty IC regions.
Similarly, defuzzification of the fuzzy D controller follows the same
procedure as described above for the PI component, except that the input
signals in this case are different. The IC combinations of these two inputs are
decomposed into twenty similar regions, as shown in Figure 5.23.
Similarly, by applying the value op = L, on = –L, oz = 0, and the following 
straight line formulas obtained from the geometry of Figure 5.27:
ydp = 
L
L
nT
Kyd
2
)
(
+
,
ydn = 
L
L
nT
Kyd
2
)
(
+
−
,
∆yp = 
L
L
nT
y
Kd
2
)
(
+
∆
,
∆yn = 
L
L
nT
y
Kd
2
)
(
+
∆
−
,
we obtain the D control formulas (5.56)-(5.64) for the twenty IC regions.
Note that the constant K that multiplies the signal yd(nT) is used as a
parameter for generality here, and in the derivation of ∆uD(nT). Although it
could be used as a control gain, its value is permanently set to one throughout 
the computer simulations shown in the next example.
Example 5.4. We first apply the fuzzy PI+D controller to a lower-order
linear system, to see how well it performs for such simple cases. Recall that
the conventional PI+D controller is designed for linear systems, for which it
works very well. We show that the fuzzy PI+D controller is as good as, if not
better than, the conventional one for such lower-order linear systems.
The first example is a first-order linear system, with transfer function

5 •• Fuzzy PID Controllers
219
H(s) = 
1
1
+
s
and with controller parameters T = 0.1, K = 1.0, Kp = 1.2, Ki = 0.1, Ku,PI = 0.2, 
Ku,D = 0.01, L = 360.0. The set-point is r = 5.0. The response of the fuzzy
PI+D controller for a step input is shown in Figure 5.28.
The second example is a second-order linear system with transfer function
H(s) = 
3
4
1
2
+
+ s
s
,
where the controller parameters are T = 0.01, K = 1.0, Kp = 8.0, Kd = 0.01, Ki = 
1.0, Ku,PI = 0.2, Ku,D = 0.01, L = 1000.0, and the set-point is r = 5.0. The
response of the fuzzy PI+D controller is shown in Figure 5.29.
Finally, we compare the performance of both the conventional and the
fuzzy PI+D controllers, using two nonlinear systems. Although the fuzzy
PI+D controller has the same linear structure as the conventional PI+D
controller, the fuzzy PI+D gains are nonlinear with self-tuning capability and,
therefore, have better performance in this simulation and in general.
The first nonlinear system has the following simple model:
)
(t
y&
= 0.0001 |y(t)| + uPID(t),
with fuzzy PI+D parameters T = 0.1, K = 1.0, Kp = 1.5, Kd = 0.1, Ki = 2.0, Ku,PI
= 0.11, Ku,D = 1.0, L = 45.0, and the set-point is r = 5.0. The result is shown in 
Figure 5.30. On the contrary, the conventional PI+D controller is unable to
track the set-point, no matter how one changes its parameters. A typical
response of the conventional PI+D controller is shown in Figure 5.31, with
parameters T = 0.1, 
c
p
K = 19.5, 
c
i
K = 1.0, for r = 5.0.
The second nonlinear system used in the simulation is
)
(t
y&
= y(t) + 
)
(t
y
 + uPID(t).
In this case, the fuzzy PI+D parameters are T = 0.1, K = 1.0, Kp = 2.0, Kd =
1.942, Ki = 1.0, Ku,PI = 0.1, Ku,D = 0.27, L = 350.0, and the set-point r = 5.0.
The response of this fuzzy PI+D control system to a step input is shown in
Figure 5.32. The conventional PI+D controller, however, cannot yield any
reasonable response, no matter how one adjusts its gains. A typical response
of the conventional PI+D controller (with parameters T = 0.1,
c
p
K = 2.0, 
c
i
K =
1.0, and r = 5.0) is shown in Figure 5.33. We remark that this result is due to
the fact that the conventional PI+D controller usually has difficulties in
controlling higher-order and time-delayed linear systems as well as nonlinear
systems, because they are designed only for lower-order linear systems, for
which they can work very well as has been widely experienced.

220
Fuzzy PID Controllers •• 5
0
1
2
3
4
5
6
0
5
10
15
20
25
Figure 5.28 Output of a first-order linear fuzzy PI+D control system.
0
1
2
3
4
5
6
0
50
100
150
200
Figure 5.29 Output of a second-order linear fuzzy PI+D control system.

5 •• Fuzzy PID Controllers
221
0
1
2
3
4
5
6
0
20
40
60
80
100
Figure 5.30 Output of a nonlinear fuzzy PI+D control system.
-2.5E+38
-2E+38
-1.5E+38
-1E+38
-5E+37
0
5E+37
1E+38
0
20
40
60
80
100
Figure 5.31 Output of a nonlinear conventional PI+D control system.

222
Fuzzy PID Controllers •• 5
0
1
2
3
4
5
6
0
20
40
60
80
100
Figure 5.32 Output of a nonlinear fuzzy PI+D control system.
0
1E+38
2E+38
3E+38
0
50
100
150
200
250
300
Figure 5.33 Output of a nonlinear conventional PI+D control system.

5 •• Fuzzy PID Controllers
223
III.
FUZZY PID CONTROLLERS: STABILITY ANALYSIS
In this section, we analyze the stability of the fuzzy PI, PD, and PI+D
control systems designed and studied in the last section.
Recall the Lyapunov asymptotic stability for fuzzy modeling discussed in
Chapter 3, for both discrete-time and continuous-time fuzzy dynamic systems.
In order to show another important type of stability, namely, the bounded-
input bounded-output (BIBO) stability of a control system, we introduce the
Small Gain Theorem in this section and discuss the BIBO stability of the
fuzzy PI, PD, and PI+D control systems. We first note that differing from the
Lyapunov asymptotic stability, which is usually local (in a neighborhood of an 
equilibrium point), the BIBO stability is global and is particularly suitable for
nonlinear systems described by input-output maps. We should also note that
both the Lyapunov asymptotic stability and the BIBO stability analyses
provide conservative sufficient conditions, especially for nonlinear systems.
From a theoretical point of view, the larger the region of stability can be
found, the better the result is. However, from the design point of view,
relatively conservative stability region is actually safer and more reliable in
applications. BIBO stability theory turns out to be appropriate for this
purpose.
A. BIBO Stability and the Small Gain Theorem
Definition 5.1. A (linear or nonlinear) control system is said to be
bounded-input bounded-output (BIBO) stable if a bounded control input to the 
system always produces a bounded output through the system.
Here, the boundedness is defined in the norm (l2, l∞, etc.) of the function
space which we consider in the design. 
Let S denote a (linear or nonlinear) system. S may be considered as a
mapping which maps a control input, u(t), to the corresponding system output 
y(t), as shown in Figure 5.34, where
S: u(t) →y(t)
or
y(t) = S{u(t)}.
Recall the standard Lp-spaces of signals:
1 ≤p < ∞:
Lp = {f(t)| ∫
∞
0
|)
(
|
dt
t
f
p
< ∞ },
p = ∞:
Lp = {f(t)|
∞
<
≤t
ess
0
sup |f(t)| < ∞ },
y(t)
S
u(t)
Figure 5.34
Input-output relation of a system.

224
Fuzzy PID Controllers •• 5
where “ess” means “essential,” namely, the supirum holds except over a set of 
measure zero. For piecewise continuous signals, essential supirum and
supirum are the same, so “ess” can be dropped from the above.
Consider a nonlinear (including linear) feedback system shown in Figure
5.35, where for simplicity it is assumed that all signals u, e, y1, u2, e2, y2 ∈Rn.
It is clear from Figure 5.35 that
⎩
⎨
⎧
+
=
−
=
),
(
),
(
1
1
2
2
2
2
1
1
e
S
u
e
e
S
u
e
(5.67)
or, equivalently, 
⎩
⎨
⎧
−
=
+
=
).
(
),
(
1
1
2
2
2
2
1
1
e
S
e
u
e
S
e
u
(5.68)
For this system, we have the following so-called Small Gain Theorem,
which gives sufficient conditions under which a “bounded input” yields a
“bounded output,” where the norm || ⋅ || is the standard Euclidean norm
(“length” of a vector).
Theorem 5.1. Consider the nonlinear feedback system shown in Figure
5.35, which is described by the relationship (5.67)-(5.68). Suppose that there
exist constants L1, L2, M1, M2, with L1L2 < 1, such that
⎩
⎨
⎧
+
≤
+
≤
.
||
||
||
)
(
||
||,
||
||
)
(
||
2
2
2
2
2
1
1
1
1
1
e
L
M
e
S
e
L
M
e
S
(5.69)
Then, we have
⎪⎩
⎪⎨
⎧
+
+
+
−
≤
+
+
+
−
≤
−
−
).
||
||
||
||(
)
1(
||
||
),
||
||
||
||(
)
1(
||
||
2
1
1
1
1
2
1
2
1
2
1
2
2
2
2
1
1
2
1
1
M
L
M
u
L
u
L
L
e
M
L
M
u
L
u
L
L
e
(5.70)
Proof. It follows from
e1 = u1 – S2(e2)
that
|| e1 || ≤
|| u1 || + || S2(e2) ||
≤
|| u1 || + M2 + L2 || e2 ||.
Similarly, we have
|| e2 || ≤
|| u2 || + M1 + L1 || e1 ||.
Combining these two inequalities, we obtain
|| e1 || ≤
L1L2|| e1 || + || u1 || + L2 || u2 || + M2 + L2M1,
or, using the fact L1L2 < 1,
y1
S1
u1
S2
y2
u2
+
−
−
+
Figure 5.35
A nonlinear feedback system.

5 •• Fuzzy PID Controllers
225
|| e1 || ≤
(1–L1L2)–1( || u1 || + L2 || u2 || + M2 + L2M1 ).
The rest of the theorem follows immediately.
It is clear that the Small Gain Theorem is applicable to both continuous-
time and discrete-time systems, and to both SISO and MIMO systems. Hence, 
although its statement and proof are quite simple, it is very useful.
We next point out an interesting relation between the BIBO stability and
the Lyapunov asymptotic stability. It is clear that the asymptotic stability
generally implies the BIBO stability, but the reverse can also be true under
some conditions.
Consider a nonlinear system described by the following first-order vector-
valued ordinary differential equation:
⎩
⎨
⎧
=
−
=
,
)
0
(
),
),
(
(
)
(
)
(
0x
x
t
t
x
f
t
Ax
t
x&
(5.71)
with an equilibrium solution 
)
(t
x
= 0, where A is an n×n constant matrix
whose eigenvalues are assumed to have negative real parts, and f:Rn×R1→Rn is 
a real vector-valued integrable nonlinear function of t ∈ [0,∞). By adding and 
then subtracting the term Ax(t), a general nonlinear system can always be
written in this form. Let
⎪⎩
⎪⎨
⎧
=
τ
τ
−
=
∫
τ
−
),
),
(
(
)
(
,
)
(
)
(
)
(
0
)
(
t
t
x
f
x
y
d
y
e
t
u
t
x
t
t
(5.72)
with u(t) = eAtx0. Then we can implement system (5.72) by a feedback
configuration as depicted in Figure 5.36, where the error signal e(t) = x(t), the 
plant P(⋅)(t) = f(⋅,t), and the compensator C(⋅)(t) = ∫
τ
τ
⋅
τ
−
t
A
t
d
e
0
)
(
)
)(
(
.
Theorem 5.2. Consider the nonlinear system (5.72) and its associate
feedback configuration shown in Figure 5.36. Suppose that U = V =
Lp([0,∞),Rn), where 1 ≤ p ≤∞. Then, if the feedback system shown in Figure
5.36 is BIBO stable, then it is also asymptotically stable.
Proof. Since all eigenvalues of the constant matrix A have negative real
parts, we have
| etA x0 | ≤Me–αt
for some constants 0 < α, M < ∞ for all t ∈ [0,∞), so that |u(t)| = | etA x0 | → 0 
as t →∞. Hence, in view of the first equation defined above, i.e., x(t) = u(t) –
∫
τ
τ
τ
−
t
A
t
d
y
e
0
)
(
)
(
, if we can prove that
y
P
u
C
+
−
e
input space
U = Lp
output space
V = Lp
Figure 5.36
A feedback control system.

226
Fuzzy PID Controllers •• 5
v(t) := ∫
τ
τ
τ
−
t
A
t
d
y
e
0
)
(
)
(
→ 0
as
t →∞,
then it will follow that
| x(t) | = | u(t) – v(t) | → 0
as
t →∞.
To do so, write
v(t) = ∫
τ
τ
τ
−
2
/
0
)
(
)
(
t
A
t
d
y
e
 + ∫
τ
τ
τ
−
t
t
A
t
d
y
e
2
/
)
(
)
(
= ∫
τ
τ
−
τ
t
t
A
d
t
y
e
2
/
)
(
 + ∫
τ
τ
τ
−
t
t
A
t
d
y
e
2
/
)
(
)
(
.
Then, by the Hölder inequality we have
| v(t) | ≤∫
τ
τ
−
τ
t
t
A
d
t
y
e
2
/
)
(
 + ∫
τ
τ
τ
−
t
t
A
t
d
y
e
2
/
)
(
)
(
≤
q
t
t
q
A
d
e
/
1
2
/
|
|
⎥⎦
⎤
⎢⎣
⎡
τ
∫
τ
p
t
t
p d
t
y
/
1
2
/
|)
(
|
⎥⎦
⎤
⎢⎣
⎡
τ
τ
−
∫
+
q
t
t
q
A
t
d
e
/
1
2
/
)
(
|
|
⎥⎦
⎤
⎢⎣
⎡
τ
∫
τ
−
p
t
t
p d
y
/
1
2
/
|)
(
|
⎥⎦
⎤
⎢⎣
⎡
τ
τ
∫
≤
q
t
q
A
d
e
/
1
2
/
|
|
⎥⎦
⎤
⎢⎣
⎡
τ
∫
∞
τ
p
p d
t
y
/
1
0
|)
(
|
⎥⎦
⎤
⎢⎣
⎡
τ
τ
−
∫
∞
+
q
t
q
A
t
d
e
/
1
2
/
)
(
|
|
⎥⎦
⎤
⎢⎣
⎡
τ
∫
∞
τ
−
p
p d
y
/
1
0
|)
(
|
⎥⎦
⎤
⎢⎣
⎡
τ
τ
∫
∞
.
Since all eigenvalues of A have negative real parts and since the feedback
system is BIBO stable from U to V, so that y ∈V = Lp([0,∞),Rn), we have
∫
∞
τ
∞
→
τ
2
/
|
|
lim
t
q
A
t
d
e
 = 0
and
∫
∞
∞
→
τ
τ
2
/
|)
(
|
lim
t
p
t
d
y
 = 0.
Therefore, it follows that | v(t) | →∞ as t →∞, completing the proof of the
theorem.
B. BIBO Stability of Fuzzy PD Control Systems
We are now in a position to study the BIBO stability of the fuzzy PI, PD,
and PI+D control systems.
We first discuss in detail the fuzzy PD system. Return to the fuzzy PD
control system described in Figure 5.8.
We consider the general case where the system under control is nonlinear,
which will be denoted by N. Suppose that the fuzzy control law (5.26)

5 •• Fuzzy PID Controllers
227
together with the incremental control formula (5.16) are used, and let the
reference signal be r = r(nT) for generality. By defining
⎪⎪
⎪
⎪
⎩
⎪⎪
⎪
⎪
⎨
⎧
∆
−
−
=
=
=
=
=
=
)),
(
(
),
(
),
(
),
(
),
(
),
(
))
(
(
))
(
(
)
(
)
(
)
(
)
(
2
2
2
1
1
2
1
2
1
nT
e
N
nT
u
K
T
nT
u
nT
r
nT
u
nT
e
nT
e
S
nT
e
S
nT
u
nT
u
nT
e
nT
e
u
(5.73)
it is easy to see that an equivalent closed-loop control system as shown in
Figure 5.37 is
⎪
⎪
⎩
⎪⎪
⎨
⎧
+
∆
−
=
−
−
+
+
=
=
=
=
=
)).
(
(
)
(
)
(
)
(
)
(
)),
(
(
)
(
))
(
(
)
(
)
(
)
(
)
(
1
1
2
2
2
1
2
1
nT
e
S
nT
e
nT
u
K
nT
u
T
nT
u
nT
e
S
nT
e
nT
u
N
nT
e
nT
r
nT
u
nT
u
u
(5.74)
Observe that when e(nT) and r(nT) are in the regions IC1, IC2, IC5, IC6,
we have formula (5.16), so that
|| S1(e1(nT)) || 
≤
⎥
⎦
⎤
⎢
⎣
⎡
−
+
−
−
|)
(
|
|)
(
||
|
)
2
(
2
1
T
nT
e
nT
e
T
K
K
M
K
L
L
K
d
p
e
p
u
=
)
2
(
2
|
|
e
p
d
p
u
M
K
L
K
K
L
K
−
−
Me +
)
2
(
2
|
|
e
p
d
p
u
M
K
L
K
K
L
K
−
−
|e1(nT)|,
(5.75)
and
|| S2(e2(nT)) || ≤ || N || ⋅ | e2(nT) |,
(5.76)
where || N || is the operator norm of the given N(⋅), or the gain of the given
nonlinear system, defined as usual by
|| N || :=
|)
(
)
(
|
|
))
(
(
))
(
(
|
sup
2
1
2
1
0
,
2
1
nT
v
nT
v
nT
v
N
nT
v
N
n
v
v
−
−
≥
≠
(5.77)
over a set of admissible control signals that have any meaningful function
norms, and Me is defined by
Me :=
|)
(
|
sup
1
nT
d
n≥
 = 
|)
(
|
2
sup
1
nT
e
T
n≥
.
(5.78)
y1
S1
u1
S2
y2
u2
+
−
+
+
e1
e2
Figure 5.37
An equivalent closed-loop control system.

228
Fuzzy PID Controllers •• 5
To this end, an application of the Small Gain Theorem (Theorem 5.1)
yields the following sufficient condition for the BIBO stability of the
nonlinear fuzzy PD control systems:
)
2
(
2
|
|
e
p
d
p
u
M
K
L
T
K
K
L
K
−
−
 || N || < 1.
(5.79)
When e(nT) and r(nT) are in the regions IC3, IC4, IC7, IC8, we can similarly
obtain a sufficient stability condition as follows:
)
2
(
2
|
|
r
p
d
p
u
M
K
L
T
K
K
L
K
−
−
 || N || < 1,
(5.80)
where
Mr :=
|)
(
|
sup
1
nT
r
n≥
 = 
|)
(
)
(
|
1
sup
1
T
nT
e
nT
e
T
n
−
−
≥
≤Me.
(5.81)
When e(nT) and r(nT) are in the rest of the regions, from IC9-IC20, the
other incremental control formulas (5.18)-(5.24) are used. In these cases, the
stability conditions are found to be
⎪
⎪
⎩
⎪
⎪
⎨
⎧
<
<
bounded.
is
||
||
1
||
||
,1
||
||
2
2
N
N
N
T
K
K
T
K
K
d
u
p
u
(5.82)
By combining all the above conditions together, and noting that in IC1-IC8,
KpMe ≤L, and that Kp > 0 and Kd > 0, we arrive at the following result for the 
stability of the nonlinear fuzzy PD control systems.
Theorem 5.3. A sufficient condition for the nonlinear fuzzy PD control
systems to be BIBO stable is that the given nonlinear system has a bounded
norm (gain) || N || < ∞ and the parameters of the fuzzy PD controller, Kp, Kd,
and Ku, satisfy
TL
K
K
u
m
2
γ
|| N || < 1,
(5.83)
where
γ = max{ 1, L }
and
Km = max{ Kp, Kd }.
We remark that this theorem provides a useful criterion for the design of
the nonlinear fuzzy PD controller when a nonlinear process N is given. We
may first choose Ku = T and then find a value of Kd (or Kp) for the tracking
purpose
e(nT) = y(nT) – r(nT) → 0   as n →∞.
(5.84)
Finally, we may determine Kd (or Kp) among all possible choices such that the 
inequality (5.83) is satisfied.

5 •• Fuzzy PID Controllers
229
C. BIBO Stability of Fuzzy PI Control Systems
The analysis of the BIBO stability condition for the fuzzy PI control
system is similar to that for the fuzzy PD control system discussed in the last
subsection.
We again consider the general case where the system under control, N, is
nonlinear. We start with the configuration shown in Figure 5.17 with the
control law (5.38) and (5.39). By defining
⎪⎪
⎪
⎪
⎩
⎪⎪
⎪
⎪
⎨
⎧
∆
−
−
=
=
=
=
=
=
)),
(
(
),
(
),
(
),
(
),
(
),
(
))
(
(
))
(
(
)
(
)
(
)
(
)
(
2
2
2
1
1
2
1
2
1
nT
e
N
nT
u
K
T
nT
u
nT
r
nT
u
nT
e
nT
e
S
nT
e
S
nT
u
nT
u
nT
e
nT
e
u
(5.85)
it is easy to see that we obtain an equivalent closed-loop control system as
shown in Figure 5.37 where, differing from the fuzzy PD control system, we
have
⎪
⎪
⎩
⎪⎪
⎨
⎧
+
∆
−
=
−
−
+
+
=
=
=
=
=
)).
(
(
)
(
)
(
)
(
)
(
)),
(
(
)
(
))
(
(
)
(
)
(
)
(
)
(
1
1
2
2
2
1
2
1
nT
e
S
nT
e
nT
u
K
nT
u
T
nT
u
nT
e
S
nT
e
nT
u
N
nT
e
nT
r
nT
u
nT
u
u
(5.86)
Observe, moreover, that when e(nT) and r(nT) are in the regions IC1, IC2, 
IC5, or IC6, we have
|| S1(e1(nT)) || =
×
−
−
|)
)
(
|
2
(
2
1 nT
e
K
L
L
K
i
u
⎥
⎥
⎦
⎤
⎢
⎢
⎣
⎡
−
−
⎟⎟
⎠
⎞
⎜⎜
⎝
⎛
+
)
(
)
(
1
1
T
nT
e
T
K
nT
e
T
K
K
p
p
i
≤
)
2
(
2
e
i
u
M
K
L
L
K
−
⎥
⎥
⎦
⎤
⎢
⎢
⎣
⎡
−
⎟⎟
⎠
⎞
⎜⎜
⎝
⎛
+
e
p
p
i
M
T
K
nT
e
T
K
K
|)
(
|
1
=
)
2
(
2
e
i
e
p
u
M
K
L
L
M
K
K
−
 + 
)
2
(
2
e
i
p
i
u
M
K
L
L
K
K
K
−
+
 |e(nT)|
(5.87)
and
|| S2(e2(nT)) || ≤ || N || ⋅ | e2(nT) |,
(5.88)
where || N || is the operator norm of the given N(⋅), or the gain of the given
nonlinear system, defined as in formula (5.77), and Me is the maximum
magnitude of the error signal
Me := max{
0
sup
≥
n
|e(nT)|,
1
sup
≥
n
|e(nT–T)}.
(5.89)
In regions IC1-IC8, KiMe ≤L.

230
Fuzzy PID Controllers •• 5
To this end, an application of the Small Gain Theorem (Theorem 5.1)
produces the following sufficient condition for the BIBO stability of the
closed-loop nonlinear fuzzy PI control system:
T
K
TK
K
p
i
u
2
)
(
+
|| N || < 1.
(5.90)
When e(nT) and r(nT) are in the regions IC3, IC4, IC7, or IC8, we can
similarly obtain a sufficient stability condition as follows:
T
K
TK
K
p
i
u
2
)
(
+
|| N || < 1.
(5.91)
When e(nT) and r(nT) are in the rest of the regions, from IC9 to IC20, the 
other control laws are used. In this case, the stability conditions are found to
be
⎪
⎪
⎩
⎪
⎪
⎨
⎧
<
<
bounded.
is
||
||
1
||
||
,1
||
||
2
2
N
N
N
T
L
K
K
T
L
K
K
p
u
i
u
(5.92)
By combining all the above conditions together, we arrive at the following
result.
Theorem 5.4. A sufficient condition for the nonlinear fuzzy PI control
system shown in Figure 5.17 to be globally BIBO stable is: (1) the given
nonlinear system has a bounded norm (gain) || N || < ∞, and (2) the parameters 
of the fuzzy PI controller, Kp, Kd, and Ku, satisfy
y
fuzzy PI
controller
r
−1
+
−
e
uPID
system
fuzzy D
controller
uD
r
+
−
system
uPID
y
fuzzy D
controller
fuzzy PI
controller
r
−1
+
−
+
−
Figure 5.38
Equivalent closed-loop control systems.

5 •• Fuzzy PID Controllers
231
T
K
K
K
p
i
u
2
)
(
+
γ
|| N || < 1,
(5.93)
where γ = max{L,T}.
D. BIBO Stability of Fuzzy PI+D Control Systems
The stability analysis of the fuzzy PI+D control system is in a sense to
combine the results obtained individually for the fuzzy PI and PD control
systems.
Consider the fuzzy PI+D control system shown in Figure 5.21. First,
observe that if we disconnect the fuzzy D controller from Figure 5.21, we
have the fuzzy PI control system, exactly the same as Figure 5.17. Hence, all
the results obtained in the last subsection for the fuzzy PI control system apply 
to this situation.
For the fuzzy PI+D control system shown in Figure 5.21, one can easily
verify that it is equivalent to either one of the two configurations shown in
Figure 5.38. Recall from the Small Gain Theorem (Theorem 5.1) that if we let 
the system denoted by S1 and the fuzzy PI+D controller together be denoted
by S2, which is the dashed box in the second picture of Figure 5.38, then we
can obtain a sufficient condition for the BIBO stability of the overall closed-
loop control system from the bounds
⎪⎩
⎪⎨
⎧
⎥⎦
⎤
⎢⎣
⎡
+
≤
⎟⎟
⎠
⎞
⎜⎜
⎝
⎛
⎥⎦
⎤
⎢⎣
⎡
+
≤
||,
||
||
||,
||
)
(
||
2
2
2
PID
1
1
PID
1
e
y
L
M
e
y
S
u
L
M
u
S
(5.94)
where M1, M2, L1, L2 are constants, with L1L2 < 1, as discussed in detail in
Theorem 5.1.
Here, we observe that due to the special structure of the D controller,
denoted SD, we actually have
⎟⎟
⎠
⎞
⎜⎜
⎝
⎛
⎥⎦
⎤
⎢⎣
⎡
e
y
S2
=
⎥⎦
⎤
⎢⎣
⎡
⎥⎦
⎤
⎢⎣
⎡
e
y
S
S
PI
D
0
1
-
≤
⎥⎦
⎤
⎢⎣
⎡
PI
D
0
1
S
-
S
⋅
⎥⎦
⎤
⎢⎣
⎡
e
y
≤
max{ || SD ||, || SPI ||, 1 } ⋅ max{ || y ||, || e || }.
Hence, a sufficient condition for the overall fuzzy PI+D control system to be
BIBO stable is the worst one between the fuzzy PI and D control systems.
Namely, we may use the larger norms from the right-hand side of the above.
Thus, we will have the second equation of inequalities (5.94) in which SD and 
SPI are separated in M2 and/or L2, so that the analysis performed in the last two 
subsections can be repeated here for inequalities (5.94).
Note that in this case we may assume that max{ ||SD||, ||SPI|| } ≥ 1;
otherwise, the system will be stable without additional conditions by the

232
Fuzzy PID Controllers •• 5
contraction mapping principle. Under this inequality, the second condition of
(5.94) can be guaranteed.
E. Graphical Stability Analysis of Fuzzy PID Control Systems
We have shown how to analytically analyze the BIBO stability of a fuzzy
PID type of control system in the last few sections. Sufficient conditions so
obtained are useful for controller design. Although such sufficient conditions
are generally conservative, just like many other sufficient conditions derived
via different methods for nonlinear systems, they provide useful guidelines for 
designing “safe” controllers (namely, stabilizing controllers with desirable
robustness against system parameter variation and/or external disturbances).
In this section, we introduce a graphical approach to the BIBO stability
analysis for PID type of fuzzy control systems. We only discuss the fuzzy
PI+D control systems shown in Figure 5.21, but the methodology clearly is
applicable to different types of fuzzy PID control systems.
In Figure 5.21, we observe that the control signal uPID(nT) to the error
signal e(nT) can be related implicitly through the closed-loop configuration. In 
the z-domain, let
f(z) = 
)
(
)
(
PID z
u
z
e
(5.95)
and
g(z) = 
)
(
)
(
PID z
u
z
v
,
(5.96)
where
f(z) = f0 + f1 z–1 + f2 z–2 + …
g(z) = g0 + g1 z–1 + g2 z–2 + …
are unknown (not explicitly known) but well-defined, and similarly,
e(z) = e0 + e1 z–1 + e2 z–2 + …
v(z) = v0 + v1 z–1 + v2 z–2 + …
uPID(z) = u0 + u1 z–1 + u2 z–2 + … .
Let
|| F || = ∑
∞
=0
i
if ,
|| G || = ∑
∞
=0
i
ig ,
|| E || = ∑
∞
=0
i
ie ,
|| V || = ∑
∞
=0
i
iv ,
|| U || = ∑
∞
=0
i
iu .
For the BIBO stability of the closed-loop system, we must require that both
|| F || and || G || be finite. So let
|| F || = α1,
|| G || = α2,
where α1 and α2 are constants to be determined. To this end, we have
|| E || ≤α1 || U ||,
(5.97)
|| V || ≤α2 || U ||.
(5.98)

5 •• Fuzzy PID Controllers
233
Suppose that
y(nT+T) = N( y(nT) ) + H1( uPID(nT) ) + H2( w(nT) ),
(5.99)
where {w(nT)} are disturbances (H2 = 0 if it does not exist), N is the closed-
loop system operator, and N, H1, H2 are bounded nonlinear functions (in
operator norm):
|| N || < ∞,
|| H1 || < ∞,
|| H2 || < ∞.
Then, it follows that
|| H1(uPID) || = || y(nT+T) – N (y(nT)) – H2(w(nT)) ||
≤
|| y(nT+T) || + || N || ⋅ || y(nT) || + || H2 || ⋅ || w ||.
Since || H1(uPID) || ≤ || H1 || ⋅ || uPID ||, to ensure the left-hand side be bounded,
we can require
|| H1 ||⋅|| uPID || ≤ || y(nT+T) || + || N ||⋅|| y(nT) || + || H2 ||⋅|| w ||
or, even more conservatively,
|| uPID || ≤β1 + β2 || E || + β3 || V ||,
(5.100)
where
β1 ≤
||
||
1
1
H
( || y(nT+T) || + || N ||⋅|| y(nT) || + || H2 ||⋅|| w || ),
β2 ≤ max{ || KP || , 1 },
β3 ≤ max{ || KI || , || KD || }.
Substituting (5.100) into (5.97) gives
|| E || ≤α1(β1 + β2 || E || + β3 || V || )
which yields (if α1β2 < 1)
|| V || ≥
3
1
1
β
α
[ (1– α1β2) || E || – α1β1 ].
(5.101)
Similarly, substituting (5.100) into (5.98) leads to (if α2β3 < 1)
|| V || ≤
3
2
1
1
β
α
−
[ α2β2 || E || + α2β1 ].
(5.102)
It is clear that the two straight lines on the right-hand side of (5.101) and
(5.102) will create a common region for || V || in the || E || - || V || plane. If α1β2
> 1 (the first straight line has a negative slope) and α2β3 < 1 (the second
||E||
||V||
α2β3 < 1
α1β2 > 1
Figure 5.39
An open common region in the error space.

234
Fuzzy PID Controllers •• 5
straight line has a positive slope), then an open region is created as shown in
Figure 5.39. In this case, there is no common region in which the errors e and 
v are guaranteed to be bounded. Therefore, this case should be avoided.
Observe that we are dealing with norms, so only the first quadrant of the
|| E || - || V || plane is intersecting. To obtain a closed region on the plane, we
can equate (5.101) and (5.102), which gives
3
1
1
β
α
[ (1– α1β2) || Er || – α1β1 ] = 
3
2
1
1
β
α
−
[ α2β2 || Er || + α2β1 ],
(5.103)
where || Er || is the value of || E || at a point denoted by r on the plane. Solving 
(5.103) for || Er ||, we have
|| Er || = 
)
(
1
3
2
2
1
1
1
β
α
+
β
α
−
β
α
.
(5.104)
Substituting (5.104) into (5.102) yields the corresponding
|| Vr || = 
)
(
1
3
2
2
1
1
2
β
α
+
β
α
−
β
α
.
(5.105)
Therefore, the intersection point r of the two straight lines has the coordinates
( ||Er|| , ||Vr|| ) = (
)
(
1
3
2
2
1
1
1
β
α
+
β
α
−
β
α
 , 
)
(
1
3
2
2
1
1
2
β
α
+
β
α
−
β
α
), (5.106)
which are finite if α1β2 + α2β3 < 1. This situation is shown in Figure 5.40. In
summary, we have the following sufficient conditions.
Theorem 5.5. A sufficient condition for the BIBO stability of the fuzzy
PI+D control system is that the fuzzy control gains KP, KI, KD are chosen such 
that there are constants α1, α2, β1, β2, β3 that together satisfy
(a) || E || ≤α1 || U ||,
|| V || ≤α2 || U ||,
(b) β1 ≤
||
||
1
1
H
[  ( 1 + || N || )⋅|| y || + || H2 ||⋅|| w || ],
(c) β2 ≤ max{ || KP || , 1 },
(d) β3 ≤ max{ || KI || , || KD || },
||E||
||V||
α2β3 < 1
α1β2 < 1
Figure 5.40
A closed common region in the error space.

5 •• Fuzzy PID Controllers
235
(e) α1β2 < 1,
α2β3 < 1,
(f)
α1β2 + α2β3 < 1,
and the closed region shown in Figure 5.40 is not empty. Here,
|| y || = 
||
)
(
||
sup
0
nT
y
n≥
.
We finally remark that the norm || y || in condition (b) of Theorem 5.5
needs not be finite when verifying the constant β1; namely, if || y || = ∞ then
condition (b) is trivially satisfied. However, if all the other conditions are
satisfied simultaneously, then || y || would be finite as a result of the BIBO
stability of the overall control system.

236
Fuzzy PID Controllers •• 5
PROBLEMS
P5.1
Following the derivation of the digital PD controller shown in Figure
5.7, verify the digital PI controller shown in Figure 5.17.
P5.2
Verify formulas (5.18) – (5.24) for the fuzzy PD controller by showing 
all the detailed derivation steps.
P5.3
Verify formulas (5.29) – (5.37) for the fuzzy PI controller by showing
all the detailed derivation steps.
P5.4
Repeat all numerical simulations shown in Example 5.3, so as to
experience how and how well the fuzzy PD controller works.
P5.5
Perform some numerical simulations for the fuzzy PI controller and
compare them with the conventional PI controller. You may use the
same models as those simulated in Example 5.3.
P5.6
Perform the graphical stability analysis studied in Section 5-III.E on the 
fuzzy PD and fuzzy PI controller individually.

5 •• Fuzzy PID Controllers
237
REFERENCES
[1]
C. R. Asfahl. Robots and Manufacturing Automation.  New York, NY:
Wiley (1992).
[2]
G. Chen. “Conventional and fuzzy PID controllers: an overview,” Int.
J. of Intelligent Control Systems, Vol. 1, pp 235-246, 1996.
[3]
G. Chen and H. Ying. “BIBO stability of nonlinear fuzzy PI control
systems,” J. of Intelligent and Fuzzy Systems, Vol. 5, pp 245-256, 1997.
[4]
D. Drianker, H. Hellendoorn, and M. Reinfrank.
An Introduction to
Fuzzy Control.  Berlin, Germany:  Springer-Verlag (1993).
[5]
H. Malki, H. Li, and G. Chen. “New design and stability analysis of
fuzzy proportional-derivative control systems,” IEEE Trans. on Fuzzy
Systems, Vol. 2, pp 345-354, 1994.
[6]
H. Malki, D. Feigenspan, D. Misir, and G. Chen. “Fuzzy PID control of 
a flexible-joint robot arm with uncertainties from time-varying loads,”
IEEE Trans. on Control Systems Technology, Vol. 5, pp 371-378, 1997.
[7]
D. Misir, H. Malki, and G. Chen. “Design and analysis of a fuzzy
proportional-integral-derivative controller,” Int. J. of Fuzzy Sets and
Systems, Vol. 79, pp 297-314, 1996.
[8]
P. Sooraksa and G. Chen. “Mathematical modeling and fuzzy control of 
a flexible-link robot arm,” Mathematical and Computer Modeling, Vol. 
27, pp 73-93, 1998.
[9]
K. Tanaka.  “Design of model-based fuzzy control using Lyapunov’s
stability approach and its applications to trajectory stabilization of a
model car,” Theoretical Aspects of Fuzzy Control (ed. H. T. Nguyen,
M. Sugeno, R. Tong, and R. R. Yager). pp 31-63, New York, NY:
Wiley (1995).
[10]
L. X. Wang. Adaptive Fuzzy Systems and Control.  Englewood Cliffs,
NJ:  Prentice-Hall (1994).
[11]
J. W. Webb and R. A. Reis.
Programmable Logic Controllers:
Principles and Applications.  Englewood Cliffs, NJ:  Prentice-Hall
(1995).
[12]
L. A. Zadeh.  “The role of fuzzy logic in modeling, identification, and
control,”
Modeling, Identification, and Control, Vol. 15, No. 3, pp
191-203 (1994).


CHAPTER 6
Adaptive Fuzzy Control
Adaptive control is a method of designing a controller with some
adjustable parameters and an embedded mechanism for adjusting these
parameters. Adaptive controllers have been used mainly to improve the
controller’s performance online. For each control cycle, the adaptive
algorithm is normally implemented in three basic steps: (i) observable data are 
collected to calculate the controller’s performance, (ii) the controller’s
performance is used as a guidance to calculate the adjustment to a set of
controller parameters, and (iii) the controller’s parameters are then adjusted to 
improve the performance of the controller in the next cycle.
Normally, an adaptive controller is designed based on one of the available
techniques. Each technique is originally designed for a specific class of
dynamic systems. The controller is then adjusted as data are collected during
run time to extend its effectiveness to control a larger class of dynamic
systems.
A typical application of adaptive control was to calibrate a system at
startup. In this case, a controller is also designed for a specific class of
dynamic systems. However, the parameters that characterize the dynamic
behavior of a particular system might not be known in advance. A controller is 
then designed and arbitrary values are assigned to initialize these parameters.
After a few control cycles, parameters are adjusted to converge to the actual
parameters of the system. This approach is often used for cases in which a
system is designed to handle a variable payload. The payload is different each 
time, e.g., a crane is used to pick up a sizeable object. The payload will alter
the basic dynamic behavior of a dynamic system. Adaptive control is normally 
used to calibrate these parameters that characterize such dynamic behavior.
Traditionally, there are four basic approaches for adaptive control: (i) gain 
scheduling, (ii) model reference adaptive system, (iii) self-tuning regulator,
and (iv) dual control. Gain scheduling is a method of adjusting the control
signal based on a known look-up table describing changes of a dynamic
system. The model reference adaptive system is a method of comparing the
performance of the actual system against an assumed mathematical model that 
describes the actual system, and designing control input to drive this
comparison error to zero. Self-tuning regulator is a method of updating the
parameters of a model that describes the plant based on observed data, and
channeling the updated information into the controller that is designed based
on these parameters. Dual control is a method of extending adaptive control to 
stochastic model dealing with uncertainties.
This chapter seeks to extend the principle of adaptive control to the fuzzy
control techniques developed in earlier chapters. In this setting, a dynamic
system is controlled to ensure tracking and stability. A controller is designed

240
Adaptive Fuzzy Control •• 6
based on a fuzzy representation of that system, and is therefore called an
adaptive fuzzy controller. This fuzzy controller is parameterized by a set of
constants. These constants are adjusted in each instance of the adaptation to
reflect improvement in effectiveness of the controller. Four traditional
adaptive approaches (gain scheduling, model reference adaptive system, self-
tuning regulator, and dual control) are applied to fuzzy controllers in this
chapter.
In addition, an alternative approach to adaptive control is included: a sub-
optimal fuzzy control. In this approach, a fuzzy controller is optimally
designed for use only during a short period of time. Then, as new data are
collected to reflect more knowledge of the system, the optimal fuzzy control
problem is adjusted and solved for a new solution.
Simple applications are given for each method mainly to serve as
illustrative examples. Practical and industrial examples are deferred to the
next chapter to show how fuzzy logic can be applied to real-life control
systems.
I.
FUNDAMENTAL ADAPTIVE FUZZY CONTROL CONCEPT
Adaptive fuzzy control is an extension of fuzzy control theory to allow the 
fuzzy controller extending its applicability, either to a wider class of uncertain 
systems or to fine-tune the parameters of a system to accuracy. In this scheme, 
a fuzzy controller is designed based on knowledge of a dynamic system. This
fuzzy controller is characterized by a set of parameters. These parameters are
either the controller constants or functions of a model’s constants.
A. Operational Concepts
A controller is designed based on an assumed mathematical model
representing a real system. It must be understood that the mathematical model 
does not completely match the real system to be controlled. Rather, the
mathematical model is seen as an approximation of the real system. A
controller designed based on this model is assumed to work effectively with
the real system if the error (difference) between the actual system and its
mathematical representation is relatively insignificant. However, there exists a 
threshold constant that sets a boundary for the effectiveness of a controller. An 
error (difference) above this threshold will render the controller ineffective
toward the real system.
An adaptive controller is set up to take advantage of additional data
collected at run time for better effectiveness. At run time, data are collected
periodically at the beginning of each constant time interval, tn = tn−1 + ∆t,
where ∆t is a constant measurement of time, and [tn,tn+1) is a duration between 
data collection. Let Dn be a set of data collected at time t = tn. It is assumed
that at any particular time, t = tn, a history of data {D0,D1,...,Dn} is always

6 •• Adaptive Fuzzy Control
241
available. The more data available, the more accurate the approximation of the 
system will become.
At run time, the control input is fed into both the real system and the
mathematical model representing that system. The output of the real system
and the output of that mathematical model are collected and an error
representing the difference between these two outputs are calculated. Let x(t)
be the output of the real system, and y(t) the output of the mathematical
model. The error ε(t) is defined as
ε(t) = x(t) – y(t).
(6.1)
Figure 6.1 depicts this tracking of the difference between the mathematical
model and the real system it represents.
Notice that in the context of this chapter, the mathematical model will be
in the form of fuzzy IF-THEN rules. In this case, the output of the
mathematical model is still crisp numerical data because of the defuzzification 
process that converts a fuzzy representation to a numerical one.
An adaptive controller will be adjusted based on the error function ε(t).
This calculated data will be fed into either the mathematical model or the
controller for adjustment. Since the error function ε(t) is available only at run
time, an adjusting mechanism must be designed to accept this error as it
becomes available, i.e., it must evolve with the accumulation of data in time.
At any time, t = tn, the set of calculated data in the form of a time series
{ε(t0),ε(t1),ε(t2),…,ε(tn)} is available and must be used by the adjusting
mechanism to update appropriate parameters. 
In normal practice, instead of doing re-calculation based on a lengthy set of 
data, the adjusting algorithm is reformulated to be based on two entities: (i)
sufficient information, and (ii) newly collected data. The sufficient
information is a numerical variable representing the set of data
{ε(t0),ε(t1),ε(t2),…,ε(tn–1)} collected from the initial time t0 to the previous
collecting cycle starting at time t = tn–1. The new datum ε(tn) is collected in the 
ε(t)
x(t)
y(t)
Controller
Real System
Math Model
–
u(t)
xdesired
–
+
+
Figure 6.1
Tracking the error function between outputs of a real system and 
mathematical model.

242
Adaptive Fuzzy Control •• 6
current cycle starting at time t = tn. Let ξ(t) be the sufficient information
representing data from the initial time t0 to present time t. Then, in every
collecting cycle, ξ(t) is iteratively calculated as
ξ(tn) = Ξ( ξ(tn–1), ε(tn) ).
(6.2)
An adaptive controller will operate as follows. The controller is initially
designed as a function of a parameter set and state variables of a mathematical 
model. The parameters can be updated any time during operation and the
controller will adjust itself to the newly updated parameters. The time frame is 
usually divided into a series of equally spaced intervals {[tn,tn+1)|n=0,1,2,...;
tn+1= tn+∆t}. At the beginning of each time interval [tn,tn+1), observable data
are collected and the error function ε(tn) is calculated. This error is used to
calculate the adjustment in the parameters of the controller. New control input 
u(tn) for the time interval [tn,tn+1) is then calculated based on the newly
calculated parameters and fed into both the real dynamic system under control 
and the mathematical model upon which the controller is designed. This
completes one control cycle. The next control cycle will consist of the same
steps repeated for the next time interval [tn+1,tn+2), and so on.
B. System Parameterization
As discussed in Chapter 3, a dynamic system can be described by a set of
fuzzy IF-THEN statements that correlate the input and the output. These
statements include a set of parameters that is used to uniquely calculate the
estimated output of a system given the inputs and current states of the system.
A dynamic system is mathematically modeled as a set of IF-THEN rules:
R1: IF
x1(tn) ∈X11 AND ... AND xi(tn) ∈X1i
THEN
y1(tn+1) = α11x1(tn) + α12x2(tn) + ... + α1ixi(tn)
+ β11u1(tn) + β12u2(tn) + ... + β1iuj(tn),
R2: IF
x1(tn) ∈X21 AND ... AND xi(tn) ∈X2i
THEN
y2(tn+1) = α21x1(tn) + α22x2(tn) + ... + α2ixi(tn)
+ β21u1(tn) + β22u2(tn) + ... + β2iuj(tn),
M
Rk: IF
x1(tn) ∈Xk1 AND ... AND xi(tn) ∈Xki
THEN
yk(tn+1) = αk1x1(tn) + αk2x2(tn) + ... + αkixi(tn)
+ βk1u1(tn) + βk2u2(tn) + ... + βkiuj(tn),
where x1, x2, ..., xi are the observable state variables of the real system, y1, y2,
..., yk the calculated state variables of the mathematical model, and u1, u2, ..., uj
the control inputs to both the real system and the mathematical model. In
addition, a set of fuzzy membership functions {µX1(⋅), µX2(⋅), ..., µXi(⋅)} is
given.
The above fuzzy mathematical model is characterized by a set of
parameters {αk’i’,βk’j’|k’=1,2,...,k;i’=1,2,...,i;j’=1,2,...,j}. These parameters will
determine the behavior of the mathematical model. Theoretically, the model
will approximate the real system. The more accurately the model

6 •• Adaptive Fuzzy Control
243
approximates the real dynamic system, the better the controller designed based 
on this model behaves.
Generally, there can be more than one set of fuzzy rules describing a
system. This is a special feature of fuzzy modeling: different (and sometimes
contradicting) rules for a same set of conditions can co-exist. In case of having 
more than one rule applicable to a particular condition, the membership
functions will be used to determine a unique result. This process is
defuzzification, which resolves difference in a compromising fashion. The
most popular defuzzification technique is the weighted average formula which 
assigns a weight for each result according to a given fuzzy membership
function.
Similarly, a fuzzy controller, if designed based on the fuzzy mathematical
model above, will have the following form of fuzzy rules:
R1: IF
x1(tn) ∈X11 AND ... AND xi(tn) ∈X1i
THEN
u1(tn)
= κ11x1(tn) + κ12x2(tn) + ... + κ1ixi(tn)
R2: IF
x1(tn) ∈X21 AND ... AND xi(tn) ∈X2i
THEN
u2(tn)
= κ21x1(tn) + κ22x2(tn) + ... + κ2ixi(tn)
M
Rj: IF
x1(tn) ∈Xk1 AND ... AND xi(tn) ∈Xki
THEN
uj(tn)
= κj1x1(tn) + κj2x2(tn) + ... + κjixi(tn).
In this case, the set of parameters {κj’i’ | i’=1,2,...,i;j’=1,2,...,j} characterizes
the controller. It can be understood intuitively that the parameter set {κj’i’} is
designed as a function of the parameter set {αk’i’,βk’j’}, so that the state
variables of the fuzzy mathematical model are driven to a target point with
stability.
Therefore, it is natural for an engineer who designs the controller to either
adjust the system parameters {αk’i’,βk’j’}, which will lead to the adjustment of
the control parameters {κj’i’}, or directly adjust the controller parameters
{κj’i’} as a scheme to implement adaptive strategies. The adjustment of the
system parameters is sometimes called system identification. This system
identification process is often applied to a system that can be described by a
time-varying parameter set in the fuzzy model. Sometimes the identification
process can be used to establish the parameters of a dynamically changing
system, such as a flying jet that continuously changes its mass due to fuel
consumption.
C. Adjusting Mechanism
Adjusting the system parameters is normally carried out to improve the
performance of the overall closed-loop system, or to improve accuracy of the
assumed model upon which the controller is designed. The process of
calculating the adjustment to the parameters is the adjusting mechanism
mentioned as part of the adaptive control problem. 
Let θ(n) be a set of parameters to be adjusted at time t = tn. The adjustment 
can be the recalculation of the parameters,
θ(n) = Θ(D0,D1,...,Dn),

244
Adaptive Fuzzy Control •• 6
where Dm is the data collected at time t = tm. For numerical efficiency, this
formulation is normally reformulated by the update of the parameter set based 
on its previous value, namely,
θ(n) = Φ(θ(n−1),Dn).
A special case of such an update formulation is the separation of the function
Φ into a recursive form:
θ(n) = θ(n−1) + Λ(Dn,Λ(Dn−1)),
(6.3)
where Λ(Dn) is known as the update (or adjustment) of the parameter set. This 
quantity is sometimes referred to as sufficient information. This formulation
improves clarity and efficiency. It is easy to see the new parameters as the
sum of the old parameters and the changes in these parameters. It is also
computationally efficient not having to repeat the same type of calculation
based on n sets of data.
When accuracy of system identification is considered, the problem of
calculating the adjustment to the parameters can be formulated as an
optimization:
θ
min ||ε(t)||,
(6.4)
where ε(t) is the error function representing the difference between the real
system and its approximated model. The real system is given in terms of
observable data collected over time. The approximated model is given in
terms of a mathematical expression. The expression || ⋅ || represents an
adequate norm function of a vector. For numerical simplicity, it is convenient
to use an l2-norm defined as
 || ε(t) ||2 = 
)
(
...
)
(
)
(
2
2
2
1
2
nt
t
t
ε
+
+
ε
+
ε
.
The optimization problem in this l2-normed space is often known as the least-
squares problem. Given a set of linear constraints, this problem will lead to a
standard linear solution (see Chapter 3). This solution can be reformulated to
become an efficient calculation of the update of the parameters in the form of
(6.3).
When the performance of the overall closed-loop system is considered, the 
problem of calculating the adjustment to the parameters can be formulated as
an optimization problem minimizing the rate of convergence to a desired
stable point:
θ
min ||x(t)−xf||.
(6.5)
There are normally variations of the objective function to be optimized. It
is common to select a norm formulation that will lead directly to a closed-
form solution. This closed-form solution is important because it will allow
rapid calculation of the updated parameters in a short time interval, [tn,tn+∆t),
before the next cycle begins. In this time interval, the algorithm to compute
the control input u(tn) is also performed, increasing the demand for numerical
efficiency. The capability to calculate everything required in a small time

6 •• Adaptive Fuzzy Control
245
interval (with a predefined duration ∆t) is sometimes called the real-time
processing capability.
D. Guidelines for Selecting an Adaptive Fuzzy Controller
It should be noted that an adaptive fuzzy controller, while providing
increasing accuracy and effectiveness, should be carefully selected according
to the criteria it was designed for. Otherwise, the increase in calculation
workload for implementation of an adaptive fuzzy controller might not be
offset by the gain in accuracy or effectiveness.
In order to determine whether to apply adaptive fuzzy control to a system,
one must understand the nature of that system and the mathematical fuzzy
model used to design a controller. To demonstrate an understanding of a
system, one may try to answer the following questions:
1. Can the system be approximated entirely by a fuzzy model?
2. If a system can be approximated entirely by a fuzzy model, are the
parameters of this fuzzy model readily available or must they be
determined online?
3. If a system cannot be approximated entirely by a fuzzy model, can it be 
approximated piecewise by a set of fuzzy models?
4. If a system can be approximated by a set of fuzzy models, are these
models having the same format with different parameters or are they
having different formats?
5. If a system can be approximated by a set of fuzzy models having the
same format, each with a different set of parameters, are these
parameter sets readily available or must they be determined online?
Satisfactorily answering the above questions will help determine whether
an adaptive controller is necessary and, if so, which type of adaptive controller 
is appropriate. Table 6.1 summarizes some criteria to determine whether an
adaptive control design is necessary and, if so, which type of adaptive control
method is appropriate. In the table, STR stands for self-tuning regulator and
MRAFS is a model-reference adaptive fuzzy system.
If a system can be approximated piecewise by a set of fuzzy models, with
the parameters of each model readily known, then it is best to implement a
Table 6.1
Criteria for Selecting an Adaptive Fuzzy Controller
Adaptive Type
System Description
Fuzzy STR
Time invariant with unknown parameters
Fuzzy STR, MRAFS
Time varying
Sub-optimal Fuzzy 
Control
Dynamic environment is changing with no prior 
knowledge
Dual Control
Highly nonlinear
Fuzzy Gain Scheduling
Only modeled accurately piecewise and 
represented by multiple models each for a 
specific range of time

246
Adaptive Fuzzy Control •• 6
fuzzy gain scheduling control algorithm. This algorithm is similar to the fuzzy 
PD/PI/PI+D controllers presented in Chapter 5. 
If a system can be approximated entirely by a set of fuzzy models, but the
parameters of these models are not readily available, then it is best to
implement a STR fuzzy controller based on these parameters. These
parameters will be constantly evaluated and updated, consequently changing
the controller parameters.
If a system can be approximated piecewise by a set of fuzzy models, with
all models having the same format but different parameter sets, then it is best
to implement a fuzzy sub-optimal controller. In this approach, as soon as the
controller moves the closed-loop system into a particular area in the control
space, an optimal fuzzy control problem is solved only for a short time
duration. As soon as control action is pushing the system into another area in
the control space, the sub-optimal fuzzy control problem is solved again with
a different set of parameters.
II. GAIN SCHEDULING
Gain scheduling is a method of combining several controllers together to
control a particular dynamic system. In this approach, each controller is the
most effective in a particular region. Joining them together will require a
condition checking procedure to determine which controller is activated.
In order to design a gain scheduling fuzzy controller, one needs to design
two sets of rules: (i) a set of several fuzzy controllers that are applicable to a
dynamic system, each effective under certain conditions, and (ii) a set of meta 
rules to determine when to activate which controller for an appropriate action.
This type of fuzzy controller is normally useful for applying rule-based
expert systems to control a complicated dynamic system. The expert system
will contain fuzzy rules on how to control that dynamic system. The fuzzy
rules are usually extracted from several human operators. In this setting, the
fuzzy system will contain several rules: either each will be consistently
applicable to a scenario or some might contradict one another for a scenario.
In both cases, a meta rule set is required, either to determine when to activate
a rule for the case of having many exclusively effective controllers, or to
provide a compromised solution for the case of having contradicting rules.
Another application of interest is the case of a piecewise linear system that 
behaves linearly under a unique set of parameters in each region. A piecewise 
linear mathematical model is normally used to approximate a nonlinear
system. An example of this type of application is the dynamic behavior of a
moving object in a gravity field generated by a large planetary body such as
the earth. Near the surface of this planetary body, the gravity field can be
approximated as a cause that results in a constant downward acceleration of
9.8 m/sec2.

6 •• Adaptive Fuzzy Control
247
A fuzzy gain scheduling consists of a series of rule sets, each consisting of 
several IF-THEN fuzzy logic rules. Each rule set is in the form of
Rule Set k: R(k1):
∧
=
N
i 1
(xi∈Xk1i) ⇒
y1 = ∑
=
N
i
i
i
k x
a
1
1
+ ∑
=
M
i
i
i
k u
b
1
1
M
R(kN): ∧
=
N
i 1
(xi∈XkNi) ⇒
yN = ∑
=
N
i
i
kNix
a
1
+ ∑
=
M
i
i
kNiu
b
1
for k = 1,2,...,K. Fuzzy membership functions µXkni(⋅) for appropriate values of 
k, n, i are available either in closed-form or in look-up tables.
In order to determine when to activate a rule set, one must implement a set 
of meta rules that provides selection conditions. The meta rules should be of
the form:
M(j):
∨
=
K
k 1
[ ∧
=
N
i 1
(xi∈Xjki) ] ⇒  Rule Set j
for j = 1,2,...,J.
The above meta rules are cumbersome and detailing. One might prefer to
simplify the above meta rule by approximating it with
M~ (j): ∧
=
N
i 1
(xi∈Yji) ⇒  Rule Set j
for j = 1,2,...,J,
where Yki is defined as the union of the sets Xkji:
Yji = 
K
k 1
=
I Xjki,
and the fuzzy membership function associated with Yji is
µYji(x) = max{µXj1i(x),..., µXjKi(x)}.
There are two difficulties associated with a fuzzy gain scheduling scheme:
(i) it is often time-consuming to define a set of meta rules determining when
to activate which set of fuzzy rules, and (ii) the meta rule set is used in a feed-
forward fashion without feedback.
There is no formal method of defining a set of meta rules. As a result, one 
has to design the rules heuristically, most of the time exhaustively. The meta
rules are used to select a set of fuzzy rules to activate. This selection does not 
include feedback to confirm whether the right set of rules has been used. 
Example 6.1.  Controller for a moving body is normally based on a set of
equations of motion. These equations include dynamic description of an object 
moving in a gravitational field, accelerating toward the ground at a constant
rate called gravity effect. From Newtonian physics law, this gravitational
effect is described as an interactional force between two bodies, one of which
is the earth:
F = 
2
R
GM m,
where G is the gravitational constant, M the mass of the earth, m the mass of
the moving object, and R the distance between the object and the center of the 

248
Adaptive Fuzzy Control •• 6
earth. Near the surface of the earth, where R = RE, the radius of the earth, the
force is estimated as
F = 
2
E
R
GM m ≈m g,
where g is the gravity on earth, often estimated as 
2
/
E
R
GM
, which yields a
constant value of 9.8 m/sec2.
An object with mass m falling near the surface of the earth will obey the
equation of motion which can be described by the following fuzzy rules:
R(1):
IF x2(t) ∈Sk THEN 
1x& (t) ∈Sk,
R(2):
IF u(t) ∈Sf THEN 
2
x& (t) ∈Sf/m+g,
where x1(t) is the displacement, x2(t) the velocity, and u(t) the external force
acting on the object. The fuzzy set Sk is defined as
Sk = [(k−1)σ, (k+1)σ),
µSk(x) = 
⎪
⎩
⎪
⎨
⎧
σ
+
<
≤
σ
σ
−
+
σ
≤
≤
σ
−
+
−
σ
,
)1
(
for
1
)1
(
for
1
k
x
k
x
k
k
x
k
k
x
where σ is half the width of the fuzzy set Sk. Notice that a real line is
partitioned into a series of fuzzy sets, each indexed by an integer k, where k = 
...,−2,−1,0,1,2,... (see Chapter 3).
A typical fuzzy controller for the system of two rules representing the
equations of motion for a moving object near earth’s surface is 
C(1):
IF x1(t) ∈Si AND x2(t) ∈Sj THEN u(t) ∈S−m(6i+5j+g).
This controller will yield a stable closed-loop system described by the
following rules:
R(1):
IF x1(t) ∈Si AND x2(t) ∈Sj THEN 
1x& (t) ∈Sj,
R(2):
IF x1(t) ∈Si AND x2(t) ∈Sj THEN 
2
x& (t) ∈S−6i−5j,
which can describe any system whose output is bounded from above and from 
below by the two bounds, as illustrated by Figure 6.2.
g
Re
Ri
Ri+1
Figure 6.2
Approximation of the constant g.

6 •• Adaptive Fuzzy Control
249
These two bounds characterize the approximation accuracy, implying that
all systems bounded by them will also have the same error bounds of model
approximation.
However, the controller is working only with an accurate estimate of the
gravitational effect g. Near earth’s surface, this value g is estimated at 9.8
m/sec2. For planetary spacecraft, the value of g is dependent on the distance of 
the spacecraft from earth, to be given in terms of GM/R2. The further the craft 
from earth, the smaller the value of g.
A simple solution to the control problem with variation in gravity constant
is the use of gain scheduling. The controller is still effective provided an
accurate value of g is used. Therefore, one can program a set of possible
values of g that the spacecraft will likely encounter in its operating range. For 
example, a spacecraft can be designed to be functional in many orbital levels,
each defined at a specific altitude. In this case, a value g is pre-determined for 
each orbit. As soon as sensor indicates the altitude x1(t), a set of meta rules can 
be used to determine which value of g to use, thus triggering a new set of
control gains to apply to the system. This meta rule set can either be crisp or
fuzzy, determined by the designer. For a set of crisp meta rules, the pre-
calculated g is used for the controller. For a set of fuzzy meta rules, the final
value of g is determined from the defuzzification of the results based on
membership values of each individual result.
Figure 6.2 shows the actual value of g versus the altitude of an object.
Instead of recalculation of the value of g as a function of an altitude and
increasing the complexity of the mathematical model used to design the
controller, one can use a constant value of g for each pre-defined range
(shown in the rectangular box in the figure). 
Let G be the set of possible values of g, G = {g1,g2,...,gP}. Each value of gi
is applicable only for a range [Ri,Ri+1]. The meta rules for selecting different
values of g can be listed as the following rules:
M(1): IF R1 ≤x1(t) ≤R2 THEN g = g1
M(2): IF R2 ≤x1(t) ≤R3 THEN g = g2
M
M(P): IF RP ≤x1(t) ≤RP+1 THEN g = gP.
Example 6.2 (Cash flow analysis of potential of a project). This example
discusses the use of fuzzy logic in a set of expert systems.  Each expert system 
will operate according to a set of fuzzy logic rules.  It calculates the
confidence level of each rule using fuzzy logic processing.  A meta rule set
will be used to select which expert system (or set of rules) is to be used
throughout the entire process. This is the gain-scheduling technique applied to 
the problem of decision making on investment.  Currently, there are several
models that a financial manager can use to analyze cash inflow and outflow of 
a project before making a commitment decision. Each model has its own
unique implication and calculation rules.
A financial manager must have an ability to analyze the cash flow of a
project before committing to it.  This analysis is based on the profit returned

250
Adaptive Fuzzy Control •• 6
from the investment.  There are several factors involved in this analysis, e.g.,
predicted inflation rate, periodic dividends, initial investment, length of
commitment, etc.  Using these factors, a financial manager computes some
index that shows profits or losses.  If the index shows profits, the manager can 
comfortably commit to the project.
When a financial manager has to select one investment project among
several, the analysis above can be modified to become the selection of a
project with the highest index of profit or lowest index of loss.  However,
there are several techniques of analyzing a project.  All such techniques are
consistent with each other in determining the expected profit (or expected
loss) situation.  Yet, when one ranks projects using these techniques, the
rankings are not consistent. Depending on the criteria that each method is
designed for, the use of each method will yield different ranking.
To illustrate the inconsistencies in ranking of profit index using different
techniques of analyzing a cash flow, we summarize the five indicators
commonly used to analyze cash flows: profitablity index, internal rate of
return, net present value, payback period, and modified internal rate of return.
Profitability Index (PI) is an indicator that determines the ratio of a net
present value of all cash inflows to net present value of all cash outflows of a
project.  This indicator has a profit threshold value of one.  If the PI of a
project is greater than one, then the project returns profit; if it is less than one, 
then the project shows losses; if it is equal to one, then the project breaks
even.  In case of a single-project analysis, if the PI is greater than one, a
financial manager can commit to the project. The profitability index is
calculated as
PI = 
∑
∑
=
=
+
+
n
t
t
out
n
t
t
in
k
t
C
k
t
C
0
0
)
1(
)
(
)
1(
)
(
,
where Cin(t) is the cash inflow, Cout(t) the outflow, k the index of inflation, and 
n the number of time units.
The fuzzy rules determining if a project is commitable are
R(1):
if (PI − 1) is positive then accept,
R(2):
if (PI − 1) is negative then reject.
Net Present Value (NPV) is the computation converting all cash flows at
different times into a single quantity equivalent to the value at presence.  This 
method is based on the expected inflation rate in the future, the amount of
cash received periodically, and the initial investment.  The total of these
amounts after indexed for inflation rate is the expected profit.  If the NPV of a 
project is positive, the project shows profits and is commitable; if it is
negative, the project shows losses and is not commitable; if it is zero, the

6 •• Adaptive Fuzzy Control
251
project breaks even and the commitment shows no effects. The NPV is
calculated as
NPV = ∑
=
+
−
n
t
t
out
in
k
t
C
t
C
0
)
1(
)]
(
)
(
[
,
with notation as above.
The fuzzy rules determining if a project is commitable are
R(1):
if NPV is positive then accept,
R(2):
if NPV is negative then reject.
Internal Rate of Return (IRR) is the minimum rate of return that allows
break-even in the project.  This is the yield rate that, if used for calculating net 
present value, shows a total of zero net present value of cash flows.  This rate 
is compared to the current cost of capital, i.e., the interest rate available in the 
market.  If the IRR is greater than the cost of capital, then it is profitable to
commit investment to the project; if it is less than the cost of capital, then the
project is not profitable and should not be committed to. The IRR is calculated 
as
IRR = r
such that 
∑
=
+
−
n
t
t
out
in
r
t
C
t
C
0
)
1(
)]
(
)
(
[
 = 0,
with notation as above.
The fuzzy rules determining if a project is commitable are
R(1):
if (IRR−kinflation)  is positive then accept,
R(2):
if (IRR−kinflation) is negative then reject.
Payback Period (PP) is the period required to collect back all the initial
investments.  Normally, a company has a threshold for payback period.  This
threshold is the maximum length of a period that the company is willing to
wait before showing profit.  If the PP of a project is less than this threshold,
then the project is commitable; if it is greater than this threshold, then the
project should not be invested.  This method has been popular for quick
calculation inside an executive’s head.  Recently, it has been modified to
reflect the inflation rate.  This rate is used to calculate the net present value of 
each cash flow. These net-present-valued cash flows are used to calculate the
payback period:
PP = n
such that
∑
=
+
−
n
t
t
out
in
k
t
C
t
C
0
)
1(
)]
(
)
(
[
 = 0,
with notation as above.
The fuzzy rules determining if a project is commitable are
R(1):
if (PP−threshold)  is positive then accept,
R(2):
if (PP−threshold) is negative then reject.
Modified Internal Rate of Return (MIRR) is a slight variation of the IRR.
Here, the terminal value, i.e., future value at the time of the final payment of
all the cash inflows, is computed.  Then, this amount is adjusted to reflect the
net present value.  The rate that returns such a zero net present value is the

252
Adaptive Fuzzy Control •• 6
MIRR.  The analysis of this indicator is similar to that of the IRR.  The main
advantage of using this indicator instead of the IRR is the claim that the MIRR 
provides an alternative solution of simply investing the company’s fund to
saving institutions where the MIRR is smaller than the rate of return offered
by such saving institutions. The MIRR is calculated as
MIRR = r
such that
∑
=
+
n
t
t
out
k
t
C
0
)
1(
)
(
 = 
n
n
t
t
n
in
r
k
t
C
)
1(
)
1
)(
(
0
+
+
∑
=
−
,
with notation as above.
The fuzzy rules determining if a project is committable are
R(1):
if (MIRR−kinflation)  is positive then accept,
R(2):
if (MIRR−kinflation) is negative then reject.
The meta rules used to select which value to use is as follows. If profits are 
the main determining factor, then the values PI, IRR, and MIRR will be
emphasized. If the principle of the investment is protected, then the value
NPV should be used. One can vary the emphasis on each value and combine
them together using the weighted average formula, which is equivalent to
resolving results of different fuzzy rules, each with a different membership
value.
III.
FUZZY SELF-TUNING REGULATOR
Fuzzy Self-Tuning Regulator (FSTR) is the extension of traditional self-
tuning regulator, which is an adaptive control method to handle systems
modeled by fuzzy logic rules. In this approach, a set of fuzzy logic rules is
used to describe the dynamics of a system. A fuzzy controller, therefore, is
designed based on the system parameters and is characterized by its own
controller parameters. The design of a fuzzy controller can be set up so that
the controller’s fuzzy parameters are dependent on the system’s fuzzy
parameters. In this setup, the fuzzy self-tuning regulator approach is utilized to 
update the system’s parameters at every control cycle. Then, the controller’s
parameters will be updated as a consequence. The new controller (with newly
computed parameters) will then calculate the control signal to be sent to the
system to control it for tracking with stability. Figure 6.3 illustrates this FSTR 
concept, where uc(t) is the reference input, u(t) and y(t) the input and output of 
the system, respectively, {aij} and {bmn} are system parameters, and {Kpq}
controller parameters (including the control gains).
Notice that in the FSTR approach, the problem is partitioned into two
parts: (i) system identification and (ii) adjusting the control gain. The first
part, system identification, is an estimation of the parameters in the fuzzy
model. The adjusting of the control gains is the recalculation of the control
gains based on new parameters of the system model. In this setup, inputs and
outputs of the system to be controlled are monitored and profiled at the

6 •• Adaptive Fuzzy Control
253
beginning of every control cycle, [tn,tn+∆t]. These two profiles will contain
data from the initial time, t = t0, to the current time, t = tn. Based on the input-
output data, a relation can be established in terms of a fuzzy model that will
map the input into the output.
Consider an SISO fuzzy model in the fuzzy IF-THEN form (see Chapter
3):
R(i):
IF x ∈Sn AND u ∈Sm THEN x& ∈San+bm,
i=1,...,l,
n,m=0,±1,±2,... .
Under specific conditions that Sn = [−σ(n−1),σ(n+1)), and that the associated
membership function of this set Sn is triangular shape of the form
µSn(x) = 
⎩
⎨
⎧
σ
+
σ
−
∈
σ
σ
−
−
else,
0
),
)1
(,
)1
[(
for
/|
|
1
n
n
x
n
x
it can be shown that x(t) is bounded from both above and below by the bounds
x& upper(t)  = a xupper(t) + b u(t) + [ |a| + |b| ] σ,
x& lower(t)  = a xlower(t) + b u(t) − [ |a| + |b| ] σ.
A typical fuzzy controller for this model is given in terms of the following
rules:
C(i):
IF x ∈Sn THEN u = kx,
i=1,...,l,
n=0,±1,±2,...,
where the constant k is designed so that 
a + bk < 0,
in order to have a stable closed-loop system. For purpose of illustration, k can 
be selected as
k = −2 sign(b)
|
|
|
|
b
a  .
For the first part of system identification, given two sets of data profiles
{u(ti)|i=0,1,2,....,n} and {x(ti)|i=0,1,2,....,n}, the problem is to find the two
constants a and b in the IF-THEN fuzzy model that will produce the two
Kpq
aij,bmn
System
Identification
Dynamic
System
Fuzzy
Controller
y(t)
uc(t)
u(t)
−
Calculate Control 
Parameters
+
Figure 6.3
Fuzzy self-tuning regulator.

254
Adaptive Fuzzy Control •• 6
profiles, {xupper(ti)|i=0,1,2,....,n} and {xlower(ti)|i=0,1,2,....,n}, to ensure the
inequalities
xlower(ti) ≤x(ti) ≤xupper(ti)
for
i=0,1,2,....,n.
The SISO problem above can be extended to a general MIMO problem,
where, instead of a scalar parameter a, a matrix A = {aij} is used, and similarly 
a matrix B = {bmn} is in place of the scalar b.
It can be seen that there are more variables than equations, implying that
there exist an infinite number of solutions. In order to ensure a unique
solution, one may establish an additional constraint: the parameters will
change gradually from one instant to the next. This additional constraint can
convert the system identification problem to an optimization problem of the
form
mn
ij b
a ,min
⎪⎩
⎪⎨
⎧
−
∑∑
=
=
−
K
i
K
j
k
ij
k
ij
t
a
t
a
1
1
2
1)]
(
)
(
[
+
⎭
⎬
⎫
−
∑∑
=
=
−
K
m
J
n
k
mn
k
mn
t
b
t
b
1
1
2
1)]
(
)
(
[
subject to
)
( k
r t
x&
 = ∑
=
K
n
n
rnx
a
1
+ ∑
=
J
m
m
rmu
b
1
.
This optimization problem would minimize the deviation of the parameters
from the previous set of parameters.  This minimization provides the smooth
change in the values of the parameters, and the constraint would put the
estimated transition right in the middle of the two bounds.
The control parameters will be updated based on the new values of the
model parameters calculated from the above optimization problem.  There are 
several techniques to design a controller that can control the two bounds of the 
fuzzy model to ensure convergence and stability.
The solution to the first part of the FSTR problem is calculated in three
steps as follows.
Step 1.  Estimate the transition of the state variables: In this calculation, the 
following simple finite difference may be used:
)
( k
n t
x&
  =
1
1)
(
)
(
−
−
−
−
k
k
k
n
k
n
t
t
t
x
t
x
.
Step 2.  Estimate the parameters of the fuzzy model: The solution to the
optimization problem is solved by Calculus in closed form as follows:
aij(tk) = aij(tk−1)  +
∑
∑
=
=
+
K
m
J
n
k
n
k
m
k
i
k
j
t
u
t
x
t
x
t
x
1
1
2
2
)
(
)
(
)
(
)
(
&
−
∑
∑
∑
∑
=
=
=
=
−
−
+
+
K
m
J
n
k
n
k
m
K
m
J
n
k
in
k
n
k
im
k
m
k
j
t
u
t
x
t
b
t
u
t
a
t
x
t
x
1
1
2
2
1
1
1
1
)
(
)
(
)
(
)
(
)
(
)
(
)
(
,

6 •• Adaptive Fuzzy Control
255
bmn(tk) = bmn(tk−1)  +
∑
∑
=
=
+
K
p
J
q
k
q
k
p
k
m
k
n
t
u
t
x
t
x
t
u
1
1
2
2
)
(
)
(
)
(
)
(
&
−
∑
∑
∑
∑
=
=
=
=
−
−
+
+
K
p
J
q
k
q
k
p
K
p
J
q
k
mq
k
q
k
mp
k
p
k
n
t
u
t
x
t
b
t
u
t
a
t
x
t
u
1
1
2
2
1
1
1
1
)
(
)
(
)
(
)
(
)
(
)
(
)
(
.
Step 3.  Update the control parameters: The control parameters are
designed to stabilize the system in terms of the constants a and b for the SISO 
case. A typical solution was given earlier, for which the control parameter k
can be updated as
k(tk) = −2 sign(b(tk))
|)
(
|
|)
(
|
k
k
t
b
t
a
.
The adaptation of the system parameters to input data can be reformulated into 
a matrix form, as
Ak =
Ak−1  +
2
2
||
||
||
||
k
k
T
k
k
u
x
x
x
+
&
−
2
2
1
||
||
||
||
k
k
T
k
k
k
u
x
x
x
A
+
−
−
2
2
1
||
||
||
||
k
k
T
k
k
k
u
x
x
u
B
+
−
,
Bk =
Bk−1  +
2
2
||
||
||
||
k
k
T
k
k
u
x
u
x
+
&
−
2
2
1
||
||
||
||
k
k
T
k
k
k
u
x
u
x
A
+
−
–
2
2
1
||
||
||
||
k
k
T
k
k
k
u
x
u
u
B
+
−
,
which can be implemented efficiently on a digital computer in the updating
scheme.
IV.
MODEL REFERENCE ADAPTIVE FUZZY SYSTEMS
Model Reference Adaptive Fuzzy Systems (MRAFS) is a method of
adjusting the gain(s) to a system so that the output of that system tracks the
output of a model having the same control input. In this setting, a control
signal is being fed into both the model and the system. The model, being
fuzzy in this case, is designed to be stable. It is the reference that the system is 
controlled to match. Figure 6.4 illustrates the concept of MRAFS. Associated
with the MRAFS approach are different numerical techniques to calculate the
adjusting gain(s). This approach basically establishes a desired dynamic
behavior of a system through its model. Then, the system is controlled so that 
its output matches that of the model. 

256
Adaptive Fuzzy Control •• 6
Even though there is no consideration about stability of the overall system
in the discussion of the MRAFS approach below, it is understood that if the
model is designed to be stable, i.e., with internal feedback loop that brings its
output to a desired set-point in a stable manner, then matching the output of a 
system with this reference model will ensure the system to be stable as well.
Therefore, an important criterion in this design is the requirement that the
reference model be stable.
In fuzzy logic applications, it is assumed that the model being used is
represented by a set of fuzzy logic rules. The adaptive gain is also given in
terms of fuzzy logic rules.
A basic guideline to calculate the gain constant is the minimization of the
error function defined as the difference between the output of the reference
model and the output of the actual system. In this setup, the error function e(t)
is defined as
e(t) = y(t) −ym(t),
where y(t) is the output of the system, ym(t) the output of the reference model. 
If the reference model is given in terms of fuzzy logic rules of the form
IF x(t) ∈Sn AND u(t) ∈Sn THEN x& (t) ∈San+bm,
(6.6)
it describes a system that has an output bounded from both above and below
by two analytical systems (see Chapter 3):
Ξ& (t)  = a Ξ(t) + b u(t) + [ |a| + |b| ]σ,
ξ& (t)  = a ξ(t) + b u(t) – [ |a| + |b| ]σ.
The task of guiding the dynamic system (to be controlled) to have the output
bounded by these two bounds is the goal of the MRAFS. In this case, the error 
function is slightly modified to reflect these bounds, as the average of the
error with respect to the upper bound and the error with respect to the lower
bound:
e(t) = 2
1 [ y(t) −yupper(t)] + 2
1 [ y(t) −ylower(t)].
Fuzzy Model
Dynamic
System
××
Adaptive Gain
y(t)
ym(t)
e(t)
uc(t)
u(t)
γ
−
+
Figure 6.4
Model Reference Adaptive Fuzzy Systems (MRAFS).

6 •• Adaptive Fuzzy Control
257
Let J(e) be the objective function for designing the MRAFS gain. This
function J(e) is normally the magnitude of the error function e(t). Two popular
magnitude functions are the l2-norm
J2(e) = eT(t) e(t)
and the l1-norm
J1(e) = | e(t) |.
Each formulation will lead to a specific closed-form solution. The l2
solution is common because it normally yields a linear solution. It can be
shown that the l1 solution is similar to the traditional bang-bang control. 
Let θ be the parameter used to control the system so that it tracks the
reference model. The approach here is to optimize the objective function J(e)
with respect to this parameter θ. The objective function is gradually reduced
when the parameter θ is adjusted in the negative gradient of J, i.e.,
dt
dθ  = −γ θ
∂
∂J ,
where γ is a scalar which determines the convergence rate in general. In this
approach, the parameter θ is assumed to be continuously adjusted. Depending 
on the definition of J and the nature of the reference model, the formulation to 
calculate the adjustment to the parameter θ is derived on a case by case basis.
V.
DUAL CONTROL
The traditional concept of dual control was originally designed to handle
stochastic control systems. It consists of a controller and an estimator for the
statistical properties of the closed-loop system. The estimator is used to
provide statistical information to the controller that will adjust itself
accordingly. This concept is usually difficult to implement on an actual
system.
The same dual control concept can be extended to fuzzy control systems.
In this setting, the fuzzy setup consisting of definitions for fuzzy sets and its
associated membership functions is re-evaluated during the operational
process of the system. These definitions are continuously adjusted and, thus,
the controller is continuously adjusted accordingly.
The main difficulty of implementing the traditional dual control is also
translated into the fuzzy dual control concept. The process of adjusting the
fuzzy definitions involves changing the membership functions. This change
does not permit the analytical process of simplifying the rules to be converted 
into two analytical bounds during the design phase. It is therefore difficult to
implement this simplification method on a digital computer and operate it on
line in synchronization with the processing rate at which data are collected.
The second difficulty in the fuzzy dual control concept is in the change of
the boundaries of the fuzzy sets that lead to possible widening of the coverage 
of the area of applicability.

258
Adaptive Fuzzy Control •• 6
Basically, the concept of fuzzy dual control is often proposed for
application in fuzzy clustering where input and output are analyzed to
determine an effective set of fuzzy rules that correlate the two. It shows
promising future in mimicking human’s intelligence in observing surrounding
environment and making intelligent decisions, but generally not in control
applications.
VI.
SUB-OPTIMAL FUZZY CONTROL
An optimal controller is a controller designed to optimize its performance
criteria. Normally, the criteria can be either the tracking performance (various
specifications), the cost of operation (amount of control input required), or a
combination of the two. An optimal controller is usually designed for its
operative time duration from the initial time ti to some specific ending time tf.
Sometimes the ending time tf can be infinite. The optimal controller is a
solution to the following optimization problem:
)
(
min
t
u
∫
f
i
t
t
f dt
x
t
u
t
x
J
)
),
(
),
(
(
subject to
)
(t
x&
= f(x(t),u(t)),
where the function J(⋅,⋅) is the criterion function, xf the desired set point, and
u(t) the controller. When the mathematical model is given in terms of fuzzy
logic rules, the resulting controller is referred to as the optimal fuzzy
controller.
There are cases in which the desired set point xf is changing with time and 
cannot be profiled in advance. This scenario is often seen in the case of a
system trying to synchronously track another dynamic system, e.g., a
spacecraft docking with another moving spacecraft in orbit. In this case, a
prediction scheme can be implemented to provide the moving set point xf.
However, the prediction method will result in an error that normally increases
with time. It is impractical to design an optimal controller with operative time 
duration [ti,tf) for a large tf based on this predictive scheme for the moving set 
point. In this case, it is reasonable to take an alternate approach, called sub-
optimal fuzzy control. 
The sub-optimal fuzzy control method is a strategy of optimally solving a
control problem only over a short time interval when prediction of dynamic
environment is still accurate. At the beginning of a new interval, data are
collected and assessment of the dynamic environment is revised to give a new 
prediction. Another optimal control problem is then set up and solved. In this
adaptive way, the same problem format is repeatedly used, with only
parameters being revised for better accuracy in the prediction of the changing
environment.

6 •• Adaptive Fuzzy Control
259
A. SISO Control Systems
The optimal fuzzy control problem for an SISO dynamic system can be
formulated as follows:
)
(
min
t
u
{∫
final
initial
t
t
[R1Ξ2(t)+R2ξ2(t)+R3u2(t)]dt + R4Ξ2(tfinal) + R5ξ2(tfinal)}
subject to the constraint(s):
IF x(t) ∈Sn AND u(t) ∈Sn THEN x& (t) ∈San+bm ,
where Ξ(t) and ξ(t) are the upper and lower bounds of x(t). Again, this setup
refers to the thorough study given in Chapter 3. Since x(t) is not given
precisely, one can try minimizing the upper and lower bounds of the errors
between the controlled trajectories and the target.  As a result, any state
variable that is between these two bounds will also be controlled to the target.
The quadratic terms of control input u(t) indicate a requirement for a bounded 
minimum energy solution.  Additional constraints such as time minimization
can be added to the problem and the solution can be derived in a similar
manner.
Theorem 6.1. The SISO fuzzy model used as a constraint in the optimal
fuzzy control problem posed above is bounded from above by xupper(t) = Ξ(t)
and from below by xlower(t) = ξ(t), where
Ξ& (t)  = a Ξ(t) + b u(t) + [ |a| + |b| ]σ,
ξ& (t)  = a ξ(t) + b u(t) – [ |a| + |b| ]σ,
with the initial conditions 
Ξ(tinitial) = ξ(tinitial) = x(tinitial).
Proof.  Given a positive constant σ, for any numbers x(t) and u(t) at any
instant t, there exist two unique integers, n and m, such that
(n)σ ≤x ≤ (n+1)σ,
(m)σ ≤u ≤ (m+1)σ.
The rule in (6.6) will have four possible implications:
(i) x ∈Sn ∧u ∈Sm ⇒x& ∈San+bm,
(ii) x ∈Sn+1 ∧u ∈Sm ⇒x& ∈San+bm+a,
(iii) x ∈Sn ∧u ∈Sm+1 ⇒x& ∈San+bm+b,
(iv) x ∈Sn+1 ∧u ∈Sm+1 ⇒x& ∈San+bm+a+b.
These four implications yield four different results for x& . The weighted
average formulation is used to calculate the final value for x& . The
membership values for each of the implications above are calculated using the 
triangular membership functions. There are four possible cases.  The final
result by cases and the derivation steps can be derived mathematically to show 
that all four cases yield the same results given in the theorem.
Theorem 6.2.  The solution for the SISO optimal fuzzy control problem
defined above can be obtained as a direct consequence of Theorem 6.4 below
on an MIMO system:
u*(t) = −
3
1
R [ b
b] P(t)
⎥⎦
⎤
⎢⎣
⎡
ξ
Ξ
)
(
)
(
t
t
,

260
Adaptive Fuzzy Control •• 6
where P(t) is the solution to the matrix Riccati equation
–
)
(t
P&
 = 
⎥⎦
⎤
⎢⎣
⎡
2
1
0
0
R
R
–
3
2
R
b
P2(t) + 2a P(t)
with the boundary condition P(tfinal) = 
⎥⎦
⎤
⎢⎣
⎡
5
4
0
0
R
R
.
Proof.  This is a special case of the MIMO case presented next.
B. MIMO Control Systems
The optimal fuzzy control problem for an MIMO dynamic system (see
Chapter 3 for system setup) can be formulated as follows:
)
(
min
t
u
{∫
final
initial
t
t
[ΞT(t)R1Ξ(t) + ξT(t)R2ξ(t) + uT(t)R3u(t)]dt
+ ΞT(tfinal)R4Ξ(tfinal) + ξT(tfinal)R5ξ(tfinal)  }
subject to the constraint(s)
R(i):
IF (x1(t) ∈Sn1) AND ... AND (xp(t) ∈Snp) AND
(u1(t) ∈Sm1) AND ... AND (uq(t) ∈Smq)
THEN x& i(t) ∈ Sai1n1+…+ aipnp+ bi1m1+…+ biqmq.
An MIMO system described above, under some specific definitions of fuzzy
sets Sn and membership functions µSn(⋅), will yield closed-form upper and
lower bounds. These bounds will then lead to a specific objective function in
the optimal fuzzy control problem, which finally yield a unique closed-form
solution.
Theorem 6.3.  The MIMO fuzzy model used as constraint in the optimal
fuzzy control problem defined above yields the upper bound Ξi(t) and the
lower bound ξi(t) as follows:
&Ξ i(t)  = ai1Ξ1 + ... + aipΞp + bi1u1 + ... + biquq +
[ |ai1| + ... + |aip| + |bi1| + ... + |biq| ]σ,
&ξ i(t)  = ai1ξ1 + ... + aipξp + bi1u1 + ... + biquq –
[ |ai1| + ... + |aip| + |bi1| + ... + |biq| ]σ.
Proof.  This theorem can be proved by induction as follows.  First, for the 
induction base, i.e., for p = 1 and q = 1, which is the SISO case, the result was 
established by Theorem 6.1 presented earlier.  For the induction assumption,
we assume that for any two arbitrary integers p and q, the two transition
equations above hold.  Then, the induction steps for the cases of p+1 and/or
q+1 can be derived by direct but tedious computation.
Theorem 6.4. The solution for the MIMO optimal fuzzy control problem,
with fixed tfinal, is

6 •• Adaptive Fuzzy Control
261
u*(t) = –
1
3
−
R
 [ BT
BT] P(t)
⎥⎦
⎤
⎢⎣
⎡
ξ
Ξ
)
(
)
(
t
t
,
x-Position Profile
-2
0
2
4
6
0
20
40
60
80
100
120
140
160
180
200
Figure 6.5  Solution trajectory of a fuzzy model without optimization goes
beyond the upper boundary.
x-Position Profile
-5
0
5
10
15
0
20
40
60
80
100
120
140
160
180
200
(a)
x-Velocity Profile
-3
0
3
6
9
0
20
40
60
80
100
120
140
160
180
200
(b)
Figure 6.6
Solution trajectory of the same fuzzy model subject to sub-
optimal control.

262
Adaptive Fuzzy Control •• 6
where P(t) is the solution to the Riccati equation:
–
)
(t
P&
 = 
⎥⎦
⎤
⎢⎣
⎡
2
1
0
0
R
R
– P(t)
⎥
⎥
⎦
⎤
⎢
⎢
⎣
⎡
−
−
−
−
T
T
T
T
B
BR
B
BR
B
BR
B
BR
1
3
1
3
1
3
1
3
P(t)
+ P(t)
⎥⎦
⎤
⎢⎣
⎡
A
A
0
0  + 
⎥⎥
⎦
⎤
⎢⎢
⎣
⎡
T
T
A
A
0
0
P(t)
and the matrices A and B contain the system constants {aij} and {bij} in the
constraints (see Chapter 3 for more detail).  The boundary condition for P(t) is 
P(tfinal) = 
⎥⎦
⎤
⎢⎣
⎡
5
4
0
0
R
R
.
Proof.  See [3], pp 201-219.
Example 6.3 (a Two-Link Manipulator). This example presents some
numerical simulations of a two-link planar manipulator under the control of
the sub-optimal fuzzy controller developed above. 
The real dynamic system is assumed to behave as described by the
equation of motion for a manipulator:
τ  = f(θ, θ& ) θ&&  + g(θ, θ& ),
where &&θ , &θ , and θ are the joint angular acceleration, velocity, and position
vectors, respectively, f(.,.) is the inertia matrix, and g(.,.) the Coriolis torque
vector.
As an example for illustration, assume that this robot arm model is
unknown or uncertain, and a linear fuzzy model is used to approximate the
physical arm for adaptive control.
The linear fuzzy model is assumed to be in the form of IF-THEN rules.
More precisely, 
IF x2 ∈Sn THEN 
1x& ∈Sn,
IF x1 ∈Sn AND x2 ∈Sm AND u ∈Sp THEN 
2
x& ∈San+bm+cp.
Here, the parameters are first pre-determined from a linearization at an
operating point.  Figure 6.5 shows that even though the optimal fuzzy logic
controller works quite well to a certain extent, when the nonlinearity is
considered in a real computation the trajectory will be outside the bounded
region and the real output is not staying inside the analytical bounds of the
fuzzy model. This calls for the sub-optimal control approach when the system 
is moving outside the accuracy range of linearization. In this case, the
parameters must be re-established and the control problem is solved again
with these new parameters.
The result is now improved:  the end-effector is stabilized within some
small bounds as shown in Figure 6.6(a) and (b).
Example 6.4 (Docking a Boat on a 2-D Surface). The problem of docking 
a boat can be defined as follows: Given a description of the dynamics of a

6 •• Adaptive Fuzzy Control
263
boat, its current state, and the desired state (docking position), design a control 
input that drives the boat from its current state to stop at its docking position.
In this example, a fuzzy logic model is used to solve the docking problem
in an optimal sense.  This is the problem of finding a controller that performs
the best for a fuzzy model under a set of pre-defined criteria. The solution is
also given as a set of fuzzy logic rules.  A fuzzy description of the closed-loop
system is derived to establish the stability of the controlled system. 
First, a fuzzy model for the system is derived.  This model will be used as
a set of constraints in the optimal control problem. Then, a set of criteria is
defined as the objective for the optimal control problem.  Finally, a solution
optimizing this objective under the fuzzy constraints is obtained. This solution 
is given in terms of parameters for the fuzzy logic model of the system. The
desired destination can change and, therefore, the objective function will
change as a result. It is impractical to derive an optimal solution with some
assumed knowledge of a destination. In general, the destination is located by
external sensors and data of its position are continuously provided to the
controller. The controller has to adjust the parameters to the optimal control
problem and a new solution is recalculated based on the new data. The process 
is adaptively carried out until the docking is completed.
The state of the boat is characterized by its current location, orientation
(the direction of the vector from its stern to its bow), and speed.  It is
controlled by a pedal that generates acceleration either forward or backward,
and by a rudder that turns the boat.  When the rudder is set at zero, the boat
will move in a straight line, either forward or backward.  When the rudder is
set to one side or the other, it exerts a lateral force that causes the boat to
follow a circular arc.  In this example, for simplicity, it is assumed that there
are no sideways slippage, no water currents, no vibrational dynamics, no drag, 
and no pitching, rolling, or tipping of the boat.  The boat will move according 
to the control input with no outside interference. 
The fuzzy model for the boat can be described in terms of five fuzzy rules 
such as:
R(1):
IF ϕ4 ∈Sn THEN ϕ& 1∈Sn,
R(2):
IF ϕ5 ∈Sn THEN ϕ& 2 ∈Sn,
R(3):
IF ϕ4 ∈Sn AND ϕ5 ∈Sm AND u2 ∈Sq
THEN
3
ϕ& ∈Sn+m+q,
R(4):
IF ϕ3 ∈Sn AND ϕ4 ∈Sm AND ϕ5 ∈Sk AND 
u1 ∈Sp AND u2 ∈Sq
THEN
4
ϕ& ∈Sn+m+k+p+q,
R(5):
IF ϕ3 ∈Sn AND ϕ4 ∈Sm AND ϕ5 ∈Sk AND
u1 ∈Sp AND u2 ∈Sq
THEN
5
ϕ&
∈Sn+m+k+p–q.

264
Adaptive Fuzzy Control •• 6
Here, ϕ1 is the x-coordinate, ϕ2 is the y-coordinate of the position of the boat, 
ϕ3 is the displacement of the steering wheel, ϕ4 is the x-velocity component,
and ϕ5 is the y-velocity component of the boat, and n, m, p, q, k = 0,±1, ±2,... .
The objective function consists of two terms:  the difference between the
state of the system and the desired state, and a measure of the energy of the
control input, as discussed before, is often used in optimal control problems.
The optimization of the error term seeks to bring the system to the desired
state.  The optimization of the energy term seeks to minimize the control
energy. The solution that optimizes the objective function yields a
compromise between convergence and minimal effort.
The solution to this problem takes the form of the following set of fuzzy
rules:
L(1):
IF ϕ1 ∈Sn1 AND ϕ2 ∈Sn2 AND ϕ3 ∈Sn3 AND 
ϕ4 ∈Sn4 AND ϕ5 ∈Sn5
THEN u1 ∈Sk1,
L(2):
IF ϕ1 ∈Sn1 AND ϕ2 ∈Sn2 AND ϕ3 ∈Sn3 AND 
ϕ4 ∈Sn4 AND ϕ5 ∈Sn5
THEN u2 ∈Sk2,
where k1 and k2 are functions of n1, ... , n5, determined based on the Riccati
equation, as discussed before.
An exact mathematical model is used as the “actual system” in order to test 
and validate the optimal fuzzy control solution.  This model corresponds to the 
exact response of the boat to any control input.  Note that the derivation of the 
control input discussed in previous sections does not depend on knowledge of 
this mathematical model. By validating the approach with a fully specified
system, one reinforces the confidence needed to deal with the general case
where the precise equations of motion are not known to the person developing 
the controller. A specified system for this purpose is
1
ϕ&   = ϕ4,
2
ϕ&   = ϕ5,
3
ϕ&   = c [ϕ4 cos(ϕ3)  + ϕ5 sin(ϕ3) ] u2,
4
ϕ&
 = u1 cos(ϕ3) −c [ 
2
4
ϕ  + 
2
5
ϕ  ] sin(ϕ3) u2,
5
ϕ&   = u1 sin(ϕ3)  + c [ 
2
4
ϕ  + 
2
5
ϕ  ] cos(ϕ3) u2.
The constant c is a system parameter specifying the ratio of steering wheel
angle to the curvature of the path that the boat will make while turning (the
inverse of the turning radius).  In this simulation, the value c = 1.0 was used.
Figure 6.7 shows how the first two state variables of this system behave when
the system starts at the origin, oriented 45° from the x-axis, with initial x- and 
y-velocities of 1.0, and the inputs are constant: u1 = 0, and u2 = 0.3.  The
sinusoidal patterns for x and y correspond to a counterclockwise circular path
of diameter 6.66, centered at (–2.3570, –2.3570), with a constant speed of
1.412.

6 •• Adaptive Fuzzy Control
265
A theoretical analysis of the boat model can be carried out to confirm that
this trajectory agrees with the assumptions of the model.
0
5
10
15
20
-5
0
5
10
15
20
Figure 6.7 Simulation of fuzzy sub-optimal control for a boat: x-y plot of the
trajectory.

266
Adaptive Fuzzy Control •• 6
PROBLEMS
P6.1
Consider an SISO dynamic system of the form
)
(t
x&
= x2(t) + u(t)
x(t0) = x0.
Assume that there exists a fuzzy model that accurately describes this
system:
IF x(t) ∈Sn AND u(t) ∈Sm THEN 
)
(t
x&
∈San+bm.
The definition for the fuzzy sets Sn and Sm are
Sn = [(n–1)σ,(n+1)σ),
µSn(x) = 
⎩
⎨
⎧
σ
+
σ
−
∈
σ
σ
−
−
else.
0
),
)1
(,
)1
[(
for
/|
|
1
n
n
x
n
x
(a) Estimate the constants {a,b} for each of the following ranges for
x(t): (i) [0,0.5), (ii) [0.5,1.0), (iii) [1.0,4.0), (iv) [4.0,10.0), (v)
[–0.5,0), (vi) [–1.0,–0.5), (vii) [–4.0,–1.0), and (viii) [–10.0,–4.0).
(b) Design, for each of the ranges in part (a), a simple fuzzy controller 
in the form of
IF x(t) ∈Sn THEN u(t) ∈Skn,
i.e., determine the values of k in this fuzzy expression for each
range listed in part (a).
(c) Write a simulation program that combines the actual system, the
fuzzy controllers in part (b), along with condition checking, to
determine when x(t) falls into a particular range to activate a
specific controller designed for that range. Use the following
conditions x0 = 3.0 and ∆t = 0.02 sec. Plot the output x(t) for t
∈[0.0,5.0) in seconds.
P6.2
Consider an SISO dynamic system of the form
)
(t
x&
= sin(x(t)) + u(t)
x(t0) = x0.
Assume that a set of data is collected for output x(t) at the beginning of 
every time interval [tn,tn+∆t). Denote this data set Dx,n with
Dx,n = {x(t0), x(t1), x(t2), …, x(tn)}.
Similarly, assume that a set of data Du,n is collected for the input u(t)
that drives the system, with
Du,n = {u(t0), u(t1), u(t2), …, u(tn)}.
(a) Set up recursive formulas to update the parameters a and b in the
corresponding fuzzy model
IF x(t) ∈Sn AND u(t) ∈Sm THEN 
)
(t
x&
∈San+bm,
with fuzzy sets Sn and Sm defined as
Sn = [(n–1)σ,(n+1)σ),

6 •• Adaptive Fuzzy Control
267
µSn(x) = 
⎩
⎨
⎧
σ
+
σ
−
∈
σ
σ
−
−
else,
0
),
)1
(,
)1
[(
for
/|
|
1
n
n
x
n
x
for the data sets Dx,n and Du,n.
(b) For an input signal, u(t) = sin(πt), write a computer program to
generate input and output profiles Du,n and Dx,n for the system at
time t0 = 0.0 to tn = 10.0 sec. with ∆t = 0.02 sec. Plot the input u(t)
and output x(t) versus time t.
(c) Write a computer program to update the parameters a and b in the
fuzzy model used to approximate the given nonlinear system. Plot
the parameters a(t) and b(t) versus time t.
(d) Design  a simple fuzzy controller in the form of
IF x(t) ∈Sn THEN u(t) ∈Skn
and determine the values of k in the above fuzzy expression as
functions of parameters a and b.
(e) Write a computer program to combine the dynamic system, the
update of the parameters a and b for the fuzzy model, the update of 
the parameter k for the fuzzy controller, and the input/output for
the closed-loop system with initial condition x(0) = 3.0. Plot the
input u(t) and output x(t) versus time t. How long does it take for
the system to converge to final position xf = 0? Does the output
system oscillate at this value? Explain.
P6.3
Consider an SISO dynamic system of the form
)
(t
x&
= sin(t) x(t) + cos(t) u(t)
x(t0) = x0.
Assume that a set of data is collected for output x(t) at the beginning of 
every time interval [tn,tn+∆t). Denote this data set Dx,n with
Dx,n = {x(t0), x(t1), x(t2), …, x(tn)}.
Similarly, assume that a set of data Du,n is collected for the input u(t)
that drives the system, where
Du,n = {u(t0), u(t1), u(t2), …, u(tn)}.
Repeat the steps from (a) through (e) in Problem P6.2 for the present
case.
P6.4
Consider an SISO dynamic system of the form
)
(t
x&
= 3 x(t) + 2 u(t)
x(t0) = x0.
(a) Design a Model Reference Adaptive Fuzzy System so that
u(t) = γ(t) x(t)
will drive the closed-loop system to track the fuzzy model
IF x(t) ∈Sn AND u(t) ∈Sm THEN 
)
(t
x&
∈S6n+4n.
(b) Write a computer program that plots the outputs and inputs of both 
the bounds of the fuzzy model and the dynamic system. Compare
the results. Is the output of the closed-loop dynamic system

268
Adaptive Fuzzy Control •• 6
tracking the fuzzy model, i.e., does it fall in between the two
bounds?
P6.5
Consider an SISO dynamic system of the form
)
(t
x&
= x2(t) + u(t)
x(t0) = x0.
(a) Design a Model Reference Adaptive Fuzzy System, so that
u(t) = γ(t) x(t)
will drive the closed-loop system to track the fuzzy model
IF x(t) ∈Sn AND u(t) ∈Sm THEN 
)
(t
x&
∈S2n+n.
(b) Write a computer program that plots the outputs and inputs of both 
the bounds of the fuzzy model and the dynamic system. Compare
the results. Is the output of the closed-loop dynamic system
tracking the fuzzy model, i.e., does it fall in between the two
bounds?

6 •• Adaptive Fuzzy Control
269
REFERENCES
[1]
K. J. Åstrom and B. Wittenmark.
Adaptive Control.  Reading, MA:
Addison Wesley Publishing Company (1989).
[2]
G. Chen, T. T. Pham, and J. J. Weiss.  “Fuzzy Modeling of Control
Systems,” IEEE Transactions on Aerospace and Electrical Systems,
Vol. 30, pp 414-429, 1995.
[3]
D. E. Kirk.
Optimal Control Theory, An Introduction.  Englewood
Cliffs, NJ:  Prentice-Hall (1970)
[4]
H. Kwakernaak and R. Sivan. Linear Optimal Control Systems.  New
York, NY:  Wiley Interscience (1972).
[5]
J. W. Polderman.
Adaptive Control & Identification:  Conflict or
Conflux?  Amsterdam, the Netherlands:  Centrum voor Wiskunde en
Informatica (1989).
[6]
S. Sastry and M. Bodson. Adaptive Control:  Stability, Convergence,
and Robustness.  Englewood Cliffs, NJ:  Prentice-Hall (1984).
[7]
M. Sugeno.  “An Introductory Survey of Fuzzy Control,”  Information
Sciences, Vol. 36, pp 59-83, 1985.
[8]
M. Sugeno and T. Yasukawa.  “A Fuzzy Logic Based Approach to
Qualitative Modeling,” IEEE Transactions on Fuzzy Systems, Vol. 1,
pp 7-31, 1993.
[9]
T. Takagi and M. Sugeno.  “Fuzzy Identification of Systems and Its
Applications to Modeling and Control,” IEEE Transaction on Systems, 
Man, and Cybernetics, Vol. 15. pp 116-132, 1985.
[10]
R. M. Tong.  “A Control Engineering Review of Fuzzy Systems,”
Automatica, Vol. 13, pp 559-569, 1977.
[11]
R. M. Tong.  “An Annotated Bibliography of Fuzzy Control.”
Industrial Applications of Fuzzy Control (edited by M. Sugeno).
Amsterdam, the Netherlands:  Elsevier Science Publishers (1985), pp
249-269.


CHAPTER 7
Some Applications of Fuzzy Control
This chapter introduces some engineering applications of fuzzy logic and
fuzzy control systems. The purpose of this introduction is mainly to illustrate
workability and applicability of fuzzy logic and fuzzy control in real-life
situations, based on the fuzzy systems theories developed in the previous
chapters of the book.
Three main applications are introduced in the following order: a fuzzy
rule-based expert system for a health care diagnostic system monitoring vital
signs of a human patient, a fuzzy control system for an autofocus camera lens
system, and a fuzzy modeling and design of a fuzzy controller for a servo
system. For each application, a description of the functionality of the system is 
given, followed by the fuzzy logic rules and computer simulation results.
I.
HEALTH MONITORING FUZZY DIAGNOSTIC SYSTEMS
Diagnostic systems are used to monitor the behavior of a process and
identify certain pre-defined patterns that associate with well-known problems.
These problems, once identified, imply suggestions for specific treatment.
Most diagnostic systems are in the form of a rule-based expert system: a set of 
rules is used to describe certain patterns. Observed data are collected and used 
to evaluate these rules. If the rules are logically satisfied, the pattern is
identified, and a problem associated with that pattern is suggested. Each
particular problem might imply a specific treatment. In general, the diagnostic 
systems are used for consultation rather than replacement of human expert.
Therefore, the final decision is still with the human expert to determine the
cause and to prescribe the treatment.
Most current health monitoring systems only check the body’s
temperature, blood pressure, and heart rate against individual upper and lower 
limits and start an audible alarm should each signal move out of its predefined 
range (either above the upper limit or below the lower limit). Then, human
experts (nurses or physicians) will have to examine the patient and probe the
patient’s body further for additional data that lead to proper diagnosis and its
corresponding treatment. 
Other more complicated systems normally involve more sensors that
provide more data but still follow the same pattern of independently checking
individual sets of data against some upper and lower limits. The warning
alarm from these systems only carries a meaning that there is something
wrong with the patient. Thus, attending staff would have to wait for the
physician to make a diagnostic examination before they could properly
prepare necessary equipment for a corresponding treatment. In a life-
threatening situation, reducing the physician’s reaction time (the time between 
the warning and the time proper treatment is given to the patient) by preparing

272
Some Applications of Fuzzy Control •• 7
proper equipment for specific treatment in advance would significantly
increase the patient’s chance of surviving.
In the field of exploration where a team of humans is sent to a distant and
isolated location, it is important to have a health monitoring system that can
give early diagnostic data of each explorer’s health status to prepare for the
continuation of the mission. In space exploration missions, an astronaut who
suddenly gets sick will be diagnosed and the data reviewed by the onboard
physician as well as the physician team on earth to determine if a proper
treatment onboard is possible (for the continuation of the mission) or if
specific treatment on earth is required (for the abortion of the mission).
Therefore, the health monitoring system is playing two roles in every space
mission: to monitor the health of the astronaut, and to aid in determining if a
mission should be continued or aborted (due to serious illness).
This section presents a simple implementation of a health monitoring
expert system utilizing fuzzy rules for its rule base. This health monitoring
expert system consists of a set of sensors monitoring three vital signs of a
patient: body temperature, blood pressure, and heart rate. 
A. Fuzzy Rule-Based Health Monitoring Expert Systems
In this system, we will implement a fuzzy rule-based expert health
monitoring system with three basic sensors: body temperature, heart rate, and
blood pressure. Note that the blood pressure is measured in two readings:
systolic pressure (the maximum pressure that the blood exerts on the blood
vessel, i.e., the aorta, when the pumping chamber of the heart contracts), and
diastolic pressure (the lowest pressure that remains in the small blood vessel
when the pumping chamber of the heart relaxes). For simplicity of discussion, 
only diastolic pressure is used, with the understanding that an additional
reading can be easily added to the system and the number of diagnostic cases
will increase accordingly. The expert system will check for combinations of
data instead of individual data and thus will identify twenty-seven different
scenarios instead of three in the conventional system.
Individual sensors can identify three isolated cases: (i) high body
temperature indicates high fever normally associated with the body fighting
against some infectious virus or bacteria, some hormone disorder such as
hyperthyroidism, some autoimmune disorder such as rheumatoid arthritis, or
some damage to the hypothalamus; (ii) high blood pressure indicates
hypertension normally associated with some kidney disease, hormonal
disorder such as hyperaldoteronism, or acute lead poisoning; and (iii) high
heart rate indicates rapid heart beat normally associated with an increase in
adrenaline (a hormone produced by the adrenal glands) production. In
addition, three more cases can be identified: (iv) low body temperature
indicates hypothermia; (v) low blood pressure normally associates with excess 
bleeding, 
muscle 
damage, 
heart 
valve 
disorder, 
or 
excessive
sweating/urination; and (vi) low heart rate normally associates with abnormal
pacemaker or with the blockage between the pacemaker and the atria where
pacemaker signal is received to stimulate heartbeats.

7 •• Some Applications of Fuzzy Control
273
However, the three individual sensors, each with three settings (normal,
high, and low), can be combined to give 27 different scenarios. With the
perfectly normal case (where all three give normal readings) and the six cases
defined above, there are additionally 20 more cases where combinations of
abnormal readings can be observed. For example, low blood pressure and high 
body temperature might indicate severe exposure to heat, a severe loss of
blood, or lack of body fluid.
Let x1 be the body temperature, x2 the (systolic) blood pressure, x3 the heart 
rate, and y the diagnostic statement. Let Li, Ni, and Hi represent the three sets
of low range, normal range, and high range for sensor data xi, where i = 1, 2,
or 3. Furthermore, let C0, C1, C2, ..., C26 be the individual scenarios that could 
happen for each combination of the different data sets.
L1
H1
N1
x1
98°F
100°F
96°F
µ
1
0
Figure 7.1
Definitions and membership functions of three different ranges
for body temperatures.
L2
H2
N2
x2
120
140
100
µ
1
0
Figure 7.2
Definitions and membership functions of three different ranges
for blood pressure.
L3
H3
N3
x3
70
100
40
µ
1
0
Figure 7.3
Definitions and membership functions of three different ranges
for heart rate.

274
Some Applications of Fuzzy Control •• 7
The low range for the body temperature can be defined as below 98°F.
Similarly, the normal range is 98°F, and high range is above 98°F. One can
define three ranges and three membership functions as in Figure 7.1. These
functions have the mathematical representation as follows:
µL1(x1) = 
⎪⎩
⎪⎨
⎧
∞
<
<
°
°
≤
<
°
−
°
≤
<
∞
−
,
F
98
if
0
F,
98
F
96
if
2
/)
98
(
F,
96
if
1
1
1
1
1
x
x
x
x
µN1(x1) = 
⎪⎩
⎪⎨
⎧
°
≤
<
°
−
°
≤
<
°
−
else,
0
F,
100
F
98
if
2
/)
100
(
F,
98
F
96
if
2
/)
96
(
1
1
1
1
x
x
x
x
µH1(x1) = 
⎪⎩
⎪⎨
⎧
∞
<
<
°
°
≤
<
°
−
°
≤
<
∞
−
,
F
100
if
1
F,
100
F
98
if
2
/)
98
(
F,
98
if
0
1
1
1
1
x
x
x
x
µL2(x2) = 
⎪⎩
⎪⎨
⎧
∞
<
<
≤
<
−
≤
<
∞
−
,
Hg
120
if
0
Hg,
120
Hg
100
if
20
/)
120
(
Hg,
100
if
1
2
2
2
2
x
x
x
x
µN2(x2) = 
⎪⎩
⎪⎨
⎧
≤
<
−
≤
<
−
else,
0
Hg,
140
Hg
120
if
20
/)
140
(
Hg,
120
Hg
100
if
20
/)
100
(
2
2
2
2
x
x
x
x
µH2(x2) = 
⎪⎩
⎪⎨
⎧
∞
<
<
≤
<
−
≤
<
∞
−
,
Hg
140
if
1
Hg,
140
Hg
120
if
20
/)
120
(
Hg,
120
if
0
2
2
2
2
x
x
x
x
µL3(x3) = 
⎪⎩
⎪⎨
⎧
∞
<
<
≤
<
−
≤
<
∞
−
,
Hz
70
if
0
Hz,
70
Hz
40
if
30
/)
70
(
Hz,
40
if
1
3
3
3
3
x
x
x
x
µN3(x3) = 
⎪⎩
⎪⎨
⎧
≤
<
−
≤
<
−
else,
0
Hz,
100
Hz
70
if
30
/)
100
(
Hz,
70
Hz
40
if
30
/)
40
(
3
3
3
3
x
x
x
x
µH3(x3) = 
⎪⎩
⎪⎨
⎧
∞
<
<
≤
<
−
≤
<
∞
−
.
Hz
100
if
1
Hz,
100
Hz
70
if
30
/)
70
(
Hz,
70
if
0
3
3
1
3
x
x
x
x
From this knowledge, four basic rules can be defined as follows:
R(0):
IF x1 is N1 AND x2 is N2 AND x3 is N3 THEN y is C0
R(1):
IF x1 is H1 AND x2 is N2 AND x3 is N3 THEN y is C1
R(2):
IF x1 is N1 AND x2 is H2 AND x3 is N3 THEN y is C2
R(3):
IF x1 is N1 AND x2 is N2 AND x3 is H3 THEN y is C3.

7 •• Some Applications of Fuzzy Control
275
In addition, three scenarios can be identified when only one sensor
provides data that are lower than the lower limit:
R(4):
IF x1 is L1 AND x2 is N2 AND x3 is N3 THEN y is C4
R(5):
IF x1 is N1 AND x2 is L2 AND x3 is N3 THEN y is C5
R(6):
IF x1 is N1 AND x2 is N2 AND x3 is L3 THEN y is C6.
It can be seen that C0 corresponds to normal condition, C1 high fever, C2
hypertension, C3 rapid heart rate, C4 hypothermia, C5 low blood pressure, and 
C6 low heart rate. The remaining 20 cases can be defined as follows:
R(7):
IF x1 is L1 AND x2 is L2 AND x3 is L3 THEN y is C7
R(8):
IF x1 is L1 AND x2 is L2 AND x3 is N3 THEN y is C8
R(9):
IF x1 is L1 AND x2 is L2 AND x3 is H3 THEN y is C9
R(10): IF x1 is L1 AND x2 is N2 AND x3 is L3 THEN y is C10
R(11): IF x1 is L1 AND x2 is N2 AND x3 is H3 THEN y is C11
R(12): IF x1 is L1 AND x2 is H2 AND x3 is L3 THEN y is C12
R(13): IF x1 is L1 AND x2 is H2 AND x3 is N3 THEN y is C13
R(14): IF x1 is L1 AND x2 is H2 AND x3 is H3 THEN y is C14
R(15): IF x1 is N1 AND x2 is L2 AND x3 is L3 THEN y is C15
R(16): IF x1 is N1 AND x2 is L2 AND x3 is H3 THEN y is C16
R(17): IF x1 is N1 AND x2 is H2 AND x3 is L3 THEN y is C17
R(18): IF x1 is N1 AND x2 is H2 AND x3 is H3 THEN y is C18
R(19): IF x1 is H1 AND x2 is L2 AND x3 is L3 THEN y is C19
R(20): IF x1 is H1 AND x2 is L2 AND x3 is N3 THEN y is C20
R(21): IF x1 is H1 AND x2 is L2 AND x3 is H3 THEN y is C21
R(22): IF x1 is H1 AND x2 is N2 AND x3 is L3 THEN y is C22
R(23): IF x1 is H1 AND x2 is N2 AND x3 is H3 THEN y is C23
R(24): IF x1 is H1 AND x2 is H2 AND x3 is L3 THEN y is C24
R(25): IF x1 is H1 AND x2 is H2 AND x3 is N3 THEN y is C25
R(26): IF x1 is H1 AND x2 is H2 AND x3 is H3 THEN y is C26.
Physicians can provide their knowledge in medical science to label
individual cases Ci for i = 7, 8, ..., 26. For example, the condition C26 with
high body temperature, high blood pressure, and high heart rate might indicate 
hyperthyroidism (a condition in which excess thyroid hormone is produced);
the condition C25 with high body temperature, high blood pressure, and
normal heart rate might indicate pheochromocytoma (a tumor in the adrenal
gland causing overproduction of a hormone that triggers high blood pressure
and raises body temperature), or the condition C20 with high body
temperature, low blood pressure, and normal heart rate might indicate heat
stroke (a condition associated with prolonged exposure to heat).
The membership function for a rule is calculated as a minimum of the
memberships of individual conditions, i.e., the membership functions for rules 
R(0), R(1), R(2), and R(3) are:
µR(0)(x1,x2,x3) = min{ µN1(x1), µN2(x2), µN3(x3) },
µR(1)(x1,x2,x3) = min{ µH1(x1), µN2(x2), µN3(x3) },
µR(2)(x1,x2,x3) = min{ µN1(x1), µH2(x2), µN3(x3) }, 
µR(3)(x1,x2,x3) = min{ µN1(x1), µN2(x2), µH3(x3) }.

276
Some Applications of Fuzzy Control •• 7
The membership functions for rules R(4) through R(26) can be similarly
established according to their corresponding rules given earlier.
B. Computer Simulations
In this section, numerical simulations are created to demonstrate the
workability of the 27 rules given in the previous section representing a health
monitoring expert system. 
Example 7.1. In this example, the rules R(1) for high fever, R(2) for
hypertension, and R(3) for rapid heart rate are tested. The temperature profile
x1(t), blood pressure profile x2(t), and heart rate profile x3(t) are generated
according to the following formulas:
x1(t) = 98 + 4 sin( 20
π t) e(t) + n(t),
x2(t) = 120 + 40 sin( 20
π t) e(t – 20) + n(t),
x3(t) = 70 + 60 sin( 20
π t) e(t – 40) + n(t),
where the function n(t) is random white noise and e(t) the rectangular envelop 
function of the form:
e(t) = 
⎩
⎨
⎧
≤
≤
else.
0
,
20
0
if
1
x
.
These three formulas for x1(t), x2(t), and x3(t) create three separate time
intervals, I1 ≈ [7,13), I2 ≈ [27,33), and I3 ≈ [47,53). These data profiles will
result in rule R(1) being valid in I1, rule R(2) valid in I2, and rule R(3) valid in I3.
Thus, the expected membership function µR(1)(x1,x2,x3) should yield the value 1 
for t ∈I1 and the value 0 for everywhere else. Similarly, the expected
membership function µR(2)(x1,x2,x3) should yield the value 1 for t ∈I2 and the
value 0 for everywhere else, and the membership function µR(3)(x1,x2,x3) should 
yield the value 1 for t ∈I3 and the value 0 for everywhere else.
Example 7.2. In this example, the rule R(20) for heat stroke condition (high 
body temperature, low blood pressure, and normal heart rate) is tested. The
temperature profile x1(t), blood pressure profile x2(t), and heart rate profile
x3(t) are generated according to the following formulas:
x1(t) = 98 + 4 sin( 40
π t) e(t) + n(t),
x2(t) = 120 – 40 sin( 40
π t) e(t) + n(t),
x3(t) = 70 + n(t),
where the function n(t) is random white noise and e(t) the rectangular envelop 
function described in the previous example. These three formulas for x1(t),
x2(t), and x3(t) create an interval I4 ≈ [10,30) where the rule R(20) will be valid, 
i.e., the membership function µR(20)(x1,x2,x3) should yield the value 1 for t ∈I4
and the value 0 for everywhere else.

7 •• Some Applications of Fuzzy Control
277
Example 7.3. In this example, the rule R(26) for hyperthyroidism (high
body temperature, high blood pressure, and rapid heart rate) is tested. The
temperature profile x1(t), blood pressure profile x2(t), and heart rate profile
x3(t) are generated according to the following formulas:
x1(t) = 98 + 4 sin( 40
π t) e(t) + n(t),
x2(t) = 120 + 40 sin( 40
π t) e(t) + n(t),
x3(t) = 70 + 60 sin( 40
π t) e(t) + n(t),
where the function n(t) is random white noise and e(t) the rectangular envelop 
function described in Example 7.1. These three formulas for x1(t), x2(t), and
x3(t) create an interval I5 ≈ [10,30) where the rule R(26) will be valid, i.e., the
membership function µR(26)(x1,x2,x3) should yield the value 1 for t ∈I5 and the
value 0 for everywhere else.
C. Numerical Results
In this section, computer simulations are created for the three examples
listed in the previous section. Data are generated at the rate of one sample per 
second for the duration of 75 seconds. For each example, three sets of data, X1
= {x1(n) | n = 0, 1, 2, …, 74 }, X2 = {x2(n) | n = 0, 1, 2, …, 74 }, and X3 =
{x3(n) | n = 0, 1, 2, …, 74 }, are generated. In Example 7.1, the membership
functions µR(1)(x1(n),x2(n),x3(n)), µR(2)(x1(n),x2(n),x3(n)), µR(3)(x1(n),x2(n),x3(n))
are generated for n = 0, 1, 2, …, 74. In Examples 7.2 and 7.3, the membership 
functions µR(20)(x1(n),x2(n),x3(n)) and µR(26)(x1(n),x2(n),x3(n)) are also generated
for n = 0, 1, 2, …, 74.
Figures 7.4, 7.5, and 7.6 show the plot of the data x1(t) for body
temperature, x2(t) for blood pressure, and x3(t) for heart rate generated for
Example 7.1. Figure 7.8 shows the resulting membership functions of the
three conditions C1, C2, and C3 tested in Example 7.1. The data are generated
at the beginning of each time interval of 1 second, for 75 seconds. In the first
20 seconds, x2(t) and x3(t) are in normal range, and x1(t) is gradually moving
toward the high range, causing the membership function of condition C1 to
rise toward 1. Similarly, during the time interval [20,40], x1(t) and x3(t) are in 
normal range, and x2(t) is gradually moving toward the high range, causing the 
membership function of condition C2 to rise toward 1; and during the time
interval [40,60], x1(t) and x2(t) are in normal range, and x3(t) is gradually
moving toward the high range, causing the membership function of condition
C3 to rise toward 1. After that, all three signals go back to normal, causing the 
membership function for condition C0 to rise toward 1.
Figures 7.8, 7.9, and 7.10 show the plot of the data x1(t), x2(t), and x3(t)
generated for Example 7.2. Figure 7.11 shows the resulting membership
function for condition C20. Here, conditions for x1(t) to be high, x2(t) to be low, 
and x3(t) to be normal are simulated. The corresponding membership for
condition C20 is shown to confirm that the rule R(20) is valid.

278
Some Applications of Fuzzy Control •• 7
97
98
99
100
101
102
103
0
10
20
30
40
50
60
70
80
Figure 7.4 Body temperature profile for Example 7.1.
110
130
150
170
0
10
20
30
40
50
60
70
80
Figure 7.5 Blood pressure profile for Example 7.1.
60
80
100
120
140
0
10
20
30
40
50
60
70
80
Figure 7.6 Heart rate profile for Example 7.1.
-0.2
0
0.2
0.4
0.6
0.8
1
1.2
0
10
20
30
40
50
60
70
80
Figure 7.7 Membership functions of conditions C1, C2, and C3 for Example
7.1.

7 •• Some Applications of Fuzzy Control
279
97
98
99
100
101
102
103
0
10
20
30
40
50
60
70
80
Figure 7.8
Body temperature profile for Example 7.2.
70
80
90
100
110
120
130
0
10
20
30
40
50
60
70
80
Figure 7.9
Blood pressure profile for Example 7.2.
60
65
70
75
80
0
10
20
30
40
50
60
70
80
Figure 7.10 Heart rate profile for Example 7.2.
0
0.2
0.4
0.6
0.8
1
0
10
20
30
40
50
60
70
80
Figure 7.11 Membership function of condition C20 for Example 7.2.

280
Some Applications of Fuzzy Control •• 7
97
98
99
100
101
102
103
0
10
20
30
40
50
60
70
80
Figure 7.12 Body temperature profile for Example 7.3.
110
120
130
140
150
160
170
0
10
20
30
40
50
60
70
80
Figure 7.13 Blood pressure profile for Example 7.3.
60
80
100
120
140
0
10
20
30
40
50
60
70
80
Figure 7.14 Heart rate profile for Example 7.3.
0
0.5
1
0
10
20
30
40
50
60
70
80
Figure 7.15 Membership function of condition C26 for Example 7.3.

7 •• Some Applications of Fuzzy Control
281
Figures 7.12, 7.13, and 7.14 show the plot of the data x1(t), x2(t), and x3(t)
generated for Example 7.3. Here, conditions for x1(t) to be high, x2(t) to be
high, and x3(t) to be high are simulated. The corresponding membership for
condition C26 is shown in Figure 7.15 to confirm that the rule R(26) is valid.
II. FUZZY CONTROL OF IMAGE SHARPNESS 
FOR AUTOFOCUS CAMERAS
Recent implementation of fuzzy logic in popular household items has
increased the public awareness of fuzzy logic. One of such applications is the
use of fuzzy logic rules to control a focus ring of a camera to allow automatic 
focusing for a sharp image. 
A camera is an imaging system consisting of a set of lens that projects an
image of a scene onto a sensor (either a film plate for conventional cameras or 
a set of CCD sensors for digital cameras). Traditional cameras require humans 
to manually adjust the focus control ring to obtain a sharp picture, i.e., the
focusing position where the film plate (or sensor plate) coincides with the
projected image. If the film plate is not at the position the image is projected,
the captured picture on the film plate (or sensor plate) appears to be blurry;
this phenomenon is called “out-of-focus.”
Image-processing techniques have been developed to help determine the
quality of a digital picture. The quality of a picture can be the color balance,
the smoothness of spatial picture elements, the sharpness of the image, etc.
For the purpose of controlling the focusing ring, the sharpness of an image is
used as the determining factor. This quality determination technique for a
digital image is used to help control the focusing ring of the lens system, so
that the film plate is placed precisely at the distance an image is projected and 
a sharp picture is thus obtained. It is understood that the image is in-focus
when its sharpness is at maximum level. 
From a control standpoint, a servomotor is connected to the internal gear
that controls the focusing ring to adjust the focal point and projected image
point. The position of this focusing ring determines the position of each lens
element to put the image (of an object) at the film plate located at a fixed
distance behind the lens system. This automatic control system constitutes an
autofocus lens of a camera. 
In this section, the use of fuzzy logic to control the focusing ring in an
autofocus lens system is outlined. This control scheme is a combination of
position fuzzy control rules and the calculated sharpness of a picture as
feedback. The calculation effort involved in this procedure is relatively
simple; therefore, it is easy to be implemented on an inexpensive system with
little computing power. The operating cycle can be summarized in four steps:
(i) a digital image is captured, (ii) the sharpness index is calculated, (iii) the
new position of the focusing ring is calculated and sent to the mechanical
servo, and (iv) the servo controls the ring to the desired position. 

282
Some Applications of Fuzzy Control •• 7
This section describes a procedure to calculate the sharpness of a digital
image, and the fuzzy control algorithm that uses this sharpness index as
feedback to control the focusing ring to maximize the sharpness index.
A. Basic Image Processing Techniques
A digital picture consists of a two-dimensional array of picture elements
(or pixels). Each pixel represents light intensity at a spatial location. Together, 
the pixels represent the image of an object (or a scene of several objects).
There are several numerical techniques to determine if a digital picture is
sharp (or in focus). This section describes a basic technique based on the
edge-detection algorithm. The edge-detection algorithm will determine the
edge of the object. It is assumed that a sharp picture will yield clearly defined 
edges around the objects. Therefore, a sharp picture will yield more edges
than a blurred picture (of the same scenario or of the same object). This edge-
detection technique is introduced here because it is simple to understand,
computationally efficient for real-time implementation, and effective enough
for determining the sharpness of a digital picture.
Edge-detection algorithm is a numerical method performed on the spatial
relations between adjacent pixels to determine the boundary between two
distinct regions on a two-dimensional space. The method consists of two
steps: (i) calculation of the difference between two adjacent pixels, and (ii)
applying a threshold filter to determine if this difference represents an edge of 
an object.
Let i(n,m) represents a gray-scaled digital picture of dimension N×M. The
edge-detection algorithm will calculate a binary image e(n,m) (with pixels of
values of either zero or one) representing the edges of the objects in the digital 
picture i(n,m). The edge-detection algorithm can be represented by the
formula:
e(n,m) = 
⎩
⎨
⎧
θ
≥
+
−
else,
0
|)
,1
(
)
,
(
|
if
1
m
n
i
m
n
i
(7.1)
calculate the
difference in value
of a pixel and its
neighbor pixel
compare this
difference against a
predetermined
threshold
if higher, the pixel
represents an edge
if lower, the pixel
represents an inner
region
update the counter
to keep track of how
many pixels are
representing edges
Figure 7.16
Algorithm for calculating sharpness index of a digital picture.

7 •• Some Applications of Fuzzy Control
283
where θ is a pre-determined numerical constant representing a threshold that
distinguishes between edge and non-edge. A digital picture is considered
sharp if the edges are distinctive, i.e., the number of pixels representing the
edges calculated in (7.1) is at its maximum. A blurred picture will not produce 
so many distinct edges. Therefore, a scalar variable s can be formulated as
follows to determine the sharpness of a digital picture:
s = ∑∑
=
=
N
n
M
m
m
n
e
1
1
)
,
(
.
(7.2)
The variable s is sometimes referred to as a sharpness index. The higher the
sharpness index, the more focused the picture becomes.  This quantity can
also be normalized so that its range is standardized at between the value of
zero and one. The normalized sharpness is calculated as
s = 
∑∑
=
=
N
n
M
m
m
n
e
NM
1
1
)
,
(
1
.
The higher the value of s, the more contrast is the image. It is reasoned that for 
the same scene, the image which contains more contrast is assumed to be the
one correctly focused. When incorrectly focused, the image becomes blurred.
This effect is similar to that of a smooth filter. Therefore, the contrast is less
for images that are off-focused.
Figure 7.16 depicts an algorithm for calculating the sharpness index of a
digital picture. A typical implementation of this calculation using C-
programming language is listed in Figure 7.17 to illustrate the development
efficiency of the algorithm.
B. Fuzzy Control Model
The fuzzy control model is relatively simple for a position control. The
rules can be intuitively derived with minor adjustment to improve the
performance.
1. Fixed Rate. This is the simplest form of position control. For each
control cycle, the position of the focusing ring is moved by a fixed constant in 
either direction. The focusing ring can also stay where it was. Thus, there are
only three choices: (i) move the focusing ring counterclockwise by an angle
∆θ, (ii) move the focusing ring clockwise by an angle ∆θ, or (iii) do not move 
int sharpnessIndex( int image[][], int Ndim, intMdim, int t )
{
  int sIndex = 0;
  for( int n = 1; n <= Ndim; n++ )
    for( int m = 1; m <= Mdim; m++ )
      if( abs(image[n][m]-image[n+1][m]) < t ) sIndex++
  return( sIndex );
}
Figure 7.17
Implementation of sharpness index using C-programming
language.

284
Some Applications of Fuzzy Control •• 7
the focusing ring at all. These selections are similar to that of a bang-bang
control, where the fixed control measure is either positive or negative. When
the system is in a deadband, the control measure is zero.
Basically, the three rules above can be applied to the three situations: when 
the focusing is moving in the right direction, i.e., the sharpness index is
increasing, keep moving in that direction; when the focusing ring is moving in 
the wrong direction, i.e., the sharpness index is decreasing, start moving in the 
opposite direction; and when there is no improvement in the sharpness index,
stop.
Let σnow be the current sharpness index, σprev the previous sharpness index, 
θnow the current position of the focusing ring, θnow the previous position of the 
focusing ring, Dprev (which can be either +1 or –1) the previous direction of
the ring movement, and ∆θ the fixed step that the focusing ring can move for
each control cycle. Then these three rules can be given as follows:
R(1):
IF (σnow – σprev) is POSITIVE 
THEN Dnow = Dprev  AND θnow = θprev + Dnow∆θ,
R(2):
IF (σnow – σprev) is NEGATIVE
THEN Dnow = –Dprev  AND θnow = θprev + Dnow∆θ,
R(3):
IF (σnow – σprev) is ZERO
THEN Dnow = Dprev  AND θnow = θprev.
For each description POSITIVE, NEGATIVE, and ZERO, there associate
three ranges RPOSITIVE = [x1,∞), RNEGATIVE = [–x1,–∞), and RZERO = [–x2,x2], and 
three membership functions µPOSITIVE(⋅), µNEGATIVE(⋅), and µZERO(⋅). These
ranges and membership functions will determine the final numerical angle that 
the focusing ring should be rotated to. 
Figure 7.18 shows a typical setup for the three ranges RPOSITIVE, RNEGATIVE,
and RZERO, and their corresponding membership functions µPOSITIVE(⋅),
µNEGATIVE(⋅), and µZERO(⋅). In this setup, the constant x1 is set to be equal to x2,
i.e., x1 = x2 = α. The membership functions in Figure 7.18 can be expressed
mathematically as:
µZERO
µ
µPOSITIVE
µNEGATIVE
0
α
–α
∞
–∞
R
Figure 7.18
Membership functions µPOSITIVE(⋅), µNEGATIVE(⋅), and µZERO(⋅).

7 •• Some Applications of Fuzzy Control
285
µNEGATIVE(x) = 
⎪⎩
⎪⎨
⎧
≤
<
α
α
−
α
≤
<
∞
−
else,
0
,0
if
/
,
if
1
x
x
x
(7.3)
µZERO(x) = 
⎪⎩
⎪⎨
⎧
α
≤
<
α
−
α
≤
<
α
−
α
α
+
else,
0
,
0
if
/)
(
,0
if
/)
(
x
x
x
x
(7.4)
µPOSITIVE(x) = 
⎪⎩
⎪⎨
⎧
∞
<
≤
α
α
<
≤
α
else.
0
,
if
1
,
0
if
/
x
x
x
(7.5)
These specific definitions, along with the weighted average method of
defuzzification, lead to the exact formulation of Dnow and θnow  as follows:
Dnow = 
⎩
⎨
⎧
≥
σ
−
σ
−
<
σ
−
σ
,0
)
(
if
,0
)
(
if
prev
now
prev
prev
now
prev
D
D
(7.6)
θnow  = 
⎪
⎪
⎩
⎪⎪
⎨
⎧
σ
−
σ
≤
α
θ
∆
+
θ
α
<
σ
−
σ
≤
θ
∆
β
+
θ
<
σ
−
σ
≤
α
−
θ
∆
β
−
θ
α
−
<
σ
−
σ
θ
∆
+
θ
),
(
if
,
)
(
0
if
,0
)
(
if
,
)
(
if
prev
now
now
prev
prev
now
now
prev
prev
now
now
prev
prev
now
now
prev
D
D
D
D
(7.7)
where
β = 
α
σ
−
σ
prev
now
.
(7.8)
2. Adjustable Control Rate. It was reasoned that the fixed rate control
above might be sped up faster if step ∆θ is initially set at a large value and
thus moves the focusing ring closer and faster to the right setting. As it moves 
past the right setting, the focusing ring will be moved back in the opposite
direction, similar to the situation of overshooting. Here, when this change of
direction occurs, step ∆θ will be adjusted to be smaller, thus providing a finer 
control at the range closer to the right setting. The same three rules in the
fixed rate control above can be modified to reflect this variable rate strategy:
R(1):
IF (σnow – σprev) is POSITIVE 
THEN Dnow = Dprev  AND θnow = θprev + Dprev∆θ,
R(2):
IF (σnow – σprev) is NEGATIVE
THEN Dnow = –Dprev  AND θnow = θprev + γDnow∆θ,
R(3):
IF (σnow – σprev) is ZERO
THEN Dnow = Dprev  AND θnow = θprev.
Again, for each description POSITIVE, NEGATIVE, and ZERO, there
associate three ranges RPOSITIVE = [x1,∞), RNEGATIVE = [–x1,–∞), and RZERO =
[–x2,x2], and three membership functions µPOSITIVE(⋅), µNEGATIVE(⋅), and
µZERO(⋅). These ranges and membership functions will determine the final
numerical angle that the focusing ring should be rotated to.

286
Some Applications of Fuzzy Control •• 7
The constant γ in Rule R(2) is between zero and one (or γ ∈(0,1]). When
one selects γ = 1, the rules converge to the fixed rate control presented earlier. 
When one selects any arbitrary 0 < γ < 1, the steps are refined smaller each
time the focusing ring goes past its targeted setting. One can also select a
scheme to calculate different values for the parameter γ for every control cycle 
according to the adaptive scheme discussed in Chapter 6.
If the definitions for RPOSITIVE,
RNEGATIVE, and RZERO, and their
corresponding membership functions µPOSITIVE(⋅), µNEGATIVE(⋅), and µZERO(⋅)
defined in Sections B.1, B.2, and B.3 of Chapter 2 are used, the
defuzzification process of the three fuzzy rules R(1), R(2), and R(3) will lead
directly to the following closed-form formulas:
Dnow = 
⎩
⎨
⎧
≥
σ
−
σ
−
<
σ
−
σ
,0
)
(
if
,0
)
(
if
prev
now
prev
prev
now
prev
D
D
(7.9)
θnow  = 
⎪
⎪
⎩
⎪⎪
⎨
⎧
σ
−
σ
≤
α
θ
∆
+
θ
α
<
σ
−
σ
≤
θ
∆
β
+
θ
<
σ
−
σ
≤
α
−
θ
∆
β
−
θ
α
−
<
σ
−
σ
θ
∆
+
θ
),
(
if
,
)
(
0
if
,0
)
(
if
,
)
(
if
prev
now
now
prev
prev
now
now
prev
prev
now
now
prev
prev
now
now
prev
D
D
D
D
(7.10)
where
β = 
α
σ
−
σ
prev
now
.
(7.11)
C. Computer Simulation Results
In this computer simulation, simulation of a lens system is developed to
show that a correctly focused image blurs away as the focusing ring is rotated
away from the right position. A fuzzy control system is implemented to
control the position of the focusing ring on the lens system. Sharpness of an
image is used as feedback to the fuzzy control system.
1. Focusing System. A focusing system is simulated so that when the
focusing ring is not in the correct position, in this case, the image is blurred.
The more the focusing ring is off target, the more the image is blurred. In
order to create the blurring effect, one can use the smoothing filter to apply to 
the original image (the one in focus). Let the in-focus image be Iin-focus(n,m);
the off-focus image Ioff-focus(n,m) can be generated according to the difference
δ between the correct distance and the estimated distance as follows:
Ioff-focus(n,m) = 
2)1
2
(
1
+
δ
∑∑
δ
δ
−
=
δ
δ
−
=
−
+
+
j
k
k
m
j
n
I
)
,
(
focus
in
.
(7.12)
The formula above is the smoothing filter base on the average value of the
pixels inside the square area around a pixel of indices (n,m). The larger the
size of this square area, the more blurred the resulting image. Therefore, to
create the blurring effect, we use the difference δ between the correct distance 

7 •• Some Applications of Fuzzy Control
287
and the estimated distance to determine the size of the square area used in the 
smoothing filter in (7.12).
2. Fuzzy Control System. The fuzzy control system will use the fuzzy
rules described earlier, with the index of sharpness calculated from the
formulation for edge detection used as feedback to control the focusing ring of 
the camera.
3. Computer Simulation Results. Three experiments are performed in the
simulation. The first experiment demonstrates the fixed rate control algorithm. 
The second and third experiments demonstrate the adjustable control
algorithm. The results are shown in Figures 7.19, 7.20, and 7.21. The
corresponding control data are listed in Tables 7.1, 7.2, and 7.3.
Experiment 1. An object (the fireworks) is at a large distance (infinity
setting) from the lens. The control algorithm initializes the system to start at
the closest distance allowable on the lens system. This distance represents the
macro setting. From this distance, the lens focusing ring is moved one step at
a time at a fixed rate of 10° for each control cycle. The time duration between 
two consecutive control cycles is 100 milliseconds. 
Experiment 2. An object (the astronaut) is at a moderate distance (between 
the macro setting and infinity setting) from the lens. The control algorithm
also initializes the system to start at the macro setting. From this distance, the
lens focusing ring is moved one step at a time at an initial rate of 20° for each 
control cycle. The time duration between two consecutive control cycles is
100 milliseconds. At the first overshoot, the control algorithm reverses the
direction of the focusing ring and reduces the control step to the rate of 10° for 
each control cycle. This reduction corresponds to the selection of the constant 
γ = 0.5 in the adjustable rate algorithm.
Experiment 3. This is an extension of automatic focusing to a microscope.
This application is particularly useful for the space program where biological
experiments are often conducted in the space shuttle (or in the future space
station) with little supervision. In this scenario, data are collected
automatically and sent back to Earth for analysis by humans.
The object for this experiment is a slide of plant cells. This is a biological
experiment in which microscopic lives are observed unattended through a
microscope. The condition for growth is dependent on the nature of the
experiment. The microscope is used in such a way that cells’ lives are
preserved. This life-preservation requirement is normally satisfied by using
the phase-contrast microscope (a special kind of microscope that uses the
difference in the refraction indices instead of the intensity of the reflected
light). The phase-contrast microscope only records images in black-and-white
data, which is the format used in this example.
For color images, one can convert it into gray-level by applying the
average filter that calculates the average of the three main colors (namely, red, 
green, and blue) representing each color pixel into a single scalar quantity
representing a gray-level pixel.

288
Some Applications of Fuzzy Control •• 7
(a) t = 100 msec
(b) t = 200 msec
(c) t = 300 msec
σ = 104
σ = 223
σ = 542
θ = 10°
θ = 20°
θ = 30°
(d) t = 400 msec
(e) t = 500 msec
(f)
t = 600 msec
σ = 1077
σ = 1855
σ = 4286
θ = 40°
θ = 50°
θ = 60°
(g) t = 700 msec
(h) t = 800 msec
(i)
t = 900 msec
σ = 9384
σ = 30247
σ = 30247
θ = 70°
θ = 80°
θ = 80°
Figure 7.19
Automatic control of an autofocus lens system for an image of the 
fireworks display at distance of infinity (from the lens). The
control ring is starting at the macro end, i.e., at the smallest
distance allowed. The angle is adjusted by 10° in either direction
every cycle.
Table 7.1
Numerical Data and Results for Experiment 1
time t
sharpness σ
position θ
rule R(1)
rule R(2)
rule R(3)
100 msec
104
10°
1
0
0
200 msec
223
20°
1
0
0
300 msec
542
30°
1
0
0
400 msec
1077
40°
1
0
0
500 msec
1855
50°
1
0
0
600 msec
4266
60°
1
0
0
700 msec
9384
70°
1
0
0
800 msec
30247
80°
1
0
0
900 msec
30247
80°
0
0
1

7 •• Some Applications of Fuzzy Control
289
(a) t = 100 msec
(b) t = 200 msec
(c) t = 300 msec
σ = 2069
σ = 3878
σ = 7596
θ = 10°
θ = 30°
θ = 50°
(c) t = 400 msec
(d) t = 500 msec
(e) t = 600 msec
σ = 10279
σ = 8977
σ = 12023
θ = 70°
θ = 90°
θ = 80°
(f)
t = 700 msec
(g) t = 800 msec
(h) t = 900 msec
σ = 14177
σ = 22021
σ = 22021
θ = 75°
θ = 77°
θ = 78°
Figure 7.20
Automatic control of an autofocus lens system for an image of an
astronaut.
Table 7.2
Numerical Data and Results for Experiment 2
time t
sharpness σ
position θ
rule R(1)
rule R(2)
rule R(3)
100 msec
104
10°
1
0
0
200 msec
223
30°
1
0
0
300 msec
542
50°
1
0
0
400 msec
1077
70°
1
0
0
500 msec
1855
90°
1
0
0
600 msec
4266
80°
0
1
0
700 msec
9384
75°
0
1
0
800 msec
30247
77°
0
1
0
900 msec
30247
78°
0
0
1

290
Some Applications of Fuzzy Control •• 7
(a) t = 200 msec
(b) t = 400 msec
(c) t = 600 msec
σ = 820
σ = 930
σ = 5437
θ = 120°
θ = 100°
θ = 80°
(c) t = 800 msec
(d) t = 1000 msec
(e) t = 1200 msec
σ = 1492
σ = 2798
σ = 5437
θ = 60°
θ = 40°
θ = 30°
(f)
t = 1400 msec
(g) t = 1600 msec
(h) t = 1800 msec
σ = 11488
σ = 21031
σ = 30893
θ = 20°
θ = 10°
θ = 0°
Figure 7.21
Automatic control of an autofocus lens system for an image of a
set of plant cells on a microscope.
Table 7.3
Numerical Data and Results for Experiment 3
time t
sharpness σ
position θ
rule R(1)
rule R(2)
rule R(3)
200 msec
820
120°
1
0
0
400 msec
930
100°
1
0
0
600 msec
5437
80°
1
0
0
800 msec
1492
60°
1
0
0
1000 msec
2798
40°
0
1
0
1200 msec
5437
30°
0
1
0
1400 msec
11488
20°
0
1
0
1600 msec
21031
10°
0
1
0
1800 msec
30893
0°
0
0
1

7 •• Some Applications of Fuzzy Control
291
III. FUZZY CONTROL FOR SERVO MECHANIC SYSTEMS
Servo mechanic systems are electromechanical machines that drive
mechanical platforms to achieve rotational movements. A servo mechanic
system can be used on a miniature scale to drive the focusing ring of an
automatic focusing lens system of a camera. It can be used on a larger scale to 
drive the joint of each link of a robotic manipulator. It can also be used to
drive electric automobiles. Figure 7.22 shows the exterior appearance of a
typical industrial servo motor.
Traditionally, servo mechanic systems were treated with linear control
systems. The servo mechanic system was modeled as a linear system and a
corresponding controller was designed based on the model. This approach was 
popular partly because of its simple design that is easy for implementation,
and partly because of the accuracy of the linear model that approximates the
behavior of an actual servo mechanic system in its operating range. Outside
this operating range, the error will magnify and require different treatments
such as a piecewise linear approach or an adaptive approach.
A servo mechanic system can be characterized by a linear system of the
form
J
2
2
dt
d
θ(t) + K dt
d θ(t) + B θ(t) = τ(t),
where B is the coefficient representing damping characteristic, K the stiffness
characteristic, J the inertia characteristic, θ(t) the state variable representing an 
angle displacement, and τ(t) the applied torque. A more complicated model
will include the electrical current used as the control input to deliver necessary 
torque τ(t). Normally, this model can accurately approximate the real servo
motor in a certain operating range. Outside this operating range, the model
will result in severe error and the general practice is to use another different
set of constant {J,K,B}.
Figure 7.22
A typical servo motor.

292
Some Applications of Fuzzy Control •• 7
A complicated model of a servo motor often includes a gear box. This is an 
additional mechanical device containing some gears connecting to the
rotational axis of the servo motor. The result is an increase in angle
displacement by a constant factor. Correspondingly, the angular velocity and
angular acceleration will also be increased by the same constant factor. Figure 
7.23 shows an example of two sets of mechanical gears representing a gear
box. Mathematically, a gear box can be modeled by a multiplication factor.
This is the simplest model. A more complicated model of a gear box normally 
includes a time delay factor, slippage (for belt-driven gears), and backlash (for 
loosely connected gears).
This section presents application of fuzzy control to a general class of
servo mechanic systems. Computer simulations are developed and numerical
results are used to illustrate the concepts.
A. Fuzzy Modeling of a Servo Mechanic System
A dynamic system can be modeled by a set of fuzzy logic rules in the form 
of IF-THEN statements, where the conditional IF-clause consists of logical
conditions concerning the values of its state variables, and the consequence
THEN-clause consists of values of its transition states. A servo mechanic
system with two state variables, x1(t) representing the angle displacement θ(t)
and x2(t) representing the angular velocity 
)
(t
θ&
, and one control input, u(t)
representing the torque τ(t), can be represented with the fuzzy logic rules as
follows:
R(1):
IF x1 ∈Sn AND x2 ∈Sm AND u ∈Sp THEN 
1x& ∈Sm,
R(2):
IF x1 ∈Sn AND x2 ∈Sm AND u ∈Sp THEN 
2
x& ∈San+bm+cp,
where a = −K/J, b = −B/J, and c = 1/J, and K is the stiffness coefficient, B the 
damping coefficient, and J the moment of inertia of the servo mechanic
system.
(a)
(b)
Figure 7.23
Gears and accessory: (a) direct connection and (b) a segment of
chain used to drive belt-driven gear.

7 •• Some Applications of Fuzzy Control
293
It has been shown that under specific definitions for each fuzzy set indexed 
by an arbitrary integer n as follows,
Sn = [(n−1)σ,(n+1)σ],
µSm(x) = 
⎩
⎨
⎧
σ
+
≤
≤
σ
−
−
σ
−
else,
0
,
)1
(
)1
(
|
/
|
1
n
x
n
n
x
the two fuzzy rules above represent a class of dynamic systems with state
variables behaving within two sets of upper and lower bounds:
ζ1(t) ≤x1(t) ≤ξ1(t)
and
ζ2(t) ≤x2(t) ≤ξ2(t),
where
⎥
⎦
⎤
⎢
⎣
⎡
ζ
ζ
2
1
&
&
=
⎥⎦
⎤
⎢⎣
⎡
−
−
J
B
J
K
/
/
1
0
⎥⎦
⎤
⎢⎣
⎡
ζ
ζ
2
1
 + 
⎥⎦
⎤
⎢⎣
⎡
J
/
1
0
u(t) −
⎥⎦
⎤
⎢⎣
⎡
δ
δ ,
⎥
⎦
⎤
⎢
⎣
⎡
ξ
ξ
2
1
&
&
=
⎥⎦
⎤
⎢⎣
⎡
−
−
J
B
J
K
/
/
1
0
⎥⎦
⎤
⎢⎣
⎡
ξ
ξ
2
1  + 
⎥⎦
⎤
⎢⎣
⎡
J
/
1
0
u(t) + 
⎥⎦
⎤
⎢⎣
⎡
δ
δ ,
and
δ =(1 + |K/J| + |B/J| + |1/J| )σ.
The selection of the constant σ will determine the width between the upper 
and lower bounds, i.e., the flexibility in the fuzzy description that will cover a 
larger class of systems.
A gear box can be treated as a separated system sequentially connected to
the servo motor (Figure 7.24). This way, a mathematical model of the gear
box can be developed independently and separately (from the servo motor).
The overall model contained within the dashed line in Figure 7.23 can be
easily derived. A typical (and simple) fuzzy model of a gear box is:
R(1):
IF x1 ∈Sn THEN y1 ∈Sχn,
where the constant χ represents the gear box ratio (between the input and the
output).
Servo
Gear Box
Figure 7.24
A servo motor and a gear box sequentially put together.

294
Some Applications of Fuzzy Control •• 7
B. Fuzzy Controller of a Servo Mechanic System
A controller can be designed to drive the fuzzy system to stability. With
this simple stability requirement, there exist many solutions. To solve such a
design problem, one normally imposes the stability criterion and proceeds to
derive a range of each parameter that satisfies such stability criterion. This is a 
solution to the design problem. These ranges will help the selection of the
actual physical devices (e.g., selecting the specific value of a resistor,
capacitor, or inductor). This selection process represents the implementation
step.
Controlling the fuzzy model to stability is equivalent to controlling the two 
bounds to stability. Let a fuzzy control rule be of the form
RC
(1): IF x1 ∈Sn AND x2 ∈Sm THEN u ∈S−κn−νm.
Then the closed loop system will take the form
RCL
(1): IF x1 ∈Sn AND x2 ∈Sm THEN 
1x& ∈Sm,
RCL
(2): IF x1 ∈Sn AND x2 ∈Sm THEN 
2
x& ∈San+bm−c(κn+λm).
These fuzzy rules describe any system that has the state variable bounded
from above and below by
⎥
⎦
⎤
⎢
⎣
⎡
ζ
ζ
2
1
&
&
=
⎥⎦
⎤
⎢⎣
⎡
λ
−
−
κ
−
−
J
J
B
J
J
K
/
/
/
/
1
0
⎥⎦
⎤
⎢⎣
⎡
ζ
ζ
2
1
−
⎥⎦
⎤
⎢⎣
⎡
δ
δ ,
⎥
⎦
⎤
⎢
⎣
⎡
ξ
ξ
2
1
&
&
=
⎥⎦
⎤
⎢⎣
⎡
λ
−
−
κ
−
−
J
J
B
J
J
K
/
/
/
/
1
0
⎥⎦
⎤
⎢⎣
⎡
ξ
ξ
2
1  + 
⎥⎦
⎤
⎢⎣
⎡
δ
δ .
Thus the 2×2 matrix in the equations above must be negative definite, which
yields the following conditions:
J
K + J
κ  > 0
and
J
B + J
λ  > 0.
Since the moment of inertia J is always positive, the two conditions above are 
reduced to 
K + κ > 0
and
B + λ > 0,
or
κ > −K
and
λ > −B.
These conditions will be used to specify the gains in the controller. Usually,
additional criteria such as response time and limitation of the available
amplifiers will be imposed to help derive specific values for the gain constants 
κ and λ. Without such criteria, one can arbitrarily select a set of gains such as:
κ = K
and
λ = B.
These arbitrary selections will be used in the computer simulation in the next
section.
To summarize the resulting control design, the servo mechanic system is
modeled with the fuzzy rules:
R(1):
IF x1 ∈Sn AND x2 ∈Sm AND u ∈Sp THEN 
1x& ∈Sm,
R(2):
IF x1 ∈Sn AND x2 ∈Sm AND u ∈Sp
THEN
2
x& ∈S− (K/J)n−(B/J)m+(1/J)p.

7 •• Some Applications of Fuzzy Control
295
A fuzzy controller designed just to drive this type of system to stability will
have the form: 
RC
(1):
IF x1 ∈Sn AND x2 ∈Sm THEN u ∈S−Kn−Bm.
The final closed loop system will have the fuzzy form:
RCL
(1):
IF x1 ∈Sn AND x2 ∈Sm THEN 
1x& ∈Sm,
RCL
(2):
IF x1 ∈Sn AND x2 ∈Sm THEN 
2
x& ∈San+bm−c(κn+λm).
These two rules describe a set of systems bounded from above by the upper
bound
⎥
⎦
⎤
⎢
⎣
⎡
ζ
ζ
2
1
&
&
=
⎥⎦
⎤
⎢⎣
⎡
λ
−
−
κ
−
−
J
J
B
J
J
K
/
/
/
/
1
0
⎥⎦
⎤
⎢⎣
⎡
ζ
ζ
2
1
−
⎥⎦
⎤
⎢⎣
⎡
δ
δ ,
and from below by the lower bound
⎥
⎦
⎤
⎢
⎣
⎡
ξ
ξ
2
1
&
&
=
⎥⎦
⎤
⎢⎣
⎡
λ
−
−
κ
−
−
J
J
B
J
J
K
/
/
/
/
1
0
⎥⎦
⎤
⎢⎣
⎡
ξ
ξ
2
1  + 
⎥⎦
⎤
⎢⎣
⎡
δ
δ .
It can be seen that both these bounds asymptotically converge to zero, thus,
the systems bounded by them will also converge to zero, or are asymptotically 
stable.
C. Computer Simulations and Numerical Results
In this section, three simulations are presented to illustrate the following:
(i) demonstration of the implementation of a simple fuzzy controller design,
(ii) demonstration of the robustness of the fuzzy controller when parameters of 
a fuzzy model are not accurately reflecting the actual system, and
(iii) demonstration of the flexibility of the fuzzy controller when the actual
system is contaminated with interference and thus behaves differently from
the assumed model.
Example 7.4. The purpose of this example is to provide step-by-step
implementation of a fuzzy controller. A dynamic system
2
2
dt
d
θ(t) + 5 dt
d θ(t) + 10 θ(t) = τ(t)
represents a particular servo mechanic system. This equation of motion will be 
used to represent a real system that the fuzzy controller will try to control. The 
fuzzy model used to estimate this system is:
R(1):
IF x1 ∈Sn AND x2 ∈Sm AND u ∈Sp THEN 
1x& ∈Sm,
R(2):
IF x1 ∈Sn AND x2 ∈Sm AND u ∈Sp THEN 
2
x& ∈S−5n−10m+p,
where x1 is the angle displacement θ, x2 the angular velocity, and u the control 
torque. The fuzzy controller will take the form:
RC
(1):
IF x1 ∈Sn AND x2 ∈Sm THEN u ∈S−5n−10m,
which yields the closed loop form:
RCL
(1):
IF x1 ∈Sn AND x2 ∈Sm THEN 
1x& ∈Sm,
RCL
(2):
IF x1 ∈Sn AND x2 ∈Sm THEN 
2
x& ∈S−10n−20m.

296
Some Applications of Fuzzy Control •• 7
Figures 7.25 through 7.28 show the fuzzy controller being applied to the
simulated system described in the equation of motion. Apparently, the system
is driven to stability because the two bounds are driven to stability.
Example 7.5. The purpose of this example is to determine if a fuzzy
controller design based on a model with its parameter erroneously estimated is 
still functional. A dynamic system
2
2
dt
d
θ(t) + 10 dt
d θ(t) + 15 θ(t) = τ(t)
represents a particular servo mechanic system. This equation of motion will be 
used to represent a real system that the fuzzy controller will try to control. The 
fuzzy model used to estimate this system is the same as the one used in
Example 7.4:
R(1):
IF x1 ∈Sn AND x2 ∈Sm AND u ∈Sp THEN 
1x& ∈Sm,
R(2):
IF x1 ∈Sn AND x2 ∈Sm AND u ∈Sp THEN 
2
x& ∈S−5n−10m+p.
The fuzzy corresponding controller will take the form:
RC
(1):
IF x1 ∈Sn AND x2 ∈Sm THEN u ∈S−5n−10m.
Figures 7.29 through 7.32 show the fuzzy controller applied to the system and 
the corresponding output, along with the upper and lower bounds of the fuzzy 
closed loop system, converging to stability.
Example 7.6. The purpose of this example is to determine if a fuzzy
controller designed based on a model with fixed parameter estimate is still
functional when the actual system has time-dependent parameters. A dynamic
system
2
2
dt
d
θ(t) + 5[1+sin(2πt)] dt
d θ(t) + 10[1+cos(2πt)] θ(t) = τ(t)
represents a particular servo mechanic system. This equation of motion will be 
used to represent a real system that the fuzzy controller will try to control. The 
fuzzy model used to estimate this system is the same as the one used in
Example 7.4, with the fuzzy controller:
RC
(1):
IF x1 ∈Sn AND x2 ∈Sm THEN u ∈S−5n−10m.
Figures 7.33 through 7.36 show the fuzzy controller applied to the system and 
the corresponding output, along with the upper and lower bounds of the fuzzy 
closed loop system. In this case, it is interesting to note that the actual system
converges to stability despite its nonlinear nature (or time-variant nature of its 
parameters). This example mainly shows the robustness of the fuzzy controller 
when handling a system different from its original assumption (which was
implemented in the modeling process that leads to the design of the
controller). Common sense projects that if one keeps increasing the nonlinear
variation of the system (from the assumption), the effectiveness of the
controller will eventually decrease. However, the robustness of the fuzzy
controller provides a comfortable envelope in which one can afford some
variation.

7 •• Some Applications of Fuzzy Control
297
-4
0
4
8
0
5
10
15
20
25
Figure 7.25
Position profile for the servo motor in Example 7.4.
-4
0
4
8
0
5
10
15
20
25
Figure 7.26
Bounds of the positions for the servo motor in Example 7.4. 
-6
-4
-2
0
2
0
5
10
15
20
25
Figure 7.27
Velocity profile for the servo motor in Example 7.4.
-6
-4
-2
0
2
0
5
10
15
20
25
Figure 7.28
Bounds of the velocities for the servo motor in Example 7.4.

298
Some Applications of Fuzzy Control •• 7
-4
0
4
8
0
5
10
15
20
25
Figure 7.29
Position profile for the servo motor in Example 7.5.
-4
0
4
8
0
5
10
15
20
25
Figure 7.30
Bounds of the positions for the servo motor in Example 7.5. 
-6
-4
-2
0
2
0
5
10
15
20
25
Figure 7.31
Velocity profile for the servo motor in Example 7.5.
-6
-4
-2
0
2
0
5
10
15
20
25
Figure 7.32
Bounds of the velocities for the servo motor in Example 7.5.

7 •• Some Applications of Fuzzy Control
299
-4
0
4
8
0
5
10
15
20
25
Figure 7.33
Position profile for the servo motor in Example 7.6.
-4
0
4
8
0
5
10
15
20
25
Figure 7.34
Bounds of the positions for the servo motor in Example 7.6. 
-10
-5
0
5
0
5
10
15
20
25
30
Figure 7.35
Velocity profile for the servo motor in Example 7.6.
-10
-5
0
5
0
5
10
15
20
25
30
Figure 7.36
Bounds of the velocities for the servo motor in Example 7.6.

300
Some Applications of Fuzzy Control •• 7
IV. FUZZY PID CONTROLLERS FOR SERVO MECHANIC 
SYSTEMS
In the previous section, the general approach to design a stable fuzzy
controller for a servo mechanic system was discussed. This chapter presents
more detailed solutions to the servo controller, namely, for the situation when
a more complicated model of a servo is needed (or preferred).
A servo motor can be modeled as the IF-THEN fuzzy rules presented in
the previous section. However, this model is normally accurate (or robust)
within a region of ranges for the corresponding torque, angular velocity, and
angular displacement. Most of the time, this region is sufficient for the
operating condition of a servo. In some specific instances, the servo motor is
operated outside this range. If the controller is robust enough, then the servo
motor will converge to stability. If the controller is not robust, then another
controller will be required for these specific cases. There are two approaches
to this design: (i) designing a fuzzy PID controller (presented in Chapter 5),
and (ii) designing an adaptive fuzzy controller (presented in Chapter 6). 
A. Fuzzy PID Controller of a Servo Mechanic System
Let us define an operation space for the servo. This space is 2-dimensional,
consisting of the two control inputs d(t) and v(t) used in a typical fuzzy PD
described in Chapter 5. Figure 7.37 depicts such operation space. A constant L
is defined in a way such that each region in the input-combination space
represents an operating range (Figure 7.38) where the model will behave
differently. Equations (5.16) through (5.24) can be used as the design for this
particular controller.
This particular controller is often preferred because there always exist
some physical limitations on a mechanical system, i.e., the maximum torque
one can provide as input to the system and the maximum achievable angular
velocity of the servo motor. By using the fuzzy PID (or PD) controller, one
can limit the control signal to some arbitrary constant. Furthermore, this type
−L
−L
L
L
KPd(nT)
Kdv(nT)
IC1
IC2
IC3
IC4
IC5
IC6
IC7
IC8
IC9
IC10
IC11
IC12
IC13
IC14
IC15
IC16
IC17
IC18
IC19
IC20
Figure 7.37
Regions of the “fuzzy controller” input-combination values.

7 •• Some Applications of Fuzzy Control
301
of controller also exhibits piecewise-linear characteristics that are typical of
the servo motor. 
B. Adaptive Fuzzy Controller of a Servo Mechanic System
There are two approaches to design an adaptive fuzzy controller for the
servo motor: (i) gain scheduling and (ii) fuzzy self-tuning regulator. In the
gain scheduling, the fuzzy controller is designed for each operating range, and 
the observed data are used to determine which operating range the servo is in
in order to activate a different gain. In the fuzzy self-tuning regulator, the
parameters of the model are adjusted accordingly to the observed data.
The gain scheduling approach basically provides different pre-determined
controllers. Whenever observed data signify a particular situation, a
corresponding controller is activated.
The fuzzy self-tuning regulator, in theory, will continuously update the
parameters of the fuzzy model and the controller is adjusted accordingly.
However, due to the nature of the servo motor, this continuous updating
requirement can be relaxed: the parameters only need to be updated whenever 
there is an indication for the need (the system behaves linearly in a piecewise
manner). Thus, there will be a scheme, that requires some parameter update,
to check to see when the system is moving from one operating range to
another.
−θ& m
θ
θ&
operating
range 1
(extreme)
operating
range 2
(normal)
operating
range 1
(extreme)
θ& m
Figure 7.38
Operating ranges for adaptive fuzzy controller.

302
Some Applications of Fuzzy Control •• 7
V.
FUZZY CONTROLLER FOR ROBOTIC MANIPULATOR
Robotic manipulator is a mechanical system consisting of several links
connected in a chain configuration, with rotational degree-of-freedoms at each 
joint (the connection between two links). This system is used in the same
function as a human arm and therefore is sometimes referred to as a
mechanical arm. The equation of motion for this robotic manipulator system is 
highly nonlinear. Nonlinear controllers for this type of system are normally
difficult to design, too complex for practical implementation, or not robust
enough to tolerate any error in the assumptions.
In general practice, the final goal of controlling a manipulator is to put the 
end-effector (the link furthest from the base) at some specific coordinates.
These coordinates are defined in the xyz-space (sometimes referred to as the
Cartesian space). However, in order to put the end-effector at these
coordinates, the joints have to be moved to some angles. A direct
transformation exists between these angles and the xyz coordinates of the end-
effector. This transformation is known as the direct kinematics. Most of the
control problems for manipulators are in the joint space, with the desired
position of the end-effector translated into a set of desired joint angles.
Formulating the problem this way, one avoids adding more complexity to the
already complicated problem (due to high nonlinearity in the equation of
motion).
For illustrative purposes, a commonly used planar manipulator (as shown
in Figure 7.39) is used. This is a manipulator with only one degree of freedom 
at each joint, and all degree of freedoms move the manipulator in a plane. A
typical 2-link planar manipulator with equal-length l and equal-mass m for
each link, where the weight is uniformly distributed along the length of each
link, follows the equation of motion below: 
Figure 7.39 A typical industrial robot manipulator.

7 •• Some Applications of Fuzzy Control
303
⎥⎦
⎤
⎢⎣
⎡
τ
τ
2
1
=
⎥⎦
⎤
⎢⎣
⎡
22
21
12
11
a
a
a
a
⎥
⎦
⎤
⎢
⎣
⎡
θ
θ
2
1
&&
&&
 + 
⎥⎦
⎤
⎢⎣
⎡
2
1
b
b
,
where
a11 = 2
3 ml2 + ml2cos(θ2),
a12 = 4
1 ml2 + 2
1 ml2cos(θ2),
a21 = 4
1 ml2 + 2
1 ml2cos(θ2),
a22 = 2
1 ml2,
b1 = −ml2
1
θ&
2
θ& sin(θ2) + 2
3 mlg cos(θ1) + 2
1 mlg cos(θ1+θ2),
b2 = 2
1 mlg cos(θ1+θ2).
The 2×2 matrix containing a11, a12, a21, and a22 represents the moment of
inertia of the manipulator. The 2×1 vector matrix containing b1 and b2
represents the Coriolis torques. The equation of motion sometimes can be
represented simply by τ = Iα + C.
It can be seen that under the most favorable conditions (of having equal-
length and equal-mass links, of being planar, and of having the mass
uniformly distributed along the length) the equation of motion is simplified
significantly. However, the final form is still highly nonlinear.
Notice that for the 2-link planar manipulator above, the direct kinematics
used to transform the joint angles into the coordinates of the end-effector is
given as follows:
⎥⎦
⎤
⎢⎣
⎡
y
x  = l
⎥⎦
⎤
⎢⎣
⎡
θ
θ
)
sin(
)
cos(
1
1
 + l
⎥⎦
⎤
⎢⎣
⎡
θ
+
θ
θ
+
θ
)
sin(
)
cos(
2
1
2
1
,
and its corresponding inverse kinematics formula can be obtained in closed
form as:
pitch
at
joint 1
pitch
at
joint 2
different end-effector
can be attached here
base
x
y
l
l
Figure 7.40 A 2-link planar manipulator in 3-D space and in x-y plane.

304
Some Applications of Fuzzy Control •• 7
θ1 = tan–1( x
y ) ± cos–1(
l
y
x
2
2
2 +
),
θ2 = m [ π – 2 sin–1(
l
y
x
2
2
2 +
) ].
In this section, an adaptive fuzzy control scheme is derived and used to
control this manipulator. First, a fuzzy model is assumed. Its parameters are
assumed to be time-dependent to reflect the nonlinearity and therefore need to 
be updated throughout the operation. The adaptive scheme is based largely on 
the self-tuning fuzzy regulator presented in Chapter 6.
A. Fuzzy Modeling of a 2-Link Planar Manipulator
A 2-link planar manipulator will be represented by a model with four state 
variables: x1 (angle displacement at joint 1), x2 (angular velocity at joint 1), x3
(angle displacement at joint 2), and x4 (angular velocity at joint 2). The two
control inputs are u1 (torque delivered to joint 1 by a servo mechanism), and
u2 (torque delivered to joint 2 by another servo mechanism).
With these notations, the fuzzy model can be set up as a set of fuzzy logic
rules as follows:
R(1):
IF
x1 ∈Si AND x2 ∈Sj AND x3 ∈Sn AND x4 ∈Sm AND
u1 ∈Sp AND u2 ∈Sq
THEN
1x& ∈Sj,
R(2):
IF
x1 ∈Si AND x2 ∈Sj AND x3 ∈Sn AND x4 ∈Sm AND
u1 ∈Sp AND u2 ∈Sq
THEN
2
x& ∈Sf(i,j,m,n,p,q),
R(3):
IF
x1 ∈Si AND x2 ∈Sj AND x3 ∈Sn AND x4 ∈Sm AND
u1 ∈Sp AND u2 ∈Sq
THEN
3x& ∈Sn,
R(4):
IF
x1 ∈Si AND x2 ∈Sj AND x3 ∈Sn AND x4 ∈Sm AND
u1 ∈Sp AND u2 ∈Sq
THEN
4
x& ∈Sg(i,j,m,n,p,q).
The functions f(⋅) and g(⋅) can be selected to best fit the behavior of the
system. In general practice, in order to simplify the problem, f(⋅) and g(⋅) are
often assigned the linear form:
f(i,j,m,n,p,q)
= a11i + a12j + a13m + a14n + b11p + b12q,
g(i,j,m,n,p,q) = a21i + a22j + a23m + a24n + b21p + b22q.
The constants a11, a12, a13, a14, a21, a22, a23, a24, b11, b12, b21, and b22 are
assumed to be time dependent, i.e., they will change with time and therefore
will need to be updated from time to time. There are two popular techniques
of updating these constants: (i) updating according to a nonlinear model (e.g.,
the equation of motion mentioned earlier), and (ii) updating according to the
solution of a curve-fitting problem.
When updating these constants according to a nonlinear equation of
motion of the form τ = Iα + C mentioned earlier, the update can be derived
based on the equation of motion. This equation of motion can be rewritten in
the form:

7 •• Some Applications of Fuzzy Control
305
⎥
⎦
⎤
⎢
⎣
⎡
θ
θ
2
1
&&
&&
 = 
⎥⎦
⎤
⎢⎣
⎡
α
α
2
1
 + 
⎥⎦
⎤
⎢⎣
⎡
β
β
β
β
22
21
12
11
⎥⎦
⎤
⎢⎣
⎡
τ
τ
2
1
,
where
α1 = 
γ
2
1 [
1
θ&
2
θ&  sin(θ2) + l2
3 g cos(θ1) + l4
1 g cos(θ1+θ2) –
l2
1 g cos(θ2) cos(θ1+θ2)],
α2 = γ
1 { [ 4
1 + 2
1 cos(θ2)] [
1
θ&
2
θ&  sin(θ2) –
l2
3 g cos(θ1) –
l2
1 g
cos(θ1+θ2)] +
l
g [ 2
3  + cos(θ2)]cos(θ1+θ2) },
γ = 16
11  + 4
1 cos(θ2) – 4
1 cos2(θ2),
β11 = 
⎥⎦
⎤
⎢⎣
⎡
θ
−
θ
+
)
(
cos
4
1
)
cos(
4
1
16
11
2
1
2
2
2
2
ml
,
β12 = 
⎥⎦
⎤
⎢⎣
⎡
θ
−
θ
+
θ
−
−
)
(
cos
4
1
)
cos(
4
1
16
11
)
cos(
2
1
4
1
2
2
2
2
2
ml
,
β21 = 
⎥⎦
⎤
⎢⎣
⎡
θ
−
θ
+
θ
−
−
)
(
cos
4
1
)
cos(
4
1
16
11
)
cos(
2
1
4
1
2
2
2
2
2
ml
,
β22 = 
⎥⎦
⎤
⎢⎣
⎡
θ
−
θ
+
θ
+
)
(
cos
4
1
)
cos(
4
1
16
11
)
cos(
2
3
2
2
2
2
2
ml
.
From this equation one can derive different linearized models that yield the
corresponding constants for the fuzzy model. One particular set of constants
can be derived from the nonlinear formula above using the popular truncated
Taylor series expansion method around a set of fixed point constants:
a11 = 
1
θ
∂
∂α1,
a21 = 
1
θ
∂
∂α2,
a12 = 
1
θ
∂
∂
&
α1,
a22 = 
1
θ
∂
∂
&
α2,
a13 = 
2
θ
∂
∂
α1,
a23 = 
2
θ
∂
∂
α2,

306
Some Applications of Fuzzy Control •• 7
a14 = 
2
θ
∂
∂
&
α1,
a24 = 
2
θ
∂
∂
&
α2,
b11 = β11,
b12 = β12,
b21 = β21,
b22 = β22.
When updating the constants a11, a12, a13, a14, a21, a22, a23, a24, b11, b12, b21,
and b22 according to the solution of a curve-fitting problem, one takes the
observed data X(tn) = [x1(tn) x2(tn) x3(tn) x4(tn)]T and the calculated data 
)
( nt
X&
= [
)
(
1
nt
x&
)
(
2
nt
x&
)
(
3
nt
x&
)
(
4
nt
x&
]T, and finds a solution that minimizes the
squared-norm of the error function:
min || 
)
( nt
X&
– A(tn)X(tn) – B(tn)τ(tn) ||2
.
Notice that the optimization problem above yields an infinite number of
solutions (there are more unknown variables than constraint equations). In
order to derive a unique solution, one often imposes additional constraints,
e.g., the smoothness in the constants A(tn) and B(tn) when compared to A(tn–1)
and B(tn–1). In this setting, the optimization problem becomes
min || A(tn) – A(tn–1) ||2 + || B(tn) – B(tn–1) ||2
such that
)
( nt
X&
= A(tn)X(tn) + B(tn)τ(tn).
The optimization problem above now has a unique solution.
There are controllers designed on the basis of selecting the constants aij
and bmn in such a way that the variables appear to be independent of each
other. This process is called decoupling the variables, i.e., the model can be
separated into two independent models, each of a simpler nature and much
easier to handle. However, it has been noted that such decoupled systems are
often sensitive to rapid changes and often need continuous update that will
consume considerable computing power. 
In the case of a 2-link manipulator, each of the two decoupled systems
only consists of two variables and one control input, making it much easier to
design a controller with closed form solution. One example of such
decoupling systems is the selection of the constants aij and bmn as follows:
a11 = 0,
a21 = 0,
a12 = 
1
1
θ
α
&
,
a22 = 0,
a13 = 0,
a23 = 02,
a14 = 0,
a24 = 
2
2
θ
α
&
,
b11 = β11,
b21 = 0,
b12 = 0,
b22 = β22.

7 •• Some Applications of Fuzzy Control
307
B. Fuzzy Controller of a 2-Link Planar Manipulator
The fuzzy controller of a 2-link planar manipulator can be designed based
on the updating of its fuzzy model. There are two ways to update the
parameters of the fuzzy model: (i) using the equation of motion as a guideline 
to calculate the parameter using the truncated Taylor series expansion, and (ii) 
using the observed data and the curve-fitting algorithm to estimate the
parameters. Once the parameters have been updated, a controller can be
systematically determined based on these newly updated parameters.
The decoupling method works in a similar manner: the parameters of each
decoupled system are updated either using the equation of motion or the
curve-fitting. However, the system is much more sensitive in that it often
requires updating at a much faster frequency (i.e., the interval between two
operating actions must be sufficiently short) to avoid deviation.
C. Numerical Simulations
In this section, there are three examples illustrating three methods of
controlling the 2-link manipulator.
Example 7.7. This example illustrates the adaptive fuzzy control in which
the parameters of the fuzzy model are updated according to the equation of
motion of the manipulator. At any time interval [tn,tn+1) where tn+1 = tn + ∆t,
the parameters aij and bmn are updated using the truncated Taylor series
expansion and the observed angular displacements θ1(tn) and θ2(tn), and the
angular velocities 
1
θ& (tn) and 
2
θ& (tn). Figures 7.41 through 7.44 plot the
angular displacements and angular velocities of both joints 1 and 2, along with 
the upper and lower limits defined by the fuzzy model.
Example 7.8. This example illustrates the adaptive fuzzy control in which
the parameters of the fuzzy model are updated using the curve-fitting method. 
At any time interval [tn,tn+1) where tn+1 = tn + ∆t, the parameters aij and bmn are 
updated by minimizing the deviation from their values in the previous interval 
[tn–1,tn) and the observed angular displacements θ1(tn) and θ2(tn), and the
angular velocities 
1
θ& (tn) and 
2
θ& (tn). Figures 7.45 through 7.48 plot the
angular displacements and angular velocities of both joints 1 and 2, along with 
the upper and lower limits defined by the fuzzy model.
Example 7.9. This example illustrates the adaptive fuzzy control in which
the parameters of each decoupled fuzzy model are updated according to the
equation of motion of the manipulator. At any time interval [tn,tn+1) where tn+1
= tn + ∆t, the parameters aij and bmn are updated using the truncated Taylor
series expansion and the observed angular displacements θ1(tn) and θ2(tn), and 
the angular velocities 
1
θ& (tn) and 
2
θ& (tn). Notice that the duration ∆t is much
smaller than the values used in the previous two examples. Figures 7.49
through 7.52 plot the angular displacements and angular velocities of both
joints 1 and 2, along with the upper and lower limits defined by the fuzzy
model.

308
Some Applications of Fuzzy Control •• 7
-20
0
20
40
60
0
1
2
3
4
5
6
7
8
9
10
Figure 7.41
Angular position and bounds profiles for joint 1 in Example 7.7.
-40
-30
-20
-10
0
0
1
2
3
4
5
6
7
8
9
10
Figure 7.42
Angular velocity and bounds profile for joint 1 in Example 7.7.
-10
0
10
20
30
0
1
2
3
4
5
6
7
8
9
10
Figure 7.43
Angular position and bounds profiles for joint 2 in Example 7.7.
-30
-20
-10
0
0
1
2
3
4
5
6
7
8
9
10
Figure 7.44
Angular velocity and bounds profile for joint 2 in Example 7.7.

7 •• Some Applications of Fuzzy Control
309
-20
0
20
40
60
0
1
2
3
4
5
6
7
8
9
10
Figure 7.45
Angular position and bounds profiles for joint 1 in Example 7.8.
-120
-80
-40
0
40
0
1
2
3
4
5
6
7
8
9
10
Figure 7.46
Angular velocity and bounds profile for joint 1 in Example 7.8.
-10
0
10
20
30
0
1
2
3
4
5
6
7
8
9
10
Figure 7.47
Angular position and bounds profiles for joint 2 in Example 7.8.
-60
-40
-20
0
20
0
1
2
3
4
5
6
7
8
9
10
Figure 7.48
Angular velocity and bounds profile for joint 2 in Example 7.8.

310
Some Applications of Fuzzy Control •• 7
-20
0
20
40
60
0
1
2
3
4
5
6
7
8
9
10
Figure 7.49
Angular position and bounds profiles for joint 1 in Example 7.9.
-80
-60
-40
-20
0
20
0
1
2
3
4
5
6
7
8
9
10
Figure 7.50
Angular velocity and bounds profile for joint 1 in Example 7.9.
-10
0
10
20
30
0
1
2
3
4
5
6
7
8
9
10
Figure 7.51
Angular position and bounds profiles for joint 2 in Example 7.9.
-40
-30
-20
-10
0
10
0
1
2
3
4
5
6
7
8
9
10
Figure 7.52
Angular velocity and bounds profile for joint 2 in Example 7.9.

7 •• Some Applications of Fuzzy Control
311
PROBLEMS
P7.1
Given the health monitoring diagnostic system described in Section I of 
this chapter, write a computer program to simulate the following sensor 
data for the time t ∈ [0,300.0] for every interval ∆t = 1 second:
(a) x1(t) = 98 + 4 sin( 80
π t) e(t),
x2(t) = 120 + 40 sin( 60
π t) e(t),
x3(t) = 70 + 60 sin( 40
π t) e(t).
(b) Implement the 27 rules mentioned and plot out the membership
value for each rule against time t. What diagnostic conclusion can
one draw from the plot of these 27 membership values?
(c) Change the data in (a) to include additive random noise of
Gaussian distribution. Repeat both steps (a) and (b).
x1(t) = 98 + 4 sin( 80
π t) e(t) + n(t),
x2(t) = 120 + 40 sin( 60
π t) e(t) + n(t),
x3(t) = 70 + 60 sin( 40
π t) e(t) + n(t).
P7.2
Obtain a header format of digital image data stored under the bitmap
format (with extension .bmp). Write out the format of this header in the 
following table:
filetype (2 words)
data (1 word)
data (1 word)
data (1 word)
data (1 word)
data (1 word)
data (1 word)
data (1 word)
data (1 word)
data (1 word)
data (1 word)
data (1 word)
data (1 word)
data (1 word)
data (1 word)
data (1 word)
data (1 word)
data (1 word)
data (1 word)
data (1 word)
data (1 word)
data (1 word)
data (1 word)
data (1 word)
data (1 word)
data (1 word)
data (1 word)
data (1 word)
data (1 word)
data (1 word)
data (1 word)
data (1 word)
data (1 word)
data (1 word)
data (1 word)
data (1 word)
data (1 word)
data (1 word)
data (1 word)
data (1 word)
data (1 word)
data (1 word)
data (1 word)
P7.3
Obtain a digital image stored in the binary bitmap format (whose
filename ended with the extension .bmp) described in Problem P7.2.
Write a computer program that simulates the off-focused data using the 
smooth (average) filter. Each off-focused image will be saved to the
same binary bitmap format as the original image. Assuming that for

312
Some Applications of Fuzzy Control •• 7
each unit away from the correct focal point, the radius of the smooth
filter is larger. The smooth filter is given as
Ismooth(n,m) = 
∑∑
+
−
=
+
−
=
+
N
n
R
n
i
R
m
R
m
j
j
i
I
R
)
,
(
)1
2
(
1
original
2
.
P7.4
Given a sequence of digital images generated in Problem P7.3, for each 
digital image, write a computer program to calculate the normalized
sharpness index as
σ = 
∑∑
=
=
N
n
M
m
m
n
e
NM
1
1
)
,
(
1
.
Is there another algorithm to calculate the sharpness index of a digital
image? Outline and implement your own algorithm and compare the
results to that of the above formula.
P7.5
Implement the fuzzy control for the autofocus camera using the
simulation results from Problems P7.3 and P7.4. Set the control step ∆θ
arbitrarily large and adjust the control steps using various adjustment
parameters γ.

7 •• Some Applications of Fuzzy Control
313
REFERENCES
[1]
K. R. Ames. A Relational Approach to the Development of Expert
Diagnostic Systems. Hampton, VA: NASA Langley Research Center
(1984).
[2]
N. Ayache (editor). Computer Vision, Virtual Reality, and Robotics
in Medicine. Berlin, Germany: Springer-Verlag (1995).
[3]
R. C. Berkan and S. L. Trubatch. Fuzzy Systems Design Principles:
Building Fuzzy IF-THEN Rule Bases. New York, NY: IEEE Press
(1997).
[4]
K. S. Fu, R. C. Gonzalez, and C. S. G. Lee. Robotics: Control,
Sensing, Vision, and Intelligence. New York, NY: McGraw-Hill
(1987).
[5]
S. E. Gordon. Expert Systems: Their Impact on Performance and
Cognitive Strategies in Diagnostic Inference. Brooks Air Force Base, 
TX: Air Force Human Resources Laboratory, Air Force Systems
Command Report (1987).
[6]
M. Klein and L. B. Methlie. Expert Systems: a Decision Support
Approach: With Applications in Management and Finance. Reading, 
MA: Addison-Wesley Publishing Company (1990).
[7]
F. A. Lootsma. Fuzzy Logic for Planning and Decision Making.
Boston, MA: Kluwer Academic Publishers (1997).
[8]
R. W. Miller. Servomechanisms: Devices and Fundamentals. Reston, 
VA: Reston Publishing Company (1977)
[9]
C. V. Negoita. Expert Systems and Fuzzy Systems. Menlo Park, CA:
Benjamin/Cummings Publishing Company (1985).
[10]
M. J. Patyra and D. M. Mlynek (editors). Fuzzy Logic:
Implementation and Applications. New York, NY: Wiley  (1996).
[11]
B. Paul. Kinematics and Dynamics of Planar Machinery. Englewood 
Cliffs, NJ: Prentice-Hall (1979).
[12]
I. S. Shaw. Fuzzy Control of Industrial Systems: Theory and
Applications. Boston, MA: Kluwer Academic Publishers (1998).
[13]
M. Sonka, V. Hlavac, and R. Boyle. Image Processing, Analysis, and 
Machine Vision. Pacific Grove, CA: PWS Publishing (1999).
[14]
C. Torras (editor). Computer Vision: Theory and Industrial
Application. Berlin, Germany: Springer-Verlag (1992).
[15]
M. Vukobratovic and M. Kircanski. Kinematics and Trajectory
Synthesis of Manipulation Robots. Berlin, Germany: Springer-Verlag
(1986).


Index
A
Adaptive control 239
Applications (of fuzzy control)
271
Health monitoring 271
Image sharpness 281
Robotic manipulator 302
Servo mechanical system
291
Approximate reasoning 66
α-cut 38
B
Boolean algebra 62
C
Center-of-gravity formula158
Control 103, 109
Adaptive control 239
Dual control 257
Fuzzy control system, 139
Model-based 170
Model-free 145
Set-point tracking 147
Sub-optimal 
fuzzy
control 258
Fuzzy controller (FC) 148
Adaptive fuzzy controller
245
PID controller 183
Fuzzy logic controller (FLC)
148
LMI control toolbox 108
Controllability 129
Characteristic function 3
Programmable logic control 
140
D
Defuzzification 157
Center-of-gravity formula 
158
Dual control 257
E
Extended function 41
Extension principle 40
F
Function
Characteristic 3, 38
Extended 41
Logical 61
Lyapunov 104
Membership 6
Fuzzification 148, 150
Fuzzy
Control system 139
Adaptive 239
Model-based 170
Model-free 145
Sub-optimal fuzzy 
control 258
Controller (FC) 148
PID controller 183, 192
IF-THEN rule 76
Interval partition 116
Logic 57
Logic controller (FLC) 148
Logic rule base 75
Maximum 50
Minimum 50
Number 42
Relation 69
Rule base 151
Self-tuning regulator 252
Set 5,7
Subset 7,37
System modeling 89, 114
Dynamic102
Static 90

316
Index
σ-stability 125
G
Gain scheduling 246
General rule (for fuzzy
arithmetic) 43
H
Hansen inverse method 33
Hansen matrix inversion
algorithm 34
I
Inclusion monotonic property
22
Inference rule 67
Interval
Arithmetic 9,12
Confidence 9
Equation 16 
Evaluation 22
Expression 22
Matrix equation 30
Matrix inversion 30
Matrix operation 25
Rational interval expression 
22
Width 20
L
Logic
Multi-valued logic 65
n-valued logic 65
Operations 61
Three-valued logic 65
Two-valued logic 57
Logical formula 62
Logical function 61
M
Measure 3,17
Model reference adaptive fuzzy
system 255
Monotonic property 22
N
Nonlinear fuzzy system 133
O
Observability 137
P
Parameter identification 96
Least-squares 98
Programmable logic control
(PLC) 140
R
Region of confidence 10
Region of input combination
(IC) 195
Representation theorem 40
Resolution principle 40
Rule 59
Rule base 151
S
Set 1
Fuzzy set 7
Fuzzy subset 7
Level set 38
Subset 2
Universal set 1
Set-point tracking 147, 187
Small gain theorem 224
Stability 102, 104, 124, 223
BIBO stability 223
Fuzzy σ-stability 125
Graphical stability analysis 
232
PID control system 223
Sub-optimal fuzzy control 258
Sufficient information 244
System identification 243
System parameterization 242
T
Truth table 59

