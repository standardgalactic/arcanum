Identifying Driver's Cognitive Load 
Using Inductive Logic Programming
Fumio Mizoguchi†‡, Hayato Ohwada†, 
Hiroyuki Nishiyama†, Hirotoshi Iwasaki *
Faculty of Sci. and Tech. Tokyo University of Science†,
WisdomTex Co. Ltd.‡,
Denso IT Laboratory*

Vehicle and Devices
Eye movement tracking device
(EMR‐8 by NAC Image Teck., Inc.)
Gather driving data device
Controller Area Network(CAN)
Toyota Crown

Raw Data
Driving Data
Eye movement data
Existence of front vehicle（0 or 1）, 
Accelerator depression rate（0 ～100%），
Braking signal(0 or 1), Speed(km/h), 
Steering signal(‐450 ～450)
from CAN(Controller Area Network)
Gather two types of information(driving and eye movement data)
from EMR‐8
Angles of eye movement (gaze location data(x,y))
Obtain 10 data points per second
We experimented two types of roads for gathering data 

Urban road with much traffic (Shibuya area)

Country road with moderate traffic (Noda area)

No.
Timecode
hh:mm:ss:nn
Front 
signal
Accelerator
rate
Brake
signal Velocity Steering
angle
Gaze_X Gaze_Y
6895
03:52:43:54
0
15
0
39.5
-3
-4.6
5.8
6896
03:52:43:59
0
15
0
39.62
-3
-4.8
7.4
6897
03:52:44:05
0
15
0
39.8
-3
-4.4
7.3
6898
03:52:44:11
0
15
0
39.78
-3
-3.6
6.5
6899
03:52:44:17
0
15
0
39.67
-3
-2.3
5.1
Current gaze point
Driving Data
Gaze Data
Gathered Eye Movement and Driving Data
10 data 
per second

• Movement that rotates the eye at speed of 
100 degrees/second or more.
• Saccade is closely related to the observer’s 
motivation and cognitive state.
• We identify a driver’s cognitive load induced 
by saccade in one second.
Saccade

No.
Timecode
hh:mm:ss:nn
Velocity Steering
angle
Gaze_X Gaze_Y
6895
03:52:43:54
39.5
-3
-4.6
5.8
6896
03:52:43:59
39.62
-3
-4.8
7.4
6897
03:52:44:05
39.8
-3
-4.4
7.3
6898
03:52:44:11
39.78
-3
-3.6
6.5
6899
03:52:44:17
39.67
-3
-2.3
5.1
6900
03:52:44:23
39.93
-1.5
-27.8
17.8
6901
03:52:44:29
39.9
0
-37.5
18.1
6902
03:52:44:35
39.88
0
-32.1
15.3
6903
03:52:44:41
40.06
1.5
-32
16.1
6904
03:52:44:59
40.29
3
5.3
3.1
6905
03:52:45:05
40.18
3
3.5
5.1
6906
03:52:45:11
40.47
3
2
5.9
6907
03:52:45:17
40.42
1.5
2.6
6
6908
03:52:45:23
40.08
0
1.9
5.9
Time
ID
Timecode
hh:mm:ss
Velocity
Steering
angle
Gaze_X
Gaze_Y
Saccade
793
03:52:43
39.66
-6
-1.6
4.18
794
03:52:44
39.91
-0.75
-16.8
11.16
795
03:52:45
40.5
-1.5
1.38
5.39
796
03:52:46
41
-4.33
-1.87
2.66
797
03:52:47
40.84
2.25
-0.6
4.75
…
…
…
…
Step1. Averaging each attribute  
value of driving data
Data Preparation (Step 1)
Collect a set of raw data 
measured in a second

Data Preparation (detecting a saccade event)
Time
ID
Timecode
hh:mm:ss
Velocity
Steering
angle
Gaze_X
Gaze_Y
Saccade
793
03:52:43
39.66
-6
-1.6
4.18
794
03:52:44
39.91
-0.75
-16.8
11.16
795
03:52:45
40.5
-1.5
1.38
5.39
796
03:52:46
41
-4.33
-1.87
2.66
797
03:52:47
40.84
2.25
-0.6
4.75
…
…
Step 4.  Identify an 
object the driver saw
rearviewMirror
No.
Timecode
hh:mm:ss:nn
Gaze_X
Gaze_Y
6900
03:52:44:23
-27.8
17.8
6901
03:52:44:29
-37.5
18.1
6902
03:52:44:35
-32.1
15.3
6903
03:52:44:41
-32
16.1
Step 3. Check the gaze point
…
…
Step 2. Detect large 
changes of the gaze data
Saccade
event

Saccade
ID
Time
ID
Velocity
Velocity
⊿-5s
Velocity
⊿-1s
Velocity
⊿+5s
Saccade
121
794
under40
downLow
upLow
downLow
rearviewMirror
122
799
under40
downLow
downLow
downMiddle
rearviewMirror
123
801
under40
downMiddle
downLow
downMiddle
carNavigation
Saccade
ID
Time
ID
Velocity Velocity
⊿-5s
Velocity
⊿-1s
Velocity
⊿+5s
Steering
angle
Steering
⊿-5s
Steering
⊿-1s
Steering
⊿+5s
Saccade
121
794
39.91
-1.7
0.3
-1
-0.75
28.1
5.3
-1.3
rearviewMirror
122
799
38.89
-1
-1.2
-13.5
-2.06
-1.3
-5.1
0.7
rearviewMirror
123
801
33.22
-7.8
-3.3
-13.7
2
6.3
7.3
-3.8
carNavigation
…
…
…
…
…
…
Add difference attribute values
Translating them into qualitative info.
…
…
…
…
Saccade
ID
Time
ID
Velocity Steering
angle
Gaze_X
Gaze_Y
Saccade
121
794
39.91
-0.75
-16.8
11.16
rearviewMirror
122
799
38.89
-2.06
-10.5
7.88
rearviewMirror
123
801
33.22
2
-26.5
-9.23
carNavigation
Data Transformation
Collect a set of 
saccade event s

accele(+ID, #Val), brake(+ID, #Val), velocity(+ID, #Val),
steering(+ID, #Val), front(+ID, #Val), gazeX(+ID, #Val),
gazeY(+ID, #Val), lookAt(+ID, #Target)
accele diff(+ID,#Time,#Val), brake diff(+ID,#Time,#Val),
velocity diff(+ID,#Time,#Val), front diff(+ID,#Time,#Val),
steering diff(+ID,#Time,#Val), gazeX diff(+ID,#Time,#Val),
gazeY diff(+ID,#Time,#Val)
Before_event(+ID, ‐ID), after_event(+ID, ‐ID)
Qualitative value
Qualitative state 
difference
Information on 
adjacent saccades
Background knowledge
Predicates
Types

Positive/Negative Examples
Tense: If saccade occurs and a resource‐free action is just 
starting, the used resource is full. 
positive: class(+ID,tense)
Negative: class(+ID,relaxed)
Relaxed: If saccade occurs and a resource‐required action 
is just starting, the resource is available for use . 

Shibuya(urban)     1345        80780         9415            220
Noda(country)      1310        72429         9170            240
Data used for experiment
Area
Measured time
(second)
Raw Data Arranged data for 
each second
Saccade event 
data
# of raw data, arranged data and saccade event data
Shibuya       105        115         220        
Noda 
117        123         240        
Area
tense
relax
Total
# of positive/negative examples

ILP Execution
We used our ILP tool (GKS) [Mizoguchi1995].
Shibuya         17          16           33             533 sec
Noda 
14          25           39           2400 sec
Area
tense
relax
Total
The number of rules, and learning time
Learning
times
( Windows 7 OS, two 2.40GHz Intel(R) Core(TM) i5 CPU, 4GB memory )

Learned Rules
{21,0} class(A, tense) :‐
before_event(A, B), lookAt(B, corner), accele(B, zero).
{20,0} class(A, tense) :‐
before_event(A, B), before_event(B, C), brake(B, on), 
brake_diff(C, ‐1 noChange), gazeY(C, front). 
{35,0} class(A, relax) :‐
brake(A, off), brake_diff(A, +5, noChange), 
steering(A, straight).
{15,0} class(A, relax) :‐
after_event(A, B), brake(B, off), 
front_diff(B, ‐5, noChange), steering_diff(A, +5, rightLow), 
steering_diff(B, ‐5, rightLow).
{10,0} class(A, tense) :‐
velocity(A, under10), velocity_diff(A, ‐1, upLow), 
velocity_diff(A, +5, upLow).

{35,0} class(A, relax) :‐
brake(A, off), brake_diff(A, +5, noChange), 
steering(A, straight).
This is a simple rule indicating that driver becomes relaxed when going
straight without continued braking.
A simple rule for “relaxed”

A typical rule for “tense”
{21,0} class(A, tense) :‐
before_event(A, B), lookAt(B, corner), accele(B, zero).
Focusing on the previous saccade event which driver looks at the corner
Of the front window without pressing the accelerator.
This means that driver is just making a turn.

Rule for a sequence of sacade events
{20,0} class(A, tense) :‐
before_event(A, B), before_event(B, C), brake(B, on), 
brake_diff(C, ‐1 noChange), gazeY(C, front). 
A sequence of saccade events occurs in a short time period with contined
braking in watching the front direction.

Unexpected rule for “tense”
{10,0} class(A, tense) :‐
velocity(A, under10), velocity_diff(A, ‐1, upLow), 
velocity_diff(A, +5, upLow).
Driver is tense even when the driving speed is low and slightly
accelerating. He carefully looked in front of the car.

Experiment‐1: Accuracy on difference BK
B1        75.5%        73.8%        75.2%
Shibuya     B2        84.5%        85.1%        81.9%
(urban)    B3        85.9%        84.9%        85.7%
B1        72.5%        71.1%        73.5%
Noda          B2        81.3%        81.6%        79.5%
(country)   B3        84.2%        83.7%        83.8%
Area
BK
Accuracy
Precision
Recall
B1 = Qualitative parameter values of driving data
B2 = B1 + Qualitative differences of parameter changes
B3 = B2 + Information about adjacent saccade events
10‐fold cross‐validation

Experiment‐2: Learning curve based on 
the assumption of real‐time learning

Experiment‐3: Applying learned rules to  
another driving situation

Testing country load rules on urban area driving

Testing urban load rules on country side driving

Comparison with Progol
Area
tense
relax
Total
The number of learned rules
Shibuya
Noda 
GKS
17          16           33
Progol
8          11           19
GKS
14          25           39 
Progol
8          15           23       
Tool

Comparison with Progol (continued)
GKS          85.9%        84.9%        85.7%
Progol      81.8%        78.8%        84.8%
GKS          84.2%        83.7%        83.8%
Progol      86.7%        89.7%        82.1%
Area
Tool
Accuracy
Precision
Recall
10‐fold cross validation result
Shibuya
Noda 

• Industry takes an initiative to get more 
accurate rules.
• Real‐time identification of driver’s cognitive 
states.
• What type of service should be provided in 
relaxed situations?
Toward a practical stage

Image of the next generation car navigation system

New experimental environment

• ILP has successfully produced logic rules that 
are understandable for rule verification and 
refinement.
• Realistic experiments were conducted to 
demonstrate the learning performance of the 
ILP approach.
• Reasonable accuracy was obtained for an 
appropriate service providing safe driving.
Conclusions

