Peirce's Remarkable Rules of Inference
John F. Sowa
Abstract.  The rules of inference that Peirce invented for existential graphs are the 
simplest, most elegant, and most powerful rules ever proposed for any version of 
logic.  They are so simple that they have a good claim of being close to the “natural 
logic” that underlies human reasoning.  In fact, they are a simplification and 
generalization of the rules for natural deduction that Gentzen developed about 38 
years later.  This talk summarizes Peirce's statement of the rules in MS 514 and 
generalizes them to a notation-independent form:  they can be applied to any 
syntax, ranging from predicate calculus to various graphical notations and stylized 
versions of natural languages.  An interesting property of Peirce's form of natural 
deduction is that it can be viewed as the inverse of resolution:  when stated in 
Peirce's form, any proof by resolution can be converted to a proof by natural 
deduction just by placing a negation in front of each step and reversing the order. 
Presented at a conference on Applying Peirce, Helsinki, Finland, 13 June 2007. 
What is Remarkable About Peirce's Rules?
• Simplest, most general rules of inference ever discovered. 
• Originally defined in terms of Peirce's existential graphs. 
• But a generalized version of the rules can be applied to any notation, 
including natural languages. 
• All rules and axioms by Frege, Russell, Whitehead, Gentzen, Robinson, etc. 
can be derived from Peirce's rules. 
• No simpler rules for full first-order logic are possible. 
• Therefore, the generalized rules (or something very similar) are 
likely candidates for a “natural logic” of the human brain. 
• In Peirce's words, they generate “a moving picture of thought.” 

Peirce's Notations for Logic
Peirce invented and experimented with many different notations. 
His relational algebra of 1870 was the first version of logic to go beyond monadic 
predicates. De Morgan called it the most important publication on logic since 
Boole. 
In his algebraic notation of 1880 and 1885, Peirce introduced two quantifiers 
(which he called the universal and existential quantifiers) and four Boolean 
operators (conjunction, disjunction, negation, and material implication). 
In the 1885 article, he used quantifiers over individuals (which he called first-
intentional logic) and quantifiers over relations (which he called second-intentional 
logic). 
For his relational graphs of 1883, he used the existential quantifier and negation, 
but he could not find a convenient way to represent both quantifiers, all Boolean 
operators, and their scope. 
For his entiative graphs of 1896, he chose disjunction, negation, and the universal 
quantifier. By using an oval enclosure for negation, he could show the scope and 
represent full first-order logic. 
For his existential graphs of 1897, he switched to the dual form (conjunction, 
negation, and the existential quantifier). 
For the remainder of his life, Peirce used existential graphs for most of his work on 
logic, and he experimented with various ways of representing modal and higher-
order logic in EGs. 
For Hilary Putnam's summary of Peirce's contributions to logic, see
     http://www.jfsowa.com/peirce/putnam.htm
For Peirce's own tutorial on existential graphs, see
     http://www.jfsowa.com/peirce/ms514.htm
Among other things, Peirce proved the soundness of his rules by the method of 
endoporeutic (outside-in evaluation), which is an early example of Hintikka's 
method of game-theoretical semantics.

Choice of Logical Operators
Peirce had discovered that all 16 Boolean operators could be defined in terms of 
just one primitive operator — either nand or nor. 
But for existential graphs, he chose three operators: 
• Conjunction (shown by drawing two or more graphs in the same area). 
• Negation (shown by an oval that negates any graphs in the enclosed area). 
• Existential quantifier (shown by a line of identity that is connected to any 
relations that apply to the entity it represents). 
Reasons for choosing those three: 
• Existence and conjunction are the only two operators that can be observed 
directly.  No other operators are needed to state the raw data of any science. 
• All other logical operators are known only by inference. 
• Negation is problematical, but all other operators are worse.  

Discourse Representation Structures
A notation designed by Hans Kamp for representing natural language semantics. 
An EG and a DRS for the sentence “If a farmer owns a donkey, then he beats it”:
 
 
The EG has two lines of identity, which correspond to the two variables x and y in 
the DRS. 
Both the EG and the DRS assume the existential quantifier as primitive. 
They have logically equivalent scoping rules. 
They are equivalent to the same formula in predicate calculus: 
~(∃x)(∃y)(farmer(x)  donkey(
∧
y) 
 owns(
∧
x,y) 
 ~beats(
∧
x,y)). 
The coincidence results from the goal of representing NL semantics as simply as 
possible. 
Note:  A shaded area in an EG is nested in an odd number of negations; an 
unshaded area is nested in an even number of negations (possibly zero).

Peirce's Rules of Inference
Three pairs of an insertion rule (i) and an erasure rule (e): 
1. (i)  Any graph-instance may be inserted in a negative (shaded) area. 
(e)  Any graph-instance in a positive (unshaded) area may be erased. 
2. (i)  Any graph-instance may be iterated (copied) in the same area or any area 
      enclosed in it, provided that lines of identity retain their previous 
connections. 
(e)  Any graph-instance that could have been copied by iteration may be 
erased. 
3. (i)  A vacant ring-shaped area (double negation) may be inserted around any 
area 
      and any graphs in it. 
(e)  Any vacant ring-shaped area (double negation) may be erased. 
Each rule inserts or erases one graph. 
Leibniz's Praeclarum Theorema
Stated as an existential graph:
 
In the usual algebraic notation:   ((p⊃r) 
 (
∧q⊃s)) 
 ((
⊃
p∧q)  (
⊃r∧s)) 

Proof of the Praeclarum Theorema
 
Seven steps, starting from a blank sheet of paper. 
Comparison with the Principia Mathematica
Whitehead and Russell proved the Praeclarum Theorema 
as one of their last theorems in propositional logic: 
• Their proof took a total of 43 steps. 
• Instead of starting with a blank sheet, they started with five nonobvious 
axiom schemata (in effect, an infinite number of axioms). 
• One axiom schema was redundant. 
• But it took 16 years before anybody noticed the redundancy. 
The rules of the Principia made more students fear and loathe logic 
than any other development of the 20th century. 
W and R (and their students) would have been spared a lot of wasted effort 
if the journal Mind had accepted Peirce's paper on EGs in 1906. 

Gerhard Gentzen's Natural Deduction
 
One reason for Gentzen's larger number of rules is the larger number of operators, 
but Peirce's rules can be generalized to any notation, including the usual algebraic 
notation for predicate calculus.  See the example below, where the same six rules 
are used with the algebraic notation, and they lead to a proof that is step-by-step 
equivalent to the proof in EG notation.

Cut-and-Paste Theorem
A remarkable property of Peirce's rules: 
• They depend on whether an area is positive or negative. 
• They don't depend on how deeply nested the area happens to be. 
• Therefore, any proof that is possible on a blank sheet of paper, 
can be “cut out” and “pasted in” any positive area nested at any depth. 
A Corollary to the Cut-and-Paste Theorem
Deduction theorem:  If q is provable from p, then p⊃q. 
Given the steps of any proof p,...,q, apply the cut-and-paste theorem:
 
The first three steps start with the blank to prove p⊃p. 
The last step copies the previous proof to derive q from the inner copy of p. 

Two Versions of Natural Deduction
 
Peirce's version is a perfection of natural deduction, 
not an anticipation of Gentzen's version. 
Applying Peirce's Rules to any Notation for Logic
First step:  Restate Peirce's rules in a notation-independent way. 
Then for any particular notation (e.g., predicate calculus or even natural 
languages), 
• Identify positive and negative contexts. 
• Identify syntactic transformations that generalize or specialize expressions 
in the language. 
Examples: 
• “a man” is more generalized than “Socrates”. 
• “an animal” is more generalized than “a carnivore”. 
• “cat in a house” is more specialized than “cat”. 
• In the sentence “Every A is a B,” the subject “A” is in a negative context, 
and the predicate “is a B” is in a positive context. 

Notation-independent Version of Peirce's Rules
Three pairs of rules, labeled (i) and (e) to show the correspondences. 
1. (i)  In a negative area, any expression may be replaced by a specialization. 
(e)  In a positive area, any expression may be replaced by a generalization. 
2. (i)  Any complete sentence (or any generalization of it) may be iterated 
      in the same area or any area enclosed in it, provided that the result is 
      syntactically correct and all anaphoric expressions retain their referents. 
(e)  Any complete sentence that could have been derived by iteration may be 
erased. 
3. (i)  A double negation may be inserted around any complete sentence. 
(e)  Any double negation may be erased. 
Minor adjustments may be needed to accommodate various notations.
Applying Peirce's Rules to Formal Languages
Since discourse representation structures are isomorphic to existential graphs, 
Peirce's rules can be applied with a minimum of modification: 
• Every proof for EG can be mapped step-by-step to a proof for DRS. 
• Rules for lines of identity are mapped to rules for variables. 
• No adjustment is necessary for conjunctions, since both EGs and DRSs leave 
the conjunction operator implicit. 
If a formula in predicate calculus is translated to the operators , 
, and ~, Peirce's
∃∧
 
rules can be applied directly. 
But by marking the positive and negative areas, many proofs can be carried out 
without any translation. 
The Praeclarum Theorema stated in predicate calculus can be proved in exactly 
the same steps as the EG proof and without any translation. 
However, adjustments are needed for inserting and erasing 
 operators as needed. 
∧

An Application of the Rules to Predicate Calculus
Proof of the Praeclarum Theorema starting with a blank sheet: 
 
Every step is logically equivalent to the corresponding step with EGs.
Erase the shading to get the usual algebraic notation.

An Application of the Rules to English
 
Rule 1i specializes “cat” to “cat in the house.”
Rule 1e generalizes “a carnivore” to “an animal.”
Such inferences support Aristotle's syllogisms and description logics.

Another Proof in English
Given “If a cat is on a mat, then it is happy” and “Yojo is on a mat”,
 
 
Such inferences support rule-based systems.
All other inferences in first-order logic can be performed by applying the 
generalized version of Peirce's rules to the FOL subset of English or other NLs.

An Interesting Theorem
Resolution theorem provers (based on a technique by J. Alan Robinson) 
are widely used for theorem proving by computer systems. 
Resolution is a proof by contradiction in which the last step is called 
the empty clause (or in Peirce's terminology, the pseudograph). 
The resolution rules can be proved from Peirce's rules as derived rules. 
When applied to existential graphs, any proof by resolution can be converted 
to a proof in Peirce's form of natural deduction by the following steps: 
1. Draw a negation around the graphs at each step of the proof. 
2. Reverse the order of the proof. 
As the result of this procedure, the pseudograph in the last step of resolution 
becomes a double negation, which is the usual first step with Peirce's rules. 
This theorem also holds for the generalized version of Peirce's rules 
when applied to notations such as DRS or predicate calculus. 
Summary
When applied to existential graphs and related notations, such as conceptual 
graphs, Peirce's rules support the simplest proof procedure ever discovered. 
For predicate calculus and other formal notations, Peirce's rules can be adapted 
to support a complete proof procedure. 
For natural languages, Peirce's rules can directly support an important subset, 
such as syllogisms and other FOL statements. 
But to specify the generalization and specialization rules for all the syntactic 
patterns of any natural language is still a major research project. 
The power and simplicity of Peirce's rules make them an excellent candidate 
for the “moving picture of thought” that underlies human reasoning processes. 

Supplementary Reading
An annotated version of Peirce's MS 514:
        http://www.jfsowa.com/peirce/ms514.htm 
Hilary Putnam's summary of Peirce's contributions to logic: 
http://www.jfsowa.com/peirce/putnam.htm
A talk that was presented in July 2006: 
http://www.jfsowa.com/pubs/csp21st.pdf
Peirce's Contributions to the 21st Century 

