Rethinking Quaternions
Theory and Computation


iii
Synthesis Lectures on Computer  
Graphics and Animation
Editor
Brian A. Barsky, University of California, Berkeley
Rethinking Quaternions
Theory and Computation
Ron Goldman
2010
Information Theory Tools for Computer Graphics
Mateu Sbert, Miquel Feixas, Jaume Rigau, Miguel Chover, and Ivan Viola
2009
Introductory Tiling Theory for Computer Graphics
Craig S. Kaplan
2009
Practical Global Illumination with Irradiance Caching
Jaroslav Krivanek, Pascal Gautron
2009
Wang Tiles in Computer Graphics
Ares Lagae
2009
Virtual Crowds: Methods, Simulation, and Control
Nuria Pelechano, Jan M. Allbeck, Norman I. Badler
2008

Interactive Shape Design
Marie-Paule Cani, Takeo Igarashi, Geoff  Wyvill
2008
Real-Time Massive Model Rendering
Sung-eui Yoon, Enrico Gobbetti, David Kasik, Dinesh Manocha
2008
High Dynamic Range Video
Karol Myszkowski, Rafal Mantiuk, Grzegorz Krawczyk
2008
GPU-Based Techniques for Global Illumination Effects
László Szirmay-Kalos, László Szécsi, Mateu Sbert
2008
High Dynamic Range Image Reconstruction
Asla M. Sá, Paulo Cezar Carvalho, Luiz Velho
2008
High Fidelity Haptic Rendering
Miguel A. Otaduy, Ming C. Lin
2006
A Blossoming Development of Splines
Stephen Mann
2006
iv


Copyright © 2010 by Morgan & Claypool
All rights reserved. No part of this publication may be reproduced, stored in a retrieval system, or transmitted in 
any form or by any means—electronic, mechanical, photocopy, recording, or any other except for brief quotations 
in printed reviews, without the prior permission of the publisher.
Rethinking Quaternions: Theory and Computation
Ron Goldman
www.morganclaypool.com
ISBN: 9781608454204	 paperback
ISBN: 9781608454211	 ebook
DOI: 10.2200/S00292ED1V01Y201008CGR013
A Publication in the Morgan & Claypool Publishers series
SYNTHESIS LECTURES ON COMPUTER GRAPHICS AND ANIMATION #13
Lecture #13
Series Editor: Brian A. Barsky, University of California, Berkeley
Series ISSN
ISSN  1933-8996  print
ISSN  1933-9003  electronic

Rethinking Quaternions
Theory and Computation
Ron Goldman
Rice University
SYNTHESIS LECTURES ON COMPUTER GRAPHICS AND ANIMATION #13

Keywords
complex number, mass-point, rotation, reflection, perspective projection, quaternion,  
sandwiching
ABSTRACT
Quaternion multiplication can be used to rotate vectors in three-dimensions. Therefore, in com-
puter graphics, quaternions have three principal applications: to increase speed and reduce storage 
for calculations involving rotations, to avoid distortions arising from numerical inaccuracies caused 
by floating point computations with rotations, and to interpolate between two rotations for key 
frame animation. Yet while the formal algebra of quaternions is well-known in the graphics com-
munity, the derivations of the formulas for this algebra and the geometric principles underlying this 
algebra are not well understood. The goals of this monograph are
to provide a fresh, geometric interpretation for quaternions, appropriate for contemporary 
computer graphics, based on mass-points;
to present better ways to visualize quaternions, and the effect of quaternion multiplication 
on points and vectors in three dimensions using insights from the algebra and geometry of 
multiplication in the complex plane;
to derive the formula for quaternion multiplication from first principles;
to develop simple, intuitive proofs of the sandwiching formulas for rotation and reflection;
to show how to apply sandwiching to compute perspective projections.
In addition to these theoretical issues, we also address some computational questions. We develop 
straightforward formulas for converting back and forth between quaternion and matrix representa-
tions for rotations, reflections, and perspective projections, and we discuss the relative advantages 
and disadvantages of the quaternion and matrix representations for these transformations. More-
over, we show how to avoid distortions due to floating point computations with rotations by using 
unit quaternions to represent rotations. We also derive the formula for spherical linear interpolation, 
and we explain how to apply this formula to interpolate between two rotations for key frame anima-
tion. Finally, we explain the role of quaternions in low-dimensional Clifford algebras, and we show 
how to apply the Clifford algebra for R3 to model rotations, reflections, and perspective projections. 
To help the reader understand the concepts and formulas presented here, we have incorporated 
many exercises in order to clarify and elaborate some of the key points in the text.
•
•
•
•
•
viii

ix
To lovers and haters of quaternions.
And when he had apprehended him, he put him in prison, and delivered him to  
four quaternions of soldiers to keep him; intending after Easter to bring him  
forth to the people.	
Acts 12:4


xi
Contents
Preface........................................................................................................................xi
I.	
Theory................................................................................................................1
1.	
Complex Numbers............................................................................................... 3
2.	
A Brief History of Number Systems and Multiplication................................... 11
2.1	
Multiplication in Dimensions Greater Than Two.................................. 14
3.	
Modeling Quaternions....................................................................................... 17
3.1	
Mass-Points: A Classical Model for Contemporary  
Computer Graphics.................................................................................17
3.2	
Arrows in Four Dimensions................................................................... 21
3.3	
Mutually Orthogonal Planes in Four Dimensions................................. 22
4.	
The Algebra of Quaternion Multiplication........................................................ 27
5.
... ........ .. .......... ...................
The Geometry of Quaternion Multiplication.................................................... 37
6.	
Affine, Semi-Affine, and Projective Transformations in Three Dimensions...... 47
6.1	
Rotation.................................................................................................. 49
6.2	
Mirror Image.......................................................................................... 54
6.3	
Perspective Projection............................................................................. 59
	
6.3.1
Perspective Projection and Singular 4 × 4 Matrices.................... 60
	
6.3.2
Perspective Projection by Sandwiching with Quaternions.......... 62
6.4	
Rotorperspectives and Rotoreflections.................................................... 72
7.	
Recapitulation: Insights and Results................................................................... 77
II.	
Computation.....................................................................................................81
8.	
Matrix Representations for Rotations, Reflections,  
and Perspective Projections................................................................................. 83
8.1	
Matrix Representations for Quaternion Multiplication.......................... 83
8.2	
Matrix Representations for Rotations.................................................... 85
8.3	
Matrix Representations for Mirror Images............................................. 88
8.4	
Matrix Representations for Perspective Projections................................ 90

xii 
Rethinking Quaternions: Theory and Computation
9.	
Applications........................................................................................................ 95
9.1	
Efficiency: Quaternions Versus Matrices................................................ 95
9.2	
Avoiding Distortion by Renormalization............................................... 96
9.3	
Key Frame Animation and Spherical Linear Interpolation.................... 97
10.	
Summary—Formulas From Quaternion Algebra............................................. 101
III.	 Rethinking Quaternions and Clif ford Algebras................................................. 107
11.	
Goals and Motivation....................................................................................... 109
12.
........ ........ ... ................
Clif ford Algebras and Quaternions.................................................................. 111
13.	
Clifford Algebra for the Plane.......................................................................... 113
14.	
The Standard Model of the Clifford Algebra for Three Dimensions............... 117
14.1	
Scalars, Vectors, Bivectors, and Pseudoscalars...................................... 117
14.2	
Wedge Product and Cross Product....................................................... 118
14.3	
Duality.................................................................................................. 119
14.4	
Bivectors............................................................................................... 121
14.5	
Quaternions.......................................................................................... 122
15.	
Operands and Operators—Mass-Points and Quaternions............................... 125
15.1	
Odd Order: Mass-Points...................................................................... 125
15.2	
Even Order: Quaternions..................................................................... 127
16.	
Decomposing Mass-Points Into Two Mutually Orthogonal Planes................. 129
16.1	
Action of q (b, q ) , on b ⊥....................................................................... 130
16.2	
Action of q (b, q ) , on b||............................................................................ 131
16.3	
Sandwiching......................................................................................... 134
17.	
Rotation, Reflection, and Perspective Projection.............................................. 137
17.1	
Rotation................................................................................................ 138
17.2	
Mirror Image........................................................................................ 139
17.3	
Perspective Projection........................................................................... 141
18.	
Summary.......................................................................................................... 145
19.	
Some Simple Alternative Homogeneous Models for Computer Graphics...... 149
References................................................................................................................ 153
Further Reading........................................................................................................ 155
Author Biography..................................................................................................... 157

xiii
All the great ideas have been thought before; the trick is to think them again.
	
Goethe
Quaternions are vectors in four dimensions endowed with a rule for multiplication that is 
associative but not commutative, distributes through addition, contains an identity, and for which 
each nonzero vector in four dimensions has a unique inverse. Ever since the discovery of quaternion 
multiplication, quaternions have been used to rotate vectors in three dimensions by sandwiching a 
vector in three dimensions between a unit quaternion and its conjugate [Hamilton, 1866].
In contemporary computer graphics, quaternions have three principal applications. First, 
quaternions can be used to reduce storage and to speed calculations involving rotations. A quater-
nion is represented by just four scalars, in contrast to a 3 × 3 rotation matrix, which has nine scalar 
entries. Also, to compose two rotations with quaternion multiplication requires only 16 scalar mul-
tiplications, whereas composing two rotations with matrix multiplication uses 27 scalar multiplica-
tions (see Section 9.1). Second, quaternions can be used to avoid distortions that inevitably arise in 
scenes from numerical inaccuracies introduced by floating point computations involving rotations. 
Unlike rotation matrices, quaternions are easily renormalized, so distortions of lengths and angles 
can be avoided more simply by replacing rotation matrices with unit quaternions (see Section 9.2). 
Third, in key frame animation, we can readily interpolate smoothly between two rotations repre-
sented by unit quaternions by using spherical linear interpolation (SLERP) [Shoemake, 1985] (see 
also Section 9.3). In contrast, it is not so simple to interpolate smoothly between two rotation ma-
trices. Other potential applications of quaternions in computer graphics include practical methods 
for tubing and texturing smooth curves and surfaces using optimal orthonormal frames [Hanson, 
2006], better ways to visualize streamlines [Hanson, 2006], and effective techniques for generating 
and analyzing three-dimensional Pythagorean hodograph curves [Farouki, 2008].
Yet although the algebra of quaternions—multiplication, sandwiching, interpolation—is well 
established in computer graphics [Foley et al., 1990], the underlying geometry of quaternions is not 
well understood. The formulas for multiplication and sandwiching work, but it is hard to see how 
anyone ever came up with these formulas. Even the geometric meaning of a quaternion—a scalar 
Preface

xiv 
Rethinking Quaternions: Theory and Computation
added to a vector—is an enigma. The purpose of this book is to develop a better intuitive geometric 
understanding of quaternions, as well as to remove much of the mystery surrounding quaternion 
algebra.
The goal of this monograph is to make five principal theoretical contributions:
To provide a fresh, geometric interpretation for quaternions, appropriate to contemporary 
computer graphics, by invoking mass-points. Thus this monograph is a sequel to [Goldman, 
2002], extending multiplication to the space of mass-points;
To present better ways to visualize quaternions and the effect of quaternion multiplication 
on points and vectors in three dimensions based on insights from the algebra and geometry 
of multiplication in the complex plane;
To derive the formula for quaternion multiplication from first principles;
To develop simple, intuitive proofs of the sandwiching formulas for rotation and reflection;
To show how to apply sandwiching to compute perspective projections.
In addition to these theoretical issues, we shall also address some computational questions. 
Our objectives here are to:
Develop straightforward explicit formulas for converting between quaternion and 4 × 4 
matrix representations for rotations, reflections, and perspective projections;
Discuss the relative merits of the quaternion and matrix representations for these three 
transformations;
Explain how to avoid distortions due to floating point computations with rotations by us-
ing unit quaternions to represent rotations;
Derive the formula for spherical linear interpolation (SLERP) and explain how to apply 
this formula to interpolate between two rotations for key frame animation.
Recently several authors have suggested Clifford algebras as the appropriate framework for 
the study of contemporary computer graphics [Dorst et al., 2007]. Quaternions form a subalgebra 
of the Clifford algebra for R3. Therefore, in Part III of this monograph, we investigate the role of 
quaternions in the Clifford algebra for R3. Here our purpose is to:
Provide a straightforward explanation of Clifford algebra for the uninitiated;
Present a simpler model of Clifford algebra for the study of computer graphics than the one 
proposed by current proponents of Clifford algebra;
Explain the role of quaternions in the Clifford algebra for R3 and relate this role back to 
what we have already learned in about quaternions in Part I of this text.
1.
2.
3.
4.
5.
1.
2.
3.
4.
1.
2.
3.

Preface  xv
To facilitate these goals, this monograph is divided into three parts: Part I deals with the 
theory of quaternion multiplication; Part II is devoted to computational issues; Part III investi-
gates the role of quaternions in the Clifford algebra for R3. To help the reader better understand 
the concepts, insights, and formulas presented here, we have incorporated many practice exercises 
throughout the text.
We begin in Chapter 1 with a brief review of complex numbers; these well-known lower-
dimensional analogues of quaternions provide the natural foundation for understanding quater-
nions. But before we launch into our study of quaternions using insights from complex numbers, 
we provide in Chapter 2 a brief overview of the meaning of multiplication for different number 
systems—the natural numbers, the integers (positive and negative), the rational numbers, the real 
numbers, and the complex numbers—each system generated by solving more and more complicated 
polynomial equations. We observe that after the complex numbers no new numbers are generated 
by solving more complicated polynomial equations, so the notion of numbers in higher dimensions 
must take on new meaning. We find this meaning in geometry rather than algebra, in representing 
rotations in higher dimensions rather than embodying novel solutions to polynomial equations. 
This interpretation leads us naturally to quaternions.
In Chapter 3, we introduce three geometric models for thinking about quaternions: mass-
points in three dimensions, vectors in four dimensions, and pairs of mutually orthogonal planes in 
four dimensions, one isomorphic to the complex plane and the other isomorphic to a quaternion 
multiple of the complex plane. Chapter 4 is devoted to investigating the algebra of quaternion mul-
tiplication. Here we derive the formula for the product of two quaternions from first principles: the 
associative and distributive laws for multiplication and the rule that the length of the product of two 
quaternions must be equal to the product of their lengths. In Chapter 5, we provide a fresh, intui-
tive, geometric interpretation of quaternion multiplication as rotation in two mutually orthogonal 
planes in four dimensions: one plane isomorphic to the complex numbers where multiplication on 
the left and the right rotates vectors by the same amount in the same direction and a second plane 
isomorphic to a quaternion multiple of the complex numbers, where multiplication on the left and 
the right rotates vectors by the same amount in opposite directions. Chapter 6 is devoted to using 
this simple, geometric interpretation of quaternion multiplication to develop straightforward, intui-
tive derivations of the sandwiching formulas for rotation, mirror image, and perspective projection 
in three dimensions. While the sandwiching formulas for rotation and reflection are well-known, 
the sandwiching formula for perspective projection in Section 6.3 is new and does not appear in 
the work of previous writers on quaternions. Here the interpretation of quaternions as mass-points 
plays a key role. In Section 6.4, we also provide straightforward geometric interpretations for how 
left and right multiplication by quaternions as well as some more general sandwiching formulas 
affects vectors in three dimensions. We recapitulate our main conceptual insights and principal 

xvi 
Rethinking Quaternions: Theory and Computation
theoretical results in Chapter 7. This summary ends Part I of this monograph on the theory of  
quaternions.
In Part II we turn our attention from theoretical to computational issues. In Chapter 8 we 
develop straightforward explicit formulas for converting back and forth between quaternion and 
matrix representations for rotations, reflections, and perspective projections. Chapter 9 is devoted 
to applications of quaternions in computer graphics. In Section 9.1 we discuss the relative advan-
tages and disadvantages of the quaternion and matrix representations for rotations, reflections, and 
perspective projections. Section 9.2 explains how to avoid distortions due to floating point compu-
tations with rotations by using unit quaternions to represent rotations. In Section 9.3 we derive the 
formula for spherical linear interpolation (SLERP), and we explain how to apply this formula to 
interpolate between two rotations for key frame animation. We close Part II in Chapter 10 with a 
brief summary of the main formulas presented in the body of this text.
Part III is devoted to understanding the role of quaternions in Clifford algebra. We begin 
in Chapter 11 with a general overview of our goals and motivation. Chapter 12 contains a brief 
description of the general Clifford algebras for n-dimensional vector spaces. Here we observe that 
for n ≥ 2 each of these Clifford algebras (with signature n) contains the quaternions as a subalgebra. 
The Clifford algebra for R2 is actually isomorphic to the quaternions, so in Chapter 13 we investi-
gate the Clifford algebra for R2 and show how this Clifford algebra is used to study conformal (i.e., 
angle preserving) linear maps on R2. In Chapter 14 we provide a brief review for the uninitiated of 
the standard objects—scalars, vectors, bivectors, and pseudoscalars—along with some of the basic 
formulas—Clifford product, wedge product, duality—for the Clifford algebra of R3. Readers al-
ready familiar with Clifford algebra can skip this tutorial. In Chapter 15 we introduce the operators 
and operands—quaternions and mass-points—by exploiting the pseudoscalars to represent mass. 
Chapter 16 is devoted to studying the action of the unit quaternions on the space of mass-points, 
and Chapter 17 shows how to apply the sandwiching operators to compute rotation, mirror image, 
and perspective projection on points as well as on vectors in R3. Many of these results will already be 
known to readers familiar with Clifford algebra, but the material on perspective projection in Sec-
tion 17.3 appears once again to be completely new. We summarize our principal insights and results 
in Chapter 18. Finally, we close in Chapter 19 with a critical assessment of our approach to the 
Clifford algebra of R3, and we provide here some simple, alternative approaches to a homogeneous 
model for contemporary computer graphics.
There are two fundamental insights in this text: one algebraic and the other geometric. The 
algebra is covered in Chapter 4, the geometry in Chapter 5. The rest of the text either provides pre-
liminary results leading up to these two chapters or contains consequences of the results presented 
in these two chapters.

Preface  xvii
The key algebraic insight is that the property that the length of the product is equal to the 
product of the lengths along with the standard associative, distributive, and identity axioms for mul-
tiplication are enough to completely characterize the formula for the product of two quaternions.  
This insight goes back to Hurwitz [1898], who used this idea to prove algebraically that the only 
real vector spaces with multiplication and division are in dimensions 1, 2, and 4, corresponding to 
the real numbers, the complex numbers, and the quaternions [see also Conway and Smith, 2003]. 
(A nonassociative rule for multiplication exists in dimension 8; these numbers are called the octo-
nions—see again Conway and Smith, 2003.) We shall show in Chapter 4 how to apply this ap-
proach in a more geometric fashion to derive similar results.
The second key insight is geometric. Multiplication by a unit quaternion represents a double 
isoclinic rotation in four dimensions [Mebius, 2005]—that is, there are two orthogonal planes in 
four dimensions where vectors are rotated by the same angle. For left multiplication, the rotations  
in both planes are counterclockwise, but for right multiplication, the rotation in one plane is counter­
clockwise, while the rotation in the other plane is clockwise; thus left and right quaternion multi-
plication generate left and right screws in R4 [Du Val, 1964]. This observation allows us to apply 
sandwiching to combine two rotations in order to cancel the rotation in one of these planes and 
thereby generate a simple rotation in four dimensions. This insight is what ultimately allows us in 
Chapter 6 to apply sandwiching with unit quaternions to model rotations, reflections, and perspec-
tive projections in three dimensions. Hence these three basic transformations in three dimensions 
are modeled by simple rotations in four dimensions. Therefore the point of view that we shall adopt 
here is that the fundamental transformations are precisely the simple rotations in four dimensions.
Thus the main ideas and insights in this monograph are not new but are rather based on the 
work of many predecessors. I have simply tried to update, organize, and apply these seminal ideas in 
ways that can be more easily understood by contemporary practitioners of computer graphics.
Only elementary matrix algebra along a passing familiarity with complex numbers is required 
background for reading this work. I have tried, however, whenever possible to use coordinate free 
methods. Therefore the reader should also have a rudimentary knowledge of vector algebra, espe-
cially of dot and cross product. Minimally the reader should know that
	
u ⋅ v = 0 ⇔ u ⊥ v	
	
u × v ⊥ u, v.	
Most of the technical terms used throughout this text are standard in computer graphics 
and will be familiar even to novice readers. Two important concepts that may be less familiar are 
expressed by the terms conformal map and isometry. A transformation is said to be a conformal map 

xviii 
Rethinking Quaternions: Theory and Computation
if it preserves angles; a transformation is said to be an isometry if it preserves lengths. All isometries 
are conformal maps, but not all conformal maps are isometries. For example, rotation is an isometry; 
uniform scaling is not an isometry, but uniform scaling is a conformal map. Armed with these basic 
concepts, the reader should now be fully ready to proceed to the text.
I would like thank Rida Farouki for reigniting my interest in quaternions by explaining to 
me that multiplying by a unit quaternion rotates quaternions in four dimensions. One of the main 
themes of this monograph is that the simplest way to understand how quaternion multiplication 
generates different transformations in three dimensions is to understand how quaternion multi-
plication induces simple rotations in four dimensions—that is, rotations in a single plane in four 
dimensions. I would also like to thank Joe Warren for encouraging me to develop a more intuitive 
approach to understanding quaternions, as well as for reading several initial drafts of Part I of this 
manuscript and suggesting better ways to organize and present some of this material. In addition, 
I would like to thank Andrew Hanson for some lively discussions along with several insightful ob-
servations concerning the ideas presented in Part I. I am indebted to Leo Dorst and Steve Mann 
for reading a preliminary draft of Part III and providing valuable comments, criticisms, and sugges-
tions. Part III of the text is much improved as a result of their observations. Finally, Rida Farouki 
and Andrew Hanson read an initial draft of this entire manuscript and suggested many worthwhile 
improvements which I have tried to incorporate into the body of this monograph.
Most of the material in Part I first appeared in my Graphical Models paper “Understand-
ing Quaternions,” and much of the material in Part II is taken from Chapter 15 of my book, “An 
Integrated Introduction to Computer Graphics and Geometric Modeling.” I would like to thank 
Elsevier and Taylor & Francis for allowing me to reuse this material in this extended opus.


p a r t  I
Theory



Complex Numbers
Many of the properties of quaternions can be understood as extensions of properties of the complex 
numbers. Therefore we begin our study of quaternions with a brief review of complex numbers and 
complex multiplication.
Complex numbers are often represented by vectors in two dimensions. The complex number 
w = a + bi corresponds to the vector v = (a, b) in the xy -plane. Addition, subtraction, and scalar mul-
tiplication of complex numbers correspond to coordinate-free operations on vectors in the plane. 
Rectangular coordinates are introduced in practice to perform these computations, but in principle 
there is no need for preferred directions—for coordinate axes—to define addition, subtraction, or 
scalar multiplication for vectors in the plane (see Figure 1.1).
Complex multiplication is different. For complex multiplication, we must choose a preferred 
direction: the direction of the identity vector for multiplication. We denote this identity vector by 
1 and we associate this vector with the unit vector along the positive x-axis. The unit vector per-
pendicular to the identity vector we denote by i and we associate this vector with the unit vector 
along the positive y-axis. Relative to this coordinate system for every vector v in the plane there are 
constants a, b such that
v = a1 + bi.
Typically, we drop the symbol 1, and we write simply
v = a + bi.
v +w
w
v
v
w
w
v
w
cw
(a) addition
(b) subtraction
(c) scalar multiplication
FIGURE 1.1: Coordinate-free geometric constructions for (a) addition, (b) subtraction, and (c) scalar 
multiplication for vectors.
c h a p t e r  1

4 
Rethinking Quaternions: Theory and Computation
In the complex number system, i denotes 
1
−, so
	
i 2 = 1.	
(1.1)
Since 1 is the identity for multiplication, we have the rules
	
(1)(1) = 1, (i)(1) = (1)(i) = i,  (i)(i) = −1.	
(1.2)
Therefore, if we want complex multiplication to distribute through addition, then we must define
	
(a + b i)(c + d i) = a(c + d i) + bi(c + d i) = (ac − bd ) + (ad + bc)i.	
(1.3)
Using Equation (1.3), it is straightforward to verify that complex multiplication is associative, com-
mutative, and distributes through addition (see Exercise 1.1).
Every nonzero complex number has a multiplicative inverse. Let w = a + bi. The complex 
conjugate of w, denoted by w*, is defined by
	
w* = a − bi.	
(1.4)
By Equation (1.3),
	
w w* = a 2 + b 2 = | w |2,	
(1.5)
where | w | denotes the length of the vector w = (a, b). Therefore,
	
1
2
*
w
w
w
−=
 .	
From Equations (1.4) and (1.5), it is easy to verify that
	
(w1w2)* = w1*w2*.	
(1.6)
Hence by Equations (1.5) and (1.6)
|w1w2|2 = (w1w2)(w1w2)* = (w1w1*)(w2w2*) = |w1|2 |w2|2,
so
	
|w1w2| = |w1| |w2|.	
(1.7)
(For an alternative derivation of Equation (1.7), see Exercise 1.6.)
Equation (1.3) encapsulates the algebra of complex multiplication, but what is the geometric 
meaning of complex multiplication? Figure 1.1 illustrates the geometry underlying addition, sub-
traction, and scalar multiplication for complex numbers. To understand the geometry underlying 

complex numbers  
complex multiplication, observe that multiplication by a fixed complex number w is a linear trans-
formation on vectors in the plane, since by the distributive property
	
w(z1 + z2) = wz1 + wz2.	
Moreover, multiplication by a complex number of unit length is an isometry (preserves length) 
because by Equation (1.7)
	
|w1| = 1 ⇒ |w1w2| = |w2|.	
But the only linear isometries in the plane are rotations, so multiplication by a complex number of 
length one must rotate vectors in the plane.
Let’s look at some examples. Consider first multiplication with i. If v = a + bi, then
	
iv = i(a + bi) = −b + ai.	
Thus if v = (a,b), then iv = (−b,a), so
	
v ⋅ iv = (a,b) ⋅ (−b,a) = 0.	
Hence iv is perpendicular to v. Therefore multiplication by i is equivalent to rotation by 90°.  
Also,
	
(−1)(v) = −(a + b i) = −a − b i = −v, 	
so multiplication by -1 is equivalent to rotation by 180°. Thus there is indeed a link between rota-
tion and complex multiplication. Let’s explore this connection further.
Suppose that we want to rotate a vector w by the angle q. Let w ⊥ denote the vector orthogo-
nal to w of the same length as w. Then, after rotation,
	
wnew = cos(q)w + sin(q)w ⊥  (see Figure 1.2).
wnew
sin( )w
cos( )w
w
w
θ
θ
θ
FIGURE 1.2: Rotating the vector w by the angle q.

6 
Rethinking Quaternions: Theory and Computation
But if w = (u, v), then w⊥ = (−v, u), so
	
unew = u cos(q) − v sin(q)	
vnew = v cos(q) + u sin(q).
Now let z(q) be the unit vector that makes an angle q with the x-axis (see Figure 1.3). 
Then
z(q) = cos(q) + i sin(q),
so
	
cos( )
sin( )
sin( )
cos( )
( )
(cos( )
sin( ))(
)
new
new
u
v
u
v
u
v
z
w
i
u
iv
i
−
+




=
+
+
=
+










θ
θ
θ
θ
θ
θ
θ
	
Thus multiplying the complex number w by z(q) is equivalent to rotating the vector w by the angle q. 
Moreover, since complex multiplication is associative, we can compose two rotations simply by 
multiplying the associated complex numbers—that is, for all complex numbers w
	
z(f + q) w = z(f)z(q)w,	
so
	
z(f + q) = z(f)z(q).	
Rotation in the plane closely resembles exponentiation because composing two rotations is 
equivalent to adding the corresponding angles of rotation. Since complex multiplication represents 
i = (0,1)
y
axis
1= (1,0)
x
axis
ei
= cos( )+ isin( )
cos( )
sin( )
θ
θ
θ
θ
θ
θ
FIGURE 1.3: Multiplying a complex number w by the unit vector z(q) = eiq= cos(q) + isin(q) is 
equivalent to rotating the vector w by the angle q.

complex numbers  
rotation, complex multiplication is also closely related to exponentiation. Let z be an arbitrary com-
plex number. Define
	
2
3
1
2!
3!
z
z
z
e
z
=
+
+
+
+ .
	
Then
	
2
3
4
5
(
)
(
)
(
)
(
)
1
2!
3!
4!
5!
i
i
i
i
i
e
i
θ
θ
θ
θ
θ
θ
=
+
+
+
+
+
 
.
	
But i2 = −1, so substituting and collecting terms, we arrive at the following fundamental identity:
Euler’s formula
	
2
4
3
5
cos( )
sin( )
1
2!
4!
3!
5!
ie
i
i
θ
θ
θ
θ
θ
θ
θ
θ




=
+
=
+
−
+
−
−
+
−










.	
(1.8)
Since
	
z(q ) = cos(q ) + isin(q ) = eiq,	
we see once again that
	
z(f )z(q ) = eifeiq = ei(f + q ) = z(f + q ),	
so multiplying two complex numbers of unit length is equivalent to adding the angles that these 
vectors form with the x-axis.
What happens if we multiply a fixed complex number w by an arbitrary complex number z? 
If z = r, where r is a real number, then z w = r w, so the effect is to scale the vector w by the con-
stant r. Thus, both rotation and scaling can be represented by complex multiplication. Finally, if z = 
x + i y is an arbitrary complex number, then we can write z in polar form as
	
z = reiq= rz(q )	
where r = | z | and q = arctan( y / x). Hence
	
zw = rz(q )w ,	
so the effect of multiplying w by z is to rotate w by the angle q and to scale the result by the con-
stant r. Thus any conformal (angle preserving) linear transformation of vectors in the plane can be 
represented by multiplication with a single complex number.

 
Rethinking Quaternions: Theory and Computation
Exercises:
1.1. Using Equation (1.3), verify that complex multiplication is associative, commutative, and dis-
tributes through addition.
1.2. Let (r,q) denote the polar coordinates of a point in the plane. Show that in polar coordinates 
complex multiplication is equivalent to
	
(r1,q 1) (r2,q 2) = (r1 r2, q 1 + q 2).	
1.3. Here we shall derive the half angle formulas used throughout the text.
a.  Using Euler’s formula—Equation (1.8)—show that
	
i.  cos(2f) + isin(2f) = (cos(f) + isin(f))2 .
b.  Conclude from part a that
	
i.  cos(2f) = cos2(f) - sin2(f) = 2cos2(f) − 1	
	
ii.  sin(2f) = 2sin(f)cos(f).
c.  Conclude from part b that
	
i. 
1
cos( )
cos( / 2)
2
+
φ
φ
=
	
ii. 
1
cos( )
sin( / 2)
2
φ
φ
−
=
.
1.4. Let z = (x,y) = x + iy and w = (u,v) = u + iv be arbitrary vectors in the plane, and let q be the 
angle between z and w. Show that
a.  zw* = z ⋅ w + idet(z,w)
b.  zw* = |z| |w| cos(q) ± iarea(z,w).
1.5. Let w1,w2,w be complex numbers and let p(z) = anzn + . . . + a0 be a polynomial in the complex 
variable z with real coefficients a0, . . . ,an.
a.  Show that
	
i. 
*
*
1
2
1
2
(
)*
w
w
w
w
+
=
+
	
ii. 
*
*
1
2
1
2
(
)*
w w
w w
=
	
iii.  (wn)* = (w*)n
b.  Conclude from part a that if p(w) = 0, then p(w*) = 0.
1.6. Let a,b,x,y be real numbers, and let z1 = a + bi, z2 = x + yi be complex numbers.
a.  Verify Brahmagupta’s identity:
	
(a 2 + b 2)(x 2 + y 2) = (ax − by)2 + (ay + bx)2.

complex numbers  9
b.  Using Brahmagupta’s identity, prove that
	
|z1z2| = |z1||z2|.
1.7. Let a, b, c and A, B, C be the complex numbers that represent the vertices of two triangles S, T 
in the complex plane. Show that S, T are similar triangles if and only if
	
b
a
B
A
c
a
C
A
−
−
=
−
−
  .
•  •  •  •


11
c h a p t e r  2
Before we launch into our study of quaternions, we are going to review briefly multiplication for 
standard number systems to see what we should expect for multiplication in higher dimensions.
The natural numbers N = {0, 1, 2, . . .} are the numbers we use for counting. For these num-
bers, multiplication is simply repeated addition—that is, for m, n∈ N
	
m times
mn
n
n
=
+
+

 .	
For the natural numbers, multiplication is associative, commutative, and distributes through addi-
tion. We can understand these three properties as natural symmetries by invoking simple geometric 
figures to model these algebraic axioms (see Figures 2.1 and 2.2).
The associative property—m × (n × p) = (m × n) × p —can also be modeled geometrically 
by stacking the dots in a 3-D array of order m × n × p and then rotating the dots by 90° in three 
dimensions.
One reason we need to extend the natural numbers N to ever larger number systems is to 
introduce solutions to more and more complicated polynomial equations.
i.  n x = m → rational numbers
ii.  x + n = 0 → negative numbers
A Brief History of Number  
Systems and Multiplication
•
•
•
•
•
•
•
•
=
•
•
•
•
•
•
•
•
2
4
=
4
2
FIGURE 2.1: The commutative property for multiplication of natural numbers: Rotating the dots by 
90° generates a symmetric figure, which does not change the total number of dots.

12 
Rethinking Quaternions: Theory and Computation
iii.  x2 − 2 = 0 → real numbers
iv.  x2 + 1 = 0 → complex numbers
For the rational numbers, we again define multiplication by natural numbers using repeated 
addition:
	
m times
p
p
p
m
q
q
q

=
+
+





 .	
We also require that multiplication of rational numbers is associative, commutative, and distributes 
through addition. It follows easily from these rules that
	
p
pr
r
q s
qs
=
 ,	
since multiplying both sides by qs will yield the same result (see Exercise 3.1).
For the negative numbers, we once again define multiplication by natural numbers using 
repeated addition:
	
(
)
m times
m
n
n
n
−
= −+
+ −


.	
Once again we require that multiplication of negative numbers must be associative, commutative, 
and distribute through addition. But now we need a new rule. Since +1 is the identity for multiplica-
tion, we know that plus × plus = plus and plus × minus = minus × plus = minus, but what is the rule for 
minus × minus? The new rule is that minus × minus = plus because by the distributive property
	
0 = (−1)(1 − 1) = −1(1) + (−1)(−1) ⇒ (−1)(−1) = 1.	
Notice that multiplication by negative numbers preserves length, since
	
| m n | = | m | | n |.	
•
•
•
•
•
•
•
•
•
•
•
•
•
•
=
•
•
•
•
•
• + •
•
•
•
•
•
•
•
2
(3+ 4)
=
2
3
+
2
4
FIGURE 2.2: The distributive property for multiplication of natural numbers: Splitting or concatenat-
ing the dots does not change the total number of dots.

A Brief History of Number Systems and Multiplication  13
Some real numbers like 2 are solutions of simple polynomial equations, but other real num­
bers like π are not the solution of any polynomial equation. Nevertheless, every real number is the 
limit of a sequence of (positive or negative) rational numbers, so we simply extend the rules for 
multiplication—associative, commutative, and distributive—from the rationals to the reals.
Finally for the complex numbers, we also define multiplication by natural numbers using 
repeated addition:
	
m times
mw
w
w
=
+
+


.	
Moreover, by definition
	
i 2 = −1.	
If we require that complex multiplication must also distribute through addition, then as we have 
seen in Chapter 1, we arrive at the following general rule for the product of two complex numbers:
	
(a + bi)(c + di) = a(c + di) + bi(c + di) = (ac−bd ) + (ad + bc)i.	
Now it is straightforward to check that with this rule complex multiplication is indeed associative, 
commutative, and distributes through addition. Moreover, complex multiplication also preserves 
length. Indeed if we define
	
2
2
a
bi
a
b
+
=
+
 = length of the vector (a,b),	
then, again as we have seen in Chapter 1, it is easy to verify that for any two complex numbers w, z
	
| w z | = | w | | z |.	
We have extended our notion of numbers from the natural numbers to the rational, negative, 
real, and complex numbers by solving more and more complicated polynomial equations. But here 
we must stop because of the following theorem.
Theorem 2.1: Every polynomial of degree n has n complex roots (counting multiplicity).
Now if r is a root of a polynomial P(t), then it is easy to verify that t − r is a factor of P(t) 
(see Exercise 2.2). Hence we cannot introduce any new numbers by solving additional polynomial 
equations, since a polynomial of degree n can have at most n linear factors. Thus, by Theorem 2.1, 
all the roots of P(t) are complex numbers. Even the equation x 2 + i = 0 has two complex solutions, 
since it is easy to verify that
	
2
(
2 / 2
2 / 2)
i
i
±
±
= .	

14 
Rethinking Quaternions: Theory and Computation
Therefore our trick for extending multiplication from one dimension (real numbers) to two dimen-
sions (complex numbers) cannot be extended to higher dimensions. What then might multiplica-
tion mean in dimensions greater than two?
2.1	
MULTIPLICATION IN DIMENSIONS GREATER THAN TWO
Table 2.1 provides another, more geometric interpretation of multiplication in one and two dimen-
sions that we have already encountered which is independent of the algebra of polynomial equations.
TABLE 2.1:  Geometric interpretation of multiplication in dimensions 1 and 2
Real Multiplication
Complex Multiplication
• 1 represents the identity
• 1 represents the identity
• −1 represents rotation by 180° 
• −1 represents rotation by 180°
• c > 0 represents scaling
• i represents rotation by 90°
• eiq = cos(q) + i sin(q) represents  
rotation by q
• c > 0 represents scaling
Therefore what we might hope to model using multiplication in higher dimensions is rota-
tion and scaling—that is, conformal (i.e., angle preserving) linear transformations. In particular, we 
would like multiplication in higher dimensions to have the following properties:
In analogy with real and complex multiplication, we would also like multiplication in higher 
dimensions to have the usual symmetry properties: to be associative and to distribute through addi-
tion. Notice that the distributive property is particularly important, since if multiplication distributes 
through addition, then multiplication is a linear map and hence can be modeled by matrix multi-
plication. But if we want multiplication to model rotation, then we cannot expect multiplication in 
higher dimensions to be commutative, since even in three dimensions rotation is not commutative. 
(For example, rotating a vector parallel to the x-axis first around the x-axis and then around the z-
axis is not equivalent to rotating the same vector first around the z-axis and then around the x-axis. 
In the first case, the rotated vector lies in the xz-plane; in the second case, the vector is rotated out 
of the xz-plane.) Indeed matrix multiplication, which can be used to represent rotations in higher 
dimensions, is not commutative. Notice too that we are required to choose a direction for the multi-

A Brief History of Number Systems and Multiplication  15
plicative identity 1, so multiplication in higher dimensions, like multiplication in the complex plane, 
cannot be completely coordinate free.
Finally, we shall insist that multiplication should preserve length—that is,
	
• || p q || = || p || || q ||	
(2.1)
Rotation is an isometry. We are going to use scalar multiplication to model uniform scaling, so we 
expect to use unit vectors to represent rotations. Thus, as with the real and complex numbers, the 
length of the product should be equal to the product of the lengths. Equation (2.1) is a crucial prop-
erty; we shall make extensive use of this property in Chapter 4.
We shall see in Chapter 4 that there is no rule for multiplication in three dimensions that 
satisfies these constraints, so we turn our attention next to multiplication in four dimensions.
Exercises:
2.1. Use the associative and commutative rules to show that multiplying p r
q s and pr
qs  by qs yields the 
same result. Conclude that p
pr
r
q s
qs
=
 .
TABLE 2.2:  Multiplication as Rotation and Scaling
Multiplication as Rotation
Multiplication as Scaling
• 1 Represents the identity
• Choose a direction—not coordinate free
• Unit vectors represent rotations
•Similar to complex multiplication
• c > 0 represents scaling
• Similar to real multiplication
Rules
Reasons
• Associative
•Rotation is associative
•Distributes through addition
• Rotation is a linear transformation
• Identity and inverses
• Rotations can be undone
• Not Commutative
• Rotation in 3-D not commutative
• Preserves length ( || p q || = || p || || q || )
• Rotation is an isometry

16 
Rethinking Quaternions: Theory and Computation
2.2. Show that if r is a root of a polynomial P (t), then t − r is a factor of P (t).
	
(Hint: Consider P (t) − P (r).)
2.3. Show that (t − r)d is a factor of a polynomial P (t) if and only if P (r) = P ′(r) = . . . = 
P (d -1)(r) = 0.
	
(Hint: Consider the Taylor expansion of P (t) at r.)
•  •  •  •

17
Modeling Quaternions
Complex numbers are vectors in two dimensions; quaternions are vectors in four dimensions. Mod-
eling complex numbers by vectors in the plane makes it simple to visualize complex numbers and 
easy to understand the rotations induced by complex multiplication. To understand quaternions, we 
also need some mental images to help us both to model the vectors in four dimensions and to grasp 
the geometric operations on these 4-dimensional vectors induced by quaternion multiplication. 
Here we shall provide three such models: mass-points in three dimensions, vectors (arrows) in four 
dimensions, and a pair of mutually orthogonal planes in four dimensions.
As a vector space over the real numbers:
R4 ≅ R3 ⊕ R	
	
(mass-points)
R4 ≅ R2 ⊕ R2 ≅ C ⊕ Cv	
(pair of orthogonal planes; here v is a unit vector in the
	 	
	
	
plane in R4 perpendicular to C ),
so each of these mental models corresponds to a different way of decomposing R 4. The mass-points 
model ties the 4-dimensional geometry of quaternions back to the 3-dimensional geometry of the 
visual world. We shall see in Chapter 6 that this paradigm is crucial for understanding how sand-
wiching with quaternions can effectively model transformations such as rotations, reflections, and 
most especially perspective projections on points and vectors in three dimensions. The pair of planes  
model links the algebra of quaternions to the algebra of complex numbers. We shall see in Chapter 
5 that this pair of planes model combined with complex multiplication is particularly powerful for 
visualizing the geometric effects of quaternion multiplication.
3.1	
MASS-POINTS: A CLASSICAL MODEL FOR  
CONTEMPORARY COMPUTER GRAPHICS
Although the visual world is 3-dimensional, contemporary computer graphics typically uses four 
coordinates to represent points and vectors and 4 × 4 matrices to represent the transformations in 
the graphics pipeline. Four coordinates and 4 × 4 matrices are necessary to represent perspective pro-
jection using matrix multiplication because perspective projection is not a linear transformation in 
three dimensions; rather perspective projection is a rational linear (i.e., a projective) transformation.  
c h a p t e r  3

18 
Rethinking Quaternions: Theory and Computation
A fourth coordinate is therefore required to represent the denominators introduced by perspective 
projections. If w ≠ 0, then the four coordinates (x, y, z, w) represent the point in three dimensions 
located at (x / w, y /w, z /w). Thus if we want to work in a vector space, the natural domain for con-
temporary computer graphics is not R3, but rather R4. Three of the dimensions are indeed spatial; 
the fourth dimension is . . . well what exactly is this fourth dimension?
The simplest geometric objects in three dimensions are points and vectors. Points have posi-
tion, but no direction or length; vectors have direction and length, but no fixed position. Points are 
typically represented by dots; vectors are usually depicted by arrows. Vectors can be added, sub-
tracted, and multiplied by scalars using the usual triangle rules for combining arrows (see Figure 1.1).  
But the only simple geometric operations we can perform on points are to add a vector to a point 
to generate a new point by translation or to subtract a point from a point to form the vector joining 
the two points (see Figure 3.1).
Vectors are closed under linear combinations, but points are closed only under affine combi-
nations—combinations where the coefficients sum to 1. Indeed affine combinations can be rewrit-
ten as the sum of a point and a vector, since if the coefficients sum to 1:
	
0
0
0
0
0
0
1
1
(
)
(
)
n
n
n
n
k
k k
k
k
k
k
k
k
k
k
c
c P
P
c
P
P
P
c
P
P
=
=
=
=


=
+
−
=
+
−



∑
∑
∑
∑
 
.
	
Therefore, the vectors form a vector space, but the points form only an affine space. To overcome 
this asymmetry and to combine points and vectors into a one comprehensive geometric space, we 
introduce the notion of mass-points.
A mass-point is a point P in affine space together with a nonzero mass m. Rather than writing 
the pair (P , m), we shall see shortly that it is more convenient to denote a mass-point by the pair 
P+ v
v
P•
•
Q
P
•
•
Q
P
FIGURE 3.1: Adding a vector to a point and subtracting a point from a point. Notice that P + 
(Q - P ) = Q, so the usual cancellation law of addition applies.

Modeling Quaternions 
19
(mP , m). Here m is the mass and P = mP / m is the point; the expression mP by itself has no intrinsic 
geometric meaning. Notice that the mass m may be negative; nevertheless we still use the term mass-
point, even for points with negative mass. Vectors reside in this space as objects with zero mass, so 
for vectors v we write (v , 0).
The space of mass-points and vectors forms a 4-dimensional vector space. Addition and 
scalar multiplication are defined component-wise; thus,
	
(m1P1, m1) + (m2P2, m2) = (m1P1 + m2P2, m1 + m2)	
(3.1)
	
(−mP1, −m) + (mP2, m) = (m (P2 − P1), 0)	
(3.2)
	
c (mP, m) = (cmP, cm)	
(3.3)
	
(v , 0) + (w , 0) = (v + w, 0)	
(3.4)
	
c (v , 0) = (cv , 0)	
(3.5)
	
(mP, m) + (v , 0) = (mP + v ,m)	
(3.6)
Hence to add, we simply add the components of each pair; similarly, to multiply by a scalar, we 
multiply the components of each pair by the scalar.
Equations (3.1)–(3.6) have physical interpretations. Equation (3.1) says that the sum of two 
mass-points is the mass-point whose mass is the sum of the two masses located at their center of 
mass (see Figure 3.2). To verify this claim, we simply apply Archimedes’ law of the lever, which says 
that two masses balance at their center of mass. Let
	
1 1
2 2
2
2
1
1
1
1
2
1
2
,
  
  
m P
m P
m P
P
P
d
dist
m
m
m
m
+
−


=
=




+
+
	
	
1 1
2 2
1
1
2
2
2
1
2
1
2
,
  
  
m P
m P
m P
P
P
d
dist
m
m
m
m
+
−


=
=




+
+
 
.
	
•
•
•
M
m
M + m
FIGURE 3.2: The sum of two mass-points with masses M and m is the mass-point whose mass is the 
sum M + m of the two masses located at their center of mass denoted here by ∆.

20 
Rethinking Quaternions: Theory and Computation
Then it is easy to see that
	
m1d1 = m2d2.	
Thus by Archimedes’ law of the lever (m1P1, m1) + (m2P2, m2) is located at the center of mass of 
(m1P1, m1) and (m2P2, m2). If m1 =  m2, then the sum of the masses is zero. In this case, Equa-
tion (3.2) says that the sum of two mass-points (−mP1, −m) and (mP2, m) with equal and opposite 
masses is the vector from P1 to P2 scaled by the mass m.
To multiply a mass-point (mP, m) by a scalar c, Equation (3.3) says that we multiply the mass 
by c and leave the position of the point unchanged.
Addition and scalar multiplication have already been defined for vectors in three dimensions 
(see Figure 1.1). Equations (3.4) and (3.5) say that we just carry over these definitions in the obvi-
ous manner to the space of mass-points. Thus, the 3-dimensional vectors form a subspace of the 
4-dimensional vector space of mass-points.
To complete the algebra of mass-points, we need to define how to add a vector v to a mass-
point (mP, m). We can imagine that the vectors carry momentum and try to visualize what happens 
when momentum is transferred to a mass-point. Since momentum is conserved, the larger the mass,  
the smaller the velocity imparted to the mass-point. In fact, since momentum is conserved, the 
velocity varies inversely with the mass, so the velocity imparted to the mass-point (mP, m) by  
the momentum vector v is simply v / m. Thus, in unit time, the mass-point at P is relocated to the 
new position P + v / m. Therefore, since the mass-point (mP + v , m) is located at the affine point  
P + v / m, we define
	
(mP , m) + (v , 0) = (mP + v , m).	
Thus, once again, to compute the sum, we simply add the components. Notice that if a unit mass 
is located at P, then the momentum vector v moves the mass-point (P, 1) to the location P + v, 
which is the location of the standard sum of a point and a vector in affine space.
It is easy to check that with these definitions scalar multiplication distributes through addi-
tion, so the space of mass-points is indeed a vector space. The space of mass-points is 4-dimensional:  
three of the dimensions are spatial and the fourth dimension is due to the mass. The space of mass-
points encompasses together in one space both the vectors and the points from three dimensions: 
the vectors v are isomorphic (equivalent to) the mass-points (v , 0) with zero mass, the points P are 
isomorphic to the mass-points (P, 1) with unit mass. Typically, we shall write
	
(mP, m) ≡ (P, 1)	
to denote that (mP, m) and (P, 1) have the same location.

Modeling Quaternions  21
The space of mass-points is related to projective three-space, but these two spaces are not 
the same. A point in projective three-space is an equivalence class of mass-points, where two mass-
points are equivalent if they have the same location in affine space, but possibly different masses. 
Projective three-space is not a vector space, since addition is not well-defined on equivalence classes. 
The mass of a mass-point plays a role somewhat similar to the fourth, homogeneous coordinate of 
points in projective space, since dividing by the mass does not change the location of a mass-point. 
Thus much of the mathematical formalism of the space of mass-points, including for example 
projective transformations, is similar to the mathematical formalism of projective three-space and 
homogeneous coordinates, but the algebra of mass-points is much richer than the algebra of projec-
tive space.
The one disadvantage of the space of mass-points is that this space is 4-dimensional, whereas 
the visual world of computer graphics is 3-dimensional. This fourth dimension, however, is mass-
like, not spatial, so it is easy to keep track of this extra dimension. One extra dimension turns out to 
be a small price to pay for a coherent algebra and a geometry with three spatial dimensions that can 
represent both points and vectors as well as affine and projective transformations.
The space of mass-points is a standard model for the computations of contemporary com-
puter graphics (for further details, see Goldman, 2002). In this standard model, a quaternion is 
simply an element in the space of mass-points. We shall demonstrate the power and efficacy of this 
interpretation of quaternions as mass-points in Sections 6.1 and 6.2, where we show how to apply 
sandwiching to compute rotation and mirror image on points as well as on vectors. But by far the 
most novel use of this interpretation of quaternions as mass-points appears in Section 6.3 where we 
show how to apply sandwiching with quaternions to compute perspective projections on points in 
three dimensions.
3.2	
ARROWS IN FOUR DIMENSIONS
Just as we model vectors as arrows in three dimensions, we can also model mass-points as arrows in 
four dimensions (see Figure 3.3). Notice that the arrows (v, 0) correspond to vectors in three dimen-
sions, the arrows (P, 1) correspond to points in three dimensions, and the arrows (mP, m) represent 
the point P together with a mass m ≠ 0. The usual triangle rules for addition, subtraction, and scalar 
multiplication of arrows (Figure 1.1) are equivalent to Equations (3.1)–(3.6) for addition, subtrac-
tion, and scalar multiplication for mass-points.
We shall use the symbol O to denote the origin for the points in three dimensions and the 
symbol ϑ to denote the zero vector in both three and four dimensions. Notice that the vectors  
v ≡ (v, 0) in three dimensions are all orthogonal to the arrow representing the mass-point O in four 
dimensions.

22 
Rethinking Quaternions: Theory and Computation
3.3	
MUTUALLY ORTHOGONAL PLANES IN  
FOUR DIMENSIONS
To represent the 4-dimensional space of mass-points by arrows in four dimensions, we necessarily 
have to crop one or two dimensions to draw Figure 3.3 on a flat page. Thus even though we indicate 
each mass-point in this figure by four coordinates, at best we can actually see only two or three di-
mensions. To see all four dimensions at the same time, we now introduce yet a third way to visualize 
quaternions by looking at two mutually orthogonal planes in four dimensions.
Let N = (N , 0) be a unit vector in three dimensions and let v = (v , 0) be a unit vector in three 
dimensions orthogonal to N. Since in the 4-dimensional space of mass-points every vector v = 
(v , 0) is orthogonal to the origin O of the points in affine space, the two planes in four dimensions 
spanned by O, N and v, N × v are mutually orthogonal: every mass-point in the plane spanned by 
O, N is orthogonal to every vector in the plane spanned by v, N × v. Hence every mass-point is the 
sum of its components in these two mutually orthogonal planes. Therefore we can visualize simul-
taneously all four dimensions of any mass-point by modeling its projections into these two mutually 
orthogonal planes (see Figure 3.4).
mass
Points
mass =1
•O =(0,0,0,1)
Vectors
mass = 0
•  O = (0,0,0,0)
•
(mP,m)
•
(P,1)
(v,0)
FIGURE 3.3: The space of mass-points represented as arrows in four dimensions. The symbol O de-
notes the origin for the points in three dimensions and the symbol ϑ denotes the zero vector in both 
three and four dimensions.

Modeling Quaternions  23
Although Figure 3.4 depicts two planes in four dimensions, the geometric interpretations of 
these two planes in terms of mass-points are markedly different: the plane perpendicular to O, N 
represents a plane of vectors in three dimensions, but in three dimensions the plane of O, N repre-
sents a line of points.
Consider first the plane perpendicular to O, N. Since the vectors v and N × v are orthogonal 
in three dimensions, the plane in four dimensions of the vectors
	
w = av + bN × v	
spanned by v, N × v represents the plane of 3-dimensional vectors perpendicular to N—see Figure 3.5.
N
O
N
v
v
(a)  the plane of O, N
(b)  the plane perpendicular to O, N
FIGURE 3.4: A mass-point represented by its projections (arrows) into two mutually orthogonal planes 
in four dimensions.
v
N
v
v +
N
v
α
β
FIGURE 3.5: The plane of vectors perpendicular to O, N in four dimensions is the plane of vectors in 
three dimensions perpendicular to N. This plane is spanned by the vectors v and N × v, where v is any 
nonzero vector in three dimensions perpendicular to N.

24 
Rethinking Quaternions: Theory and Computation
On the other hand, consider the plane of O, N. In three dimensions O represents a point, not 
a vector. Thus the plane of 4-dimensional vectors
	
P = c O + sN	
spanned by O, N actually represents a line in three dimensions: the line through the affine point O 
in the direction of the unit vector N. In fact,
	
s
P
O
N
c
≡
+
	
—that is, P is a mass-point with mass m = c on the line P (t) = O + tN. (If c = 0, then P is a vector 
sN parallel to the line P (t).) The plane spanned by O, N does have two dimensions, but only one 
dimension is spatial; the other dimension, the coefficient of O, represents mass not length (see 
Figure 3.6).
In addition to this geometric distinction, there is also an algebraic distinction between these 
two mutually orthogonal planes in four dimensions. We shall see in Chapter 5 that the plane of O, 
N is isomorphic algebraically to the complex numbers C, whereas the plane perpendicular to O, N 
is isomorphic not to C but to Cv, where v is a unit vector perpendicular to N. We are going to take 
advantage of these asymmetries in the algebraic and geometric properties of these two mutually 
orthogonal planes in four dimensions in Chapter 6 when we study affine and projective transforma-
tions on points and vectors in three dimensions.
O
N
O +
N
O
N
O +
N
O +
N
•
•
(a)  a plane of vectors in 4-dimensions
(b)  a line of points in 3-dimensions. 
α
α
β
β
α
β
FIGURE 3.6: (a) The plane of vectors (mass-points) in four dimensions spanned by O, N is equivalent 
to (b) the line of affine points in three dimensions passing through the point O in the direction of the 
vector N. This line is actually 2-dimensional, but the second dimension is mass-like, not spatial, so this 
dimension is not visible in (b).

Modeling Quaternions  25
Other techniques for visualizing quaternions are presented by Hanson [2006], but for our 
purposes the three methods presented here will suffice.
Armed with these three geometric models for quaternions, we are now ready to take on the 
algebra and geometry of quaternion multiplication. In Chapter 4 we shall develop the algebra of 
quaternion multiplication. After we understand this algebra, in Chapter 5 we will provide a geo­
metric way to visualize quaternion multiplication.
•  •  •  •


27
The Algebra of  
Quaternion Multiplication
Quaternions are just another name for the entities in the 4-dimensional space of mass-points, just as 
complex numbers are just another name for the entities in the 2-dimensional space of vectors in the 
plane. In fact, quaternions are an extension of complex numbers to four dimensions, since we can 
multiply two quaternions in a manner similar to the way that we can multiply two complex num-
bers. In this chapter, we are going to derive the formula for quaternion multiplication.
To multiply two complex numbers, we need to choose a preferred direction: the direction of 
the identity vector for multiplication in the plane. Similarly, to multiply two mass-points, we must 
choose a preferred mass-point: the identity for multiplication in four dimensions. We shall denote 
this special mass-point by O, and we will think of this point as the origin, not in the 4-dimensional 
vector space of mass-points, but rather in the 3-dimensional affine space of affine points. Thus O 
is a special mass-point with mass m = 1 (see Figure 3.3). The choice of the point O is arbitrary, just 
as the choice of the origin is arbitrary, but to perform multiplication with mass-points, we must fix 
O once and for all. In four dimensions, the 3-dimensional vectors lie in a subspace orthogonal to O. 
Hence if we were to introduce rectangular coordinates into the 4-dimensional space of mass-points, 
then we would have O = (0, 0, 0, 1), and the 3-dimensional vectors v would be written as v = (v1, 
v2, v3, 0). Thus our choice of the point O as the identity for quaternion multiplication will not bias 
our definition of how multiplication should behave on vectors in three dimensions.
To fix our notation, from here on we shall typically use lower case letters p, q, r from the mid-
dle of the alphabet to represent arbitrary mass-points—that is, arbitrary quaternions—and lower 
case letters u, v, w from the end of the alphabet to represent vectors in three dimensions —that is, 
quaternions with zero mass. Uppercase letters O, P, Q from the middle of the alphabet will be used 
to denote points in 3-dimensional affine space—that is, quaternions with mass equal to 1.
Every mass-point (mP, m) = mO + v, where v = m(P - O) is a vector in three dimensions. The 
term mO designates the mass m; the vector v specifies the location O + v/m. Interpreted in terms 
of coordinates, the equation (mP, m) = mO + v means that every quaternion q can be written using 
four coordinates—that is, as q = (q1, q2, q3, q4) or equivalently
c h a p t e r  4

28 
Rethinking Quaternions: Theory and Computation
	
q = q4O + q1i + q2  j + q3k.	
In many texts the letter O is dropped, and quaternions are written as
	
q = q4 + q1i + q2  j + q3k.	
In this notation, a quaternion q seems to be a weird kind of hermaphrodite, a scalar q4 added to 
a vector q1i + q2  j + q3k. In fact, there are no mysterious hermaphrodites; the quaternion q in this 
equation is simply a mass-point with mass q4.
Now we expect quaternion multiplication to have the following properties:
•	 O is the identity
	   Op = pO = p
•	 Multiplication is associative and distributes through addition
	   p(qr) = (pq)r
	   p(q + r) = pq + pr
	   (q + r)p = qp + rp
These assumptions immediately imply that
	
(aO + v)(bO + w) = (ab)O + aw + bv + vw.	
(4.1)
Equation (4.1) tells us that to complete the definition of multiplication on the 4-dimensional space of 
mass-points, we need only define multiplication vw on the subspace of vectors in three dimensions. 
To derive the formula for the product of two vectors, we need to make one additional assumption.
For two complex numbers z1, z2, we know that 
	
|z1z2| = |z1| |z2|	
—that is, the length of the product is equal to the product of the lengths. Therefore multiplication 
by a complex number w scales the length of all other complex numbers—that is, scales the length 
of all vectors in the plane—by the same amount. Thus under complex multiplication, triangles are 
mapped to similar triangles, so angles are preserved by complex multiplication. Hence complex 
multiplication is a linear transformation that preserves angles, so complex multiplication is a con-
formal map. Suppose we assume that quaternion multiplication has the analogous property:
	
|q1q2| = |q1| |q2|.	
Then quaternion multiplication would be a conformal map on vectors in four dimensions—that is, 
quaternion multiplication would also preserve angles. With this assumption, we can now derive the 
following properties of the product vw  of two vectors in three dimensions.

The Algebra of Quaternion Multiplication 
29
Proposition 4.1: vw ⊥ v, w	
(4.2)
Proof: Since multiplication preserves angles:
	
w ⊥ O ⇒ vw ⊥ vO = v	
	
v ⊥ O ⇒ vw ⊥ Ow = w.    ♦	
Proposition 4.2: v 2 = −(v ⋅ v)O	
(4.3)
Proof: Let q = cos(q )O + sin(q )v, with q ≠ k(p / 2). Since multiplication preserves angles, 
v ⊥ O ⇒ qv ⊥ qO = q, 
so
	
qv = (cos(q )O + sin(q )v)v = cos(q )v + sin(q )v 2 ⊥ cos(q )O + sin(q )v = q.	
But by Proposition 4.1, v 2 ⊥ v. Therefore there exist scalars a, b such that
	
v2 = aO + bw            w ⊥ O, v .	
Hence
	
0 = qv ⋅ q = (cos(q )v + sin(q )(aO + bw)) ⋅ (cos(q )O + sin(q )v) = (v ⋅ v + a)sin(q )cos(q ),	
so
	
a = −v ⋅ v .	
Moreover b = 0 because
	
a 2 = (v ⋅ v)2 = |v|4 = |v 2|2 = a 2 + b 2.    ♦	
Corollary 4.1: angle between O and  vw = angle between −v and w.
Proof: Since multiplication preserves angles: 
angle between O and vw = angle between −v and (−v)(vw) = -v2w = (v ⋅ v)w || w.    ♦
Corollary 4.2: v ⊥ w ⇔ vw ⊥ O.	
(4.4)
Proof: By Corollary 4.1, 
angle between O and vw = angle between −v and w.    ♦
Corollary 4.3: (vw) ⋅ O = −v ⋅ w.	
(4.5)
Proof: Let q  is the angle between v and w. Then by Corollary 4.1: 
angle between O and vw = angle between −v and w = p  q.

30 
Rethinking Quaternions: Theory and Computation
Therefore
	
(vw) ⋅ O = |v w | |O | cos(p - q ) = -|v | |w | cos(q ) = -v ⋅ w.    ♦	
To summarize, we have derived the following consequences of conformality:
vw ⊥ v, w	
(4.2)
v 2 = - (v ⋅ v)O	
(4.3)
v ⊥ w ⇔ vw ⊥ O	
(4.4)
(vw) ⋅ O = −v ⋅ w	
(4.5)
Using these results, we can show that there can be no multiplication in three dimensions. For 
let i ,  j be two orthogonal unit vectors both perpendicular to the identity O. Then by Equations (4.2) 
and (4.4),
	
i j ⊥ O, i,  j	
But |ij | = |i | | j | = 1. Hence, O, i, j, i j  would be four mutually orthogonal nonzero vectors, which is 
not possible in three dimensions. Similar arguments can be used to show that there is no multipli-
cation in any dimension greater than 4 [Hurwitz, 1898] (see also Exercises 4.9–4.12). (A nonas-
sociative rule for multiplication exists in eight dimensions; these numbers are called octonions (see 
Conway and Smith, 2003). Of course in four dimensions we could accommodate the product i j by 
setting i j = k. In fact, using Equations (4.2)–(4.5), we can now derive an explicit formula for the 
product of two vectors.
Proposition 4.3: vw = (-v ⋅ w)O + v × w 	
(4.6)
Proof: By Equation (4.2), vw ⊥ v,w. Therefore since O and v × w span the plane of vectors in four 
dimensions perpendicular to v, w, there must be constants a, b, such that
	
vw = aO + bv × w.	
(4.7)
Moreover, by Equation (4.5),
	
(vw) ⋅ O = -v ⋅ w,	
so dotting both sides of Equation (4.7) with O yields 
	
a = -v ⋅ w.	
Now since v × w ⊥ O, it follows by the Pythagorean theorem that
	
|vw|2 = |-(v ⋅ w)O + bv × w|2 = (v ⋅ w)2 + b 2 |v × w|2, 	
•
•
•
•

The Algebra of Quaternion Multiplication  31
so 
	
|v|2 |w|2 = |v|2 |w|2 (cos2(q ) + b2sin2(q )),	
where q  is the angle between v and w. Canceling |v|2 |w|2 on both sides, we arrive at
	
1 = cos2(q ) + b 2sin2(q ).	
We conclude that b = ±1. This sign ambiguity reflects the fact that we could choose the cross prod-
uct to satisfy either the left or the right-hand rule. We choose the right-hand rule and set b = +1. 
Thus
	
vw = (-v ⋅ w)O + v × w.    ♦	
Combining Equations (4.1) and (4.6), we arrive finally at the formula:
	
(aO + v)(bO + w) = (ab - v ⋅ w)O + aw + bv + v × w.	
(4.8)
Equation (4.8) is the definition of the product of two arbitrary quaternions. Notice how the vector 
products—dot product, cross product, and scalar product—all appear in the formula for quaternion 
multiplication. (In fact, dot product and cross product can be defined in terms of the quaternion 
product; see Exercise 4.2.) Except for the choice of the special point O, quaternion multiplication is 
coordinate-free, since dot product, cross product, and scalar product are all coordinate-free. Using 
Equation (4.8), it is straightforward, although somewhat tedious, to verify that quaternion multi-
plication is associative and distributes through addition (see Exercise 4.1). Notice, however, that 
quaternion multiplication is neither commutative nor anticommutative, since
	
v ⋅ w = w ⋅ v	
but
	
v × w = -w × v.	
The point O serves as the identity for quaternion multiplication, so
	
O 2= O,	
and more generally for any quaternion p, we have
	
Op = p = pO.	
Moreover, by Equation (4.6),
	
|u| = 1 ⇒ u2 = −O	
(4.9)
	
v ⊥ w ⇒ vw = v × w.	
(4.10)

32 
Rethinking Quaternions: Theory and Computation
Therefore the basis vectors i,  j, k multiply according to the following rules:
	
i 2 = j 2 = k 2 = −0 and i j = k = −j i, j k = i = –k j, ki = j = –ik.	
(4.11)
Thus if p = ( p1, p2, p3, p4) and q = (q1, q2, q3, q4), then by Equation (4.11) (see Exercise 4.3)
pq = ( p4O + p1i + p2  j + p3k)(q4O + q1i + q2  j + q3k)	
	
= ( p4q4 - p1q1 - p2q2 - p3q3)O + ( p4q1 + p1q4 + p2q3 - p3q2)i	
+ ( p4q2 + p2q4 + p3q1 - p1q3) j + ( p4q3 + p3q4 + p1q2 - p2q1)k	
(4.12)
A more concise formula for quaternion multiplication can be given by representing each 
quaternion by two complex numbers instead of by four real numbers. To express a quaternion q by 
a pair of complex numbers, observe that the quaternions a = aO + bi are isomorphic to the complex 
numbers, since O2 = O and i 2 = −O, so we shall identify the quaternions a = aO + bi with the com-
plex numbers. Now by Equation (4.11)
	
q = q4O + q1i + q2  j + q3k = (q4O + q1i) + (q2O + q3i) j,	
so every quaternion q can be expressed uniquely as
	
q = aq + bq   j,	
where aq , bq are complex numbers. Moreover, notice that for any complex number a = aO + bi
	
ja = a * j.	
(4.13)
This identity allows us to express quaternion multiplication concisely in terms of complex multi-
plication:
	
pq = (ap + bp  j )(aq + bp  j ) = (apaq - bpbq*) + (apbq + bpaq*) j.	
(4.14)
We shall have a good deal more to say about the relationship between complex multiplication and 
quaternion multiplication in Chapter 5—see especially Remark 5.4.
Every nonzero quaternion has a multiplicative inverse. Let q = mqO + vq. The conjugate of q, 
denoted by q*, is defined by
	
q* = mqO - vq.	
By Equation (4.8)
	
(
)
2
*
q
q
q
qq
m
v
v
O
=
+
⋅
.	

The Algebra of Quaternion Multiplication  33
But recall that in quaternion space vq ⊥ O, so by the Pythagorean theorem
	
2
2
2
2
q
q
q
q
q
v
q
m
v
v
m
+
⋅
=
+
=
.	
Hence
	
qq* = | q |2O.	
(4.15)
Therefore
1
2
*
q
q
q
−=
.	
In terms of coordinates, if q = (q1, q2, q3, q4), then
q = q4O + q1i + q2  j + q3k	
	
q* = q4O - q1i - q2  j - q3k	
2
2
2
2
2
1
2
3
4
q
q
q
q
q
=
+
+
+
.	
Every quaternion can be written as
	
q = mqO + vq = mqO + nquq ,	
where nq is a scalar, uq is a unit vector, and nq uq = vq. If q is a unit quaternion, then since uq ⊥ O it 
follows by the Pythagorean theorem that
	
2
2
2
1
q
q
q
m
n
+
=
= .	
Therefore there is an angle q such that
	
mq = cos(q )	
nq = sin(q ).	
Hence every unit quaternion can be expressed as
	
q(u, q ) = cos(q )O + sin(q )u,	
(4.16)
where cos(q ) = mq is the mass, u is a unit vector, and sin(q )u = vq. Thus for unit quaternions q(u,q ), 
the conjugate is given by
	
q*(u,q ) = cos(q )O - sin(q )u =q(u,-q )	
(4.17)
(see too Exercise 4.6).

34 
Rethinking Quaternions: Theory and Computation
Using the conjugate, we can now verify that the length of the product of two quaternions is 
indeed equal to the product of their lengths. First we need the following result.
Proposition 4.4: (pq)* = q*p*	
(4.18)
Proof: Let p = mpO + vp and q = mqO + vq. Then by Equation (4.8):
	
pq = (m pO + v p )(m qO + vq ) = (m pm q - v p ⋅ v q )O + (m q v p + m p v q + v p × v q )	
	
q*p* = (m qO − v q )(m pO − vp ) = (m qm p - v q ⋅ v p )O + (−m q v p − m p v q + v q × v p ).	
Comparing the right-hand sides of these two equations and recalling that the cross product is anti­
commutative, we conclude that
	
(pq)* = q*p*.    ♦	
Corollary 4.4: 	
| pq | = | p | | q |	
(4.19)
Proof: By Proposition 4.4 and Equation (4.15)
	
| pq |2 O = ( p q)( p q)* = ( p q)(q*p*) = p( q q*)p* = | p |2 | q |2O.	
Hence since length is nonnegative
	
| p q | = | p | | q |.	
(For an alternative proof, see Exercise 4.5.)  ♦
By Corollary 4.4, the length of the product of two quaternions is indeed equal to the product 
of their lengths. Since quaternion multiplication distributes through addition, multiplication by a 
unit quaternion is a linear transformation that preserves lengths (a linear isometry), so we can expect 
multiplication by unit quaternions to represent rotations in four dimensions. In the next chapter, we 
are going to use this observation to visualize the geometric effects of quaternion multiplication.
Exercises:
4.1. Using Equation (4.8) and the properties of dot product and cross product, verify that quater-
nion multiplication is associative and distributes through addition.
4.2. Show that
a. 
(
)
(
)
2
v N
N v
N v O
−
+
⋅
=
	
b  
2
Nv
vN
N
v
−
×
=
 .	

The Algebra of Quaternion Multiplication  35
4.3. Let p = p4O + p1i + p2  j + p3k  and q = q4O + q1i + q2 j + q3k. Verify that
	
pq = ( p4q4 - p1q1 - p2q2 - p3q3)O + ( p4q1 + p1q4)i + ( p4q2 + p2q4)j + ( p4q3 + p3q4)k 
	
	
+ ( p2q3 - p3q2)i + ( p3q1 - p1q3)  j + ( p1q2 - p2q1)k.
4.4. Let v,w be vectors in three dimensions (i.e., quaternions with zero mass). Show that
a.  v 2 + w2 = (v + w)2 if v is perpendicular to w.
b.  v 2 - w2 ≠ (v + w)(v - w) if v is not parallel to w.
c.  Conclude from part b that it is possible for v2 = w 2 , but v ≠ ± w.
d.  Give an example where v2 = w 2, but v ≠ ± w.
4.5. Let a,b,c,d,w,x,y,z be real numbers, and let q1 = aO + b i + c j + dk, q2 = wO + x i + y j + z k be 
quaternions.
a.  Verify the following generalization of Brahmagupta’s identity:
	
(a 2 + b 2 + c 2 + d 2)(w 2 + x 2 + y 2 + z 2) = (aw -bx - cy - dz)2 + (ax + bw + cz - dy)2 
	
	
+ (ay - bz + cw + dx)2 + (az + by - cx + dw)2.
b.  Using the result in part a, prove that
	
| q1q2 | = | q1 | |q2|.	
4.6. Show that
	
q (N,f )-1 = q (N,f )* = q (N,-f ) = q (-N,f )	
4.7. Let q = q(N,q ) = ( q1, q2, q3, q4) be a unit quaternion. Show that
	
4
1
(
, /2)
2(1
)
q
q
q N
q
θ
+
=
=
+
 .	
4.8. Let p, q be unit quaternions. Show that
	
p ⋅ q = ( p q*)4	
4.9. Prove that there no viable multiplication in five dimensions. 
Hint:
a.  Let O,i,  j be orthogonal unit vectors.
b.  Define k = i j.
c.  Let l ⊥ O, i,  j, k. 
d.  Consider i l.
4.10. Prove that there no viable multiplication in six or seven dimensions. 
(Hint: Proceed as in Exercise 4.9 and consider i l, j l, k l.)
4.11. Generalize the argument in Exercise 4.10 to show that there is no viable multiplication in Rd 
for d ≠ 2p.

36 
Rethinking Quaternions: Theory and Computation
4.12. In this exercise we shall show that there is no associative rule for multiplication in any dimen-
sion d > 4.
a.  Let O denote the identity for multiplication, and let v,w be orthogonal vectors. Using 
Equation (4.3) and the associative property of multiplication, show that
	
v,w ⊥ O ⇒ v w = -w v.
b.  Let O, i, j be orthogonal unit vectors, and define k = i j. Using part a and Equation (4.2), 
show that span(O, i, j, k) is isomorphic to the quaternions.
c.  Let l ⊥ O, i, j, k. Show that q l = l q* for any quaternion q ∈ span(O, i, j, k).
d.  Use part c to express p  l  q* in two ways and conclude that p q = q p for any two quater­
nions p, q.
e.  Conclude from part d that there is no associative rule for multiplication in any dimension  
d > 4.
•  •  •  •

37
We want to see what happens when we multiply an arbitrary quaternion p by a unit quaternion
	
q (N, q ) = cos(q )O + sin(q )N,	
where N is a unit vector and O is the identity for quaternion multiplication. There is one key alge-
braic insight that will allow us to visualize the geometric effects of quaternion multiplication: For 
every unit vector N, the plane of O, N is isomorphic to the complex plane.
Indeed, by Equation (4.9), for any unit vector N, we have
	
N 2 = -O.	
Since
	
O2 = O, O N = N O = N, and N ^ O,	
multiplication in the plane determined by the two quaternions O, N behaves exactly like multiplica-
tion in the complex plane. Therefore, just as multiplication by the complex number
	
e iq = cos (q ) + sin(q )i	
rotates vectors in the complex plane by the angle q, multiplication by the unit quaternion
	
q (N, q ) = cos(q ) O + sin(q )N	
rotates quaternions in the plane of O, N by the angle q (see Figure 5.1).
Therefore, we have the following results.
Lemma 5.1: Let N be a unit vector. Then
	
i.  q (N, q ) q (N, f ) = q (N, q + f)	
	
ii.  q (N, q ) q (N, f ) = q (N, f ) q (N, q )	
The Geometry of  
Quaternion Multiplication
c h a p t e r  5

38 
Rethinking Quaternions: Theory and Computation
Proof: To prove i, we simply apply quaternion multiplication and the trigonometric identities for 
the sine and the cosine of the sum of two angles:
i.  q (N, q ) q (N, f ) = (cos(q )O + sin(q )N )(cos(f )O + sin(f )N )	
	
= (cos(q )cos(f ) - sin(q )sin(f ))O + (sin(q )cos(f ) + cos(q )sin(f ))N	
	
= cos(q + f )O + sin(q + f )N	
	
= q (N, q + f ).	
ii.  Follow immediately from i.    ♦
Since multiplying arbitrary quaternions by a fixed unit quaternion is a linear isometry in four 
dimensions, unit quaternions q(N, q ) represent rotations in four dimensions. By Lemma 5.1, we 
understand how q(N, q ) rotates quaternions in the plane determined by O, N because in this plane 
multiplication by q(N, q ) behaves just like multiplication by eiq in the complex plane. But to fully vi-
sualize how multiplication by q(N, q ) affects arbitrary quaternions, we still need to see how q(N, q )  
affects quaternions in the complementary plane of quaternions perpendicular to O, N.
Now the key observations are simply that
	
•	
p || O, N ⇒ q(N, q )p, p q(N, q ) || O, N	
	
•	
v ⊥ O, N ⇒ q(N, q )v, v q(N, q ) ⊥ O, N.	
N
N
axis
O
O
axis
q(N , )= cos( )O+ sin( )N
i
y
axis
1
x
axis
ei
= cos( )+ sin( )i
(a)  the quaternion plane of O, N
(b)  the complex plane
θ
θ
θ
θ
θ
θ
θ
θ
FIGURE 5.1: For any unit vector N, (a) the plane determined by O, N is isomorphic algebraically and 
homeomorphic geometrically to (b) the complex plane: O ↔ 1 and N ↔ i, since O 2 = O, N 2 = -O, ON = 
NO = N, and N ⊥ O. Hence, q (N, q ) = cos(q ) O + sin(q )N ↔ eiq = cos(q ) + sin(q )i.

The Geometry of Quaternion Multiplication 
39
That is, multiplying by q(N, q ) maps each of these planes—the plane parallel to O, N and the 
plane perpendicular to O, N —into themselves. The first observation follows immediately from 
Lemma 5.1. The second observation holds because multiplication by unit quaternions on the left or 
the right is an isometry and hence preserves angles; therefore
 	
v ⊥ O, N ⇒ q(N, q ) v ⊥ q(N, q )O, q(N, q )N ⇒ q(N, q )v ⊥ q(N, q ), q(N, q + p / 2)	
and
	
v ⊥ O, N ⇒ v q(N, q ) ⊥ O q(N, q ), N q(N, q ) ⇒ v q(N, q ) ⊥ q(N, q ), q(N, q + p / 2).	
Thus quaternion multiplication represents a double rotation, a rotation in two orthogonal planes.
Hence since every quaternion can be decomposed into a quaternion in the plane of O, N and 
a vector in the plane perpendicular to O, N, the essential insight is that we can study the rotations in 
four dimensions induced by multiplication with the unit quaternions q(N, q ) by studying the effect 
of multiplication with q(N, q ) in the plane of O, N, where by Lemma 5.1 we know that multiplica-
tion is commutative, and by studying the effect of multiplication with q(N, q ) in the complementary 
plane of vectors perpendicular to O, N, where we know that multiplication cannot be commutative, 
since otherwise multiplication with q(N, q ) would commute with every quaternion. The different  
effects of the 4-dimensional rotation represented by multiplication with q(N, q ) in these two com-
plementary planes will allow us to visualize quaternion multiplication in four dimensions.
In facilitate our presentation, we introduce the following notation:
	 	
Lq ( p) = q p	
	
	
left multiplication by q
	 	
Rq ( p) = p q	
	
	
right multiplication by q
	 	
Tq ( p) = q p q = Lq (Rq ( p))		
sandwiching p between two copies of q
	 	
Sq ( p) = q p q * = Lq (Rq* ( p))	
sandwiching p between q and q*
The functions Lq ( p) and Rq ( p) are linear transformations on the vector space of quaternions be-
cause quaternion multiplication distributes through quaternion addition. The sandwiching operators 
Tq ( p) and Sq ( p) are also linear transformations because they are composites of linear transforma-
tions. These two sandwiching operators measure the noncommutativity of quaternion multiplica-
tion. We shall see in Section 6.1 that the sandwiching operator Sq ( p) plays a central role in the use 
of quaternions for computing rotations in three dimensions. In Sections 6.2 and 6.3, we shall see 
how to use the sandwiching operator Tq ( p) to compute reflections and perspective projections.
We are now ready to study the geometric effects of multiplication by the unit quaternions
	
q (N, q ) = cos(q )O + sin(q )N	

40 
Rethinking Quaternions: Theory and Computation
on quaternions in the plane of O, N—which we have already seen is isomorphic to the complex 
plane—and on quaternions in the complementary plane of vectors perpendicular to O, N.
Proposition 5.2: Rotation in the plane of O, N
Let
•	
N = a unit vector
•	
p = a quaternion in the plane of O, N
Then
i.	
Lq (N, q ) ( p) = q(N, q )p  rotates p by the angle q in the plane of O, N
ii.	 Rq (N, q ) ( p) = p q(N, q )  rotates p by the angle q in the plane of O, N
iii.	 Rq* (N, q ) p = p q* (N, q )  rotates p by the angle -q in the plane of O, N
Proof: i, ii.  Follow immediately from Lemma 5.1.
	 iii.  Follows immediately from ii and Equation (4.17).    ♦
Proposition 5.3: Rotation in the plane perpendicular to O, N
Let
•	
N = a unit vector
•	
v = a vector in the plane ⊥ O, N
Then
i.	
Lq (N, q ) (v) = q (N, q )v  rotates v by the angle q in the plane ⊥ O, N	
ii.	 Rq (N, q ) (v) = v q (N, q )  rotates v by the angle -q in the plane ⊥ O, N	
iii.	 Rq* (N, q ) (v) = v q* (N, q )  rotates v by the angle q in the plane ⊥ O, N	
Proof: Since v ⊥ N, it follows by Equation (4.10) that N v = N × v and v N = v × N. Therefore,
i.	
q (N, q )v = (cos(q )O + sin(q )N )v = cos(q )v + sin(q )N × v	
ii.	 v q (N, q ) = v(cos(q )O + sin(q )N ) = cos(q )v + sin(q )v × N = cos(q )v - sin(q )N × v	
iii.	 v q* (N, q ) = v(cos(q )O - sin(q )N ) = cos(q )v - sin(q )v × N = cos(q )v + sin(q )N × v	
Equations i and iii represent rotation by the angle q and Equation ii represents rotation by the angle 
-q in the plane ⊥ O, N (see Figure 5.2).    ♦
Remark 5.4: Let N be a unit vector, and let v be a unit vector perpendicular to N. Then the quater-
nions O, N, v, N × v represent a basis for the quaternions isomorphic algebraically to the canonical 
basis O, i, j, k —that is,

The Geometry of Quaternion Multiplication 
41
N
v 
v
(cos )v  
(sin ) N
v
q(N, )v
(sin )N
v
v q(N, )
θ
θ
θ
θ
θ
θ
θ
FIGURE 5.2: Rotation by the angle ±q in the plane ⊥ O, N.
	
O ↔ O, N ↔ i, v ↔ j, N × v ↔ k.	
Indeed, since N and v are orthogonal unit vectors, it follows by Equation (4.9) that
	
N 2 = v 2 = (N × v)2 = -O.	
Moreover, by Equation (4.10), N v = N × v = -v × N = -v N, so
	 N v = N × v,	
v(N × v) = v × (N × v) = N,	
(N × v)N = (N × v) × N = v.	
Thus the algebra of the quaternions O, N, v, N × v is identical to the algebra of the quaternions 
O,i, j, k. We have already seen in Lemma 5.1 that the quaternions a O + b N in the plane of O, N 
are isomorphic algebraically to the complex numbers a + b i. Similarly, the quaternions in the plane 
orthogonal to O, N can be written as
	
g v + d (N × v) = (g O + d N )v	
—that is, as a complex number g O + d N times the vector v. Hence every quaternion p can be ex-
pressed uniquely as
	
p = a p + b p v,	
where a p, b p are complex numbers in the plane of O, N. Thus, as we observed at the start of  
Chapter 3,
	
R4 ≅ R2 ⊕ R2 ≅ C ⊕ C v.	
(5.1)

42 
Rethinking Quaternions: Theory and Computation
This isomorphism together with the identity
	
v q = q* v,	
(5.2)
which by Proposition 5.3 holds for every complex number q = g O + d N and which is the analogue of 
Equation (4.13), allows us to interpret quaternion multiplication in the basis O, N, v, N × v in terms 
of complex multiplication. From this interpretation, we can see immediately from Equation (5.1) 
that multiplying a vector b p v in the plane orthogonal to O, N by a complex number q(N, q ) = 
cos(q )O + sin(q )N on the left will behave like counterclockwise rotation by the angle q just like 
multiplication on the left by q(N, q ) in the complex plane, whereas by Equation (5.2) multiplying 
b p v by q(N, q ) on the right will behave like multiplication by q* (N, q ) = q(N, -q ) on the left—that 
is, like clockwise rotation by the angle q. In technical terms, multiplication by q(N, q ) represents a 
double isoclinic rotation on R4 [Mebius, 2005].
Multiplying quaternions by q(N, q ) does not generate a simple rotation in R4—that is, a  
rotation in a single plane in R4—since this multiplication rotates vectors in two mutually orthogonal 
planes in R4. To get simple rotations in R4, we need to use sandwiching.
Corollary 5.2: Sandwiching in the plane of O, N
Let
•	
N = a unit vector
•	
p = a quaternion in the plane of O, N
Then
i.	
Tq (N, q )( p) = q(N, q ) p q(N, q ) 	
rotates p by the angle 2q in the plane of O, N
ii.	 Sq (N, q )( p) = q(N, q ) p q*(N, q ) 	
is the identity on p.
Proof: These results follow immediately from Proposition 5.2    ♦
Corollary 5.3: Sandwiching in the plane perpendicular to O, N
Let
•	
N = a unit vector
•	
v = a vector in the plane ⊥ O, N
Then
i.	
Tq (N, q )( v) = q(N, q ) v q(N, q ) 	
is the identity on v
ii.	 Sq (N, q )( v) = q(N, q ) v q*(N, q ) 	 rotates v by the angle 2q in the plane ⊥ O, N.
Proof: These results follow immediately from Proposition 5.3.    ♦

The Geometry of Quaternion Multiplication 
43
N
O
N
v
v
q(N, ) p
p q(N, )
p q (N, )
q(N, ) v
v q(N, )
v q (N, )
q (N, ) p
q (N, ) v
(a)  the plane of O, N
(b)  the plane perpendicular to O, N
θ
θ
θ
θ
θ
θ
θ
θ
FIGURE 5.3: Double Isoclinic Rotations in 4-Dimensions. The effects of multiplying a quaternion on 
the left and right with q(N, q ) in the plane of O, N and in the complementary plane perpendicular to  
O, N. In (a) the plane of O, N, multiplying by q(N, q ) on the left or the right rotates quaternions p coun-
terclockwise by the angle angle q, whereas multiplying by the conjugate q*(N, q ) on the left or the right 
rotates quaternions p in the opposite clockwise direction by the angle q, but in (b), the plane of vec-
tors perpendicular to the plane of O, N, multiplying by q(N, q ) on the left or by its conjugate q*(N, q ) 
on the right rotates vectors v counterclockwise by the angle q , whereas multiplying by q(N, q ) on the 
right or by its conjugate q*(N, q ) on the left rotates vectors v in the opposite clockwise direction by the 
angle q . Thus left and right quaternion multiplication both represent double isoclinic rotations in four 
dimensions.
For easy reference, we summarize graphically the results of Propositions 5.2, 5.3, and Corol-
laries 5.2, 5.3 in Figures 5.3–5.5.
With this introduction to quaternion algebra and geometry in four dimensions, we are finally 
ready to turn our attention to the main applications of quaternion multiplication in computer graph-
ics: computing affine and projective transformations on points and vectors in three dimensions.

44 
Rethinking Quaternions: Theory and Computation
N
O
N
v
v
q(N, ) p
pq (N, )
q(N, ) v
v q (N, )
(a)  the plane of O, N
(b)  the plane perpendicular to O, N
θ
θ
θ
θ
FIGURE 5.4: Simple Rotation in 4-Dimensions. The effects of sandwiching a quaternion between  
q(N, q ) and q*(N, q ) in the plane of O, N and in the complementary plane perpendicular to O, N. In (a) 
the plane of O, N, the rotation induced by multiplying with q(N, q ) on the left is canceled by the rotation 
induced by multiplying with its conjugate q*(N, q ) on the right, whereas in (b) the plane of vectors per-
pendicular to the plane of O, N, the rotation induced by multiplying with q(N, q ) on the left is reinforced 
by the rotation induced by multiplying with its conjugate q*(N, q ) on the right. Hence for an arbitrary 
vector u, the map Sq (N, q )(u) = q(N, q ) u q*(N, q ) rotates the component of u perpendicular to N by the 
angle 2q and leaves the component of u parallel to N unchanged. Thus the sandwiching map Sq (N, q )(u) 
represents a simple rotation in four dimensions.

The Geometry of Quaternion Multiplication 
45
N
O
N
v
v
q(N, ) p
pq(N , )
q(N, ) v
v q(N, )
(a)  the plane of O, N
(b)  the plane perpendicular to O, N
θ
θ
θ
θ
FIGURE 5.5: Simple Rotation in 4-Dimensions. The effect of sandwiching a quaternion between two 
copies of q(N, q ) in the plane of O, N and in the complementary plane perpendicular to O, N. In (a), the 
plane of O, N, the rotation induced by multiplying with q(N, q ) on the left is reinforced by the rotation 
induced by multiplying with q(N, q ) on the right, whereas in (b) the plane of vectors perpendicular to 
the plane of O, N, the rotation induced by multiplying with q(N, q ) on the left is canceled by the rotation 
induced by multiplying with q(N, q ) on the right. Hence for an arbitrary vector u, the map Tq (N, q )(u) = 
q(N, q ) u q(N, q ) leaves the component of u perpendicular to N unchanged and rotates the component 
of u parallel to N by the angle 2q. Thus the sandwiching map Tq (N, q )(u) represents a simple rotation in 
four dimensions.
•  •  •  •


47
Sandwiching with quaternions can be used to model several key transformations in 3-dimensional 
computer graphics, including rotation, mirror image, and perspective projection. In this chapter, we 
are going to investigate each of these transformations using quaternions. Note that here we shall 
need to distinguish carefully between our model of quaternions as vectors in four dimensions and 
our geometric interpretation of quaternions as mass-points in three dimensions.
Recall from Chapter 3 that every quaternion can be decomposed into the sum of two orthog-
onal quaternions: a quaternion in the plane of O, N, where N is a unit vector in three dimensions and 
a vector in the complementary plane perpendicular to O, N (see Figure 3.4). Therefore Propositions 
5.2 and 5.3 clarify how multiplying by the unit quaternion
	
q (N,q ) = cos(q )O + sin(q )N	
on the left or the right rotates arbitrary quaternions in four dimensions. Corollaries 5.2 and 5.3 
explain the effect of sandwiching on arbitrary quaternions in four dimensions, but what we really 
want to understand is the effects of sandwiching on points and vectors in three dimensions. So far, 
we have the following results about sandwiching:
Sq(N, q )( p) = q (N, q ) p q* (N, q )	
Plane of O, N in four dimensions ≡ line through O parallel to N in three dimensions
	 — Sq(N, q )( p) = IDENTITY ↔ FIXED AXIS LINE IN 3-DIMENSIONS
Plane ⊥ O, N in four dimensions ≡ plane of vectors ⊥ N in three dimensions
	 — Sq(N, q )( p) = ROTATION BY ANGLE 2q ↔ ROTATION IN 3-DIMENSIONS 
(see Section 6.1)
Tq(N, q )( p) = q (N, q ) p q (N, q )	
Plane ⊥ O, N in four dimensions ≡ plane of vectors ⊥ N in three dimensions
	 — Tq(N, q )( p) = IDENTITY ↔ FIXED PLANE IN 3-DIMENSIONS
Plane of O, N in four dimensions ≡ line through O parallel to N in three dimensions
•
•
•
•
Affine, Semi-Affine, and Projective 
Transformations in Three Dimensions
c h a p t e r  6

	 — Tq(N, q )( p) = rotation by the angle 2q in 4-dimensions
	       — Tq(N,p / 2)( N ) = -N ↔ MIRROR IMAGE IN 3-DIMENSIONS (see Section 6.2)
	       — Tq(N, q )( N ) = MASS-POINT ↔ PERSPECTIVE PROJECTION
	
      IN 3-DIMENSIONS (see Section 6.3)
Intuitively, we can see that the sandwiching map Sq(N, q ) is the transformation that rotates 
points or vectors in three dimensions by the angle 2q around the axis line L passing through the 
point O in the direction of the unit vector N. Indeed, recall from Section 3.3 that the quaternions in 
the plane of O, N in four dimensions correspond to mass-points on the axis line L in three dimen-
sions (see Figure 3.6). Moreover, by Corollary 5.2, Sq(N, q ) is the identity on the plane of O, N in four 
dimensions. Therefore the points on the line L in three dimensions are fixed points of the transfor-
mation Sq(N, q ). In addition, vectors in three dimensions perpendicular to the axis line L correspond 
to quaternions in four dimensions in the plane perpendicular to O, N, and by Corollary 5.3 Sq(N, q ) 
rotates vectors in this orthogonal plane by the angle 2q. Therefore in three dimensions Sq(N, q ) rotates 
points and vectors around the axis line L by the angle 2q. We shall examine this connection between 
the sandwiching maps Sq(N, q ) and rotations in three dimensions in greater detail in Section 6.1.
A linear transformation A on the vector space of mass-points is called an affine transformation 
if A maps points (mass-points with mass = 1) to points and vectors (mass-points with mass = 0) to 
vectors. Thus a linear transformation A is affine if A preserves mass. The sandwiching transformation 
Sq(N, q ) maps vectors in three dimensions to vectors in three dimensions: Sq(N, q )(N ) = N and Sq(N, q ) 
maps vectors in the plane perpendicular to N in three dimensions—that is, quaternions in the 
plane perpendicular to O, N in four dimensions—to vectors perpendicular to N in three dimen-
sions. Moreover, Sq(N, q ) also maps points in three dimensions to points in three dimensions, since  
Sq(N, q ) (O ) = O, and by linearity for any point P
	
Sq(N, q )(P ) = Sq(N, q )(O + (P - O )) = Sq(N, q )(O) + Sq(N, q )(P - O) = O + Sq(N, q )(P -O),	
which is the sum of a point and a vector and hence a point in three dimensions. Thus the sandwich-
ing maps Sq(N, q ) are affine transformations.
In contrast, the sandwiching maps Tq(N, q ) are not affine transformations, since by Corol­
lary 5.2, Tq(N, q ) rotates quaternions in the plane of O, N by the angle 2q. Therefore:
	
Tq(N, q )(O) = q(N, 2q ) = cos(2q )O + sin(2q )N	
	
Tq(N, q )(N ) = cos(p /2 + 2q )O + sin(p /2 + 2q )N = sin(2q )O + cos(2q )N.	
Thus, in general, Tq(N, q )(O) is not a point and Tq(N, q )(N ) is not a vector; both are mass-points with 
nonzero mass. Hence the maps Tq(N, q ) do not preserve mass.
48 
Rethinking Quaternions: Theory and Computation

Affine, Semi-Affine, and Projective Transformations in 3 Dimensions  49
Linear transformations on the vector space of mass-points that do not preserve mass—that 
is, that do not map points to points and vectors to vectors—are called projective transformations. The 
most important projective transformations in computer graphics are perspective projections. Per-
spective projections are the identity on the plane of projection, and the maps Tq(N, q ) are the identity 
on the plane in four dimensions perpendicular to the plane of O, N — that is, the plane in three 
dimensions of vectors perpendicular to N. These observations suggest that the maps Tq(N, q ) may 
represent perspective projections into planes perpendicular to N. We shall examine the connection 
between the sandwiching maps Tq(N, q ) and perspective projections in more detail in Section 6.3.
The maps Tq(N, p /2 ) = TN are rather special. These maps rotate quaternions in the plane of O, 
N in four dimensions by the angle p. Therefore
	
TN (O) = - O	
	
TN (N ) = - N.	
Since by Corollary 5.3 TN is the identity on the plane of quaternions in four dimensions perpen-
dicular to the plane of O, N — that is, on the vectors in three dimensions perpendicular to N —and 
TN (N )= -N, it follows that in three dimensions the transformation TN maps vectors to vectors, but 
not points to points since TN (O)= -O has mass = -1.
We shall call transformations that map vectors to vectors, but not points to points—that 
is, transformations that preserve zero mass—semi-affine transformations. The maps TN are semi- 
affine transformations. These transformations behave well on vectors in three dimensions but may 
not behave as expected on points in three dimensions. Since the map TN is the identity on the vec-
tors perpendicular to N and TN (N )= - N, the map TN computes the mirror image of vectors in 
three dimensions in the plane perpendicular to the vector N. The effect of the map TN on points in 
three dimensions, however, is not so obvious. We shall examine the connection between the sand-
wiching maps TN and reflections in further detail in Section 6.2.
6.1	
ROTATION
Suppose we want to rotate a point P or a vector v by the angle q around an axis line L passing 
through a point O in the direction of a unit vector N (see Figure 6.1). To compute the effect of this 
rotation on the vector v, we shall decompose v into two components v|| and v⊥ such that
	
v = v|| + v⊥,
where
	
v|| = component of v parallel to N
	
v⊥ = component of v perpendicular to N
(see Figure 6.2 a).

50 
Rethinking Quaternions: Theory and Computation
Since v|| is parallel to the axis of rotation N, v|| is not altered by rotation. Hence after rotation
	
 v||
new = v|| .	
Thus to compute the effect of rotation on v, we need only compute the effect of rotation on v⊥. 
Now v⊥ lies in the plane perpendicular to the axis vector N; moreover, N × v⊥ is perpendicular to v⊥ 
and also lies in the plane perpendicular to N (see Figure 6.2 b). Hence after rotation
•
•
v
vnew
•
O
N
L
v
vnew
P
Pnew
θ
FIGURE 6.1: Rotating a point P or a vector v by the angle q around the axis line L through the point 
O in the direction of the vector N.
•
O
N
L
•
P
v
v|| 
v
N
v  
v
(cos )v
(sin )N
v
v
vnew
(a)  v = v|| + v
(b)   v new = (cos )v
+ (sin )N
v
θ
θ
θ
θ
θ
FIGURE 6.2: Decomposing a vector v into components parallel (v||)and perpendicular (v⊥ ) to the axis 
of rotation (left) and rotation in the plane perpendicular to the axis of rotation (right).

Affine, Semi-Affine, and Projective Transformations in 3 Dimensions  51
	
v||new = (cosq )v⊥ + (sinq )N × v⊥.
Therefore, by linearity, after rotation
	 	
vnew = v||new + v⊥new = v|| + (cosq )v⊥ + (sinq )N × v⊥.
(6.1)
Similarly for points, since P = O + (P - O), it follows by linearity that after rotation
	
P new = O new + (P - O) new = O + (P - O) new.
(6.2)
Figures 6.1 and 6.2 describe rotation around the axis line L in three dimensions. Now let us 
look at the analogous pictures in the 4-dimensional space of quaternions. In the space of quaterni-
ons, the line L through the point O in the direction of the vector N is represented by the plane of O, 
N, since every quaternion (mass-point)
	
N
O
q
cO
s
s
c N
=
+
≡
+
	
in this plane in four dimensions lies on the line L in three dimensions (see Figure 3.6). In con-
trast, the plane of vectors in three dimensions perpendicular to the vector N is represented by the  
complementary plane of quaternions in four dimensions perpendicular to the plane of O, N (see 
Figure 3.5). These results are summarized in Figure 6.3.
N
v
v
v new
N
O
 v
(a)  the plane of O, N
(b)  the plane perpendicular to O, N
θ
FIGURE 6.3: (a) The plane O, N of quaternions (mass-points) in four dimensions represents the line 
L in three dimensions passing through the point O in the direction of the unit vector N. (b) The plane 
of quaternions perpendicular to O, N in four dimensions represents the vectors in three dimensions or-
thogonal to the unit vector N. Compare with Figures 3.5, 3.6, and 6.2.

52 
Rethinking Quaternions: Theory and Computation
To rotate vectors in three dimensions around the axis line L using quaternion multiplication, 
we need to keep the plane of O, N fixed (since the axis line L is fixed by rotation around L) and to 
rotate quaternions in the plane perpendicular to O, N (since these vectors are perpendicular to the 
axis vector N in three dimensions) by the angle q. But by Corollaries 5.2 and 5.3 these results are 
precisely the effects of the sandwiching map Sq(N,q /2). Thus we are led to the following theorem.
Theorem 6.1: Sandwiching with conjugates rotates vector in 3-dimensional
Let
N = a unit vector
v = a vector in three dimensions (i.e., a quaternion ⊥ O)
Then
Sq(N,q /2)(v) = q(N,q /2)v q* (N,q /2) rotates v by the angle q around the axis N.
Proof: Let v = v|| + v⊥, where
v|| = component of v parallel to N
v⊥ = component of v perpendicular to N.
Then
Sq(N,q /2)(v||) = q(N,q /2) v|| q*(N,q /2) = v|| 
(Corollary 5.2)
Sq(N,q /2)(v⊥ ) = q(N,q /2) v⊥ q*(N,q /2) = cos(q )v⊥ + sin(q )N × v⊥ 
	
rotates v⊥ by the angle q in the plane ⊥ to O, N.	
(Corollary 5.3)
Therefore since Sq(N,q / 2) is a linear transformation and v = v|| + v⊥ ,
	
Sq(N,q /2)(v ) = Sq(N,q /2)(v||) + Sq(N,q /2)(v⊥ ) = v|| + (cosq )v⊥ + (sinq )N × v⊥.	
Hence by Equation (6.1) sandwiching has the same effect on v as rotating v in three dimensions by 
the angle q around the axis vector N.	
♦
The sandwiching map Sq(N,q /2) also rotates affine points in three dimensions about the line L 
passing through the origin O parallel to the vector N. Indeed by Corollary 5.2, the map Sq(N,q /2) is 
the identity on the quaternion plane in four dimensions determined by O, N. Therefore the points 
on the line L are fixed points of the transformation Sq(N,q /2). Thus the sandwiching map Sq(N,q / 2) 
rotates points as well as vectors in three dimensions.
Theorem 6.2: Sandwiching with conjugates also rotates points in 3-dimensional
Let
 N = a unit vector
 P = a point in three dimensions
•
•
•
•
•
•
•
•
•

Affine, Semi-Affine, and Projective Transformations in 3 Dimensions  53
Then
Sq(N,q / 2)(P ) = q(N,q / 2) P q*(N,q / 2) rotates P by the angle q around the line L through the  
	
origin O parallel to the vector N.
Proof:	 Since P is a point in affine space,
	
P = O + (P - O).	
But
Sq(N,q /2)(O ) = O
(Corollary 5.2)
Sq(N,q /2)(P - O ) = rotates the vector P - O by the angle q around the axis N

(Theorem 6.1)
Therefore since Sq(N,q / 2) is a linear transformation and P = O + (P - O),
	
Sq(N,q /2)(P ) = O + Sq(N,q /2)(P - O ).	
Hence by Theorem 6.1 and Equation (6.2) sandwiching has the same effect on P as rotating P 
in three dimensions by the angle q around the line L passing through the origin O parallel to the  
vector N.	
♦
We close this section with the following well-known result about composing rotations using 
quaternion multiplication.
Proposition 6.3: (Sq ° Sr) ( p) = Sqr ( p) 
Therefore composing two rotations is equivalent to multiplying two unit quaternions.
Proof: By Proposition 4.4
	
(Sq ° Sr) ( p) = Sq (Sr ( p)) = Sq (r p r *) = q r p r *q * = (q r) p (q r)* = S q r ( p).	
Exercises:
6.1. Let q be an arbitrary quaternion. Define
	
2
3
2!
3!
q
q
q
e
O
q
=
+
+
+
+	
a.  Show that if N is a unit vector, then
	
e l N = cos (l)O + sin (l)N.	
b.  Conclude from part a and Theorem 6.1 that a vector v can be rotated around a unit vector 
N through the angle f by sandwiching v between q = e f N / 2 and q * = e -f N / 2.
•
•
•

54 
Rethinking Quaternions: Theory and Computation
6.2 In this exercise, we will study the composite of two rotations by examining the product of two 
unit quaternions.
	
a.  Show that that if p and q are unit quaternions, then pq is a unit quaternion.
	
b.  Using part a, show that
	
q (N1, f1)q (N2, f 2) = q (N, f),	
where
	
i.  cos(f / 2)= cos(f 1 / 2)cos(f 2 / 2) − sin(f 1 / 2)sin(f 2 / 2)(N1⋅N2)
	
ii.  sin(f / 2)N = cos(f 2 / 2) sin(f 1 / 2)N1 + cos(f 1 / 2) sin(f 2 / 2)N2
	
+ sin(f 1/ 2) sin(f 2/ 2)N1 × N2
	
c.  Conclude from part b that
	
q (N, f 1) q (N, f 2) = q (N, f 1 + f 2)	
.
6.2	
MIRROR IMAGE
Suppose we want to mirror a point P or a vector v in a plane S through a point O perpendicular to 
a unit vector N (see Figure 6.4, left). To compute the effect of this reflection on the vector v, we 
decompose v into two components v|| and v⊥ such that
	
v = v|| + v⊥,
S
O  
N
•P
•
v
Pnew
•
vnew
S
O  
•P
•
v
Pnew
vnew
•
v
v||
v
new = v
v||
new =
v||  
v
v||
new = v||  
v||  
N
FIGURE 6.4: A mirror plane S specified by a point O and a unit normal vector N (left) and the decom-
position of a vector v into components parallel and perpendicular to the normal vector (right).

Affine, Semi-Affine, and Projective Transformations in 3 Dimensions  55
where as usual
v|| = component of v parallel to N
v⊥ = component of v perpendicular to N.
(see Figure 6.4, right).
Since v⊥ is perpendicular to the normal N, the vector v⊥ is not altered by reflection. Hence 
after reflection
v⊥
new = v⊥.
Thus to compute the effect of reflection on n, we need only compute the effect of reflection on v||. 
But reflection simply reverses the direction of v||, so
v||
new = −v||.
Therefore, by linearity, after reflection
	
v new = v⊥ − v||.	
(6.3)
Similarly for points, since P = O + (P  O), it follows by linearity that after reflection
	
P new = O + (P � O) new.	
(6.4)
To use sandwiching to compute the mirror image of a vector v in a plane perpendicular to 
N, notice that by Corollary 5.3 the maps Tq (N,q ) are the identity on vectors perpendicular to N. 
Therefore, by Equation (6.3), to compute mirror image in a plane perpendicular to N, we need only 
find an angle q for which Tq (N,q ) maps N to −N. Since by Corollary 5.2 the map Tq (N,q ) rotates 
quaternions in the plane of O, N by the angle 2q, the angle we seek is q = p / 2. But 
	
q ( N, p / 2) =cos(p / 2)O + sin(p / 2)N = N.	
Therefore we are led directly to the following result.
Theorem 6.4: Sandwiching with unit vectors reflects vectors in 3-dimensional
Let
N = a unit vector
v = a vector in three dimensions (i.e., a quaternion ⊥ O)
Then
TN (v) = N v N = −SN (v)is the mirror image of v in the plane ⊥ N.
Proof: Let v = v|| + v⊥, where
v|| = component of v parallel to N
v⊥ = component of v perpendicular to N.
•
•
•
•
•

56 
Rethinking Quaternions: Theory and Computation
Since N = cos(p / 2)O + sin(p / 2)N = q (N, p / 2):
 TN (v||) = N v|| N = q (N, p / 2) v|| q (N, p / 2) = Tq (N, p / 2)(v||) = −v||
(Corollary 5.2)
 TN (v⊥) = N v⊥ N = q (N, p / 2) v⊥ q (N, p / 2) = Tq (N, p / 2)(v⊥) = v⊥
(Corollary 5.3)
Therefore, since TN is a linear transformation and v = v⊥ + v||,
TN (v) = TN (v⊥) + TN (v||) = v⊥ − v||
Hence by Equation (6.3) sandwiching with N has the same effect on v in three dimensions as re-
flecting v in a plane perpendicular to N.	
♦
Proposition 6.5: (TN2 ° TN1)(v) = SN2N1(v)
Therefore the composite of two reflections is equivalent to one rotation.
Proof: By Equation (4.6)
N2N1 = (−N2 ⋅ N1)O + N2 × N1
N1N2 = (−N1 ⋅ N2)O + N1 × N2 = (−N2 ⋅ N1)O −N2 × N1.
so
N1N2 = (N2 N1)*.
Therefore
(N2N1) v (N1 N2) = (N2 N1) v (N2 N1)*,
so
(TN2 ° TN1)(v) = (SN2 N1)(v).  ♦
In fact, every rotation on vectors in three dimensions is the composite of two reflections. For 
let u,v be two unit vectors in the plane perpendicular to N, chosen so that the vectors u,v,N have 
positive orientation and the angle between u and v is q /2. Then by Equation (4.6)
−v u = (v ⋅u)O−v × u = cos(q /2)O + sin(q /2)N = q(N,q /2).
Therefore
Sq(N,q/2)(w) = (−v u) w (−u v) = (Tv ° Tu)(w).
Thus the composite of two reflections (Tv ° Tu) is equivalent to a single rotation S−vu, and every 
rotation Sq(N,q/2) is the composite of two reflections.
•
•

Affine, Semi-Affine, and Projective Transformations in 3 Dimensions  57
As a consequence of Theorems 6.1 and 6.4, every rigid motion on vectors in three  
dimensions—every rotation or reflection—is the composite of two rotations in four dimensions: 
one rotation represented by multiplication with a unit quaternion on the left and the other ro-
tation represented by multiplication with a unit quaternion on the right. The trick is simply to 
balance these rotations in the planes parallel and perpendicular to O, N. In the plane parallel to 
O, N, multiplying by q(N,q ) on both the left and the right represents counterclockwise rotation by 
the angle q , but in the plane perpendicular to O, N, multiplying by q(N,q ) on the left represents 
counterclockwise rotation by the angle q, whereas multiplying by q(N,q ) on the right represents 
clockwise rotation by the angle q. Thus these rotation angles add in the plane parallel to O, N, 
and subtract in the plane perpendicular to O, N. We simply take advantage of these additions and 
subtractions to cancel the rotation in the appropriate plane in four dimensions to produce either 
rotation around the axis vector N or mirror image in the plane perpendicular to the vector N in three  
dimensions.
Since by Theorem 6.2 the sandwiching maps Sq can be used to rotate points as well as vec-
tors in three dimensions around lines through the origin, Theorem 6.4 seems to invite us to use 
the sandwiching maps TN to compute the mirror image of points in planes through the origin. But 
recall that unlike the transformations Sq, the maps TN are not affine maps; the transformations TN 
are only semi-affine. The function
	
TN ( p) = N p N	
is not the identity on the quaternion plane in four dimensions determined by O, N. Therefore even 
though the map TN (v) is the identity on the vectors v perpendicular to N in three dimensions, we 
find that
TN (O) = N O N = −O  O.
Hence TN (P) is not the identity on the affine plane in three dimensions through the point O per-
pendicular to the vector N. Thus, perhaps contrary to intuition, sandwiching a point P with the 
unit vector N is not the mirror image in three dimensions of the point P in the plane through the 
origin O perpendicular to the vector N. Rather, we have the following somewhat disappointing  
result.
Theorem 6.6: Sandwiching with N rotates points through the angle p in 3-dimensions
Let
N = a unit vector
P = a point in three dimensions
•
•

58 
Rethinking Quaternions: Theory and Computation
Then
TN(P) = N P N rotates P by the angle p around the line passing through the origin O
	
parallel to the vector N.
Proof: Since P is a point in affine space,
P = O + (P − O).
But
TN (O) = N O N = N 2 = −O
TN (P − O) = N(P − O) N
Therefore since TN is a linear transformation and P = O + (P − O),
TN (P) = −O + N (P − O)N ≡ O − N (P − O) N = O + N (P − O) N *.
Hence
TN (P) ≡ SN (P).
Since N = cos(p /2)O + sin(p /2)N = q(N,p /2), it follows by Theorem 6.2 that TN (P) rotates P by the 
angle p around the line passing through the origin O parallel to the vector N.	♦
Thus sandwiching with N does not reflect points P in the plane through the origin O perpen-
dicular to the unit vector N. Nevertheless we can compute the mirror image of points in this plane 
by sandwiching using the following approach.
Theorem 6.7: Sandwiching P  2O with N reflects P in the plane through O ⊥ N
Let
N = a unit vector
P = a point in three dimensions
Then
TN (P  2O ) = N (P  2O )N is the mirror image of the point P in the plane through O
	
perpendicular to the unit vector N.
Proof: Clearly
P  2O = (P  O) O.
But
TN (O) = N O N = N 2 = O
TN (P  O) = N (P  O)N
•
•
•
•
•
•
•
•

Affine, Semi-Affine, and Projective Transformations in 3 Dimensions 
59
Therefore since TN is a linear transformation and P  2O = (P  O) O,
TN (P  2O) = O + N(P  O)N,
which by Theorem 6.4 and Equation (6.4) is the mirror image of the point P in the plane through 
O orthogonal to the unit normal vector N. 	♦
If we introduce rectangular coordinates, then P = (p1, p2, p3, 1) and O = (0, 0, 0, 1), so
P − 2O = (p1, p2, p3, −1).
Thus P − 2O is the mass-point with mass −1 located at the point with coordinates (−p1, −p2, −p3). 
By Theorem 6.7, to find the mirror image of a point P in the plane through O orthogonal to the 
unit vector N, we simply negate the fourth coordinate, the mass, of P and sandwich the resulting 
mass-point with N.
Exercise:
6.3. Let v,w be unit vectors.
a.  Show that
i.   v w is a unit quaternion.
ii.  Sv w(w) lies in the plane of the vectors v,w.
iii.  v bisects the angle between w and Sv w(w).
b.  Prove that mirroring a vector u in the plane perpendicular to w and then mirroring the 
resulting vector in the plane perpendicular to v is equivalent to rotating the vector u around 
the vector v × w by twice the angle between w and v.
6.3	
PERSPECTIVE PROJECTION
We have examined the maps Sq(N,q )(v) that sandwich the vector v between the unit quaternions 
q(N,q ) and q* (N,q ) for all unit quaternions
q(N,q ) = cos(q )O + sin(q )N,
and we have seen in Theorem 6.1 that in all cases Sq(N,q )(v) rotates the vector v around the unit vec-
tor N by the angle 2q. But so far we have investigated the maps Tq(N,q )(v) that sandwich the vector 
v between two copies of the unit quaternion q(N,q ) only when q(N,q ) = N —that is, only for q = p /2. 
By Theorem 6.4, TN (v) is the mirror image of the vector v in the plane perpendicular to the unit 
vector N. We are now going to study the maps Tq(N,q ) for q ≠ p /2.
By Corollary 5.3, Tq(N,q ) is the identity on the plane of vectors in three dimensions perpendic-
ular to N. Therefore we might expect that the map Tq(N,q ) represents some kind of projection into the 

60 
Rethinking Quaternions: Theory and Computation
plane perpendicular to N. On the other hand, projections in three dimensions collapse a dimension, 
but we know that in four dimensions the map Tq(N,q ) is an isometry, so it is unclear how an isometry 
in four dimensions can represent a projection in three dimensions. Nevertheless, here we shall show  
that the maps Tq(N,q ) can indeed be used to compute 3-dimensional perspective projections. To un-
derstand how this works, we shall begin by developing explicit formulas for perspective projection.
6.3.1	 Perspective Projection and Singular 4 × 4 Matrices
Suppose we want to project a point P from an eye point E into a plane S passing through a point Q 
and perpendicular to a unit vector N (see Figure 6.5). To compute the effect of this projection on the 
point P, observe that by similar triangles the perspective projection of P from E onto S is given by
P new = E + r (P − E)
where
	
−
⋅
−
−
⋅
=
=
=
−
−
⋅
−
⋅
(
)
|
|
(
)
|
|
(
)
(
)
new
new
Q
E
N
P
E
P
E
N
r
P
E
P
E
N
P
E
N
.	
Substituting this expression for r into the equation for P new yields
	
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
new
P
E
N E
Q
E
N
P
E
Q
E
N
P
E
P
E
P
E
N
P
E
N
−
⋅
+
−
⋅
−
−
⋅
=
+
−
=
−
⋅
−
⋅
.	
(6.5)
or equivalently
	
(
)
(
)
(
)
(
)
(
)
new
P
Q
N E
Q
E
N P
P
P
E
N
−
⋅
+
−
⋅
=
−
⋅
.	
(6.6)
Treating the denominator as mass, we find that
	
P new = ((P − Q) ⋅ N )E + (Q − E) ⋅ N )P , (P − E) ⋅ N )	
(6.7)
is the mass-point, where
–	
the point is located at the perspective projection of the point P from the eye point E onto 
the plane S;
–	
the mass is equal to the signed distance of the point P from the plane through the eye point 
E perpendicular to the unit normal N, i.e., the plane through the eye point E parallel to the 
plane of projection S.
Notice that since the mass (P − E) ⋅ N of the mass-point P new is the signed distance from the 
point P to the plane through the eye point E parallel to the plane of projection S, we can use this 
formula for perspective projection to detect hidden surfaces: if two points project to the same point, 
then the smaller the mass, the closer the surface point is to the eye. Points further from the plane of 
the eye are hidden by points closer to the plane of the eye.

Affine, Semi-Affine, and Projective Transformations in 3 Dimensions 
61
We can easily find a 4 × 4 matrix to represent this transformation. Let I denote the 3 × 3 iden-
tity matrix and let N T denote the transpose of N—that is, the column vector with the same entries 
as the row vector N. Then it follows directly from Equation (6.7) and matrix multiplication that
	
(
)
(
)
  ( ,1)  
(
)
T
T
new
Q
E
N I
N
E
N
P
P
Q N E
E N


−
⋅
+
∗
=
∗



−
⋅
−
⋅

,	
Thus the 4 × 4 matrix Persp(E,Q, N ) representing perspective projection from the eye point E to the 
plane S passing through the point Q and perpendicular to the unit vector N is given by
	
(
)
(
)
( ,
,
)  
(
)
T
T
Q
E
N I
N
E
N
Persp E Q N
Q N E
E N


−
⋅
+
∗
= 



−
⋅
−
⋅

	
(6.8)
The 4 × 4 matrix Persp(E,Q, N) is singular, since
	
(
)
(
)
( ,1)
( , ,
) ( ,1)  
(0,0,0,0)
(
)
T
T
Q
E
N I
N
E
N
E
Persp E Q N
E
Q N E
E N


−
⋅
+
∗
∗
=
∗
=




−
⋅
−
⋅


	
(6.9)
Thus the rows of Persp(E,Q, N ) are linearly dependent.
E(eye)
•
(Perspective Plane)
(Perspective Point)  
P
Pnew
Q
N
S
R •
•
•
•
FIGURE 6.5: Perspective projection from the eye point E into the plane S through the point Q with 
unit normal N. The point P is projected to the point P new, located at the intersection of the line EP with 
the plane S. The triangles ∆ E R P and ∆ E Q P new are similar, so |
|
|
|
|
|
|
|
new
P
Q
P
R
Q
E
R
E
−
−
=
−
−
.

62 
Rethinking Quaternions: Theory and Computation
Notice, however, that by linearity and Equation (6.9)
(P - E, 0)* Persp(E, Q, N ) = (P,1) * Persp(E, Q , N ) - (E,1)*Persp(E, Q , N )
	
= (P,1) * Persp(E, Q , N )
(6.10)
Thus we can apply the matrix Persp(E,Q, N ) directly to the vector (P − E, 0), instead of to the point 
(P, 1). Applying Persp(E,Q, N ) to vectors (P − E, 0) is more efficient than applying Persp(E,Q,N ) to 
points (P,1) because the zero in the fourth component of (P − E, 0) allows us to ignore the fourth row 
of Persp(E, Q, N ). Thus we can replace the 4 × 4 matrix Persp(E, Q, N ) by the upper 3 × 4 submatrix of 
Persp(E, Q, N ) saving both memory and computation. Moreover, we shall see shortly (Examples 6.1 
and 6.2 below) that we can often choose the fourth row so that Persp(E, Q, N ) is an orthogonal ma-
trix and hence a rotation in four dimensions. (For a more complete discussion, see Section 8.4.)
6.3.2	 Perspective Projection by Sandwiching with Quaternions
Now back to quaternions. Here we are going to explore alternative ways of computing perspective 
projection by using sandwiching with quaternions q(N,q ) to operate on the vectors P − E.
To simplify our initial discussion, we shall start with the special case where q = −p/4. By 
Corollary 5.3 we know that for all q, the map Tq(N,q ) is the identity on vectors in the plane of qua-
ternions in four dimensions perpendicular to O, N, and from Corollary 5.2 we know that the map 
Tq(N, −p/4)  rotates quaternions in the plane in four dimensions determined by O, N clockwise by the 
angle 2(−p/4) = −p/2. In particular, Tq(N, −p/4)  maps the unit vector N to the point O and the point 
O to the unit vector −N (see Figure 6.6). Thus Tq(N, −p/4) converts distance along the unit vector N 
into mass at the point O. We shall now show how to take advantage of this property of Tq(N, −p/4) 
to compute perspective projection. As a bonus, we shall see that we can also use this sandwiching 
formula for perspective projection to detect hidden surfaces. Moreover, since Tq(N, −p/4) represents a 
N
O
N
O
N
O
Tq(N,
/4)
FIGURE 6.6: Tq(N, −p/4) maps the unit vector N to the point O and the point O to the unit vector –N.

Affine, Semi-Affine, and Projective Transformations in 3 Dimensions 
63
rotation in four dimensions, this sandwiching formula will allow us to use 4 × 4 orthogonal matrices 
to compute perspective projections in three dimensions.
Theorem 6 .8: Sandwiching vectors to the eye with q(N, −p/4) gives perspective
Let
S = the plane through the origin O perpendicular to the unit normal N
E = O – N eye point
P = a point in three dimensions
Then
Tq(N, −p/4)(P – E) = q(N, − p/4) (P – E) q(N, − p/4) is a mass-point, where
–	
the point is located at the perspective projection of the point P from the eye point E onto the plane S;
–	
the mass is equal to the distance d of the point P from the plane through the eye point E perpen-
dicular to the unit normal N.
Proof: Let P – E = d N + v, where v ⊥ N (see Figure 6.7). Then
 Tq(N, − p/4) (d N ) = d O 
(Corollary 5.2)
 Tq(N, − p/4) (v) = v.
(Corollary 5.3)
Hence by linearity
 Tq(N, − p/4)(P – E) = Tq(N, −p/4)(d N + v) = d O + v ≡ O + v/d.
Therefore, by similar triangles (see  Figure 6.7), the point O + v/d corresponding to the mass-point 
Tq(N, − p/4)(P – E) is the perspective projection of the point P from the eye point E onto the plane S. 
•
•
•
•
•
•
•
E(eye) = O
N
S(Perspective Plane)
(Perspective Point)
P
Pnew
•
O
dN
v
P
E
v /d
N
•
•
•
R •
FIGURE 6.7: By similar triangles, the point P new = O + v/d is the intersection of the line joining the eye 
point E to the point P with the plane S through the origin O perpendicular to the unit normal N.

64 
Rethinking Quaternions: Theory and Computation
Moreover, the mass d is equal to the distance of the point P from the plane through the eye point E 
perpendicular to the unit normal N.	
♦
Notice that since the mass d of the mass-point Tq(N, − p/4)(P – E) that we compute with sand-
wiching is the distance from the point P to the plane through the eye point E parallel to the plane of 
projection S, we can use this sandwiching formula for perspective projection to detect hidden surfaces: 
if two points project to the same point, then the smaller the mass, the closer the surface point is to the 
eye. Points further from the plane of the eye are hidden by points closer to the plane of the eye.
In the following example we show how this sandwiching formula for perspective projection 
allows us to use 4 × 4 orthogonal matrices to compute perspective projection.
Example 6.1 4 × 4 Orthogonal Matrices and Perspective Projections
Suppose that the eye is located along the z-axis at the point E = (0, 0, 1) and the perspective plane S is 
the xy-plane with unit normal N = (0, 0, −1). Thus the plane S passes through the origin Q = (0, 0, 0). 
For any point P = (x, y, z), it follows by Equation (6.5) that the line EP intersects the plane S at the 
point
	
(
)
(
)
(
)
(
)
(
)
,
,0
(
)
1
1
new
P
E
N E
Q
E
N
P
E
y
x
P
P
E
N
z
z
−
⋅
+
−
⋅
−


=
= 

−
⋅
−
−

	
By Equation (6.8) the standard singular 4 × 4 matrix Persp(E, Q, N) representing this perspective 
projection is given by
	
(
)
1
0
0
0
0
1
0
0
(
)
( ,
,
) 
 0
0
0
1
(
)
0
0
0
1
T
T
Q
E
N I
N
E
N
Persp E Q N
Q N E
E N






−
⋅
+
∗


=
=






−
−
⋅
−
⋅






,	
and we can easily verify that
	
1
0
0
0
0
1
0
0
(
, 0)
( ,
,
)
( , ,
1, 0)
0
0
0
1
0
0
0
1
( , ,0,1
)
,
, 0
1
1
P
E
Persp E Q N
x y z
y
x
x y
z
z
z






−
∗
=
−
∗

−






=
−
≡

−
−


	
Since the map Tq(N, −p/4) represents a rotation in four dimensions, it follows by Theorem 6.8 that 
there is a 4 × 4 orthogonal matrix R corresponding to the sandwiching map Tq(N, −p/4) such that
	
(P − E,0) * R = (P − E,0) * Persp(E, Q, N ).	

Affine, Semi-Affine, and Projective Transformations in 3 Dimensions 
65
The map Tq(N, − p /4) represents a rotation in four dimensions in the O, N plane. Since the plane of 
projection is the xy-plane and since the unit normal N points along the negative z-axis, the plane 
of O, N in four dimensions is the w(−z)-plane. Thus in four dimensions the sandwiching map 
Tq(N, − p /4) is just rotation by −p /2 in the w(−z)-plane or equivalently rotation by −p /2 in the zw-
plane. Therefore the 4 × 4 orthogonal matrix R corresponding to the map Tq(N, − p /4) is given by
	
1
0
0
0
0
1
0
0
0
0
0
1
0
0
1
0
R






= 

−




.
	
 
To check that R correctly performs perspective projection, observe that
	
1
0
0
0
0
1
0
0
(
, 0)
( , ,
1, 0)
( , ,0,1
)
,
, 0
0
0
0
1
1
1
0
0
1
0
y
x
P
E
R
x y z
x y
z
z
z








−
∗
=
−
∗
=
−
≡



−
−
−






	
as required.
Perspective projection is not an affine transformation; perspective projection does not preserve 
mass. Therefore perspective can map vectors to mass-points, and in Theorem 6.8 vectors are indeed 
mapped to mass-points: the vector from the eye point E to the point P is mapped to the mass-point  
P new located at the perspective projection of the point P from the eye point E to the plane S.
One could also ask what is the effect of applying the sandwiching map Tq(N, − p /4) directly to 
points P: does Tq(N, − p /4)(P) also compute the perspective projection of P onto the plane S? Alas no. 
The sandwiching map Tq(N, − p /4) transforms the origin O to the vector − N, so even for the origin 
the map Tq(N, − p /4) does not compute perspective projection. The map Tq(N, − p /4) is not affine, so 
we cannot expect the map Tq(N, − p /4) to be well-behaved both on points and on vectors. Much like 
the mirror image maps TN, we only get the desired result for vectors, not for points. Even though 
P = E + (P − E), the identity
	
Tq(N, − p/4)(P) = Tq(N, − p/4)(E) + Tq(N, − p/4)(P − E)	
does not really help, since Tq(N, − p/4)(E) is not a point, but is rather a mass-point. Notice, however, 
that
	
Tq(N, − p/4)(P) − Tq(N, − p/4)(E) = Tq(N, − p/4)(P − E),	

66 
Rethinking Quaternions: Theory and Computation
so subtracting the constant mass-point Tq(N, − p/4)(E) from the mass-point Tq(N, − p/4)(P) computed 
by sandwiching does indeed give perspective projection.
Theorem 6.8 is a special case of the following more general result.
Theorem 6.9: Sandwiching vectors to the eye with q(N, − q/2) gives perspective
Suppose that 0 < q < p and let
S  =  the plane through the point O + cot(q)N ≡ Tq(N, − q/2) (N ) perpendicular 
	
to the unit normal N
E = O + (cot(q ) − csc(q )) N = eye point
P  =  a point in three dimensions
Then
Tq(N, − q/2)(P − E) = q(N, − q/2)(P − E) q(N, − q/2) is a mass-point, where
–	
the point is located at the perspective projection of the point P from the eye point E onto the  
plane S;
– 	 the mass is equal to d sin(q ), where d is the distance of the point P from the plane through the eye 
point E perpendicular to the unit normal N.
Proof: Once again let P − E = d N + v, where v ⊥ N (see Figure 6.8). Then
Tq(N, − q/2)(d N ) = d cos(p/2 − q )O + d sin (p/2 − q)N = d sin (q ) O + d cos (q )N	 (Corollary 5.2)
Tq(N, − q/2)(v) = v	
(Corollary 5.3)
Therefore by linearity
	
	
(
,
/ 2)
(
,
/ 2)
(
)
(
)
sin( )
cos( )
                              
cot( )
csc( )
.
q N
q N
T
P
E
T
d N
v
d
O
d
N
v
v
O
N
d
θ
θ
θ
θ
θ
θ
−
−
−
=
+
=
+
+
≡
+
+
	
Since by construction
•	
O + cot(q )N = E + csc (q )N,
it follows again by similar triangles (see Figure 6.8) that the point corresponding to the mass-point 
Tq(N, − q/2)(P − E) is the perspective projection of the point P from the eye point E onto the plane S. 
Moreover, the mass is d sin (q ), where d is the distance of the point P from the plane through the 
eye point E perpendicular to the unit normal N.	
♦
By Theorem 6.9, the maps Tq(N, − q/2)(v) can be used to compute perspective projection onto 
a plane perpendicular to the unit vector N. The angle q controls the distance d = |csc(q ) | ≥ 1 from 
•
•
•
•
•
•
cot( )
csc( )
.
v
O
N
d
θ
θ
≡
+
+

Affine, Semi-Affine, and Projective Transformations in 3 Dimensions 
67
the eye point E to the plane of projection. When q = p, the eye recedes to infinity and the map 
Tq(N, − p/2)(v) = T−N (v) computes the mirror image of the vector v in the plane perpendicular to N.
Notice again that since the mass of the mass-point that we compute with sandwiching is a 
constant (sin(q )) times the distance d from the point P to the plane through the eye E parallel to the 
plane of projection S, we can still use this sandwiching formula for perspective projection to detect 
hidden surfaces: once again if two points project to the same point, then the smaller the mass, the 
closer the surface point is to the eye. Thus even though we are projecting a point onto a plane in 
three dimensions, no information is lost: distance is simply converted into mass.
This sandwiching formula for perspective projection again allows us to use 4 × 4 orthogonal 
matrices to compute perspective projection, this time when the eye is at an arbitrary distance from 
the perspective plane.
Example 6.2 4 × 4 Orthogonal Matrices and Perspective Projections—Revisited
Let d  ≥ 1 be the distance from the eye point E to the perspective plane S, and choose q so that 
|csc(q ) | = d. Introduce a coordinate system for which S is the plane z = − cot(q ), parallel to the  
E(eye) = O + cot( )
csc( )
(
)N
•
S (Perspective Plane)
(Perspective Point)
P
Pnew
Q = O + cot( ) N
dN
v
P
E
csc( ) v
d
csc( )N
•
•
•
R •
θ
θ
θ
θ
θ
FIGURE 6.8: By similar triangles, the point
	
cot( )
csc( )
csc( )
csc( )
new
v
v
P
O
N
E
N
d
d
θ
θ
θ
θ
=
+
+
=
+
+
	
is the perspective projection of the point P from the eye point E onto the plane S through the point 
Q = O + cot (q ) N perpendicular to the unit normal N.

68 
Rethinking Quaternions: Theory and Computation
xy-plane with unit normal N = (0, 0, −1), and place the eye point E along the z-axis at the loca-
tion E = (0, 0, csc(q ) − cot(q )), a distance d = |csc(q ) | from the plane S. To simplify our notation, let 
c = cos(q ) and s = sin(q ). Then by Equation (6.5) since S passes through the point Q = (0, 0, − c/s), for 
any point P = (x, y, z), the line EP intersects the plane S at the point
	
(
)
(
)
(
)
(
)
(
)
,  
,  
(
)
1
1
new
P
E
N E
Q
E
N
P
E
y
x
c
P
P
E
N
c
sz
c
sz
s
−
⋅
+
−
⋅
−


=
=
−


−
⋅
−−
−−


.	
By Equation (6.8) the standard singular 4 × 4 matrix Persp(E, Q, N ) representing this perspective 
projection is given by
	
(
)
2
1
0
0
0
1
0
0
0
(
)
( ,
,
)
  
(
)
0
0
1
(1
)
1
0
0
T
T
s
Q
E
N I
N
E
N
s
Persp E Q N
c
Q N E
E N
s
c
c
c
s
s












−
⋅
+
∗
=
=






−
⋅
−
⋅




−




−
−




,	
and it is straightforward to verify that
	
2
2
1
0
0
0
1
0
0
0
1
(
,0)
( ,
,
)
( , ,
, 0)  
0
0
1
(1
)
1
0
0
(
1)
1
               
, 
, 
, 
               
,  
,  
 .
1
1
s
c
s
P
E
Persp E Q N
x y z
c
s
s
c
c
c
s
s
y c sz
c
sz
c
x
s
s
s
s
y
x
c
c
sz
c
sz
s










−
−
∗
=
−
∗



−




−
−




+ −
−
−+


= 





≡
−


−−
−−


	
Since the map Tq(N, − q/2) represents a rotation in four dimensions, it follows by Theorem 6.9 that 
there is a 4 × 4 orthogonal matrix R corresponding to the sandwiching map Tq(N, −q/2) such that
	
(P − E, 0) * R = (P, 1) * Persp(E, Q, N ).	

Affine, Semi-Affine, and Projective Transformations in 3 Dimensions  69
The map Tq(N, − q/2) represents a rotation in four dimensions in the O, N plane. Since the plane of 
projection S is parallel to the xy-plane and since the unit normal N points along the negative z-axis, 
the plane of O, N in four dimensions is the w(−z)-plane. Thus in four dimensions the sandwiching 
map Tq(N, −q/2) is just rotation by −q  in the w(−z)-plane or equivalently rotation by −q in the z w-
plane. Therefore the 4 × 4 orthogonal matrix R corresponding to the map Tq(N, −q/2) is given by
	
1
0
0
0
0
1
0
0
 0
0
0
0
R
c
s
s
c






= 

−




	
To check that R correctly performs perspective projection, observe that
	
1
0
0
0
0
1
0
0
1
(
, 0)
, , 
, 0
 0
0
0
0
(
1)
, , 
, (
1)
,  
,  
1
1
sz
c
P
E
R
x y
c
s
s
s
c
c sz
c
x y
sz
c
s
y
x
c
c
sz
c
sz
s




+ −



−
∗
=
∗



−





+ −


=
−
+ −






≡
−


−−
−−


	
as required. For further details on the relationship between perspective projections and 4 × 4 or-
thogonal matrices, see Section 8.4.
Theorem 6.9 is stated and proved only for a special configuration of the eye point E and the plane 
of projection S. We shall call this position of the eye point E and the plane of projection S the ca-
nonical position for the angle q  and the unit normal vector N, and we shall denote these canonical 
positions by
	
E (N, q ) = O + (cot(q ) − csc (q ))N	
	
S (N, q ) = plane with unit normal N at a distance d = csc(q ) 
	
from the point E(N, q ) along the vector N.
Now the rather astonishing observation is that a simple variant of Theorem 6.9 remains valid even 
if the eye point E and the plane of projection S are in arbitrary rather than canonical position.
Projecting a scene from an eye point E into a plane S and then translating the projection by 
a vector v into the plane S + v is equivalent to first translating the entire scene by the vector v and 

70 
Rethinking Quaternions: Theory and Computation
then projecting from the translated eye point E + v into the translated plane S + v. Indeed if we 
translate the entire configuration in Figure 6.5 by the vector v, then we can see immediately that 
translation and projection commute (for an algebraic proof, see Exercise 6.6). In particular, translat-
ing the entire configuration in Figure 6.5 by the vector E (N, q ) − E, where d = csc(q ) is the distance 
from the eye point E to the plane of projection S, we arrive at Figure 6.8 (see Figure 6.9). Therefore 
we have the following generalization of Theorem 6.9.
Theorem 6.10: Sandwiching vectors to the eye with q(N, −q/2) gives perspective.
Suppose that 0 < q < p and let
E = eye point
S = plane of projection
N = unit normal to the plane of projection
d = csc(q ) = distance from the eye point E to the plane of projection S along the normal N
P = a point in three dimensions
Then
 Tq(N, − q/2) (P − E) = q(N, −q/2) (P − E) q(N, −q/2) is a mass-point, where
–	
the point is located at the perspective projection of the point P from the eye point E onto the plane 
S translated by the vector E(N, q ) − E to the canonical plane S(N, q );
–	
the mass is equal to d sin(q ), where d is the distance of the point P from the plane through the eye 
point E perpendicular to the unit normal N.
•
•
•
•
•
•
E(eye)
S (Perspective Plane)
(Perspective Point)
P
Pnew
•
E + csc( )N
dN
v
P
E
csc( )v
d
•
•
•
csc( )N
E (eye) = O + cot( )
csc( )
(
)N
•
S (Perspective Plane)
(Perspective Point)
P
P new
O + cot( )N
d N
v
P
E
csc( ) v
d
•
•
•
csc( )N
θ
θ
θ
θ
θ
θ
θ
θ
FIGURE 6.9: Translation and perspective commute, since by translation the figure on the left can be 
made to coincide with the figure on the right.

Affine, Semi-Affine, and Projective Transformations in 3 Dimensions  71
Proof: Projecting a point P from the eye point E into the plane S and then translating to the ca-
nonical plane S(N, q ) by the vector e = E(N, q ) − E is equivalent to first translating the point by the 
vector e = E(N, q ) − E and then projecting from the canonical eye point E(N, q ) into the canonical 
plane S(N, q ). Now
	
q(N,−q/2) (P − E) q(N,−q/2) = q(N,−q/2) ((P + e) − (E + e )) q(N,−q/2)	
	
= q(N,−q/2) ((P + e − E (N, q )) q(N,−q/2),	
and by Theorem 6.9 the right-hand side represents translating P by the vector e and then projecting 
from the canonical eye point E (N, q ) into the canonical plane S (N, q ). Therefore, since projecting 
into the plane S and then translating to the canonical plane is equivalent to first translating to ca-
nonical position and then projecting into the canonical plane, the left-hand side represents project-
ing from the eye point E into the plane S and then translating the result by the vector e = E (N, q ) 
− E to the canonical plane S (N, q ).	
♦
By Theorem 6.10, if we display the points generated by the sandwiching transformation
	
Tq(N, − q/2) (P − E) = q(N, −q/2) (P − E) q(N, −q/2),	
the scene will appear in perspective. But the scene materializes in the canonical plane rather than in  
the specified plane of projection. Thus for fixed values of the unit normal vector N and the scalar 
distance d = csc(q ), the scene always appears in the identical plane independent of the absolute 
position of the eye point E and the plane of projection S. Only the relative positions of E and S 
matter, not their absolute locations relative to a fixed coordinate system. Typically we are interested 
only in viewing the scene in perspective; translating the plane of perspective does not matter. Thus, 
rather remarkably, we can hard code the location of the viewing plane S (N, q ) depending only on 
the values of N and q and not worry about the absolute locations of the eye point E and the plane 
of projection S.
Exercises:
6.4. Let
S = the plane through the point O + cot(q )N perpendicular to the unit normal N 	
E = O + (cot(q ) − csc(q ))N = eye point
P = a point in three dimensions
Show that
	
Tq(N, − q/2) (P − E) = sin(q )((P − Q) ⋅ N ) E + (Q − E) ⋅ N ) P, (P − E ) ⋅ N ).	
•
•
•

72 
Rethinking Quaternions: Theory and Computation
6.5. Consider the canonical eye point and the canonical plane for N, q given by
	
E = E (N, q ) = O + (cot(q ) − csc(q ))N	
S = S (N, q ) = plane with unit normal N at a distance d = csc(q ) 
	
from the point E (N, q ) along the vector N.
a. 	 Show that
	 Q = Q(N, q ) = O + cot(q )N 
	 is the orthogonal projection of the eye point E (N, q ) onto the plane S (N, q ).
b. 	 We call the line segment EQ the axis of the eye point E (N, q ) and the plane S (N, q ). Show 
that for 0 < q ≤ p/2:
	 i.  the origin O =(0, 0, 0) lies on the axis of the eye point E (N, q ) and the plane S (N, q ).
	 ii.  |
|
cos( )
|
|
OQ
EQ
θ
=
	
	 iii.  O splits the axis into two segments of ratio 1
cos( )
cos( )
θ
θ
−
.
c.	
How do the results in part b change when p/2 < q < p?
6.6. Recall that the formula for projecting a point P from an eye point E into the plane S passing 
through a point Q and perpendicular to a unit vector N is given by Equation (6.6):
	
(
)
(
)
(
)
(
)
(
)
new
P
Q
N E
Q
E
N P
P
P
E
N
−
⋅
+
−
⋅
=
−
⋅
.	
a.	
Show that
	
(
)
(
)
(
)
(
)
(
)
(
)
(
)
new
P
Q
N
E
v
Q
E
N
P
v
P
v
P
E
N
−
⋅
+
+
−
⋅
+
+
=
−
⋅
.	
b.	 Conclude from part a that projecting a point P from the eye point E into the plane S and 
then translating the resulting point by the vector v is equivalent to first translating the point 
P by the vector v and then projecting the resulting point from the translated eye point E + v 
into the translated plane S + v. Thus conclude that projection and translation commute.
6.4	
ROTORPERSPECTIVES AND ROTOREFLECTIONS
We have studied in detail the two sandwiching maps Sq and Tq. The maps Sq — sandwiching a vec-
tor between a unit quaternion q and its conjugate q* — rotates vectors in three dimensions; the maps 
Tq — sandwiching a vector between two copies of the same unit quaternion q — computes either 

Affine, Semi-Affine, and Projective Transformations in 3 Dimensions  73
mirror images or perspective projections. But what is the geometric meaning in three dimensions of 
simple left or simple right multiplication?
Let
	
q = q(N, q )= cos(q )O +sin(q ) N 
and consider the two maps:
	
Lq ( p) = q p	
left multiplication by q
	
Rq ( p) = p q	
right multiplication by q.
The maps Lq and Rq represent double isoclinic rotations, transformations that rotate quaternions 
in four dimensions both in the plane of O, N and in the plane perpendicular to O, N by the same 
absolute angle q (see Figure 6.3). Therefore, in three dimensions, we should expect that these maps 
will project like Tq and rotate like Sq.
To see that both of these transformations—rotation and projection—do indeed occur during 
left and right multiplication, let r = q (N, q /2). The quaternion r is the square root of the quaternion 
q in the plane O, N, which is isomorphic to the complex plane. Hence
	
r 2 = q	
	
r r* = O =r * r.	
Therefore
	
q p = r (r p r*) r = r (r p r) r*,	
so
	
Lq ( p) = Tr (Sr( p)) = Sr (Tr ( p)).	
Thus on vectors in three dimensions left multiplication is indeed the composite of a rotation and 
a perspective projection, and these operations can be computed in either order. We call such maps 
rotorperspectives.
There are two interesting special cases: q = p/2 and q = p. If q = p/2, then q = q(N, p/2) = N, 
and r = q(N,p/4). Thus the product of two vectors
	
− (N ⋅ v ) O + N × v = Nv  = LN (v) = Tq(N,  p/4) (Sq(n, p/4)(v)) 	
has the following geometric interpretation in three dimensions: First rotate the vector v by the angle 
p/2 around the axis vector N to form the vector
	
Sq(N, p / 4) (v) = (v ⋅ N ) N + N × v.	

74 
Rethinking Quaternions: Theory and Computation
Then project the point P = O + N + (v ⋅ N ) N + N × v from the eye point E = O + N onto the plane 
passing through the point O perpendicular to the unit vector N to generate the mass-point
	
Tq (N, p / 4) ((v ⋅ N )N + N × v) = − ( N ⋅ v) O + N × v = Nv	
located at
	
N
v
P
O
N v
×
=
−
⋅
	
with mass
	
m = −N ⋅ v	
(see Theorem 6.9). With this interpretation, the product of two vectors Nv is a rotorperspective.
In the special case where q = p, we have q = q (N, p) = −O, so
	
L q (v) = L −o(v) = −v.	
In this case, r = q (N, p / 2) = N, so Sr = Sq(N, p / 2) is rotation by the angle p around the unit vector N, 
and Tr = TN is reflection in the plane perpendicular to N. A rotation followed by a reflection is called 
a rotoreflection, so in the special case when q = p, left multiplication is a rotoreflection instead of a 
rotorperspective. Analogous results hold for right multiplication.
More generally, we can consider the maps
	
1
2
, ( )
1
2
q
q
S
w
q wq
=
	
where q1 = q (N, q 1) and q2 = q (N, q 2). Let r1 = q (N, (q 1 + q 2) / 2) and r2 = q (N, (q 1 − q 2) / 2). Then 
by Lemma 5.1,
	
r 2 r 1 = q1	
	
r 1 r *2 = q2.	
Therefore
	
q1 p q2 = r2 (r 1 p r 1)r *2	
so
	
(
)
1
2
2
1
,
( )
( )
q q
r
r
S
p
S
T
p
=
.	

Affine, Semi-Affine, and Projective Transformations in 3 Dimensions  75
Thus the map 
1
2
,
q q
S
 is also a rotorperspective: a composite of a rotation and a perspective projec-
tion. One interesting special case is when q 1 + q 2 = p . In this case, r1 = q (N, p / 2) = N, so 
1r
N
T
T
=
 
is reflection in the plane perpendicular to N, and 
2
1
2
(
,(
)/2)
r
q N
S
S
θ
θ
−
=
 is rotation by the angle  
q 1 − q 2 around the unit vector N. Hence the maps 
1r
N
T
T
=
 and 
2
1
2
(
,(
)/2)
r
q N
S
S
θ
θ
−
=
 commute. 
Thus the map 
1
2
,
( )
q q
S
w  is a rotoreflection, since 
1
2
,
( )
q q
S
w  rotates the vector w around the axis N by 
the angle q 1 − q 2 and then reflects the resulting vector in the plane perpendicular to N.
Finally, consider the maps
	
1
2
,
1
2
( )
q q
S
w
q wq
=
	
where q1 = q (N1, q 1), q2 = q (N2, q 2) , and N1 ≠ N2. To analyze these maps, notice that
q1 p q2 = q1 q2 (q *2 p q2)
so
	
( )
( )
S
p
L
S
p
(
)
1
2
1 2
2*
,
q q
q q
q
=
.	
Thus the map 
1
2
,
q q
S
 is the composite of a rotation and a left multiplication—a rotorperspec-
tive, which is the composite of another rotation, but around a different axis, and a perspective  
projection.
•  •  •  •


77
Recapitulation: Insights and Results
Before we go on to discuss some computational issues, let us pause here for a moment to catch our 
breath and to recapitulate some of our main theoretical insights and results.
Multiplication by a unit quaternion rotates vectors in four dimensions because multiplication 
by a unit quaternion is a linear isometry. The key to understanding the precise geometric effect of 
multiplication by the unit quaternion
	
q (N, q ) = cos(q ) O + sin(q ) N	
is to study the rotations in four dimensions induced by q (N , q ) in the plane of O, N and in the plane 
orthogonal to O, N.
The plane of O, N is isomorphic to the complex plane C: O ↔ 1 and N ↔ i. Therefore mul-
tiplication by the unit quaternion q (N , q ) rotates quaternions in this plane counterclockwise by the 
angle q, and left and right multiplication commute. In contrast, the plane of quaternions orthogonal 
to O, N is isomorphic to C v, where v is any unit vector perpendicular to N. Moreover, for any com-
plex number q in the plane of O, N
	
v q = q * v.	
Therefore in the plane orthogonal to O, N, multiplication by q (N , q ) on the left represents rotation 
by the angle q, whereas multiplication by q (N , q ) on the right represents rotation by the angle −q. 
Thus left and right multiplication by q (N , q ) represent double isoclinic rotations in four dimen-
sions (see Figure 5.3).
By using sandwiching to combine these 4-dimensional rotations, we can generate simple 
rotations in four dimensions, leaving quaternions in one of these two planes fixed while rotating 
quaternions in the complementary plane. This approach allows us to harness quaternion multipli-
cation to rotate and reflect vectors in three dimensions. Moreover, rather remarkably, we can also 
apply sandwiching—simple rotations in four dimensions—to compute 3-dimensional perspective 
projections.
Recapitulation: Insights and Results
c h a p t e r  7

78 
Rethinking Quaternions: Theory and Computation
To generate our main results, we applied the following key insights:
Quaternions are mass-points.
	
a.  A quaternion is not merely the sum of a scalar and a vector. Rather quaternions have a 
physical–geometric interpretation compatible with the standard mass-point model of 
space used in contemporary computer graphics.
Multiplying arbitrary quaternions by a fixed unit quaternion rotates quaternions in four  
dimensions.
	 a.  Multiplication by a unit quaternion is a linear transformation because multiplication 
distributes through addition.
	 b.  Multiplication by a unit quaternion is an isometry because the length of the product 
of two quaternions is equal to the product of their lengths.
The identity O for quaternion multiplication represents a prescribed point, the origin for points 
in three dimensions.
The plane of O, N has special properties:
	 a.  The plane of O, N is isomorphic to the complex plane. Therefore multiplication by 
unit quaternions q (N, q ) rotates quaternions in this plane by the angle q, and left and 
right multiplication commute.
	 b.  The plane of O, N in four dimensions represents a line of points in three dimensions, 
the line through the point O parallel to the vector N.
	 c.  Rotations in four dimensions that are the identity on the plane of O, N are the identity 
on a line in three dimensions. Therefore rotations of quaternions that are the identity 
on the plane of O, N in four dimensions correspond to rotations about a line in three 
dimensions.
	 d.  Simple rotations in the plane of O, N in four dimensions are the identity on the plane 
of vectors orthogonal to N in three dimensions.
	 e.  Simple rotations in the plane of O, N in four dimensions correspond to reflections in 
and perspective projections onto a plane orthogonal to N in three dimensions.
	 f.  Rotations of quaternions in the plane of O, N convert distance along N into mass at O. 
Therefore no information is lost, even though these rotations in four dimensions can 
correspond to perspective projections in three dimensions. This observation allows us 
to detect hidden surfaces while performing perspective projection.
The plane perpendicular to O, N also has special properties:
	
a.  The plane perpendicular to O, N is isomorphic to the complex numbers times v, where 
v is any vector perpendicular to N. Moreover, v q = q * v for any complex number q in 
the plane of O, N.
1.
2.
3.
4.
5.

Recapitulation: Insights and Results  79
	 b.  In the plane perpendicular to O, N, multiplication by the unit quaternions  q (N , q ) 
on the left represents rotation by q, whereas multiplication by the unit quaternions  
q (N , q ) on the right represents rotation by −q.
	 c.  The plane of quaternions perpendicular to O, N in four dimensions represents the 
plane of vectors perpendicular to N in three dimensions.
	 d.  Rotations in four dimensions that are the identity on the plane perpendicular to O, N 
are the identity on a plane of vectors in three dimensions. Therefore rotations of qua-
ternions that are the identity on the plane perpendicular to O, N in four dimensions 
correspond to reflections in and projections onto a plane perpendicular to N in three 
dimensions.
Sandwiching is the basic orthogonal transformation in four dimensions.
	 a.  Sandwiching represents simple rotations in four dimensions, unlike left and right mul-
tiplication which represent double isoclinic rotations in four dimensions.
	 b.  Sandwiching measures the anticommutativity of quaternion multiplication. Therefore 
we can harness sandwiching to fix complementary planes in four dimensions.
	
i.  Sandwiching a quaternion between a unit quaternion q (N , q ) and its conjugate 
q * (N , q ) is the identity on quaternions in the plane of O, N.
	
ii.  Sandwiching a quaternion between two copies of a unit quaternion q (N , q ) is the 
identity on the quaternions in the plane perpendicular to O, N.
•  •  •  •
6.


81
Computation
p a r t  I I


83
Quaternion multiplication is a linear transformation on the 4-dimensional vector space of mass-
points because quaternion multiplication distributes through quaternion addition. Therefore both 
left and right quaternion multiplication can be represented by 4 × 4 matrices. Here we shall begin 
our study of computational issues by deriving the matrices representing left and right quaternion 
multiplication. We shall then simply multiply these matrices together to derive matrix representa-
tions for rotations, reflections, and perspective projections (see also Shoemake, 1991).
8.1	
MATRIX REPRESENTATIONS FOR  
QUATERNION MULTIPLICATION
Consider two quaternions
	
p = p4O + p1i + p2  j + p3 k = ( p1, p2, p3, p4 )	
	
q = q4O + q1i + q2 j + q3 k = ( q1, q2, q3, q4 ).	
Recall that by Equation (4.12)
	 pq = ( p4q4 − p1q1 − p2q2 − p3q3 ) O + ( p4q1 + p1q4 ) i + ( p4q2 + p2q4 ) j + 
( p4q3 + p3q4 ) k + ( p2q3 − p3q2 ) i + ( p3q1 − p1q3 ) j + ( p1q2 − p2q1 ) k	
= ( p4q1 + p1q4 + p2q3 − p3q2, p4q2 + p2q4 + p3q1 − p1q3, p4q3 + p3q4 
+ p1q2 − p2q1, p4q4 − p1q1 − p2q2 − p3q3 )	
(8.1)
Define
	
4
3
2
1
3
4
1
2
2
1
4
3
1
2
3
4
( )
q
q
q
q
q
q
q
q
L q
q
q
q
q
q
q
q
q
−
−




−
−


= 

−
−



	
(8.2)
Matrix Representations for Rotations, 
Reflections, and Perspective Projections
c h a p t e r  8

84 
Rethinking Quaternions: Theory and Computation
	
4
3
2
1
3
4
1
2
2
1
4
3
1
2
3
4
( )
q
q
q
q
q
q
q
q
R q
q
q
q
q
q
q
q
q
−
−




−
−


= 

−
−



 .	
(8.3)
Then using Equations (8.1)–(8.3), it is straightforward to verify by direct matrix multiplica-
tion that
q p = p * L (q)                          left multiplication by q.	
(8.4)
	
p q = p * R (q)                         right multiplication by q	
(8.5)
(see Exercise 8.1). Notice that the rows of L(q) and R(q) are orthogonal and their determinants are 
| q | 4. Thus if q is a unit quaternion, then L(q) and R(q) are orthogonal matrices and therefore—as 
expected since quaternion multiplication preserves length—represent rotations in four dimensions.
We have seen in Chapter 6 that rotation, reflection, and perspective projection in three di-
mensions are each just composites of left and right quaternion multiplication (with and without 
conjugation), so we can simply multiply the matrices L(q) and R(q) (or R (q * )) to find explicit matrix  
representations for these three transformations. Next we shall investigate each of these transforma-
tions in turn.
Exercises:
8.1. Let L(q) and R(q) be the matrices defined in Equations (8.2) and (8.3). Verify that
	
a.  q p = p * L (q)	
	
b.  p q = p * R (q)	
8.2. Let L( q ) and R( q ) be the matrices defined in Equations (8.2) and (8.3). Show that
	
a.  L ( p + q) = L ( p) + L (q)
	
b.  R ( p + q) = R ( p) + R (q)
	
c.  L ( p q) = L (q) L ( p)
	
d.  R ( p q) = R ( p ) R (q)
	
e.  L ( p)R (q) = R (q) L ( p).
(Hint: Interpret each of these results in terms of quaternion multiplication.)
8.3. Let L( q ) and R( q ) be the matrices defined in Equations (8.2) and (8.3), and let I be the 4 × 4 
identity matrix. By direct computation verify that if q is a unit quaternion, then
	
a.  L(q) ∗ L(q) T = I = R (q) ∗ R(q)T
	
b.  det(L(q)) = 1 = det(R(q)).
   

Matrix for Rotations, Reflections, and Perspective Projections  85
8.2	
MATRIX REPRESENTATIONS FOR ROTATIONS
Recall from Theorem 6.1 that the map
	
Sq( N, q / 2) (v) = q (N, q / 2) v q * (N, q / 2)	
(8.6)
rotates the vector v by the angle q around the axis N. Let
	
q = q  ( N, q / 2)= (q1, q2, q3, q4 ).	
Then by Equations (8.4)–(8.6)
	
Sq (v) = v ∗ L (q) ∗ R (q *).
Therefore the matrix Rot(N, q ) representing rotation around the axis vector N by the angle θ is 
given by 
	
2
2
2
2
1 2
3 4
1 3
2 4
4
1
2
3
2
2
2
2
1 2
3 4
2 3
1 4
4
1
2
3
2
2
2
2
1 3
2 4
2 3
1 4
4
1
2
3
(
, )
( )
(
)
2
2
2
2
0
2
2
2
2
0
              
2
2
2
2
0
0
0
0
1
Rot N
L q
R q
q
q
q
q
q q
q q
q q
q q
q q
q q
q
q
q
q
q q
q q
q q
q q
q q
q q
q
q
q
q
θ
∗
=
∗


+
−
−
+
−




−
−
+
−
+
= 

+
−
−
−
+






	
(8.7)
Thus it is easy to extract the rotation matrix Rot(N, θ) from the components of the unit quaternion 
q ( N, θ / 2 ). Notice too that since
q (N, θ / 2) = cos(θ / 2)O + sin(θ / 2)N = (sin(θ / 2)N1, sin(θ / 2)N2, sin(θ / 2)N3, cos (θ / 2)),
it follows from substitution into Equation (8.7) and the half angle formulas that
	
1
3
2
2
3
1
N N
N
N N
N
N
θ
θ
θ
θ
θ
θ
−
+
−
−
+
−
1
cos( )
sin( )
1
cos( )
sin( )
cos( )
1
cos( )
0




1
2
3
1
3
2
N
N N
N
N N
N
θ
θ
θ
θ
θ
θ
+
−
−
+
−
−
cos( )
1
cos( )
1
cos( )
sin( )
1
cos( )
sin( )
0
1
2
3
2
3
1
N N
N
N
N N
N
θ
θ
θ
θ
θ
θ
−
−
+
−
−
+
1
cos( )
sin( )
cos( )
1
cos( )
1
cos( )
sin( )
0
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
θ



=

2
1
2
2
2
3
(
, )
0
0
0
1
Rot N





	
(8.8)
Conversely, given the rotation matrix R = Rot (N, θ), we can find the corresponding unit 
quaternion q = q (N, θ / 2) in the following fashion. From Equation (8.7)
	
2
2
2
2
11
22
33
4
1
2
3
3q
q
q
q
R
R
R
−
−
−
=
+
+
.

86 
Rethinking Quaternions: Theory and Computation
Therefore since
	
2
2
2
2
2
1
2
3
4
| |
1
q
q
q
q
q
+
+
+
=
= ,
it follows that
	 	
2
11
22
33
4
4
1
q
R
R
R
−
=
+
+
.
Hence
	
11
22
33
4
1
2
R
R
R
q
+
+
+
=
 .	
(8.9)
Moreover again by Equation (8.7)
	
4 q1q4 = R23 − R32
	
4 q2q4 = R31 − R13
	
4 q3q4 = R12 − R21.	
(8.10)
so by Equations (8.9) and (8.10)
	
 	
(8.11)
Equations (8.9) and (8.11) are valid provided that q4 = cos(θ / 2 ) ≠ 0 —that is, provided that  
θ ≠ π. If θ ≈ π, then as in Equation (8.9) we can compute
	
11
22
33
1
11
22
33
2
11
22
33
3
1
2
1
2
1 .
2
R
R
R
q
R
R
R
q
R
R
R
q
−
−
+
=
−
+
−
+
=
−
−
+
+
=
	
(8.12)
For numerical stability choose the largest of these three values, say q1. Then as in Equation (8.11)
23
32
1
11
22
33
31
13
2
11
22
33
12
21
3
11
22
33
2
1
2
1
.
2
1
R
R
q
R
R
R
R
R
q
R
R
R
R
R
q
R
R
R
−
=
+
+
+
−
=
+
+
+
−
=
+
+
+

Matrix for Rotations, Reflections, and Perspective Projections  87
	
12
21
2
11
22
33
13
31
3
11
22
33
23
32
4
11
22
33
2
1
2
1
.
2
1
R
R
q
R
R
R
R
R
q
R
R
R
R
R
q
R
R
R
+
=
−
−
+
+
=
−
−
+
−
=
−
−
+
	
(8.13)
Exercises:
8.4. By direct computation, verify that if q = q4O + q1i + q2 j + q3k is a unit quaternion, then
	
2
2
2
2
1 2
3 4
1 3
2 4
4
1
2
3
2
2
2
2
1 2
3 4
2 3
1 4
4
1
2
3
2
2
2
2
1 3
2 4
2 3
1 4
4
1
2
3
2
2
2
2
0
2
2
2
2
0
( )
(
)
2
2
2
2
0
0
0
0
1
q
q
q
q
q q
q q
q q
q q
q q
q q
q
q
q
q
q q
q q
L q
R q
q q
q q
q q
q q
q
q
q
q
∗


+
−
−
+
−




−
−
+
−
+
∗
= 

+
−
−
−
+






 
.
	
8.5. Let q = q4O + q1i + q2  j + q3k.
a.  By direct computation show that
	
i.  qi q
q
q
q
q
q q
q q
q q
q q
=
+
−
−
+
−
(
)
2
2
2
2
1 2
3 4
1 3
2 4
4
1
2
3 , 2
2
, 2
2
∗
	
ii. 
=
−
−
+
−
+
(
)
2
2
2
2
1 2
3 4
2 3
1 4
4
1
2
3
2
2
,
, 2
2
q j q
q q
q q
q
q
q
q
q q
q q
∗
	
iii. 
=
+
−
−
−
+
(
)
2
2
2
2
1 3
2 4
2 3
1 4
4
1
2
3
2
2
, 2
2
,
q kq
q q
q q
q q
q q
q
q
q
q
∗
	
iv.  q O q * = O.
b.  Conclude from part a that if q = q(N, q / 2), then
	
2
2
2
2
1 2
3 4
1 3
2 4
4
1
2
3
2
2
2
2
1 2
3 4
2 3
1 4
4
1
2
3
2
2
2
2
1 3
2 4
2 3
1 4
4
1
2
3
2
2
2
2
0
2
2
2
2
0
(
, )
2
2
2
2
0
0
0
0
1
q
q
q
q
q q
q q
q q
q q
q q
q q
q
q
q
q
q q
q q
Rot N
q q
q q
q q
q q
q
q
q
q
θ


+
−
−
+
−




−
−
+
−
+
= 

+
−
−
−
+






	
8.6. Let N T denote the column vector that is the transpose of the row vector N, and let I denote the 
3 × 3 identity matrix.
a.  Using Equation (8.8), show that
	
(
, )
cos( )
sin( )
θ
θ
θ
1
cos( ) (
)
0
−
∗
0
0
0
I
N
N
=
+
+




(
)
3
2
3
1
2
1
0
0
0
0
0
0
0
1
0
0
0
0
T
N
N
N
N
Rot N
N
N
θ
−




−










−








	

88 
Rethinking Quaternions: Theory and Computation
b.  Using part a, prove the following formula of Rodrigues:
(v,0) ∗ Rot ( N, q ) = cos(q )v + (1 − cos(q ))(N ⋅ v)N + sin(q )N × v.
c.  Using part b, show that
(N, 0) ∗ Rot (N, q ) = (N, 0).
8.3	
MATRIX REPRESENTATIONS FOR MIRROR IMAGES
Recall from Theorem 6.4 that the map
	
TN (v) = N v N	
(8.14)
is the mirror image of v in the plane perpendicular to N. Hence by Equations (8.4), (8.5)
	
TN (v) = v ∗ L(N ) ∗ R(N ).
Therefore the matrix Mir (N ) representing mirror image in the plane perpendicular to the unit  
vector N is given by
	
2
2
2
1
2
1
3
2
3
1
2
2
2
1
2
2
3
1
2
3
2
2
2
1
3
2
3
1
2
3
(
)
(
)
(
)
2
2
0
2
2
0
            
2
2
0
0
0
0
1
Mir N
L N
R N
N
N
N
N N
N N
N N
N
N
N
N N
N N
N N
N
N
N
=
∗


+
−
−
−




−
−
+
−
= 

−
−
+
−




−

	
 (8.15)
or equivalently since N is a unit vector
	
2
1
2
1
3
1
2
1
2
2
3
2
2
1
3
2
3
3
1
2
2
2
0
2
1
2
2
0
(
)
2
2
1
2
0
0
0
0
1
N
N N
N N
N N
N
N N
Mir N
N N
N N
N


−
−
−




−
−
−
= 

−
−
−




−

	
(8.16)
Conversely, given the mirror image matrix M = Mir (N ), we can easily find the corresponding 
unit normal vector N since by Equation (8.16)
	
1
2
kk
k
M
N
−
=
, k = 1,2,3.	
(8.17)
Notice the value −1 in the lower right-hand corner of the matrix M = Mir (N ). If v = v1i + v2  j + 
v3k = (v1, v2, v3, 0) is a vector in R3, then the upper 3 × 3 submatrix of M computes the mirror 

Matrix for Rotations, Reflections, and Perspective Projections 
89
image of v in the plane perpendicular to N; the fourth component of v is zero, so the value −1 in 
the lower right-hand corner of M does not affect the value of v ∗ M. On the other hand, for points 
P = O + p1i + p2  j + p3 k = ( p1, p2, p3, 1) in R3, the value −1 in the lower right-hand corner of M does 
affect the value of P ∗ M, and P ∗ M is not the mirror image of the point P in the plane through O 
perpendicular to the vector N. Indeed as we observed in Section 6.2
TN (P ) = N P N
is not the mirror image of P; rather the mirror image of P is given by
TN (P − 2O) = N (P − 2O) N = (P − 2O) ∗ M.
But P − 2O = ( p1, p2 , p3, −1), so we need to change the fourth component of points P from 
+1 to −1 to correctly compute the mirror image of P using the matrix M. Alternatively, we can  
simply change the sign of M44 instead of the sign of p4 and get the same result. The original value 
M44 = −1 because M = L (N ) ∗ R(N ) represents a rotation in R4, so det (M ) = 1. Since the upper  
3 × 3 submatrix of M has determinant −1, to balance this sign M44 = −1. But if we simply dispense 
with this minus sign, then we can use the same matrix to correctly compute the mirror image of 
both points and vectors in R3.
Exercises:
8.7. By direct computation, verify that if N = (N1, N2, N3, 0) is a unit vector, then
	
2
1
2
1
3
1
2
1
2
2
3
2
2
1
3
2
3
3
1
2
2
2
0
2
1
2
2
0
(
)
(
)
2
2
1
2
0
0
0
0
1
N
N N
N N
N N
N
N N
L N
R N
N N
N N
N


−
−
−




−
−
−
∗
= 

−
−
−




−


 
.
	
8.8. Let NT denote the column vector that is the transpose of the row vector N, and let I denote the 
3 × 3 identity matrix.
a.  Show that
	
2
0
(
)
0
1
T
I
N
N
Mir N


−
∗
= 





−
.	
b.  Using part a, show that
	
i.  v ⊥ N ⇒ (v, 0) ∗ Mir (N ) = (v, 0)
	
ii.  (N, 0) ∗ Mir (N ) = (−N, 0).
   

90 
Rethinking Quaternions: Theory and Computation
8.4	
MATRIX REPRESENTATIONS FOR  
PERSPECTIVE PROJECTIONS
Let
E = eye point
S = plane of projection
N = unit normal to the plane of projection
d = csc (q ) = distance from the eye point E to the plane of projection S along the nor-
mal N
P = a point in three dimensions
Then by Theorem 6.10
Tq (N, −q / 2)(P − E ) = q (N, −q / 2) (P − E) q (N, −q / 2) is a mass-point, where
	 —the point is located at the perspective projection of the point P from the eye point E onto 
the plane S translated by the vector E (N, q ) − E to the canonical plane S (N, θ)
	 —the mass is equal to dsin(q ), where d is the distance of the point P from the plane through 
the eye point E perpendicular to the unit normal N.
Now let v = P − E and q = q(N, −q / 2). Then by Equations (8.4) and (8.5)
Tq (v) = v ∗ L(q) ∗ R(q).
Therefore the matrix Persp (N, q ) representing perspective projection from the eye point E into the 
plane S translated to the canonical plane S(N, q ) is given by the matrix
	
2
1 2
1 3
1 4
1
2
1 2
2 3
2 4
2
2
1 3
2 3
3 4
3
2
1 4
2 4
3 4
4
1
2
2
2
2
2
1
2
2
2
(
, )
( )
( )
2
2
1
2
2
2
2
2
2
1
q
q q
q q
q q
q q
q
q q
q q
Persp N
L q
R q
q q
q q
q
q q
q q
q q
q q
q
θ


−
−
−
−




−
−
−
−
=
∗
= 

−
−
−
−






−

	
(8.18)
Notice too that since
q (N, −q / 2) = cos(q / 2)O − sin(θ / 2)N
	
= (−sin(q / 2)N1, −sin(θ / 2)N2, −sin(θ / 2)N3, cos(q / 2))
it follows from substitution into Equation (8.18) and the half angle formulas that
•
•
•
•
•
•

Matrix for Rotations, Reflections, and Perspective Projections 
91
1
3
2
3
3
N N
N N
N
N
cos( )
1
cos( )
1
1
cos( )
1
sin( )
θ
θ
θ
θ
−
−
+
−


1
2
2
3
2
N N
N
N N
N
cos( )
1
1
cos( )
1
cos( )
1
sin( )
θ
θ
θ
θ
−
+
−
−


1
2
1
3
1
N
N N
N N
N
+
−
−
−
1
cos( )
1
cos( )
1
cos( )
1
sin( )




θ
θ
θ
θ
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
2
1
2
2
2
3
1
2
3
(
, )
sin( )
sin( )
sin( )
cos( )
Persp N
N
N
N
θ
θ
θ
θ
θ
= 



−
−
−

.	
 
(8.19)
For example, when N = (0, 0, −1),
	
1
0
0
0
0
1
0
0
(
, )  0
0
cos( )
sin( )
0
0
sin( )
cos( )
Persp N θ
θ
θ
θ
θ






= 

−



,	
which coincides with the result in Example 6.2.
Rather than express the matrix for perspective projection in terms of trigonometric functions 
of the quaternion angle q, geometrically it is more natural to write this matrix as a function of the 
distance d between the eye point E and the plane of projection S. We can easily convert between the 
distance d and the angle q because by construction
d = csc (q ).
Moreover, if csc (q ) = d, then sin(q ) = 1 / d and 
2
cos( )
1
1/d
θ = ±
−
. Substituting these expressions 
for cos(q ), sin(q ) in terms of d into Equation (8.19), we find that in terms of the distance d and the 
unit normal vector N the matrix for perspective projection is given by
	
1
2
2
3
2
1
2
1
3
1
1
1 1/
1
1 1/
1
1 1/
1
/
d
N
d
N N
d
N N
N
d
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)


+ ±
−
−
±
−
−
±
−
−






±
−
−
+ ±
−
−
±
−
−


= 

±
−
−
±
−
−
+ ±
−
−






−
−
−
±
−


2
2
2
2
1
2
2
2
2
2
2
2
2
2
1
3
2
3
3
3
2
1
2
3
1 1/
1
1
1 1/
1
1 1/
1
/
(
, )
1 1/
1
1 1/
1
1
1 1/
1
/
/
/
/
1 1/
d
N N
d
N
d
N N
N
d
Persp N d
d
N N
d
N N
d
N
N
d
N
d
N
d
N
d
d
	
(8.20)
For example, if d = 1 and N = (0, 0, −1) then
	
1
0
0
0
0
1
0
0
(
,
)
0
0
0
1
0
0
1
0
Persp N d






= 

−




	
which coincides with the result in Example 6.1.

92 
Rethinking Quaternions: Theory and Computation
Conversely, given the perspective matrix P = Persp (N, q ), we can find the corresponding qua­
ternion q = q (N, −q / 2) in the following fashion. From Equation (8.18)
	
44
4
1
2
P
q
+
=
 .	
(8.21)
Moreover, by assumption, q44 ≠  0 , since otherwise q would represent mirror image, not perspective 
projection. Now by Equation (8.18)
	
4
4
4
4
k
k
k
P
P
q
q
−
=
 , k = 1, 2, 3	
(8.22)
Finally, notice that to compute perspective projection, we typically apply the matrix Persp  
(N, q ) only to vectors v = (v1, v2, v3, 0), rather than to points P = ( p1, p2, p3, 1). Therefore only the 
upper 3 × 4 entries of Persp (N, q ) are used to compute perspective projection. The fourth row has 
no affect on vectors; this row is there only to insure that Persp (N, q ) is a rotation matrix on R4.
Exercises:
8.9. By direct computation, verify that if q = q4O + q1i + q2  j + q3k is a unit quaternion, then
	
2
1 2
1 3
1 4
1
2
1 2
2 3
2 4
2
2
1 3
2 3
3 4
3
2
1 4
2 4
3 4
4
1
2
2
2
2
2
1
2
2
2
( )
( )
2
2
1
2
2
2
2
2
2
1
q
q q
q q
q q
q q
q
q q
q q
L q
R q
q q
q q
q
q q
q q
q q
q q
q


−
−
−
−




−
−
−
−
∗
= 

−
−
−
−






−


 
.
	
8.10. Let N T denote the column vector that is the transpose of the row vector N, and let I denote 
the 3 × 3 identity matrix.
a.  Using Equation (8.19), show that
	
(
)
cos( )
1 (
)
sin( )
(
, )
sin( )
cos( )
T
T
I
N
N
N
Persp N
N
θ
θ
θ
θ
θ


+
−
∗
= 



−


	
b.  Using part a, show that
	
i.  O ∗ Persp (N , q ) = − sin(q )N + cos(q )O
	
ii.  (v, 0) ∗ Persp (N , q ) = (v, 0) + (cos(q ) −1)((v ⋅ N )N, sin(q ) (v ⋅ N )).
c.  Conclude from part b that
	
i.  v ⊥ N ⇒ (v, 0) ∗ Persp (N, q ) = (v, 0)
	
ii.  (N, 0) ∗ Persp (N, q ) = cos(q )N + sin(q )O
d.  Let u (N, f ) = cos(f )N + sin (f )O. Using parts b and c, show that
	
i.  u (N, f ) ∗ Persp (N, q ) = u (N, f + q ).
   

Matrix for Rotations, Reflections, and Perspective Projections 
93
	
e.  Conclude from parts c, d that the matrix Persp (N, q ) represents a simple rotation in four 
dimensions by the angle q in the plane determined by N, O and is the identity on vectors 
in the plane perpendicular to N, O.
8.11. Let NT denote the column vector that is the transpose of the row vector N, and let I denote 
the 3 × 3 identity matrix.
a.  Using Equation (8.20), show that
	
(
)
2
2
1
1/
1 (
)
/
(
, )
/
1
1/
T
T
I
d
N
N
N
d
Persp N d
N d
d


+ ±
−
−
∗


= 



−
±
−


.	
b.  Using part a, show that
	
(
)(
)
2
( ,0)
(
, )
( ,0)
1
1/
1 (
)
,
/
v
Persp N d
v
d
v N N
v N d
∗
=
+ ±
−
−
⋅
⋅
	
c.  Conclude from part b that
	
i.  v ⊥ N ⇒ (v, 0) ∗ Persp (N, d ) = (v, 0)
	
ii. 
(
)
2
(
,0)
(
,
)
1
1/
, 1/
N
Persp N d
d
N
d
∗
= ±
−
.
8.12. Recall from Section 6.3 that the canonical eye point and the canonical plane for N, q are  
given by
	
E(N, q ) = O + (cot(q ) − csc (q ))N
	
S(N, q ) = plane with unit normal N at a distance d = csc (q ) from the point E(N, q ) along 
the vector N.
a.  Show that
	
Limqp (cot(q ) − csc (q )) = ±∞.	
b.  Conclude from part a that as q →π, the eye point E(N, q ) recedes to infinity in the 
direction ± N.
c.  Using Exercise 8.10, show that
	
2
0
(
, )
0
1
T
I
N
N
Lim
Persp N
θ
π
θ
→


−
∗
= 



−

,	
d.  Conclude from part c and Exercise 8.8 that
	
Limqp Persp(N, θ ) = Mir (N ).	

94 
Rethinking Quaternions: Theory and Computation
8.13.  Recall from Section 6.3 that the canonical eye point and the canonical plane for N, q are  
given by
	 E = E (N, q ) = O + (cot(q ) − csc (q ))N 
	 S = S (N, q ) = plane with unit normal N at a distance d = csc(q ) from the point E (N, q ) 
along the vector N—that is, the plane with unit normal N passing through 
the point Q = Q (N, q ) = O + cot(q )N
and that
	
Q
E
N I
N
E
N
−
⋅
+
∗




(
)
(
)
( ,
,
)  
(
)
T
T
Persp E Q N
Q N E
E N
= 

−
⋅
−
⋅

.
Let M3 × 4 denote the upper 3 × 4 submatrix of a 4 × 4 matrix M. Show that
	 	
Persp(N, q )3 × 4 = sin(q ) Persp (E, Q, N ) 3 × 4.
•  •  •  •

95
In this chapter we examine the three main applications of quaternions in computer graphics: to 
increase speed and reduce storage for calculations involving rotations, reflections, and perspective 
projections; to avoid distortions arising from numerical inaccuracies caused by floating point com-
putations with rotations; and to interpolate between two rotations for key frame animation.
9.1	
EFFICIENCY: QUATERNIONS VERSUS MATRICES
We now have two ways to represent certain important transformations on vectors in three di-
mensions: matrices and quaternions. For rotations and reflections, we can use 3 × 3 matrices; for 
perspective projections we require 3 × 4 matrices. Here we shall compare and contrast some of the 
advantages and disadvantages of quaternion and matrix representations for these key transforma-
tions. For the purposes of this discussion, we shall assume that we can represent our transformations 
by 3 × 3 matrices; the discussion changes only slightly for 3 × 4 matrices.
A 3 × 3 matrix contains nine scalar entries, whereas a quaternion can be represented by four 
rectangular coordinates. Thus if memory is at a premium, quaternions are more than twice as ef-
ficient as matrices.
On the other hand, by Equation (4.8) to compute the product of two quaternions requires 16 
real scalar multiplications: six for the cross product, three for the dot product, six for the two scalar 
products, and one for the product of the two scalar masses. Similarly, since a vector has zero mass, 
the product of a quaternion and a vector requires 12 scalar multiplications because the product of 
the masses as well as one of the scalar products is zero. Sandwiching a vector between two quater-
nions computes a product of a quaternion with a vector followed by the product of a quaternion 
with a quaternion, so the total cost for one transformation using quaternions is 12 + 16 = 28 scalar 
multiplications. In contrast, the cost for multiplying a vector by a 3 × 3 matrix is only nine scalar 
multiplications. Thus matrices are more than three times as fast as quaternions for computing these 
transformations.
But there is an additional computational consideration. To compose two rotations by quater-
nion multiplication requires 16 scalar multiplications, whereas to compose two rotations by matrix 
multiplication requires 27 scalar multiplications. Therefore quaternion multiplication is more than 
Applications
c h a p t e r  9

96 
Rethinking Quaternions: Theory and Computation
1.5 times faster than matrix multiplication for composing these transformations. Thus some com-
putations favor quaternions, whereas others favor matrices. We summarize these tradeoffs for both 
memory and speed in Table 9.1.
9.2	
AVOIDING DISTORTION BY RENORMALIZATION
Aside from considerations of memory and speed, one of the main advantages of quaternions over 
matrices is avoiding distortions that arise from numerical inaccuracies that are inevitably introduced 
by floating point computations.
For any 3 × 3 matrix A representing an affine transformation,
	
new
new
new
i
i
j
j
A
k
k








=
∗












.
	
Since the matrix with rows i, j,k is the identity matrix, we conclude that
	
new
new
new
i
A
j
k




= 




.
	
Hence the rows of A represent the images of the unit vectors i,  j,k along the coordinate axes.
Thus if a 3 × 3 matrix A represents a rotation or reflection, then the rows of A must be mutu-
ally orthogonal vectors, since these transformations preserve angles and the original vectors i,  j,k are 
mutually orthogonal. To compose these transformations, we must multiply matrices. But the entries 
of these matrices—especially rotation matrices that contain values of sines and cosines—are typi-
cally represented by floating point numbers. Therefore after composing several rotations, the rows 
of the product matrix will no longer be mutually orthogonal vectors due to numerical inaccuracies 
TABLE 9.1:  Tradeoffs between speed and memory for quaternions and 3 × 3 matrices.
Memory
Transformation
Composition
Quaternions
4 scalars
28 multiplies
16 multiplies
3 × 3 Matrices
9 scalars
9 multiplies
27 multiplies

Applications 
97
introduced by floating point computations. Thus these matrices no longer represent rotations, so 
applying these matrices to vectors will distort angles in the image.
Quaternions avoid this problem. To compose rotations, we multiply the corresponding qua-
ternions. Since every quaternion represents a conformal transformation, computing transformations 
by sandwiching with quaternions will never distort angles.
Suppose, however, that we want to compose only rotations. Composing rotations by matrix 
multiplication, we will generate distortions in both lengths and angles due to numerical inaccu-
racies introduced by floating point computations. We need to renormalize the resulting matrix 
so that the rows are mutually orthogonal unit vectors, but it is not so clear how to perform this  
renormalization.
This normalization, however, is easy to perform with quaternions. Rotations are represented 
by unit quaternions. When we compose rotations by multiplying unit quaternions, the result may no 
longer be a unit quaternion due to floating point computations. But we can normalize the resulting 
quaternion q simply by dividing by its length | q |. The resulting quaternion q /| q | is certainly a unit 
quaternion, so this renormalization avoids distorting either lengths or angles in the image.
9.3	
KEY FRAME ANIMATION AND SPHERICAL  
LINEAR INTERPOLATION
Quaternions have one additional advantage over matrices: quaternions can be used to interpolate 
in between frames for key frame animation. In key frame animation, an artist draws only a few key 
frames in the scene, and an animator must interpolate intermediate frames to make the animation 
appear natural.
Consider an object tumbling through a scene. An artist will typically draw only a few frames 
representing rotations of the object at certain key times. An animator must then find intermediate 
rotations, so that the tumbling looks smooth and natural. Suppose that from the artist’s drawing we 
know the rotations R0 and R1 at times t = 0 and t = 1. How do we find the appropriate intermediate 
rotations at intermediate times?
If the rotations R0, R1 are represented by 3 × 3 matrices, then we seek intermediate rotation 
matrices R(t ) for 0 < t < 1. We might try linear interpolation and set
	
R(t ) = (1 - t )R0 + t R1.	
The problem with this approach is that the matrices R(t) are no longer rotation matrices because 
the rows of these matrices are no longer mutually orthogonal unit vectors. Thus the matrices R(t) 
will introduce undesirable distortions into the animation.

98 
Rethinking Quaternions: Theory and Computation
t
q0
q1
q(t)
(1
t)
φ
φ
φ
FIGURE 9.1: Spherical linear interpolation (SLERP): The quaternion q(t) lies in between the two unit 
quaternions q0, q1 along a circular arc and makes an angle tf with q0 and (1- t)f with q1, where f is the 
angle betwen q0 and q1.
Alternatively, we could use unit quaternions q0,q1 to represent these two rotations. The qua-
ternion generated by linear interpolation
	
q(t) = (1 - t)q0 + t q1	
is no longer a unit quaternion, but we can adjust the length of q(t) by dividing by | q(t) |. Now 
q(t)/|q(t) is a unit quaternion representing an intermediate rotation. Unfortunately, the tumbling 
motions generated by this approach will not appear smooth and natural because linear interpolation 
does not generate uniformly spaced quaternions—that is, if f is the angle between q0 and q1, then 
tf is not generally the angle between q0 and q(t)/|q(t)|. To solve this problem, we shall apply spheri-
cal linear interpolation (SLERP) to find the unit quaternion q(t) in the plane of q0 and q1 that makes 
an tf angle with q0 and (1 - t)f with q1 (see Figure 9.1).
Theorem 9.1: Spherical linear interpolation—SLERP
Let q0, q1 be two unit quaternions and let f be the angle between q0 and q1. Then the quaternion
	
(
)
( )
0
1
sin (1
)
sin
( )
sin( )
sin( )
t
t
q t
q
q
φ
φ
φ
φ
−
=
+
	
is the unit quaternion in the plane of q0, q1 that makes the angle tf with q0 and (1- t)f  with q1.
Proof: Let q(t) be the unit quaternion in the plane of q0, q1 that makes the angle tf with q0 and 
(1- t)f with q1 (see Figure 9.1). Since q(t) is in the plane of q0, q1, there are scalars a(t ),b (t) such 
that
	
q(t) = a(t )q0 + b (t)q1.	
Moreover, since q0, q1, q(t) are unit quaternions, dotting both sides of this equation with q0 and q1 
yields
sin
sin

Applications  99
	
cos(tf ) = a(t) + cos(f )b (t)	
	
cos((1 - t)f ) = cos(f )a(t) + b(t).	
Solving these two equations for a(t), b(t), we find that
so
	
(
)
(
)
2
det
cos(
)
cos( )
cos (1
)
1
cos(
)
cos( )cos (1
)
( )
det
1
cos ( )
1
cos( )
cos( )
1
t
t
t
t
t
φ
φ
φ
φ
φ
φ
α
φ
φ
φ






−
−
−


=
=
−








,
	
	
	
	
	
Similarly,
	
(
)
(
)
2
det
1
cos(
)
cos( )
cos (1
)
cos (1
)
cos( )cos(
)
( )
det
1
cos ( )
1
cos( )
cos( )
1
t
t
t
t
t
φ
φ
φ
φ
φ
φ
β
φ
φ
φ






−
−
−


=
=
−








,
	
so	
2
cos( )cos(
)
sin( )sin(
)
cos( )cos(
)
sin(
)
( )
 
.
sin( )
sin ( )
t
t
t
t
t
φ
φ
φ
φ
φ
φ
φ
β
φ
φ
+
−
=
=
	
♦
We adopt the notation
	
(
)
( )
0
1
0
1
sin (1
)
sin
(
,
, )
sin( )
sin( )
t
t
slerp q
q t
q
q
φ
φ
φ
φ
−
=
+
,	
(9.1)
where f is the angle between q0 and q1, and we call this result spherical linear interpolation because 
we are interpolating uniformly along a circular arc instead of along a straight line. Thus by Theorem 
9.1 spherical linear interpolation (slerp) applied to two unit quaternions generates the appropriate 
unit quaternions to represent intermediate rotations for key frame animation.
t
t
t
φ
φ
φ
φ
φ
φ
(
))
(
)
(
)
2
2
2
cos(
)
cos( ) cos( )cos(
)
sin( )sin(
( )
sin ( )
1
cos ( ) cos(
)
sin( )cos( )sin(
)
sin( )cos(
)
cos( )sin(
)
       
sin( )
sin ( )
sin (1
)
      
.
sin( )
t
t
t
t
t
t
α
φ
φ
φ
φ
φ
φ
φ
φ
φ
φ
φ
φ
φ
φ
−
+
=
−
−
−
=
=
−
=
sin
sin

100 
Rethinking Quaternions: Theory and Computation
Exercise:
9.1.  Consider two unit vectors v0,v1. Let f be the angle between v0 and v1 and let 
0
1
0
1
|
|
v
v
w
v
v
×
=
×
.
a.  Show that
	
i. slerp(v0,v1,t) = etfw/ 2v0 e-tfw/ 2	
 
	
ii. v1*v0 = efw	
b.  Conclude from part a that
	
slerp(v0,v1,t) = (v1* v0)t/2v0(v0* v1)t/2.	
•  •  •  •

101
Quaternions are complex numbers on steroids. Complex numbers are vectors in the plane; quaterni-
ons are vectors in the 4-dimensional space of mass-points. Multiplication with unit complex numbers 
rotates vectors in the plane; multiplication with unit quaternions rotates vectors in four dimensions.
Classically, the main application of quaternions in computer graphics is to use sandwiching 
with unit quaternions to rotate vectors in three dimensions. The advantages of unit quaternions over 
3 × 3 rotation matrices are that quaternions can 
increase speed and reduce storage;
avoid distortions arising from numerical inaccuracies introduced by floating point  
computations;
interpolate easily between two rotations for key frame animation.
One of the themes of this monograph is that sandwiching with unit quaternions can also be applied 
effectively to compute perspective projections.
We have used a good deal of algebra and geometry in our study of quaternions. Our main 
geometric insights are summarized in Chapter 7. Therefore, in the remainder of this section, we 
shall collect for easy reference all of the important algebraic formulas we have encountered during 
our investigations of quaternions.
Quaternion Representations
    q = mqO + vq  (coordinate free)
    •   mq is a scalar mass
    •   O represents the origin of the points in 3-dimensional affine space
    •   vq is a vector in three dimensions.
    q = (q1, q2 , q3 , q4)  (coordinate dependent)
    •   mq = q4
    •   vq = (q1, q2, q3)
i.
ii.
iii.
Summary—Formulas From  
Quaternion Algebra
c h a p t e r  1 0

102 
Rethinking Quaternions: Theory and Computation
Quaternion Multiplication
    •    pq = (mpO + vp)(mqO + vq) = (mpmq − vp . vq) O + (mpvq + mqvp + vp × vq)
    •    i 2 = j 2 = k 2 = −O and i j = k = −j i, j k = i = −k j, k i = j = −i k.
    •    pq = ( p4q4 − p1q1 − p2q2 − p3q3)O + ( p4q1 + p1q4 + p2q3 − p3q2) i
	
+ ( p4q2 + p2q4 + p3q1 − p1q3)j + ( p4q3 + p3q4 + p1q2 − p2q1)k  .
	
•    
(
)
4
3
2
1
3
4
1
2
1
2
3
4
2
1
4
3
1
2
3
4
q
q
q
q
q
q
q
q
q p
p
p
p
p
q
q
q
q
q
q
q
q
−
−




−
−


=
∗

−
−




	
•    
(
)
4
3
2
1
3
4
1
2
1
2
3
4
2
1
4
3
1
2
3
4
q
q
q
q
q
q
q
q
pq
p
p
p
p
q
q
q
q
q
q
q
q
−
−




−
−


=
∗

−
−




Vector Products
    •    uv = (−u ⋅ v)O + u × v
    •    |u| = 1 ⇒ u 2 = −O
    •    u ⊥ v ⇒ u v = u × v
    •    
(
)
(
)
2
vu
uv
u v O
−
+
⋅
=
	
	
    •    
2
uv
vu
u
v
−
×
=
	
.	
Exponentiation
    •    
2
3
2!
3!
q
q
q
e
O
q
=
+
+
+
+
    •    eqN = cos(q)O + sin(q)N
Conjugation
    •	
q = q4O + q1i + q2 j + q3k ⇒ q* = q4O − q1i − q2 j − q3k
    •	
q(u,q ) = cos(q )O + sin(q )u ⇒ q*(u,q ) = cos(q )O − sin(q )u = q(u,−q )
    •	
( pq)* = q*p*
Length	
    •	
2
2
2
2
2
1
2
3
4
| |
q
q
q
q
q
=
+
+
+
    •	
|q|2 = q q*
    •	
|p q| = |p||q|

Summary—Formulas From Quaternion Algebra  103
Spherical Linear Interpolation
	
(
)
( )
0
1
0
1
sin (1
)
sin
(
,
, )
sin( )
sin( )
t
t
slerp q
q t
q
q
φ
φ
φ
φ
−
=
+
, where f is the angle between q0 and q1.
Rotation—around the line through the origin O parallel to the unit direction vector N through the 
angle q
    q(N,q /2) = cos(q /2)O + sin(q /2)N
    Sq(N,q / 2)(v) = q(N,q /2)v q*(N,q /2)
    Sq(N,q / 2)(P) = q(N,q /2)P q*(N,q /2)
Mirror image—in the plane through the point O perpendicular to the unit normal N
    TN (v) = N v N
    TN (P) = N(P − 2O)N
Perspective projection—from the canonical eye point E(N,q ) = O + (cot(q ) − csc(q ))N into the 
canonical plane S(N, q ) through the point O + cot(q )N perpendicular to 
the unit normal vector N
    q(N, − q / 2) = cos(q /2)O − sin(q /2)N
    Tq (N, −q / 2) (P − E) = q(N, −q /2)(P − E)q(N, −q /2)
Perspective projection—from an arbitrary eye point E into an arbitrary plane S perpendicular to the 
unit normal vector N at a distance d = csc(q )along N from the eye point E, 
translated by E(N,q) − E into the canonical plane S(N,q)
    q(N, −q /2) = cos(q /2)O −sin(q /2)N
    Tq (N, − q / 2) (P − E) = q(N, − q /2)(P − E)q(N, − q /2)
Conversion between unit quaternions q(N,q /2) = (q1,q2,q3,q4) and 4 × 4 rotation matrices
  Rot(N,q) = (Ri, j)
2
2
2
2
1 2
3 4
1 3
2 4
4
1
2
3
2
2
2
2
1 2
3 4
2 3
1 4
4
1
2
3
2
2
2
2
1 3
2 4
2 3
1 4
4
1
2
3
2
2
2
2
0
2
2
2
2
0
(
, )
2
2
2
2
0
0
0
0
1
q
q
q
q
q q
q q
q q
q q
q q
q q
q
q
q
q
q q
q q
Rot N
q q
q q
q q
q q
q
q
q
q
θ


+
−
−
+
−




−
−
+
−
+
= 

+
−
−
−
+






2
1
2
3
1
3
2
1
2
1
2
3
2
3
1
2
1
3
2
2
3
1
(
, )
cos( )
(1
cos( ))
(1
cos( ))
sin( )
(1
cos( ))
sin( )
0
(1
cos( ))
sin( )
cos( )
(1
cos( ))
(1
cos( ))
sin( )
0
(1
cos( ))
sin( )
(1
cos( ))
sin( )
cos( )
(1
c
Rot N
N
N N
N
N N
N
N N
N
N
N N
N
N N
N
N N
N
θ
θ
θ
θ
θ
θ
θ
θ
θ
θ
θ
θ
θ
θ
θ
θ
θ
θ
=
+
−
−
+
−
−
−
−
+
−
−
+
−
+
−
−
+
−
2
3
os( ))
0
0
0
0
1
N
θ














sin
sin

104 
Rethinking Quaternions: Theory and Computation
1,1
2,2
3,3
2,3
3,2
3,1
1,3
1,2
2,1
1,1
2,2
3,3
1
)
(
)
(
)
(
, )
2
2
1
R
R
R
R
R
i
R
R
j
R
R
k
q N
O
R
R
R
θ
+
+
+
−
+
−
+
−
=
+
+
+
+
(
 q ≠ π.
	
	
1,1
2,2
3,3
1,2
2,1
1,3
3,1
3,2
2,3
1,1
2,2
3,3
1
(
)
(
)
(
)
(
, )
2
2
1
R
R
R
R
R
j
R
R
k
R
R
O
q N
i
R
R
R
θ
−
−
+
+
+
+
+
−
=
+
−
−
+
 q ≈ π
1,1
2,2
3,3
1,2
2,1
2,3
3,2
3,1
1,3
1,1
2,2
3,3
1
(
)
(
)
(
)
(
, )
2
2
1
R
R
R
R
R
i
R
R
k
R
R
O
q N
j
R
R
R
θ
−
+
−
+
+
+
+
+
−
=
+
−
+
−
+
 q ≈ π
1,1
2,2
3,3
1,3
3,1
2,3
3,2
1,2
2,1
1,1
2,2
3,3
1
(
)
(
)
(
)
(
, )
2
2
1
R
R
R
R
R
i
R
R
j
R
R
O
q N
k
R
R
R
θ
−
−
+
+
+
+
+
+
−
=
+
−
−
+
+
 q ≈ π
Conversion between unit vectors N = (N1,N2,N3,0) and 4 × 4 mirror image matrices
Mir(N ) = (Mi, j)
2
1
2
1
3
1
2
1
2
2
3
2
2
1
3
2
3
3
1
2
2
2
0
2
1
2
2
0
(
)
2
2
1
2
0
0
0
0
1
N
N N
N N
N N
N
N N
Mir N
N N
N N
N


−
−
−




−
−
−
= 

−
−
−




−


1
2
kk
k
M
N
−
=
, k = 1,2,3.
Conversion between unit quaternions q(N, − q /2) = (q1,q2,q3,q4) and 4 × 4 perspective projection 
matrices Persp(N, q) = (Pi , j)
2
1 2
1 3
1 4
1
2
1 2
2 3
2 4
2
2
1 3
2 3
3 4
3
2
1 4
2 4
3 4
4
1
2
2
2
2
2
1
2
2
2
(
, )
2
2
1
2
2
2
2
2
2
1
q
q q
q q
q q
q q
q
q q
q q
Persp N
q q
q q
q
q q
q q
q q
q q
q
θ


−
−
−
−




−
−
−
−
= 

−
−
−
−






−


2
1
2
1
3
1
1
2
1
2
2
3
2
2
2
1
3
2
3
3
3
1
2
3
1
(cos( )
1)
(cos( )
1)
(cos( )
1)
sin( )
(cos( )
1)
1
(cos( )
1)
(cos( )
1)
sin( )
(
, )
(cos( )
1)
(cos( )
1)
1
(cos( )
1)
sin( )
sin( )
sin( )
sin( )
cos( )
N
N N
N N
N
N N
N
N N
N
Persp N
N N
N N
N
N
N
N
N
θ
θ
θ
θ
θ
θ
θ
θ
θ
θ
θ
θ
θ
θ
θ
θ
θ
+
−
−
−

−
+
−
−
=
−
−
+
−
−
−
−












Summary—Formulas From Quaternion Algebra  105
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
2
2
2
2
1
2
1
3
1
1
2
2
2
2
1
2
2
3
2
2
2
2
2
2
1
3
2
3
3
3
2
1
2
3
(
, )
1
1
1/
1
1
1/
1
1
1/
1
/
1
1/
1
1
1
1/
1
1
1/
1
/
1
1/
1
1
1/
1
1
1
1/
1
/
/
/
/
1
1/
Persp N d
d
N
d
N N
d
N N
N
d
d
N N
d
N
d
N N
N
d
d
N N
d
N N
d
N
N
d
N
d
N
d
N
d
d
=


+ ±
−
−
±
−
−
±
−
−






±
−
−
+ ±
−
−
±
−
−




±
−
−
±
−
−
+ ±
−
−






−
−
−
±
−


d = csc(q ) = distance from eye to plane of projection
(
)
θ =
+ ±
−−
2
(
, )
1
E N
O
d
d N = eye point
S(N,q ) = plane of projection through the point 
2
1
Q
O
d
N
=
±
−
 perpendicular to the 
unit normal vector N
44
4
1
2
P
q
+
=
 and 
4
4
4
4
k
k
k
P
P
q
q
−
=
, k = 1,2,3.
•  •  •  •
•
•
•


107
Rethinking Quaternions and  
Clif ford Algebras
p a r t  I I I


109
Clifford algebras are introduced into mathematics to fill a gap in the algebra of vector spaces. Com-
plex numbers allow us to multiply vectors in the plane, and quaternions allow us to multiply vectors 
in four dimensions. These products facilitate the study of transformations such as rotations in dimen-
sions 2, 3, and 4. Unfortunately, there are no such rules for multiplication of vectors in higher dimen-
sions—that is, there are no products in dimensions greater than four that are associative, distribute  
through addition, and most crucially, where every nonzero vector has an inverse for multiplication so 
that we can solve linear equations (see Section 4, especially Exercises 4.9–4.12). This void makes the 
study of transformations in higher dimensions more cumbersome than in lower dimensions; typically 
we need to resort to matrix methods rather than rely on direct manipulation of vector products.
Clifford algebra associates to each n-dimensional vector space an algebra of dimension 2n—
that is, a vector space of dimension 2n where not only the sum, but also the product of every two 
elements in this algebra is defined. As usual multiplication is associative and distributes through  
addition, but not all nonzero elements in this algebra have inverses for multiplication. Nevertheless, 
Clifford algebras seem to be the natural generalizations of complex numbers and quaternions to 
higher dimensional vector spaces. Like complex numbers and quaternions, Clifford algebras facili-
tate the study of transformations such as rotations in higher dimensions. Since complex numbers 
and quaternions play the same role in low dimensions, we would expect there to be a close connec-
tion in low dimensions between Clifford algebras and both complex numbers and quaternions. The 
purpose of Part III is to investigate these connections as well as to show how our previous insights 
regarding quaternions can be applied in Clifford algebras.
The ambient space of contemporary computer graphics is the 4-dimensional vector space of 
mass-points. A homogeneous model for Clifford algebra that deals directly with mass-points has 
indeed been constructed, but this model is actually a Clifford algebra for R5 [Dorst et al., 2007]. 
Thus this algebra is a vector space with 25 = 32 dimensions. This 32-dimensional algebra has many 
convenient properties. For example, not only lines and planes but also circles and spheres are included 
as primitive objects in this homogeneous model; moreover all conformal transformations on R3 in-
cluding inversions in the sphere are represented in this algebra. Nevertheless, the dimension of this 
algebra seems excessively high and the algebra itself unnecessarily complicated. One goal of Part III 
c h a p t e r  1 1
Goals and Motivation

110 
Rethinking Quaternions: Theory and Computation
is to develop a simpler, lower dimensional Clifford algebra for investigating the 4-dimensional space 
of mass-points.
We shall construct a homogeneous model for computer graphics using the 8-dimensional 
Clifford algebra for R3. To incorporate points as well as vectors within this model, we employ the 
odd dimensional elements of this graded 8-dimensional algebra to represent mass-points by ex-
ploiting the pseudoscalars to represent mass. The even dimensional elements of this Clifford algebra 
are isomorphic to the quaternions, which operate on the odd dimensional elements by sandwiching. 
As with quaternions, one of the major benefits of this model is that along with the standard sand-
wiching formulas in Clifford algebra for rotations and reflections, this new paradigm also allows us 
to use sandwiching to compute perspective projections.
Our goal is to make four principal contributions to the theory of Clifford algebras:
1.  To show how to apply the standard Clifford algebra for R3 to represent mass-points by 
taking advantage of the pseudoscalars to represent mass;
2.  To present better ways to visualize the effect of the sandwiching operation on points and 
vectors in this Clifford algebra based on insights from our study of quaternions;
3.  To develop simple, intuitive proofs of the sandwiching formulas for rotations and reflec-
tions in this Clifford algebra based on insights from our study of quaternions;
4.  To show that perspective projections can also be incorporated into the standard frame-
work of transformations represented in this Clifford algebra.
Part III is organized in the following fashion. We begin in Chapter 12 with a brief descrip-
tion of the general Clifford algebra for n-dimensional vector spaces, and we observe that for n ≥ 2 
each of these Clifford algebras contain the quaternions as a subalgebra. The Clifford algebra for 
R2  is actually isomorphic to the quaternions, so in Chapter 13 we investigate the Clifford algebra 
for R2 and we show how this Clifford algebra is used to study conformal maps on R2. In Chapter 
14 we provide a brief review for the uninitiated of the standard objects—scalars, vectors, bivectors, 
and pseudoscalars—along with some of the basic formulas—Clifford product, wedge product, dual-
ity—for the Clifford algebra of R3. Readers already familiar with Clifford algebra can skip this tuto-
rial. In Chapter 15 we introduce the operators and operands—mass-points and quaternions—by 
exploiting the pseudoscalars to represent mass. Chapter 16 is devoted to studying the action of the 
unit quaternions on the space of mass-points, and Chapter 17 shows how to apply the sandwiching 
operators to compute rotation, mirror image, and perspective projection on points as well as on vec-
tors. Many of these results will already be known to readers familiar with Clifford algebra, but the 
material on perspective projection in Section 17.3 appears to be completely new. We summarize our 
principal insights and results in Chapter 18, and we close in Chapter 19 with some simple, alterna-
tive approaches to a homogeneous model for computer graphics.
•  •  •  •

111
Clifford algebra associates to each n-dimensional vector space Rn a geometric algebra of dimension 
2n—that is, a vector space of dimension 2n where not only the sum, but also the product of every  
two elements in the algebra is defined. Let e1,...,en be an orthonormal basis for Rn. Then the 2n 
canonical generators (basis vectors) of the Clifford algebra for Rn are denoted by the products:
	
1
1
e
e
e
e
k vectors
1
1 2
1
1
1
,
,
,
,
,
-
n
n
n
k
n k
n
n
scalars
e
e
vectors
e e
e
e
bivectors
e
e
pseudoscalars
−
−+
…
…
…
…,
…
…




	
Notice that there are n
k



 products with exactly k factors, so there are a total of 2n products.
The formal algebra of this 2n-dimensional vector space is defined by the following rules:
  multiplication is associative;
  multiplication distributes through addition;
  1 is the identity for multiplication;
	
2
1
ke
= ± ;
(12.1)
 
j
i
i
j
e e
e e
= −
.    j  i
(12.2)
It follows from Equations (12.1) and (12.2) that every product of the basis vectors e1,. . .,en with 
more than n factors can be rewritten, up to sign, as one of the 2n canonical generators.
The minus signs on the right-hand side of Equation (12.2) are there to capture orientation: 
the orientation of the vectors ej ,ei is opposite to the orientation of the vectors ei,ej. In contrast, the 
signs in Equation (12.1) may depend on k, and different geometries may be investigated with dif-
ferent choices of sign. We shall see in Chapters 13 and 14 that for our purposes it is convenient to 
choose these sign to be negative for all k so that
i.
ii.
iii.
iv.
v.
Clif ford Algebras and Quaternions
c h a p t e r  1 2

112 
Rethinking Quaternions: Theory and Computation
	
2
1
ke
= −.	
(12.3)
The simplest Clifford algebra is the Clifford algebra associated with the one-dimensional 
vector space R. This 2-dimensional vector space is spanned by the two element 1,e1. Since 2
1
1
e
= −, 
this Clifford algebra for R is isomorphic to the complex numbers C.
The Clifford algebra for R2 is the 4-dimensional algebra generated by the canonical basis 
1
2
1 2
1,
,
,
e e
e e . If we let
	
1
2
1 2
,   
,   
i
e
j
e
k
e e
=
=
=
	
(12.4)
then by Equations (12.2) and (12.3) it is easy to verify that
	
2
2
2
1
i
j
k
=
=
= −	
(12.5)
	
,   
,   
i j
k
j k
i
ki
j
=
=
= 	
(12.6)
which is the standard algebra of quaternion multiplication. Thus the Clifford algebra for R2 is 
isomorphic to the algebra of quaternions. Nevertheless, as we shall see in Chapter 13, this Clifford 
algebra is typically used not to model rotations in R4, but rather to model rotations in R2.
The Clifford algebra for R3 contains the quaternions as a subalgebra. This 8-dimensional 
algebra is generated by the canonical basis
1
2
3
1 2
2 3
3 1
1 2 3
1,
,
,
,
,
,
,
e
e
e
e e
e e
e e
e e e .
If we let
	
1 2
2 3
3 1
,   
,   
i
e e
j
e e
k
e e
=
=
=
	
(12.7)
then using Equations (12.2) and (12.3) it is again easy to verify that
	
i2 = j2 = k2 = −1	
(12.8)
	
i j = k, j k = i, k i = j	
In fact, by the same construction the Clifford algebra for Rn for every n ≥ 3 contains the quaternions 
as a subalgebra.
Typically the Clifford algebra for Rn is used to study transformations on Rn. Thus transfor-
mations on the plane are typically modeled by the Clifford algebra for R2, and transformations on 
R3 are typically modeled by the Clifford algebra for R3. We are going to investigate each of these 
Clifford algebras in turn to appreciate more precisely the role of quaternions in modeling transfor-
mations using Clifford algebra.
•  •  •  •

113
The Clifford algebra for the plane R2 is the 4-dimensional algebra generated by the canonical basis  
1
2
1 2
1,
,
,
e e
e e . Recall that this algebra is isomorphic to the quaternions, since by Equations (12.2) 
and (12.3)
	
2
2
2
1 2
1
2
(
)
1
e
e
e e
=
=
= −	
	
1 2
1
2
(
)
e e
e
e
=
  and  2
1 2
1
(
)
e
e e
e
=
.	
Let
	
I = e1 e2;	
(13.1)
then
	
I 2 = -1.	
(13.2)
Thus the subalgebra generated by the two elements 1, I is isomorphic to the complex numbers. 
We shall apply this subalgebra to model transformations on the plane of vectors generated by the 
canonical basis vectors e1, e2.
We use the vectors spanned by e1 , e2 to model vectors in the plane, and we think of e1 , e2 as 
representing unit vectors along the x and y-axes. We use the elements spanned by 1, I, which we 
think of as complex numbers, to model transformations on these vectors in the plane. For example, 
by Equations (12.2) and (12.3),
	
I e1 = e2	
	
I e2 = -e1.	
(13.3)
Thus multiplying the basis vectors on the left by I rotates the basis vectors by p /2. Similarly,
	
e1 I = −e2	
	
e2 I = e1.	
(13.4)
c h a p t e r  1 3
Clifford Algebra for the Plane

114 
Rethinking Quaternions: Theory and Computation
Thus multiplying the basis vectors on the right by I rotates the basis vectors by -p / 2 More generally 
we have the following results.
Theorem 13.1: (The action of complex numbers on vectors in the plane)
Let
	
u (q ) = cos(q )e1 + sin(q )e2	
denote a unit vector in the plane, and let
	
z(f) = cos(f) + sin(f)I	
be a unit complex number. Then
	
i. z(f)u (q ) = u (q + f)	
	
ii. u (q )z (f) = u (q − f)	
Proof: By Equation (13.3)
	
z (f)u (q ) = (cos(f) + sin(f) I )(cos(q )e1 + sin(q )e2)	
	
= (cos(f)cos(q ) − sin(f)sin(q ))e1 + (cos(f)sin(q )+sin(f)cos(q ))e2	
	
= cos(q + f)e1 + sin(q + f )e2 = u (q + f)	
Similarly, by Equation (13.4)
	
 u (q )z(f) = (cos(q )e1 + sin(q )e2)(cos(f) + sin(f)I )	
	
= (cos(q )cos(f) + sin(q )sin(f))e1 + (sin(q )cos(f) − cos(q )sin(f ))e2
	
= cos(q − f)e1 + sin(q − f)e2 = u (q − f).	
♦
Corollary 13.2: (The action of complex numbers on vectors in the plane)
Multiplying a vector u by the complex number  z(f)=cos(f) + sin(f) I  on the left rotates the vector counter-
clockwise by the angle f . Similarly, multiplying a vector u by the complex number  z(f)=cos(f) + sin(f) I  
on the right rotates the vector clockwise by the angle f .
These rotations in opposite directions depending on whether we perform multiplication on  
the left or the right should resonate from our study of quaternion multiplication, since these for­

Clifford Algebra for the Plane  115
mulas are precisely the results we found in Chap­ter 5 for the geometry of quaternion multiplication.  
Moreover we also have the following familiar result for composing transformations represented by 
complex numbers.
Proposition 13.3 (The product of complex numbers)
Let
	
z(f 1) = cos(f 1) + sin(f 1) I	
	
z(f 2) = cos(f 2) + sin(f 2) I	
be a pair of complex number. Then
	
i.  z(f 1) z(f 2) = z(f 1 + f 2).	
	
ii.  z(f 1) z(f 2) = z(f 2 ) z(f 1).	
Proof: By Equation (13.2)
i.  z(f 1) z(f 2) = (cos(f 1) + sin(f 1 ) I )(cos(f 2) + sin(f 2)I )	
	
= (cos(f 1)cos(f 2)− sin(f 1 )sin(f 2)) + (cos(f 1)sin(f 2) + sin(f 1 )cos(f 2))I
	
= cos(f 1 + f 2) + sin(f 1 + f 2)I  = z(f 1 + f 2).	
ii.  Follows immediately from part i.	 ♦
Corollary 13.4: (Composing transformations in the plane)
The product of two complex numbers represents the composite of the transformations represented by each of 
these individual complex numbers.
By Corollaries 13.3 and 13.4 multiplication with complex numbers rotates vectors in the 
real plane R2 in opposite directions, depending on whether the multiplication is on the left or the 
right, whereas multiplication by complex numbers rotates vectors in the complex plane C in same 
directions, independent of whether the multiplication is on the left or the right. In Chapter 5 we 
harnessed these two distinct quaternion planes (real and complex) to represent vectors in R4, and 
we took advantage of the different effects of multiplication by complex numbers in these two mutu-
ally orthogonal planes (double isoclinic rotations—see Figure 5.3) to invoke sandwiching to model 
rotation, reflection, and perspective projection in R3. In contrast, the Clifford algebra approach is to 
use the Clifford algebra for R2 (the quaternions) to study transformations on R2.

116 
Rethinking Quaternions: Theory and Computation
Notice that both rotation and scaling can be represented by multiplying vectors in R2 by 
complex numbers, since
	
(sz(f))u = z(f)(su).	
Thus any conformal transformation of vectors in the plane can be represented in this way by multi-
plication with a single complex number.
The main innovation of the Clifford algebra approach to transformations of vectors in the 
plane is to separate the operators and the operands—that is, to separate the vectors in the real plane 
from the operators in the complex plane. In contrast, when we use complex numbers to represent 
both vectors in the plane and transformations on these vectors, the complex numbers play two 
roles: as operators and as operands. These dual roles confound operators and operands, and often it 
is difficult to tell if a particular complex number represents an operator or an operand. In Clifford  
algebra there is no such ambiguity, but the price we pay for this conceptual clarity is to adopt a  
4-dimensional algebra (the quaternions) to replace a 2-dimensional algebra (the complex numbers).
Exercises:
13.1. Prove that in the Clifford algebra for R2
	
ef I = cos (f)+ sin(f)I .	
13.2. Let e1,e2 and e′1,e′2 be two orthonormal bases for R2, and let  I = e1e2 and I′ = e′1e′2.	
a.  Show that I ′ = I.
b.  Conclude from part a that the complex number I is independent of the choice of the or-
thonormal basis for R2.
•  •  •  •

117
We present here a brief review of the basic algebra underlying the standard model for the Clifford 
algebra of a real 3-dimensional vector space.
14.1	
SCALARS, VECTORS, BIVECTORS, AND PSEUDOSCALARS
The Clifford algebra associated with the 3-dimensional vector space R3 is an 8-dimensional vector 
space. Let  e1,e2,e3 be an orthonormal basis for R3. Then the eight canonical generators for the Clif-
ford algebra of R3 are denoted by the products:
	
1, e1, e2, e3, e1e2, e2e3, e3e1, e1e2e3.	
The formal algebra of this 8-dimensional vector space is defined, as usual, by the following rules:
i.  multiplication is associative;
ii.	 multiplication distributes through addition;
iii.	 1 is the identity for multiplication;
iv.	 e 2
1 = e 2
2 = e 2
3 = −1;
(14.1)
v.	 e2e1 = −e1e2, e3e2 = −e2e3, e1e3 = − e3e1.
(14.2)
It follows from Equations (14.1) and (14.2) that every product of the basis vectors e1, e2, e3 with four 
of more elements can be rewritten, up to sign, as one of the eight generators.
The sign on the right-hand side of Equation (14.1) is somewhat arbitrary. The minus sign is 
chosen here for convenience for three reasons:
i.  so that (e1e2e3)2 = 1 rather than −1—see Section 14.3, Equation (14.17)
ii.	 so that the formula for the product of two vectors more closely mimics that standard 
formula for quaternion multiplication—see Section 14.2, Equation (14.8)
iii.	 so that the formulas for duality are expressed by multiplication with −e1e2e3—see Section 
14.3.
c h a p t e r  1 4
The Standard Model of the Clifford  
Algebra for Three Dimensions

118 
Rethinking Quaternions: Theory and Computation
Multiples of the element 1 are called scalars; multiples of the generator e1 e2 e3 are called 
pseudoscalars. Linear combinations of e1, e2, e3 are called vectors; linear combinations of e1e2, e2e3, e3e1 
are called bivectors. Thus the scalars and pseudoscalars each form 1-dimensional subspaces, and the 
vectors and bivectors each form 3-dimensional subspaces of the Clifford algebra for R3.
This Clifford algebra is also a graded algebra. The dimension of a scalar is 0; the dimension 
of a vector is 1; the dimension of a bivector is 2; and the dimension of a pseudoscalar is 3. Geo-
metrically, we typically think of a vector as representing a length in a particular direction. Similarly, 
we will see that we shall think of a bivector as representing an area in a specific plane. The pseudo-
scalars are commonly used to model volume elements, but contrary to common usage, we are going  
to use the pseudoscalars to represent mass at a point rather than volume in three-space (see Sec-
tion 15.1).
14.2	
WEDGE PRODUCT AND CROSS PRODUCT
Consider the Clifford product of two arbitrary vectors: u = u1e1 + u2e2 + u3e3 and v = v1e1 + v2e2 + 
v3e3. Since multiplication distributes through addition, it follows from Equations (14.1) and (14.2) 
that
	
uv = (u1e1 + u2e2 + u3e3 ) (v1e1+ v2e2 + v3e3) = − (u1v1 + u2v2 + u3v3)	
 
	
+ (u1v2 − u2v1)e1e2 + (u2v3 − u3v2)e2e3 + (u3v1 − u1v2) e3e1.	
(14.3)
To shorten this expression for the Clifford product uv, we define the wedge product u ∧ v of 
two vectors u, v to be the bivector given by setting
	
u ∧ v = (u1v2 − u2v1) e1e2 + (u2v3 − u3v2) e2e3 + (u3v1 − u1v3) e3e1.	
(14.4)
By Equations (14.2)–(14.4), the wedge product is anticommutative and distributes through 
addition—that is
	
v ∧ u = −u ∧ v	
(14.5)
	
u ∧ (v + w) = u ∧ v + u ∧ w.	
(14.6)
It follows immediately from Equation (14.5) that for any vector v,
	
v ∧ v = 0.	
(14.7)
Using the wedge product and applying Equations (14.3) and (14.4), we now have a simple 
expression for the Clifford product of two vectors u, v:

The Standard Model of the Clifford Algebra for Three Dimensions 
119
	
uv = −u ⋅ v + u ∧ v.	
(14.8)
Thus the Clifford product uv of two vectors u, v is the sum of a scalar (−u ⋅ v) and a bivector (u ∧ v). 
Notice the similarity to the quaternion product of two vectors in Chapter 4 (Equation 4.6). Notice 
too that since the basis vectors e1, e2, e3 are orthogonal
	
e1e2 = e1 ∧ e2, e2e3 = e2 ∧ e3, e3e1 = e3 ∧ e1.	
(14.9)
In general, the Clifford product uv is neither commutative nor anticommutative, since
	
v ⋅ u = u ⋅ v	
but
	
v ∧ u = −u ∧ v.	
The wedge product of two vectors is closely related to their cross product. Recall that e1, e2, e3 
is an orthonormal basis for R3, so
	
u × v = (u1v2 − u2v1)e1 × e2 + (u2v3 − u3v2)e2 × e3 + (u3v1 − u1v3)e3 × e1.	
	
= (u1v2 − u2v1)e3 + (u2v3 − u3v2)e1 + (u3v1 − u1v3)e2	
(14.10)
Thus the wedge product and the cross product have the same scalar components, but the wedge 
product is a bivector whereas the cross product is a vector.
14.3	
DUALITY
We can use the pseudoscalar
	
O = −e1e2e3 	
(14.11)
to convert back and forth between the wedge product and the cross product. Indeed observe that  
by Equations (14.1) and (14.2)
	 Oe1 = e2e3 = e1O,		
Oe2 = e3e1 = e2O,		
Oe3 = e1e2 = e3O
(14.12)
	 Oe1e2 = e3 = e1e2O,	
 Oe2e3 = e1 = e2e3O, 	
Oe3e1 = e2 = e3e1O,
(14.13)
Therefore by Equations (14.4), (14.10), (14.12), and (14.13):
	
O(u ∧ v) = u × v = (u ∧ v)O	
(14.14)
	
O(u × v) = u ∧ v = (u × v)O.	
(14.15)

120 
Rethinking Quaternions: Theory and Computation
The pseudoscalar O shares many properties with the scalar 1. For example, it follows easily 
from Equations (14.12) and (14.13) that O commutes with every element of the Clifford alge-
bra—that is, for any element p of the Clifford algebra,
	
O p = p O.	
(14.16)
Moreover by Equations (14.1) and (14.2)
	
O 2 = 1.	
(14.17)
By Equations (14.12) and (14.13), multiplication by O is a vector space isomorphism between  
the even dimensional elements of the Clifford algebra and the odd dimensional elements of the 
Clifford algebra. For any element p of the Clifford algebra, we call O p = p O the dual of p. Thus 
vectors and bivectors are dual—in particular, by Equations (14.14) and (14.15) cross products and 
wedge products are dual—and scalars and pseudoscalars are also dual.
Exercises:
14.1. Let u be a nonzero vector in R3.
a.  Show that
	
1
2
| |
u
u
u
−
−
=
.	
b.  Conclude that every nonzero vector in R3 has an inverse in the Clifford algebra for R3.
14.2. Let e1, e2, e3 be an orthonormal basis for R3, and let O = −e1e2e3.
a.  Show that
	
(1+O)(1−O) = 0.	
b.  Conclude from part a that 1+O does not have an inverse in the Clifford algebra for R3.
c.  Conclude from part b that the Clifford algebra for R3 is not a division algebra.
14.3. Consider three vectors
	
u = u1e1 + u2e2 + u3e3, v = v1e1 + v2e2 + v3e3, and w = w1e1 + w2e2 + w3e3.	
a.  Show that
	
1 2 3
1
2
3
1
2
3
1
2
3
det
 
uvw
e e e
u
u
u
v
v
v
w
w
w
=












.	

The Standard Model of the Clifford Algebra for Three Dimensions  121
b.  Conclude from part a that O = −e1e2e3 is independent of the choice of the orthonormal 
basis e1, e2, e3.
14.4	
BIVECTORS
Bivectors are to planes as vectors are to lines. A vector v represents a length |v| in a fixed direction. 
A bivector u ∧ v represents an area |u ∧ v| = area (u,v) within a fixed plane, the plane determined by 
the vectors u, v. The following proposition asserts that every bivector can be factored as the wedge 
product of two vectors. Therefore every bivector represents an area within a fixed plane.
Proposition 14.1: Let b be a bivector. Then there are vectors u, v such that b = u ∧ v. Moreover we can 
choose u, v so that u is perpendicular to v.
Proof: Consider an arbitrary bivector
	
b = b1 e2 e3 + b2 e3 e1 +  b3 e1 e2 = b1 e2 ∧ e3 + b2 e3 ∧ e1 + b3 e1 ∧ e2.	
Since the wedge product is anticommutative and distributes through addition,
	
3
1 2
2 1
3
3 1
2
1 2
2 1
3
1 2
2 1
2
2
(
)
(
)
(
)
b
b
b e
b e
e
b e
e
b e
b e
e
b e
b e
e
b
=
−
∧
+
∧
=
−
∧
−
−
∧
.	
Thus
	
2 3
3 2
1 2
2 1
2
(
)
(
)
b e
b e
b
b e
b e
b
−
=
−
∧
,
	
so there are indeed vectors u, v such that b = u ∧ v. Moreover, since v ∧ v = 0,
	
(
)
u v v
b
u
v
v v
⋅


=
−
∧


⋅


	
and
	
(
)
(
)
0
u v v
u v v
u
v
u
v
v v
v v
⋅
⋅




−
⋅
=
⇒
−
⊥




⋅
⋅




. 
♦
	
Corollary 14.2: The vector bO is orthogonal to the plane determined by the bivector b.
Proof: By Proposition 14.1, there are vectors u, v such that b = u ∧ v. Therefore 
	
bO = (u ∧ v)O = u × v,	
so b O = u × v is orthogonal to the plane of u, v, which is the plane determined by b.	 ♦

122 
Rethinking Quaternions: Theory and Computation
By Proposition 14.1 for any bivector b, there are vectors u and v such that b = u ∧ v. We define 
that magnitude of the bivector b = u ∧ v by setting
	
|b| = |u ∧ v | = area (u, v) = | u × v |.	
(14.18)
Notice that the magnitude of a bivector b is independent of the choice of the representatives u, v for 
the bivector b, since by Equations (14.10) and (14.15)
	
u1 ∧ v1 = u2 ∧ v2 ⇔ u1 × v1 = u2 × v2 ⇒ |u1 ∧ v1| = |u1 × v1| = |u2 × v2| = |u2 ∧ v2|.	
By Equation (14.8) for every vector v,
	
v 2 = −|v|2.	
Next we are now going show that the same result holds for bivectors: that is, for every bivector b, 
	
b 2 = −|b|2.	
We begin by using duality to show that bivectors multiply in a manner analogous to vectors.
Proposition 14.3: Let b1, b2 be bivectors. Then
	
b1 b2 = −(b1O) ⋅ (b2O) + (b1O) ∧ (b2O).	
Proof: Recall that by Equation (14.8) for all vectors u, v
	
uv = −u ⋅ v + u ∧ v.	
Therefore, since O 2 = 1 and O commutes with every element in the Clifford algebra,
	
b1 b2 = b1 b2O 2 = (b1O)(b2O) = −(b1O) ⋅ b2O) + (b1O) ∧(b2O).	
♦
Corollary 14.4: Let b be a bivector. Then b 2 =  −|b|2.
Proof: By Proposition 14.1, there are vectors u, v such that b = u ∧ v. Therefore by Proposition 14.3 
and Equations (14.14) and (14.18)
	
b 2 = −(bO)⋅(bO) = −|u × v|2 = −|b|2.	
♦
14.5	
QUATERNIONS
The algebra generated by the even dimensional basis elements 1, e1e2, e2e3, e3e1 of the Clifford alge-
bra for R3 is isomorphic to the algebra of quaternions. Indeed let

The Standard Model of the Clifford Algebra for Three Dimensions  123
	
i = e2e3, j = e3e1, k = e1e2.	
(14.19)
Then by Equations (14.1) and (14.2) it is easy to verify that
	
i 2 = j 2 = k 2 = −1	
(14.20)
	
i j = k, j k = i, k i = j	
(14.21)
which is the standard algebra of quaternion multiplication (see Chapter 4). We shall use the classical 
notation H to denote the quaternion algebra, represented here by the even dimensional elements of 
the Clifford algebra.
The quaternion subalgebra of the Clifford algebra is essentially identical to the algebra of 
quaternions presented in Chapter 4; the only difference is that for the quaternions in the Clifford 
algebra, vectors are replaced by bivectors. We present a brief summary of some of the highlights of 
this algebra below. The reader should note the obvious parallels to the discussion in Chapter 4.
Recall, for example, that conjugates play an important role in quaternion algebra. Consider 
a quaternion, q = mq + bq, where mq is a scalar and bq  is a bivector. In Clifford algebra, the conjugate 
of q, denoted by q*, is defined by
	
q* = mq − bq.	
(14.22)
By Corollary 14.4 and Equation (14.19)–(14.22)
	
qq* = m 2q − b 2q = m 2q + |bq|2;	
Define |q|2 = qq*. Then
	
1
2
| |
q
q
q
∗
−=
	
Every quaternion can be written as
	
q = mq + bq = mq + nq b′q,	
where nq is a scalar, b′q is a unit bivector, and nq b′q = bq. If q is a unit quaternion, then
	
m2q + n2q = |q|2 = 1.	
Therefore there is an angle q such that
	
mq = cos(q )	
	
nq = sin(q ).	

124 
Rethinking Quaternions: Theory and Computation
Hence every unit quaternion can be expressed as
	
q (b,q ) = cos(q ) + sin(q )b,	
(14.23)
where cos(q ) = mq is a scalar and b is a unit bivector. Thus for unit quaternions q (b,q ), the conju-
gate is given by
	
q*(b,q )= cos(q ) − sin(q )b = q(b, −q ).	
(14.24)
Finally, we have the following classical result concerning the conjugate of the product of two 
quaternions. This result follows from Proposition 4.4 and the isomorphism of H to the standard 
quaternions. But for completeness, we give the analogous Clifford algebra proof here as well.
Proposition 14.5: ( pq)*= q*p*
Proof: Let p = mp + bp and q = mq + bq. Recall that by Proposition 14.3,
	
bpbq = −(bpO) ⋅ (bqO) + (bpO) ∧ (bqO).	
Therefore
	
pq = (mp + bp)(mq + bq) = mp mq + mp bq +mq bp + bp bq	
	
= (mp mq − bpO ⋅ bqO) + (mp bq + mq bp + bpO ∧ bqO)	
and
	
q*p* = (mq − bq)(mp − bp) = mq mp − mq bp −mp bq + bq bp	
	
= (mq mp − bqO ⋅ bpO) − (mp bq + mq bp − bqO ∧ bpO).	
Comparing the right-hand sides of these two equations and recalling that the wedge product is 
anticommutative, we conclude that
	
( pq)* = q*p*.	
♦
Exercise:
14.4. Let p, q be quaternions. Show that
	
| pq | = | p | | q |.	
•  •  •  •

125
The Clifford algebra of R3 is a real 8-dimensional vector space. This vector space splits conveniently 
into two 4-dimensional subspaces: one consisting of the even dimensional elements, the quaterni-
ons H, and one consisting of the odd dimensional elements, the duals HO of the quaternions. Let
Cl (R3) = the Clifford algebra of R3 
Cl (R3)even = the even dimensional elements of Cl (R3) ≅ H 
Cl (R3)odd = the odd dimensional element of Cl (R3) ≅ HO.
Then we have the following vector space isomorphisms:	
	
Cl (R3) ≅ Cl even (R3) ⊕ CLodd (R3) ≅ H ⊕ HO 
	
	
R8 	
≅ 	
R4 ⊕ R4	
≅ 	
R4 ⊕ R4
Next we shall investigate in turn each of the two components in this direct sum.
15.1	
ODD ORDER: MASS-POINTS
The ambient geometric space underlying contemporary computer graphics is the 4-dimensional vec-
tor space of mass-points [Goldman, 2002]: three of the dimensions are spatial; the fourth dimension 
is due to the mass (see Section 3.1). Let MP denote the 4-dimensional space of mass-points for points 
in R3. We are now going to represent this space of mass-points MP as a 4-dimensional subspace of 
the 8-dimensional Clifford algebra Cl (R3) associated with R3. Since the fourth dimension is mass-
like rather than spatial, we should expect that our representation for the fourth mass-like dimension 
would be qualitatively somewhat different from our representation for the three spatial dimensions.
In the Clifford algebra associated to R3, every vector v can be expressed uniquely in terms of 
our fixed orthonormal basis:
	
v = v1e1 + v2e2 + v3e3.	
But in the standard geometric interpretation of the Clifford algebra for R3, there is no way to repre-
sent points, let alone mass-points. Therefore we shall now adopt a nonstandard interpretation.
Operands and Operators—Mass-Points 
and Quaternions
c h a p t e r  1 5
≅
≅
≅

126 
Rethinking Quaternions: Theory and Computation
We need to represent one more dimension, the dimension corresponding to mass. For this 
purpose, we will adopt the pseudoscalars. We shall represent the mass m by scalar multiples of the 
pseudoscalar
	
O = −e1e2e3,	
and we shall identify the pseudoscalar O with the point (or more precisely with the vector in four 
dimensions representing the point) at the origin of a 3-dimensional coordinate system. Note that 
with this interpretation O represents a point, not a vector in three dimensions, since the origin of 
the coordinate system is not the same as the zero vector (see Figure 3.3).
Classically the pseudoscalar e1e2e3 is used to represent an element of unit volume. Here we 
are going to use −e1e2e3 to represent a point. Letting the pseudoscalar −e1e2e3 represent a point is 
essentially equivalent to invoking a vector space isomorphism
	
T : Cl (R3)odd → MP,	
where
	
T (e1) = e1, T (e2) = e2, T (e3) = e3, T (−e1e2e3) = O.	
The minus sign is inserted in -e1e2e3 to make the signs turn out right when we multiply the pseudo-
scalar O by other elements of the Clifford algebra. For example, by Equations (14.14) and (14.15):
	
O (u ∧ v) = u × v = (u ∧ v) O	
	
O (u × v) = u ∧ v = (u × v) O.	
We shall often abuse notation and use the symbol O to represent both the pseudoscalar -e1e2e3 in 
the Clifford algebra Cl (R3) and the origin the coordinate system in MP. The correct interpretation 
will be clear from the context.
Now every mass-point p can be represented uniquely in this Clifford algebra as the sum of a 
vector v and the fixed point O times a mass m—that is,
	
p = m O + v.	
(see again Figure 3.3). This formula means that p has mass m and is located at the point p / m = 
O + v / m. As usual, we shall write
	
m O + v ≡ O + v / m	
to indicate that the mass-point m O + v is located at the point O + v / m.
To summarize: we shall use the odd dimensional elements of the Clifford algebra to represent 
mass-points. Elements of dimension one are vectors; elements of dimension three have mass. The 
sum of an element of dimension 1 and an element of dimension 3 is a mass-point.

Operands and Operators—Mass-Points and Quaternions  127
An algebra is only an algebra. The formal rules of the Clifford algebra are fixed. But the geo-
metric interpretation we assign to elements of this algebra is completely up to us, constrained only 
by consistency and applicability.
15.2	
EVEN ORDER: QUATERNIONS
We have already observed in Section 14.5 that the even dimensional elements of the Clifford alge-
bra for R3 are isomorphic to the quaternion algebra H—that is,
	
Cl (R3)even @ H.	
Let p represent multiplication in the Clifford algebra Cl (R3). Then by Equations (14.1) and 
(14.2)
	
p : Cl (R)even ⊕ Cl (R3)odd → Cl (R3)odd	
or equivalently
	
p : H ⊕ MP → MP.	
Thus we can think of the even dimensional elements of the Clifford algebra—the quaternions—as 
acting by multiplication on the odd dimensional elements of the Clifford algebra—the mass-points. 
Notice that this device is the same approach that we took with the Clifford algebra for the plane, 
where the even dimensional elements—the complex numbers—operate on the odd dimensional 
elements—the vectors in the plane. Thus under Clifford multiplication,
	
H : MP → MP.	
From this point of view, the even dimensional elements of the Clifford algebra—the quaterni-
ons H—are operators and the odd dimensional elements of the Clifford algebra—the mass-points 
MP—are operands. Hence just like the Clifford algebra for R2 and unlike the complex numbers 
and quaternions we studied in Part I of this text, the Clifford algebra for R3 separates operators and 
operands. Notice that H acts on MP @ H O on both the left and the right, since O commutes with 
H, but these actions are not identical, since quaternion multiplication is not commutative.
Two of the goals of Part III are:
to show how to use these operators and operands to construct some of the classical trans-
formations—rotations, reflections, and perspective projections—of computer graphics on 
both points and vectors in three dimensions;
to  provide simpler, more intuitive proofs of these constructions than are commonly found 
in the standard literature on Clifford algebras.
We shall now embark upon our pursuit of these two objectives.
•  •  •  •
i.
ii.


129
Every bivector represents a plane. Indeed, by Proposition 14.1, every bivector b can be decomposed 
into the wedge product of two vectors u, v. The bivector b represents the plane of vectors spanned 
by any vectors u, v such that b = u ∧ v. The vectors u, v are not unique, but the plane determined by 
the bivector b is unique.
Relative to any fixed bivector b, the 4-dimensional space of mass-points can be decomposed 
into two mutually orthogonal planes: the plane of vectors determined by b, and the 2-dimensional 
subspace of the 4-dimensional space of mass-points orthogonal to the plane determined by b. To 
avoid confusion between the bivector b and the plane determined by the bivector b, we will denote 
by b || the plane of vectors determined by the bivector b. Similarly, we will denote by b ⊥ the mass-
points in the plane orthogonal to b. Thus for any bivector b,
	
MP ≅ b|| ⊕ b⊥	
	
R4 ≅ R2 ⊕ R2 .	
Note that here and elsewhere we use the term plane to denote any 2-dimensional subspace of the 
space of mass-points, rather than a physical plane in R3.
We are now going to study the geometric effect of multiplying an arbitrary mass-point p in 
MP by a unit quaternion
	
q(b, q ) = cos(q ) + sin(q )b	
in H, where b is a unit bivector—that is, where b represents a planar segment with unit area. We 
shall proceed as in Chapter 5 by investigating the geometric effects of this multiplication in the two 
mutually orthogonal planes b || and b ⊥. The parallels between Chapter 5 and Sections 16.1 and 16.2 
are completely intentional. The reader who followed Chapter 5 will have no trouble understanding 
Sections 16.1 and 16.2. The main point here is to understand how the quaternion techniques in 
Chapter 5 are reinterpreted in the Clifford algebra of R3.
c h a p t e r  1 6
Decomposing Mass-Points Into Two 
Mutually Orthogonal Planes
≅
≅

130 
Rethinking Quaternions: Theory and Computation
16.1	
ACTION OF q (b, q ) ON b ⊥
The plane b ⊥ in MP is spanned by the pseudoscalar O and the vector bO. Indeed in the space of 
mass-points, the vector O representing the origin is orthogonal to every vector in three dimensions 
(see Figure 3.3), and by Corollary 14.2, the vector bO is orthogonal to every vector in the plane 
determined by the bivector b. Therefore
	
b ⊥ = span{O, bO}.	
Moreover, the pseudoscalar O and the vector bO actually form an orthonormal basis for b ⊥, since
i.	
O is orthogonal to bO (as a vector in the 4-dimensional vector space of mass-points, the 
origin O is orthogonal to every vector in R3; see Figure 3.3)
ii.	
|bO| = |b| = 1	
{|u × v| = area(u, v) = |u ∧ v| for all vectors u, v};
iii.  |O| = 1 (as a vector in the 4-dimensional space of mass-points, |O| = 1; see Figure 3.3).
Multiplication by O is a vector space isomorphism from the subspace of the quaternions H 
spanned by 1, b to the subspace of the mass-points MP spanned by O, bO. Hence to understand  
how the unit quaternions q(b,q ) act on b⊥, we first need to understand how multiplication works on 
the subspace of quaternions spanned by 1, b.
Here is the key observation. By Corollary 14.4,
	
|b| = 1 ⇒ b 2 = −1.	
Therefore the quaternion plane spanned by 1, b is isomorphic to the complex plane. Notice that this 
observation is the exact analogue of the key observation in Chapter 5.
Now we know how multiplication by unit vectors in the complex plane acts on the complex 
numbers. Multiplication by the complex number
	
e iq = cos(q ) + sin(q )i	
rotates vectors in the complex plane counterclockwise through the angle q. Analogously, multiplica-
tion by the unit quaternion
	
q(b,q ) = cos(q ) + sin(q )b	
rotates mass-points in the plane b ⊥ counterclockwise through the angle q. Indeed, notice that in 
direct analogy with complex multiplication, we have the following results (see also Lemma 5.1).
Lemma 16.1: Let b be a unit bivector. Then
i.	
q (b,q ) q (b,f ) = q (b,q + f)

Decomposing Mass-Points Into Two Mutually Orthogonal Planes  131
ii.	 q (b,f ) q (b,q ) = q (b,q + f)
iii.	 q (b,q ) q (b,f ) = q (b, f ) q (b, q ).
Proof: To prove i, we simply apply the fact that b 2 = −1 and use the trigonometric identities for the 
sine and the cosine of the sum of two angles:
i.	
q (b,q ) q (b,f ) = (cos(q ) + sin(q )b) (cos(f ) + sin(f )b)
	
= (cos(q )cos(f )  sin(q )sin(f)) + (sin(q )cos(f ) + cos(q )sin(f))b
	
= cos(q  + f) + sin(q + f )b
	
= q (b, q + f ).
ii, iii.  Follow immediately from i.	
♦
Corollary 16.2: The effect of multiplication by q(b, q ) on the mass-points in the plane b ⊥ is just counter-
clockwise rotation through the angle q in the plane b ⊥. Moreover, since
	
Ob = bO, 	
multiplication by q(b, q ) on the left and the right has the same effect on the elements in b ⊥.
Proof: It is enough to consider mass-points p represented by 4-dimensional vectors of unit length in 
the plane b ⊥ = span{O, bO}. Since O, bO is an orthonormal basis for b ⊥, there is an angle f such that
	
p = cos(f )O + sin(f )(bO) = q(b, f )O.	
(see Figure 16.1). Therefore by Lemma 16.1
	
q(b, q ) p = q(b, q )q(b, f )O = q(b, q + f)O = cos(q + f )O + sin(q + f )(bO).	
Thus the effect of multiplication by q(b, q ) on the mass-points in the plane b ⊥ = span{O, bO} is just 
counterclockwise rotation through the angle q.	
♦
16.2	
ACTION OF q (b, q ) ON b||
Let v be a unit vector in the plane represented by the bivector b. Then just as O, bO are an orthonor-
mal basis for b ⊥, the vectors v, bv are an orthonormal basis for b ||. This observation can be proved 
in the following fashion.
Lemma 16.3: Let b be a bivector, and let v be a vector in the plane b ||. Then
i.	
bv = bO × v
ii.	 vb = v × bO

132 
Rethinking Quaternions: Theory and Computation
Proof: By Equation (14.8)
	
bv = (bv)O 2 = ((bO)v)O = (−(bO  v) + (bO ∧ v))O.	
But
bO ⋅ v = 0 because by Corollary 14.2 bO is orthogonal to the plane b||
(bO ∧ v)O = bO × v by Equation (14.14).
Therefore,
	
bv = bO × v.	
Similarly,
	
vb = v × bO. 	
♦	
Corollary 16.4: Let b be a bivector, and let v be a vector in the plane b ||. Then
i.	
bv is a vector in the plane b ||
ii	
bv ⊥ v
iii.	 |bv| = |b| |v|
iv.	 vb = −bv
O
bO = Ob
q(b, )O
b
=span{O, bO}
φ
φ
Figure 16.1: The plane b ⊥ = span{O, bO} in the space of mass-points MP. The vector in four dimen-
sions representing the mass-point q(b, f )O makes an angle f with the O-axis. Therefore the action of 
q(b, q ) on the elements of b ⊥ is simply counterclockwise rotation by the angle q. Moreover, since Ob = 
bO, the action of q(b, q ) on the left and the right is the same.

Decomposing Mass-Points Into Two Mutually Orthogonal Planes  133
Thus if |b| = |v| = 1, then v, bv is an orthonormal basis for b ||
Proof: These results follow immediately from Lemma 16.3.	
♦
Let v be a vector in b ||. Using the orthonormal basis v, bv for b ||, we can now investigate the 
effect of multiplication by q(b, q ) on vectors v in the plane b ||.
Corollary 16.5: The effect of multiplication by q(b, q ) on the left on vectors v in the plane b || is just coun-
terclockwise rotation through the angle q in the plane b ||. Moreover, since
	
vb = −bv,	
multiplication by q(b, q ) on the right on vectors in b || rotates these vectors clockwise through the angle q in 
the plane b ||.
Proof: It is enough to prove this result for unit vectors v in the plane b ||. Now
	
q(b, q )v = (cos(q ) + sin(q )b)v = cos(q )v + sin(q )(bv).	
Therefore since by Corollary 16.4 v, bv is an orthonormal basis for b ||, multiplication by q(b, q ) 
on the left rotates the vector v counterclockwise by the angle q in the plane b || (see Figure 16.2). 
Similarly, since vb = −bv, multiplication by q(b, q ) on the right rotates the vector v clockwise by the 
angle q in the plane b ||.	 ♦
v
b v
q(b,
)v
v q(b,
)
vb =
b v
b = span{v,b v}
θ
θ
θ
θ
Figure 16.2: The plane b || = span{v, bv} in the space of mass-points MP. The vector q(b, q )v makes 
an angle q with the v-axis. Therefore the action represented by multiplying vectors v in b || by q(b, q ) on 
the left is simply counterclockwise rotation by the angle q. Moreover, since vb = −bv the action of q(b, 
q ) on the left and the action of q(b, q ) on the right rotate v by the same amount in opposite directions. 
Compare with Figure 5.2.

134 
Rethinking Quaternions: Theory and Computation
16.3	
SANDWICHING
To facilitate our future discussions, we introduce notation analogous to the notation in Chapter 5. 
Let q be a quaternion and let p be a mass-point. Then
Lq( p) = q p	
left multiplication by q
Rq( p) = p q	
right multiplication by q
Tq( p) = q p q = Lq(Rq( p))	
sandwiching p between two copies of q
Sq( p) = q p q * = Lq(Rq* ( p))	
sandwiching p between q and q *.
We now summarize the geometric effects of multiplication by the unit quaternions
	
q(b, q ) = cos(q ) + sin(q )b	
on vectors in the plane b || and on mass-points in the complementary plane b ⊥.
Proposition 16.6: Rotation in b ⊥
Let
•  b = a unit bivector
•  p = a mass-point in b ⊥
Then
i.	
Lq(b, q )( p) = q(b, q ) p	
rotates p by the angle q in the plane b ⊥
ii.	 Rq(b, q )( p) = p q(b, q )	
rotates p by the angle q in the plane b ⊥
Proof: These results follow immediately from Corollary 16.2.	
♦
Proposition 16.7: Rotation in b ||
Let
•  b = a unit bivector
•  v = a vector in b ||
Then
i.	
Lq(b, q )(v) = q(b, q ) v	
rotates v by the angle q in the plane b ||
ii.	 Rq(b, q )(v) = vq(b, q )	
rotates v by the angle −q in the plane b ||
Proof: These results follow immediately from Corollary 16.5.	
♦
It follows by Propositions 16.6 and 16.7 that multiplication by a unit quaternion q(b, q ) rep-
resents a double isoclinic rotation on the space of mass-points (see Figure 5.3), since mass-points in 
the two mutually orthogonal planes b || and b ⊥ are rotated through the same angle q, although the 
orientation of the rotation may differ depending on whether the multiplication is on the left or the 
right. Therefore, just as in Chapter 5, we can now use sandwiching to balance these clockwise and 
counterclockwise rotations and generate simple rotations in the space of mass-points.

Decomposing Mass-Points Into Two Mutually Orthogonal Planes  135
Corollary 16.8: Sandwiching in b ⊥
Let
•  b = a unit bivector
•  p = a mass-point in b ⊥
Then
i.	
Tq(b, q )( p) = q(b, q ) p q(b, q )	
rotates p by the angle 2q in the plane b ⊥
ii.	 Sq(b, q )( p) = q(b, q ) p q*(b, q )	
is the identity on p.
Proof: These results follow immediately from Proposition 16.6 and Equation (14.24).	
■
Corollary 16.9: Sandwiching in b ||
Let
•	
b = a unit bivector
•	
v = a vector in b ||
Then
i.	
Tq(b, q )(v) = q(b, q ) v q(b, q ) 	
is the identity on v
ii.	 Sq(b, q )(v) = q(b, q ) v q* (b, q )	
rotates v by the angle 2q in the plane b ||.
Proof: These results follow immediately from Proposition 16.7 and Equation (14.24).	
♦
By Corollaries 16.8 and 16.9, the sandwiching operators Sq(b, q )(v) and Tq(b, q )( p) represent 
simple rotations—that is, rotations in a single plane—in the 4-dimensional space of mass-points 
MP = b|| ⊕ b⊥. In the next chapter we shall use these two sandwiching operators to study rotations, 
reflections, and perspective projections in R3.
Exercises:
16.1. Let b be a bivector and let p be a mass-point. Show that
	
T−b( p) = Tb( p).	
16.2. Let u be a unit vector, and define
	
q(u, q ) = cos(q )O + sin(q )u	
	
q* (u, q ) = cos(q )O − sin(q )u	
a.  Show that
i.  Tq(b, q )(v) = q(bO, q )v q(bO, q ) = Tq(b, q )O(v)
ii.  Sq(b, q )(v) = q(bO, q )v q* (bO, q ) = Sq(b, q )O(v).
b.  Conclude that Corollaries 16.8 and 16.9 remain valid when we replace the bivector b by 
the normal vector bO.
•  •  •  •


137
Let us pause here for a moment to compare our sandwiching results in Section 16.3 with our sand-
wiching results in Chapter 5. Let b be the bivector representing a plane b|| in R3, and let N = b O 
be the unit vector in R3 perpendicular to the plane b||. Comparing the results in Section 16.3 to the 
results in Chapter 5, we see that the plane b⊥ plays the same role as the plane O, N and the plane 
b|| plays the same role as the plane perpendicular to O, N. In particular, sandwiching mass-points in 
the planes b^ and b|| with the unit quaternions
	
q (b,q ) = cos (q ) + sin (q ) b	
has the same effect as sandwiching the mass-points in the plane of O, N and the plane perpendicular 
to O, N with the unit quaternions
	
q (N,q ) = cos(q ) O + sin (q )N.	
Thus our proofs of the sandwiching formulas for rotation, reflection, and perspective projection in 
the quaternion model presented in Chapter 6 can be transposed almost line for line to formulas for 
rotation, reflection, and perspective projection in the Clifford algebra for R3.
Applying sandwiching to compute rotation and mirror image on vectors in R3 is a well-known 
technique in Clifford algebra [Dorst et al., 2007]. Since our model of Clifford algebra includes 
points as well as vectors, here we shall simply extend these standard results on rotation and reflection 
from vectors to points. Our proofs, however, are simpler than the standard proofs, since we shall 
take advantage of what we already know about the simple effects of the sandwiching maps  Tq (b, q ) 
and Sq (b, q) on the planes b|| and b⊥. Using techniques from Clifford algebra to compute perspective 
projection seems to be new. We are able to employ sandwiching to perform perspective projection 
in R3 only because we have adopted a rather unconventional interpretation of the pseudoscalars, an 
interpretation that allows us to incorporates mass-points into the Clifford algebra of R3.
c h a p t e r  1 7
Rotation, Reflection, and  
Perspective Projection

138 
Rethinking Quaternions: Theory and Computatio n
17.1	
ROTATION
Rotations in three dimensions are typically specified by an axis of rotation and an angle of rotation. 
But in three dimensions planes are dual to vectors, so instead of specifying an axis of rotation, we 
can specify a plane of rotation, a plane perpendicular to the axis of rotation. Rotation occurs mostly 
in this rotation plane, since a vector is rotated around an axis of rotation by rotating its orthogonal 
projection in the plane of rotation. In Clifford algebra, planes are represented by bivectors. There-
fore here we shall specify a rotation by a bivector b and an angle q. The plane of rotation is b||, and 
the axis of rotation is the vector b O, which by Corollary 14.2 is orthogonal to the rotation plane b||.
Theorem 17.1: Sandwiching with conjugate quaternions rotates vectors in 3-dimensions
Let
b = a unit bivector
v = a vector in 3-dimensions
Then
Sq (b, q / 2) (v) = q (b, q / 2) v q* (b, q / 2)	
rotates v by the angle q around the axis bO.
Proof: Let v|| be the component of v in b||, and let v^ be the component of v perpendicular to b||. 
Then
Sq (b, q / 2) (v^) = q (b, q / 2) v^ q* (b, q / 2) = v^
(Corollary 16.8)
S q (b q / 2)(v||)  = q (b, q / 2) v|| q* (b, q / 2)  = cos (q ) v|| + sin (q ) b v||
	
rotates v|| by the angle q in the plane b||.
(Corollary 16.9)
Therefore since Sq(b, q / 2) is a linear transformation and v = v^ + v||,
	
Sq (b, q / 2) (v) = Sq (b, q / 2)(v⊥) + Sq (b, q / 2)(v||) = v^ + cos(q )v|| + sin(q )bv||.	
Hence by Equation (6.1) (where we have interchanged the roles of v^ and v|| because in Equa-
tion (6.1) we are considering the parallel and perpendicular components of v with respect to the axis 
of rotation rather than the components of v relative to the plane of rotation) sandwiching has the 
same effect on v as rotating v in 3-dimensions by the angle q around the axis vector bO.    ♦
Theorem 17.2: Sandwiching with conjugate quaternions also rotates points in 3-dimensions
Let
b = a unit bivector
P = a point in 3-dimensions
Then
S q (b, q / 2) (P) = q (b, q / 2) P q* (b, q / 2) rotates P by the angle q around the line passing through 
the point O parallel to the vector bO.
•
•
•
•
•
•
•
•

Rotation, Reflection, and Perspective Projection 
139
Proof: Since P be a point in affine space,
	
P = O + (P - O).	
But
Sq(b, q / 2) (O) = O	
(Corollary 16.8)
Sq(b q / 2)(P - O) rotates the vector P − O by the angle q around the axis bO (Theorem 17.1).
Therefore since S q (b, q / 2) is a linear transformation and P = O + (P - O),
	
Sq (b, q / 2) (P) = O + Sq (b, q / 2) (P - O).	
Hence by Theorem 17.1 and Equation (6.2), sandwiching has the same effect on P as rotating P 
in 3-dimensions by the angle q around the line passing through the point O parallel to the  
vector bO.    ♦
Exercises:
17.1. Let q1 = q (b1, q1 / 2), q2 = q(b2, q2 / 2), and let p be a mass-point.
a.  Show that
	
(Sq1 ° Sq2)(p) = Sq1q2 (p).
b.  Conclude from part a that composing rotations is equivalent to multiplying quaternions.
17.2. Using Exercise 16.2, show that Theorems 17.1 and 17.2 remain valid when we replace the 
bivector b by the normal vector bO.
17.2	
MIRROR IMAGE
Mirror images in 3-dimensions are typically specified by a vector normal to the mirror plane. But in 
3-dimensions planes are dual to vectors, so instead of specifying a normal vector, we can specify the 
mirror plane. In Clifford algebra, planes are represented by bivectors. Therefore just as with rota-
tions, here we shall specify reflections by bivectors b. The mirror plane is b|| and the normal vector is 
bO, which is orthogonal to the mirror plane b||.
Theorem 17.3: Sandwiching with unit bivectors reflects vectors in 3-dimensions
Let
b   = a unit bivector
v = a vector in 3-dimensions
•
•
•
•

140 
Rethinking Quaternions: Theory and Computatio n
Then
Tb(v) = b v b = -Sb(v) is the mirror image of v in the plane b||.
Proof: Let v|| be the component of v in b||, and let v⊥ be the component of v perpendicular to b||. 
Since b = cos(p / 2) + sin(p / 2) b = q(b,p / 2):
Tb(v⊥) = b v⊥ b = q(b,p / 2) v⊥ q(b,p / 2) = Tq(b,p / 2)(v⊥) = -v⊥
(Corollary 16.8)
Tb(v||) = b v|| b = q(b,p / 2) v|| q(b,p / 2) = Tq(b,p / 2)(v||) = v||
(Corollary 16.9)
Therefore since Tb is a linear transformation and v = v|| + v⊥,
	
Tb(v) = Tb(v||) + Tb(v⊥) = v||-v⊥.	
Hence by Equation (6.3) (where again we have interchanged the roles of v⊥ and v|| because in  
Equation (6.3) we are considering the parallel and perpendicular components of v with respect to 
the normal to the mirror plane rather than the components of v relative to the mirror plane) sand-
wiching with b has the same effect on v as reflecting v in 3-dimensions in the plane b||.    ♦
Theorem 17.4: Sandwiching P - 2O with the bivector b reflects points P in the plane b|| passing through 
the point O
Let
b  = a unit bivector
P = a point in 3-dimensions
Then
Tb (P - 2O) = b (P - 2O)b is the mirror image of the point P in the plane b|| passing through the 
point O.
Proof: Clearly,
	
(P - 2O) = (P - O) - O.	
But
Tb (-O) = - b O b = -b2O = O
Tb (P -O) = b (P - O)b
Therefore since Tb is a linear transformation and P - 2O = (P - O) - O,
	
Tb (P - 2O) = O + b (P - O)b,	
which by Theorem 17.3 and Equation (6.4) is the mirror image of the point P in the plane b|| pass-
ing through the point O.    ♦
•
•
•
•
•
•
•
•

Rotation, Reflection, and Perspective Projection 
141
Exercises:
17.3. Using Exercise 16.2, show that Theorems 17.3 and 17.4 remain valid when we replace the 
bivector b by the normal vector bO.
17.4. Let b1, b2 be bivectors.
a.  Show that
	
i.  b1 b2 = (b2 b1)*
	
ii.  (Tb2 ° Tb1)(v) = Sb2b1(v).
b.  Conclude from part a that the composite of two reflections is equivalent to one rotation.
17.5. Let b be a unit bivector, and let u,v be two unit vectors in the plane b || chosen so that the angle 
between u and v is q /2.
a.  Show that
	
i.  (-vO)(uO) = (v ⋅ u) - v ∧ u = cos(q /2) + sin(q /2) b = q (b, q /2).
	
ii.   (uO)(-vO) = (v ⋅ u) - u ∧ v = cos(q /2) − sin(q /2) b = q* (b, q /2).
b.  Conclude from part a that
	
Sq(b, q /2)(w) = (T- vO ° TuO)(w) = (TvO ° TuO)(w).
c.  Conclude from part b that every rotation is the composite of two reflections.
17.3	
PERSPECTIVE PROJECTION
A perspective plane in 3-dimensions is typically specified by a point on the plane and a vector nor-
mal to the plane. But once again in Clifford algebra planes are dual to vectors, so instead of speci-
fying a normal vector, we can specify a perspective plane using a bivector. Therefore here we shall 
specify a perspective plane by a bivector b. The perspective plane is b || and the normal vector is bO, 
which is orthogonal to the perspective plane b ||.
Theorem 17.5: Sandwiching vectors to the eye between two copies of a unit quaternion gives perspective
Suppose that 0 < q < p and let
b = a unit bivector
E = O + (cot(q ) - csc(q ))bO = eye point
P = a point in three dimensions
Then
Tq (b,-q /2)(P - E ) = q(b,-q /2)(P - E ) q (b,-q /2) is a mass-point, where
—the point is located at the perspective projection of the point P from the eye point E onto the 
plane b || passing through the point O + cot(q )(bO) ≡ Tq(b, -q /2)(bO).
•
•
•
•

142 
Rethinking Quaternions: Theory and Computatio n
—the mass is equal to dsin(q), where d is the distance of the point P from the plane b || passing 
through the eye point E.
Proof: Let P - E = d (bO) + v, where d is a scalar and v ⊥ bO is a vector in the plane b || (see Fig-
ure 17.1). Then since by Corollary 16.8 the map Tq(b,-q /2) rotates mass-points in the plane b⊥ = 
span{O, bO} by the angle -q :
•    Tq (b,-q / 2)(d(bO)) = d cos(p / 2 - q )O + d sin(p / 2 - q )(bO) = d sin(q )O + d cos(q )(bO)	
Moreover by Corollary 16.9, the map Tq (b, -q /2) is the identity on vectors in the plane b ||, so
•    Tq(b, -q /2)(v) = v.
Therefore by linearity
•   
( ,
/2)
( ,
/2)
(
)
( (
)
)
sin( )
cos( )(
)
cot( )(
)
csc( )
q b
q b
T
P
E
T
d bO
v
d
O
d
bO
v
v
O
bO
d
θ
θ
θ
θ
θ
θ
−
−
−
=
+
=
+
+
≡
+
+
.
	
Since by construction
•    O + cot(q )(bO) = E + csc(q )(bO),
it follows by similar triangles (see Figure 17.1) that the point corresponding to the mass-point  
Tq(b, -q /2)(P - E ) is the perspective projection of the point P from the eye point E onto the plane b || 
passing through the point O + cot(q )bO. Moreover, the mass is d sin(q ), where d is the distance of 
the point P from the plane b || passing through the eye point E.    ♦
As in Section 6.3, we shall call the position of the eye point E and the plane of projection b || 
in Theorem 17.5 the canonical position for the angle q and the bivector b, and we shall write
E(b, q ) = O + (cot(q ) - csc(q ))bO
b ||(q ) = plane of projection parallel to b || at a distance d = csc(q ) from the eye point 
E(b,q ) along the normal vector bO.
Now, as in Section 6.3, Theorem 17.5 remains valid even if the eye point E and the plane of projec-
tion b || are not in canonical position.
Theorem 17.6: Sandwiching vectors to the eye with q(N, -q /2) gives perspective
Suppose that 0 < q < p, and let

Rotation, Reflection, and Perspective Projection 
143
E = eye point
b = a unit bivector
b || = plane of projection parallel to b || at a distance d = csc(q ) from the eye point E along  
the normal vector bO
P = a point in 3-dimensions
Then
Tq(b, -q /2)(P - E) = q (b, -q /2)(P - E ) q (b, -q /2) is a mass-point, where:
—the point is located at the perspective projection of the point P from the eye point E onto the 
plane b || at a distance d = csc(q ) from the eye point E along the normal vector bO, translated 
by the vector E(b, q ) - E to the canonical plane b ||(q )
—the mass is equal to dsin(q ), where d is the distance of the point P from the plane b || passing 
through the eye point E.
•
•
•
•
•
E(eye)= O + cot( )
csc( )
(
)bO
•
b|| (Perspective Plane)
(Perspective Point)
P
Pnew
Q = O + cot( )(bO)
d(bO)
v
P
E
csc( ) v
d
csc( )(bO)
•
•
•
R•
θ
θ
θ
θ
Figure 17.1: By similar triangles, the point
	
cot( )(
)
csc( )
csc( )(
)
csc( )
new
v
v
P
O
bO
E
bO
d
d
θ
θ
θ
θ
=
+
+
=
+
+
	
is the perspective projection of the point P from the eye point E onto the plane b || passing through the 
point Q = O + cot(q )(bO).

144 
Rethinking Quaternions: Theory and Computatio n
Proof: This result follows immediately from Theorem 17.5 and the fact that perspective pro-
jection commutes with translation.    ♦
Exercise:
17.6. Using Exercise 16.2, show that Theorems 17.5 and 17.6 remain valid when we replace the bi-
vector b by the normal vector bO—that is when we replace Tq(b, -q /2)(P - E) by Tq(bO, -q /2)(P - E).
•  •  •  •

145
Summary
In the standard model of Clifford algebra for 3-dimensions the basic operations are reflections (ver-
sors) [Dorst et al., 2007]: every rotation (rotor) in 3-dimensions is the product of two reflections 
in 3-dimensions. In our homogeneous model of Clifford algebra, rotations in 3-dimensions still 
factor into pairs of reflections in 3-dimensions (see Exercise 17.5). Nevertheless, in our homoge-
neous model, the basic operations are not reflections in 3-dimensions, but rather simple rotations in  
4-dimensions.
For any bivector b, rotations in 4-dimensions that leave the plane b⊥ fixed correspond to rota-
tions in 3-dimensions in the plane b ||; rotations in 4-dimensions that leave the plane b || fixed cor-
respond to either reflections or perspective projections in 3-dimensions. Thus in our homogeneous 
model of Clifford algebra rather than to think of reflections as the basic operations, it is more natu-
ral to think of reflections in 3-dimensions as special rotations in 4-dimensions. The main strength 
of our technique is that this approach allows us to model perspective projections in 3-dimensions as 
orthogonal transformations in 4-dimensions.
The main weakness of our method is that our approach does not model translations. In the 
conformal model of Clifford algebra [Dorst et al., 2007], every translation is the product of two 
reflections in parallel planes. But in our model there is no way to represent translation. Indeed our  
model is not translation invariant; the pseudoscalar O = -e1e2e3 is rotation invariant (see Exer-
cise 14.3), but O is not translation invariant. In effect, we have traded the capacity to perform trans-
lations for the ability to perform perspective projections.
Below we summarize our principal insights along with our main results. Many of these ideas 
have actually been around for a long time; our main contribution is rethinking these ideas and reas-
sembling them in new and useful ways. The reader should compare these insights and results for 
Clifford algebra to the parallel insights and results for quaternions outlined in Chapter 7.
The pseudoscalars can be exploited to represent mass.
In the standard geometric interpretation of the Clifford algebra for R3, the pseudosca-
lar e1e2e3 represents a unit volume. Here we have adopted an alternative interpretation, 
exploiting the pseudoscalars to represent mass instead of volume.
1.
a.
c h a p t e r  1 8

146 
Rethinking Quaternions: Theory and Computation
The Clifford algebra for R3 decomposes into two disjoint 4-dimensional vector spaces: the space of 
mass-points and the space of quaternions.
We have the following vector space isomorphisms:
	
3
3
3
8
4
4
(
)
(
)
(
)
even
odd
Cl R
Cl
R
CL
R
H
MP
R
R
R
H
HO
≅
⊕
≅
⊕
≅
⊕
≅
⊕
≅
≅
≅
For any unit bivector b, the planar subset Cb = span{1,b} of the quaternions H is isomorphic to 
the complex plane C.
b2 = -1 ⇒ Cb ≅ C
For any bivector b, we can decompose the 4-dimensional space of mass-points into two mutually 
orthogonal planes: the vectors in b || and the mass-points in b ⊥.
In particular, we have
	
4
2
2
MP
b
b
R
R
R
⊥
≅
⊕
≅
⊕

≅
≅
The plane b || has special properties.
b || represents a plane of vectors in R3, the vectors in the plane of the bivector b.
b || = Cbv for any vector v in b ||.
Left multiplication by q(b,q ) represents counterclockwise rotation by q in b ||.
Right multiplication by q(b,q ) represents clockwise rotation by q in b ||.
	
(a)  vb = -bv ⇒ vq(b, q ) = q* (b, q )v = q(b,-q )v.
The plane b ⊥ has special properties.
b ⊥ represents a line of points in R3, the line through the point O in the direction of 
the vector bO.
b ⊥ = CbO
Left multiplication by q(b, q ) represents counterclockwise rotation by q in b ⊥.
Right multiplication by q(b, q ) represents counterclockwise rotation by q in b ⊥.
	
(a)  Ob = bO ⇒ Oq(b, q ) = q(b,q )O.
Sandwiching is the fundamental operation of quaternions on mass-points.
Sandwiching with unit quaternions represents simple rotations on the 4-dimensional 
space of mass-points, unlike left and right multiplication by quaternions, which repre-
sent double isoclinic rotations on the 4-dimensional space of mass-points.
2.
a.
3.
a.
4.
a.
5.
a.
b.
i.
ii.
6.
a.
b.
i.
ii.
7.
a.

Summary 
147
Sq(b, q ) is the identity on b ⊥ and rotates vectors in b || by the angle 2q.
Sq(b, q ) is the identity on the line through the point O in the direction of the 
vector bO.
Sq(b, q ) rotates vectors by the angle 2q around the axis bO.
Tq(b, q ) is the identity on b || and rotates mass-points in b ⊥ by the angle 2q.
Tq(b, q ) is the identity on the plane of vectors determined by the bivector b.
Tb = Tq (b, p /2) reflects vectors in the plane b ||.
Tq(b, q ) represents perspective projection into a plane parallel to b ||.
•  •  •  •
b.
i.
ii.
c.
i.
ii.
iii.


149
Some Simple Alternative Homogeneous 
Models for Computer Graphics
The homogeneous model presented here for computer graphics uses the full 8-dimensional Clifford 
algebra for R3: the even dimensional elements, the quaternions, are the operators, and the odd di-
mensional elements, which we interpret as mass-points, are the operands. There are, however, other 
perhaps even simpler alternatives to this basic model.
One natural alternative is to employ the Clifford algebra for R4. There are several poten-
tial advantages to this homogeneous model. First, we do not need to adopt the pseudoscalars to 
represent mass; rather since there are now four canonical basis vectors e1, e2, e3, e4, we can simply 
use scalar multiples of e4 to represent mass. This approach is indeed standard practice in computer 
graphics.
Second, instead of four independent bivectors, we now have six independent bivectors: e1e2, 
e1e3, e1e4, e2e3, e2e4, e3e4. The bivectors b spanned by e1e2, e2e3, e3e1 can be factored as in Proposi-
tion 14.1 into the wedge product of two vectors u, v in R3. Thus just as in the Clifford algebra for 
R3, the maps Sq(b,q ) represent simple rotations in the plane b|| in R3, since it is straightforward to 
check that these maps are the identity on the plane in R4 spanned by u × v and e4 (see Exercise 
19.1). Furthermore, if b = e4v for any unit vector v in R3, then the maps Sq(b,q ) represent simple 
rotations in the plane b|| in R4 determined by e4 and v, since once again it is easy to verify that these 
maps are the identity on the plane of vectors in R3 perpendicular to v. Thus if b = e4v, then the map 
Sq(b,q ) represents perspective projection into a plane perpendicular to v (see Exercise 19.2). Notice 
that we no longer need the sandwiching maps Tq(b,q ) to represent perspective projections; all the 
simple rotations we need are now given by the sandwiching maps Sq(b,q ) for different choices of the 
bivector b.
The main drawback to using the Clifford algebra for R4 as our homogeneous model is that 
we must now work in a 16-dimensional rather than an 8-dimensional vector space. So what we 
could gain in conceptual simplicity, we might lose in computational efficiency. Nevertheless, this 
richer, higher dimensional model with six independent bivectors may yet allow us to represent ad-
ditional linear, affine, or projective transformations not directly available in the Clifford algebra for 
c h a p t e r  1 9

150 
Rethinking Quaternions: Theory and Computatio n
R3 by using the maps Sq(b,q ) with arbitrary bivectors b. Whether we can actually capture additional 
useful transformations with this homogeneous model remains a topic for future research.
Instead of going to higher dimensions, we could try to drop down to lower dimensions. 
We could, for example, use only the odd dimensional elements of the Clifford algebra for R3 to 
model the operands, the mass-points, and the sandwiching operators. For any quaternion q, let 
q˜  denote either q or q*. Then since O2 = 1 and O commutes with every element in the Clifford  
algebra,
	
q p q˜ = (qO) p (q˜ O).	
But by duality, if q is a quaternion, then qO, q˜ O are mass-points. Thus instead of sandwiching a 
mass-point p between two quaternions, we can sandwich p between two mass-points and get the 
same results (see Exercise 16.2). For example,
	
b v b = (bO) v (bO),	
so to compute the mirror image of a vector v in the plane b||, instead of sandwiching the vector v 
between two copies of the bivector b, we can sandwich the vector v between two copies of the nor-
mal vector bO. In a similar way, all the sandwiching operators for rotation, reflection, and perspec-
tive projection can be represented by the mass-points q(b,q )O instead of by the quaternions q(b,q ) 
(see Exercises 17.2, 17.3, and 17.6). This approach reduces the vector space of operators and oper-
ands from 8-dimensions to 4-dimensions, since the operators and operands now reside in the same 
space. However this model may be a bit awkward to implement, since intermediate products such  
as (q(b,q )O)p are quaternions and so do not reside in the 4-dimensional space of mass-points.
Perhaps a better alternative, and one that has been used many times before (but only for 
vectors and not for points), is to model both the operators and the operands as quaternions. To do 
so, we map each mass-point to its dual quaternion, then sandwich the dual using quaternion multi-
plication, and finally convert the resulting quaternion back to a mass-point by taking its dual. This 
approach really amounts to just the following identity:
	
q p q˜ = (q(  pO) q˜ )O.	
If p is a mass-point and q is a quaternion, then pO is a quaternion and the product q(  pO) q˜  can 
be computed using only quaternion multiplication, since each factor in this product is a quaternion. 
But instead of computing all these duals, we can simply redefine the geometric meaning of the qua-
ternions themselves to represent mass-points. In this interpretation, the scalars are used to represent 
mass, and the bivectors are interpreted to represent vectors, the vectors dual to the planes originally 
represented by these bivectors. That is, we invoke the vector space isomorphism

Simple Alternative Homogeneous Models for Computer Graphics  151
	
T (e2e3) = i, T (e3e1) = j, T (e1e2) = k, T (1) = O,	
where O is the origin of the coordinate system and i, j, k are unit vectors along the coordinate axes.
This interpretation is actually the standard interpretation of quaternions in computer graphics; we 
use exactly this interpretation in Part I of this monograph.
Remember: An algebra is only an algebra. The formal rules of the algebra are fixed. But the geomet-
ric interpretation we assign to elements of this algebra is completely up to us, constrained only by consistency 
and applicability. Nothing but tradition and convention prevents us from interpreting the bivectors 
as vectors and the scalars as mass. But by invoking this interpretation, we can avoid computing 
any duals, and all of our computations are confined to the 4-dimensional quaternion algebra. This  
4-dimensional homogeneous model for computer graphics may be intellectually less satisfying, but 
it is certainly computationally more efficient than the 8-dimensional model of operators and oper-
ands in the Clifford algebra for R3. So we have come full circle, back again to the quaternion model 
we originally presented in Part I before our excursion in Part III into Clifford algebra.
Exercises:
19.1. Consider the Clifford algebra for R4.
a.  Show that if b = u ∧ v, where u and v are unit vectors in R3, then the map Sq(b,q ) is the 
identity on the plane in R4 spanned by u × v and e4.
b.  Using part a, show that the maps Sq(b,q ) represent rotations in the plane b|| in R3.
19.2. Consider the Clifford algebra for R4.
a.  Show that if b = e4v, where v is a unit vector in R3, then the map Sq(b,q ) is the identity on 
the plane of vectors in R3 perpendicular to v.
b.  Using part a, show that the maps Sq(b,q ) represent perspective projections into a plane b|| 
in R3.
	
(Hint: Examine Theorem 17.6 to find the eye point E and the distance from the eye point 
E to the plane of projection.)
•  •  •  •


153
References
Conway, J., and Smith, D. (2003), On Quaternions and Octonions: Their Geometry, Arithmetic, and 
Symmetry, A.K. Peters, Natick, MA.
Dorst, L., Fontijne, D., and Mann, S. (2007), Geometric Algebra for Computer Science: An Object- 
Oriented Approach to Geometry, Morgan Kaufmann, Amsterdam.
Du Val, P. (1964), Homographies, Quaternions and Rotations, Oxford Mathematical Monographs, 
Clarendon Press, Oxford.
Farouki, R. (2008), Pythagorean Hodograph Curves: Algebra and Geometry Inseparable, Springer, Ber-
lin.
Foley, J., van Dam, A., Feiner, S., and Hughes, J. (1990), Computer Graphic: Principles and Practice, 
Second Edition, Addison-Wesley, Reading, MA.
Goldman, R. (2002), On the algebraic and geometric foundations of computer graphics, Transac-
tions on Graphics, Vol. 21, pp. 1–35.
Goldman, R. N. (2010), Understanding Quaternions, accepted to appear in Graphical Models.
Hamilton, W. R. (1866), Elements of Quaternions, Cambridge University Press, Cambridge, UK.
Hanson, A. (2006), Visualizing Quaternions, Morgan Kaufmann, New York.
Hurwitz, A. (1898), Uber die Composition der Quadratischen Formen von Beliebig Vielen Vari-
ablen, Nachrichten von der Gesellschaft der Wissenschaften zu Göttingen, Mathematisch-Physikalische 
Klasse, Bd. II, pp. 309–316.
Mebius, J. E. (2005), A matrix based proof of the quaternion representation theorem for four- 
dimensional rotations, http://arXiv:math/0501249v1 [math.GM].
Shoemake, K. (1985), Animating Rotation with Quaternion Curves, SIGGRAPH ’85: Proceed-
ings of the 12th Annual Conference on Computer Graphics and Interactive Techniques, ACM Press,  
pp. 245–254. doi:10.1145/325334.325242
Shoemake, K. (1991), Quaternions and 4 × 4 matrices, in Graphics Gems II, Edited by J. Arvo,  
pp. 351–354, Academic Press, New York.


155
Altmann, S. L. (1986), Rotations, Quaternions, and Double Groups, Clarendon Press, Oxford.
Doran, C., and Lasenby, A. (2003), Geometric Algebra for Physicists, Cambridge University Press, 
Cambridge, UK.
Kuipers, J. B. (1998), Quaternions and Rotation Sequences, Princeton University Press, Princeton, 
NJ.
Moore, C. L. (1918), Rotations in hyperspace, Proceedings of the American Academy of Arts and Sci-
ences, Vol. 53, pp. 649–694.
Needham, T. (1997), Visual Complex Analysis, Oxford University Press, Oxford.
Perwass, C. (2009), Geometric Algebra With Applications in Engineering, Springer-Verlag, Berlin.
Further Reading


157
Author Biography
Ron Goldman is a professor of computer science at Rice University in Houston, Texas. Dr. Goldman re-
ceived his B.S. in mathematics from the Massachusetts Institute of Technology in 1968 and his M.A. and 
Ph.D. in mathematics from Johns Hopkins University in 1973. Dr. Goldman’s current research interests 
lie in the mathematical representation, manipulation, and analysis of shape using computers. His work 
includes research in computer-aided geometric design, solid modeling, computer graphics, polynomials, 
and splines. He is particularly interested in algorithms for polynomial and piecewise polynomial curves 
and surfaces, as well as in applications of algebraic and differential geometry to geometric modeling. His 
most recent focus is on the uses of quaternions and Clifford algebras in computer graphics. Dr. Goldman 
has published over a hundred articles in journals, books, and conference proceedings on these and related 
topics. He has also published two books on computer graphics and geometric modeling: Pyramid Algo-
rithms: A Dynamic Programming Approach to Curves and Surfaces for Geometric Modeling and An Integrated 
Introduction to Computer Graphics and Geometric Modeling. Dr. Goldman is currently an associate editor 
of Computer Aided Geometric Design. Before returning to academia, Dr. Goldman worked for 10 years in 
industry solving problems in computer graphics, geometric modeling, and computer-aided design. He 
served as a mathematician at Manufacturing Data Systems Inc., where he helped to implement one of 
the first industrial solid modeling systems. Later, he worked as a senior design engineer at Ford Motor 
Company, enhancing the capabilities of their corporate graphics and computer-aided design software. 
From Ford, he moved on to Control Data Corporation, where he was a principal consultant for the 
development group devoted to computer-aided design and manufacture. His responsibilities included 
database design, algorithms, education, acquisitions, and research. Dr. Goldman left Control Data Cor-
poration in 1987 to become an associate professor of computer science at the University of Waterloo in 
Ontario, Canada. He joined the faculty at Rice University in Houston, Texas, as a professor of computer 
science in July 1990.


