RDF AND SPARQL
Part IV: Syntax of SPARQL
Sebastian Rudolph
ICCL Summer School
Dresden, August 2013

Agenda
1
Introduction and Motivation
2
Simple SPARQL Queries
3
Complex Graph Pattern
4
Filters
5
Solution Modiﬁers
6
Output Formats
7
Conclusions & Outlook
TU Dresden, August 2013
RDF and SPARQL
slide 2 of 63

Agenda
1
Introduction and Motivation
2
Simple SPARQL Queries
3
Complex Graph Pattern
4
Filters
5
Solution Modiﬁers
6
Output Formats
7
Conclusions & Outlook
TU Dresden, August 2013
RDF and SPARQL
slide 3 of 63

Query Languages for the Semantic Web?
How can we access information speciﬁed in RDF(S) or OWL?
RDF(S) Data
• Simple Entailment
• RDF-Entailment
• RDFS-Entailment
“Is one RDF graph a consequence of another one?”
TU Dresden, August 2013
RDF and SPARQL
slide 4 of 63

Query Languages for the Semantic Web?
How can we access information speciﬁed in RDF(S) or OWL?
RDF(S) Data
• Simple Entailment
• RDF-Entailment
• RDFS-Entailment
“Is one RDF graph a consequence of another one?”
OWL ontologies
• Logical Entailment
“Does an OWL ontology entail a subsumption relation between two classes?”
“What are the instances of a class in an OWL ontology?”
TU Dresden, August 2013
RDF and SPARQL
slide 5 of 63

Do OWL and RDF(S) not sufﬁce?
Even OWL entailment does not cover all kinds of
information needs
• “Which strings does the ontology specify in German?”
• “Which properties relate two given individuals?”
• “Which pairs of persons have a common parent?”
⇝Expressible neither in RDF nor in OWL
TU Dresden, August 2013
RDF and SPARQL
slide 6 of 63

Do OWL and RDF(S) not sufﬁce?
Even OWL entailment does not cover all kinds of
information needs
• “Which strings does the ontology specify in German?”
• “Which properties relate two given individuals?”
• “Which pairs of persons have a common parent?”
⇝Expressible neither in RDF nor in OWL
Requirements:
• High expressivity for describing the queried information
• Possibility of formatting, restricting, and manipulating the results
TU Dresden, August 2013
RDF and SPARQL
slide 7 of 63

Agenda
1
Introduction and Motivation
2
Simple SPARQL Queries
3
Complex Graph Pattern
4
Filters
5
Solution Modiﬁers
6
Output Formats
7
Conclusions & Outlook
TU Dresden, August 2013
RDF and SPARQL
slide 8 of 63

SPARQL
SPARQL (pronounced sparkle) stands for
SPARQL Protocol And RDF Query Language
• W3C Speciﬁcation since 2008
• Extension to SPARQL 1.1 since 2013
• Query language to query RDF graphs
• Very practice relevant
Parts of the SPARQL 1.0 speciﬁcation
• Query: The syntax and semantics of the query language
• Query Results XML Format: how to display results in XML
• Protocol for RDF: conveying SPARQL queries to a SPARQL query
processing service and returning the results
TU Dresden, August 2013
RDF and SPARQL
slide 9 of 63

Parts of the SPARQL 1.1 Speciﬁcation
• Query: extends the language constructs for SPARQL queries
• Update: modify an RDF graph (addition, deletion)
• Graph Store HTTP Protocol: HTTP operations for managing a collection
of graphs
• Entailment Regimes: query results with inferences
• Service Description: method for discovering, and vocabulary for
describing SPARQL services
• Federation Extensions: executing distributed queries
• Query Results JSON Format: query results in JSON format
• Query Results CSV, TSV Format: comma and tab separated results
format
TU Dresden, August 2013
RDF and SPARQL
slide 10 of 63

Simple Query
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
SELECT ?name ?mbox
WHERE { ?x foaf:name ?name .
?x foaf:mbox ?mbox }
TU Dresden, August 2013
RDF and SPARQL
slide 11 of 63

Simple Query
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
SELECT ?name ?mbox
WHERE { ?x foaf:name ?name .
?x foaf:mbox ?mbox }
• The condition of the WHERE clause is called a query pattern
TU Dresden, August 2013
RDF and SPARQL
slide 12 of 63

Simple Query
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
SELECT ?name ?mbox
WHERE { ?x foaf:name ?name .
?x foaf:mbox ?mbox }
• The condition of the WHERE clause is called a query pattern
• The triples (possibly) with variables are called a basic graph pattern
(BGP)
⇝BGPs use the Turtle syntax for RDF
⇝BGPs can contain variables (?variable/$variable)
TU Dresden, August 2013
RDF and SPARQL
slide 13 of 63

Simple Query
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
SELECT ?name ?mbox
WHERE { ?x foaf:name ?name .
?x foaf:mbox ?mbox }
• The condition of the WHERE clause is called a query pattern
• The triples (possibly) with variables are called a basic graph pattern
(BGP)
⇝BGPs use the Turtle syntax for RDF
⇝BGPs can contain variables (?variable/$variable)
• Abbreviated URIs are possible (PREFIX)
TU Dresden, August 2013
RDF and SPARQL
slide 14 of 63

Simple Query
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
SELECT ?name ?mbox
WHERE { ?x foaf:name ?name .
?x foaf:mbox ?mbox }
• The condition of the WHERE clause is called a query pattern
• The triples (possibly) with variables are called a basic graph pattern
(BGP)
⇝BGPs use the Turtle syntax for RDF
⇝BGPs can contain variables (?variable/$variable)
• Abbreviated URIs are possible (PREFIX)
• Query result for the selected variables (SELECT)
TU Dresden, August 2013
RDF and SPARQL
slide 15 of 63

Simple Query – Result
BGP: {?x foaf:name ?name .
?x foaf:mbox ?mbox}
@prefix foaf: http://xmlns.com/foaf/0.1/ .
_:a foaf:name "Birte Glimm" ;
foaf:mbox <mailto:b.glimm@googlemail.com> ;
foaf:icqChatID "b.glimm" ;
foaf:aimChatID "b.glimm" .
_:b foaf:name "Sebastian Rudolph" ;
foaf:mbox "sebastian.rudolph@tu-dresden.de" .
_:c foaf:name "Pascal Hitzler" ;
foaf:aimChatID "phi" .
foaf:icqChatID rdfs:subPropertyOf foaf:nick .
foaf:name rdfs:domain foaf:Person .
TU Dresden, August 2013
RDF and SPARQL
slide 16 of 63

Simple Query – Result
BGP: {?x foaf:name ?name .
?x foaf:mbox ?mbox}
@prefix foaf: http://xmlns.com/foaf/0.1/ .
_:a foaf:name "Birte Glimm" ;
foaf:mbox <mailto:b.glimm@googlemail.com> ;
foaf:icqChatID "b.glimm" ;
foaf:aimChatID "b.glimm" .
_:b foaf:name "Sebastian Rudolph" ;
foaf:mbox "sebastian.rudolph@tu-dresden.de" .
_:c foaf:name "Pascal Hitzler" ;
foaf:aimChatID "phi" .
foaf:icqChatID rdfs:subPropertyOf foaf:nick .
foaf:name rdfs:domain foaf:Person .
BGP matching results:
x
name
mbox
_ :a
"Birte Glimm"
<mailto:b.glimm@googlemail.com>
_ :b
"Sebastian Rudolph"
"sebastian.rudolph@tu-dresden.de"
TU Dresden, August 2013
RDF and SPARQL
slide 17 of 63

Simple Query – Result
PREFIX foaf:
<http://xmlns.com/foaf/0.1/>
SELECT ?name ?mbox
WHERE { ?x foaf:name ?name .
?x foaf:mbox ?mbox }
BGP matching results:
x
name
mbox
_ :a
"Birte Glimm"
<mailto:b.glimm@googlemail.com>
_ :b
"Sebastian Rudolph"
"sebastian.rudolph@tu-dresden.de"
Query results:
name
mbox
"Birte Glimm"
<mailto:b.glimm@googlemail.com>
"Sebastian Rudolph"
"sebastian.rudolph@tu-dresden.de"
TU Dresden, August 2013
RDF and SPARQL
slide 18 of 63

Basic Graph Patterns
The most basic query patterns are basic graph patterns
• Set of RDF triples in Turtle syntax
• Turtle abbreviations (such as , and ;) allowed
• Variables are preﬁxed by ? or $ (?x identiﬁes the same variable as $x)
• Variables can appear in subject, predicate, and object position
TU Dresden, August 2013
RDF and SPARQL
slide 19 of 63

Basic Graph Patterns
The most basic query patterns are basic graph patterns
• Set of RDF triples in Turtle syntax
• Turtle abbreviations (such as , and ;) allowed
• Variables are preﬁxed by ? or $ (?x identiﬁes the same variable as $x)
• Variables can appear in subject, predicate, and object position
permitted ̸= readable:
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
SELECT ?rf456df ?ac66sB
WHERE { ?h4dF8Q foaf:name ?rf456df .
?h4dF8Q foaf:mbox ?ac66sB }
(semantically equivalent to the previous query)
TU Dresden, August 2013
RDF and SPARQL
slide 20 of 63

Blank Nodes
What meaning do blank nodes have in SPARQL?
Blank nodes in query patterns:
• Permitted as subject or object (as in RDF)
• Arbitrary ID, but reuse in different BGPs within one query not permitted
• Act like variables, but cannot be selected
TU Dresden, August 2013
RDF and SPARQL
slide 21 of 63

Blank Nodes
What meaning do blank nodes have in SPARQL?
Blank nodes in query patterns:
• Permitted as subject or object (as in RDF)
• Arbitrary ID, but reuse in different BGPs within one query not permitted
• Act like variables, but cannot be selected
Blank nodes in results:
• Placeholder for unknown elements
• Arbitrary IDs (possibly different from the IDs in the input RDF graph), but
repeated occurrences in results denote the same element:
subj
value
_:a
"for"
_:b
"example"
subj
value
_:y
"for"
_:g
"example"
subj
value
_:z
"for"
_:z
"example"
TU Dresden, August 2013
RDF and SPARQL
slide 22 of 63

Datasets and FROM (NAMED)
• No FROM clause is required
• Each SPARQL service speciﬁes a dataset of one default graph and zero
or more named graphs
No FROM clause
⇝evaluation over the default graph
FROM NAMED in combination with the GRAPH keyword
⇝evaluation over a named graph
FROM clause
⇝creation of a fresh default graph for the query
TU Dresden, August 2013
RDF and SPARQL
slide 23 of 63

Example for Named Graphs
Query with FROM NAMED clause
SELECT ?g ?name ?mbox
FROM NAMED <http://ex.org/a>
FROM NAMED <http://ex.org/b>
WHERE {
GRAPH ?g
{ ?x foaf:name ?name.
?x foaf:mbox ?mbox }
}
TU Dresden, August 2013
RDF and SPARQL
slide 24 of 63

Datatypes
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix ex:
<http://example.org/> .
ex:ex1
ex:p
"test" .
ex:ex2
ex:p
"test"^^xsd:string .
ex:ex3
ex:p
"test"@en .
ex:ex4
ex:p
"42"^^xsd:integer .
Which matches does the following BGP have?
{
?subject
<http://example.org/p>
"test" . }
TU Dresden, August 2013
RDF and SPARQL
slide 25 of 63

Datatypes
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix ex:
<http://example.org/> .
ex:ex1
ex:p
"test" .
ex:ex2
ex:p
"test"^^xsd:string .
ex:ex3
ex:p
"test"@en .
ex:ex4
ex:p
"42"^^xsd:integer .
Which matches does the following BGP have?
{
?subject
<http://example.org/p>
"test" . }
⇝ex:ex1 is the only result
⇝Exact match for the datatypes is required
But: Abbreviations for numerical values allowed
{
?subject
<http://example.org/p>
42 . }
⇝The datatype is determined from the syntactic form
xsd:integer (42), xsd:decimal (42.2), xsd:double (1.0e6)
TU Dresden, August 2013
RDF and SPARQL
slide 26 of 63

Agenda
1
Introduction and Motivation
2
Simple SPARQL Queries
3
Complex Graph Pattern
4
Filters
5
Solution Modiﬁers
6
Output Formats
7
Conclusions & Outlook
TU Dresden, August 2013
RDF and SPARQL
slide 27 of 63

Group Graph Patterns
Basic graph patterns can be grouped by {. . . }.
Example:
PREFIX ex:
<http://example.org/>
SELECT ?titel ?author
WHERE
{ { ?book ex:publishedBy <http://springer.com>.
?book ex:titel ?titel . }
{ }
?book ex:author ?author .
}
⇝Only useful in combination with additional constructors
TU Dresden, August 2013
RDF and SPARQL
slide 28 of 63

Optional Patterns
The keyword OPTIONAL permits the speciﬁcation of optional parts for a graph
pattern.
Example:
{ ?book
ex:publishedBy
<http://springer.com> .
OPTIONAL { ?book ex:titel ?titel . }
OPTIONAL { ?book ex:author ?author . }
}
TU Dresden, August 2013
RDF and SPARQL
slide 29 of 63

Optional Patterns
The keyword OPTIONAL permits the speciﬁcation of optional parts for a graph
pattern.
Example:
{ ?book
ex:publishedBy
<http://springer.com> .
OPTIONAL { ?book ex:titel ?titel . }
OPTIONAL { ?book ex:author ?author . }
}
⇝Parts of the query result can be unbound:
book
titel
author
<http://ex.org/book1>
"Titel1"
<http://ex.org/author1>
<http://ex.org/book2>
"Titel2"
<http://ex.org/book3>
"Titel3"
_:a
<http://ex.org/book4>
_:a
<http://ex.org/book5>
TU Dresden, August 2013
RDF and SPARQL
slide 30 of 63

Alternative Patterns
The keyword UNION allows for specifying alternative parts for a pattern.
Example:
{ ?book ex:publishedBy <http://springer.com> .
{ ?book ex:author ?author . } UNION
{ ?book ex:editor ?author . }
}
⇝Results corresponds to the union of the results for the ﬁrst BGP with the
results for one of the additional BGPs
Remark: Identical variables within different UNION patterns do not inﬂuence
each other
TU Dresden, August 2013
RDF and SPARQL
slide 31 of 63

Combination of Optional and Alternatives (1)
How can we understand the combination of OPTIONAL and UNION?
Example
{ ?book ex:publishedBy
<http://springer.com> .
{ ?book ex:author ?author . } UNION
{ ?book ex:editor ?author . } OPTIONAL
{ ?author ex:surname ?name . } }
• The union of two patterns with appended optional pattern or
• The union of two patterns where the second one has an optional part?
TU Dresden, August 2013
RDF and SPARQL
slide 32 of 63

Combination of Optional and Alternatives (1)
How can we understand the combination of OPTIONAL and UNION?
Example
{ ?book ex:publishedBy
<http://springer.com> .
{ ?book ex:author ?author . } UNION
{ ?book ex:editor ?author . } OPTIONAL
{ ?author ex:surname ?name . } }
• The union of two patterns with appended optional pattern or
✓
• The union of two patterns where the second one has an optional part?
TU Dresden, August 2013
RDF and SPARQL
slide 33 of 63

Combination of Optional and Alternatives (1)
Example
{ ?book ex:publishedBy
<http://springer.com> .
{ ?book ex:author ?author . } UNION
{ ?book ex:editor ?author . } OPTIONAL
{ ?author ex:surname ?name . } }
is equivalent to
Example with explicit grouping
{ ?book ex:publishedBy <http://springer.com> .
{ { ?book ex:author ?author . } UNION
{ ?book ex:editor
?author . }
} OPTIONAL { ?author ex:surname ?name . } }
TU Dresden, August 2013
RDF and SPARQL
slide 34 of 63

Combination of Optional and Alternatives (2)
General Rules:
• OPTIONAL always applies to one pattern group, which is speciﬁed to right
of the keyword OPTIONAL.
• OPTIONAL and UNION have equal precedence and apply to all parts to
the left of the keyword (left associative).
TU Dresden, August 2013
RDF and SPARQL
slide 35 of 63

Combination of Optional and Alternatives (3)
Example
{ {s1 p1 o1} OPTIONAL {s2 p2 o2} UNION {s3 p3 o3}
OPTIONAL {s4 p4 o4} OPTIONAL {s5 p5 o5}
}
TU Dresden, August 2013
RDF and SPARQL
slide 36 of 63

Combination of Optional and Alternatives (3)
Example
{ {s1 p1 o1} OPTIONAL {s2 p2 o2} UNION {s3 p3 o3}
OPTIONAL {s4 p4 o4} OPTIONAL {s5 p5 o5}
}
Can be understood as:
Equivalent example with explicit grouping
{ { { { {s1 p1 o1} OPTIONAL {s2 p2 o2}
} UNION {s3 p3 o3}
} OPTIONAL {s4 p4 o4}
} OPTIONAL {s5 p5 o5}
}
TU Dresden, August 2013
RDF and SPARQL
slide 37 of 63

Agenda
1
Introduction and Motivation
2
Simple SPARQL Queries
3
Complex Graph Pattern
4
Filters
5
Solution Modiﬁers
6
Output Formats
7
Conclusions & Outlook
TU Dresden, August 2013
RDF and SPARQL
slide 38 of 63

Why Filters?
Many queries are not expressible, even with complex query patterns:
• “Which persons are between 18 and 23 years old?”
• “The surname of which person contains a hyphen?”
• “Which texts in the ontology are speciﬁed in German?”
⇝Filter as a general mechanism for such expressions
TU Dresden, August 2013
RDF and SPARQL
slide 39 of 63

Filter in SPARQL
Example:
PREFIX ex: <http://ex.org/>
SELECT ?book WHERE
{ ?book ex:publishedBy <http://springer.com> .
?book ex:price
?price
FILTER (?price < 35)
}
• Keyword FILTER, followed by a ﬁlter expression in brackets
• Filter conditions evaluate to truth values (and possibly errors)
• Many ﬁlter functions are not speciﬁed by RDF
⇝Functions partly taken from the XQuery/XPath-standard for XML
TU Dresden, August 2013
RDF and SPARQL
slide 40 of 63

Filter Functions: Comparisons
Comparison operators: <, =, >, <=, >=, !=
• Comparison of literals according to the natural order
• Support for numerical datatypes, xsd:dateTime, xsd:string
(alphabetical order), xsd:Boolean (1 > 0)
• For other types or RDF elements only = und != available
• No comparison between literals with incompatible types (e.g.,
xsd:string and xsd:integer)
TU Dresden, August 2013
RDF and SPARQL
slide 41 of 63

Filter Functions: Arithmetic
Arithmetic operators: +, -, *, /
• Support for numerical datatypes
• Used to combine values in ﬁlter conditions
Example
FILTER( ?weight/(?size * ?size) >= 25 )
TU Dresden, August 2013
RDF and SPARQL
slide 42 of 63

Filter Functions: Special Functions for RDF
(1)
SPARQL supports also RDF-speciﬁc ﬁlter functions:
BOUND(A)
true if A is a bound variable
isURI(A)
true if A is a URI
isBLANK(A)
true if A is a blank node
isLITERAL(A)
true if A is an RDF literal
STR(A)
the lexical form (xsd:string) of RDF literals or URIs
LANG(A)
language tag of an RDF literal (xsd:string) or empty string if
no language tag is given
DATATYPE(A)
datatyp URI of an RDF literal (xsd:string for untyped literals
without language tag)
TU Dresden, August 2013
RDF and SPARQL
slide 43 of 63

Filter Functions: Special Functions for RDF
(2)
Additional RDF speciﬁc ﬁlter functions:
sameTERM(A,B)
true, if A and B are the same RDF terms
langMATCHES(A,B)
true, if the language tag of A matches the pattern B
REGEX(A,B)
true, if the string A matches the regular expression B
Example:
PREFIX ex: <http://example.org/>
SELECT ?book WHERE
{ ?book
ex:review
?text .
FILTER ( langMATCHES( LANG(?text), "de") )
}
TU Dresden, August 2013
RDF and SPARQL
slide 44 of 63

Filter Functions: Boolean Operators
Filter conditions can be connected using Boolean operators: &&, ||, !
Partially expressible with graph patterns:
• Conjunction corresponds to multiple ﬁlters
• Disjunction corresponds to ﬁlter expressions speciﬁed in alternative
(UNION) patterns
TU Dresden, August 2013
RDF and SPARQL
slide 45 of 63

Agenda
1
Introduction and Motivation
2
Simple SPARQL Queries
3
Complex Graph Pattern
4
Filters
5
Solution Modiﬁers
6
Output Formats
7
Conclusions & Outlook
TU Dresden, August 2013
RDF and SPARQL
slide 46 of 63

Why solution modiﬁers?
So far, we have only seen basic formatting options for the results:
• How can we only receive parts of the results?
• How can we order results?
• Can we immediately eliminate duplicate results?
⇝Solution sequence modiﬁers
TU Dresden, August 2013
RDF and SPARQL
slide 47 of 63

Sorting Results
Sorting is achieved with the keyword ORDER BY
SELECT ?book, ?price
WHERE { ?book
<http://example.org/Price>
?price . }
ORDER BY ?price
TU Dresden, August 2013
RDF and SPARQL
slide 48 of 63

Sorting Results
Sorting is achieved with the keyword ORDER BY
SELECT ?book, ?price
WHERE { ?book
<http://example.org/Price>
?price . }
ORDER BY ?price
• Sorting as with comparison operators in ﬁlters
• Alphabetical sorting of URIs as strings
• Order between elements of different types:
unbound variables < blank nodes < URIs < RDF literals
• Not all possibilities deﬁned by the speciﬁcation
TU Dresden, August 2013
RDF and SPARQL
slide 49 of 63

Sorting Results
Sorting is achieved with the keyword ORDER BY
SELECT ?book, ?price
WHERE { ?book
<http://example.org/Price>
?price . }
ORDER BY ?price
• Sorting as with comparison operators in ﬁlters
• Alphabetical sorting of URIs as strings
• Order between elements of different types:
unbound variables < blank nodes < URIs < RDF literals
• Not all possibilities deﬁned by the speciﬁcation
Further possible options:
• ORDER BY DESC(?price): descending
• ORDER BY ASC(?price): ascending (default)
• ORDER BY DESC(?price), ?titel: hierarchical ordering criteria
TU Dresden, August 2013
RDF and SPARQL
slide 50 of 63

LIMIT, OFFSET and DISTINCT
Limit the set of results:
• LIMIT: Maximal number of results
• OFFSET: Position of the ﬁrst returned result
• SELECT DISTINCT: Removal of duplicate results
SELECT DISTINCT ?book, ?price
WHERE { ?book
<http://ex.org/price>
?price . }
ORDER BY ?price
LIMIT 5
OFFSET 25
⇝LIMIT and OFFSET only meaningful with ORDER BY!
TU Dresden, August 2013
RDF and SPARQL
slide 51 of 63

Agenda
1
Introduction and Motivation
2
Simple SPARQL Queries
3
Complex Graph Pattern
4
Filters
5
Solution Modiﬁers
6
Output Formats
7
Conclusions & Outlook
TU Dresden, August 2013
RDF and SPARQL
slide 52 of 63

Output Format SELECT
So far all results have been tables (solution sequences): Output format SELECT
Syntax: SELECT <VariableList> or SELECT *
Advantage
Simple sequential processing of the results
Disadvantage
Structure/relationships between the objects in the results is lost
TU Dresden, August 2013
RDF and SPARQL
slide 53 of 63

Output Format CONSTRUCT
CONSTRUCT creates an RDF graph for the results
Example Query
PREFIX ex: <http://example.org/>
CONSTRUCT { ?person
ex:mailbox
?email .
?person
ex:telephone
?tel . }
WHERE { ?person
ex:email
?email .
?person
ex:tel
?tel . }
TU Dresden, August 2013
RDF and SPARQL
slide 54 of 63

Output Format CONSTRUCT
CONSTRUCT creates an RDF graph for the results
Example Query
PREFIX ex: <http://example.org/>
CONSTRUCT { ?person
ex:mailbox
?email .
?person
ex:telephone
?tel . }
WHERE { ?person
ex:email
?email .
?person
ex:tel
?tel . }
Advantage
Structured result data with relationships between the elements
Disadvantages
• Sequential processing of the results is harder
• No treatment of unbound variables (triples are omitted)
TU Dresden, August 2013
RDF and SPARQL
slide 55 of 63

CONSTRUCT Templates with Blank Nodes
Data
@prefix
foaf:
<http://xmlns.com/foaf/0.1/> .
_:a foaf:firstname
"Alice" ;
foaf:surname "Hacker" .
_:b foaf:firstname
"Bob" ;
foaf:surname
"Hacker" .
TU Dresden, August 2013
RDF and SPARQL
slide 56 of 63

CONSTRUCT Templates with Blank Nodes
Data
@prefix
foaf:
<http://xmlns.com/foaf/0.1/> .
_:a foaf:firstname
"Alice" ;
foaf:surname "Hacker" .
_:b foaf:firstname
"Bob" ;
foaf:surname
"Hacker" .
Query
PREFIX foaf:
<http://xmlns.com/foaf/0.1/>
PREFIX vcard: <http://www.w3.org/2001/vcard-rdf/3.0#>
CONSTRUCT {
?x
vcard:N
_:v .
_:v vcard:givenName
?gname ;
vcard:familyName ?fname
} WHERE {
?x foaf:firstname ?gname .
?x foaf:surname
?fname
}
TU Dresden, August 2013
RDF and SPARQL
slide 57 of 63

CONSTRUCT Templates with Blank Nodes
Resulting RDF graph
@prefix vcard: <http://www.w3.org/2001/vcard-rdf/3.0#> .
_:v1 vcard:N
_:x .
_:x
vcard:givenName
"Alice" ;
vcard:familyName "Hacker" .
_:v2 vcard:N
_:z .
_:z
vcard:givenName
"Bob" ;
vcard:familyName "Hacker" .
TU Dresden, August 2013
RDF and SPARQL
slide 58 of 63

Further Output Formats: ASK & DESCRIBE
SPARQL supports two additional output formats:
• ASK only checks whether the query has at least one answer (true/false
result)
• DESCRIBE (informative) returns an RDF description for each resulting
URI (application dependent)
Example Query
DESCRIBE ?x WHERE { ?x <http://ex.org/emplID> "123" }
Possible Result (preﬁx declarations omitted):
_:a
exOrg:emplID
"123" ;
foaf:mbox_sha1sum
"ABCD1234" ;
vcard:N
[ vcard:Family
"Smith" ;
vcard:Given
"John"
] .
foaf:mbox_sha1sum
a
owl:InverseFunctionalProperty .
TU Dresden, August 2013
RDF and SPARQL
slide 59 of 63

Agenda
1
Introduction and Motivation
2
Simple SPARQL Queries
3
Complex Graph Pattern
4
Filters
5
Solution Modiﬁers
6
Output Formats
7
Conclusions & Outlook
TU Dresden, August 2013
RDF and SPARQL
slide 60 of 63

Overview of the Presented SPARQL
Features
Basic Structure
PREFIX
WHERE
Graph Patterns
Basic Graph Patterns
{. . . }
OPTIONAL
UNION
Filter
BOUND
isURI
isBLANK
isLITERAL
STR
LANG
DATATYPE
sameTERM
langMATCHES
REGEX
Modiﬁers
ORDER BY
LIMIT
OFFSET
DISTINCT
Output Formats
SELECT
CONSTRUCT
ASK
DESCRIBE
TU Dresden, August 2013
RDF and SPARQL
slide 61 of 63

Summary
• We have encountered the main SPARQL 1.0 features through examples
– Basic structures (preﬁxes, patterns)
– Simple and complex patterns (alternatives, optional parts, groups
– Filters
– Modiﬁers
• Semantics is deﬁned via translation to the SPARQL algebra
• So far only informally introduced
TU Dresden, August 2013
RDF and SPARQL
slide 62 of 63

Outlook
Open Questions
• How does the algebra translation work?
• How can we evaluate SPARQL algebra objects?
• What extensions does SPARQL 1.1 cover?
• How does the SPARQL protocol work?
• How can we query for implicit consequences that follow under RDF(S) or
OWL semantics?
• How difﬁcult is it to implement SPARQL (with entailment)?
• . . .
TU Dresden, August 2013
RDF and SPARQL
slide 63 of 63

