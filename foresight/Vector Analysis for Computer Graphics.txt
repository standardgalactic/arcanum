
Vector Analysis for Computer Graphics

John Vince
Vector Analysis for
Computer Graphics

John Vince, MTech, PhD, DSc
Emeritus Professor in Digital Media
Bournemouth University
UK
British Library Cataloguing in Publication Data
A catalogue record for this book is available from the British Library
Library of Congress Control Number: 2007923171
ISBN 978-1-84628-803-6
e-ISBN 978-1-84628-804-3
Printed on acid-free paper
© Springer-Verlag London Limited 2007
Apart from any fair dealing for the purposes of research or private study, or criticism or review, as permitted under the
Copyright, Designs and Patents Act 1988, this publication may only be reproduced, stored or transmitted, in any form
or by any means, with the prior permission in writing of the publishers, or in the case of reprographic reproduction
in accordance with the terms of licences issued by the Copyright Licensing Agency. Enquiries concerning reproduction
outside those terms should be sent to the publishers.
The use of registered names, trademarks, etc. in this publication does not imply, even in the absence of a specific
statement, that such names are exempt from the relevant laws and regulations and therefore free for general use.
The publisher makes no representation, express or implied, with regard to the accuracy of the information contained
in this book and cannot accept any legal responsibility or liability for any errors or omissions that may be made.
9 8 7 6 5 4 3 2 1
Springer Science+Business Media
springer.com

Dedication
This book is affectionately dedicated to my expanding family: Annie, Samantha, Anthony,
Genny, Peter, Megan, and Monty.

Preface
In my last book, Geometry for Computer Graphics, I employed a mixture of algebra and vector
analysis to prove many of the equations used in computer graphics. At the time, I did not
make any distinction between the two methodologies, but slowly it dawned upon me that I
had had to discover, for the first time, how to use vector analysis and associated strategies
for solving geometric problems. I suppose that mathematicians are taught this as part of their
formal mathematical training, but then, I am not a mathematician!
After some deliberation, I decided to write a book that would introduce the beginner to the
world of vectors and their application to the geometric problems encountered in computer
graphics. I accepted the fact that there would be some duplication of formulas between this and
my last book; however, this time I would concentrate on explaining how problems are solved.
The book contains eleven chapters: The first chapter distinguishes between scalar and vector
quantities, which is reasonably straightforward. The second chapter introduces vector represen-
tation, starting with Cartesian coordinates and concluding with the role of direction cosines in
changes in axial systems. The third chapter explores how the line equation has a natural vector
interpretation and how vector analysis is used to resolve a variety of line-related, geometric
problems. Chapter 4 repeats Chapter 3 in the context of the plane.
At this point in the book, the reader has enough knowledge to tackle some standard problems
encountered in ray tracing, such as reflections (Chapter 5) and intersections (Chapter 6).
Quaternions are the subject of Chapter 7, which is where I show how the clever combination
of a scalar and a vector creates an object capable of rotating points about an arbitrary axis.
Chapter 8 introduces the idea of differentiating vector quantities, which are needed later
on when we tackle bump mapping. Chapter 9 shows how vector analysis is used to describe
projections, especially when the projection plane is oblique to the viewer’s line of sight. Chapter
10 examines Gouraud and Phong shading as well as bump mapping, all of which utilize vectors
as part of their algorithms. Finally, the book concludes with a short chapter on motion.
After reading this book, the reader should have a good understanding of how to employ
vector analysis in solving a variety of geometric problems. I have found that the diagram used
to summarize a problem’s geometry often determines whether the solution drops out in a few
lines or runs over several pages. For example, finding the formula for spherical interpolation
involves the sine rule. And as you will discover in Chapter 7, the solution is extremely simple.
However, if you start with the wrong diagram, the proof explodes into an algebraic nightmare!
vii

viii
Preface
I could not have written this book without the help of the books and papers cited in the
reference section and the bibliography. And seeing how other authors approach problem solving
has been very instructive, and I openly acknowledge their contribution.
I would like to thank my friends at Springer, Helen Desmond and Beverley Ford, for their
regular emails (and lunches) asking when the manuscript would be ready. Without these
reminders, the manuscript would still be sitting on my C drive! Thanks to them, it is in front
of you, and I hope that you enjoy reading it and will refer to it from time to time.
John Vince
Ringwood

Contents
Preface. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
vii
1
Scalars and Vectors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
1
1.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
1
1.2
Representing vector quantities . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
1
1.3
Non-collinear vectors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
7
2
Vector Representation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
11
2.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
11
2.2
Cartesian coordinates . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
11
2.3
Vector notation. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
13
2.4
Length of a vector . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
13
2.5
Vector algebra. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
14
2.6
Unit vectors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
17
2.7
Rectangular unit vectors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
18
2.8
Position vectors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
19
2.8.1
Problem 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
19
2.8.2
Problem 2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
20
2.8.3
Problem 3 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
21
2.9
Vector products . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
22
2.9.1
Scalar product . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
22
2.9.2
Vector product. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
27
2.9.3
Surface normals. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
33
2.9.4
The algebra of vector products . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
34
2.10 Triple products . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
36
2.10.1 Scalar triple product . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
36
2.10.2 The vector triple product . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
41
ix

x
Contents
2.11 Perpendicular vectors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
44
2.12 Interpolating vectors. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
48
2.12.1 Linear interpolation. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
48
2.12.2 Spherical interpolation. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
49
2.13 Direction cosines . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
52
2.14 Change of axial system . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
54
2.15 Summary. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 57
3
Straight Lines . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
61
3.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
61
3.2
The parametric form of the line equation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
61
3.3
The Cartesian form of the line equation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
65
3.4
The general form of the line equation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
68
3.5
2D space partitioning . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
69
3.6
A line perpendicular to a vector . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
74
3.7
The position and distance of a point on a line perpendicular to the origin . . .
77
3.7.1
The Cartesian form of the line equation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
78
3.7.2
The parametric form of the line equation . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
80
3.8
The position and distance of the nearest point on a line to a point . . . . . . . . . .
81
3.8.1
The Cartesian form of the line equation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
82
3.8.2
The parametric form of the line equation . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
84
3.9
The position of a point reflected in a line . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
86
3.9.1
The Cartesian form of the line equation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
86
3.9.2
The parametric form of the line equation . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
88
3.10 A line perpendicular to a line through a point . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
89
3.10.1 The parametric form of the line equation . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
90
3.11 A line equidistant from two points . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
93
3.12 The equation of a line segment . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
94
3.13 The intersection of two straight lines . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
94
3.14 The point of intersection of two 2D line segments . . . . . . . . . . . . . . . . . . . . . . . . . .
97
4
The Plane . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101
4.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101
4.2
The Cartesian form of the plane equation. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101
4.3
The parametric form of the plane equation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 103
4.4
A plane equation from three points . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 104

Contents
xi
4.5
A plane perpendicular to a line and passing through a point . . . . . . . . . . . . . . . . 106
4.6
A plane through two points and parallel to a line . . . . . . . . . . . . . . . . . . . . . . . . . . . 108
4.7
3D space partitioning . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 110
4.8
The angle between two planes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 113
4.9
The angle between a line and a plane . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 114
4.10 The position and distance of the nearest point on a plane to a point . . . . . . . . 115
4.11 The reflection of a point in a plane . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 118
4.12 A plane between two points . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 120
5
Reflections . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 123
5.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 123
5.2
A line reflecting off a line . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 123
5.3
A line reflecting off a plane . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 126
6
Intersections . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 129
6.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 129
6.2
Two intersecting lines in R2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 130
6.3
A line intersecting a circle in R2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 133
6.4
A line intersecting an ellipse in R2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 138
6.5
The shortest distance between two skew lines in R3 . . . . . . . . . . . . . . . . . . . . . . . . 140
6.6
Two intersecting lines in R3 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 142
6.7
A line intersecting a plane . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 144
6.8
A line intersecting a sphere . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 146
6.9
A line intersecting an ellipsoid . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 149
6.10 A line intersecting a cylinder . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 152
6.11 A line intersecting a cone . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 158
6.12 A line intersecting a triangle . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 160
6.13 A point inside a triangle . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 166
6.14 A sphere intersecting a plane . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 167
6.15 A sphere touching a triangle . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 172
6.16 Two intersecting planes. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 175

xii
Contents
7
Rotating Vectors. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 179
7.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 179
7.2
Rotating a vector about an arbitrary axis. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 179
7.3
Complex numbers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 182
7.3.1
Complex number operations. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 183
7.3.2
Magnitude of a complex number . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 184
7.3.3
The complex conjugate. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 184
7.3.4
Graphical interpretation of complex numbers. . . . . . . . . . . . . . . . . . . . . . . . . 185
7.3.5
i as a rotator. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 185
7.3.6
Unifying e, i, sin, and cos. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 186
7.3.7
Complex numbers as rotators. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 187
7.4
Quaternions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 188
7.5
Quaternions as rotators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 190
7.6
The complex conjugate of a quaternion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 192
7.7
The norm of a quaternion. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 193
7.8
Inverse of a quaternion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 195
7.9
Rotating vectors using quaternions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 195
7.10 Representing a quaternion as a matrix. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 197
8
Vector Differentiation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 201
8.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 201
8.2
The derivative of a vector . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 201
8.3
The normal vector to a planar curve . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 204
8.4
The normal vector to a surface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 206
9
Projections . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 213
9.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 213
9.2
Perspective transform. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 213
9.2.1
Horizontally oblique projection plane. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 214
9.2.2
Vertically oblique projection plane. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 217
9.2.3
Arbitrary orientation of the projection plane. . . . . . . . . . . . . . . . . . . . . . . . . . 219
9.3
Pseudo fish-eye projection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 223
10 Rendering . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 225
10.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 225
10.2 Light sources . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 225
10.3 Local reflection models . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 227

Contents
xiii
10.4 Shading . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 230
10.5 Bump mapping. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 231
11 Motion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 241
11.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 241
11.2 Close encounters of the first kind . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 241
11.3 Close encounters of the second kind . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 243
Appendix A . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 247
Appendix B . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 249
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 253
Further Reading . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 255
Index . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 257

1 Scalars and Vectors
1.1 Introduction
Over thousands of years humans have developed various ways of counting things, whether they
were oxen, days, trees, or stars. Various symbols, or strings of symbols, such as 9 or IX, have
enabled us to count, record, compare, or communicate the number of things to our fellow
human beings—such quantities are called scalars.
Initially, the natural numbers (1, 2, 3, 4 ) were sufficient to count most things, but eventually
the class of integers emerged, which embraced the concepts of zero and negative numbers.
Today we employ integers to count populations, real numbers to record the temperature, and
transcendental numbers to express , e, and trigonometric functions.
Scalar quantities embrace most things in our everyday lives such as height, age, temperature,
page numbers, mass, distance, and tax rates. However, some things cannot be defined or
measured by a single number. For instance, velocity or force requires a magnitude and a
direction. So, too, does weight, which arises through one mass attracting another. In the case
of objects on the earth, weight is determined by the object’s mass and the earth’s mass and is
directed towards the earth’s centre. The same object on the moon weighs less and is directed
towards the moon’s centre.
A natural step would be to employ two or more scalars to record such quantities, which
is what happened about 150 years ago. After considerable debate, the term vector emerged to
describe quantities possessing magnitude and direction, and a simple, yet powerful algebra was
established to analyse and solve some challenging geometric problems.
1.2 Representing vector quantities
We can approach the subject of vectors from two directions: one employs an axiomatic basis;
the second is intuitive. The axiomatic approach begins by defining the meaning of a vector space
and the objects (vectors) that are members of this space, together with the axioms describing
their manipulation. The intuitive approach is much more visual and uses directed or oriented
1

2
Vector analysis for computer graphics
line segments to explain how vectors work. The second approach provides a rapid entry into
the subject and will be sufficient for most readers. Appendix A provides a formal description
of vectors for those readers who desire it.
Before vector notation was developed, problems involving forces were resolved using line
segments, and forces were added together using the parallelogram rule shown in Fig. 1.1.
force B
force A
force A + B
Figure 1.1.
The idea of using line segments to represent vectors has dominated the evolution of vector
analysis, although it must be noted that some mathematicians have no need of such visual aids
when they enter multi-dimensional worlds of abstract vector spaces! Fortunately for us, all of the
problems considered in the following chapters are based upon simple two- or three-dimensional
line segments.
A line segment is a perfect graphic for representing a vector, because its length represents
magnitude, and its orientation represents direction. Figure 1.2 shows three identical vectors. They
are identical because their length and orientation are equal, and their positions are irrelevant.
Figure 1.2.
The line segments in Fig. 1.2 have arrow heads, which define the vector’s direction. Without
the arrow the line segment could be pointing in either direction. Thus, a directed line segment
is required to provide an unambiguous description of a vector.
Let us develop a notation for these line segments, one that will reflect the axioms that
underpin vector algebra.
Figure 1.3(a) shows two points, A and B, connected by a line with an arrow pointing in the
direction from A to B. This directed line segment is labeled −→
AB, where the arrow in the diagram
confirms the direction from A to B, and the arrow on top of AB reminds us that it is a vector
quantity.

Scalars and vectors
3
B
A
(a)
(b)
AB
A
B
BA
Figure 1.3.
If the line segment’s arrow was pointing in the opposite direction, as shown in Fig. 1.3(b), it
would be labeled −→
BA. What, then, is the difference between the two line segments −→
AB and −→
BA?
Well, the distance between the points is the same; just the direction has changed, and we can
accommodate this difference by introducing a negative sign. For example,
−→
BA = −−→
AB
or conversely
−→
AB = −−→
BA
The effect of the minus sign effectively switches the letters labeling the points.
If we adopt this notation, the following statements are valid descriptions of other line
segments:
−→
AC = −−→
CA
and
−−→
BC = −→
CB
The idea of following a path from one point to another is very useful when we begin solving
problems with vectors. Along this path we identify the line segments (vectors) that locate some
point, which eventually reveals the thing we are looking for.
Let’s introduce a third point, C, and annotate the line segments as shown in Fig. 1.4.
AB
AC
A
B
C
BC
Figure 1.4.

4
Vector analysis for computer graphics
We can move from A to C directly or indirectly. The direct path is −→
AC, and the indirect path
is via B, i.e., −→
AB+−→
BC. Since both paths take us from A to C, we declare them equivalent, even
though the Euclidean distances are not the same. Thus, we can state
−→
AC = −→
AB +−→
BC
(1.1)
or, going the opposite way,
−−→
AC = −−→
AB −−→
BC
You may have noticed from Eq. (1.1) that the letters A and C in −→
AC are the first and last letters
in −→
AB + −→
BC. The Bs have effectively been cancelled. This pattern occurs frequently when we
manipulate these labels.
AB
BC
AC
A
B
C
D
AD
DC
BD
Figure 1.5.
Finally, let’s add a fourth point, D, as shown in Fig. 1.5. The line segments connecting A B,
and C have not changed, but we have introduced line segments −→
AD −→
BD, and −→
DC, which open
up paths between any two points directly or indirectly. Although there may only be one direct
route, there can be many indirect routes. For example, we can move from A to B in two ways:
A to C and then C to B
or
A to D and then D to B
But wait! We can also go from A to B via C and then D. But hold on! We can also go from
A to B via D and then C, i.e., A to D D to C and then C to B.
They are all valid paths, and as more and more points are added, the number of indirect
paths increases. But should we worry about all these indirect routes? Well, the answer is no.
What is important is that we have a way of annotating a route, and this is influenced by the
labels originally assigned to the line segments. For example, if we want to move from Q to P
but the connecting line segment is labeled −→
PQ, then we use −−→
PQ to represent −→
QP. When we

Scalars and vectors
5
come to apply these techniques to real vectors, we will discover that some directions are more
convenient than others.
Defining a line segment using −→
AB or −−→
BA is a useful notation we shall continue to employ.
However, we can also give names to line segments, such as a n, or q. Note that the boldface
type differentiates a vector’s name from the more familiar names given to scalar quantities such
as x y, or t. This is a widely accepted notation for referencing vectors and enables us to create
diagrams such as the one shown in Fig. 1.6.
r
s
t
m
n
Figure 1.6.
From Fig. 1.6 we can make the following observations:
r = s +t
s = m −n
and
t = n −m +r
One problem-solving strategy we use later on creates a chain of indirect vectors that eventually
reveals the vector on the direct route. Such a situation is shown in Fig. 1.7, which permits us
to write
p = r +s+t −n
p
r
s
t
n
Figure 1.7.
You may be wondering why the vector n is reversed in Fig. 1.7. Why isn’t it pointing in the
same direction as r s, and t? Well, when we come to labeling our vectors, certain directions
are more convenient than others, which gives rise to such conflicts. However, it is nothing to
worry about, because a simple minus sign resolves the problem.

6
Vector analysis for computer graphics
The notation being developed here is very similar to that used in algebra. Indeed, vector
algebra is virtually identical to ordinary algebra, apart from a couple of things that we will
consider later on. For example, in algebra we can reason that if
x = 2+b
and
b = c +d
then
x = 2+c +d
Similarly, if
x = −6
then
−x = 6
We also know from algebra that if
x = 10+b
then
10 = x −b
So, can similar rules be used in vector algebra? Indeed, they can.
As we now know how to encode and interpret vector diagrams, let us see how we can identify
points along a vector. Consider, then, the vector r, as shown in Fig. 1.8. If vector t has an
identical orientation but is half the length of r, we can state
t = 1
2r
t
r
Figure 1.8.
But we could also reason that r = 2t, which is true and valid. And in general, we can state that
r = p

Scalars and vectors
7
where  is any scalar quantity. Therefore, we must get used to statements such as
p = 2r −3s
These scalar multipliers provide a useful problem-solving strategy, as we shall see in later
chapters.
When we add scalar quantities, we know that their sequence has no effect on the final result.
For example, 2+6 = 8 and 6+2 = 8. Fortunately, this is the same for vectors. For instance, if
r = s + t, then we can also state that r = t + s. This is shown graphically in Fig. 1.9(a), which
illustrates the meaning of r = s + t. But equally, we can reverse the vector sequence to create
r = t +s, as shown in Fig. 1.9(b).
r
s
t
(b)
(a)
r
s
t
Figure 1.9.
When we subtract scalar quantities, their sequence is important. For example, 2−6 = −4, but
6−2 = +4. However, if we consider adding positive and negative scalar quantities together, we
find that 2+−6 = −4 and −6+2 = −4. This, too, has a vector equivalent, and it is worth
investigating how this combination is represented graphically.
The operation r = s+t is shown in Fig. 1.9(a), but to draw r = s−t, it is best to consider it
as r = s+−t, as shown in Fig. 1.10. The process involves drawing the vector t, reversing it to
create −t, and adding s to −t.
s
r = s – t
s + t
t
−t
Figure 1.10.
1.3 Non-collinear vectors
When two vectors are collinear, we imply that the vectors possess the same orientation but
could have different lengths. It means that one vector must be a scalar multiple of the other.
If two vectors are non-collinear, then it is impossible for one to be a scalar multiple of the

8
Vector analysis for computer graphics
other. For example, Fig. 1.11 shows triangle ABC constructed from three non-collinear vectors:
r = −→
AB s = −→
BC, and r+s = −→
AC. Superimposed is another triangle ADE with ar = −→
AD bs = −→
DE,
and ar + bs = −→
AE, where a and b are scalars. The vectors ar and bs are also non-collinear,
because −→
AD is parallel to −→
AB, and −→
DE is parallel to −→
BC. This is written formally as −→
AD  −→
AB and
−→
DE  −→
BC, where the symbol  means parallel to.
C
r
s
r + s
ar
ar + bs
bs
D
E
A
B
Figure 1.11.
Examine Fig. 1.11 very carefully and note that the route −→
AE is unique. For no matter how we
scale the vectors r and s, and add them together, their sum will always produce a different
resultant vector. If we want to move from A to E, only one pair of scalars exists to scale r and
s. This means that if ever we encounter a statement such as
ar +bs = cr +ds
where r and s are non-collinear, it can only mean one thing: a = c and b = d. It is worth
dwelling on this point until you really appreciate why this is so. This condition only applies
to non-collinear vectors. However, such vector combinations are very common, and play an
important role in problem solving.
We now know enough vector algebra to solve some simple geometric problems. So, consider
proving that the opposite sides of a parallelogram are equal. We begin with the parallelogram
ABCD shown in Fig. 1.12, where r = −→
AB and s = −→
AD. But as AB  DC and AD  BC, we can
conjecture that −→
DC = ur and −→
BC = vs, where u and v are scalars.
A
B
C
D
s
vs
r
ur
AC
Figure 1.12.

Scalars and vectors
9
We can now define the direct path −→
AC in terms of two indirect paths:
−→
AC = −→
AB+−→
BC
and
−→
AC = −→
AD +−→
DC
therefore,
−→
AB+−→
BC = −→
AD +−→
DC
Or, using vector names,
r +vs = s+ur
Because these vectors are not collinear, we can equate coefficients and state that
1 = u and v = 1
If u = 1 and v = 1, −→
AB = −→
DC and −→
AD = −→
BC, which means that their lengths are equal. Hence
we have proved that the opposite sides of a parallelogram are equal.
Let’s try another example and prove that the diagonals of a parallelogram bisect each other.
A
B
C
D
s
s
r
r
E
Figure 1.13.
Figure 1.13 shows a parallelogram ABCD formed from the vectors r and s, where r = −→
AB = −→
DC
and s = −→
AD = −→
BC. We can see that
−→
AC = r +s
(1.2)
and
−→
DB = r −s
(1.3)
We observe that the diagonals intersect at E, which means that −→
AE and −→
AC are collinear.
Therefore, we can state
−→
AE = −→
AC
(1.4)
where  is some scalar.

10
Vector analysis for computer graphics
Similarly, we can state that
−→
DE = 	−→
DB
(1.5)
where 	 is some scalar.
We now want to prove that  = 1
2 and 	 = 1
2. We begin by rewriting (1.4) substituting (1.2):
−→
AE = r +s = r +s
(1.6)
We can also rewrite (1.5) substituting (1.3):
−→
DE = 	r −s = 	r −	s
(1.7)
So, now we know −→
AE and −→
DE. But we want a third equation that associates −→
AE with −→
DE. Looking
at Fig. 1.13, we see that in the triangle AED we have
−→
AE = −→
AD +−→
DE = s +−→
DE
(1.8)
Therefore, substituting Eqs. (1.6) and (1.7) in Eq. (1.8), we obtain
r +s = s+	r −	s
and
r +s = 	r +1−	s
Now we have an equation linking , 	, r, and s. But as r and s are non-collinear, we can equate
coefficients: therefore,
 = 	 and  = 1−	
which means that
	 = 1−	
and
	 = 1
2
Also,
 = 1
2
Therefore, the diagonals of a parallelogram bisect each other.
The time has now come to formalize these concepts and see how vectors can be encoded
using Cartesian coordinates.

2 Vector
Representation
2.1 Introduction
Vectors appeared in the mid-19th century, by which time analytic geometry had become
established, especially the use of Cartesian coordinates. Consequently, it was a simple step to
develop a numerical framework to represent vectors using Cartesian coordinates.
2.2 Cartesian coordinates
Figure 2.1 shows how this system works. The figure shows a vector with its tail located at
11 and its head located at 32. The words “head” and “tail” are often used to describe the
two ends of a vector, with the head always associated with the direction of the vector’s arrow.
Cartesian coordinates provide a mechanism for representing a vector in terms of its horizontal
and vertical Cartesian components. We can see that the horizontal component of the vector is
Y
1
1
2
2
3
3
4
X
2
1
Figure 2.1.
11

12
Vector analysis for computer graphics
obtained by subtracting the corresponding tail coordinates from the head coordinates: 3−1 = 2,
and its vertical component is obtained by subtracting 2−1 = 1.
From the mid-19th to mid-20th centuries, two methods appeared to combine the x
(horizontal) and y (vertical) components: one technique places the components as an ordered
pair as x
y, and the other places them as
 x
y

. The former is called a row vector, while the
latter is known as a column vector. In this text, we employ column vectors. However, when a
column vector is referred to within a block of text, it is written as
x
yT, which depicts a
transposed row vector, i.e., a column vector, which saves space on the printed page.
No restrictions are placed upon vectors — they can be any length and point in any direction.
However, as vectors are often computed from other vectors, it is possible to create a vector
with no length — such a vector is called a null or zero vector. Figure 2.2 shows four vectors
labeled abc, and d, and Table 2.1 summarises their head and tail coordinates and x and y
components.
Y
1
1
2
2
3
3
4
X
a
b
c
d
Figure 2.2.
Table 2.1
Vector
Head coordinates
Tail coordinates
x component
y component
a
02
33
−3
−1
b
43
22
2
1
c
12
10
0
2
d
31
21
1
0
Thus, the vectors are
a =
−3
−1

b =
2
1

c =
0
2

d =
1
0



Vector representation
13
X
Y
Z
y
x
z
v
Figure 2.3.
So far our definition of a vector accommodates a 2D line segment but also embraces three-
dimensional line segments. For example, Fig. 2.3 shows a 3D line segment with its Cartesian
components, where the vector v is represented by
v =
⎡
⎣
x
y
z
⎤
⎦
Thus, a 2D vector has two components and a 3D vector has three components, which comprise
an ordered triple of its Cartesian components.
A vector’s orientation and length are determined completely by the sign and value of its
Cartesian components. Fortunately, the length of any line segment is readily revealed by the
theorem of Pythagoras; but we also require a way of expressing this symbolically.
2.3 Vector notation
Boldface type is used for vector names. This is a universal convention and helps distinguish
scalars xyzrsst  from vectors abcdnpq. However, when we are dealing
with a line segment formed from two points, such as A and B, the associated vector is annotated
as −→
AB or AB, which represents a vector with its tail at A and head at B.
2.4 Length of a vector
We know that scalars can be positive or negative, and when we are only interested in the
absolute value of a scalar s (i.e., sign independent), we use the notation s , which effectively
strips away its sign. The same notation is used to represent the length of a vector, i.e., a . It
is also possible to use
−→
AB
 or AB. Just to confuse matters, double vertical lines can be used

14
Vector analysis for computer graphics
instead of single lines:
−→
AB
 or AB, which is the convention used in this text to distinguish
it from the scalar operation.
If a 2D vector v is given by
v =
x
y

its length is given by
v  =

x2 +y2
Similarly, if a 3D vector is given by
v =
⎡
⎣
x
y
z
⎤
⎦
its length is given by
v  =

x2 +y2 +z2
These calculations are based upon the theorem of Pythagoras and are illustrated in Fig. 2.4.
X
Y
v
v
x
y
Y
X
Z
x
y
z
v
v
Figure 2.4.
The length of a vector is a scalar. Thus, v  is a scalar and can be used alongside any other
scalar and manipulated in a similar manner.
Let us now proceed in developing an algebra that shows how vectors are manipulated
arithmetically and integrated with scalars. It is convenient to illustrate this in two dimensions,
but the principles also apply to three dimensions.
2.5 Vector algebra
Reversing the sign of a scalar is achieved by multiplying it by −1. For example, −1×+3 = −3
and −1×−3 = 3. Similarly, a vector’s direction is reversed by multiplying its components by
−1. For example, if
v =
1
2


Vector representation
15
then
−v =
−1
−2


Figure 2.5 shows the graphic interpretation of this sign reversal.
v
Y
1
1
2
2
3
X
–v
Y
1
1
2
2
3
X
Figure 2.5.
A vector can be multiplied by any positive or negative scalar to make it larger or smaller. For
example, we could double a vector by multiplying it by 2: given
v =
1
2

then
2v =
2
4

and
1
2v =
 1
2
1


Equally, vector addition and subtraction obey the same rules as scalars. For example, given two
vectors
v =

1
2

and w =

2
1

then
v +w =
1+2
2+1

=
3
3


In contrast,
v −w =
1−2
2−1

=
−1
1


16
Vector analysis for computer graphics
and
w −v =
2−1
1−2

=
 1
−1


Vector addition and subtraction also have a simple graphical interpretation. In fact, vector
addition uses the parallelogram rule shown in Fig. 1.1. Figure 2.6 illustrates how vectors v and
w are added together. It is obvious that the components of the vector addition are obtained
by adding the individual components together. Remember that these vectors do not have any
absolute position and can be positioned anywhere in space.
Y
1
1
2
2
3
3
4
X
v
v + w
w
Figure 2.6.
Vector subtraction is illustrated in Fig. 2.7. To simplify the process, it is best to regard v −w as
v +−w.
v
v – w
w
−w
Y
1
1
2
2
3
3
4
X
Figure 2.7.

Vector representation
17
The multiplication and division of two vectors are not so obvious. To begin with, dividing one
vector by another does not seem to mean anything and has no definition, whereas vectors can
be multiplied together in two ways, and we explore these products later.
The laws associated with scalars are simple and very familiar. Fortunately, the same laws
apply to vectors; the only difference between the two systems is in the product of two vectors,
which have still to be covered. Table 2.2 gives examples of the two systems.
Table 2.2
Law
Scalar algebra
Vector algebra
Commutative law for addition
a +b = b +a
a +b = b+a
Associative law for addition
a +b +c = a +b+c
a +b+c = a +b+c
Commutative law for multiplication
ab = ba
ab = ba
Associative law for multiplication
a bc = abc
a bc = abc
Distributive law for multiplication
a +bc = ac +bc
a b+c = ab+ac
a+bc = ac +bc
ab+c = ab+ac
2.6 Unit vectors
A unit vector has a length of 1. Unit vectors greatly simplify problem solving; therefore, we
should understand how they are created.
For example, if v =
x
y T and is a unit vector, we are implying that v  = 1, i.e.,

x2 +y2 = 1. It is normally written as ˆn, where the circumflex reminds us of the vector’s unit
length. We already know that a vector’s length can be controlled by a scaling factor. Therefore,
any vector has to be some multiple of a unit vector:
v = ˆv
But, surely,  = v . Therefore, we can write
v = v  ˆv
which leads us to
ˆv =
v
v 
For example, given
v =
3
4

we can make it a unit vector by dividing its components by v , which, in this case, is
√
32 +42 = 5
i.e.,
ˆv =
06
08



18
Vector analysis for computer graphics
2.7 Rectangular unit vectors
A very powerful feature of vector algebra emerges from the previous definition of a vector, in that it
is possible to express a vector as the sum of unit vectors aligned with the rectangular Cartesian axes.
The following description moves to three dimensions but is equally applicable in two dimensions.
Note also that throughout this text we will employ a right-handed system of 3D axes.
 
X
Y
Z
i
j
k
Figure 2.8.
We begin by defining three rectangular unit vectors i, j, and k, parallel with the x-, y-, and z-
rectangular Cartesian axes, respectively, as shown in Fig. 2.8, where
i =
⎡
⎣
1
0
0
⎤
⎦
j =
⎡
⎣
0
1
0
⎤
⎦
k =
⎡
⎣
0
0
1
⎤
⎦
Consequently, any vector v =

a
b
c
T can be written as
v = ai +bj+ck
which provides us with a simple algebraic mechanism for manipulating vectors.
For example, we can reverse v:
−v = −ai −bj−ck
We can double the length of v:
2v = 2ai +2bj+2ck
And if we have two vectors,
v = 2i +3j+4k
and
w = 5i +6j+7k
we can add them together:
v +w = 2i +3j+4k+5i +6j+7k = 7i +9j+11k
Soon we will discover how to multiply two vectors using this notation.

Vector representation
19
2.8 Position vectors
Imagine a point P in space with coordinates xyz. Obviously, there exists a vector whose tail
is at the origin and head is at P. Such a vector is called a position vector as it fixes the position
of P. What is useful, though, is that the vector’s rectangular components are identical to the
Cartesian coordinates of the point, i.e., p = xi +bj+ck.
Before proceeding, let’s take stock of what we have learned by applying this knowledge to
solve some simple problems.
2.8.1 Problem 1
An object is subjected to two forces F1 and F2, where F1 acts horizontally left to right, while
F2 acts vertically downwards, as shown in Fig. 2.9. The problem is to find the magnitude and
direction of the resultant force and the force that would keep the object in equilibrium.
F2 = –4j
F1 = 6i
X
Y
i
j
Figure 2.9.
We begin by defining the forces as two vectors:
F1 = 6i
and
F2 = −4j
Therefore, the resultant force is
F1 +F2 = 6i −4j
The magnitude (length) is
F1 +F2  =
√
62 +42 =
√
52 = 7211
The direction of the force can be specified relative to the horizontal x-axis as shown in Fig. 2.10.

20
Vector analysis for computer graphics
F1 = 6
F2 = 4
F1 + F2
X
α
α
Figure 2.10.
From Fig. 2.10, we find that
	 = tan−1 −4
6

= −3369 or 32631
For the object to be in equilibrium the total force must be zero, which means that a third force
must be applied equal and opposite to F1 +F2, i.e.,
−F1 +F2 = −6i −4j = −6i +4j
Its direction is

 = 180 +tan−1 
4

−6

= 14631
2.8.2 Problem 2
Let’s prove that the addition of two vectors is commutative, i.e., a +b = b+a.
We begin by defining two vectors, a and b, as shown in Fig. 2.11.
a
a + b
b
A
B
C
Figure 2.11.
From Fig. 2.11, we get
a = −→
AB
and
b = −→
BC
and
a +b = −→
AB +−→
BC = −→
AC
(2.1)
But equally, we could have described the vector addition shown in Fig. 2.12.

Vector representation
21
a
b
A
D
C
B
b
a
b + a
Figure 2.12.
From Fig. 2.12, we have
b = −→
AD
and a = −→
DC
and
b+a = −→
AD +−→
DC = −→
AC
(2.2)
From Eqs. (2.1) and (2.2), we have
a +b = b+a
2.8.3 Problem 3
Let us now prove that the addition of vectors is associative, i.e., a +b+c = a +b+c.
Figure 2.13 shows four vectors forming a quadrilateral, where one diagonal is formed from
a +b and the other diagonal is formed from b+c.
a
b
(a + b)
(b + c)
c
d
Figure 2.13.
It is obvious from Fig. 2.13 that
a +b+c = d
and
a +b+c = d
therefore,
a +b+c = a +b+c

22
Vector analysis for computer graphics
2.9 Vector products
We now come to vector products, which originally took mathematicians of the day some time
to recognise and define. What was unusual was that there were two ways of multiplying vectors
together: one that produced a scalar quantity and another that created a new vector.
The product of two scalars is straightforward. For example, 3 × 4 = 12 and 4 × 3 = 12 —
order has no impact on the final result. However, there are two interpretations of this product:
one is simply the fact that 3 lots of 4 make 12; the other is that 3×4 can be thought of as an
area, 12 units in size. The product of two vectors is not quite so simple, but there are similarities
with scalar multiplication. For those readers who wish to know how the two products were
discovered, see Michael Crowe’s excellent book, A History of Vector Analysis [Crowe, 67].
2.9.1 Scalar product
Before we define this product, it’s worth thinking about what we would have predicted the
scalar product could have been based upon our knowledge of scalar multiplication. For example,
given the following vectors:
a = xai +yaj+zak
b = xbi +ybj+zbk
there is a temptation to multiply the corresponding vector components together:
xaxb
yayb
zazb
But what do we do with these terms? Well, why not add them together? If we do, we get
a ·b = xaxb +yayb +zazb
Well, it just so happens that this is the definition of the scalar product!
An alternative approach would be to multiply their lengths together: a  · b, which is a
scalar. However, this ignores the orientation of the two vectors, which might tempt us to suggest
one of the following extensions:
a ·bcos
a ·bsin
a ·b
where  is the separating angle between the vectors.
These all seem reasonable, and in mathematics there are no rules preventing anyone from
defining some new formula or technique. What is important is that it integrates with the rest of
mathematics. Well, as we are about to discover, the first two suggestions are extremely useful,
but the third has no application.
The scalar product of two vectors a ·b is defined as
a ·b = a ·bcos
(2.3)

Vector representation
23
where
a and b are the two vectors
 is the separating angle
and the dot ‘·’ between a and b implies a scalar product.
The terms on the right-hand side (RHS) of the equals sign in Eq. (2.3) are scalars. Therefore,
the result must also be a scalar — hence the name scalar product. The dot ‘·’ between a and
b has also given rise to a pseudonym for this operation: the dot product. Consequently, be
prepared for both names being used for this operation.
Figure 2.14 shows three pairs of vectors with different separating angles. Notice that  is the
angle between the heads of the two vectors, and it never exceeds 180.
A
B
θ
θ
θ
C
D
I
A
B
C
D
I
A
B
C
D
I
Figure 2.14.
The above definition is not so arbitrary as the preamble might suggest; it is extremely useful in
a range of geometric and scientific applications. For example, if two vectors are perpendicular,
their dot product is zero, because cos90 = 0. Furthermore, if two unit vectors have the same
orientation, their dot product equals 1, because cos0 = 1. Such results are used as part of our
problem-solving strategies later on.
Consider what happens when a force is applied to a mechanism restricted to move in one
direction. Such a scenario is shown in Fig. 2.15.
f
θ
v
cos θ
f
Figure 2.15.

24
Vector analysis for computer graphics
If the force is represented by f, and the mechanism’s direction by v, then the magnitude of the
force acting in the direction of the mechanism is f cos. And as the total work done is the
product of the force over the acting distance, this is represented by f v cos, which is the
dot product.
Figure 2.16 shows how the dot product should be visualized, where one vector is projected
onto the other and the two lengths multiplied.
A
B
C
θ
AC′
C′
AC
AB
Figure 2.16.
The two vectors are −→
AB and −→
AC with a separating angle . The projection of −→
AC onto −→
AB is
−→
AC′, which equals −→
AC cos . The dot product of −→
AB and −→
AC is therefore
−→
AB·−→
AC =
−→
AB


−→
AC′  =
−→
AB

−→
AC
cos
Let us show that
a ·b = a bcos = xaxb +yayb +zazb
We begin with
a = xai +yaj+zak
and
b = xbi +ybj+zbk
Therefore,
a ·b = xai +yaj+zak·xbi +ybj+zbk
Expanding
a ·b =xaxbi ·i +yaybj·j+zazbk ·k
+xaybi ·j+xazbi ·k +yaxbj·i +yazbj·k +zaxbk ·i +zaybk ·j

Vector representation
25
We now need to discover the meaning of i ·ij·jk ·ki ·jetc.
If we use Eq. (2.3) to evaluate i ·i, we get
i ·i = i i cos0 = 1
The result is 1 because i  = 1, and the separating angle is 0, whose cosine is 1. Obviously,
this result also applies to j·j and k ·k. All the other vector combinations i·ji·kj·k etc., have
a separating angle of 90, whose cosine is zero. Consequently, all of these terms vanish and we
are left with
a ·b = a ·bcos = xaxb +yayb +zazb
(2.4)
which is the full definition of the scalar or dot product and should be committed to memory.
Normally, we do not know the value of , and Eq. (2.4) is used to discover its value using
the following equation:
 = cos−1
xaxb +yayb +zazb
a b

(2.5)
Note that if a and b are unit vectors, then
 = cos−1 xaxb +yayb +zazb
Note also that Eq. (2.5) provides an unsigned angle, . But we know that when working in 2D,
clockwise angles are negative, while counter-clockwise angles are positive. Well, the sign of  is
available for 2D angles and is determined by the perp product in Section 2.10.
Before proceeding, let’s test Eqs. (2.4) and (2.5) with two examples:
Example 1
Find the angle between two vectors a and b, given
a = i +2j+3k
and
b = 4i +5j+6k
Therefore,
a  =
√
12 +22 +32 =
√
14
and
b =
√
42 +52 +62 =
√
77
Using Eq. (2.4), we find
a ·b =
√
14
√
77cos = 1×4+2×5+3×6 = 32
Using Eq. (2.5), we get
 = cos−1

32
√
14
√
77

= 129

26
Vector analysis for computer graphics
Example 2
Prove that two vectors are perpendicular, given that
a = i +3j−2k
and
b = 4i +2j+5k
Therefore,
a ·b = i +3j−2k·4i +2j+5k = 0
Because a  > 0 and b > 0 and the dot product is zero, it can only mean that the separating
angle of the vectors is 90, whose cosine is zero.
Having looked at two examples, let’s return to the geometry behind the dot product.
Figure 2.16 shows that
−→
AB ·−→
AC =
−→
AB
·
−→
AC
cos =
−→
AB
·

−→
AC′ 
A
B
C
C′
D
AC′
AC
θ′
θ
AB
AD
Figure 2.17.
But Fig. 2.17 introduces a point D such that the line −−−→
C′CD is perpendicular to −→
AB. Surely, the
projection of −→
AD on −→
AB is −→
AC′, which equals the projection of −→
AC on −→
AB? In fact, all points on
a line perpendicular to another line will have a common projection.
Therefore,
−→
AB ·−→
AD =
−→
AB

−→
AD
cos′ =
−→
AB


−→
AC′ 
This geometric configuration often arises when solving problems. For example, with reference
to Fig. 2.18, we can state directly that
p·v = q ·v
simply because p and q have identical projections on v.

Vector representation
27
O
P
Q
p
q
v
Figure 2.18.
Now let’s take a look at the second way of multiplying vectors – the vector product.
2.9.2 Vector product
Again, before defining this product, let’s try to anticipate what the answer could be. We start
with two 3D vectors, a and b, which must lie in some common plane in space. Just in case you
find this hard to imagine, remember that vectors can be moved around in space as long as their
length and orientation with the axial system are not disturbed. So, if we bring two such vectors
together, as shown in Fig. 2.19, they will share a common plane.
X
Y
Z
a
b
Figure 2.19.
Now, if we multiply these vectors together and create a third vector, it is obvious that the vector
must either be parallel to or intersect the common plane. But wouldn’t it be nice if the vector
were perpendicular to the plane? Well, it just so happens that this is the case!
Back in the 19th century, Sir William Rowan Hamilton was struggling to discover a 3D
equivalent of complex numbers. Given that a 2D complex number is expressed as
q = s +ai
it seemed reasonable to conjecture that a 3D complex number would be of the form
q = s +ai +bj

28
Vector analysis for computer graphics
where i and j equal
√
−1. But when two such objects are multiplied together, they create terms
such as i ·i, j ·j, i ·j, and j ·i. The first two are no problem as they are equal to −1, but the last
two did present a problem, and there was no obvious solution, so he extended the notation to
q = s +ai +bj +ck
where ij, and k equal
√
−1. When multiplying these objects together, Hamilton ended up with
terms such as i ·jj ·k, and k ·i, which also defied description, until October 16, 1843, when he
thought of the idea that i·j = k, j·k = i, and k·i = j. He also conjectured that j·i = −kk·j = −i,
and i · k = −j. On that day, he discovered quaternions, which revealed the foundations of the
scalar and vector products.
Hamilton’s ij, and k are not the ij, and k we have been using, but there are some strange
similarities. His vector product suggested the following manipulation:
a ×b = yazb −ybzai +zaxb −zbxaj+xayb −xbyak
(2.6)
which, clearly, is another vector and turns out to be perpendicular to the plane containing both
a and b. Equation (2.6) can also be expressed in its determinant form:
a ×b =

ya
za
yb
zb
i +

za
xa
zb
xb
j+

xa
ya
xb
yb
k
(2.7)
and is often shown as
a ×b =

i
j
k
xa
ya
za
xb
yb
zb

(2.8)
which produces the same result as Eq. (2.7) and is easier to remember. Note that the ‘×’ symbol
is used to distinguish this product from the scalar product, and like the scalar product has a
pseudonym: the cross product.
Let’s approach this product from another way. Given
a = xai +yaj+zak
and
b = xbi +ybj+zbk
then
a ×b = xai +yaj+zak×xbi +ybj+zbk
which expands to
a ×b = xaxbi ×i +yaybj×j+zazbk ×k
+xaybi ×j+xazbi ×k +yaxbj×i +yazbj×k +zaxbk ×i +zaybk ×j
(2.9)

Vector representation
29
If you look carefully at Eq. (2.9), you will see features of Eq. (2.6). Now we want a rule similar
to Eq. (2.3) as that used for the scalar product. So let’s try the following:
a ×b = a bsin ˆn
(2.10)
where the unit vector ˆn is perpendicular to both a and b.
Applying Eq. (2.10) to Eq. (2.9), the terms i ×ij×j, and k ×k collapse to zero, because the
separating angle is 0, and sin0 = 0. So we are left with
a ×b = xaybi ×j+xazbi ×k +yaxbj×i +yazbj×k +zaxbk ×i +zaybk ×j
If we invoke Hamilton’s rules for quaternions for vectors:
i ×j = kj×k = i and k ×i = j
and their reverse forms:
j×i = −kk ×j = −i and i ×k = −j
we obtain
a ×b = xaybk −xazbj−yaxbk +yazbi +zaxbj−zaybi
Reordering the terms gives
a ×b = yazbi −zaybi +zaxbj−xazbj+xaybk −yaxbk
and, finally,
a ×b = yazb −zaybi +zaxb −xazbj+xayb −yaxbk
which is identical to Eq. (2.6)!
All of this may appear longwinded, but it is necessary to bring to life what happened
historically. A mathematician suddenly thought of a formula for the vector product.
Today, math books contain statements such as, “The vector product is defined as
a ×b = n = a bsin ˆn
(2.11)
where
 is the smaller angle between a and b
and
n is perpendicular to both a and b”
Also,
a ×b =

i
j
k
xa
ya
za
xb
yb
zb

(2.12)

30
Vector analysis for computer graphics
These definitions are true, but they hide the agony that went on behind the scenes at the time.
Taking Eq. (2.11) as our definition, let’s consider the orientation of n.
As we are employing a right-handed system of axes, our right hand also determines the
orientation of n. Therefore, with reference to our right hand, the thumb represents a, the first
finger represents b, and the middle finger provides the direction of n. It is convenient to think
of this operation as a rotation from a to b producing the perpendicular vector n. This is shown
in Fig. 2.20. Note that the vector product is very sensitive to the order of the two vectors. Switch
the vectors around and we get
b×a = −n = −basin ˆn
and we see that the vector product breaks the commutative rule we take for granted with scalars.
In fact, a ×b = −b×a.
a
b
n
θ
Figure 2.20.
Equation (2.11) not only determines the length of n, but also says something about the space
enclosed by a and b. And if we remove ˆn from the right-hand side, we obtain a bsin,
which may remind you of another formula: 1
2absin, which is the area of a triangle with sides
a and b with an enclosed angle . Figure 2.21 illustrates this.
A
B
C
D
a
b
θ
Figure 2.21.
The area of ABC equals 1
2absin, which means that absin equals the area of the parallelogram
ABDC. Thus, when we compute the cross product a × b, the perpendicular vector n has a
length equal to the area of the parallelogram with sides a  and b. Figure 2.22 illustrates
this relationship.

Vector representation
31
sin θ
area =
a
b
a
b
sin θ
=
n
a
b
n
θ
Figure 2.22.
Before proceeding, it will be useful to prove that the above formulas are consistent, so let’s
demonstrate that the rectangular unit vectors obey these rules.
Substituting i and j in Eq. (2.12), we get
i ×j =

i
j
k
1
0
0
0
1
0

i ×j =

0
0
1
0
i +

0
1
0
0
j+

1
0
0
1
k = k
Substituting j and k in Eq. (2.12), we get
j×k =

i
j
k
0
1
0
0
0
1

j×k =

1
0
0
1
i +

0
0
1
0
j+

0
1
0
0
k = i
Substituting k and i in Eq. (2.12), we get
k ×i =

i
j
k
0
0
1
1
0
0

k ×i =

0
1
0
0
i +

1
0
0
1
j+

0
0
1
0
k = j
both of which are correct. Now let’s show how the vector product is sensitive to vector sequence
by reversing one of the above: substituting k and j in Eq. (2.12), we get
k ×j =

i
j
k
0
0
1
0
1
0


32
Vector analysis for computer graphics
k ×j =

0
1
1
0
i +

1
0
0
0
j+

0
0
0
1
k = −i
which confirms that
j×k = −k ×j
The areas of the parallelograms associated with the above examples all equal unity, which is the
length of the resulting vector.
Perhaps now you can understand how Sir William Rowan Hamilton must have felt when he
discovered the above!
X
Z
Y
1
1
1
a
b
n = a × b
θ
Figure 2.23.
As a further example, consider the scenario shown in Fig. 2.23. Vectors a and b are given by
a = −j+k
and
b = i −j
The task is to compute the vectors normal to both a and b. Therefore,
a ×b =

i
j
k
0
−1
1
1
−1
0

a ×b =

−1
1
−1
0
i +

1
0
0
1
j+

0
−1
1
−1
k
a ×b = i +j+k
which are correct. But what about the angle ? Well, this can be computed by Eq. (2.5) or by
rearranging Eq. (2.11). Using Eq. (2.5), we get
 = cos−1
xaxb +yayb +zazb
a b


Vector representation
33
 = cos−1
0×1+−1×−1+1×0
√
2
√
2

= 60
Using Eq. (2.11), we get
 = sin−1

n 
a b

= sin−1
 √
3
√
2
√
2

= 60
The preceding three equations are correct, as the triangle formed by a and b is an equilateral
triangle.
2.9.3 Surface normals
One important application of the vector product in computer graphics is its ability to compute
surface normals. Given a triangular mesh, we can use two sides of any triangle as the reference
vectors for the vector product. However, we must know the convention used for defining the
vertices of the triangle, and which side of the triangle faces outside or inside. Figure 2.24 shows
such a triangle where its vertices are defined in a counter-clockwise sequence as viewed from
the outside.
A
B
C
n
AC
AB
Figure 2.24.
Using our right hand, we can see that first vector has to be −→
AB followed by −→
AC, which ensures
that the surface normal n points in the direction from where we are viewing the triangle.
Given that the vertices are AxAyAzA BxByBzB, and C xCyCzC, then the vectors
−→
AB and −→
AC are defined as follows:
−→
AB = xB −xAi +yB −yAj+zB −zAk
−→
AC = xC −xAi +yC −yAj+zC −zAk
Therefore,
n = −→
AB ×−→
AC =

i
j
k
xB −xA
yB −yA
zB −zA
xC −xA
yC −yA
zC −zA



34
Vector analysis for computer graphics
2.9.4 The algebra of vector products
Before proceeding with triple products, we need to consolidate the algebraic rules associated with
the dot and cross products. Two laws need to be considered: the commutative and distributive
laws, but we also need to confirm the role of scalars in these products.
Commutative law a·b = b·a
As
a ·b = a bcos
(2.13)
the commutative law of scalar multiplication permits us to write Eq. (2.13) as
a ·b = ba cos = b·a
Therefore,
a ·b = b·a
Distributive law a·b+c = a·b+a·c
Given
a = xai +yaj+zak
b = xbi +ybj+zbk
c = xci +ycj+zck
then
a ·b+c = xai +yaj+zak·xbi +ybj+zbk+xci +ycj+zck
a ·b+c = xai +yaj+zak·xb +xci +yb +ycj+zb +zck
a ·b+c = xa xb +xc+ya yb +yc+za zb +zc
a ·b+c = xaxb +xaxc +yayb+yayc +zazb +zazc = a ·b+a ·c
Therefore,
a ·b+c = a ·b+a ·c
Commutative law a×b ̸= b×a
The commutative law does not hold for the vector product.

Vector representation
35
Given
a ×b =

i
j
k
xa
ya
za
xb
yb
zb

a ×b =

ya
za
yb
zb
i +

za
xa
zb
xb
j+

xa
ya
xb
yb
k
a ×b = yazb −ybzai +zaxb −zbxaj+xayb −xbyak
In contrast,
b×a =

i
j
k
xb
yb
zb
xa
ya
za

b×a =

yb
zb
ya
za
i +

zb
xb
za
xa
j+

xb
yb
xa
ya
k
b×a = ybza −yazbi +zbxa −zaxbj+xbya −xaybk
b×a = −yazb −ybzai +zaxb −zbxaj+xayb −xbyak = −a ×b
Therefore,
a ×b = −b×a
Distributive law a×b+c = a×b+a×c
Given
a = xai +yaj+zak
b = xbi +ybj+zbk
c = xci +ycj+zck
and
d = b+c = xdi +ydj+zdk
Then
a ×b+c = a ×d =

i
j
k
xa
ya
za
xd
yd
zd

a ×d =

ya
za
yd
zd
i +

za
xa
zd
xd
j+

xa
ya
xd
yd
k

36
Vector analysis for computer graphics
Substituting b+c for d, we get
a ×b+c =

ya
za
yb +yc zb +zc
i +

za
xa
zb +zc xb +xc
j+

xa
ya
xb +xc yb +yc
k
a ×b+c = ya zb +zc−za yb +yci
+za xb +xc−xa zb +zcj
+xa yb +yc−ya xb +xck
a ×b+c =yazb −ybzai +yazc −yczai
+zaxb −zbxaj+zaxc −zcxaj
+xayb −xbyak +xayc −xcyak
a ×b+c = a ×b+a ×c
2.10 Triple products
Having examined the products that involve two vectors, now let’s look at the products that
involve three vectors. An interesting approach is to take three vectors, a, b, c, and explore the
combinations using a ‘·’ and a ‘×’ without disturbing the alphabetic order of the vector names.
These are summarised in Table 2.3.
Table 2.3
a ·b×c
a ×b·c
a ×b·c
a ·b×c
a ×b×c
a ·b·c
a ×b×c
a ·b·c
Not all the combinations in Table 2.3 lead to a meaningful result, and for neatness the
meaningless combinations are arranged in the second column. They are meaningless because
the operation in parentheses is a dot product, which is a scalar, and cannot be associated with
a scalar product or vector product. So we are left with the four triple products in the first
column, which do satisfy the rules associated with the scalar and vector products. But what do
they mean? Well, let’s find out.
2.10.1 Scalar triple product
Figure 2.25 shows three vectors, a, b, and c, that provide the basis for a prism, where the area of
the base is given by Area = a bsin. But n = a ×b, where n  = Area. Now the volume
of a prism is the product of its (vertical height)·(base area), which in vector notation is given by
Volume = c cos	·n = c n cos	

Vector representation
37
which we recognise as the dot product c ·n. But as n = a ×b, we can state
Volume = c ·a ×b
which is a rather elegant relationship.
a
b
c
n
α
θ
Area
Figure 2.25.
The prism in Fig. 2.25 could easily be drawn with vectors b and c as the base, which, using the
above reasoning, would make
Volume = a ·b×c
Similarly, if vectors c and a form the base, the volume is
Volume = b·c ×a
thus, we can conclude that
Volume = a ·b×c = b·c ×a = c ·a ×b
(2.14)
The first two entries in the first column of Table 2.3 correspond to the volume calculating
qualities of this scalar triple product.
Unlike the vector product, the dot product is commutative, which permits us to write
c ·a ×b = a ×b·c
which, using Eq. (2.14), leads to
a ·b×c = a ×b·c
(2.15)
and as Eq. (2.15) only makes sense when the parentheses embrace the cross product, we employ
abc to represent a · b×c or a ×b · c, which is also called the box product. However, the

38
Vector analysis for computer graphics
cross product is not commutative, which means that if the vectors representing the base become
reversed, the resulting normal vector n points in the opposite direction to the third vector,
which in turn makes the final dot product negative. Thus, strictly speaking, abc represents the
signed volume of the prism. To illustrate this, we will compute the volume of a cube and show
why vector order is so important.
a
b
c
n
X
Y
Z
Figure 2.26.
Figure 2.26 shows three vectors, a, b, and c, that provide the basis for a cube. The vectors are
defined as
a = −k
b = −i
c = j
and are organised in a right-hand sequence.
Substituting these in
abc = Volume = a ×b·c
(2.16)
we obtain
abc = −k ×−i·j
First, let’s compute the cross product
−k ×−i
−k ×−i =

i
j
k
0
0
−1
−1
0
0

= j
Now compute the dot product
j·j = +1

Vector representation
39
Thus, the cube has a volume of +1 units.
Now let’s interchange the base vectors so that
a = −i
b = −k
c = j
which are organised in a left-hand sequence.
Substituting these in Eq. (2.16), we obtain
abc = −i ×−k·j
Let’s compute the cross product:
−i ×−k
−i ×−k =

i
j
k
−1
0
0
0
0
−1

= −j
Now compute the dot product :
−j·j = −1 units
Thus, the cube has a volume of −1 units, and we see that
abc = Volume = a ×b·c  = a ·b×c
(2.17)
We can compact the above calculation as follows: given
a = xai +yaj+zak
b = xbi +ybj+zbk
c = xci +ycj+zck
then
a ·b×c = a ·

i
j
k
xb
yb
zb
xc
yc
zc

a ·b×c = xai +yaj+zak·
⎡
⎣
ybzc −yczbi+
zbxc −zcxbj+
xbyc −xcybk
⎤
⎦
and
a ·b×c = xa ybzc −yczb+ya zbxc −zcxb+za xbyc −xcyb
which equals
a ·b×c =

xa
ya
za
xb
yb
zb
xc
yc
zc

(2.18)

40
Vector analysis for computer graphics
which is also an elegant relationship.
Furthermore, if two columns or rows of a determinant are interchanged, its sign is reversed.
Also, the value of a determinant is unaffected if its elements are transposed. Therefore,

xa
ya
za
xb
yb
zb
xc
yc
zc

= −

xa
ya
za
xc
yc
zc
xb
yb
zb

= −

xb
yb
zb
xa
ya
za
xc
yc
zc

and
abc = −
 a
c
b
 = −a ·c ×b· = −b·a ×c
Just to prove that Eq. (2.18) works, let’s take the first example above, where
a = −k
b = −i
c = j
Using Eq. (2.18), we find
abc = a ·b×c =

0
0
−1
−1
0
0
0
1
0

= 1
We are now in a position to prove that a · b×c = b · c ×a = c · a ×b, even though we
concluded it in Eq. (2.14).
From Eq. (2.18), we have
a ·b×c =

xa
ya
za
xb
yb
zb
xc
yc
zc


It can be shown that exchanging two rows of a determinant changes its sign. Therefore,

xa
ya
za
xb
yb
zb
xc
yc
zc

= −

xb
yb
zb
xa
ya
za
xc
yc
zc

=

xb
yb
zb
xc
yc
zc
xa
ya
za

= b·c ×a
Similarly,

xa
ya
za
xb
yb
zb
xc
yc
zc

= −

xc
yc
zc
xb
yb
zb
xa
ya
za

=

xc
yc
zc
xa
ya
za
xb
yb
zb

= c ·a ×b
Therefore,
a ·b×c = b·c ×a = c ·a ×b
(2.19)

Vector representation
41
2.10.2 The vector triple product
One of the vector triple products in Table 2.3 is a ×b×c, and there are three questions we
can ask about it:
1. Is a ×b×c equivalent to an expression involving dot products?
2. Does a ×b×c have any connection with a ×b×c?
3. Does a ×b×c have any geometric meaning?
b
c
b × c
(a)
(b)
b × c
b
c
a
a × (b × c)
Figure 2.27.
Figure 2.27(a) shows part of the triple product, where we see vectors b and c sharing a common
plane and the cross product b × c perpendicular to this plane. The third vector a can either
reside in this plane or intersect it. First, let’s consider the scenario where it intersects the plane,
as shown in Fig. 2.27(b).
If we take the cross product of a with b×c, the result a ×b×c must be perpendicular to a
and b×c, which means that it must be in the original plane containing b and c. If you find this
difficult to visualise, don’t worry. Try this: if a vector exists perpendicular to some plane, and
we have to compute a vector product with it and some other vector, the result of this product
must be perpendicular to the original vector, which must be in the perpendicular plane! Thus,
we see in Fig. 2.27(b) the result of a ×b×c lying in the plane containing b and c.
Now let’s consider the scenario where a resides in the plane containing b and c. Well, if we
think about it, it is no different from the previous scenario, because the result a ×b×c must
be perpendicular to b×c, which is the plane! The same is true for a ×b×c.
It can be shown that
a ×b×c = a ·cb−a ·bc
(2.20)
and
a ×b×c = a ·cb−b·ca
(2.21)

42
Vector analysis for computer graphics
It is obvious that a×b×c ̸= a ×b×c, which confirms that the associative law does not hold
for the vector triple product. So the answer to the second question we raised at the beginning
of this section is no.
From what we have discovered above, there does not seem to be any geometric significance
to the vector triple product, so the answer to the third question is also no.
Those who wish to examine the derivations for Eqs. (2.20) and (2.21) will find them in
Appendix B.
Before concluding this chapter, let’s explore a simple application for the scalar triple product.
One popular method for detecting back-facing polygons is to compute the angle between the
polygon’s surface normal and the vector representing the observer’s line of sight. This is shown
in Fig. 2.28.
a
n
θ
Figure 2.28.
If the angle  between vectors a and n equals, or exceeds 90, the polygon is invisible. But say
such a normal was not available. Then the scalar triple product could be used instead.
First, we must know the order of the polygon’s vertices as viewed from the outside. Let’s
assume that this is counter-clockwise. We then establish two vectors, b and c, such that their
cross product points outwards. For example, in Fig. 2.29 the vertices A B, and C would produce
the vectors b = −→
AB and c = −→
AC. We create a third vector a pointing towards the observer
located at O, such that a = −→
AO. This creates a tetrahedron whose volume can be positive, zero,
or negative, depending on the orientation of the observer and polygon.
a
b
c
A
B
C
O
Figure 2.29.
The tetrahedron’s volume is given by
1
6 abc = 1
6a ·b×c = 1
6

xa
ya
za
xb
yb
zb
xc
yc
zc



Vector representation
43
If the volume is positive, the polygon is facing the observer; if the volume is zero, the polygon
is parallel to the observer; and if the volume is negative, the polygon is facing away from the
observer. Let’s test this hypothesis with an example.
Figure 2.30 shows a scenario where the observer is located at 1 0 0 looking at one of the
triangle’s vertices positioned at the origin.
X
Y
Z
a
b
c
(0, 1, 1)
(0, 0, 2)
(0, 0, 0)
(1, 0, 0)
Figure 2.30.
Therefore, the vectors are a = i
b = j+k
c = 2k, and the prism’s volume is given by
Vol = 1
6

1
0
0
0
1
1
0
0
2

= 1
6 ×2
which means that the polygon is visible. If we locate the observer at 0 0 −1 along the negative
z-axis, the volume is zero:
Vol = 1
6

0
0
−1
0
1
1
0
0
2

= 0
which means that the polygon is invisible. Finally, if we locate the observer at −1 0 0, the
volume is negative:
Vol = 1
6

−1
0
0
0
1
1
0
0
2

= 1
6 ×−2
which means that the polygon is invisible.
If the observer is located at the origin, there is no need to create any vectors at all as the
volume is given by
Vol = 1
6

xA
yA
zA
xB
yB
zB
xC
yC
zC

where only the coordinates of the vertices are required. Unfortunately, this determinant provides
a negative value for visible and a positive value for invisible.

44
Vector analysis for computer graphics
2.11 Perpendicular vectors
When working in 2D, we often employ vectors that are perpendicular to some reference vector.
For example, Fig. 2.31 shows two vectors v and n, where n is perpendicular to v and is expressed
mathematically as n⊥v.
n
v
Figure 2.31.
The symbol ′⊥′ (pronounced “perp”) can be regarded as an operator, such that given a
vector v, v⊥is a vector perpendicular to v. However, there is a problem: which way does
v⊥point? Figure 2.32 shows the two possibilities. Either way is valid. However, mathe-
matics does employ a convention where a counter-clockwise rotation is positive, which
also supports the right-handed axial system used in this book. Consequently, the orien-
tation shown in Fig. 2.32(a) is the one adopted. The next step is to find the components
of v⊥.
v⊥
v⊥
v
v
(b)
(a)
Figure 2.32.
Figure 2.33 shows vector v = ai+bj, which makes an angle 	 with the x-axis, and 90 −	 with
the y-axis. If we transpose v’s components to −bi +aj, we create a second vector, which must
be perpendicular to v, because the angle between the two vectors is 90. Therefore, we can state
that
v = ai +bj
v⊥= −bi +aj
(2.22)

Vector representation
45
90° – α
a
a
α
α
b
–b
v
v⊥
X
Y
Figure 2.33.
Further confirmation is found in the dot product where
v ·v⊥= ai +bj·−bi +aj = −ab+ab = 0
A second way of demonstrating this is to convert v into a complex number:
i.e.,
ai +bj ≡a+ib
(2.23)
where
i =
√
−1
If we multiply a +ib by i, it effectively rotates it through 90:
i a +ib = ai +i2b = −b +ai
where
−b +ia ≡−bi +aj
Although the sign change and component switching take a simple operation, it can be repre-
sented formally by this determinant:
v⊥= −

i
j
a
b
 = −bi +aj
It may be obvious that the magnitude
v⊥ equals the magnitude v . If not, it can be shown
that
v⊥ =

−yv2 +x2
v =

x2
v +y2
v = v .
Now we already know that the dot product reveals the angle between two vectors:
a ·b = a bcos

46
Vector analysis for computer graphics
and
cos =
a ·b
a b
But what we don’t know is the sense of ; that is, is b rotated in a counter-clockwise direction
relative to a, or vice versa? Well, consider the scenario shown in Fig. 2.34, where b is rotated in
a counter-clockwise direction relative to a, creating a positive angle .
a⊥
a
b
θ
α
Figure 2.34.
From the figure we can state that
a⊥·b =
a⊥bcos	
and
cos	 =
a⊥·b
a⊥b =
a⊥·b
a b
(2.24)
But note that as  +	 = 90,
sin = cos	
(2.25)
Substituting Eq. (2.25) in Eq. (2.24), we get
sin =
a⊥·b
a b
(2.26)
Now, the nature of the cosine function is that
cos = cos−
which is not the case for the sine function:
sin− = −sin

Vector representation
47
This implies that Eq. (2.26) is sensitive to the direction of the angle . Thus, if b is rotated counter-
clockwise  from a, sin is positive. But if b is rotated clockwise  from a, sin is negative.
A simple example demonstrates the angular sensitivity of Eq. (2.26).
With reference to Fig. 2.34: let
a = i
b = i +j
a⊥= j
Therefore,
sin =
a⊥·b
a b = j·i +j
1·
√
2
=
1
√
2
a⊥
a
θ
b
Figure 2.35.
In contrast, with reference to Fig. 2.35,
a = i
b = i −j
a⊥= j
Therefore,
sin = j·i −j
1·
√
2
= −1
√
2

48
Vector analysis for computer graphics
Thus, we see that Eq. (2.26) is sensitive to the sign of the angle between the vectors.
In Section 2.12, when we discussed the vector product, we discovered that
a ×b = a bsin
which equals the area of the parallelogram formed by the vectors a and b (Fig. 2.22). But from
Eq. (2.26) we can state that
a⊥·b = a bsin
Therefore, a⊥· b equals the signed area of the parallelogram formed by a and b, as shown in
Fig. 2.36.
a⊥
a
α
θ
b
area = a ⋅ b sin θ
Figure 2.36.
2.12 Interpolating vectors
Interpolating between a pair of scalar quantities arises everywhere in computer graphics, especially
in the control of light intensity, colour, position, or the orientation of objects and cameras. Vectors
can also be interpolated and are regularly used in Phong shading, which is covered in Section 10.3.
However,aconsequenceoflinearlyinterpolatedvectorsisthatvectorlengthisnotpreserved,which
can cause problems in the form of null vectors or the need for normalization. If vector length is
important, then spherical interpolation should be used. In this section we consider both schemes.
2.12.1 Linear interpolation
Given two scalars v1 and v2, it is possible to linearly interpolate between them using
v = 1−v1 +v2
where
 is a scalar such that 0 ⩽ ⩽1
When  < 0 or  > 1, interpolation continues, but v < v1 and v > v2, respectively.

Vector representation
49
It should not be a surprise that the same process also works with vectors, and we can write
w = 1−u +v
0 ⩽ ⩽1
(2.27)
Figure 2.37 illustrates values of w for different values of .
λ = 0
λ = 1
1
4
λ =
1
2
λ =
3
4
λ =
u
v
w0
w0.75
w1
w0.5
w0.25
Figure 2.37.
In the following chapters we will employ Eq. (2.27) to identify points that lie on a line determined
by two vectors.
2.12.2 Spherical interpolation
Spherical interpolation ensures that the magnitude of the interpolated vector is not comprised.
Figure 2.38 shows two unit vectors ˆu and ˆv separated by an angle , which can be determined
using
 = cos−1 ˆu · ˆv
From the figure, we see that
OT = aTW = b
and TW is parallel with ˆv.
a
b
θ
β
β
α
γ
O
T
W
ˆu
ˆv
ˆw
X
Y
Figure 2.38.

50
Vector analysis for computer graphics
The linear interpolation of the angle is controlled by the parameter , where
	 =  and 
 = 1−
so that
ˆw = aˆu +bˆv
From Fig. 2.38 we get
 =  −
and
sin = sin
Therefore, using the sine rule:
OW
sin =
1
sin =
a
sin
 =
b
sin	
a = sin
sin = sin1−
sin
and
b = sin	
sin = sin
sin 
Finally,
ˆw = sin1−
sin
ˆu + sin
sin ˆv
(2.28)
Equation (2.28) is called a slerp, because in its 3D application the unit vectors are spherically
interpolated across a unit-radius sphere. This interpolant can also be used for unit quaternions.
Let’s test Eq. (2.28) with a simple example.
Given ˆu = i and ˆv = j, then  = 90.
Now let’s find the interpolated vector when  = 05.
X
Y
ˆu
ˆv
w
45°
45°
Figure 2.39.

Vector representation
51
As shown in Fig. 2.39, the interpolated vector should be
w =
√
2
2 i +
√
2
2 j
Using Eq. (2.31), we find that
w = sin45
sin90 i + sin45
sin90 j
w =
√
2
2 i +
√
2
2 j
Although Eq. (2.31) assumes that ˆu and ˆv are unit vectors, it will work with non-unit vectors.
For example, if u = 2i and v = 4j, then  = 90.
Now let’s find the interpolated vector when  = 05.
Therefore,
w =
√
2
2 2i +
√
2
2 4j =
√
2i +2
√
2j
The magnitude of w is
w  =
√
2
2
+

2
√
2
2
=
√
10 = 3162
So, even though the rotated angle is 50% of the separating angle, the vector’s length exceeds the
half-way point between 2 and 4, which is because the interpolation is spherical rather than linear.
If the length of the interpolated vector is required to be linearly related to , then we must
normalize u and v and scale the interpolated vector as follows:
w = 1−u +v 
sin1−
sin
ˆu + sin
sin ˆv


For instance, using the above example, where u = 2i, v = 4j, and  = 05
then
w = 05×2+05×4
sin45
sin90 i + sin45
sin90 j

and
w = 3
√
2
2 i +
√
2
2 j

which are correct.
Needless to say, the interpolation works in 3D as well as 2D.

52
Vector analysis for computer graphics
2.13 Direction cosines
A vector’s orientation and magnitude are encoded within its Cartesian components. The
magnitude of a 3D vector v is readily obtained using
v  =

x2
v +y2
v +z2
v
while its orientation is obtained using
	 = tan−1
yv
xv

where 	 is the angle between the vector and the x-axis. However, we can develop this idea of
orientation using direction cosines.
X
Y
Z
v
X
Y
v
α j
α i
α j
α i
α k
Figure 2.40.
Figure 2.40 illustrates the idea behind direction cosines for a 2D and a 3D vector. The angles
	i, 	j, and 	k (for a 3D vector) provide an elegant visual mechanism for orientating a vector
relative to the Cartesian axes. In fact, the cosines of the angles are used as they are intimately
related to the vector’s components.
X
Y
v
αj
αi
yv
xv
Figure 2.41.
To begin with, consider the 2D vector v in Fig. 2.41. It has components xv and yv and it is
obvious that 	i +	j = 90. Now
cos	i =
xv
v 

Vector representation
53
and
cos	j =
yv
v 
If v is a unit vector,
cos	i = vx
and
cos	j = vy
and are called the direction cosines of v.
X
Y
Z
αj
αk
αi
v
xv
zv
yv
Figure 2.42.
In the 3D scenario shown in Fig. 2.42, it may not be immediately obvious what cos	icos	j,
and cos	k are, but the dot product reveals the answer.
To find cos	i,
v ·i = v i cos	i = xv
Therefore,
cos	i =
xv
v 
Similarly,
cos	j =
yv
v 
and
cos	k =
zv
v 
Once more, if v is a unit vector, the direction cosines are the vector’s components.

54
Vector analysis for computer graphics
2.14 Change of axial system
One useful application for direction cosines is in the transformation of points from one
coordinate system to another. For example, consider the problem of calculating the coordinates
of a 2D point relative to a system of axes that have been rotated  relative to the original axes,
as shown in Fig. 2.43.
X
Y ′
X ′
Y
90° + θ
 θ
 θ
φ
Figure 2.43.
X′ is rotated  relative to X and has direction cosines cos and cos.
But as
sin = cos
X′ has direction cosines cos and sin.
Similarly, Y ′ is rotated relative to Y and has direction cosines cos90 + and cos.
But as
cos90 + = −sin
Y ′ has direction cosines −sin and cos.
If the axial system is rotated , this is equivalent to rotating a point in the opposite direction −.
The rotation transform for an angle  is
cos
−sin
sin
cos

Therefore, the transform for an angle − is
cos−
−sin−
sin−
cos−

which becomes
 cos
sin
−sin
cos



Vector representation
55
But notice that the top-row elements of the transform are the direction cosines of the rotated
X′-axis, and the bottom-row elements are the direction cosines of the rotated Y ′-axis. Thus, we
can state that the coordinates of a point P xPyP in a rotated frame of reference are given by
x′
P
y′
P

=
r11
r12
r21
r22

·
xP
yP

where
r11 is the direction cosine of X′ relative to X
r12 is the direction cosine of X′ relative to Y
r21 is the direction cosine of Y ′ relative to X
r22 is the direction cosine of Y ′ relative to Y
Note that because sin2  +cos2  = 1, the direction cosines for any vector possess the following
qualities:
r2
11 +r2
12 = 1
r2
21 +r2
22 = 1
To demonstrate this transform in action, consider the case of calculating the new coordinates
of P 11, where the axes are rotated 45. This scenario is shown in Fig. 2.44.
X
Y
Y ′
X ′
1
1
P
45°
Figure 2.44.
It should be obvious from Fig. 2.44 that the coordinates of P relative to the rotated axes are
√
20

, and the transform will confirm this result.
The direction cosines for X′ are cos45 and sin45, while the direction cosines for Y ′ are
−sin45 and cos45, which produces the following transform:
x′
P
y′
P

=
 0707
0707
−0707
0707

·
xP
yP

x′
P y′
P = 1414 0

56
Vector analysis for computer graphics
A similar argument can be used for calculating the new coordinates of a point relative to a
rotated set of 3D axes. Once again, the point is rotated in the opposite direction to the axis
rotation. Although this can require three individual rotations about the x-, y-, and z-axes, the
final result can be expressed as a transform:
⎡
⎣
r11
r12
r13
r21
r22
r23
r31
r32
r33
⎤
⎦
where
r11 r12 r13 are the direction cosines of the rotated X′-axis relative to the original X-, Y-, and
Z-axes, respectively,
r21 r22 r23 are the direction cosines of the rotated Y ′-axis relative to the original X-, Y-, and
Z-axes, respectively,
r31 r32 r33 are the direction cosines of the rotated Z′-axis relative to the original X-, Y-, and
Z-axes, respectively.
Thus, the new coordinates of a point P xPyPzP are given by
⎡
⎣
x′
P
y′
P
z′
P
⎤
⎦=
⎡
⎣
r11
r12
r13
r21
r22
r23
r31
r32
r33
⎤
⎦·
⎡
⎣
xP
yP
zP
⎤
⎦
Note that
r2
11 +r2
12 +r2
13 = 1
r2
21 +r2
22 +r2
23 = 1
r2
31 +r2
32 +r2
33 = 1
To demonstrate the above, consider the case of calculating the new coordinates of P 111,
where the axial system is rotated as illustrated in Fig. 2.45.
X
Y
Y ′
Z
X ′
Z ′
P (1,1,1)
Figure 2.45.

Vector representation
57
From Fig. 2.45, we can predict that the new coordinates are 1−1 1.
The direction cosines for X′, Y ′, and Z′ are 010−100001, respectively.
Therefore,
⎡
⎣
x′
P
y′
P
z′
P
⎤
⎦=
⎡
⎣
0
1
0
−1
0
0
0
0
1
⎤
⎦·
⎡
⎣
1
1
1
⎤
⎦
=
⎡
⎣
1
−1
1
⎤
⎦
which is correct!
2.15 Summary
• A vector quantity possesses both magnitude and direction, which are encoded within its
components.
• Given two points A and B, the vector −→
AB is given by
−→
AB =
⎡
⎣
xB −xA
yB −yA
zB −zA
⎤
⎦
• The magnitude or length of a vector is expressed as a , which equals

x2
a +y2
a or

x2
a +y2
a +z2
a
• The resultant of two vectors a and b equals their vector sum a +b.
• Vector addition obeys the commutative and associative laws:
a +b = b+a
(commutative law)
a +b+c = a +b+c
(associative law)
• The scalar product of two vectors is defined as
a ·b = a bcos = xaxb +yayb +zazb
where  is the angle between the vectors.
• The scalar product obeys the commutative and distributive laws of multiplication:
a ·b = b·a
a ·b+c = a ·b+a ·c
• The vector product of two vectors is defined as
a ×b = c =

i
j
k
xa
ya
za
xb
yb
zb

where c  = a bsin and  is the angle between a and b.

58
Vector analysis for computer graphics
• If P and Q, with position vectors p and q, respectively, are two points on a line perpendicular
to a vector v, then p·v = q ·v.
• The vector product is non-commutative:
a ×b = −b×a
but obeys the distributive law:
a ×b+c = a ×b+a ×c
• The triple product or box product is given by
a ·b×c = b·c ×a = c ·a ×b =

xa
ya
za
xb
yb
zb
xc
yc
zc


• The volume of a prism constructed from three vectors is given by
Volume = a ·b×c
• The vector triple product is given by
a ×b×c = a ·cb−a ·bc
and
a ×b×c = a ·cb−b·ca
• The perpendicular to a vector v = ai +bj is v⊥= −bi +aj.
• The magnitude of v⊥equals the magnitude of v.
• The perp product equals
a⊥·b = a bsin
which equals the signed area of the parallelogram formed by a and b.
• Two vectors can be linearly interpolated using
w = 1−u +v
0 ≤ ≤1

Vector representation
59
• Two unit vectors can be spherically interpolated using
ˆw = sin1−
sin
ˆu + sin
sin ˆv
0 ≤ ≤1
where  is the angle between ˆu and ˆv.
• The direction cosines of a vector are the cosines of the angles between the vector and the
Cartesian axes.
• A point P xPyP is rotated to P′ x′
Py′
P using
x′
P
y′
P

=
r11
r12
r21
r22

·
xP
yP

where
r11
r12 are the direction cosines of the x-axis, and
r21
r22 are the direction cosine of the y-axis.
r2
11 +r2
12 = 1 and r2
21 +r2
22 = 1.
• A point P xPyPzP is rotated to P′ x′
Py′
Pz′
P using
⎡
⎣
x′
P
y′
P
z′
P
⎤
⎦=
⎡
⎣
r11
r12
r13
r21
r22
r23
r31
r32
r33
⎤
⎦·
⎡
⎣
xP
yP
zP
⎤
⎦
where
r11
r12
r13 are the direction cosines of the x-axis,
r21
r22
r23 are the direction cosines of the y-axis, and
r31
r32
r33 are the direction cosines of the y-axis.
r2
11 +r2
12 +r2
13 = 1,
r2
21 +r2
22 +r2
23 = 1,
r2
31 +r2
32 +r2
33 = 1.

3 Straight Lines
3.1 Introduction
Now that we have explored the basics of vector analysis, let us apply some of these ideas to the
description of straight lines. There are various ways of describing straight lines; these include
the normal form of the line equation y = mx +c,
the general form of the line equation ax +by +c = 0,
the Cartesian form of the line equation ax +by = c,
and the parametric form of the line equation p = t +ˆv.
The first three only apply to 2D straight lines, whereas the fourth definition applies to 2D and
3D straight lines. So let us begin with this latter equation.
3.2 The parametric form of the line equation
The first objective is to find a way to move along a straight line using a scalar parameter.
Fortunately, vectors provide such a mechanism in the form of the operation ˆv, which scales
the unit vector ˆv with the scalar . But we also need to relate our position relative to some
reference point, which must be included in our definition. We begin as follows.
Figure 3.1 shows a line that passes through the points T and P and is parallel with the vector
ˆv. From this scenario we can state
−→
OP = −→
OT +−→
TP
Let
ˆv = the unit vector defining the line’s direction,
 = a scalar that acts as a parameter to position us anywhere along the direction of ˆv,
T = a reference point on the line,
61

62
Vector analysis for computer graphics
t = the position vector for T, and
p = the position vector for any point P xy on the line.
Then
p = t +ˆv
(3.1)
It should be obvious that Eq. (3.1) works equally well in R3 as it does in R2, so let us bring it
alive using the coordinates used in Fig. 3.1.
X
Y
T
P
t
ˆ
λv
p
O
Figure 3.1.
We see that
t points to T 12
and
v = i −j
Therefore,
ˆv =
1
√
2 i −j
When
 = 0
x = 1 and y = 2
and when
 = 1
x = 1+
1
√
2 = 17071
y = 2−
1
√
2 = 12929
Thus, 17071293 is a point one unit along ˆv from T. By changing the value and sign of ,
we can move forward or backward along ˆv.

Straight lines
63
Let’s illustrate Eq. (3.1) in a 3D context, as shown in Fig. 3.2.
Let
t point to T 120
and
v = −i −2j+2k
Therefore,
ˆv = 1
3 −i −2j+2k
T
O
X
Y
Z
ˆ
λv
P
p
t
Figure 3.2.
The vector equation is
p = t +ˆv
When
 = 0
x = 1
y = 2 and z = 0
and when
 = 1
x = 1−1
3 = 2
3
y = 2−2
3 = 1 1
3
z = 0+ 2
3 = 2
3
Thus,
 2
31 1
3 2
3

is a point one unit along ˆv from T. Similarly, by changing the value and sign
of , we can move forward and backward along the 3D line.

64
Vector analysis for computer graphics
As we may not always have an explicit description of ˆv, let’s consider the case when the line
is represented by two points in space. If the two points are P1 x1y1 and P2 x2y2, we can
state that
v = x2 −x1i +y2 −y1j
from which we can compute v .
ˆv is then equal to
v
v  and T can be P1.
We can now write Eq. (3.1) as follows:
p = p1 +ˆv
(3.2)
where p1 is the position vector for P1. This scenario is shown in Fig. 3.3.
p
p1
v
P1
P2
P
X
Y
O
Figure 3.3.
In the current R2 context, Eq. (3.2) reveals
x = x1 +ˆv
y = y1 +ˆv
which expands to
x = x1 +

v  x2 −x1
y = y1 +

v  y2 −y1
and
x =

1−

v 

x1 +

v x2
(3.3)
y =

1−

v 

y1 +

v y2
(3.4)

Straight lines
65
It is obvious from Eqs. (3.3) and (3.4) that when  = v , x = x2 and y = y2, and represents a
point (x,y) v  units along the line from P1·xy
Let us follow this parametric description of a straight line with the derivation of the Cartesian
form of the line equation.
3.3 The Cartesian form of the line equation
We already know that the Cartesian form of the line equation is ax + by = c, but what is not
obvious is the geometric significance of a, b, and c. Fortunately, vector analysis provides an
insight into these terms, which is the objective of this section.
We begin by setting out to discover the coordinates of any point P xy on a straight line.
The strategy used may not immediately appear intuitive, but try following it, and hopefully the
approach will become obvious.
Step 1
Construct a line away from the origin O containing the point P xy and its associated position
vector p, as shown in Fig. 3.4.
P
O
p
Figure 3.4.
We now need to construct a second path from O to P.
Step 2
Construct a line from O to a point C on the line such that −→
OC is perpendicular to the line. It
is convenient to make −→
OC a scalar multiple of a unit vector ˆn = ai +bj. i.e., −→
OC = c ˆn, where c
is some scalar as shown in Fig. 3.5.

66
Vector analysis for computer graphics
P
O
p
C
ˆ
cn
Figure 3.5.
Step 3
Extend the diagram to include the vector −→
CP, which completes the second path from O to P,
as shown in Fig. 3.6.
P
O
p
C
ˆ
cn
CP
Figure 3.6.
We can now write −→
OP = −→
OC +−→
CP. Substituting vector names, we find that
p = c ˆn +−→
CP
(3.5)
Although we know c and ˆn as well as the fact that p points to any point on the line, we do not
know −→
CP. Somehow, −→
CP has to be eliminated, which can be achieved by the following cunning
subterfuge.
Remembering that the dot product of two perpendicular vectors is zero, c ˆn ·−→
CP must equal
zero. In fact, the scalar c is superfluous; therefore, ˆn ·−→
CP = 0.
Unfortunately, Eq. (3.5) does not contain such a term, but there is nothing to stop us from
introducing one by multiplying Eq. (3.5) by ˆn using the dot product:
ˆn ·p = c ˆn · ˆn+ ˆn·−→
CP
which now reduces to
ˆn ·p = c ˆn · ˆn
(3.6)

Straight lines
67
We are almost there, and something is staring us in the face, which we must learn to recognise:
ˆn· ˆn. As the angle between ˆn and ˆn is zero degrees,
ˆn · ˆn =  ˆn ˆn  = 1
Therefore, we can write Eq. (3.6) as
ˆn·p = c
(3.7)
Expanding Eq. (3.7), we get
ai +bj·xi +yj = c
ax +by = c
which we recognise as the Cartesian form of the line equation where
xy are the coordinates of a point on the line,
a and b are the components of a unit vector normal to the line, and
c is the perpendicular distance from the origin to the line.
Although the above interpretation is correct for our example, we must be careful not to be too
hasty when interpreting straight-line equations. For example, in the following equation,
3x +4y = 10
(3.8)
10 does not represent the perpendicular distance from the origin to the line. This is because the
3 and 4 are not the components of a unit vector; they are the components of a vector 5 units
long.
Therefore, if we scale Eq. (3.8) by 1
5, we obtain
06x +08y = 2
(3.9)
where 0.6 and 0.8 are the components of a unit vector, and 2 is the perpendicular distance from
the origin to the line. Figure 3.7 shows the line equation representing Eq. (3.9).
X
Y
ˆn = 0.6i + 0.8j
1
2
2
1
3
3
2
0.6x + 0.8y = 2
Figure 3.7.

68
Vector analysis for computer graphics
So far, all this seems reasonable and consistent, but how do we interpret the following equation,
where the c term is negative?
06x +08y = −2
(3.10)
Figure 3.8 shows what its graph looks like.
–X
–Y
2
ˆn = –0.6i – 0.8j
1
3
–3
1
2
–2
0.6x + 0.8y = –2
Figure 3.8.
Obviously, the Euclidean perpendicular distance from the origin to the line cannot be negative.
Furthermore, Fig. 3.8 shows that the normal vector ˆn = −06i −08j, which provides the real
clue. These two facts are simply reminding us to rewrite Eq. (3.10) in a form that preserves a
positive c term, which is achieved by multiplying Eq. (3.10) by −1:
−06x −08y = 2
Now the vector components are correct, and the perpendicular distance from the origin to the
line is +2. Nevertheless, Eq. (3.10) is still valid algebraically, it’s just that a positive c term makes
geometric sense and makes the normal vector components explicit.
3.4 The general form of the line equation
The general form of the line equation is
ax +by +c = 0
The meanings of a b, and c are still the same as before, all that we have done is to form a
single expression that equals zero for any point on the line. Thus, Eq. (3.9) would be written as
06x +08y −2 = 0
This is a convenient notation that lends itself to space partitioning. But before we look at this,
consider how the following general form of the line equation is converted into its Cartesian
equivalent:
06x +08y +2 = 0

Straight lines
69
We begin by moving the c term to the right-hand side:
06x +08y = −2
Notice that the right-hand side is negative, which is compensated for by multiplying the whole
equation by −1 to create
−06x −08y = 2
which now makes geometric sense. Now let’s examine how the general form of the line equation
can be used to partition space.
3.5 2D space partitioning
One recurring problem in computer graphics is the need to know if a point is inside or outside
a 2D area or 3D volume. There are various solutions to this problem, but let’s see how vector
analysis provides some assistance.
Equation (3.9) shows the Cartesian form of a line equation, whose graph is shown in Fig. 3.7.
Rewriting Eq. (3.9) in its general form, we get
06x +08y −2 = 0
(3.11)
When we substitute values of xy for points on the line, the expression 06x +08y −2 equals
zero. But what happens when we substitute points that are on either side of the line? Well, let’s
try substituting some points.
The point 1010 is obviously above the line, and when it is substituted in 06x +08y −2,
we obtain the value +12. On the other hand, the point −10−10 is below the line, and when
substituted in 06x +08y −2 produces the value−16.
If we continued substituting other points, we would discover that the line partitions space
into two zones: a zone above the line where 06x + 08y −2 is positive, and a zone below the
line where 06x +08y −2 is negative. But the terms “above” and “below” are incorrect, as they
have no meaning for vertical lines!
To discover the key to this problem, we need to see what happens when the line’s normal
vector is reversed:
−06x −08y −2 = 0
(3.12)
whose graph is shown in Fig. 3.8. Substituting 1010 in −06x −08y −2 equals −16, whereas
−10−10 equals +12. Notice that for both equations, the positive sign is in the zone containing
the normal vector, which is always the case. The reader may wish to reason why this is so.
Therefore, if we had a convex boundary formed by straight edges, how can we arrange for
their normal vectors to point outwards or inwards? This is what we’ll investigate next. Ideally,
we want to create one of the scenarios shown in Fig. 3.9.

70
Vector analysis for computer graphics
Figure 3.9.
We begin by making the convex boundary from a list of vertices P1P2P3, and P4, defined
in a counter-clockwise sequence, which creates a corresponding chain of straight edges. As an
example, a quadrilateral has been chosen as shown in Fig. 3.10. We now need to find the general
form of the line equation for each boundary edge. If we do not apply a consistent algorithm,
we could end up with an incoherent collection of normal vectors.
X
Y
P4
P2P3
P3P4
P2
P3
P1
P4P1
P1P2
Figure 3.10.
We start with two points P1 and P2 that are the ends of an edge, as shown in Fig. 3.11.

Straight lines
71
n
P2
P1
P1P2
Figure 3.11.
Now we let
n = ai +bj be perpendicular to −−→
P1P2
Therefore,
−−→
P1P2 ·n = 0
and
x2 −x1i +y2 −y1j·ai +bj = 0
ax2 −x1+b y2 −y1 = 0
ax2 −ax1 +by2 −by1 = 0
a
b = y1 −y2
x2 −x1
Therefore,
a = y1 −y2
and
b = x2 −x1
The general form of the line equation is
y1 −y2x +x2 −x1y +c = 0
(3.13)
c is found by substituting P1 or P2 in Eq. (3.13).
We now evaluate Eq. (3.13) for each boundary edge.
−−→
P1P2
x1 = 2
y1 = 1
x2 = 3
y2 = 2

72
Vector analysis for computer graphics
Substituting these in Eq. (3.13), we get
−x +y +c = 0
(3.14)
Substituting the point 21 in Eq. (3.14) gives
−2+1+c = 0
∴c = 1
and the line equation is
−x +y +1 = 0
with a normal vector
−i +j
−−→
P2P3
x1 = 3
y1 = 2
x2 = 2
y2 = 3
Substituting these in Eq. (3.13), we get
−x −y +c = 0
(3.15)
Substituting the point 32 in Eq. (3.15) gives
−3−2+c = 0
∴c = 5
and the line equation is
−x −y +5 = 0
with a normal vector
−i −j
−−→
P3P4
x1 = 2
y1 = 3
x2 = 1
y2 = 2
Substituting these in Eq. (3.13), we get
x −y +c = 0
(3.16)
Substituting the point 23 in Eq. (3.16) gives
2−3+c = 0
∴c = 1
and the line equation is
x −y +1 = 0
with a normal vector
i −j

Straight lines
73
−−→
P4P1
x1 = 1
y1 = 2
x2 = 2
y2 = 1
Substituting these in Eq. (3.13), we get
x +y +c = 0
(3.17)
Substituting the point 12 in Eq. (3.17) gives
1+2+c = 0
∴c = −3
and the line equation is
x +y −3 = 0
with a normal vector
i +j
X
Y
P4
P2P3
P3P4
P2
P3
P1
P4P1
P1P2
Figure 3.12.
Figure 3.12 shows the boundary with the normal vectors superimposed, and we see that all the
normal vectors point to the boundary’s inside. The four expressions can now be tested with
different points, and it is the sign of the expression that confirms their space partition.

74
Vector analysis for computer graphics
If only one expression is zero – the point is on the boundary.
If two expressions are zero – the point is a boundary vertex.
If any expression is negative – the point is outside the boundary.
If all expressions are positive – the point is inside the boundary.
Table 3.1 summarises some of these conditions.
Table 3.1
Point
−x +y +1
−x −y +5
x −y +1
x +y −3
Partition
22
+
+
+
+
inside
11
+
+
+
−
outside
20
−
+
+
−
outside
31
−
+
+
+
outside
42
−
−
+
+
outside
33
+
−
+
+
outside
24
+
−
−
+
outside
13
+
+
−
+
outside
02
+
+
−
−
outside
21
0
+
+
0
vertex
32
0
0
+
+
vertex
23
+
0
0
+
vertex
12
+
+
0
0
vertex
The reader may wish to verify other points, but the contents of Table 3.1 should be sufficient to
demonstrate the integrity of this strategy. However, this technique is sensitive to the boundary’s
vertex sequence. For if the vertices are taken in a clockwise order, the four line equations are
effectively multiplied by −1, which flips the normal vectors:
−x +y +1
⇒
x −y −1
−x −y +5
⇒
x +y −5
x −y +1
⇒
−x +y −1
x +y −3
⇒
−x −y +3
Now the normal vectors point away from the boundary’s inside, which makes the inside partition
negative and the outside positive. This still works, but it highlights the care required when using
this technique.
3.6 A line perpendicular to a vector
In this section we examine how to define a straight line that is perpendicular to a given vector
and passes through a specific point. Figure 3.13 shows this scenario where the reference unit
vector ˆn passes through the origin O and the specified point is T xTyT.

Straight lines
75
O
T
Q
P
ˆn
ˆ
α n
t
p
v
λv
Figure 3.13.
First we let
−→
TQ = v
−→
TP = v
and
−→
OQ = ˆn
From Fig. 3.13 we can state
−→
OQ = −→
OT +−→
TQ
(3.18)
Substituting vector names in Eq. (3.18), we obtain
ˆn = t +v
(3.19)
As ˆn is perpendicular to v, we have
ˆn ·v = 0
Multiplying Eq. (3.19) throughout by ˆn, we obtain
ˆn· ˆn = ˆn ·t + ˆn·v
Therefore,
ˆn· ˆn = ˆn·t
and
 = ˆn·t
(3.20)
We can regard p as being a linear interpolation of t and ˆn (see Section 2.11):
p = 1−t +ˆn
(3.21)

76
Vector analysis for computer graphics
Substituting Eq. (3.20) in Eq. (3.21) gives
p = 1−t +ˆn ·t ˆn
(3.22)
which is the vector equation of the line. However, there is one drawback with this equation.
Notice that the point T must not lie on the perpendicular from the origin; if it does, then vector
v would be a null vector and everything collapses!
To illustrate Eq. (3.22), let ˆn =
1
√
2 i +j and T = 30, as shown in Fig. 3.14.
ˆn
X
Y
T
λ = 2
λ = 0
λ = 1
Figure 3.14.
When  = 0,
p = 3i and P = 30
When  = 1,
p =

1
√
2 i +j·3i

1
√
2 i +j = 3
2 i +j
and
P = 1515
When  = 2,
p = −3i +2

1
√
2 i +j·3i

1
√
2 i +j = −3i +3i +j = 3j
and
P = 03

Straight lines
77
This is just one way of solving this problem. There is another way, which is much simpler and
exploits the perp operator.
We discovered in Section 2.10 that given n = ai +bj, a perpendicular vector n⊥exists such
that n⊥= −bi +aj. Therefore, given a unit vector ˆn = xni +ynj, a perpendicular unit vector ˆv
is given by
ˆv = −yni +xnj
and the line equation is
p = t +ˆv
(3.23)
But Eq. (3.23) does not refer explicitly to the original normal vector ˆn, and if this is preferred, we
must find a way of transforming xni+ynj into −yni+xnj. Fortunately, we can use a determinant
to do this:
−

i
j
xn
yn
 = −yni +xnj
Thus, the line equation is
p = t −

i
j
xn
yn

(3.24)
Whether we use Eq. (3.23) or Eq. (3.24), we can write the line equation as
xp = xt −yn
yp = yt +xn
(3.25)
Taking the previous example, where ˆn =
1
√
2 i +j and T = 30, we can substitute these in
Eq. (3.25) and obtain
xp = 3− 1
√
2
yp = 0+ 1
√
2
When  = 0,
P = 30
When  =
√
2,
P = 21
3.7 The position and distance of a point on a line perpendicular to the origin
In this section we apply vector analysis to a simple geometric problem involving a straight line.
Imagine, then, a straight line that does not intersect the origin. We are going to calculate the
shortest distance from the origin to the line and the coordinates of the point on the line.
We examine two strategies: one for the Cartesian form of the line equation, and the other
using the parametric form.

78
Vector analysis for computer graphics
3.7.1 The Cartesian form of the line equation
With reference to Fig. 3.15, our objective is to establish an equation defining q in terms of the
line equation.
X
Y
Q
n
q
O
Figure 3.15.
We begin the process by defining the line equation as ax + by = c and making Q the nearest
point on the line to the origin with position vector q, which is perpendicular to the line. From
the line equation, the vector normal to the line is
n = ai +bj
(3.26)
and for the moment we will assume that n is not a unit vector. Let
q = xi +yj
Therefore,
n ·q = ax +by = c
(3.27)
We now need to find the coordinates of Q and its distance from the origin.
As q is parallel with n, let
q = n
(3.28)
where  is a scalar that has to be found to solve the problem.
Using n, take the dot product of Eq. (3.28) and substitute it in Eq. (3.27):
n·q = n ·n
Therefore,
n ·n = c
where
 =
c
n ·n =
c
n 2 
(3.29)

Straight lines
79
By substituting  in Eq. (3.28), we can find Q:
q =

c
n 2

n
(3.30)
The distance OQ = q .
If the normal vector n in the line equation is a unit vector ˆn, the results are greatly simplified:
 = c
and
q = c ˆn
X
Y
Q
n
q
O
1
1
Figure 3.16.
Let’s test Eq. (3.30) with an example.
Figure 3.16 shows the graph of straight-line equation where
x +y = 1
Therefore,
n = i +j and c = 1
Using Eq. (3.29) gives
 =
c
n2 = 1
2
Using Eq. (3.30) shows that
q = 1
2 i +j
The nearest point to O is Q 1/2 1/2, and the distance
OQ = q  = 1
2 n  = 1
2
√
2 = 07071
Now let’s examine the same problem using the parametric form of the line equation.

80
Vector analysis for computer graphics
3.7.2 The parametric form of the line equation
q
t
X
Y
Q
O
T
λv
Figure 3.17.
With reference to Fig. 3.17, let the straight-line equation be
q = t +v
(3.31)
The objective is to establish the value of .
Q is nearest to O when q is perpendicular to. Therefore,
v ·q = 0
(3.32)
Using v, take the dot product of Eq. (3.31) and substitute it in Eq. (3.32):
v ·q = v ·t +v ·v = 0
Therefore,
 = −v ·t
v ·v = −v ·t
v 2 
The position vector for Q is then given by
q = t −
 v ·t
v 2

v
(3.33)
and the distance OQ = q .
Eq. (3.33) is greatly simplified if v is a unit vector ˆv:
q = t +ˆv
Therefore,
 = −ˆv ·t
and
q = t −ˆv ·t ˆv
(3.34)
Again, let’s test Eq. (3.34) with an example.

Straight lines
81
1
q
t
X
Y
Q
O
T
ˆ
λv
1
Figure 3.18.
With reference to Fig. 3.18, let the line equation be
q = t +ˆv
where
t = i and ˆv =
1
√
2 −i +j
Therefore,
 = −1
√
2 −i +j·i =
1
√
2
and
q = i +
1
√
2
	
1
√
2 −i +j

= i −1
2i + 1
2j
q = 1
2i + 1
2j
Therefore,
Q =
 1
2
1
2

and OQ =

1
2
2 + 1
2
2 =
1
√
2 = 07071
3.8 The position and distance of the nearest point on a line to a point
In computer graphics we are often interested in knowing the distance between two objects,
which depends on whether the objects are represented by polygons, patches, or functions. To
begin this analysis, let’s start with finding the distance between the nearest point on a line to a
point.
As we saw in Section 3.7, the form of the line equation gives rise to two solutions, so we will
explore both the Cartesian and parametric forms.

82
Vector analysis for computer graphics
3.8.1 The Cartesian form of the line equation
The strategy is virtually identical to that used in Section 3.7, apart from the fact that the point
is not located at the origin.
Figure 3.19 shows a typical scenario with the point P and its closest neighbor Q xy on the
line. There are four vectors to consider:
n is the line’s normal vector,
p is P’s position vector,
q is Q’s position vector, and
n connects P to Q, where  is a scalar.
P
Q
n
p
q
λ n
X
Y
Figure 3.19.
With reference to Fig. 3.19, let the line equation be
ax +by = c
Then the vector normal to the line is
n = ai +bj
Let
q = xi +yj
Therefore,
n ·q = ax +by = c
(3.35)
From Fig. 3.19, we have
q = p+n
(3.36)
The objective is to find the value of .
Multiply Eq. (3.36) throughout using n:
n ·q = n ·p+n ·n
(3.37)

Straight lines
83
Substituting Eq. (3.35) in Eq. (3.37), we get
c = n ·p+n·n
which enables us to define :
 = c −n·p
n ·n
= c −n ·p
n 2 
(3.38)
Substituting  in Eq. (3.36) gives
q = p+
c −n·p
n 2

n
(3.39)
The distance
PQ = n
If n is a unit vector ˆn, Eq. (3.39) simplifies to
q = p+c −ˆn ·p ˆn
and the distance
PQ = c −ˆn ·p
Equation (3.39) covers all positions for P, including the origin. Therefore, if we make p a null
vector,
q =

c
n 2

n
which is identical to Eq. (3.30)!
Let’s test Eq. (3.39) with a predictable example, as shown in Fig. 3.20.
X
Y
Q
n
q
O
1
1
P(1,1)
p
Figure 3.20.
P has coordinates 11, which means that Q has coordinates
 1
2
1
2

:
p = i +j
The line equation is
x +y = 1

84
Vector analysis for computer graphics
Therefore,
n = i +j
and
c = 1
Using Eq. (3.38),
 = c −n ·p
n·n
= 1−2
2
= −1
2
Using Eq. (3.39),
q = p−1
2n = i +j−1
2 i +j = 1
2i + 1
2j
giving
Q
 1
2
1
2


The distance
PQ = n =
−1
2 i +j
 =
√
2
2 = 07071
Now let’s consider the parametric form of the line equation.
3.8.2 The parametric form of the line equation
T
P
X
Y
Q
t
q
p
λv
v
r
Figure 3.21.
With reference to Fig. 3.21, let the straight-line equation be
q = t +v
(3.40)
The objective is to find the value of .
Q is the nearest point on the line to P with position vector q.
Because r⊥v, p, and q have identical projections on v, we find that
v ·p = v ·q
(3.41)

Straight lines
85
Multiply Eq. (3.40) throughout using v:
v ·q = v ·t +v ·v
(3.42)
Substituting Eq. (3.41) in Eq. (3.42) gives
v ·p = v ·t +v ·v
(3.43)
From Eq. (3.43), we see that
 = v ·p−t
v ·v
= v ·p−t
v 2

(3.44)
Substituting Eq. (3.44) in Eq. (3.40) gives
q = t +
v ·p−t
v 2

v
(3.45)
The distance PQ = r  = p−q  = p−t +v.
If v is a unit vector ˆv, then
 = ˆv ·p−t
q = t +ˆv ·p−t ˆv
X
Y
Q
n
q
O
1
1
P(1,1)
p
T
t
ˆ
λv
Figure 3.22.
Let’s test the validity of Eq. (3.45).
Figure 3.22 shows a parametric line and a point P 11. The line equation is
q = t +ˆv
where
ˆv =
1
√
2 −i +j
Also,
p = i +j
and
t = i
Therefore,

86
Vector analysis for computer graphics
 = ˆv ·p−t =
1
√
2 −i +j·i +j−i =
1
√
2
and
q = i +
1
√
2
1
√
2 −i +j = 1
2i + 1
2j
The coordinates of Q are
 1
2 1
2

.
The distance
PQ =
i +j−
	
i +
1
√
2
1
√
2 −i +j

 =
 1
2 i + 1
2j
 =
√
2
2 = 07071
3.9 The position of a point reflected in a line
In this section we consider the problem of calculating the reflection of a point in a straight
line, and once more we consider two separate strategies for two forms of the line equation. In
both cases, the key to the solution is based on the fact that the line connecting the point to its
reflection is perpendicular to the reflecting line.
3.9.1 The Cartesian form of the line equation
Q
X
Y
T
P
O
n
t
p
q
λ n
λ n
Figure 3.23.
The objective is to produce a vector equation of the form q = p+. The RHS of this equation
can only contain references to p and variables in the line equation.  is acceptable, so long as
it can be defined. As −→
QP is orthogonal to the reflecting line, we must anticipate employing the
dot product.
With reference to Fig. 3.23, let the line equation be
ax +by = c

Straight lines
87
Then the vector normal to the line is
n = ai +bj
Let T xy be a point on the line with position vector t = xi +yj. Therefore,
n ·t = ax +by = c
(3.46)
Now
p = t +n
(3.47)
Using n, take the dot product of Eq. (3.47):
n ·p = n ·t +n ·n
(3.48)
Substituting Eq. (3.46) in Eq. (3.48) gives
n·p = c +n·n
Therefore, we have
 = n ·p−c
n ·n
= n ·p−c
n 2 
(3.49)
Now
q = p−2n
Therefore,
q = p−2
n·p−c
n 2

n
(3.50)
If n is a unit vector ˆn, then
q = p−2ˆn·p−c ˆn
(3.51)
Before proceeding with the parametric form of the line equation, let’s test Eq. (3.51) with a
simple example — one where we can predict the result.
X
Y
P(1,2)
Q(1,0)
y = 1
ˆn = j
1
Figure 3.24.

88
Vector analysis for computer graphics
Figure 3.24 shows the graph of the line equation y = 1. Thus, ˆn = j and c = 1. The reference
point is P 12, and it is obvious that the reflected point must be Q 10.
Using Eq. (3.50), we obtain
q = p−2ˆn ·p−c ˆn = i +j−2j·i +j−1j
q = i +2j−2j·i +2j−1j = i
Therefore,
Q = 10
3.9.2 The parametric form of the line equation
Figure 3.25 illustrates a line whose direction is given by v. T xyis some point on the line
with position vector t = xi +yj, and P is some arbitrary point with position vector p. Q is the
reflection of P with position vector q.
Q
X
Y
T
P
O
t
p
q
v
n
R
r
λv
εn
εn
Figure 3.25.
The following analysis exploits the fact that −→
PQ is perpendicular to v, and the objective is to
find q in terms of tp, and v. We begin with
r = t +v
(3.52)
Using v, take the dot product of Eq. (3.52):
v ·r = v ·t +v ·v
(3.53)
As p and r have a common projection on v, we have
v ·p = v ·r
(3.54)
Substituting Eq. (3.54) in Eq. (3.53) gives
v ·p = v ·t +v ·v
Therefore,
 = v ·p−t
v ·v
= v ·p−t
v 2

(3.55)

Straight lines
89
As r is mid-way between p and q, we have
r = 1
2p+ 1
2q
and
q = 2r −p
(3.56)
Substituting Eq. (3.52) in Eq. (3.56) gives
q = 2t +v−p
If v is a unit vector ˆv, then
 = ˆv ·p−t
(3.57)
q = 2t +ˆv−p
(3.58)
Let’s test Eq. (3.4) with a simple example.
Figure 3.26 illustrates a line whose direction is given by ˆv =
1
√
2 −i +j. T 10 is some point
on the line with position vector t = i, and P 11 is some arbitrary point with position vector
p = i +j.
1
X
Y
Q
n
1
P(1,1)
p
T
t
v
Figure 3.26.
Using Eq. (3.57) gives
 = ˆv ·p−t =
1
√
2 −i +j·i +j−i =
1
√
2
 =
1
√
2
Using Eq. (3.58) gives
q = 2t +ˆv−p = 2
	
i +
1
√
2
1
√
2 −i +j

−i −j = 2i −i +j−i −j = 0
Therefore, the reflected point is Q 00.
3.10 A line perpendicular to a line through a point
Here is another geometric problem. Given a line m and a point P, what is the equation of a
straight line that passes through P and is perpendicular to m? The algebraic solution is relatively
easy to solve, so let’s consider a vector solution.

90
Vector analysis for computer graphics
3.10.1 The parametric form of the line equation
For 2D lines we can exploit the perp operator.
X
Y
P
Q
p
q
u
v
Figure 3.27.
Let the line’s direction vector be v; therefore, the perpendicular vector is u = v⊥(Fig. 3.27).
Therefore, the equation of the perpendicular line is
q = p+u
or
q = p+v⊥
X
Y
P
Q
q
p = i
v = i
u = j
Figure 3.28.
For example, Fig. 3.28 shows a 2D line where
v = i and u = j
If the point P is 10, then p = i and
q = p+v⊥
q = i +j

Straight lines
91
Now let’s consider the solution for a 2D or 3D line.
We begin with the scenario shown in Fig. 3.29.
X
Y
P
Q
T
t
p
q
u
εv
R
r
Figure 3.29.
The objective is to find an equation defining q in terms of pv, and t. We start with
u = r −p
Let
r = t +v where  is a scalar
(3.59)
Therefore,
u = t +v −p
Because u is perpendicular to v, r and p have the same projection on v. Therefore,
v ·r = v ·p
(3.60)
Using v, take the dot product of Eq. (3.59):
v ·r = v ·t +v ·v
(3.61)
Substituting Eq. (3.60) in Eq. (3.61) gives
v ·p = v ·t +v ·v
Therefore,
 = v ·p−t
v ·v
= v ·p−t
v 2

(3.62)
Therefore, we can write
q = p+u

92
Vector analysis for computer graphics
where
u = t +v −p
If v is a unit vector ˆv, then
 = ˆv ·p−t
(3.63)
u = t +ˆv −p
(3.64)
and
q = p+u
(3.65)
Let’s find u in Fig. 3.30.
X
Y
Z
T
P
p
t
u
ˆv
Figure 3.30.
It just so happens that the values of p and t give rise to a simple solution.
Nevertheless, we will apply Eqs. (3.63) and (3.64) to demonstrate their validity.
Let
ˆv =
1
√
2 i +k
t = i +k
p = i −j+k
Then
 =
1
√
2 i +k·i −j+k −i −k =
1
√
2 i +k·−j = 0
 = 0
Using Eq. (3.64) gives
u = i +k −i +j−k = j
Therefore, the line equation is q = p+j, which is correct.

Straight lines
93
3.11 A line equidistant from two points
The problem here is to identify a line that is equidistant from two points and is perpendicular
to the line connecting the two points. This is a problem that only exists in R2; the R3 equivalent
involves a plane equidistant from two points. So let’s consider a parametric solution using the
perp operator.
X
Y
P
P1
P2
p
p1
p2
n
v
Figure 3.31.
With reference to Fig. 3.31, we see that
n = p2 −p1 = x2 −x1i +y2 −y1j
The line’s direction vector v is perpendicular to n:
v = n⊥= −y2 −y1i +x2 −x1j
The position vector p is given by
p = 1
2 p2 +p1
Therefore, any point q on the line is given by
q = p+v
More explicitly:
xq = 1
2 x2 +x1−y2 −y1
yq = 1
2 y2 +y1+x2 −x1

94
Vector analysis for computer graphics
3.12 The equation of a line segment
The line segment is very important in computer graphics as it is a fundamental building block
for 2D and 3D polygons, and all sorts of surface meshes. In R2 we need to clip line segments
against rectangular windows; in R3 we need to clip line segments against a viewing frustum;
and in R2 and R3 we need to compute the potential intersection of two line segments.
The parametric form of the straight-line equation is the most practical basis for manipulating
straight-line segments, where the controlling parameter can be used to determine the position
of a point along the segment.
X
Y
P1
P2
P
λv
p1
p2
p
Figure 3.32.
With reference to Fig. 3.32, we define a line segment by two points P1 x1y1 and P2 x2y2
and their respective position vectors p1 and p2. P xPyP is a point on the line segment with
position vector p.
Let
v = p2 −p1
and
p = p1 +v
Therefore,
xP = x1 +x2 −x1
yP = y1 +y2 −y1
P is between P1 and P2 for  ∈	0 1
.
By changing  between 0 and 1, we slide along the line segment.
3.13 The intersection of two straight lines
The need to compute line intersections arises in 2D and 3D clipping, modeling, and animation.
Most of the time we are concerned with line segments, rather than infinite lines, although the
latter are required in illumination calculations, ray casting, and ray tracing. To set the scene, let
us calculate the point of intersection of two straight lines in R2.

Straight lines
95
To begin with, we must anticipate all the possibilities that could arise with two lines: the
first is that the lines do intersect, giving a single point of intersection; second, the lines could
be coincident, producing an infinite number of intersections; and third, the lines are distinct,
but parallel, producing no intersections. Although one can approach this problem using line
equations, we consider only a vector approach.
X
Y
P
R
S
r
s
p
a
b
Figure 3.33.
The lines are shown in Fig. 3.33 and are defined as follows:
p = r +a
p = s+b
where  and  are scalars, and the direction vectors are
a = xai +yaj
b = xbi +ybj
The task now is to discover the values of  and  at the point P. Let P xPyP be the point of
intersection of the two lines and p its position vector. Therefore,
r +a = s+b
(3.66)
In order to isolate , we multiply Eq. (3.71) by b⊥:
b⊥·a = b⊥·s−r+b⊥·b
and as b⊥·b = 0,
 = b⊥·s−r
b⊥·a
from which we can state that
 = xb yS −yR−yb xS −xR
xbya −xayb


96
Vector analysis for computer graphics
In order to isolate , we multiply Eq. (3.71) by a⊥:
a⊥·b = a⊥·r −s+a⊥·a
and as a⊥·a = 0,
a⊥·b = a⊥·r −s
 = a⊥·r −s
a⊥·b
from which we can state that
 = −ya xR −xS+xa yR −yS
−yaxb +xayb
or
 = xa yS −yR−ya xS −xR
xbya −xayb

The coordinates of P are given by
xP = xR +xa
yP = yR +ya
or
xP = xS +xb
yP = yS +yb
But what if the lines are parallel? Well, this can be detected when a = tb, i.e., xbya −xayb = 0.
Before moving on to the intersection of two line segments, let’s test the above equations with
an example.
X
Y
P
R
S
s
r
a
b
2
2
Figure 3.34.
Figure 3.34 shows two lines intersecting at P. The line equations are given by
r = 2i +2j and a = −i −j
s = 2i and b = −i +j

Straight lines
97
Therefore,
 =
−1−2−0
−1×−1−−1×1 = 1
or
 = −1−2+10
−1−1+11 = 1
and
xP = xR +xa = 2−1 = 1
yP = yR +ya = 2−1 = 1
making the intersection point 11, which is correct.
3.14 The point of intersection of two 2D line segments
In Section 3.13 we calculated the intersection point of two infinite 2D lines, and in this section
we exploit this knowledge to detect the potential intersection of two finite 2D line segments.
As the segments are represented by parametric vectors, the value of the parameter is the key to
identifying intersections, non-intersections, and touch conditions.
X
Y
P
R1
S1
r1
s1
r
a
b
r2
R2
S2
s
s2
Figure 3.35.
We let the end points of the line segments be defined by R1 xR1yR1, R2 xR2yR2 and
S1 xS1yS1, S2 xS2yS2, where P xPyP is the point of intersection. From Fig. 3.35, we see that
a = r2 −r1 and b = s2 −s1
and the line segment equations are
r = r1 +a and s = s1 +b

98
Vector analysis for computer graphics
For intersection at P, we have
r1 +a = s1 +b
where
a = s1 −r1 +b
(3.67)
and
b = r1 −s1 +a
(3.68)
To find , multiply Eq. (3.67) by b⊥:
b⊥·a = b⊥·s1 −r1+b⊥·b
and as b⊥·b = 0,
 = b⊥·s1 −r1
b⊥·a
and
 = xb yS1 −yR1−yb xS1 −xR1
xbya −ybxa

(3.69)
To find , multiply Eq. (3.68) by a⊥:
a⊥·b = a⊥·r1 −s1+a⊥·a
and as a⊥·a = 0,
 = a⊥·r1 −s1
a⊥·b
and
 = xa yR1 −yS1−ya xR1 −xS1
xayb −yaxb

(3.70)
If  ∈	01
, the lines intersect or touch one another, and the coordinates of P are given by
xP = xR1 +xa
yP = yR1 +ya
or
xP = xS1 +xb
yP = yS1 +yb

Straight lines
99
The line segments are parallel if the denominator in Eq. (3.69) or Eq. (3.70) is zero. Table 3.2
illustrates the relative positions of the line segments for different values of  and .
Table 3.2




0
0
b
a
0 <  < 1
b
a
1
b
a
0 <  < 1
0
b
a
0 <  < 1
b
a
1
b
a
1
0
b
a
0 <  < 1
b
a
1
b
a

4 The Plane
4.1 Introduction
Planar polygons play an important role in computer graphics. In this chapter we discover
what benefits vectors bring to solving problems involving planes. We begin this exploration by
examining the Cartesian form of the plane equation.
4.2 The Cartesian form of the plane equation
The general form of the plane equation creates an equation that equals zero, whereas the
Cartesian form organizes the equation such that a constant term is isolated on one side of the
equals sign:
ax +by +cz = d
Both forms have their individual advantages, but the Cartesian form is useful from a geometric
perspective.
We are going to use vector analysis to derive the plane equation, and the reader will see
that there is an intimate relationship between this and the Cartesian form of the line equation
described in Section 3.3. Furthermore, we will approach the analysis in an identical fashion.
Step 1
Define a plane away from the origin O containing the point P x y z and its associated
position vector p, as shown in Fig. 4.1.
101

102
Vector analysis for computer graphics
X
Y
Z
P
p
O
Figure 4.1.
Step 2
Construct a line from O to a point C on the plane such that −→
OC is perpendicular to the plane.
It is convenient to make −→
OC a scalar multiple of a unit vector ˆn = ai +bj+ck, i.e., −→
OC = d ˆn,
where d is some scalar, as shown in Fig. 4.2.
X
Y
Z
P
p
O
C
ˆ
dn
ˆn
CP
Figure 4.2.
We can now write −→
OP = −→
OC +−→
CP. Substituting vector names gives
p = dˆn+−→
CP
(4.1)
Although we know d and ˆn, and the fact that p points to any point on the plane, we do not
know −→
CP. Somehow, −→
CP has to be eliminated, which can be achieved by the same cunning
subterfuge used in Section 3.3.
Remember that the dot product of two perpendicular vectors is zero. Then dˆn · −→
CP must
equal zero. But the d is superfluous; therefore, ˆn·−→
CP = 0.
Unfortunately, Eq. (4.1) does not contain such a term, but there is nothing to stop us from
introducing one by multiplying Eq. (4.1) by ˆn using the dot product:
ˆn·p = dˆn· ˆn + ˆn ·−→
CP
which now reduces to
ˆn ·p = d ˆn · ˆn
(4.2)

The plane
103
But we already know that ˆn· ˆn = 1. Therefore,
ˆn·p = d
(4.3)
Expanding Eq. (4.3), we get
ax +by +cz = d
which we recognise as the Cartesian form of the plane equation where
xyz are the coordinates of a point on the plane,
ab and c are the components of a unit vector normal to the plane, and
d is the perpendicular distance from the origin to the plane.
The above analysis assumes that the vector normal to the plane is a unit vector, which gives
a precise geometric meaning to d. However, we must be careful not to apply this geometric
meaning to all plane equations. For example, consider the following equation:
2x +3y +4z = 10
(4.4)
The vector normal to the plane is clearly not a unit vector, as its magnitude is
√
22 +32 +42 =
√
29
But if we divided Eq. (4.4) throughout by
√
29, we would have
2
√
29
x +
3
√
29
y +
4
√
29
z = 10
√
29

The perpendicular distance from the origin to the plane is 10
√
29.
Let us now consider an alternative definition of the plane equation – the parametric form.
4.3 The parametric form of the plane equation
The parametric form of the plane equation requires two vectors and a single point to define
a plane. The two vectors provide the orientation of a plane, while the single point identifies a
specific plane. Such a scenario is shown in Fig. 4.3.

104
Vector analysis for computer graphics
X
Y
Z
P
T
b
εb
a
λ
p
c
t
a
Figure 4.3.
Let vectors a and b be parallel to the plane and defined as
a = xai +yaj+zak
b = xbi +ybj+zbk
and the point T xTyTzT is on the plane. Therefore,
c = a +b
where  and  are scalars. But
p = t +c
Therefore,
p = t +a +b
More explicitly,
xP = xT +xa +xb
yP = yT +ya +yb
zP = zT +za +zb
If a and b are unit vectors and are mutually perpendicular, i.e., a ·b = 0,  and  become linear
measurements along the a- and b-axes relative to T.
4.4 A plane equation from three points
We know that two points are required to define a line, but three points are needed to define a
plane. So let us now consider how the plane equation is derived from three such points.

The plane
105
T
R
S
P
w
u
v
×
u
v
Figure 4.4.
We start with three points, RxR yR zR S xS yS zS, and T xT yT zT, as shown
in Fig. 4.4, and create two vectors, u = −→
RS and v = −→
RT. The three points are assumed to be
in a counterclockwise sequence viewed from the direction of the surface normal. The vector
product u ×v provides a vector normal to the plane containing the points:
u ×v =

i
j
k
xu
yu
zu
xv
yv
zv


We now take another point, P xyz, which is on the plane, and form a vector, w = −→
RP.
Therefore, the scalar product w ·u ×v = 0. This condition can be expressed as a determinant
and converted into the general equation of a plane:
w ·u ×v =

xw
yw
zw
xu
yu
zu
xv
yv
zv

= 0
(4.5)
Expanding Eq. (4.5), we obtain
xw

yu
zu
yv
zv
+yw

zu
xu
zv
xv
+zw

xu
yu
xv
yv
 = 0
which becomes
x −xR

yS −yR
zS −zR
yT −yR
zT −zR
+y −yR

zS −zR
xS −xR
zT −zR
xT −xR
+z −zR

xS −xR
yS −yR
xT −xR
yT −yR
 = 0
This can be arranged in the Cartesian form of the line equation
ax +by +cz = d
where
a =

yS −yR
zS −zR
yT −yR
zT −zR

or
a =

1
yR
zR
1
yS
zS
1 yT
zT


106
Vector analysis for computer graphics
b =

zS −zR
xS −xR
zT −zR
xT −xR

or
b =

xR 1 zR
xS 1 zS
xT 1 zT

c =

xS −xR
yS −yR
xT −xR
yT −yR

or
c =

xR yR 1
xS yS 1
xT yT 1

d = axR +byR +czR
4.5 A plane perpendicular to a line and passing through a point
Although there are an infinite number of planes perpendicular to a given line, simply by defining
a point that lies on a plane enables us to fix a unique plane. In this section we derive a formula
that defines the Cartesian form of the plane equation using a line and a point. The line represents
a vector perpendicular to a plane, while the point identifies a specific plane in space.
X
Y
Z
Q
P
n
q
p
Figure 4.5.
With reference to Fig. 4.5, let the plane equation be
ax +by +cz = d
and the line direction vector be
n = ai +bj+ck
and the specified point on the plane be
Q

xQyQzQ



The plane
107
If P is any point on the plane with position vector
p = xi +yj+zk
then
n·p = d
(4.6)
As p and q share a common projection on n,
n·p = n ·q
(4.7)
Substituting Eq. (4.6) in Eq. (4.7) gives
n·q = d
axQ +byQ +czQ = d
(4.8)
Substituting Eq. (4.8) in Eq. (4.6) gives
ax +by +cz = axQ +byQ +czQ
(4.9)
X
Y
Z
n
1
1
1
Figure 4.6.
To test Eq. (4.9), consider the scenario shown in Fig. 4.6. The line’s direction vector n is given by
n = i +j+k
and the point on the plane is Q 100. Therefore, the plane’s equation is
ax +by +cz = 1

108
Vector analysis for computer graphics
4.6 A plane through two points and parallel to a line
The task in this section is to create a Cartesian plane equation from two points and a line. The
line is parallel with the plane, rather than being perpendicular to the plane, and the two points
are used to locate a second line and provide a point that resides on the plane. We begin by
creating two vectors: one from the two points and the other from the line. The vector-product
of these vectors is normal to the associated plane. Figure 4.7 shows the two points M and N,
and the direction vector a representing the line.
X
Y
Z
n
b
a
M
N
Figure 4.7.
Let the line be defined by
p = r +a
where
a = xai +yaj+zak
The two points are
M xMyMzM and N xNyNzN
Therefore, the vector b is given by
b = xN −xMi +yN −yMj+zN −zMk
The vector n perpendicular to the plane is the cross product of a and b:
a ×b = n
where
n = ai +bj+ck

The plane
109
and
a =

ya za
yb zb

b =

za xa
zb xb

c =

xa ya
xb yb

Therefore, the plane equation is
ax +by +cz = d
To find d, we chose one of the two points on the plane, say M, and we can state
axM +byM +czM = d
Therefore,
ax +by +cz = axM +byM +czM
(4.10)
Y
1
1
1
N
a
b
Z
X
M
Figure 4.8.
We can test Eq. (4.10) using the same example in the previous section, as shown in Fig. 4.8.
The line’s direction vector a is given by
a = i −k
and the two points M and N are
M 010 and N 100
Therefore,
a =

0 −1
−1
0

b =

−1 1
0 1

c =

1
0
1 −1

a = −1
b = −1
c = −1

110
Vector analysis for computer graphics
If we evaluate Eq. (4.10) using abc, and M, we obtain
−x −y −z = −1
(4.11)
We can tidy up Eq. (4.11) by multiplying throughout by –1 to give
x +y +z = 1
Now let’s examine the ideas behind 3D space partitioning.
4.7 3D space partitioning
In Section 3.5 we discovered how it was possible to determine whether a point was inside or
outside a convex boundary. The technique also revealed whether a point was on a boundary
vertex or edge. Now let’s explore a similar technique where we can determine whether a point
is inside, outside, or on a vertex, edge, or surface forming a convex polyhedron.
A simple example reveals the underlying mechanism of this form of 3D space partitioning.
A unit cube has been chosen aligned with the x-, y-, and z-axes, as it keeps the mathematics
very simple. However, it should be obvious from this example that the mathematical reasoning
holds for any convex polyhedron.
u
v
n
P
X
Y
Z
u
v
n
P
X
Y
Z
u
v
n
P
X
Y
Z
u
v
n
P
X
Y
Z
u
v
n
P
X
Y
Z
u
v
n
P
X
Y
Z
Figure 4.9.
Figure 4.9 shows six views of a unit cube with each surface highlighted with its normal vector
n. To ensure that all the normal vectors point inwards, it is derived from two similar edges
forming each surface. We assume that the surfaces are defined by a chain of edges defined in a
counter-clockwise sequence when viewed from the outside, as shown in Fig. 4.9.

The plane
111
The cross-product operation is used to create a normal vector from two adjacent edges
selected from each surface. Any two will do, but the selection procedure must be the same for
all the surfaces, otherwise the normal vector will not point consistently inwards or outwards.
The chosen edges are the vectors u and v, as shown in Fig. 4.9.
By reversing one of them, say u, we can see that
n = −u ×v
Furthermore, given a vector
n = ai +bj+ck
the plane equation is given by
ax +by +cz = axP +byP +czP
where xPyPzP is a point on the plane. Such a point is shown on each view in Fig. 4.9.
For example, in the first view,
u = −i
v = j
n = k
P = 000
therefore, the plane equation is given by z = 0. These results are shown in the first row of
Table 4.1, followed by the other five surfaces.
The LHS of the plane equation returns a value of zero for any point on the plane; a positive
or negative value is returned for points not on the plane. If the point is in the space partition
occupied by the surface normal, a positive value is returned, otherwise it is negative.
Table 4.2 illustrates how the LHS expressions of the plane equations react to five different
points. With reference to Fig. 4.10, the point
 1
2 1
2 1
2

is obviously inside the convex volume,
and all the expressions are positive, whereas the point 102 is outside the volume and the
expression −z +1 returns a negative value. Consequently, if any expression goes negative, the
search can halt and the point is declared outside.
If a point resides on one of the surfaces, the corresponding expression returns a zero value,
as shown with the point
 1
21 1
2

. If a point resides on an edge, two expressions return a zero
value, as shown with the point  1
201. Finally, if a point resides on a vertex, three expressions
return a zero value, as shown with the point 111. The table entries that determine the final
result are shaded.

112
Vector analysis for computer graphics
outside 
edge 
vertex 
surface 
inside 
X
Y
Z
Figure 4.10.
Table 4.1
Surface
u
v
n =–u×v
P
Equation
1
–i
j
k
000
z = 0
2
j
k
–i
110
−x +1 = 0
3
i
j
–k
101
−z +1 = 0
4
j
–k
i
011
x = 0
5
–i
k
–j
010
−y +1 = 0
6
k
–i
j
101
y = 0
Table 4.2
LHS expression
 1
2 1
2 1
2

102
 1
21 1
2

 1
201

111
z
+
+
+
+
+
−x +1
+
0
+
+
0
−z +1
+
–
+
0
0
x
+
+
+
+
+
−y +1
+
+
0
+
0
y
+
0
+
0
+
Result
inside
outside
surface
edge
vertex
Hopefully, this simple exercise has revealed just how useful vectors are in resolving a very useful
space-partitioning technique.

The plane
113
4.8 The angle between two planes
The angle between two planes is readily computed using the dot product of the two surface
normals. For example, given two Cartesian plane equations
ax1 +by1 +cz1 = d1
and
ax2 +by2 +cz2 = d2
the normal vectors are
n1 = a1i +b1j+c1k
and
n2 = a2i +b2j+c2k
Therefore,
n1 ·n2 = n1n2cos
and
 = cos−1

n1 ·n2
n1n2


If
n1 = n2 = 1
then
 = cos−1 n1 ·n2
X
Y
Z
n1
n2
Figure 4.11.

114
Vector analysis for computer graphics
For example, Fig. 4.11 shows two planes whose plane equations are given by
y = 0
and
x +y = 1
Therefore, the two normal vectors are
n1 = j
and
n2 = i +j
Therefore,
 = cos−1
j·i +j
1×
√
2

= cos−1
√
2
2

= 45
4.9 The angle between a line and a plane
The angle between a line and a plane is virtually identical to that used to find the angle between
two planes. All that is required is the line’s direction vector and plane’s normal vector. The dot
product of the two vectors will then reveal their separating angle.
X
Y
Z
T
t
p
P
n
v
Figure 4.12.
For example, Fig. 4.12 shows a line and a plane where the line is defined as
p = t +v
and the plane equation by
ax +by +cz = d

The plane
115
The plane’s surface normal is
n = ai +bj+ck
Therefore,
n ·v = n·vcos
and
 = cos−1

n·v
n·v

If
n = v = 1
then
 = cos−1 n ·v
when the line is parallel with the plane n·v = 0
4.10 The position and distance of the nearest point on a plane to a point
This problem is concerned with the relationship between a point and a plane; in particular, the
problem of finding the position and distance of a point on a plane that is the nearest to some
specific point. For example, Fig. 4.13 shows a polygon representing a ground plane and a point
P in space. The problem is to find the location and distance of a point on the plane that is
nearest to P. Hopefully, it is obvious that the nearest point on the plane is perpendicular to P,
which means that the dot product plays some role in the solution. Let’s examine how vector
analysis reveals a solution.
X
Y
Z
r
P
Q
p
q
n
Figure 4.13.

116
Vector analysis for computer graphics
Let the plane equation be
ax +by +cz = d
Therefore, the surface normal n is given by
n = ai +bj+ck
Let Q xyz be the nearest point on the plane to P. Therefore,
q = xi +yj+zk
and
n ·q = d
(4.12)
Let
−→
QP = r = n
Therefore,
q = p−n
(4.13)
To find q, we need to find .
Using n, take the dot product of Eq. (4.13):
n·q = n·p−n·n
(4.14)
Substitute Eq. (4.12) in Eq. (4.14):
d = n·p−n·n
and
 = n ·p−d
n·n
= n·p−d
n2

If
n = 1
then
 = n ·p−d
Q is given by
q = p−n
(4.15)

The plane
117
The distance of Q is
PQ = n
If
n = 1
then
PQ = 
Let’s test Eq. (4.15) with an example.
X
Y
Z
1
1
1
Q
P
Figure 4.14.
Figure 4.14 shows a triangle whose plane equation is
x +y +z = 1
Therefore,
n = i +j+k
and
d = 1
We will find the nearest point on the triangle to the origin by making P = 000.
Therefore,
 = n·p−d
n2
= i +j+k·0i +0j+0k−1
√
3
√
3
= −1
3
and
q = p−n = 0i +0j+0k−

−1
3

i +j+k
q = 1
3i + 1
3j+ 1
3k
Therefore, the nearest point to P is
 1
3 1
3 1
3

.

118
Vector analysis for computer graphics
4.11 The reflection of a point in a plane
When dealing with mirrors, we need to know how to compute the virtual position of an object’s
reflection. Once we know how to compute a single point, most objects can be processed. Central
to the solution of this problem is the fact that the virtual reflection is the same distance behind
the mirror as the object is in front of the mirror. Furthermore, a line connecting a real point
to its virtual reflection is orthogonal to the mirror (see Fig. 4.15).
X
Y
Z
P
Q
T
p
t
q
λn
λn
n
Figure 4.15.
Let the mirror’s plane equation be
ax +by +cz = d
then the vector normal is
n = ai +bj+ck
Let T be a point on the mirror such that −→
TP is parallel to n. Let T’s position vector be
t = xi +yj+zk
Therefore,
n ·t = ax +by +cz = d
(4.16)
Now
p = t +n
(4.17)
where  is a scalar.
Using n, take the dot product of Eq. (4.17):
n·p = n ·t +n·n
(4.18)

The plane
119
Substituting Eq. (4.16) in Eq. (4.18) gives
n ·p = d +n ·n
Therefore,
 = n ·p−d
n·n
= n ·p−d
n2

(4.19)
But
q = p−2n
Therefore,
q = p−2
n ·p−d
n2

n
(4.20)
which enables us calculate the location of Q.
If n is a unit vector ˆn, then
q = p−2ˆn ·p−d ˆn
(4.21)
Let’s explore two scenarios for these equations: one with a point behind the mirror and one in
front, which will demonstrate that mathematical mirrors possess two reflecting sides.
X
Y
Z
1
1
1
Q
P
Figure 4.16.
Figure 4.16 shows a triangular mirror whose plane equation is given by
x +y +z = 1
where
n = i +j+k

120
Vector analysis for computer graphics
and
d = 1
To start with, let
P = 000
Using Eq. (4.20) gives
q = 0i +0j+0k−2
i +j+k·0i +0j+0k−1
√
3
√
3

i +j+k
q = 2
3i + 2
3j+ 2
3k
Therefore, the reflection is in the space partition occupied by the mirror’s normal
 2
3 2
3 2
3

.
If we now place P at
 2
3 2
3 2
3

, its reflection should be at the origin.
Using Eq. (4.20) gives
q =
2
3i + 2
3j+ 2
3k

−2

i +j+k·
 2
3i + 2
3j+ 2
3k

−1
√
3
√
3

i +j+k
q =
2
3i + 2
3j+ 2
3k

−2
3 i +j+k = 0i +0j+0k
making the reflection at the origin.
4.12 A plane between two points
Given two distinct points in R3, we can connect a straight line between them. Furthermore, we
can locate a plane orthogonal to this line and positioned such that it divides the line into the
ratio t 	 1−t, where t ∈
01. Let’s examine how such a plane is identified.
X
Y
Z
Q
P1
P2
n
p1
q
p2
Figure 4.17.

The plane
121
Figure 4.17 shows two points, P1 x1y1z1 and P2 x2y2z2, joined by a connecting line.
Let the plane equation be of the form
ax +by +cz = d
Let the plane’s normal n be
n = p2 −p1
(4.22)
and
n = ai +bj+ck
Let Q xyz be a point on −−→
P1P2 such that
q = 1−tp1 +tp2
(4.23)
Therefore,
n ·q = d
(4.24)
Substituting Eq. (4.22) and Eq. (4.23) in Eq. (4.24) gives
d = p2 −p1·1−tp1 +tp2
Finally, we have
a = x2 −x1
b = y2 −y1
c = z2 −z1
d = a 1−tx1 +tx2+b 1−ty1 +ty2+c 1−tz1 +tz2
Let’s test the above equations with the scenario shown in Fig. 4.18.
X
Y
Z
Q
P1
P2
10
Figure 4.18.
Given P1 1000, P2 0100, and t = 1
2, we have
a = x2 −x1 = −10
b = y2 −y1 = 10
c = z2 −z1 = 0
d = −105+105 = 0
Therefore, the plane equation is
−10x +10y = 0

5 Reflections
5.1 Introduction
In this chapter we explore two scenarios where lines reflect from lines and surfaces. The reflecting
lines can represent the path taken by a collection of photons or the trajectory of a small particle
when striking another line or surface. Once more we will discover that the vector equations
describing a 2D scenario apply equally well in a 3D scenario. We begin by calculating how a
2D ray bounces from a reflecting line.
5.2 A line reflecting off a line
The reflecting line is defined parametrically, and a second parametric line represents the
incoming ray striking the reflecting line. At the point of contact, reflection takes place obeying
the classical laws of reflection: i.e., the angle of reflection equals the angle of incidence, and the
normal, incident, and reflected rays lie in a common plane. Figure 5.1 illustrates this scenario.
X
Y
T
P
R
r
p
t
v
vin
vout
w
w
n
Figure 5.1.
123

124
Vector analysis for computer graphics
Let the reflecting line be defined as
p = t +v
(5.1)
where  is a scalar, and the line’s normal vector is
n = v⊥
The incoming ray passes through R with direction vin, and the reflected outgoing ray originates
at P with direction vout.
From Fig. 5.1 we observe that
w = vin +n
(5.2)
and
w = vout −n
(5.3)
where  is a scalar.
Equating (5.2) and (5.3) gives
vin +n = vout −n
and
vout = vin +2n
(5.4)
We now need to find .
We multiply Eq. (5.4) throughout by n and obtain
n ·vout = n ·vin +2n ·n
but
n ·vout = n ·−vin = −n·vin
Therefore,
−n·vin = n·vin +2n·n
and
 = −n·vin
n2 
(5.5)
Substituting Eq. (5.5) in Eq. (5.4) gives
vout = vin −2
n·vin
n2

n
(5.6)

Reflections
125
Note that if n is a unit vector, written as ˆn, then
vout = vin −2ˆn·vin ˆn
We now need to find P and its position vector p. From Fig. 5.1, we see that
p = r +vin
(5.7)
where  is a scalar. Equating (5.1) and (5.7) gives
t +v = r +vin
(5.8)
We multiply Eq. (5.8) throughout by n and obtain
n·t +n ·v = n ·r +n ·vin
but
n ·v = 0
Therefore,
n ·t −n ·r = n·vin
and
 = n ·t −r
n·vin
(5.9)
Substituting Eq. (5.9) in Eq. (5.7) gives
p = r +
n ·t −r
n·vin

vin
(5.10)
Therefore, the reflected ray originates at P with direction vout.
Let’s test these results with an example. Figure 5.2 shows a simple scenario that permits us
to predict the outcome. As the reflecting line makes an angle of 45 with the x-axis, and vin is
parallel with the x-axis, the reflected ray will be vertical, and the point of reflection is 11.
X
Y
R
P
T
t
p
r
n
vin
vout
2
2
v
Figure 5.2.

126
Vector analysis for computer graphics
Given the following conditions:
v = i −j
R = 21
and
r = 2i +j
we find that
vin = −i
Therefore,
n = i +j
Using Eq. (5.6) gives
vout = vin −2
n·vin
n2

n = −i−2

i +j·−i
√
2
2

i +j
vout = −i−2
−1
2

i +j
vout = j
Using Eq. (5.10) gives
p = r +
n·t −r
n ·vin

vin = 2i +j+
i +j·2j−2i −j
i +j·−i

−i
p = 2i +j+
i +j·−2i +j
−1

−i = 2i +j−i
p = i +j
Therefore, P has coordinates 11, which confirms our prediction.
5.3 A line reflecting off a plane
You have probably already guessed that the above vector equations will work just as well in 3D
as they do in 2D. Therefore, they will describe how a ray will bounce off a surface. To compute
the direction of the reflected vector, all we need is the plane’s surface normal and the incoming
vector, which means that the equation describing vout still holds:
vout = vin −2ˆn ·vin ˆn
and the position vector for P is
p = r +
n ·t −r
n ·vin

vin

Reflections
127
However, in lighting calculations, the vector vin is often reversed and points toward the light,
which means that its sign must be reversed in these equations:
vout = 2ˆn ·vin ˆn −vin
(5.11)
p = r +
n ·t −r
n·vin

vin
We use Eq. (5.11) later in Section 10.2.

6 Intersections
6.1 Introduction
In this chapter we explore how vector-based techniques are used to resolve a variety of problems
that arise in computer graphics such as proximity testing, modeling, collision detection, ray
casting, and ray tracing.
In some cases, as we shall see, we can work directly with vector-based equations without
incorporating extra transformations. For example, to compute the intersection of two lines, we
can work directly with the line equations. But say we wish to compute the intersection of a
cylinder with a line? Then it is highly likely that the cylinder will have to be scaled, rotated, and
translated away from the origin, in which case the cylinder’s equations have to be transformed
before performing the intersection. Unfortunately, the resulting solution is neither simple nor
elegant. However, it just so happens that if we transform the line instead such that the relative
orientation between the line and cylinder is preserved, the geometric analysis remains both
simple and elegant.
For instance, let’s assume that an object O is modeled such that its center is at the origin,
and then O is subjected to three transforms: S (scale), R (rotate), and T (translate) to produce
the transformed object O′:
O′ = T·R ·S·O
If we attempt to compute an intersection with O′ using a ray described by
p = t +v
the algebraic analysis becomes rather convoluted. However, if we leave the object where it is and
transform the ray instead, we just have to make sure that the ray is transformed such that the
relative orientation between the ray and the object is preserved. Basically, this requires finding
the inverse transforms of T R, and S:
T−1 R−1 and S−1
129

130
Vector analysis for computer graphics
and applying them to the ray. But before so doing, we must remember that vectors are rather
sensitive to transforms.
For example, the above line equation contains two types of vector: t is a position vector with
its tail fixed at the origin and its head locating some point on the ray, typically T; while v is
the ray’s direction in terms of Cartesian displacements. Both types of vector behave correctly
when scaled and rotated, but only t can be translated. Therefore, the ray must be transformed
as follows:
t′ = S−1 ·R−1 ·T−1 ·t
and
v′ = S−1 ·R−1 ·v
The transformed ray becomes
p = t′ +v′
with which we can test for a possible intersection with the untransformed object. So, with this
in mind, some of the following analyses will only consider objects centered about the origin,
and the relative juxtaposition between ray and object is achieved by transforming the ray.
No attempt is made in the following sections to develop fast algorithms. The underlying goals
are to identify strategies and to reveal patterns in solutions.
Let’s begin this survey with the simple case of two intersecting lines in R2.
6.2 Two intersecting lines in R2
Given two lines in R2, there are three possible orientation scenarios: they intersect, they are
parallel, or they are identical. We begin by assuming that they intersect, as shown in Fig. 6.1.
The lines are defined using a direction vector and a known point on the line. The point of
intersection P must satisfy both equations, and our task is to compute the value of  and .
X
Y
P
R
S
a
b
p
s
r
Figure 6.1.

Intersections
131
We begin by defining p as follows for the two lines:
p = r +a
p = s+b
where P xPyP is the point of intersection and p its position vector.
Therefore,
r +a = s +b
(6.1)
To eliminate , we multiply Eq. (6.1) throughout by b⊥, as this creates the term b⊥·b, which
is zero:
b⊥·r +b⊥·a = b⊥·s+b⊥·b = b⊥·s
Therefore,
 = b⊥·s−r
b⊥·a
where
b⊥= −ybi +xbj
Therefore,
 = −ybi +xbj·xS −xRi +yS −yRj
−ybi +xbj·xai +yaj
 = xb yS −yR−yb xS −xR
xbya −xayb

(6.2)
To eliminate  from Eq. (6.1), we multiply throughout by a⊥, as this creates the term a⊥· a,
which is also zero:
a⊥·r +a⊥·a = a⊥·s+a⊥·b = a⊥·r
 = a⊥·r −s
a⊥·b
where
a⊥= −yai +xaj
Therefore,
 = −yai +xaj·xR −xSi +yR −ySj
−yai +xaj·xbi +ybj
 = xa yS −yR−ya xS −xR
xbya −xayb

(6.3)

132
Vector analysis for computer graphics
The coordinates of P are
xP = xR +xa
yP = yR +ya
The lines are parallel if
a = b
(6.4)
where  is a scalar, and are identical when  = 1.
We write Eq. (6.4) as follows:
xa = xb
ya = yb
Cross multiplying gives
xayb = xbya
or
xbya −xayb = 0
(6.5)
Note that Eq. (6.5) is the denominator in Eqs. (6.2) and (6.3), and if it equals zero, it means
that the lines do not intersect.
Let’s test the above equations with the example shown in Fig. 6.2.
X
Y
P
a
S
R
1
1
b
Figure 6.2.
The line equations are
p = r +a
p = s+b
where
R = 00
a = i +j
S = 01
b = i −j

Intersections
133
Therefore,
 = 1−0+0−0
1+1
= 1
2
and
xP = 1
2
yP = 1
2
which is correct.
6.3 A line intersecting a circle in R2
Now let’s consider the case of a line intersecting a circle in R2, for which there are three possible
scenarios: the line intersects the circle at two points; the line is tangential to the circle at a single
point; or the line does not intersect the circle at all.
The equation of a circle whose center is located at the origin is given by
x2 +y2 = r2
(6.6)
where r is the radius. But in reality, the circle could be located away from the origin at xC yC,
in which case the circle’s equation becomes
x −xC2 + y −yC2 = r2
However, as mentioned above, we can preserve the simplicity of the original circle equation
by translating the line equation in the opposite direction. So, for the moment, let’s investigate
the intersection of a line with Eq. (6.6), assuming that the line equation will be subject to the
inverse of the transform applied to the circle.
We begin with the usual line equation
p = t +v
where  is a scalar and v  = 1.
X
Y
P
T
p
t
λv
Figure 6.3.

134
Vector analysis for computer graphics
Using Eq. (6.6), we can state that
x2
P +y2
P = r2
which is identical to
p·p = r2
or
t +v·t +v = r2
Expanding and simplifying gives
t ·t +2t ·v +2v ·v = r2
But as v is a unit vector v ·v = 1, and so, therefore,
2 +2t ·v +t 2 −r2 = 0
which is a quadratic in , and solved using
 = −B±
√
B2 −4AC
2A
where
A = 1
B = 2t ·v
C = t 2 −r2
Therefore,
 =
−2t ·v ±

4t ·v2 −4

t 2 −r2
2
 = −t ·v ±

t ·v2 −t 2 +r2
The discriminant is simplified as follows:
t ·v2 −t 2 +r2 = x2
t x2
v +y2
t y2
v +2xtxvytyv −x2
t −y2
t +r2
= x2
t

x2
v −1

+y2
t

y2
v −1

+2xtxvytyv +r2
= −x2
t y2
v −y2
t x2
v +2xtxvytyv +r2
= r2 −

x2
t y2
v +y2
t x2
v −2xtxvytyv

= r2 −xvyt −xtyv2
t ·v2 −t 2 +r2 = r2 −

xv yv
xt yt

and
 = −xtxv +ytyv±

r2 −

xv
yv
xt
yt

2
(6.7)
The value of the discriminant of Eq. (6.7) determines whether the line intersects, is tangential,
or misses the circle:

Intersections
135
Miss condition
r2 −

xv
yv
xt
yt

2
< 0
Tangential condition
r2 −

xv
yv
xt
yt

2
= 0
Intersect condition
r2 −

xv
yv
xt
yt

2
> 0
Let’s test all three conditions using the three lines and circle shown in Fig. 6.4.
X
Y
C
P
r
L1
L2
L3
λv1
λv2
λv3
T1
T2
T3
c
Figure 6.4.
Figure 6.4 shows a circle with radius r = 1 centered at C 11 and three lines: L1 L2, and L3
that miss, touch, and intersect the circle, respectively.
The lines are
p1 = t1 +v1
p2 = t2 +v2
p3 = t3 +v3
where
t1 = 3i
v1 = j
t2 = 2j
v2 = i
t3 = 0
v3 = 1
√
2
i + 1
√
2
j

136
Vector analysis for computer graphics
and
c = i +j
First, we transform the line by the inverse transformation translating the circle away from the
origin. In this case:
T =
⎡
⎣
1
0
1
0
1
1
0
0
1
⎤
⎦and T−1 =
⎡
⎣
1
0
−1
0
1
−1
0
0
1
⎤
⎦
Therefore,
t′ = T−1 ·t
⎡
⎣
xt′
yt′
1
⎤
⎦=
⎡
⎣
1 0 −1
0 1 −1
0 0
1
⎤
⎦·
⎡
⎣
xt
yt
1
⎤
⎦
xt′ = xt −1
yt′ = yt −1
Another way of stating this using vectors is
t′ = t −c
Let’s substitute the three lines into the following equations:
xP = xt′ +xv
yP = yt′ +yv
where
 = −t′ ·v ±

r2 −

xv
yv
xt′
yt′

2
and
t′ = t −c
L1:
t′ = 3i −i +j = 2i −j
r2 −

xv
yv
xt′
yt′

2
= 1−

0
1
2 −1

2
= −3
The negative discriminant confirms a miss condition.

Intersections
137
L2:
t′ = 2j−i +j = −i +j
r2 −

xv yv
xt′ yt′

2
= 1−

1 0
−1 1

2
= 0
The zero discriminant confirms a touch condition. Therefore,
 = 1
and the touch point is
xP = 1 and yP = 2
which is correct.
L3:
t′ = 0−i +j = −i −j
r2 −

xv
yv
xt′
yt′

2
= 1−

1
√
2
1
√
2
−1
−1

2
= 1
The positive discriminant confirms an intersect condition. Therefore,
 = 2
√
2
±1
=
√
2+1
and
√
2−1
If we use
xP = xt3 +xv3 and yP = yt3 +yv3
the intersection points are
 =
√
2+1
xP =
√
2+1
 1
√
2
= 1+
√
2
2
yP =
√
2+1
 1
√
2
= 1+
√
2
2 
 =
√
2−1
xP =
√
2−1
 1
√
2
= 1−
√
2
2
yP =
√
2−1
 1
√
2
= 1−
√
2
2 
The intersection points are

1+
√
2
2  1+
√
2
2

and

1−
√
2
2  1−
√
2
2

, which are correct.

138
Vector analysis for computer graphics
6.4 A line intersecting an ellipse in R2
section we develop the previous idea of the line-circle intersection with a line-ellipse intersection.
We begin with the equation of an ellipse centered at the origin
x2
a2 + y2
b2 = 1
(6.8)
where a and b are the maximum x- and y-radii, respectively.
X
Y
P
T
p
t
v
a
b
Figure 6.5.
Figure 6.5 shows the transformed line and the untransformed ellipse, and we see that the
coordinates of P must satisfy Eq. (6.8). Therefore,
xt +xv2
a2
+ yt +yv2
b2
= 1
Expanding and simplifying gives
b2 
x2
t +2xtxv +2x2
v

+a2 
y2
t +2ytyv +2y2
v

= a2b2
2 
b2x2
v +a2y2
v

+

2b2xtxv +2a2ytyv

+a2y2
t +b2x2
t −a2b2 = 0
which is a quadratic in , and solved using
 = −B±
√
B2 −4AC
2A
where
A = b2x2
v +a2y2
v
B = 2b2xtxv +2a2ytyv
C = a2y2
t +b2x2
t −a2b2

Intersections
139
which reveals the following values for :
 =
−
xtxv
a2 + ytyv
b2

±




x2
v
a2 + y2
v
b2 −

xv
yv
xt
yt

2
a2b2
x2
v
a2 + y2
v
b2

(6.9)
The value of the discriminant of Eq. (6.9) determines whether the line intersects, is tangential,
or misses the ellipse:
Miss condition
x2
v
a2 + y2
v
b2 −

xv
yv
xt
yt

2
a2b2
< 0
Tangential condition
x2
v
a2 + y2
v
b2 −

xv
yv
xt
yt

2
a2b2
= 0
Intersect condition
x2
v
a2 + y2
v
b2 −

xv
yv
xt
yt

2
a2b2
> 0
We can check the validity of Eq. (6.9) by setting a = b = r, which reveals
 =
−
xtxv
r2 + ytyv
r2

±




x2
v
r2 + y2
v
r2 −

xv
yv
xt
yt

2
r4
x2
v
r2 + y2
v
r2
 = −xtxv +ytyv±

r2 −

xv
yv
xt
yt

2
which is the same as Eq. (6.7).

140
Vector analysis for computer graphics
6.5 The shortest distance between two skew lines in R3
Having seen how to cope with two-dimensional lines, circles and ellipses, now let’s explore the
relationship between two lines in R3.
We already know that lines in R2 either intersect or are parallel with one another. However,
in R3 a third option is possible — one where the lines approach one another then recede,
allowing a shortest distance to be calculated. Such lines are called skew lines, and the shortest
distance between them will be on a mutual perpendicular to both lines.
X
Y
Z
T
T ′
Q
Q′
q
q′
t
t′
a
b
d
Figure 6.6.
Figure 6.6 shows two lines with direction vectors a and b. The shortest distance d between the
lines is the magnitude of the vector −→
TT′, which is perpendicular to both lines. Therefore,
−→
OT = q +a
(6.10)
and
−→
OT′ = q′ +b
(6.11)
But −→
TT′ is perpendicular to a and b and parallel to a ×b. Therefore,
−→
TT′ = d ·a ×b
a ×b 
But
−→
OT′ = −→
OT +−→
TT′
and
−→
OT′ = −→
OT + d a ×b
a ×b  
(6.12)

Intersections
141
We cancel the denominator in Eq. (6.12) by multiplying throughout with a ×b:
a ×b·−→
OT′ = a ×b·−→
OT +a ×b· d a ×b
a ×b
a ×b·−→
OT′ = a ×b·−→
OT +d a ×b
(6.13)
We now need to substitute Eqs. (6.10) and (6.11) in Eq. (6.13):
a ×b·q′ +b = a ×b·q +a+d a ×b
q′ ·a ×b+b·a ×b = q ·a ×b+a ·a ×b+d a ×b
As a b, and a ×b are mutually perpendicular, b·a ×b = 0 and a ·a ×b = 0.
Therefore,
q′ −q·a ×b = d a ×b
and the shortest distance is
d = q −q′·a ×b
a ×b

Let’s test this equation with a simple example, as shown in Fig. 6.7. By inspection, the shortest
line between the two lines is a perpendicular to a from the origin, which is
√
2
2 in length.
X
Y
Z
1
1
a
b
q
q′
Figure 6.7.
The lines have the following definitions:
q = k
a = i −k
q′ = 0
b = j
Calculating a ×b gives us the following table.
i
j
k
a
1
0
–1
b
0
1
0
a ×b
1
0
1

142
Vector analysis for computer graphics
d = q −q′·a ×b
a ×b
= k ·i +k
i +k = 1
√
2
=
√
2
2
which confirms our prediction.
6.6 Two intersecting lines in R3
As we have seen in the previous section, two straight lines in R3 can cross one another but not
necessarily intersect. Therefore, in order to calculate a possible intersection, we have to ensure
two things:
1. The two lines are not parallel.
2. The two lines touch.
X
Y
Z
λ a
εb
t
s
S
T
p
q
Figure 6.8.
We begin by defining the two lines, as shown in Fig. 6.8:
p = t +a
and
q = s+b
where  and  are scalars:
t = xti +ytj+ztk
and
s = xsi +ysj+zsk
a = xai +yaj+zak
and
b = xbi +ybj+zbk
Step 1: If a ×b = 0, the lines are parallel and do not intersect.
Step 2: The distance d between two skew lines is given by
d = t −s·a ×b
a ×b

If t −s·a ×b ̸= 0, the lines do not intersect.

Intersections
143
Step 3: Equate the two line equations:
t +a = s+b
xti +ytj+ztk+xai +yaj+zak = xsi +ysj+zsk+xbi +ybj+zbk
and collect like components:
xt −xs +xa −xbi +yt −ys +ya −ybj+zt −zs +za −zbk = 0
For this vector to be null, its components must vanish. Therefore, we have
xa −xb = xs −xt
ya −yb = ys −yt
za −zb = zs −zt
which provide values for  and , which, when substituted in the original line equations, reveal
the intersection point. For example, the lines in Fig. 6.8 have equations:
p = t +a
and
q = s+b
(6.14)
where
t = j+2k
and
a = 2i +j−2k
and
s = 2i +j
and
b = −2i +j+2k
The first step is to discover whether the lines are parallel, i.e., if a ×b = 0.
We calculate a ×b:
i
j
k
a
2
1
–2
b
–2
1
2
a ×b
4
0
4
But as a ×b = 4i +4k, the lines are not parallel.
The second step is to discover if the distance d between two skew lines is zero:
d = t −s·a ×b
a ×b
= −2i +2k·4i +4k
4i +4k 
d = −2i +2k·4i +4k
4i +4k 
= −8+8
√
32
 = 0
which it is; therefore, the lines do intersect.

144
Vector analysis for computer graphics
The third step is to find the point of intersection using
xa −xb = xs −xt
ya −yb = ys −yt
za −zb = zs −zt
Therefore,
2+2 = 2−0
− = 1−1
−2−2 = 0−2
and
+ = 1
 = 
+ = 1
Therefore,
 = 1
2
and
 = 1
2
Substituting  and  in Eq. (6.14), we get
p = j+2k+ 1
2 2i +j−2k = i + 3
2j+k
Double checking gives
q = 2i +j+ 1
2 −2i +j+2k = i + 3
2j+k
and the point of intersection is

1 1 1
2 1

, which is correct.
6.7 A line intersecting a plane
There are two configurations of a line and plane: either they intersect or they are parallel, and
we must be able to detect both possibilities. The plane could be defined either using a plane
equation or using two vectors. As the former is the most probable format, let’s proceed with
this.
We define the plane equation using the Cartesian form
ax +by +cz = d
where the normal vector n is given by
n = ai +bj+ck

Intersections
145
We identify a point P on the plane using a position vector p. And as we have seen in previous
chapters, we can state
n ·p = d
(6.15)
which reminds us that if n is a unit vector, the projection of p on n equals the perpendicular
distance d from the origin to the plane.
X
Y
Z
T
P
v
n
t
p
Figure 6.9.
Figure 6.9 shows the scenario described above where the line equation is given by
p = t +v
The line and plane equations could be satisfied for some value of , which can be found by
substituting p into Eq. (6.15):
n ·t +v = d
n·t +n ·v = d
where
 = d −n·t
n ·v

However, if the line is perpendicular to the plane’s normal, n·v = 0 and  will not have a valid
value. Furthermore, if both n and v are unit vectors, then
 = d −n·t
Finally, the position vector for the point of intersection is given by
p = t +v
To test the technique, consider the scenario shown in Fig. 6.10.

146
Vector analysis for computer graphics
X
Y
Z
n
v
Figure 6.10.
The plane equation is given by
−k = −10
and the line equation is given by
p = v
where
v = i +j+10k
Therefore,
 = d −n·t
n ·v
= −10−−k·0
−k·i +j+10k
 = −10
−10 = 1
and the point of intersection is given by
p = i +j+10k
P = 1 1 10
which is correct.
6.8 A line intersecting a sphere
The line-sphere intersection problem is central to ray tracing and is worth investigating.
However, before we start exploring the associated geometry, let’s pause and remember the case
of the line-circle intersection problem in Section 6.3.
Figure 6.3 shows a line intersecting a circle, but Fig. 6.11 is the same diagram with a z-axis
and illustrates a line intersecting a sphere. Therefore, surely, the same vector analysis applies,
apart from the fact that the vectors are now 3D rather than 2D.
Now the equation of a sphere is
x2 +y2 +z2 = r2
(6.16)
where r is the radius and the sphere’s center is located at the origin.

Intersections
147
X
Y
P
T
p
t
λv
Z
Figure 6.11.
We use the same analysis as was used for the line-circle intersection.
The line equation is
p = t +v
where  is a scalar and v  = 1.
Using Eq. (6.16), we can state that
x2
P +y2
P +z2
P = r2
which is identical to
p·p = r2
or
t +v·t +v = r2
Expanding and simplifying gives
t ·t +2t ·v +2v ·v = r2
But as v is a unit vector, v ·v = 1. Therefore,
2 +2t ·v +t 2 −r2 = 0
which is a quadratic in  and solved using
 = −B±
√
B2 −4AC
2A
where
A = 1
B = 2t ·v
C = t ·t −r2

148
Vector analysis for computer graphics
and
 = −t ·v ±

t ·v2 −t 2 +r2
Simplifying the discriminant:
t ·v2 −t 2 +r2 = r2 +xtxv +ytyv +ztzv2 −

x2
t +y2
t +z2
t

= r2 +

x2
t x2
v +xtxvytyv +xtxvztzv +y2
t y2
v +xtxvytyv +ytyvztzv+
z2
t z2
v +xtxvztzv +ytyvztzv −x2
t −y2
t −z2
t

= r2 +

x2
t

x2
v −1

+y2
t

y2
v −1

+z2
t

z2
v −1

+2xtxvytyv +2xtxvztzv +2ytyvztzv

= r2 −

x2
t

y2
v +z2
v

+y2
t

z2
v +x2
v

+z2
t

x2
v +y2
v

−2xtxvytyv −2ytyvztzv −2ztzvxtxv

= r2 −

x2
t y2
v +x2
t z2
v +y2
t z2
v +y2
t x2
v +z2
t x2
v +z2
t y2
v −2xtxvytyv −2ytyvztzv −2ztzvxtxv

= r2 −

xvyt −xtyv2 +yvzt −ytzv2 +zvxt −ztxv2
= r2 −

xv
yv
xt
yt

2
−

yv
zv
yt
zt

2
−

zv
xv
zt
xt

2

Therefore,
 = −xtxv +ytyv +ztzv±

r2 −

xv
yv
xt
yt

2
−

yv
zv
yt
zt

2
−

zv
xv
zt
xt

2
(6.17)
The value of the discriminant of Eq. (6.17) determines whether the line intersects, is tangential,
or misses the sphere:
Miss condition
r2 −

xv
yv
xt
yt

2
−

yv
zv
yt
zt

2
−

zv
xv
zt
xt

2
< 0
Tangential condition
r2 −

xv
yv
xt
yt

2
−

yv
zv
yt
zt

2
−

zv
xv
zt
xt

2
= 0
Intersect condition
r2 −

xv
yv
xt
yt

2
−

yv
zv
yt
zt

2
−

zv
xv
zt
xt

2
> 0
Now let’s consider a line intersecting an ellipsoid and reveal the similarity in formulas between
circle and ellipse with sphere and ellipsoid.

Intersections
149
6.9 A line intersecting an ellipsoid
The equation of an ellipsoid is
x2
a2 + y2
b2 + z2
c2 = 1
(6.18)
where a b, and c are the radii on the x-, y-, and z-axes, and the ellipsoid’s center is located at
the origin, as shown in Fig. 6.12.
X
Y
Z
a
b
c
λv
p
t
T
P
Figure 6.12.
The analysis is identical to that used for an ellipse in Section 6.4. So, to develop a general
solution for a line-ellipsoid intersection, we subject the ellipsoid to two transforms such as a
rotation R and a translation T. But we know that it is simpler to subject the intersecting line L
to the ellipsoid’s inverse transforms:
L′ = R−1 ·T−1 ·L
So, let’s leave the ellipsoid at the origin and use an appropriately transformed line.
Figure 6.12 shows the transformed line and the untransformed ellipsoid, and from this figure
we see that the coordinates of P must satisfy Eq. (6.18). Therefore,
xt +xv2
a2
+ yt +yv2
b2
+ zt +zv2
c2
= 1
Expanding and simplifying gives
b2c2 xt +xv2 +a2c2 yt +yv2 +a2b2 zt +zv2 = a2b2c2
2 b2c2x2
v +a2c2y2
v +a2b2z2
v+2b2c2xtxv +2a2c2ytyv +2a2b2ztzv
+b2c2x2
t +a2c2y2
t +a2b2z2
t −a2b2c2 = 0
which is a quadratic in  and solved using
 = −B±
√
B2 −4AC
2A

150
Vector analysis for computer graphics
where
A = b2c2x2
v +a2c2y2
v +a2b2z2
v
B = 2b2c2xtxv +2a2c2ytyv +2a2b2ztzv
C = b2c2x2
t +a2c2y2
t +a2b2z2
t −a2b2c2
and reduces to
 =
−
xtxv
a2 + ytyv
b2 + ztzv
c2

±




x2
v
a2 + y2
v
b2 + z2
v
c2 −

xv
yv
xt
yt

2
a2b2
−

yv
zv
yt
zt

2
b2c2
−

zv
xv
zt
xt

2
c2a2
x2
v
a2 + y2
v
b2 + z2
v
c2
(6.19)
The value of the discriminant of Eq. (6.19) determines whether the line intersects, is tangential,
or misses the ellipsoid:
Miss condition
x2
v
a2 + y2
v
b2 + z2
v
c2 −

xv
yv
xt
yt

2
a2b2
−

yv
zv
yt
zt

2
b2c2
−

zv
xv
zt
xt

2
c2a2
< 0
Tangential condition
x2
v
a2 + y2
v
b2 + z2
v
c2 −

xv
yv
xt
yt

2
a2b2
−

yv
zv
yt
zt

2
b2c2
−

zv
xv
zt
xt

2
c2a2
= 0
Intersect condition
x2
v
a2 + y2
v
b2 + z2
v
c2 −

xv
yv
xt
yt

2
a2b2
−

yv
zv
yt
zt

2
b2c2
−

zv
xv
zt
xt

2
c2a2
> 0
If we relax Eq. (6.19) with a = b = c = r, we obtain
 = −t ·v ±

r2 −

xv
yv
xt
yt

2
−

yv
zv
yt
zt

2
−

zv
xv
zt
xt

2
which is the equation for a line-sphere intersection.

Intersections
151
Before proceeding with the line-cylinder intersection, let’s test the above equations for a
line-ellipsoid intersection. Eric Haines evaluates a line-ellipsoid intersection in An Introduction
to Ray Tracing [Glassner, 1989], using a totally different technique. The initial conditions are as
follows:
t = 4i +5j−3k
v = 0577i +0577j−0577k
a = 12
b = 24
c = 8
and the ellipsoid’s center is
69−2
The values of  are –10.3 and 11.1, where the latter identifies the real point of intersection,
which turns out to be 104114−94.
Using the technique described above, we begin by subjecting the ray to the inverse of the
translation applied to the ellipsoid:
T =
⎡
⎢⎢⎣
1 0 0
6
0 1 0
9
0 0 1
−2
0 0 0
1
⎤
⎥⎥⎦
T−1 =
⎡
⎢⎢⎣
1
0 0
−6
0
1 0
−9
0
0 1
2
0
0 0
1
⎤
⎥⎥⎦
The untransformed ray is
p = 4i +5j−3k +0577i +0577j−0577k
(6.20)
and the transformed ray is
p′ = −2i −4j−k +0577i +0577j−0577k
Substituting these values in Eq.(6.19), we obtain
 =
−
−2×0577
122
−4×0577
242
−1×−0577
82

05772
122
+ 05772
242
+ −05772
82
±




05772
122
+ 05772
242
+ −05772
82
−

0577 0577
−2
−4

2
122 ×242
−

0577 −0577
−4
−1

2
242 ×82
−

−0577 0577
−1
−2

2
82 ×122
05772
122
+ 05772
242
+ −05772
82
 = 00030052±
√
0008092024−0000016055−0000225781−0000325125
0008092024
 = 00030052±
√
0007525063
0008092024
= −103
111

152
Vector analysis for computer graphics
We now substitute the positive value of  in Eq. (6.20):
p = 4i +5j−3k +1110577i +0577j−0577k
which makes the intersection point, 104 114 −94.
6.10 A line intersecting a cylinder
Another primitive used in ray tracing is the cylinder. So let’s consider a cylinder with radius r
and infinite length with its rotational axis aligned with the z-axis, as shown in Fig. 6.13.
X
Y
Z
O
P
T
Q
p
t
λv
v
r
Figure 6.13.
The line equation is given by
p = t +v
(6.21)
where  is a scalar and v  = 1.
The point P xP yP is the point of intersection, and the line QP is constructed such that it
is perpendicular to the z-axis, which makes its length equal to r.
We can now state that
r 2 = x2
p +y2
p = r2
(6.22)
But from Eq. (6.21), we see that
xp = xt +xv
yp = yt +yv
and substituting these in Eq. (6.22), we obtain
xt +xv2 +yt +yv2 = r2
(6.23)

Intersections
153
Expanding Eq. (6.23), we obtain
2 
x2
v +y2
v

+2xvxt +2yvyt+x2
t +y2
t −r2 = 0
which is a quadratic in  and solved using
 = −B±
√
B2 −4AC
2A
where
A = x2
v +y2
v
B = 2xvxt +yvyt
C = x2
t +y2
t −r2
and can be represented by
 =
−xvxt +yvyt±

r2 x2
v +y2
v−

xv
yv
xt
yt

2
x2
v +y2
v

(6.24)
The value of the discriminant of Eq. (6.24) determines whether the line intersects, is tangential,
or misses the cylinder:
Miss condition
r2 
x2
v +y2
v

−

xv
yv
xt
yt

2
< 0
Tangential condition
r2 
x2
v +y2
v

−

xv
yv
xt
yt

2
= 0
Intersect condition
r2 
x2
v +y2
v

−

xv
yv
xt
yt

2
> 0
It is highly unlikely that the cylinder will be aligned with the z-axis. And as we saw with the
ellipsoid, it is simpler to subject the intersecting line L to the cylinder’s inverse transforms:
L′ = S−1 ·R−1 ·T−1 ·L
So, let’s leave the cylinder aligned with the z-axis and use an appropriately transformed line. If
the line equation is
p = t +v

154
Vector analysis for computer graphics
then
v′ = R−1 ·S−1 ·v
t′ = R−1 ·T−1 ·t
and
p = t′ +v′
Note that v is not subjected to the translation transformation. Therefore, Eq. (6.24) becomes
 =
−xv′xt′ +yv′yt′±

r2 x2
v′ +y2
v′−

xv′
yv′
xt′
yt′

2
x2
v′ +y2
v′

(6.25)
Let’s test Eq. (6.25) with the following conditions:
If the scale transform is
S =
⎡
⎢⎢⎣
2 0 0 0
0 2 0 0
0 0 2 0
0 0 0 1
⎤
⎥⎥⎦then S−1 =
⎡
⎢⎢⎣
1
2 0 0 0
0
1
2 0 0
0 0
1
2 0
0 0 0 1
⎤
⎥⎥⎦
If the rotate transform is
R =
⎡
⎢⎢⎣
1
0
0
0
0 cos90	 −sin90	 0
0 sin90	
cos90	 0
0
0
0
1
⎤
⎥⎥⎦then R−1 =
⎡
⎢⎢⎣
1
0
0
0
0
cos90	 sin90	 0
0 −sin90	 cos90	 0
0
0
0
1
⎤
⎥⎥⎦
If the translate transform is
T =
⎡
⎢⎢⎣
1 0 0
0
0 1 0
0
0 0 1 10
0 0 0
1
⎤
⎥⎥⎦then T−1 =
⎡
⎢⎢⎣
1 0 0
0
0 1 0
0
0 0 1 −10
0 0 0
1
⎤
⎥⎥⎦
If the ray is defined as
p = t +v
where
t = 0
and
v = j+k

Intersections
155
we have the scenario shown in Fig. 6.14, where the cylinder has been subjected to the transforms
rather than the line. From Fig. 6.14 we can predict that the ray intersection points are given by
0 8 8 and 0 12 12. Let’s now confirm these predictions by transforming the ray.
X
Y
Z
8
10
12
8
12
v
Figure 6.14.
Calculate
S−1 ·R−1 =
⎡
⎢⎢⎣
1
2 0 0 0
0
1
2 0 0
0 0
1
2 0
0 0 0 1
⎤
⎥⎥⎦·
⎡
⎢⎢⎣
1
0 0 0
0
0 1 0
0 −1 0 0
0
0 0 1
⎤
⎥⎥⎦=
⎡
⎢⎢⎣
1
2
0 0 0
0
0
1
2 0
0 −1
2 0 0
0
0 0 1
⎤
⎥⎥⎦
and
S−1 ·R−1 ·T−1 =
⎡
⎢⎢⎣
1
2
0 0 0
0
0
1
2 0
0 −1
2 0 0
0
0 0 1
⎤
⎥⎥⎦·
⎡
⎢⎢⎣
1 0 0
0
0 1 0
0
0 0 1 −10
0 0 0
1
⎤
⎥⎥⎦=
⎡
⎢⎢⎣
1
2
0 0
0
0
0
1
2 −5
0 −1
2 0
0
0
0 0
1
⎤
⎥⎥⎦
If the ray is given by
p = t +v
(6.26)
where
t = 0 and v = j+k
then
t′ =
⎡
⎢⎢⎣
1
2
0 0
0
0
0
1
2 −5
0 −1
2 0
0
0
0 0
1
⎤
⎥⎥⎦·
⎡
⎢⎢⎣
0
0
0
1
⎤
⎥⎥⎦=
⎡
⎢⎢⎣
0
−5
0
1
⎤
⎥⎥⎦

156
Vector analysis for computer graphics
and
v′ =
⎡
⎢⎢⎣
1
2
0 0 0
0
0
1
2 0
0 −1
2 0 0
0
0 0 1
⎤
⎥⎥⎦·
⎡
⎢⎢⎣
0
1
1
1
⎤
⎥⎥⎦=
⎡
⎢⎢⎣
0
1
2
−1
2
1
⎤
⎥⎥⎦
Substituting t′ and v′ in Eq. (6.25), we get
 =
2 1
2 ±

1
4 −

0
1
2
0 −5

2
1
4
=
21
2 ± 1
2
1
4
= 8 and 12
Substituting  in Eq. (6.26), we get
p = 0+8j+k and p = 0+12j+k
which makes the intersection points 0 8 8 and 0 12 12, as predicted!
What has been covered so far assumes that the cylinder has an infinite extent along the
z-axis, which is not very common. Normally, cylinders have a finite length, and a mechanism
is required to set these physical limits. One convenient method is to identify the minimum and
maximum z-extents of the cylinder, zmin and zmax, respectively. And when we calculate the two
possible intersection values for , e.g., 1 and 2, we can test whether the z component of p is
within the defined range:
z1 = zt +1zv
z2 = zt +2zv
by making sure that
zmin < z1 z2 < zmax
Another assumption with the above analysis is that the cylinder is open at either end. If end
caps are required, then plane equations can be placed at zmin and zmax as shown in Fig. 6.15.
X
Z
Y
zmax
zmin
Figure 6.15.

Intersections
157
We also need to recognise the conditions when such an intersection can arise. An intersection
with the zmin end cap occurs when z1 and z2 are either side of the zmin plane. Similarly, an
intersection with the zmax end cap occurs when z1 and z2 are either side of the zmax plane.
We have already examined the intersection of a line with a plane in Section 6.7 and discovered
that given a line
p = t +v
and a plane equation
ax +by +cz = d
where
n = ai +bj+ck
 = −n ·t +d
n ·v

If we place a plane at zmin, we have
d = zmin and n = −k
and
3 = −−zT +zmin
−zv
= zmin −zT
zv

3 can now be used to reveal the intersection point using
p = t +3v
If we place a plane at zmax, we have
d = zmax and n = −k
and
4 = −−zT +zmax
−zv
= zmax −zT
zv

4 can now be used to reveal the intersection point using
p = t +4v
Note that both end cap normals are pointing towards the origin.

158
Vector analysis for computer graphics
6.11 A line intersecting a cone
Another ray-tracing primitive is the cone, and once again this is normally aligned, like the
cylinder, with the z-axis, as shown in Fig. 6.16. The simplest form of the cone equation is
z2 = x2 +y2
which makes the internal angle of the apex 90	.
X
Y
Z
t
λv
T
P
p
Figure 6.16.
If the line equation is given by
p = t +v
where  is a scalar and v  = 1.
Then for an intersection at P, we have
z2
P = x2
P +y2
P
which means that
zt +zv2 = xt +xv2 +yt +yv2 
Expanding and simplifying gives
z2
t +2ztzv +2z2
v = x2
t +2xtxv +2x2
v +y2
t +2ytyv +2y2
v
0 = 2 
x2
v +y2
v −z2
v

+2xtxv +2ytyv −2ztzv+x2
t +y2
t −z2
t
which is a quadratic in  and solved using
 = −B±
√
B2 −4AC
2A

Intersections
159
where
A = x2
v +y2
v −z2
v
B = 2xtxv +2ytyv −2ztzv
C = x2
t +y2
t −z2
t 
This reduces to
 =
−xtxv +ytyv −ztzv±
 
yv
zv
yt
zt

2
+

zv
xv
zt
xt

2
−

xv
yv
xt
yt

2
x2
v +y2
v −z2
v
(6.27)
The value of the discriminant of Eq. (6.27) determines whether the line intersects, is tangential,
or misses the cone:
Miss condition

yv
zv
yt
zt

2
+

zv
xv
zt
xt

2
−

xv
yv
xt
yt

2
< 0
Tangential condition

yv
zv
yt
zt

2
+

zv
xv
zt
xt

2
−

xv
yv
xt
yt

2
= 0
Intersect condition

yv
zv
yt
zt

2
+

zv
xv
zt
xt

2
−

xv
yv
xt
yt

2
> 0
If the denominator of Eq. (6.27) is zero, the ray is parallel with the cone’s side.
Limits to the cone’s length can be set using the same technique for the cylinder, where zmin
and zmax define the z-extent of the cone. These can be negative or positive and determine
whether the cone is aligned with the negative or positive z-axis, respectively.
If the ray intersects the cone twice, there will be two values of  : 1 and 2, which generate
the two z coordinates of the intersections:
z1 = zt +1zv
z2 = zt +2zv
Once again, to ensure that the intersections occur in the isolated part of the cone, we test for
zmin < z1 z2 < zmax
By making either zmin or zmax equal to zero retains the cone’s apex. However, if they are both
negative or both positive, a truncated cone is created. And if the cone requires end caps, the
same technique used for capping cylinders can be applied to cones.

160
Vector analysis for computer graphics
6.12 A line intersecting a triangle
Triangles play an important role in modeling CG objects, and the line-triangle intersection
problem is important to the design of renderers. Triangles are planar, and it is easy to compute
whether, and where, a line intersects the plane shared by the triangle. What is not so easy
is proving that the intersection is within the triangle’s boundary. Fortunately for us, in 1827,
August Ferdinand Möbius [1790–1868] published Der barycentrische Calcul, which formalized
the analysis of centers of gravity and also laid the foundations for vectors. Today the work of
Möbius is called barycentric coordinates.
Barycentric coordinates provide the key to unlocking this problem, and if you have never
used them, refer to the author’s book Mathematics for Computer Graphics [Vince, 2006].
We begin by defining triangle 	P1P2P3 with vertices P1 x1y1z1, P2 x2y2z2, and
P3 x3y3z3 and their corresponding position vectors p1, p2, and p3. This scenario is shown in
Fig. 6.17.
X
Z
Y
P1
2
P
P3
P
p
p1
p2
p3
t
λv
T
Figure 6.17.
We can state that any point P xPyPzP on triangle 	P1P2P3 is given by
prs = qp1 +rp2 +sp3
where p is P’s position vector. The multipliers q, r, and s are barycentric coordinates and satisfy
the following conditions:
r +s +1−r −s = 1
qrs ≥0
which makes
q = 1−r −s
If the intersecting ray is given by
p = t +v

Intersections
161
where  is a scalar, then
t +v = 1−r −sp1 +rp2 +sp3
t +v = p1 −rp1 −sp1 +rp2 +sp3
t +v = p1 +r p2 −p1+s p3 −p1
t −p1 = −v +r p2 −p1+s p3 −p1
and
t −p1 =
−v p2 −p1 p3 −p1

⎡
⎣

r
s
⎤
⎦
(6.28)
Solving Eq. (6.28) reveals the value of , r, and s. The barycentric coordinates r and s tell us
whether the point is on the triangle, and  is the position along v. First, though, we need to
solve Eq. (6.28).
As an aside, consider the simultaneous equations
c1 = a1x +b1y
c2 = a2x +b2y
which can be solved as follows:
b2c1 = a1b2x +b1b2y
−b1c2 = −a2b1x −b1b2y
adding
b2c1 −b1c2 = a1b2x −a2b1x = a1b2 −a2b1x
and
x = b2c1 −b1c2
a1b2 −a2b1
=

c1
b1
c2
b2


a1
b1
a2
b2


Similarly, we have
−a2c1 = −a1a2x −a2b1y
a1c2 = a1a2x +a1b2y
adding
a1c2 −a2c1 = a1b2y −a2b1y = a1b2 −a2b1y
y = a1c2 −a2c1
a1b2 −a2b1
=

a1
c1
a2
c2


a1
b1
a2
b2



162
Vector analysis for computer graphics
This symmetry was discovered by the Swiss mathematician Gabriel Cramer [1704–1752] and is
now known as Cramer’s rule. However, it only works when the determinant in the denominator
is non-zero.
Similarly, for three simultaneous equations:
d1 = a1x +b1y +c1z
d2 = a2x +b2y +c2z
d3 = a3x +b3y +c3z
we can state
⎡
⎣
d1
d2
d3
⎤
⎦=
⎡
⎣
a1
b1
c1
a2
b2
c2
a3
b3
c3
⎤
⎦
⎡
⎣
x
y
z
⎤
⎦
and
x =

d1
b1
c1
d2
b2
c2
d3
b3
c3


a1
b1
c1
a2
b2
c2
a3
b3
c3

y =

a1
d1
c1
a2
d2
c2
a3
d3
c3


a1
b1
c1
a2
b2
c2
a3
b3
c3

z =

a1
b1
d1
a2
b2
d2
a3
b3
d3


a1
b1
c1
a2
b2
c2
a3
b3
c3


Before applying Cramer’s rule, let’s tidy up Eq. (6.28) as follows:
k = t −p1
p21 = p2 −p1
p31 = p3 −p1
Therefore,
k =

−v
p21
p31

⎡
⎣

r
s
⎤
⎦
(6.29)
and
 =

xk
x21
x31
yk
y21
y31
zk
z21
z31

DET
r =

−xv
xk
x31
−yv
yk
y31
−zv
zk
z31

DET
s =

−xv
x21
xk
−yv
y21
yk
−zv
z21
zk

DET
(6.30)
where
DET =

−xv
x21
x31
−yv
y21
y31
−zv
z21
z31


In their book Real-Time Rendering, Tomas Akenine-Möller and Eric Haines [Akenine-Möller,
2002] take the above solution one stage further by exploiting the fact that the determinant
 a
b c
 = −
 a
c
b
 = −a ×c·b = −c ×b·a
You may recall that we covered this in Section 2.9.1 and proved that the box product

Intersections
163

xa
ya
za
xb
yb
zb
xc
yc
zc

= a ·b×c = b·c ×a = c ·a ×b = −a ·c ×b = −b·a ×c = −c ·b×a
Applying these relationships to Eq. (6.29), we obtain
 =
 k
p21
p31

 −v
p21
p31
 = k ×p21·p31
v ×p31·p21
r =
 −v
k
p31

 −v
p21
p31
 = v ×p31·k
v ×p31·p21
(6.31)
s =
 −v
p21
k

 −v
p21
p31
 = k ×p21·v
v ×p31·p21

Note that the above equations for , r, and s contain two common terms: k ×p21 and v ×p31.
If these are computed separately, we can write
 = m ·p31
n ·p21
r = n ·k
n ·p21
s = m·v
n ·p21

where
m = k ×p21
n = v ×p31
Let’s put the above theory into practice using a triangle formed from the points P1 020,
P2 004, and P3 312 with a ray
p = t +v
where
t = 4j
v = −j+k
which will intersect the triangle at P2, as shown in Fig. 6.18.
X
Y
Z
P1
P3
P2
T
λv
t
Figure 6.18.

164
Vector analysis for computer graphics
Therefore,
k = t −p1 = 4j−2j = 2j
p21 = p2 −p1 = 4k −2j = −2j+4k
p31 = p3 −p1 = 3i +j+2k −2j = 3i −j+2k
and using Eq. (6.30), we obtain
DET =

0
0
3
1
−2
−1
−1
4
2

= 6
 = 1
6

0
0
3
2
−2
−1
0
4
2

= 4
r = 1
6

0
0
3
1
2 −1
−1
0
2

= 1
s = 1
6

0
0 0
1 −2
2
−1
4 0

= 0
r = 1 confirms that the ray intersects the triangle at P2. Similarly, with  = 4, the ray intersects
the point p = 4j+4
−j+k = 4k, which is P2.
Using Eq. (6.31), we find that
m =

i
j
k
0
2
0
0
−2
4

= 8i
n =

i
j
k
0
−1
1
3
−1
2

= −i +3j+3k
n·p21 = −i +3j+3k·−2j+4k = 6
 = 1
6 8i·3i −j+2k = 4
r = 1
6 −i +3j+3k·2j = 1
s = 1
6 8i·−j+k = 0
which are identical to the above results.

Intersections
165
Now let’s try another ray:
t = 4j
v = i −j+k
Using Eq. (6.30), we obtain
k = 2j
unchanged
DET =

−1
0
3
1
−2
−1
−1
4
2

= 6
 = 1
6

0
0
3
2
−2
−1
0
4
2

= 4
r = 1
6

−1 0
3
1 2 −1
−1 0
2

= 1
3
s = 1
6

−1
0 0
1 −2 2
−1
4 0

= 11
3
Because the value of s > 1, the intersection point is outside the triangle.
Let’s make sure that we obtain the same result using Eq. (6.31):
m = 8i
unchanged
n =

i
j
k
1 −1
1
3 −1
2

= −i +j+2k
n ·p21 = −i +j+2k·−2j+4k = 6
 = 1
6 8i·3i −j+2k = 4
r = 1
6 −i +j+2k·2j = 1
3
s = 1
6 8i·i +−j+k = 11
3
which confirm the previous values.
Finally, let’s select another ray that hopefully intersects the triangle:
t = 4j
v = 2i −4j+2k
Using Eq. (6.30), we obtain
k = 2j
unchanged

166
Vector analysis for computer graphics
DET =

−2
0
3
4
−2
−1
−2
4
2

= 36
 = 1
36

0
0
3
2
−2
−1
0
4
2

= 2
3
r = 1
36

−2
0
3
4
2 −1
−2
0
2

= 1
9
s = 1
36

−2
0 0
4 −2
2
−2
4 0

= 4
9
r = 1
9 and s = 4
9 confirms that the ray intersects the triangle. The point of intersection is given by
p = t +v = 4j+ 2
3 2i −4j+2k
= 4j+ 4
3i −8
3j+ 4
3k
P =
4
3 4
3 4
3


Using Eq. (6.31), we find that
k = 2j
unchanged
m = 8i
unchanged
n =

i
j
k
2 −4
2
3 −1
2

= −6i +2j+10k
n·p21 = −6i +2j+10k·−2j+4k = 36
 = 1
36 8i·3i −j+2k = 2
3
r = 1
36 −6i +2j+10k·2j = 1
9
s = 1
36 8i·2i −4j+2k = 4
9
which are identical to the previous results.
6.13 A point inside a triangle
Having discovered how to test whether a line intersects a triangle, it is an opportune moment
to describe how to test whether a point is inside or outside a triangle. Once again, we draw
upon barycentric coordinates to reveal the solution.

Intersections
167
X
Y
Z
P1
P2
P3
P
p1
p2
p3
p
Figure 6.19.
Figure 6.19 shows a triangle 	P1P2P3 with position vectors p1 p2, and p3. Given a point P,
which resides on the plane containing P1 P2, and P3, we can state that
p = rp1 +sp2 +tp3
(6.32)
where r +s +t = 1 and 0 ≤rst ≤1.
Eq. (6.32) can be written as
p =
p1
p2
p3

⎡
⎣
r
s
t
⎤
⎦
and is solved using Cramer’s rule with
r =
 p p2
p3

 p1
p2
p3

s =
 p1
p p3

 p1
p2
p3

t =
 p1
p2
p

 p1
p2
p3

(6.33)
If r s, and t satisfy the above constraints, then p is inside the triangle, otherwise it is outside
the triangle’s boundary. We will test these formulas in Section 6.15.
6.14 A sphere intersecting a plane
Detecting collisions between irregular objects is difficult. However, it is greatly simplified by
enclosing an object within a tight-fitting sphere and calculating collisions between spheres. As
part of this analysis, let’s investigate the geometric relationship between a sphere and a plane.
But apart from finding the conditions for collision, let’s also compute the curve of intersection
when a sphere intersects a plane.
We begin by positioning a sphere with radius R and centre C xCyCzC juxtaposed with a
plane defined by
ax +by +cz = d
where
ˆn = ai +bj+ck

168
Vector analysis for computer graphics
and
 ˆn  = 1
as shown in Fig. 6.20.
Now the shortest line between the sphere’s centre C and the plane is when the line is
perpendicular to the plane. Naturally, this line is parallel with the plane’s normal ˆn and
is represented vectorially by −→
CP. The length of −→
CP:
−→
CP
, informs us whether the sphere
intersects, touches, or misses the plane:
−→
CP
 < R intersect condition
−→
CP
 = R touch condition
−→
CP
 > R miss condition
As  ˆn = 1, d represents the perpendicular distance from the origin to the plane.
Therefore, we can state that
−→
CP = ˆn
(6.34)
where  is a scalar.
X
Y
Z
O
C
P
d
xC
yC
zC
c
p
CP
ˆn
Figure 6.20.
The position vector p is defined as
p = c +−→
CP = c +ˆn
(6.35)
but as
ˆn ·p = d
ˆn ·p = ˆn ·c +ˆn· ˆn = d

Intersections
169
from which
 = d −ˆn ·c
(6.36)
But from Eq. (6.34), we see that
−→
CP
 = 
and by finding , we find
−→
CP
 and the problem is solved.
Let’s illustrate this technique with the following example: a plane is defined by
√
3
3 x +
√
3
3 y +
√
3
3 z = 10
and as its normal vector is a unit vector, the perpendicular distance from the origin to the plane
is 10, as shown in Fig. 6.21.
X
Y
Z
C(9 ,9 ,9)
10
Figure 6.21.
The sphere’s radius is 5 and its centre is located at 9 9 9, which makes it
√
243 = 15588
from the origin. Obviously, in this simple example we know that the sphere and plane do not
intersect.
Using Eq. (6.36), we find that
 = d −ˆn ·c 
where
d = 10
ˆn =
√
3
3 i +
√
3
3 j+
√
3
3 k
c = 9i +9j+9k
then
 =
10−9
√
3
3 −9
√
3
3 −9
√
3
3
 = −5588
 = 5588

170
Vector analysis for computer graphics
and the sphere misses the plane because  > 5.
If the plane is represented parametrically as shown in Fig. 6.22, then using two vectors a and
b gives
p = t +a +b
where  and  are scalars, we can proceed as follows.
X
Y
Z
O
C
P
d
xC
yC
zC
c
p
CP
ˆn
a
b
T
t
Figure 6.22.
We find the plane’s normal vector n using the cross product
n = a ×b
from which
ˆn =
n
n 
Therefore,
ˆn ·t = d
which can be substituted in Eq. (6.36):
 = ˆn·t −ˆn·c
 = ˆn·t −c
 =
n
n  ·t −c
and
 =

a ×b
a ×b ·t −c

Let’s test this technique with a simple example shown in Fig. 6.23.

Intersections
171
X
Y
Z
T
a
b
n
2
1
1
1
R
c C
t
Figure 6.23.
The plane’s equation is
p = t +a +b
where
a = i
b = k
t = i +2j
c = i +j+k
R = 1
Calculate n:
n = a ×b =

i
j
k
1
0
0
0
0
1

= −j
and
ˆn = −j
Therefore,
 = −j·i +2j−i −j−k
 = 1
As  = R = 1, the sphere touches the plane.
The parametric plane equation lends itself to calculating the circle of intersection when the
sphere intersects the plane, so let’s calculate the radius r of the intersecting circle. Figure 6.24(a)
shows a cross section of the relevant geometry from which, using the theorem of Pythagoras,
R2 = r2 +CP2
but as
CP = 
r =
√
R2 −2
(6.37)

172
Vector analysis for computer graphics
R
r
C
plane
sphere
Q
r
P
a
b
x
y
(a)
(b)
P
θ
Figure 6.24.
By making a and b orthogonal and using the parametric equation of a circle:
x = r cos
y = r sin
as shown in Fig. 6.24(b), we can define a position vector q pointing to any point Q on the
circle of intersection.
We already know that
p = c +ˆn
where
 = d −ˆn·c
Therefore,
q = p+r cosa +r sinb
where
0	 ≤ ≤360	
6.15 A sphere touching a triangle
Having seen how simple it is to detect a sphere touching or intersecting a plane, let’s investigate
the problem of a sphere touching a triangle. Basically, we need to follow three steps:
1. Derive the triangle’s plane equation, probably using the cross product of two vectors taken
from the triangle’s edges.
2. Determine whether the sphere touches the triangle’s plane.
3. If a touch condition occurs, discover if the touch point is inside the triangle.
To illustrate how the above steps are implemented, let’s investigate a simple example.
Figure 6.25 shows a triangle 	P1P2P3 located near the origin and a sphere of radius R = 1
with centre C 1 1 2.

Intersections
173
Y
X
Z
C
u
n
d
P1
P2
P3
P
v
Figure 6.25.
We extract two vectors from the triangle
u = −−→
P1P2
and
v = −−→
P1P3
where
P1 = 1 0 0
P2 = 0 2 0
P3 = 0 0 3
Therefore,
u = −i +2j
and
v = −i +3k
Calculate n:
n = u ×v =

i
j
k
−1 2
0
−1 0
3

= 6i +3j+2k
ˆn = 6
7i + 3
7j+ 2
7k
and
6
7x + 3
7y + 2
7z = d
(6.38)
where d is the perpendicular distance from the origin to the plane. We can find d by substituting
P1 in Eq. (6.38):
d = 6
7
Using Eq. 6.36, where  = d −ˆn·c , we have
 =

6
7 −
6
7i + 3
7j+ 2
7k

·i +j+2k

 =

6
7 −13
7
 = −1
 = 1

174
Vector analysis for computer graphics
which equals R and a touch condition occurs.
The negative value of  informs us that the line connecting the sphere’s centre C to the point
P on the plane is against the direction of ˆn.
Using Eq. (6.35), we can compute the touch point P:
p = c +ˆn = i +j+2k−
6
7i + 3
7j+ 2
7k

and
P =
1
7 4
7 12
7


Using Eq. (6.33), we can confirm whether this point is inside the triangle:
r =
 p
p2
p3

 p1
p2
p3
 =

1
7
0 0
4
7
2 0
12
7
0 3


1
0 0
0
2 0
0
0 3

=
6
7
6 = 1
7
s =
 p1
p
p3

 p1
p2
p3
 =

1
1
7
0
0
4
7
0
0
12
7
3


1 0
0
0 2 0
0 0
3

=
12
7
6 = 2
7
t =
 p1
p2
p

 p1
p2
p3
 =

1 0
1
7
0 2
4
7
0 0
12
7


1
0 0
0
2 0
0
0 3

=
24
7
6 = 4
7
Note that r + s + t = 1 and they are all positive and less than 1, which means that the point
 1
7 4
7 12
7

is inside the triangle, which means that the sphere touches the triangle within its
boundary.

Intersections
175
6.16 Two intersecting planes
Hopefully, it is obvious that two planes give rise to a straight line at their intersection. We
can discover the vector representing this line by exploiting the fact that the intersecting line is
perpendicular to the normal vectors associated with the planes. Therefore, the cross product
of the plane’s normal vectors reveals the vector, the direction, of which, is determined by the
order of the normal vectors. Figure 6.26 illustrates such a scenario.
t
p
X
Y
Z
T
P
v
n1
n2
Figure 6.26.
To derive a parametric line equation for the intersection, we require the coordinates of a point
on the line. It is convenient to select a point whose position vector t is perpendicular to v.
We begin by defining the two plane equations
a1x +b1y +c1z = d1
a2x +b2y +c2z = d2
where
n1 = a1i +b1j+c1k
n2 = a2i +b2j+c2k
Therefore,
n1 ×n2 = v
where v is the vector representing the line of intersection.
The line equation is
p = t +v
where
 is a scalar

176
Vector analysis for computer graphics
As T xTyTzT must satisfy both plane equations,
n1 ·t = d1 and n2 ·t = d2
Furthermore, as v and t are orthogonal,
v ·t = 0
These three vector equations can be combined and written as
⎡
⎣
d1
d2
0
⎤
⎦=
⎡
⎣
a1
b1
c1
a2
b2
c2
av
bv
cv
⎤
⎦·
⎡
⎣
xT
yT
zT
⎤
⎦
and solved using Cramer’s rule, where
xT =

d1 b1 c1
d2 b2 c2
0 bv cv

DET
yT =

a1 d1 c1
a2 d2 c2
av
0 cv

DET
zT =

a1 b1 d1
a2 b2 d2
av bv
0

DET
DET =

a1
b1
c1
a2
b2
c2
av
bv
cv

and
v =

i
j
k
a1
b1
c1
a2
b2
c2


To illustrate this technique, let’s consider a scenario whose outcome can be predicted as shown
in Fig. 6.27, where two planes intersect along the line p = t +v, where t = j and v = i.
The plane equations are
y −z = 1
and
y +z = 1
Therefore,
n1 = j−k
and
n2 = j+k
and
v = n1 ×n2 =

i
j
k
0
1 −1
0
1
1

= 2i
DET =

0 1 −1
0 1
1
2 0
0

= 4

Intersections
177
X
Y
T
t
v
1
1
n
2
n
Figure 6.27.
xT = 1
4

1 1 −1
1 1
1
0 0
0

= 0
yT = 1
4

0 1 −1
0 1
1
2 0
0

= 4
4 = 1
zT = 1
4

0 1 1
0 1 1
2 0 0

= 0
Therefore, the line equation is
p = j+i
Remember that the direction of v could have been reversed if n1 and n2 had been reversed in
the cross-product calculation.
This example concludes this chapter on intersections. Hopefully, the reader will feel confident
to undertake other intersection problems by implementing some of the above strategies.

7 Rotating Vectors
7.1 Introduction
In this chapter we develop a transform to rotate a position vector about an arbitrary axis and then
we examine how quaternions perform a similar function, but using a totally different approach.
Points in R3 are readily rotated about one or more Cartesian axes using Euler transforms,
which are, unfortunately, prone to gimbal lock, where a degree of rotational freedom is lost
under certain circumstances. However, in the 19th century, quaternions were discovered, which
can rotate vectors in R3 without gimbal lock. But before examining quaternions, let’s develop a
transform to rotate a vector about an arbitrary axis.
7.2 Rotating a vector about an arbitrary axis
This analysis assumes a position vector p with its associated point P, which is to be rotated about
an axis ˆn that intersects the origin. Such a scheme is shown in Fig. 7.1, where Fig. 7.1(a) shows the
overall scenario, Fig. 7.1(b) illustrates a side elevation, and Fig. 7.1(c) illustrates a plan elevation.
p
r
n
ˆn
P
O
N
(b)
θ
P
P′
p
α
p′
O
N
rQ
n
ˆn
(a)
θ
N
P
P′
Q
r
r
w
(c)
α
Figure 7.1.
179

180
Vector analysis for computer graphics
In Fig. 7.1,
ˆn = ai +bj+ck is the unit vector representing the axis of rotation,
Pxpypzp is the point to be rotated by angle ,
P′x′
py′
pz′
p is the rotated point,
p and p′ are position vectors for P and P′, respectively,
O is the origin.
The objective is to derive a vector equation describing p′ in terms of ˆnp, and .
So let’s start by defining p′ in terms of vectors associated with the construction lines shown
in Fig. 7.1(a):
p′ = −→
ON +−→
NQ +−→
QP′
We now define each of these vectors in turn.
To find −→
ON, we start by taking the dot product of ˆn and p:
ˆn·p =  ˆn pcos = pcos = ON
Therefore,
−→
ON = ˆn ·p ˆn = n
(7.1)
We use the right-angle triangle NQP′ to find −→
NQ:
−→
NQ = NQ
NP r = NQ
NP′ r = cosr
(7.2)
To eliminate r in Eq. (7.2), we construct an equation defining r in terms of known vectors:
r = p−n
(7.3)
Substituting Eq. (7.1) in Eq. (7.3), we obtain
r = p−ˆn·p ˆn
and
−→
NQ = 	p−ˆn ·p ˆn
cos
To find −→
QP′, we exploit the fact that w [Fig. 7.1(c)] is perpendicular to the plane containing ˆn
and p, such that
ˆn ×p = w
where
w  =  ˆnpsin = psin
(7.4)

Rotating vectors
181
But from Fig. 7.1(b), we have
r  = psin
(7.5)
Therefore Eq. (7.4) equals Eq. (7.5) and
w  = r 
From Fig. 7.1(c), we know that
QP′
NP′ = QP′
r  = QP′
w  = sin
Therefore,
−→
QP′ = w sin = ˆn×psin
and then
p′ = ˆn·p ˆn+	p−ˆn ·p ˆn
cos+ˆn×psin
and
p′ = pcos+ˆn·p1−cos ˆn+ˆn×psin
We make the following substitution:
K = 1−cos
then
p′ = pcos+ˆn·pK ˆn +ˆn ×psin
and
p′ =

xpi +ypj+zpk

cos+

axp +byp +czp

K ai +bj+ck
+

bzp −cyp

i +

cxp −azp

j+

ayp −bxp

k

sin
p′ =

xp cos+a

axp +byp +czp

K +

bzp −cyp

sin

i
+

yp cos+b

axp +byp +czp

K +

cxp −azp

sin

j
+

zp cos+c

axp +byp +czp

K +

ayp −bxp

sin

k
p′ =

xp a2K +cos+yp abK −c sin+zp acK +b sin

i
+

xp abK +c sin+yp b2K +cos+zp bcK −a sin

j
+

xp acK −b sin+yp bcK +a sin+zp c2K +cos

k

182
Vector analysis for computer graphics
and the transform becomes
⎡
⎣
x′
p
y′
p
z′
p
⎤
⎦=
⎡
⎣
a2K +cos
abK −c sin
acK +b sin
abK +c sin
b2K +cos
bcK −a sin
acK −bsin
bcK +a sin
c2K +cos
⎤
⎦·
⎡
⎣
xp
yp
zp
⎤
⎦
where K = 1−cos.
To test this transform, let’s perform a simple rotation such as rotating the point P 110
90
about the x-axis ˆn = i. With reference to Fig. 7.2, it is obvious that the answer is P′ 101.
X
Y
Z
P(1,1,0)
P′(1,0,1)
Figure 7.2.
If  = 90, then K = 1−cos90 = 1. Also, if the axis of rotation is ˆn = i, then a = 1 b = 0, and
c = 0. Therefore, the transform becomes
⎡
⎣
1
0
1
⎤
⎦=
⎡
⎣
1 0 0
0 0 0
0 1 0
⎤
⎦·
⎡
⎣
1
1
0
⎤
⎦
which is correct.
7.3 Complex numbers
Complex numbers were discovered in the 16th century but were not fully embraced by mathe-
maticians, who tended to endorse their “imaginary” associations. Eventually, in the early 19th
century, Carl Friedrich Gauss [1777–1855] showed that complex numbers had a geometric
interpretation, and the mathematical landscape was prepared for a fertile period of discovery.
Prior to the discovery of complex numbers, it was difficult to manipulate the square root of
a negative number. However, with the invention of i, which could stand in place of
√
−1, the
imaginary world of complex numbers came into being.
By definition, a complex number z has the form
z = a +ib or z = a+bi
where a and b are real quantities and i2 = −1. The position of i is not important, and in this
text it is placed after the scalar. An example is 2+3i, where the real part is 2 and the imaginary

Rotating vectors
183
part is 3i. There is no requirement for a complex number to have a real part, in fact, even the
imaginary part could be zero, which implies that the set of real numbers R. is a subset of the
complex number set Z.
What is interesting is that even if we ignore what complex numbers are or what they can do,
they are extremely well behaved when subjected to the normal laws of algebra. For example, we
can add, subtract, multiply, divide, raise to a power, take logs, etc. of a complex number.
7.3.1 Complex number operations
Briefly, here are the rules associated with complex numbers:
Equivalence: Two complex numbers are equal only if both real and imaginary parts are the
same. For example, if
a +bi = r +si
then
a = r
and
b = s
Addition and subtraction: To add or subtract two complex numbers, the addition or subtraction
is performed individually on the real and imaginary parts:
a+bi±r +si = a ±r+b ±si
For example,
12+3i−9−4i = 3+7i
Multiplication: To multiply two complex numbers together, we expand the multiplication using
the conventional rules of algebra:
a +bi×r +si = ar +asi +bri +bsi2
Collecting like terms, we obtain
a+bi×r +si = ar −bs+as +bri
Note that the i2 term makes the product bs negative.
For example,
12+3i×9−4i = 108+27i −48i −12i2 = 120−21i
Division: To divide a complex number by another, we invoke the following subterfuge:
a +bi
r +si = a +bi
r +si
r −si
r −si = ar −asi +bri −bsi2
r2 −rsi +rsi −s2i2 = ar +bs+br −asi
r2 +s2
a+bi
r +si = ar +bs
r2 +s2
+ br −as
r2 +s2 i

184
Vector analysis for computer graphics
For example,
12+3i
9−4i = 12+3i
9−4i
9+4i
9+4i = 108−12
81+16 + 27+48
81+16i = 96
97 + 75
97i
7.3.2 Magnitude of a complex number
If z = a +bi, then its magnitude or absolute value is defined as
z  =
√
a2 +b2
For example,
12+3i =
√
144+9 =
√
153
7.3.3 The complex conjugate
If z = a +bi, then its complex conjugate is defined as
¯z = a −bi
and was used above to simplify the division of two complex numbers.
Just by defining the complex conjugate produces some interesting identities. For example,
z ¯z = a+bia−bi = a2 +b2
z + ¯z = a+bi+a −bi = 2a
z1 +z2 = a1 −b1i+a2 −b2i = a1 +a2−b1 +b2i = z1 +z2
z1 z2 = a1 −b1ia2 −b2i = a1a2 −b1b2−a1b2 +b1a2i = z1z2
and
z ¯z = z2 = a2 +b2
(7.6)
or
z =
√
z¯z
Furthermore, using Eq. (7.6), we find that
z2 = z ¯z
Therefore,
z1z22 = z1z2 z1z2
z1z2 2 = z1z2 z1z2
z1z2 2 = z1z1z2 z2 = z1 2 z2 2
or
z1z2  = z1 z2 

Rotating vectors
185
7.3.4 Graphical interpretation of complex numbers
In 1806 Jean Robert Argand [1768–1822] showed that complex numbers had a useful geometrical
interpretation and could represent points in R2. The breakthrough was to represent a complex
number as the coordinates of a point. But instead of using x-and y-axes, we employ real and
imaginary axes, as shown in Fig. 7.3.
real axis
imaginary axis i
z = a + bi
a
b
z
Figure 7.3.
7.3.5 i as a rotator
Once there was a geometric interpretation for complex numbers, it must have been tempting to
investigate the geometric impact arithmetic operations would have upon them. So let’s explore
the geometric effect of repeatedly multiplying a complex number by i.
If the starting number is z = a, i.e., no imaginary component, then by multiplying z by i
gives us ai. Multiplying again by i, we obtain −a. The next two multiplications produce −ai
and a, respectively. The four multiplications have effectively rotated the complex number 360,
as shown in Fig. 7.4.
r
i
a
ai
–ai
–a
Figure 7.4.
This rotational ability applies to any complex number. For example, if the starting complex
number is 2+i, and we repeatedly multiply by i, we obtain
−1+2i
−2−i
1−2i
2+i
whose positions are shown in Fig. 7.5.

186
Vector analysis for computer graphics
(2 + i)
(–2 – i)
(–1 + 2i)
(1 – 2i)
r
i
Figure 7.5.
7.3.6 Unifying e, i, sin, and cos
exsinxcosx can be defined as the infinite series
ex = 1+ x
1! + x2
2! + x3
3! +···
sinx = x −x3
3! + x5
5! −x7
7! ···
cosx = 1−x2
2! + x4
4! −x6
6! ··· 
But what happens if we make x a complex number in ex?
exi = 1+ xi
1! + x2i2
2! + x3i3
3! +···
exi = 1+ xi
1! −x2
2! −x3i
3! + x4
4! + x5i
5! ··· 
Collecting real and imaginary terms gives us
exi = 1−x2
2! + x4
4! −x6
6! ···+

x −x3
3! + x5
5! −x7
7! ···

i
which we recognise as the sin and cos functions. Therefore,
exi = cosx +sinxi
(7.7)
When x = , we obtain
ei = cos +sini
ei = −1
(7.8)
which is the beautiful relationship discovered by Euler.

Rotating vectors
187
Now what is really strange about i is that it can even be raised to itself: ii. To discover its value,
we rearrange Eq. (7.8):
−1 = ei
Now if ei is equivalent to a rotation of  radians, e

2 i must be equivalent to a rotation of 90.
Therefore,
i = e

2 i
Now we introduce ii:
ii =

e

2 ii 
Therefore,
ii = e−
2 = 02078795
7.3.7 Complex numbers as rotators
Equation (7.7) behaves like a rotator, and the RHS cosx + i sinx is a complex number that
rotates another complex number by x radians. For example, if x = 45, then
cosx +sinxi = 0707+0707i
If another complex number is multiplied by 0707+ 0707i, it is rotated by 45. For example,
to rotate 2+2i by 45, we compute
0707+0707i2+2i = 1414+1414i +1414i +1414i2 = 2828i
which is correct. The magnitude of 2+2i is
2+2i  = 2828
and is preserved after the rotation.
We can now state that any vector v =

x y
T is rotated by an angle  using
z = cos +sinix +yi
(7.9)
where the real and imaginary components of z are the x and y components, respectively, of the
rotated vector.
But before we move on, let’s take one last look at Eq. (7.9). Expanding the terms, we obtain
z = x cos +x sini +y cosi +y sini2
z = x cos −y sin +x sin +y cosi
or in matrix form
z =
 cos −sin
sini
cosi
x
y

which is the rotation matrix in a complex disguise!

188
Vector analysis for computer graphics
7.4 Quaternions
Knowing that a complex number rotates a position vector in R2, it then seems natural that
there should be a R3 equivalent, but the search for such a number proved extremely difficult.
Nevertheless, after many years of toil, Sir William Rowan Hamilton discovered its form on
October 16, 1843.
Prior to this discovery, Sir William had toyed with the idea that a hyper-complex number
would take the form
z = a +bi +cj
where
i2 = j2 = −1
However, a problem occurs when two such numbers are multiplied together:
a1 +b1i +c1ja2 +b2i +c2j = a1a2 +a1b2i +a1c2j+b1a2i +b1b2i2 +b1c2ij+c1a2j+c1b2ji +c1c2j2
a1 +b1i +c1ja2 +b2i +c2j = a1a2 −b1b2 −c1c2+a1b2 +b1a2i +a1c2 +c1a2j+b1c2ij+c1b2ji
The new number contains a real part, two imaginary parts, and two further parts containing
the products ij and ji, for which no meaning could be found.
Sir William then tried the next obvious form:
z = a+bi +cj+dk
and when two such numbers are multiplied together, they create a large number of terms:
q1 = a1 +b1i +c1j+d1k
q2 = a2 +b2i +c2j+d2k
q1q2 =a1a2 +a1 b2i +c2j+d2k+a2 b1i +c1j+d1k
+b1b2i2 +b1c2ij+b1d2ik
+c1b2ji +c1c2j2 +c1d2jk
+d1b2ki +d1c2kj+d1d2k2
Invoking the rule i2 = j2 = k2 = ijk = −1, we obtain
q1q2 = a1a2 −b1b2 +c1c2 +d1d2+a1 b2i +c2j+d2k+a2 b1i +c1j+d1k
+b1c2ij+b1d2ik +c1b2ji +c1d2jk +d1b2ki +d1c2kj
(7.10)
The new number contains a real part, three imaginary parts, and six further parts containing
the products ij, ik, ji, jk, ki, and kj, for which no obvious meaning could be found. And then
on that fateful day in 1843, Hamilton thought of the extra rules:
ij = kjk = iki = jji = −kkj = −i and ik = −j

Rotating vectors
189
which, when substituted in Eq. (7.10), produce
q1q2 =a1a2 −b1b2 +c1c2 +d1d2
+a1 b2i +c2j+d2k+a2 b1i +c1j+d1k
+c1d2 −d1c2i +d1b2 −b1d2j+b1c2 −c1b2k
(7.11)
Equation (7.11) has an obvious structure, which probably did not emerge immediately. However,
with our knowledge of vectors, it is possible to recognise the dot product:
b1b2 +c1c2 +d1d2
a vector multiplied by a scalar
a1 b2i +c2j+d2k
and
a2 b1i +c1j+d1k
and the cross product
c1d2 −d1c2i +d1b2 −b1d2j+b1c2 −c1b2k
Hamilton gave the name quaternion to this form and the name vector to its imaginary component.
He had also given birth to non-commutative algebra, as the quaternion product is non-
commutative, i.e., ij ̸= ji. Hyper-complex numbers also became a new set for describing numbers.
Today, the set of hyper-complex numbers embraces real numbers, which have a rank 1, complex
numbers, which have a rank 2, and quaternions, which have a rank 4.
Thus, the product of two quaternions
q1 = s1 +v1
and
q2 = s2 +v2
equals
q1q2 = s1s2 −v1 ·v2+s1v2 +s2v1 +v1 ×v2
Hamilton was so pleased with his discovery that he immediately wrote to his mathematician,
friend John Graves [1806–1870], who had encouraged him in the first place to pursue this
avenue of research. By December of the same year, Graves had discovered the next algebra of
rank 8, which he called octaves. He also proposed that other algebras might exist of the form
“2m-ions”, where 20 are real numbers, 21 are complex numbers, 22 are quaternions, and 23 are
octaves. He tried, in vain, to find an algebra of the form 24.
Unfortunately for Graves, his idea of octaves was published after Arthur Cayley [1821–1895]
published his own discovery of octonions in 1845, and Cayley’s publishing priority ensured
that he was credited with their discovery. To learn more about quaternions and octonions,
John Conway’s and Derek Smith’s book, On Quaternions and Octonions, is highly recommended
[Conway, 2003].
Although some mathematicians of the day supported quaternions, the newly discovered vector
had even more supporters and by 1900 vector analysis was the preferred analytical tool. By the
1960s quaternions were being used in flight simulators, and in the 1980s Shoemake [Shoemake,
1985] found a use for them in computer graphics. Today, they are used in computer animation
systems and computer-game development systems.

190
Vector analysis for computer graphics
7.5 Quaternions as rotators
Surely, if a complex number can rotate a vector in R2, can a quaternion rotate a vector in R3?
Let’s explore how this is possible.
In Section 7.3.5 we saw that a complex number can be used as a 2D rotator using
z = cos +sinix +yi
and it is tempting to see whether a quaternion can be used in a similar fashion. This time we
will use a vector
v = xi +yj+zk
and a quaternion
q = cos +sini
and create the product
qv = cos +sinixi +yj+zk
which expands to
qv = x cosi +y cosj+z cosk +x sini2 +y sinij+z sinik
Invoking Hamilton’s rules i2 = −1
ij = k
ik = −j gives
qv = x cosi +y cosj+z cosk −x sin +y sink −z sinj
Collecting like terms gives
qv = −x sin +x cosi +y cos −z sinj+z cos +y sink
Some subtle changes reveal
qv = x cos +x sinii +y cos −z sinj+z cos +y sink
(7.12)
Equation (7.12) is tantalizingly close to a perfect rotation about the i-axis. For if we ignore the
i term, the j and k terms contain a rotation transform for the y and z coordinates:
cos −sin
sin
cos
y
z


Obviously, the operation qv falls short of a pure rotation, but we could consider developing it
to create one. Basically, we want to convert the i term to xi, which can, perhaps, be achieved
by extending qv to qv¯q, where ¯q is another quaternion.
Let’s make
¯q = cos −sini

Rotating vectors
191
then
qv¯q =x cos +x sinii cos −sini
+	y cos −z sinj+z cos +y sink
cos −sini
and
qv¯q =

x cos2  +x sin2 

i +	y cos −z sinj+z cos +y sink
cos −sini (7.13)
Equation (7.13) then simplifies to
qv¯q = xi +	y cos −z sinj+z cos +y sink
cos −sini
(7.14)
which seems to have done the trick. Unfortunately, the remaining j and k terms have been
modified, so let’s expand Eq. (7.14):
qv¯q = xi +y cosj−z sinjcos −sini+z cosk +y sinkcos −sini
qv¯q =xi +y cos2 j+y cos sink −z cos sinj−z sin2 k
+z cos2 k −z cos sinj+y cos sink −y sin2 j
Collecting like terms gives
qv¯q = xi +

y cos2  −y sin2  −2z cos sin

j+

z cos2  −z sin2  +2y cos sin

k
and substituting some trigonometric identities, we obtain
qv¯q = xi +y cos2 −z sin2j+z cos2 +y sin2k
(7.15)
and a pure rotation transform emerges with the rotation angle doubled:
cos2 −sin2
sin2
cos2
y
z


As the original quaternion product had the form
qv¯q = cos +siniv cos −sini
and the subsequent rotation was about the x-axis, it seems reasonable to assume that a rotation
about the y- and z-axes is achieved by
qv¯q = cos +sinjv cos −sinj
and
qv¯q = cos +sinkv cos −sink
respectively, which is the case, and can be proved by repeating the above analysis with these
quaternions.
For consistency, the vector v is represented as a pure quaternion where the real part is zero:
0+v. So, a rotation  about an axis is achieved by
qv¯q =

cos

2+sin

2xi +yj+zk

0+v

cos

2−sin

2xi +yj+zk

(7.16)
where the axis of rotation is represented by a unit vector.
The above analysis has not been very rigorous; nevertheless, hopefully, it has shown that the
algebra of quaternions is reasonably straightforward.

192
Vector analysis for computer graphics
7.6 The complex conjugate of a quaternion
Now let’s define the quaternion ¯q. The complex conjugate of an ordinary complex number is
defined as
¯z = a −bi
where
z = a +bi
Similarly, given a quaternion
q = s +v
its complex conjugate is defined as
¯q = s −v
which we innocently used in demonstrating the rotational properties of quaternions.
In Section 7.3.3 we proved that for two complex numbers
z1z2 = ¯z1 ¯z2
Could this relationship hold for two quaternions? Let’s see.
Given two quaternions
q1 = s1 +v1
and
q2 = s2 +v2
then
q1q2 = s1 +v1s2 +v2
which must be expanded using the rules of the quaternion product:
q1q2 = s1s2 −v1 ·v2 +s1v2 +s2v1 +v1 ×v2
Therefore,
q1q2 = s1s2 −v1 ·v2 −s1v2 −s2v1 −v1 ×v2
(7.17)
Now let’s expand q1 q2:
q1 q2 = s1 −v1s2 −v2
q1 q2 = s1s2 −v1 ·v2 −s1v2 −s2v1 +v1 ×v2
(7.18)

Rotating vectors
193
As we can see from Eqs. (7.17) and (7.18)
q1q2 ̸= q1 q2
But if we reverse q1 and q2 and expand q2 q1, we find that
q2 q1 = s2 −v2s1 −v1
q2 q1 = s1s2 −v1 ·v2 −s1v2 −s2v1 −v1 ×v2
which proves that
q1q2 = q2 q1
(7.19)
Now let’s prove that
q¯q = ¯qq
Starting with
q¯q = s +vs −v
q¯q = s2 −v·−v−v ×v = s2 +v 2 
Similarly,
¯qq = s −vs +v
¯qq = s2 −−v·v −v ×v = s2 +v 2
Therefore,
q¯q = ¯qq
(7.20)
7.7 The norm of a quaternion
The absolute value or magnitude of a complex number
a+bi
is defined as
z  =
√
a2 +b2
Similarly, the norm or magnitude of a quaternion
q = s +xi +yj+zk

194
Vector analysis for computer graphics
is defined as
q =

s2 +x2 +y2 +z2
For example, given
q = 1+2i −3j+4k
then
q  =

12 +22 +−32 +42 =
√
30
If we represent the quaternion as
q = s +v
then
q  =

s2 +v 2
and from Eq. (7.20), we have
q¯q = ¯qq = q 2 
(7.21)
Developing Eq. (7.21), we can state that
q2 = q¯q
But as the single quaternion q can be a product of two quaternions
q1q2 2 = q1q2q1q2
Applying Eq. (7.19) gives
q1q2 2 = q1q2¯q2¯q1
Applying Eq. (7.21) gives
q1q2 2 = q1 q2 2 ¯q1
Rearranging gives
q1q2 2 = q1¯q1 q2 2 
Applying Eq. (7.21) gives
q1q2 2 = q1 2 q2 2
Therefore,
q1q2  = q1 q2 
which informs us that the norm of a quaternion product equals the product of the individual
norms.
As with unit vectors, there are unit quaternions, where q = 1, which are used extensively
when rotating vectors.

Rotating vectors
195
7.8 Inverse of a quaternion
As we have seen in earlier chapters, vectors can be multiplied together, but division does not
appear to have any meaning. Quaternions, on the other hand, can be divided, although the
division is represented as a product using an inverse quaternion. For example, q−1 is used to
represent 1

q, which means that
qq−1 = 1
(7.22)
In order to find q−1, we multiply Eq. (7.22) by ¯q:
¯qqq−1 = ¯q
But from Eq. (7.21), we see that
¯qq = q2 
Therefore,
q 2 q−1 = ¯q
and
q−1 =
¯q
q 2 
If q  = 1, then
q−1 = ¯q
7.9 Rotating vectors using quaternions
Before discovering other features of quaternions, let’s apply Eq. (7.16) to a practical example.
To recap, the equation to rotate a vector is
qv¯q =

cos

2+sin

2xi +yj+zk

0+v

cos

2−sin

2xi +yj+zk

(7.23)
where
 is the angle of rotation,
v is the vector to be rotated, and
xi +yj+zk is the axis of rotation and in unit form.
The vector v is represented as a quaternion with a zero real component:
v = 0+xi +yj+zk

196
Vector analysis for computer graphics
Example 1
For the sake of simplicity, let’s make the y-axis the axis of rotation and the angle of rotation
180. Thus, if the position vector v is
v = i +2j
the rotating quaternions are
q = 0+j
and
¯q = 0−j
Note that the axis of rotation is represented by a unit vector.
Figure 7.6 illustrates this scenario.
X
Y
Z
v
v′
(1,2,0)
(–1,2,0)
Figure 7.6.
Applying Eq. (7.23), we have
qv¯q = cos90 +sin90j0+i +2jcos90 −sin90j
qv¯q = 0+j0+i +2j0−j
qv¯q = −2−k0−j
qv¯q = 0+2j−i
Rearranging the terms gives
qv¯q = 0−i +2j
The vector part is
−i +2j
which makes the rotated point −120, which is correct.

Rotating vectors
197
Example 2
Now let’s rotate the same point about the axis
1
√
2 −i +j:
qv¯q =

cos90 + sin90
√
2
−i +j

0+i +2j

cos90 −sin90
√
2
−i +j

qv¯q =

0+ 1
√
2
−i +j

0+i +2j

0−1
√
2
−i +j

qv¯q =

−1
√
2
−3
√
2
k

0−1
√
2
−i +j

qv¯q = −1
2i + 1
2j−3
2i −3
2j
qv¯q = −2i −j
which is also correct, as seen from Fig. 7.7, which, for clarity, only shows the x- and y-axes.
X
Y
(1,2,0)
(–2,–1,0)
v
(–i +  j)
Figure 7.7.
7.10 Representing a quaternion as a matrix
Matrices play an important role in computer graphics, especially in representing transforms to
manipulate objects and the virtual camera. Yaw, roll, and pitch matrices exist that rotate points
about the three Cartesian axes and can be combined to create a single matrix, but, as mentioned
above, can give rise to gimbal lock. Let us now derive a single matrix that will rotate a point an
arbitrary axis without the problems of gimbal lock.
We begin by defining a quaternion q and its conjugate ¯q:
q = s +q = s +xi +yj+zk
¯q = s −q = s −xi −yj−zk

198
Vector analysis for computer graphics
where
s2 +x2 +y2 +z2 = 1
and the pure quaternion v, which contains the position vector v:
v = 0+v
Therefore,
qv¯q = s +q0+vs −q
Multiplying the first two quaternions gives
qv¯q = −q ·v +sv +q ×vs −q
Multiplying these quaternions gives
qv¯q = −q ·vs −sv +q ×v·−q+−q ·v−q+s sv +q ×v+sv +q ×v×−q
Rearranging and simplifying terms gives
qv¯q = −sq ·v +sv ·q +−q ·v−q+s2v +sq ×v +sv ×−q+q ×v ×−q
qv¯q = q ·vq +s2v +sq ×v +sv ×−q+q ×v ×−q
Using the triple vector product identity gives
q ×v ×−q = −q ·qv +v ·qq
Therefore,
qv¯q = q ·vq +s2v +sq ×v +sq ×v −q ·qv +v ·qq
qv¯q =

s2 −q 2
v +2q ·vq +2s q ×v
(7.24)
The next task is to convert Eq. (7.24) into a matrix, which we will do in three steps.
Converting

s2 −q 2
v:
q 2 = x2 +y2 +z2 = 1−s2
Therefore,
s2 −q 2 = s2 −

1−s2
= 2s2 −1
and

s2 −q 2
v =

2s2 −1

v =

2s2 −1

xvi +

2s2 −1

yvj+

2s2 −1

zvk

s2 −q 2
v =
⎡
⎣
2s2 −1
0
0
0
2s2 −1
0
0
0
2s2 −1
⎤
⎦
⎡
⎣
xv
yv
zv
⎤
⎦

Rotating vectors
199
Converting 2q ·vq:
2q ·v = 2xxv +yyv +zzv
Therefore,
2q ·vq = 2xxv +yyv +zzvxi +yj+zk
2q ·vq = 2

x2 +xy +xz

xvi +2

xy +y2 +yz

yvj+2

xz +yz +z2
zvk
2q ·vq =
⎡
⎣
2x2 2xy 2xz
2xy 2y2 2yz
2xz 2yz 2z2
⎤
⎦
⎡
⎣
xv
yv
zv
⎤
⎦
Converting 2s q ×v:
q ×v =

i
j
k
x
y
z
xv yv zv

= yzv −zyvi +zxv −xzvj−xyv −yxvk
2s q ×v = 2s yzv −zyvi +2s zxv −xzvj−2s xyv −yxvk
2s q ×v =
⎡
⎣
0
−2sz
2sy
2sz
0
−2sx
−2sy
2sx
0
⎤
⎦
⎡
⎣
xv
yv
zv
⎤
⎦
Combining all three terms gives
qv¯q =
⎡
⎣
2s2 −1+2x2
2xy −2sz
2xz +2sy
2xy +2sz
2s2 −1+2y2
2yz −2sx
2xz −2sy
2yz +2sx
2s2 −1+2z2
⎤
⎦
⎡
⎣
xv
yv
zv
⎤
⎦
Simplifying leads to
qv¯q =
⎡
⎣
2s2 +x2−1
2xy −sz
2xz +sy
2xy +sz
2s2 +y2−1
2yz −sx
2xz −sy
2yz +sx
2s2 +z2−1
⎤
⎦
⎡
⎣
xv
yv
zv
⎤
⎦
or
qv¯q =
⎡
⎣
1−2y2 +z2
2xy −sz
2xz +sy
2xy +sz
1−2x2 +z2
2yz −sx
2xz −sy
2yz +sx
1−2x2 +y2
⎤
⎦
⎡
⎣
xv
yv
zv
⎤
⎦
This is an important matrix as it is used to represent quaternion operations within computer
graphics programs.
It will be interesting to see the matrix version of Example 2 above and show that it produces
an identical result. To recap, the angle is 180, the axis is
1
√
2
−i +j

200
Vector analysis for computer graphics
and the position vector to be rotated is
120
which makes
s = cos90 = 0
x = −sin90
√
2
= −
√
2
2
y = sin90
√
2
=
√
2
2
z = 0
qv¯q =
⎡
⎣
0
−1
0
−1
0
0
0
0
−1
⎤
⎦
⎡
⎣
1
2
0
⎤
⎦=
⎡
⎣
−2
−1
0
⎤
⎦
(7.25)
which is the same result.
To summarize:
a position vector
v = xvi +yvj+zvk
is rotated about an axis
q = xi +yj+zk
either using
qv¯q =

cos 
2 +sin 
2q

0+v

cos 
2 −sin 
2q

or
qv¯q =
⎡
⎣
1−2y2 +z2
2xy −sz
2xz +sy
2xy +sz
1−2x2 +z2
2yz −sx
2xz −sy
2yz +sx
1−2x2 +y2
⎤
⎦
⎡
⎣
xv
yv
zv
⎤
⎦
where
s = cos 
2
x y, and z incorporate sin 
2 and the axis components.

8 Vector
Differentiation
8.1 Introduction
Since vectors were discovered, which is only about 150 years ago, a totally new world of
mathematical analysis has emerged through their combination with differential and integral
calculus. Differential vector analysis has provided new ways of describing tangential and normal
vectors to curves and surfaces, as well as providing powerful analytical tools for studying scalar
and vector fields. Integral vector analysis, on the other hand, has been applied to the study
of vector fields used in fluid mechanics and heat transfer problems. Although many of these
techniques are used in advanced aspects of computer graphics, in this introductory text we will
explore only the fundamental concepts of differentiating vectors.
Readers who wish to explore this topic at an advanced level are recommended to study Vector
Analysis for Engineers and Scientists by P. E. Lewis and J. P. Ward [Lewis, 1989]. That book was
extremely useful in the preparation of this chapter.
8.2 The derivative of a vector
Differential calculus measures the rate of change of a function relative to one or more dependent
variables. For example, the first differential of the polynomial
y = 2x2 +3x +4
is
dy
dx = 4x +3
201

202
Vector analysis for computer graphics
which expresses how fast the function y is changing relative to the variable x for any value of x.
But what happens if the function is defined in terms of a vector equation such as
f t = x ti +y tj+z tk?
(8.1)
For example, Eq. (8.1) could describe a curve in R3 such as a helix, and df
dt would define the
tangential slope of the curve at a point determined by t.
To define the first differential of a vector-based equation, consider the curve shown in
Fig. 8.1, where two position vectors f t and f t +t identify two points P t and Q t +t,
respectively.
X
Y
Z
P(t)
Q(t + δt)
f(t)
f(t + δt)
f = f(t)
Figure 8.1.
From Fig. 8.1 we can state
f t+−→
PQ = f t +t
Therefore,
−→
PQ = f t +t−f t
If t is small relative to the magnitude of −→
PQ, −→
PQ can be replaced by f:
f = f t +t−f t
(8.2)
Multiplying Eq. (8.2) by
1
t , we obtain
f
t = f t +t−f t
t

(8.3)
Expanding Eq. (8.3) into its components gives
f
t = x t +t−x t
t
i + y t +t−y t
t
j+ z t +t−z t
t
k

Vector differentiation
203
In the limit as t →0, we have
lim
t→0
f
t = dx
dt i + dy
dt j+ dz
dt k
Therefore,
df
dt = lim
t→0
f
t = lim
t→0
f t +t−f t
t

From Fig. 8.1 we can see that as Q approaches P, −→
QP becomes tangential to the point P.
As an illustration, let’s define a helix coiling upwards about the vertical y-axis:
f t = costi +tj+sintk
and
df
dt = d
dt costi + d
dt tj+ d
dt sintk
df
dt = −sinti +j+costk
which is the slope of the curve’s tangent at the point f t. For example, when t = 2, we have
df
dt = j+k
Without proof, the differentials of vector operations are
d
dt p+q = dp
dt + dq
dt
d
dt p·q = dp
dt ·q +p· dq
dt
d
dt p×q = dp
dt ×q +p× dq
dt
d
dt p·q ×r = dp
dt ·q ×r +p· dq
dt ×r +p·q × dr
dt
d
dt p×q ×r = dp
dt ×q ×r+p×
dq
dt ×r

+p×

q × dr
dt



204
Vector analysis for computer graphics
8.3 The normal vector to a planar curve
Given a curve in R2 of the form y = f x, we can construct a tangent vector as shown in
Fig. 8.2, where
t = i + dy
dx j
(8.4)
i
dy
dx
j
t
n
X
Y
y =  f (x)
Figure 8.2.
However, in Section 2.10 we discovered that given a vector
v = ai +bj
then
v⊥= −bi +aj
Therefore, using Eq. (8.4), we have
n = t⊥= −dy
dx i +j
For example, given a function
y = 2x2 +3x −4
dy
dx = 4x +3
Therefore,
n = −4x +3i +j
and when x = 0,
n = −3i +j

Vector differentiation
205
To develop a generic equation for line equations in R2, we write the original curve equation as
y −fx = 0
or
F xy = 0
(8.5)
where the implicit function F is dependent upon two variables, but still describes a planar curve.
If we make small changes to F using dx and dy, and remain on the curve, F xy must still
equal zero, and dF = 0. Therefore,
dF = F
x dx + F
y dy = 0
(8.6)
But Eq. (8.6) can be written as a vector scalar product:
dF =
F
x i + F
y j

·dxi +dyj = 0
Figure 8.3 illustrates why dxi +dyj is the tangent vector to the curve F.
t
dxi
dyj
X
Y
y = f (x)
Figure 8.3.
If the product
F
x i + F
y j

·dxi +dyj = 0
then
F
x i + F
y j
must be the normal vector to the curve F:
n = F
x i + F
y j
So the curve F is defined as the scalar product of two perpendicular vectors: the tangent and
normal vectors.

206
Vector analysis for computer graphics
8.4 The normal vector to a surface
Surface normals are required in lighting calculations and are easily calculated from polygonal
models. In this section we explore how normals are computed for continuous surfaces. We
begin by transposing Eq. (8.5) into a 3D context to describe a surface:
F xyz = 0
If we make small changes to F using dx dy, and dz, and remain on the surface, F xyz must
still equal zero, and dF = 0. Therefore,
dF = F
x dx + F
y dy + F
z dz = 0
(8.7)
But Eq. (8.7) can be written as vector scalar product:
dF =
F
x i + F
y j+ F
z k

·dxi +dyj+dzk = 0
Similarly,
dxi +dyj+dzk
must be the tangent vector to the surface and, consequently,
F
x i + F
y j+ F
z k

must be the normal vector to the surface.
But say a surface is described in a parametric form such as a Bézier surface: then an alternative
form is available. For example, let the position vector of a point on a surface be given by
r = r uv = x uvi +y uvj+z uvk
as shown in Fig. 8.4.
X
Y
Z
r
∂r
∂u
∂r
∂v
n
Figure 8.4.

Vector differentiation
207
Now, say we keep the parameter u constant u = c:
r = r cv = x cvi +y cvj+z cvk
Then r is a function of v. r

v measures the rate of change of r relative to v and is represented
by a tangential vector, as shown in Fig. 8.4. Similarly, by keeping the parameter v constant
v = c:
r = r uc = x uci +y ucj+z uck
Then r is a function of u. r

u measures the rate of change of r relative to u and is represented
by a tangential vector, as shown in Fig. 8.4.
Consequently, the two vectors r

u and r

v identify a tangential plane at the point
r uv, which enables us to compute the normal vector n:
n = r
u × r
v 
(8.8)
However, we must remember that n could also be defined as
n = r
v × r
u
as there is no right or wrong side to a surface patch. It is up to us to determine which side we
wish represents the outside or inside.
Example 1
Consider, then, a quadratic Bézier patch defined as
r uv =

1−u2
2u1−u
u2
⎡
⎣
p00
p01
p02
p10
p11
p12
p20
p21
p22
⎤
⎦
⎡
⎣
1−v2
2v 1−v
v2
⎤
⎦
where
p00 = 000
p01 = 101
p02 = 200
p10 = −111
p11 = 113
p12 = 311
p20 = 020
p21 = 131
p22 = 220
r uv =

1−2u+u2
2u−2u2
u2
⎡
⎣
p00
p01
p02
p10
p11
p12
p20
p21
p22
⎤
⎦
⎡
⎣
1−2v +v2
2v −2v2
v2
⎤
⎦
xr uv =

1−2u+u2
2u−2u2
u2
⎡
⎣
0
1 2
−1 1 3
0
1 2
⎤
⎦
⎡
⎣
1−2v +v2
2v −2v2
v2
⎤
⎦
xr uv =

−

2u−2u2
⎡
⎣
1−2u+u2+
2u−2u2+
u2
⎤
⎦
⎡
⎣
2−4u+2u2+
6u−6u2+
2u2
⎤
⎦
⎡
⎣
1−2v +v2
2v −2v2
v2
⎤
⎦
xr uv =

2u2 −2u

1

−2u2 +2u+2

⎡
⎣
1−2v +v2
2v −2v2
v2
⎤
⎦

208
Vector analysis for computer graphics
Therefore,
xr uv =

2u2 −2u

1−2v +v2
+

2v −2v2
+

−2u2 +2u+2

v2
and
yr uv = 2u

1−2v +v2
+

u2 +2u

2v −2v2
+2u

v2
zr uv =

2u−2u2
1−2v +v2
+

1+4u−4u2
2v −2v2
+

2u−2u2
v2

Simplifying the terms gives
xruv = 2u2 −4u2v −2u+4uv +2v
yr uv = 2u+2u2v −2u2v2
zr uv = 2u+2v +4uv −4uv2 −2u2 −2v2 −4u2v +4u2v2
Expressing the preceding three equations as a vector equation gives
r = 2u2 −4u2v −2u+4uv +2vi
+2u+2u2v −2u2v2j
+2u+2v +4uv −4uv2 −2u2 −2v2 −4u2v +4u2v2k
Differentiating gives
r
u = 4u−8uv −2+4vi +

2+4uv −4uv2
j+

2+4v −4v2 −4u−8uv +8uv2
k
r
v =

−4u2 +4u+2

i +

2u2 −4u2v

j+

2+4u−8uv −4v −4u2 +8u2v

k
The differentials at u = v = 0 are
r
u = −2i +2j+2k
r
v = 2i +2k
The surface normal is given by
n = r
u × r
v =

i
j k
−2 2 2
2
0 2

n = 4i +8j−4k
(8.9)
But how can we confirm that this is correct?
Well, a Bézier surface patch has the property that the surface is tangential to the mesh of
corner control points, as shown in Fig. 8.5.

Vector differentiation
209
p00
p01
p02
p10
p11
p12
p20
p21
p22
v
u
n
Figure 8.5.
The surface at p00 is tangential to the vectors u and v. Therefore, the normal vector n is
given by
n = u ×v
where
u = p10 −p00 = −1
1
1 = −i +j+k
and
v = p01 −p00 = 1
0
1 = i
Therefore,
n =

i
j k
−1 1 1
1
0 1

= i +2j−k
Although one would not expect the magnitude of this vector to equal that of Eq. (8.9), it must
equal a scaled version. In this case the scaling factor is 4:
4i +2j−k = 4i +8j−4k
Example 2
Consider next the parametric equations for a sphere:
x = sinucosv
y = sinusinv
z = cosu
or as a vector equation
r = xi +yj+zk
r = sinucosvi +y sinusinvj+cosuk
(8.10)

210
Vector analysis for computer graphics
Therefore,
r
u = cosucosvi +cosusinvj−sinuk
and
r
v = −sinusinvi +sinucosvj
Therefore, using Eq. (8.8) gives
n = r
u × r
v
n =

i
j
k
cosucosv
cosusinv
−sinu
−sinusinv
sinucosv
0

n = sin2 ucosvi +sin2 usinvj+

sinucosucos2 v +cosusinusin2 v

k
n = sin2 ucosvi +sin2 usinvj+sinucosuk
n = sinusinucosvi +sinusinvj+cosuk
But from Eq. (8.10), we see that
r = sinucosvi +y sinusinvj+cosuk = xi +yj+zk
in which case
n = sinur
(8.11)
Equation (8.11) is just a scalar multiple of Eq. (8.10) and confirms that it represents a normal
to the surface of a sphere.
Example 3
Let’s find the unit tangent vector to any point on the curve
r = xi +yj+zk
where
x = t2 +2
y = 4t −8
z = 2t2 −4t
Therefore,
dr
dt = d
dt

t2 +2

i +4t −8j+

2t2 −4t

k

dr
dt = d
dt 	2ti +4j+4t −4k


Vector differentiation
211
Thus, the tangential vector is
2ti +4j+4t −4k
Its magnitude is

dr
dt
 =

2t2 +16+4t −42
and the unit tangential vector is
ˆt =
2ti +4j+4t −4k

2t2 +16+4t −42 
If we wanted to know the value of ˆt when t = 1, then we would find
ˆt = 2i +4j
√4+16 =
2
√
20
i +
4
√
20
j
ˆt = 1
√
5
i + 2
√
5
j

9 Projections
9.1 Introduction
Normally, one does not require vectors to derive the basic perspective transform — simple ratios
are sufficient, but if the projection plane is rotated or oblique to the view direction, vector analysis
comes to the rescue. So let’s investigate how vectors can resolve some aspects of projections.
9.2 Perspective transform
Figure 9.1 assumes that an observer is located at the origin O and directed along the z-axis.
Consequently, any point P xP yP zP in R3 can be projected onto a projection plane revealing
a point Q in R2. The projection plane is orthogonal to the view direction, and the screen axes
are parallel with the camera axes.
l
X
Y
Z
P
Q
D
i
j
k
m
n
p
q
d
O
λ
ε
Figure 9.1.
213

214
Vector analysis for computer graphics
We begin by declaring the following conditions:
l = i
m = j
n = k
d = −→
OD = dk
q = −→
OQ
p = −→
OP
and Q  is the point on the projection plane intersected by p. Our task is to find the scalars
 and .
From Fig. 9.1 we see that
q = d +−→
DQ
but −→
DQ has local components:
−→
DQ = l +m = i +j
Therefore,
q = d +i +j
or
i +j = q −d
(9.1)
We now define q in terms of p, so we let
q = p
where  is a scalar that requires defining.
As q and p have the same projection on k, we find that
k ·q = k ·p
and
 = k ·q
k ·p = d
zP

Substituting  in Eq. (9.1) gives
i +j = d
zP
xPi +yPj+zPk−dk
Equating the i and j components gives
 = d xP
zP

 = d yP
zP
which are readily recognised as the perspective projection plane coordinates.
9.2.1 Horizontally oblique projection plane
Now let’s consider the case where the projection plane is rotated 	 about the vertical m-axis, as
shown in Fig. 9.2.

Projections
215
X
Y
Z
P
Q
D
i
j
k
m
n
p
q
d
O
l
ε
θ
θ
λ
Figure 9.2.
We begin by declaring the following conditions:
i ·l = cos	
m = j
n ·k = cos	
d = −→
OD = dk
q = −→
OQ
p = −→
OP
n ·d = d cos	
The relationship between the rotated axial system lmn and ijk can be represented as
⎡
⎣
l
m
n
⎤
⎦=
⎡
⎣
cos	
0
−sin	
0
1
0
sin	
0
cos	
⎤
⎦·
⎡
⎣
i
j
k
⎤
⎦
(9.2)
and represents the transform relating coordinates in ijk to lmn. Q   is the point on the
projection plane intersected by p, and once more, our task is to find the scalars  and .
From Fig. 9.2 we see that
q = d +−→
DQ
but
−→
DQ = l+m
Therefore,
q = d +l +m
or
l +m = q −d
(9.3)
We now define q in terms of p, so we let
q = p

216
Vector analysis for computer graphics
where  is a scalar that requires defining.
As q and p have the same projection on n, then
n ·q = n ·p
and
 = n ·d
n ·p = dn ·k
n·p 
We now define n in terms of ijk. Therefore, from Eq. (9.2), we find that
n = sin	i +cos	k
and
 =
d cos	
xP sin	 +zP cos	
Returning to Eq. (9.3), we substitute l and m in terms of ijk.
From Eq. (9.2), we have
l = cos	i −sin	k
m = j
and Eq. (9.3) becomes
cos	i −sin	k+j = xPi +yPj+zPk−dk
(9.4)
We now isolate the i components of Eq. (9.4) to reveal :
cos	 = xP
and
 = xP
cos	
Finally, substituting  gives
 =
d cos	
xP sin	 +zP cos	
 xP
cos	

 =
d xP
xP sin	 +zP cos	
We now isolate the j components of Eq. (9.4) to reveal :
 = yP
and substituting  gives
 =
d yP cos	
xP sin	 +zP cos	
Thus, we have found Q  . Note that when 	 = 0,  and  equal the values for the orthogonal
projection plane.

Projections
217
9.2.2 Vertically oblique projection plane
Now let’s consider the case where the projection plane is rotated 	 about the horizontal l-axis,
as shown in Fig. 9.3.
l
X
Y
Z
P
Q
D
i
j
k
m
n
p
q
d
O
θ
θ
λ
ε
Figure 9.3.
We begin by declaring the following conditions:
j·m = cos	
l = i
m ·i = cos	
d = −→
OD = dk
q = −→
OQ
p = −→
OP
n ·d = d cos	
The relationship between the rotated axial system lmn and ijk can be represented as
⎡
⎣
l
m
n
⎤
⎦=
⎡
⎣
1
0
0
0
cos	
sin	
0 −sin	 cos	
⎤
⎦·
⎡
⎣
i
j
k
⎤
⎦
(9.5)
and represents the transform relating coordinates in ijk to lmn. Q   is the point on the
projection plane intersected by p, and once more, our task is to find the scalars  and .
From Fig. 9.3, we have
q = d +−→
DQ
but
−→
DQ = l +m
and
q = d +l +m = i +m

218
Vector analysis for computer graphics
or
i +m = q −d
(9.6)
We again define q in terms of p, so we let
q = p
where  is a scalar that requires defining.
As q and p have the same projection on n, we have
n ·q = n ·p
and
 = n ·d
n ·p = dn ·k
n·p 
We now define n in terms of ijk. Therefore, from Eq. (9.5), we have
n = −sin	j+cos	k
and
 =
d cos	
−yP sin	 +zP cos	
Returning to Eq. (9.6), we substitute m in terms of ijk.
From Eq. (9.5), we have
m = cos	j+sin	k
and Eq. (9.6) becomes
i +cos	j+sin	k = xPi +yPj+zPk−dk
(9.7)
We now isolate the i components of Eq. (9.7) to reveal :
 = xP
Finally, substituting  gives
 =
d xP cos	
−yP sin	 +zP cos	
We isolate the j components of Eq. (9.7) to reveal :
 = yP
cos	
and substituting  gives
 =
d cos	
−yP sin	 +zP cos	
 yP
cos	

 =
d yP
−yP sin	 +zP cos	
Note that when 	 = 0,  and  equal the values for the orthogonal projection plane.
Having examined two orientations of the projection plane, let’s complete this analysis with
an arbitrary orientation of the plane.

Projections
219
9.2.3 Arbitrary orientation of the projection plane
The above technique of using a rotation matrix to relate the lmn-axes with the ijk-axes provides
the solution to this problem. This time the projection plane is subjected to yaw, pitch, and roll
rotations, as shown in Fig. 9.4.
l
X
Y
Z
P
Q
D
i
j
k
m
n
p
q
d
O
ε
λ
Figure 9.4.
The transform relating coordinates in ijk with lmn is given by
⎡
⎣
l
m
n
⎤
⎦=
⎡
⎣
t11 t12 t13
t21 t22 t23
t31 t32 t33
⎤
⎦·
⎡
⎣
i
j
k
⎤
⎦
(9.8)
We begin by declaring the following conditions:
d = −→
OD = dk
q = −→
OQ
p = −→
OP
Q   is the point on the projection plane intersected by p, and once more, our task is to
find the scalars  and .
From Fig. 9.4, we see that
q = d +−→
DQ
but
−→
DQ = l +m
Therefore,
q = d +l +m
or
l +m = q −d
(9.9)

220
Vector analysis for computer graphics
We again define q in terms of p, so we let
q = p
where  is a scalar that requires defining.
As q and p have the same projection on n, we have
n ·q = n ·p
and
 = n ·d
n ·p = dn ·k
n·p 
We now define n in terms of ijk. Therefore, from Eq. (9.8), we find
n = t31i +t32j+t33k
and
 =
d t33
xPt31 +yPt32 +zPt33
and Eq. (9.9) becomes
l +m = p−dk
(9.10)
We can isolate  by multiplying Eq. (9.10) throughout by l
l ·l +l ·m = l ·p−dk
 = l ·p−dl ·k
But from Eq. (9.8) , we have
l = t11i +t12j+t13k
Therefore,
 = t11i +t12j+t13k·p−d t11i +t12j+t13k·k
 = t11i +t12j+t13k·xPi +yPj+zPk−dt13
 = xPt11 +yPt12 +zPt13−dt13
Finally, substituting  gives
 =
dt33
xPt31 +yPt32 +zPt33
xPt11 +yPt12 +zPt13−dt13
 = dt33
xPt11 +yPt12 +zPt13
xPt31 +yPt32 +zPt33
−dt13

Projections
221
We isolate  by multiplying Eq. (9.10) throughout by m
m ·l +m ·m = m ·p−dk = 
 = m ·p−dk
(9.11)
But from Eq. (9.8), we find that
m = t21i +t22j+t23k
Therefore,
 = t21i +t22j+t23k·p−dk
 = t21i +t22j+t23k·xPi +yPj+zPk−dt23
and substituting  gives
 =
d t33
xPt31 +yPt32 +zPt33
t21i +t22j+t23k·xPi +yPj+zPk−dt23
 = d t33
xPt21 +yPt22 +zPt23
xPt31 +yPt32 +zPt33
−dt23
The reader may wish to confirm that the values of  and  reproduce the previously computed
values for different transforms relating lmn with ijk.
Note that the transform relating lmn with ijk is derived by concatenating the yaw, roll, and
pitch transforms associated with changing coordinates between two frames of reference. For
instance, the individual transforms are given by
⎡
⎣
cosroll
sinroll
0
−sinroll cosroll
0
0
0
1
⎤
⎦
⎡
⎣
1
0
0
0
cospitch
sinpitch
0 −sinpitch cospitch
⎤
⎦
⎡
⎣
cosyaw
0 −sinyaw
0
1
0
sinyaw
cosyaw
⎤
⎦
and are concatenated as follows:
⎡
⎣
l
m
n
⎤
⎦= 
roll 
pitch 
yaw
⎡
⎣
i
j
k
⎤
⎦
⎡
⎣
l
m
n
⎤
⎦=
⎡
⎣
t11 t12 t13
t21 t22 t23
t31 t32 t33
⎤
⎦·
⎡
⎣
i
j
k
⎤
⎦
where
t11 = cosyaw cosroll +sinyaw sinpitch sinroll
t12 = cospitch sinroll
t13 = −sinyaw cosroll +cosyaw sinpitch sinroll

222
Vector analysis for computer graphics
t21 = −cosyaw sinroll +sinyaw sinpitch cosroll
t22 = cospitch cosroll
t23 = sinyaw sinroll +cosyaw sinpitch cosroll
t31 = sinyaw cospitch
t32 = −sinpitch
t33 = cosyaw cospitch
Figure 9.5 shows four views of a cube using the above equations: (a) shows the normal perspective
projection; (b) shows the projection plane with a horizontal yaw of 10; (c) shows the projection
plane with a pitch of 10; and (d) shows the projection plane subjected to a roll, pitch and yaw
of 10. Note, also, that the x coordinate has been reversed, to compensate for the reversal that
occurs when the image is displayed with the x-axis pointing to the right.
–3
–2
–1
1
2
3
–3
–2
–1
1
2
3
–3
–2
–1
1
2
3
–3
–2
–1
1
2
3
–3
–2
–1
1
2
3
4
–4
–2
2
4
 (a) 
(b)
–4
–2
2
4
–2
2
4
(c)
(d)
Figure 9.5.

Projections
223
9.3 Pseudo fish-eye projection
A pseudo fish-eye projection is readily achieved by projecting onto a spherical projection surface.
The geometry for this is shown in Fig. 9.6, where the projection radius of curvature is given by
r and the centre of curvature is located at the origin.
Q
X
Y
Z
P
D
i
j
k
p
q
d
O
Figure 9.6.
We begin by declaring the following conditions:
d = −→
OD = dk
q = −→
OQ = r
p = −→
OP
We define q in terms of p, so we let
q = p
(9.12)
But it is obvious that q  = r for all points. Therefore,
q  = p
and
 = q 
p =
r
p
Substituting  in Eq. (9.12) gives
q =
r
pp
Therefore,
xQ =
rxP

x2
P +y2
P +z2
P
yQ =
ryP

x2
P +y2
P +z2
P

where r is the radius of curvature of the lens.

224
Vector analysis for computer graphics
The effect of these equations is shown in Fig. 9.7, where a cube is viewed through a projection
screen with a radius of curvature of 10. Care must be taken when using this projection because
if only the end points of each edge are processed, then straight edges transform into straight
edges. However, in Fig. 9.7 many points are taken from each edge to create the curved lines.
–3
–2
–1
1
2
3
–3
–2
–1
1
2
3
Figure 9.7.

10 Rendering
10.1 Introduction
The rendering phase generates images from geometric description of 3D models using a
collection of virtual light sources. This requires knowledge of the location and type of the light
sources, a description of the illumination model, and knowledge of how light intensities are
mapped onto the geometry.
Vectors play an important role in this phase as they reveal the orientation of surfaces as well
as the direction of light sources and assist in the analysis of how light interacts with objects. So
let’s begin with light sources.
10.2 Light sources
Light sources are often classified as point, directional, or spot. A point light source has spatial
position and radiates light uniformly in all directions; a directional light source is located at
infinity and gives rise to a parallel beam of light rays; a spotlight behaves like a torch, which
has position, direction, and an angle associated with its conical beam.
As light sources involve parameters such as direction and magnitude, vectors are the perfect
mathematical tool to describe and analyze their behavior. Although a vector is used to encode
direction, individual scalars represent intensity and color; however, there is no reason why these
color values could not also be treated as a vector. To simulate the influence a point light source
has on a surface, we only need to define a vector between the position of the light source and
some point on the illuminated surface. A vector L is used to represent a beam of photons (light)
leaving the light source L and arriving at the point P, as shown in Fig. 10.1.
It is convenient to arrange for the vector L to point towards the light source, which is given by
L =
⎡
⎣
LX −PX
LY −PY
LZ −PZ
⎤
⎦
where L and P locate the light source and illuminated point, respectively.
225

226
Vector analysis for computer graphics
X
Y
Z
L
P
L
Figure 10.1.
In physics, two models are used to describe light: corpuscular and waves. The corpuscular
model assumes that light is made up of small packets of electromagnetic energy called photons,
which move at the speed of light. This is a convenient model to use when trying to understand
the intensity of an illuminated surface. For example, when we observe an illuminated surface,
its intensity is determined by the number of photons we perceive per unit surface area. The
more photons detected, the more intense the surface appears. Imagine, then, a matte surface
illuminated by a point light source, as shown in Fig. 10.2. Photons striking the surface are
reflected back equally in all directions due to the random nature of the surface geometry.
A
B
C
n
L
θ
θ
Figure 10.2.
If the line AB represents the diameter of a 3D circle, and the line CB represents the diameter
of a 3D circle on the matte surface, then the number of photons n per unit area striking CB is
proportional to
n ∝AB
CB
But from Fig. 10.2, we have
AB
CB = cos

Rendering
227
Therefore,
n ∝cos
But cos can be computed from the dot product using n and L:
cos =
n·L
n L 
and if n and L are unit vectors, then
cos = n·L
which allows us to state that the surface intensity I of a diffuse surface obeys the following law:
I = Iin·L
where
Ii is the incident light intensity,
n is the unit surface normal, and
L is the unit vector from the surface to the light source.
10.3 Local reflection models
Very often, computer graphics systems employ simple reflection models to describe how light is
reflected by a surface. Local reflection models enable us to calculate the reflected light intensity
at a point on a surface, and although it is not correct, it is convenient to divide the light reflected
by a surface into three components: ambient, diffuse, and specular. The ambient component
represents a constant level of light that is supposed to permeate the illuminated environment.
This is included to ensure that surfaces not directly illuminated by virtual light sources receive
some light. The diffuse component represents the light reflected by matte surfaces, while the
specular component represents the light reflected by shiny surfaces. Obviously, this division of
surfaces into three categories is erroneous — nevertheless its simplicity permits reasonably good
images to be generated.
Another assumption is that the proportion of light reflected for each light component is
represented by three constants:
ka = the ambient component,
kd = the diffuse component, and
ks = the specular component,
where
ka +kd +ks = 1

228
Vector analysis for computer graphics
The global ambient light level is defined by Ia, whereas the incident light due to a light source
is defined by Ii and gives rise to a diffuse and specular component.
We can now start to derive an equation that sums these three components together. The
ambient term is kaIa and the diffuse term is kdIin · L. All that we need now is to compute
the specular term, which is viewer-dependent as it simulates the reflection of the light source
observed in shiny surfaces.
n
L
V
R
P
α
θ θ
Figure 10.3.
Figure 10.3 shows the geometry used to compute the specular component. At a point P on the
surface, photons are arriving from the light source L with direction −L. As n is the surface
normal at P, for a perfect reflector the angle of reflection  will equal the angle of incidence,
and the reflected photons will have direction R. If the viewer happens to be looking back along
vector R, a bright spot is observed. However, say the viewer is offset by an angle , and the
surface is not a perfect reflector, some light will be seen when looking back along V. Phong
[Phong, 1975] proposed that this specular highlight could be controlled by cos, which gives
a bell-shaped distribution of light intensity around V. But if the vectors associated with this
model are unit vectors, then
cos = R ·V
Phong also suggested that different levels of shininess could be simulated by raising cos to
some power n:
cosn  = R ·Vn
where n is a parameter controlling the level of shininess. For example, when n =  (or some
very high value), a mirror surface is created, and as n is reduced, the size of the specular
highlight increases.
Adding this specular term to the ambient and diffuse terms produces
I = kaIa +Ii kdn·L +ks R ·Vn
(10.1)

Rendering
229
However, Eq. (10.1) defines intensity, rather than color. The nature of the human eye allows
us to describe color in terms of three additive components: red, green blue, which gives rise to
three color intensities:
Ir = karIar +Iir kdrn ·L +ksr R ·Vn
Ig = kagIag +Iig

kdgn ·L +ksg R ·Vn
Ib = kabIab +Iib kdbn ·L +ksb R ·Vn
(The extra suffices, r, g, and b, identify the red, green, and blue components, respectively.)
Having independent terms for each color component enables colored light sources to illuminate
different colored surfaces.
Although Eq. (10.1) is correct, it does reference the reflected light vector R, which is currently
undefined. However, Eq. (5.6) describes how a vector is reflected away from a line or plane:
vout = vin −2
n ·vin
n2
	
n
where
vin is the incident vector,
vout is the reflected vector,
n is the normal vector.
If n is a unit vector, this simplifies to
vout = vin −2n·vinn
(10.2)
If Eq. (10.2) is to be used in Eq. (10.1) we have to reverse vin so that it points towards the light
source:
vout = 2n ·vinn −vin
and if we substitute the vector names associated with our lighting model, we obtain
R = 2n·Ln−L
(10.3)
Blinn [Blinn, 1977] proposed a way of avoiding calculating R altogether. This involved defining
a vector h half-way between L and V:
h =
L +V
L +V
(10.4)
And as h is viewer–dependent, n ·h can replace R ·V in Eq. (10.1):
I = kaIa +Ii kdn·L +ks n·hn
(10.5)
In fact, Eq. (10.5) is employed in OpenGL and DirectX.

230
Vector analysis for computer graphics
10.4 Shading
The shading models proposed by Gouraud [Gouraud, 1971] and Phong have survived over 30
years of usage. To begin with, Gouraud proposed that if one could compute the light intensity
at two opposite edges of a polygon, the light intensity between the two points could be linearly
interpolated. Such a scheme is shown in Fig. 10.4.
n
n
Ll
Lr
Figure 10.4.
On the left-hand side of the polygon the light intensity is calculated as
Il = Iaka +Iikdn·Ll
whereas the light intensity on the right-hand side is calculated as
Ir = Iaka +Iikdn ·Lr
Intermediate points on the line connecting the two extremes are linearly interpolated between
Il and Ir.
Gouraud also devised a clever way of creating the appearance of a smooth object by making
the shared edges of polygonal shapes invisible. The strategy involves taking the average normal
at each vertex of an object, which ensures that the light intensities along the edges of a polygon
are shared by neighbouring polygons. Figure 10.5 shows four connecting polygons with their
independent surface normals. An average normal nl is computed at the shared vertex where the
polygons meet and used in the above lighting calculations:
nl = n1 +n2 +n3 +n4
At the other end of the edge a similar averaging takes place between the four touching polygons
to produce an average normal nr. Light intensities are calculated at either end and then inter-
polated along the edge. Both normals require normalizing before they are used in the lighting
calculations.

Rendering
231
n1
n2
n3
n4
nl
nr
Figure 10.5.
Phong’s PhD research improved upon Gouraud’s diffuse shading model by interpolating the
two vectors nl and nr rather than the light intensities. Although this increases the processing
time, the specular highlights achieved across a pseudo-smooth object are worth it. Another part
of the extra processing is in normalizing the interpolated normal vector.
10.5 Bump mapping
Irregular surfaces such as bark, or the skin of an orange, have extremely complex surface
geometries and present a real challenge to model within a computer graphic system. But as
we have seen above, cunning schemes can be invented to achieve an acceptable effect, without
expending too much effort, and the same is true for bumpy surfaces.
In 1978 James Blinn published his paper “Simulation of Wrinkled Surfaces” [Blinn, 1978]
and invented bump mapping, which makes a surface appear irregular without involving extra
geometry. Readers are highly recommended to read Mark Kilgard’s paper, “A Practical and
Robust Bump-Mapping Technique for Today’s GPUs” [Kilgard, 2000], upon which the following
description is based.
Blinn’s technique derives a normal vector at a point on a parametric surface, which is then
perturbed using a value from an associated height field (bump map). The surface is then
rendered using the perturbed normals, which modulate the surface light intensities accordingly.
We begin by acknowledging some sort of bivariate vector function Puv that describes a
3D surface, where the parameters uv identify a unique point xyz on the surface. For
example, Puv might describe a plane, cylinder, sphere, toroid, or parametric patch.
From now on, we will reference this function as P and remember that its input parameters
are uv.
By partially differentiating P with respect to u and v, we obtain two vectors P

u and P

v,
which lie on the tangent plane containing P. By taking their cross product we obtain the surface
normal N at P:
N = P
u × P
v 
(10.6)
Figure 10.6 illustrates these vectors.

232
Vector analysis for computer graphics
∂P
∂u
∂P
∂v
N
u
v
P
Figure 10.6.
The next step is to effectively displace the surface along N by a value stored in a bivariate
scalar function (bump map) F uv. Figure 10.7(a) shows such a map indexed by u and v.
Figure 10.7(b) shows a surface defined by a bivariate vector function Puv with some of its
normal vectors. Figure 10.7(c) shows the perturbed surface P′ uv after its normal vectors
have been disturbed by F uv.
u
v
(a)
(b)
(c)
P′(u,v)
F (u,v)
P (u,v)
Figure 10.7.
Before the displacement is performed, N is normalized to keep the process consistent:
N
N 
Thus, the displaced point P′ is defined as
P′ = P+F
N
N
These new points form the secondary perturbed surface that is rendered. But the renderer
requires access to the surface normals associated with P′, which is defined using
N′ = P′
u × P′
v 
(10.7)
The partial derivatives in Eq. (10.7) are expanded using the chain rule:
P′
u = P
u + F
u
 N
N 
	
+F

N
N
u


Rendering
233
and
P′
v = P
v + F
v
 N
N
	
+F

N
N 
v


To simplify these partial derivatives, it is assumed that the relative magnitude of F is negligible
and can be ignored. Thus,
P′
u = P
u + F
u
 N
N 
	
and
P′
v = P
v + F
v
 N
N 
	
which permits Eq. (10.7) to be written as
N′ =
P
u + F
u
 N
N 
		
×
P
v + F
v
 N
N 
		

(10.8)
Basically, Eq. (10.8) has the form of four vectors:
a +b×c +d
which, when expanded, equals
a +b×c +d = a ×c +b×c +a ×d +b×d
Expanding Eq. (10.8) along similar lines, we obtain
N′ = P
u × P
v + F
u
 N
N  × P
v
	
+ F
v
P
u ×
N
N 
	
+ F
u
F
v
N
N ×
N
N
But
N
N ×
N
N = 0
and
P
u × P
v = N
Therefore,
N′ = N+ F
u
 N
N  × P
v
	
+ F
v
P
u ×
N
N 
	
or
N′ = N +
F
u

N× P
v
	
+ F
v
P
u ×N
	
N 

234
Vector analysis for computer graphics
or
N′ = N+
F
u

N× P
v
	
−F
v

N× P
u
	
N 

(10.9)
Blinn proposed two ways to interpret Eq. (10.9): the first interpretation, and probably the most
obvious one, is to see N′ as the sum of two vectors:
N′ = N +D
where
D =
F
u

N× P
v
	
−F
v

N × P
u
	
N 

(10.10)
Figure 10.8(a) shows this vector addition, and Fig. 10.8(b) shows the vector cross product
associated with D.
N
D
N′
N
D
∂F
−
∂v
∂F
∂u
 ∂P    
  
(a)
(b)
∂v
 ⎯
 ∂P
  ∂u
 ⎯
N ×
N ×
θ
Figure 10.8.
Figure 10.8(b) shows us that with N as the surface normal vector, N ×P

u and N ×P

v
must lie in the tangent plane of the surface. When these vectors are scaled by the partial
derivatives of the bump map F, they are summed to produce D, which is subsequently used to
perturb N.
The height field F was originally used to scale the unit normal vector N

N , which is
eventually used to perturb N by D. However, we can save ourselves a lot of work if the bump
map takes the form of an offset vector function Duv, then all we have to do is add it to
N uv. Such a technique is called an offset map.
Blinn’s second interpretation of Eq. (10.9) is to imagine that N is rotated about some axis to
N′. The axis will lie in the tangent plane and is computed using N×N′. But as
N′ = N +D

Rendering
235
then
N ×N′ = N×N+D = N ×N+N×D = N ×D
(10.11)
If we now substitute Eq. (10.10) in Eq. (10.11), we obtain
N ×N′ = N×D = N×
⎛
⎜⎜⎝
F
u

N × P
v
	
−F
v

N× P
u
	
N
⎞
⎟⎟⎠
N ×N′ =
F
u

N×

N× P
v
		
−F
v

N×

N × P
u
		
N 

(10.12)
Equation (10.12) now contains a triple product, which, as we discovered in Section 2.9.2, has
the following identity:
a ×b×c = a ·cb−a ·bc
Expanding Eq. (10.12) produces
N×N′ =
F
u

N· P
v
	
N −N ·N P
v
	
−F
v

N · P
u
	
N−N·N P
u
	
N

But
N ·N = N 2
and
N · P
v = 0 and N· P
u = 0
Therefore,
N ×N′ =
F
u

−N2 P
v
	
−F
v

−N 2 P
u
	
N
= N
F
v
P
u −F
u
P
v
	
which can be expressed as
N×N′ = NA
(10.13)
where
A = F
v
P
u −F
u
P
v 
Because of the cross product in Eq. (10.13), A must be perpendicular to the plane containing
N and N′. Therefore, one can imagine that N has been rotated about A to N′.
Now since
N×N′ = N×D

236
Vector analysis for computer graphics
and
N×N′ = NA
then
N ×D = NA
Furthermore,
N×D = N A
(10.14)
But as N is perpendicular to D, we have
 N×D = N Dsin90 = N D
(10.15)
Equations (10.14) and (10.15) imply that D = A.
N is rotated , as shown in Fig. 10.8(a), where
tan  = D
N = A
N 
or
 = tan−1
⎛
⎜⎜⎝

F
v
P
u −F
u
P
v


P
u × P
v

⎞
⎟⎟⎠
So this allows us to develop a perturbation strategy based upon rotations, rather than offsets.
Now let’s illustrate the above analysis with an example. To keep the mathematics simple, let’s
use a cylinder as the bivariate vector function, as shown in Fig. 10.9.
u
v
P(u,v)
X
Y
Z
u
v
Figure 10.9.
For instance, if the radius and the height of the cylinder equal 1 and uv ∈	02
, then
the x component is given by cosu,
the y component is given by v,
the z component is given by −sinu,

Rendering
237
and
Puv = cosui +vj−sinuk
(10.16)
From Eq. (10.16) this makes
P
u = −sinui −cosuk
P
v = j
N = P
u × P
v =

i
j
k
−sinu 0 −cosu
0
1
0

N = cosui −sinuk
Figure 10.10 illustrates the orientation of the three vectors P
u, P
v , and N.
∂P
∂v
∂P
∂u
N
Figure 10.10.
Now let’s assume that the height field F uv ∈	0 255 and contains the values shown in
Fig. 10.11.
u
v
200
205
210
215
210
215
222
217
214
223
218
Figure 10.11.

238
Vector analysis for computer graphics
Again, to simply the mathematics, let’s find out what happens at the point u = v = 0.
To begin with,
P
u = −k
P
v = j
N = i
From Fig. 10.11, we see that
F
u = 205−200 = 5
F
v = 210−200 = 10
In calculating F

u and F

v, we ignore delta increments in u and v, as this can be
compensated for by introducing a scaling factor, which will also control the impact the bump
map has on N. Let this scaling factor be  with an initial value of 1.
Modifying Eq. 10.9 with  produces
N′ = N+
⎛
⎜⎜⎝
F
u

N × P
v
	
−F
v

N× P
u
	
N
⎞
⎟⎟⎠
(10.17)
Now let’s calculate N×P

v and N×P

u:
N× P
v =

i
j k
1 0 0
0 1 0

= k
N × P
u =

i
j
k
1 0
0
0 0 −1

= j
Substituting all the above terms in Eq. (10.17), we obtain
N′ = i +5k −10j
and if  = 1,
N′ = i −10j+5k
If this is seen to be visually unacceptable,  can be set to some suitable value. In fact, let’s make
 = 001 and then compute N′ again:
N′ = i −01j+005k

Rendering
239
So initially N = i, and after being perturbed, it is N′ = i −01j+005k. Let’s compute the angle
 between these vectors using the dot product:
 = cos−1
N·N′
NN′ 
 = cos−1
i·i −01j+005k
10125
	
= cos−1

1
10125
	
= 901
As mentioned above, it is possible to convert the original height field into an offset map
containing the vectors to perturb N, thus saving considerable repetitive computation.

11 Motion
11.1 Introduction
As vectors have always been associated with dynamics, this text concludes with a short chapter
on the motion of objects within an animation context. To begin with, we compute the shortest
distance between a stationary observer (which we refer to as “you”) and a moving object,
followed by that between a moving observer (still “you”) and a moving object.
11.2 Close encounters of the first kind
Imagine watching an object fly past you at a speed sO in a direction ˆvO. The nearest the object
approaches you is when a line connecting you to the object is perpendicular to ˆvO, as shown in
Fig. 11.1.
X
Y
Z
You
object
ˆvo
Figure 11.1.
If the object is positioned at Q at time t = 0, its future position is given by
p = q +tPsOˆvO
where tP is the time taken to move from Q to P, as shown in Fig. 11.2.
241

242
Vector analysis for computer graphics
X
Y
Z
You
Q
q
c
p
P
C
d
y
ˆvo
Figure 11.2.
The time for the object to reach the “close encounter” at C is tC, where
c = q +tCsOˆvO
(11.1)
If we let d = −−→
YouC, then d⊥ˆvO and d · ˆvO = 0.
And as d⊥ˆvO, y and c have identical projections on ˆvO. Therefore,
ˆvO ·c = ˆvO ·y
(11.2)
Multiplying Eq. (11.1) throughout by ˆvO, we obtain
ˆvO ·c = ˆvO ·q +tCsOˆvO · ˆvO
(11.3)
Substituting Eq. (11.2) in Eq. (11.3), we get
ˆvO ·y = ˆvO ·q +tCsOˆvO · ˆvO
But ˆvO · ˆvO = 1. Therefore,
ˆvO ·y = ˆvO ·q +tCsO
and
tC = ˆvO ·y −q
sO

(11.4)
The shortest distance between you and the object is given by d . Now
d = c −y
Therefore,
d  = c −y 
(11.5)
Substituting Eq. (11.1) in Eq. (11.5), we get
d  = q +tCsOˆvO −y 
(11.6)

Motion
243
Note that if you are located at the origin, tC becomes
tC = −ˆvO ·q
sO
(11.7)
and d  becomes
d  = q +tCsOˆvO 
(11.8)
For example, say you are located at the origin and the object is located at Q, 120 km along the
x-axis, as shown in Fig. 11.3.
X
Y
Z
You
Q
ˆvo
C
d
q
120
Figure 11.3.
If the object’s speed is sO = 60

kmh−1
in the direction ˆvO =
1
√
3 −i +j+k, the time to reach
C is given by
tC =
−1
√
3 −i +j+k·120i
60
= 2
√
3
= 2
3
√
3
tC = 1155
h
The shortest distance d  is given by
d  = q +tCsOˆvO  =
120i + 2
3
√
3×60× 1
√
3
−i +j+k

d  = 120i −40i +40j+40k  = 80i +40j+40k 
d  = 402i +j+k  = 40
√
6  98
km
11.3 Close encounters of the second kind
The next problem is to consider the scenario when both you and the object are moving! Well,
the secret is to translate the problem from one of absolute values to that of relative values. For
example, if you are defined as follows:
location: y,
velocity: sY ˆvY,

244
Vector analysis for computer graphics
and the object is defined as
location: q,
velocity: sOˆvO,
the object’s relationship with you is given by
location: q −y,
velocity: sRˆvR = sOˆvO −sY ˆvY.
To keep the geometry simple, it is best if you are located at the origin, as shown in Fig. 11.4.
X
Y
Z
You
ˆvR
C
d
q − y
Figure 11.4.
With reference to Eq. (11.7), the time taken to reach C is given by
tC = −ˆvR ·q −y
sR
(11.9)
With reference to Eq. (11.8), the distance d  is given by
d  = q +tCsRˆvR 
(11.10)
Let’s test Eqs. (11.9) and (11.10) with an example.
Say you are defined as
location: y = 10i +10j km,
velocity: sY ˆvY = 4i

kmh−1
,
and the object is defined as
location q = 25i +10j km,
velocity sOˆvO = 3j

mh−1
.
This scenario is shown in Fig. 11.5.

Motion
245
X
Y
Z
You ˆvY
Q
ˆvO
q
y
10
10
25
sY
sO
Figure 11.5.
The relative values are
relative location of object:
q −y = 15i km
relative velocity of object:
sOˆvO −sY ˆvY = −4i +3j

kmh−1

Therefore, from the relative velocity, the relative speed is
sOˆvO −sY ˆvY  =

−42 +32 = 5

kmh−1
and the relative direction is
ˆvO −ˆvY = −4
5i + 3
5j km
Therefore,
tC =
−

−4
5i + 3
5j

·15i
5
= 12
5 = 24

kmh−1

Substituting 24h in Eq. (11.10) gives
d  =
15i + 12
5 ×5×

−4
5i + 3
5j

d  =
15i −48
5 i + 36
5 j

d  =

27
5 i + 36
5 j
 = 9 km
Thus, the close encounter occurs 24 hours after the reference time, and the object is 9km from
you.

Appendix A
A.1 Definitions and laws of vector algebra
These are the definitions and laws associated with vectors.
If u v, and w are vectors, and a and b are scalars, then
By definition, two vectors u and v are equal if they have the same magnitude and direction.
By definition, if two vectors u and v have the same magnitude but opposite directions, then
u = −v or v = −u.
A.2 Common laws of vector algebra
Commutative law of addition: u +v = v +u
Associative law of addition: u +v +w = u +v+w
Commutative law of multiplication: au = ua
Associative law of multiplication: abu = abu
Distributive law: a+bu = au +bu
Distributive law: au +v = au +av
By definition, the scalar product u ·v is u ·v = uv cos.
 is the angle between u and v.
By definition, the vector product u ×v is
u ×v = w
where w  = u v sin.
 is the angle between u and v.
Note: The vector product works only in 3D.
247

Appendix B
B.1 Vector triple product
In this appendix we will prove that a × b×c = a ·cb −a ·bc and a ×b × c =
a ·cb−b·ca, which are both known as vector triple products.
In Section 2.10.1 we proved that a×b×c resides in the plane containing b and c. Therefore,
a ×b×c must be linearly related to b and c. Thus,
a ×b×c = b+c
(B.1)
where  and  (delta) are scalars. Now we have to expand a × b×c and force the algebra
into the form of the RHS of Eq. (B.1). At the same time, we must look out for any hidden dot
products. Let’s begin the expansion: given a = xai +yaj+zak, we have
b = xbi +ybj+zbk
c = xci +ycj+zck
Then
b×c =

i
j
k
xb
yb
zb
xc
yc
zc

=

yb
zb
yc
zc
i +

zb
xb
zc
xc
j+

xb
yb
xc
yc
k
and
b×c = ybzc −yczbi +zbxc −zcxbj+xbyc −xcybk
Therefore,
a ×b×c =

i
j
k
xa
ya
za
ybzc −yczb
zbxc −zcxb
xbyc −xcyb


249

250
Vector analysis for computer graphics
Expanding gives
a ×b×c =ya xbyc −xcyb−za zbxc −zcxbi
+za ybzc −yczb−xa xbyc −xcybj
+xa zbxc −zcxb−ya ybzc −yczbk
Expanding again gives
a ×b×c =xbyayc −xcyayb −xczazb +xbzazci
+ybzazc −yczazb −xaxbyc +xaxcybj
+xaxczb −xaxbzc −yaybzc +yayczbk
Now we split the above equation as closely as possible into the form b+c by isolating the b
and c components:
a ×b×c = xb yayc +zazci −xc yayb +zazbi
+yb zazc +xaxcj−yc xaxb +zazbj
+zb xaxc +yayck −zc xaxb +yaybk
(B.2)
We are almost there, but something’s still missing. Looking carefully at the expressions
yayc +zazc, zazc +xaxc, and xaxc +yayc in Eq. (B.2), we notice that they are similar to the
dot-product expansion, except that each is missing a term. These missing terms are xaxc, yayc,
and zazc respectively, and can be introduced by adding
xb xaxci +yb yaycj+zb zazck
to the RHS of Eq. (B.2). Fortunately, xb xaxci + yb yaycj + zb zazck has to be subtracted
from the RHS of Eq. (B.2) to convert the remaining terms into dot-product form. Thus, we get
a ×b×c = xb xaxc +yayc +zazci +yb xaxc +yayc +zazcj+zb xaxc +yayc +zazbk
−xc xaxb +yayb +zazbi −yc xaxb +yayc +zazbj−zc xaxb +yayb +zazbk
which contains the following dot products:
a ×b×c = xb a ·ci +yb a ·cj+zb a ·ck
−xc a ·bi −yc a ·bj−zc a ·bk
(B.3)
Simplifying Eq. (B.3) gives
a ×b×c = a ·c xbi +ybj+zbk−a ·bxci +ycj+zck
which can be written as
a ×b×c = a ·cb−a ·bc
(B.4)

Appendix B
251
Now let’s see what a ×b×c expands to. With reference to the above argument, we can state
that
a ×b×c =

i
j
k
yazb −ybza
zaxb −zbxa
xayb −xbya
xc
yc
zc


Expanding gives
a ×b×c =zc zaxb −zbxa−yc xayb −xbyai
+xc xayb −xbya−zc yazb −ybzaj
+yc yazb −ybza−xc zaxb −zbxak
Expanding again gives
a ×b×c =xbzazc −xazbzc −xaybyc +xbyayci
+xaxcyb −xbxcyayazbzc +ybzazcj
+yayczb −ybycza −xbxcza +xaxczbk
Again we split the above expansion as closely as possible into the form a +b by isolating the
a and b components:
a ×b×c = xb yayc +zazci −xa ybyc +zbzci
+yb xaxc +zazcj−ya xbxc +zbzcj
+zb xaxc +yayck −za xbxc +ybyck
(B.5)
Once more, something’s missing. Looking carefully at the expressions yayc +zazc, xaxc +zazc,
and xaxc +yayc in Eq. (B.5), we notice that they are similar to the dot-product expansion,
except each has a missing term. These missing terms are xaxc, yayc, and zazc, respectively, and
can be introduced by adding
xb xaxci +yb yaycj+zb zazck
to the RHS of Eq. (B.5). Fortunately, xb xaxci + yb yaycj + zb zazck has to be subtracted
from the RHS of Eq. (B.5) to convert the remaining terms into dot-product form. Thus, we get
a ×b×c = xb xaxc +yayc +zazci +yb xaxc +yayc +zazbj+zb xaxc +yayc +zazbk
−xa xbxc +ybyc +zbzci −ya xbxc +ybyc +zbzcj−za xbxc +ybyc +zbzck
which contains dot products:
a ×b×c = xb a ·ci +yb a ·cj+zb a ·ck
−xa b·ci −ya b·cj−za b·ck
(B.6)

252
Vector analysis for computer graphics
Simplifying Eq. (B.6) gives
a ×b×c = a ·cxbi +ybj+zbk−b·cxai −yaj−zak
which can be written as
a ×b×c = a ·cb−b·ca
(B.7)

References
Akenine-Möller T. et al. Real-Time Rendering, 2nd edition, A. K. Peters, London (2002).
Blinn J. Models of light reflection for computer synthesized pictures. ACM Computer Graphics
(Proc. SIGGRAPH ’77), pp. 192–198 (1977).
Blinn J. Simulation of wrinkled surfaces. Computer Graphics (Proc. SIGGRAPH ’78), pp. 286–292.
Also in Tutorial. Computer Graphics: Image Synthesis, pp. 307–313 (1978).
Conway J. et al. On Quaternions and Octonions, A. K. Peters, London (2003).
Crowe M. A History of Vector Analysis, Dover Publications, Inc. (1967).
Glassner A. An Introduction to Ray Tracing, Academic Press, New York (1989).
Gouraud H. Continuous shading of curved surfaces. IEEE Trans. on Computers, 20(6), 623–628
(1971).
Kilgard M. A practical and robust bump-mapping technique for today’s GPUs. GDC 2000:
Advanced OpenGL Game Development (2000).
Lewis P. et al. Vector Analysis for Engineers and Scientists, Addison-Wesley, Wokingham, UK
(1989).
Phong B. Illumination for computer generated pictures. Comm. ACM, 18(6), 311–317 (1975).
Shoemake K. Animating rotation sequences with quaternion curves, SIGGRAPH 85, Proc.
Computer Graphics, 19(3), 245–254 (1985).
Vince J. Mathematics for Computer Graphics, 2nd edition. Springer, New York (2006).
253

Further Reading
N. Dodgson, Ray-tracing primitives, http://www.cl.cam.ac.uk/Teaching/2000/AGraphHCI/SMEG/
node2.html.
J. Kuipers, Quaternions and Rotation Sequences, Princeton University Press, Princeton, NJ (2002).
M. Spiegel,Theory and Problems of Vector Analysis, McGraw-Hill, New York (1959).
J. Vince, Geometry for Computer Graphics, Springer, New York (2005).
255

Index
addition
quaternions, 188
vectors, 4
algebra
complex numbers, 183
vectors, 247
angle/ angles
between a line and a plane, 114
between planes, 113
between vectors, 25
associative law
vectors, 247
axial system
change of, 54
back-facing polygon, 42
barycentric coordinates, 160
Bézier quadratic patch, 207
bump mapping, 231
column vector, 12
commutative law
vectors, 34
complex numbers, 182
as rotators, 187
conjugate, 184
graphical interpretation, 185
magnitude, 184
cosine/ cosines, 186
Cramer’s rule, 162, 176
cross product, vectors, 27
direction cosines, 52
distributive law
vectors, 34
dot product, 22
ellipse, 138
ellipsoid, 149
equation/ equations
circle, 133
ellipse, 138
ellipsoid, 149
exponential, 186
gimbal lock, 179
Hamilton, 28, 188
inside
a polygon, 69
a triangle, 166
a volume, 112
interpolation, 48
linear, 48
quaternions, 49
spherical, 49
vectors, 48
intersection/ intersections, 129
line and a circle, 133
line and a cone, 158
line and a cylinder, 152
line and an ellipse, 138
257

258
Index
line and an ellipsoid, 149
line and a plane, 144
line and a sphere, 146
line and a triangle, 160
line segments, 97
lines, 130, 142
planes, 175
light sources, 225
lighting calculations, 225
line/ lines
equation Cartesian form, 65
equation general form, 68
equation parametric form, 61
equidistant from two points, 93
intersecting, 94, 130
intersecting a circle, 133
intersecting a cone, 158
intersecting a cylinder, 152
intersecting a plane, 144
intersecting a sphere, 146
intersecting a triangle, 160
intersecting an ellipse, 138
intersecting an ellipsoid, 149
perpendicular to a vector, 74
reflecting of a line, 123
reflecting of a plane, 126
segment, 94
segments intersecting, 97
skew, 140
linear interpolation, 48
local reflection models, 227
magnitude, vector, 13
Möbius, 160
normal vector, 33
offset map, 234
perp, 44
perpendicular vectors, 44
perspective projection, 213
plane, 101
between two points, 120
perpendicular to a line, 106
through two points, 108
plane equations
Cartesian, 101
from three points, 104
parametric form, 103
plane/ planes, 175
angle between, 113
intersecting, 175
touching a sphere, 171
point/ points
reflected in a line, 86
point on a line
nearest to a point, 81
position vector, 19
product/ products
scalar, 22
vector, 27
projection, 213
fish-eye, 223
perspective, 213
quadratic Bézier patch, 207
quaternions, 188
addition, 188
as rotators, 190
complex conjugate, 192
definition, 189
Hamilton’s rules, 188
interpolation, 49
inverse, 195
magnitude, 193
matrix, 197
multiplication, 189
norm, 193
rotating a vector, 195
reflection/ reflections, 86, 123
line off a line, 123
line off a plane, 126
point in a plane, 118
rendering, 225
roll, 221
rotating a vector, 179
scalar product, 22
scalars, 1
shading, 230
Gouraud, 230
Phong, 231
shortest distance, 140

Index
259
sine, 186
rule, 49
space
partitioning 2D, 69
partitioning 3D, 110
sphere intersecting a plane, 167
sphere touching a plane, 171
sphere touching a triangle, 172
spherical interpolation, 49
straight lines, 61
subtraction, vectors, 4
surface normals, 33
touching, 172
transformations
change of axes, 55
perspective, 213
pitch, 221
roll, 221
yaw, 221
triple products, 36, 41, 249
unit vector, 17
vector/ vectors, 11
addition, 4
algebra, 14, 34
Cartesian, 11
column, 12
derivative, 201
differentiation, 201
direction, 3
dot product, 22
interpolating, 48
length, 13
magnitude, 13
non-collinear, 7
normal, 204
notation, 2
perpendicular, 44
position, 19
product, 22
rectangular, 18
representation, 11
rotating about an axis, 179
scalar product, 22
scalar triple product, 36
scaling, 6
spherical interpolation, 49
subtraction, 4
unit, 17
vector product, 27
vector triple product, 36, 41, 249
volume
parallelpiped, 37
tetrahedron, 42

