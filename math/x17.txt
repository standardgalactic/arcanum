, E3
0
are lower triangular (see Theorem 8.5).
In general, we let
Ek
0 = Pn−1 · · · Pk+1EkPk
−
+1
1
· · · Pn
−1
−1
,
and we have
En
0−1
· · · E1
0Pn−1 · · · P1A = U,
where each Ej
0
is a lower triangular matrix (see Theorem 8.5).
It is remarkable that if pivoting steps are necessary during Gaussian elimination, a very
simple modification of the algorithm for finding an LU-factorization yields the matrices L, U,
and P, such that P A = LU. To describe this new method, since the diagonal entries of L
are 1s, it is convenient to write
L = I + Λ.
Then in assembling the matrix Λ while performing Gaussian elimination with pivoting, we
make the same transposition on the rows of Λ (really Λk−1) that we make on the rows of A
(really Ak) during a pivoting step involving row k and row i. We also assemble P by starting
with the identity matrix and applying to P the same row transpositions that we apply to A
and Λ. Here is an example illustrating this method.
Example 8.3. Given
A = A1 =


1 1 1 0
1 1
1 −1 0 1
−1 0
1 −1 0 −1

 ,
we have the following sequence of steps: We initialize Λ0 = 0 and P0 = I4. The first pivot is
π1 = 1 in row 1, and we subtract row 1 from rows 2, 3, and 4. We get
A2 =


1 1 1 0
0 0
0 −2 −
−
1 1
2 0
0 −2 −1 −1


Λ1 =


0 0 0 0
1 0 0 0
1 0 0 0
1 0 0 0


P1 =


1 0 0 0
0 1 0 0
0 0 1 0
0 0 0 1

 .
The next pivot is π2 = −2 in row 3, so we permute row 2 and 3; we also apply this permutation
to Λ and P:
A
03 =


1 1 1 0
0 0
0 −2
−
−
2 0
1 1
0 −2 −1 −1


Λ
02 =


0 0 0 0
1 0 0 0
1 0 0 0
1 0 0 0


P2 =


1 0 0 0
0 0 1 0
0 1 0 0
0 0 0 1

 .
Next we subtract row 2 from row 4 (and add 0 times row 2 to row 3). We get
A3 =


1 1 1 0
0 0
0 −2
−
−
2 0
1 1
0 0 0 −2


Λ2 =


0 0 0 0
1 0 0 0
1 0 0 0
1 1 0 0


P2 =


1 0 0 0
0 0 1 0
0 1 0 0
0 0 0 1

 .
8.5. P A = LU FACTORIZATION 265
The next pivot is π3 = −2 in row 3, and since the fourth entry in column 3 is already a zero,
we add 0 times row 3 to row 4. We get
A4 =


1 1 1 0
0 0
0 −2
−
−
2 0
1 1
0 0 0 −2


Λ3 =


0 0 0 0
1 0 0 0
1 0 0 0
1 1 0 0


P3 =


1 0 0 0
0 0 1 0
0 1 0 0
0 0 0 1

 .
The procedure is finished, and we have
L = Λ3 + I =


1 0 0 0
1 1 0 0
1 0 1 0
1 1 0 1


U = A4 =


1 1 1 0
0
0 0
0 0 0
−2 −
−
1 1
2 0
−2


P = P3 =


1 0 0 0
0 0 1 0
0 1 0 0
0 0 0 1

 .
It is easy to check that indeed
LU =


1 0 0 0
1 1 0 0
1 0 1 0
1 1 0 1




1 1 1 0
0
0 0
0 0 0
−2 −
−
1 1
2 0
−2

 =


1 1 1 0
1
1 1
1
−
−
1 0 1
1 0
−1 0
−1


and
P A =


1 0 0 0
0 0 1 0
0 1 0 0
0 0 0 1




1 1 1 0
1 1
1
1
−
−
1 0 1
1 0
−1 0
−1

 =


1 1 1 0
1
1 1
1
−
−
1 0 1
1 0
−1 0
−1

 .
Using the idea in the remark before the above example, we can prove the theorem below
which shows the correctness of the algorithm for computing P, L and U using a simple
adaptation of Gaussian elimination.
We are not aware of a detailed proof of Theorem 8.5 in the standard texts. Although
Golub and Van Loan [80] state a version of this theorem as their Theorem 3.1.4, they say
that “The proof is a messy subscripting argument.” Meyer [125] also provides a sketch of
proof (see the end of Section 3.10). In view of this situation, we offer a complete proof.
It does involve a lot of subscripts and superscripts, but in our opinion, it contains some
techniques that go far beyond symbol manipulation.
Theorem 8.5. For every invertible n × n-matrix A, the following hold:
(1) There is some permutation matrix P, some upper-triangular matrix U, and some unit
lower-triangular matrix L, so that P A = LU (recall, Li i = 1 for i = 1, . . . , n). Fur￾thermore, if P = I, then L and U are unique and they are produced as a result of
Gaussian elimination without pivoting.
266 CHAPTER 8. GAUSSIAN ELIMINATION, LU, CHOLESKY, ECHELON FORM
(2) If En−1 . . . E1A = U is the result of Gaussian elimination without pivoting, write as
usual Ak = Ek−1 . . . E1A (with Ak = (a
(
ij
k)
)), and let ` ik = a
(
ik
k)
/a(
kk
k)
, with 1 ≤ k ≤ n − 1
and k + 1 ≤ i ≤ n. Then
L =


1 0 0 · · · 0
`
21 1 0 · · · 0
`
31 ` 32 1 · · · 0
.
.
.
.
.
.
.
.
.
.
.
. 0
`
n1 ` n2 ` n3 · · · 1


,
where the kth column of L is the kth column of Ek
−1
, for k = 1, . . . , n − 1.
(3) If En−1Pn−1 · · · E1P1A = U is the result of Gaussian elimination with some pivoting,
write Ak = Ek−1Pk−1 · · · E1P1A, and define Ej
k
, with 1 ≤ j ≤ n − 1 and j ≤ k ≤ n − 1,
such that, for j = 1, . . . , n − 2,
Ej
j = Ej
Ej
k = PkEj
k−1Pk, for k = j + 1, . . . , n − 1,
and
En
n−1
−1 = En−1.
Then,
Ej
k = PkPk−1 · · · Pj+1EjPj+1 · · · Pk−1Pk
U = En
n−1
−1
· · · E1
n−1Pn−1 · · · P1A,
and if we set
P = Pn−1 · · · P1
L = (E1
n−1
)
−1
· · ·(En
n
−
−
1
1
)
−1
,
then
P A = LU. (†1)
Furthermore,
(Ej
k
)
−1 = I + E
k
j
, 1 ≤ j ≤ n − 1, j ≤ k ≤ n − 1,
where E
k
j
is a lower triangular matrix of the form
E
k
j =


0
.
.
.
· · ·
.
0 0 · · · 0
.
.
.
.
.
.
.
.
.
.
.
.
.
.
0 · · · 0 0 · · · 0
0 · · · `
(k)
j+1j
0 · · · 0
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
0 · · · `
(k)
nj 0 · · · 0


,
8.5. P A = LU FACTORIZATION 267
we have
Ej
k = I − Ek
j
,
and
E
k
j = PkE
k−1
j
, 1 ≤ j ≤ n − 2, j + 1 ≤ k ≤ n − 1,
where Pk = I or else Pk = P(k, i) for some i such that k + 1 ≤ i ≤ n; if Pk 6 = I, this
means that (Ej
k
)
−1
is obtained from (Ej
k−1
)
−1
by permuting the entries on rows i and
k in column j. Because the matrices (Ej
k
)
−1 are all lower triangular, the matrix L is
also lower triangular.
In order to find L, define lower triangular n × n matrices Λk of the form
Λk =


0 0 0 0 0 · · · · · · 0
λ
(k)
21 0 0 0 0
.
.
.
.
.
. 0
λ
(
31
k)
λ
(
32
k) .
.
. 0 0
.
.
.
.
.
. 0
.
.
.
.
.
.
.
.
. 0 0
.
.
.
.
.
.
.
.
.
λ
(k)
k+11 λ
(k)
k+12 · · · λ
(k)
k+1k
0 · · · · · · 0
λ
(k)
k+21 λ
(
k
k
+22
)
· · · λ
(
k
k
+2
)
k
0
.
.
. · · · 0
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
λ
(k)
n1 λ
(k)
n2
· · · λ
(k)
nk 0 · · · · · · 0


to assemble the columns of L iteratively as follows: let
(−`
(
k
k
+1
)
k
, . . . , −`
(
nk
k)
)
be the last n−k elements of the kth column of Ek, and define Λk inductively by setting
Λ1 =


0 0 · · · 0
`
(1)
21
.
0 · · · 0
.
.
.
.
.
.
.
.
.
.
.
`
(1)
n1
0 · · · 0


,
then for k = 2, . . . , n − 1, define
Λ
0k = PkΛk−1, (†2)
268 CHAPTER 8. GAUSSIAN ELIMINATION, LU, CHOLESKY, ECHELON FORM
and
Λk = (I + Λ0k
)Ek
−1 − I =


0 0 0 0 0 · · · · · · 0
λ
0
(k−1)
21 0 0 0 0
.
.
.
.
.
. 0
λ
0
(k−1)
31 λ
0
(k−1)
32
.
.
. 0 0
.
.
.
.
.
. 0
.
.
.
.
.
.
.
.
. 0 0
.
.
.
.
.
.
.
.
.
λ
0
(k−1)
k1 λ
0
(k−1)
k2
· · · λ
0
(k−1)
k (k−1) 0 · · · · · · 0
λ
0
(k−1)
k+11 λ
0
(k−1)
k+12 · · · λ
0
(k−1)
k+1 (k−1) `
(
k
k
+1
)
k
.
.
. · · · 0
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
λ
0
(k−1)
n1 λ
0
(k−1)
n2
· · · λ
0
(k−1)
n k−1
`
(k)
nk · · · · · · 0


,
with Pk = I or Pk = P(k, i) for some i > k. This means that in assembling L, row k
and row i of Λk−1 need to be permuted when a pivoting step permuting row k and row
i of Ak is required. Then
I + Λk = (E1
k
)
−1
· · ·(Ek
k
)
−1
Λk = E
k
1 + · · · + E
k
k
,
for k = 1, . . . , n − 1, and therefore
L = I + Λn−1.
The proof of Theorem 8.5, which is very technical, is given in Section 8.6.
We emphasize again that Part (3) of Theorem 8.5 shows the remarkable fact that in
assembling the matrix L while performing Gaussian elimination with pivoting, the only
change to the algorithm is to make the same transposition on the rows of Λk−1 that we
make on the rows of A (really Ak) during a pivoting step involving row k and row i. We
can also assemble P by starting with the identity matrix and applying to P the same row
transpositions that we apply to A and Λ. Here is an example illustrating this method.
Example 8.4. Consider the matrix
A =


1 2 −3 4
4 8 12
2 3 2 1
−8
−3 −1 1 −4

 .
We set P0 = I4, and we can also set Λ0 = 0. The first step is to permute row 1 and row 2,
using the pivot 4. We also apply this permutation to P0:
A
01 =


4 8 12 −8
1 2
2 3 2 1
−3 4
−3 −1 1 −4


P1 =


0 1 0 0
1 0 0 0
0 0 1 0
0 0 0 1

 .
8.5. P A = LU FACTORIZATION 269
Next we subtract 1/4 times row 1 from row 2, 1/2 times row 1 from row 3, and add 3/4
times row 1 to row 4, and start assembling Λ:
A2 =


4 8 12 −8
0 0
0 −1
−
−
6 6
4 5
0 5 10 −10


Λ1 =


−
1
1
3
0 0 0 0
/
/
/
4 0 0 0
2 0 0 0
4 0 0 0


P1 =


0 1 0 0
1 0 0 0
0 0 1 0
0 0 0 1

 .
Next we permute row 2 and row 4, using the pivot 5. We also apply this permutation to Λ
and P:
A
03 =


4 8 12 −8
0 5 10
0 −1 −4 5
−10
0 0 −6 6


Λ
02 =


−
1
1
3
/
/
0 0 0 0
/
2 0 0 0
4 0 0 0
4 0 0 0


P2 =


0 1 0 0
0 0 0 1
0 0 1 0
1 0 0 0

 .
Next we add 1/5 times row 2 to row 3, and update Λ02
:
A3 =


4 8 12 −8
0 5 10
0 0 −2 3
−10
0 0 −6 6


Λ2 =


−
1
1
3
0 0 0 0
/
/
/
2
4 0 0 0
4 0 0 0
−1/5 0 0


P2 =


0 1 0 0
0 0 0 1
0 0 1 0
1 0 0 0

 .
Next we permute row 3 and row 4, using the pivot −6. We also apply this permutation to
Λ and P:
A
04 =


4 8 12 −8
0 5 10
0 0 −6 6
−10
0 0 −2 3


Λ
03 =


−
1
1
3
0 0 0 0
/
/
/
4 0 0 0
2
4 0 0 0
−1/5 0 0


P3 =


0 1 0 0
0 0 0 1
1 0 0 0
0 0 1 0

 .
Finally we subtract 1/3 times row 3 from row 4, and update Λ03
:
A4 =


4 8 12 −8
0 5 10
0 0 −6 6
−10
0 0 0 1


Λ3 =


−
1
1
3
/
/
0 0 0 0
/
4 0 0 0
2
4 0 0 0
−1/5 1/3 0


P3 =


0 1 0 0
0 0 0 1
