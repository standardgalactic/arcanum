at node i, which is given by πi = P
j Mij/2q.
Assigning clusters to nodes leads to a coarse-grained sequence y = (y1, y2, . . . ), where yt is the
cluster containing node xt. The number of clusters n can be used to deﬁne a scale of the network’s
description S = 1 −n−1
p . For example, when n = p, the network is described at a ﬁne-grained scale
S = 1/p; by contrast, when n = 1, the network is described at the largest possible scale S = 1.
In general, the distorted sequence y is non-Markovian. However, we can still use Eq. 4 to ﬁnd
an upper-bound on its information rate. At every scale of description, it is possible to identify a
clustering of nodes that minimizes this upper bound. After computing these optimal clusterings
across all scales, we arrive at a rate-distortion curve R(S), which represents the minimal upper
bound on the information rate as a function of the scale S. The compressibility C of the network
is then given as the average reduction in R(S) across all scales [35],
C = H(x) −1
p
X
S
R(S).
(5)
Visually, this quantity represents the total area above the rate-distortion curve and below the
entropy of the original random walk H(x) (Fig. 5B). For a graph ﬁltration such as in Eq. 1, we
abuse indexing notation and deﬁne the compressibility curve as the sequence {C(p)}N
p=0, where p
denotes the number of nodes in subgraph Gp.
5.4
Computing mechanical network features
Consider a set of nodes V = {1, · · · , N} embedded in d dimensions. Each node i ∈V is located at
a particular coordinate in space xi ∈Rd. On its own, this system possesses dN degrees of freedom,
as each node is able to move independently in space. If we connect these nodes with edges in the
set E ⊆V × V, then each edge eij ∈E between node i and node j removes one degree of freedom
20

along the direction of edge extension. Each edge generates a constraint that keeps the distance
between the nodes constant, such that
(xi −xj)⊤(xi −xj) = constant.
To linear order, this constraint can be modiﬁed by taking the total derivative of both sides and
dividing by 2 to yield
(xi −xj)⊤(dxi −dxj) = 0
(6)
where d is the diﬀerential operator. Intuitively, Eq. 6 is simply a dot product between the vector
