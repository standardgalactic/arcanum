This is Audible.
Opening Credits
C Sharp
The Stress-Free Way to Learning C Inside and Out
Guide for Beginners
Basics
Written by IT Academy
Narrated by Mike Hennessy
Chapter 1
What is C Sharp?
C Sharp is a kind of programming language that covers component-oriented and object-oriented
programming, together with generic, functional, declarative, and imperative methods, as well
as strong typing.
Developed during Microsoft's .NET initiative, the intention was to create a programming
language that would be a general-purpose one.
A team of IT experts and language makers were then tasked to create this new programming
language, which was originally called COOL.
Well, the name had to be changed because of trademark issues, and ASP.NET and Class Library's
runtime were then transported as C Sharp.
The name came about because of the sharp note in musical notation.
This means that everything has to be incremented by one, just like what happens with C++.
Since the sharp sign is not really available in keywords, the number sign, also known as
hashtag, is primarily used to represent the said language.
It only differs when it comes to box art and other forms of advertising.
It has been used for Microsoft's Rotor project as a form of implementing CLR runtime.
It's also used for the .gnu project as a subset of other Microsoft proprietary.
Goals of C Sharp
C Sharp has been designed with the following objectives in mind.
One, to create a language that's portable for programmers so they could create better source
codes.
This would also be easier if they're already familiar with C and C++.
Two, to create a language that would be perfect for creating components of software to make
them suitable for various environments.
Three, to create incredible software support.
This means that it should work for array bounds checking, strong type checking, garbage collection,
and even the use of uninitialized variables.
This, then, makes way for productivity and durability.
Two important aspects of software.
Four, to create a language that's economical and that has great processing power and memory.
Five, to create a language that provides internalization support.
Six, to create a language that would be suitable for embedded systems and hosted writing applications,
which are extremely useful for sophisticated operating systems.
C Sharp Syntax
In order to understand C Sharp, you have to get to know its syntax.
For this, you have to keep the following in mind.
One, you need to use curly brackets to create groups of statements.
This means that they could then be commonly grouped as functions or methods.
Methods could then be grouped into classes, and classes could be grouped into namespaces.
Two, semicolons could be used to denote ends of statements.
Three, square brackets should be used with arrays,
so that you could then get different and original values from each of them.
Four, the equal sign is used to assign variables.
When they're being compared, you have to use two equal signs.
Chapter 2
Features of C Sharp
Even though they're part of the same family, C Sharp is set apart from C, C++, and Java because of the following.
When it comes to typing, var, V-A-R, short for variable, should be used as an implicit declaration of the said variable.
The keyword new should then be used for new arrays as sign-of-collection initializer.
This makes it more type-safe than C++.
Boole, B-O-O-L
A strict Boolean data type is also used so that statements could take conditions.
If and while are also used if the true operator is being implemented.
C Sharp doesn't use the true or false integer approach so that exact Boole data could be used.
This could then prevent certain programming mistakes such as if open parenthesis A equals B close parenthesis from being made.
The completion of integers is enforced at the beginning of programming or during run time,
and there could be no implicit reactions between integers and Booleans,
and any conversions should be specifically marked as implicit or explicit,
and should make use of copy operators and constructors.
There is also explicit support for contravariance and covariance,
together with scope and enumeration,
without the usage of global functions and variables.
It also cannot shadow any kind of blocks.
Portability
C Sharp almost directly reflects the common language infrastructure, CLI,
with intrinsic types that are implemented in CLI values.
It also means that common run times should not be targeted,
and that the common intermediate language should be generated to get the right machine codes.
Methods and Functions
Again, virtual should be used in C Sharp.
This way, methods could be easily written by subclasses,
and extension methods could be used so that programmers could use static methods
for both the object and its derivatives.
Blinding run time method could be done with the help of the dynamic derivative.
The keyword delegate should then be used for strong type function pointers,
just like the sudo C++ signal in other publish-subscribe events.
Synchronized method calls could also be used like how it's done in Java.
This could happen with the attribute
square bracket method IMPL open parentheses method IMPL options dot synchronized
close parentheses close square bracket.
The word lock could be used as a symbol of mutually exclusive locks.
Meta Programming
GCC functionality could be copied based on platform and other preferences.
Memory Access
When it comes to memory access, the word unsafe could be used for blocks that determine memory
address pointers.
These could then help you find well-defined null values or live objects,
but you won't be able to obtain references to dead objects or random blocks of memory
because, more often than not, it's quite impossible to get dead object references.
Take note that you couldn't free-manage memory explicitly because garbage cannot be collected.
Common Type System
A unified type system is used in C Sharp.
It implies all subclasses of system dot object that could inherit the two-string open parentheses
close parentheses method.
This also works two ways.
First, there's the reference type.
This gives the notion of identity that's known as referential.
Even there's similar data in the two of them.
Comparisons such as default equality and inequality reflect this type.
For this, you could use system dot string, so you'd be able to copy instances that already exist.
I-comparable or I-clonable could also be used.
Meanwhile, there are value types, which stand on their own and cannot be dependent on each other.
These could be primitive types, such as 32-bit integers, INT, and floating point numbers, float.
You could use struct, S-T-R-U-C-T, for defined structures, and char, C-H-A-R, for bitcode units.
System dot data time could also be used.
For general purposes, though, you could use system dot value type.
Namespace
When it comes to namespace, there should either be C++ or Java namespace.
You could work the way you would with a package.
Polymorphism
Multiple inheritance is not supported in C-Sharp.
However, classes are allowed to provide any number of interferences,
mostly as architectural requirement of the program.
Each method could then be implemented through invocation.
Operator overloading should also be supported.
Functional programming
C-Sharp gives limited support for first-class functions, and they are all based on syntax.
Boxing and Unboxing
Boxing means that you have to convert value type objects that could help implicit changes in C-Sharp.
As for unboxing, this means you're letting reference values be converted into value types,
so that you can make use of typecast explicits that could be unboxed to nullified T's.
There are no check exceptions present in C-Sharp, all thanks to versionality and scalability.
Chapter 3
Inside the C-Sharp Program
So, what do you think goes on inside a C-Sharp program?
Basically, it consists of more than one file with zero or more namespaces.
For this, the following should be around.
1. Classes
2. Interfaces
3. Strucks
4. Delegates
5. Enumerations
This means that the program would look something like this.
Slash, slash
C-Sharp Program Skeleton
Semicolon
Space
Namespace
YourNamespace
Space
OpenCurlyBracket
Space
Class
YourClass
Space
OpenCurlyBracket
Space
CloseCurlyBracket
Space
Struct
YourStruct
Space
OpenCurlyBracket
Space
CloseCurlyBracket
Space
Interface
I
YourInterface
OpenCurlyBracket
Space
CloseCurlyBracket
Space
Delegate
I-N-T
YourDelegate
OpenParentheses
CloseParentheses
Semicolon
Space
Enum
YourEnum
Space
OpenCurlyBracket
Space
CloseCurlyBracket
Namespace
YourNestedNamespace
Space
OpenCurlyBracket
Space
Struct
YourStruct
Space
OpenCurlyBracket
Space
CloseCurlyBracket
Space
CloseCurlyBracket
Space
Class
YourMainClass
Space
CloseCurlyBracket
Space
StaticVoidMain
OpenParentheses
String
OpenSquareBracket
OpenSquareBracket
CloseSquareBracket
ARGS
A-R-G-S
CloseParentheses
Space
OpenCurlyBracket
Space
Slash
Slash
TheProgramStartsHere
Dot, dot, dot
Space
CloseCurlyBracket
Space
CloseCurlyBracket
Space
CloseCurlyBracket
Compilation and Execution of Command Line
You can compile and run from the command prompt itself by doing the following
1. Check the preceding procedure and get the code from there. Paste it on your new project and then save it as .txt text file. Rename it with hello.cs or the name of your program. Make sure that you never forget the .cs extension.
2. Now search for Developer Command Prompt if you're using Windows 8. Choose Developer Command Prompt for VS2012, period.
3. If you're using Windows 7, check the Start menu and then expand the Visual Studio Tools folder. Choose Developer Command Prompt for VS2012, period. Wait for the Developer Command Prompt window to appear.
4. Go to the folder that says hello.cs
5. Then type the following.
Hello.cs
space
CSS
space
hello
dot
cs
6. In the next command line, enter the following.
Hello
Trying it out.
Now in order to start the program, you have to do the following.
1. Open Visual Studio
2. Choose File on the menu, followed by New, and then Project.
Wait for New Project Dialog box to open up.
3. Now check Installed, followed by Templates.
Choose Visual C Sharp, followed by Console Application.
4. Choose a name for your project in the Name box.
Wait for the new project to appear in the Solution Explorer.
If you can't see the project open, make sure that you open program.cs.
6. Open View Code, and then try inputting what's written on the example below.
Slash Slash
Gordon Ramsay Shows in C Sharp
Space
Using System Semicolon
Space
Namespace
Gordon Ramsay Shows
Space
Open Curly Bracket
Space
Class Shows
Space
Open Curly Bracket
Space
Static Void
Static Void
Gordon Ramsay
Gordon Ramsay Shows
Open Parentheses
Close Parentheses
Space
Open Curly Bracket
Console
Dot
Right Line
Open Parentheses
Double Quote
Gordon Ramsay Shows
Double Quote
Close Parentheses
Semicolon
Space
Space
Slash Slash
Open Console Window in Debug Mode
Space
Gordon.Ramsey
Open Parentheses
Double Quote
Press Any Key to Exit
Period
Double Quote
Close Parentheses
Semicolon
Space
Console
Dot
Read
Key
Open Parentheses
Close Parentheses
Semicolon
Space
Close Curly Bracket
Space
Close Curly Bracket
Space
Close Curly Bracket
Press F5 and see if the program would work.
Main Method
Take note that each C-Sharp application should control a main method.
Create objects and then start executing methods.
This means that a static C-Sharp reference is your main method because it lives inside a struct.
You can do it this way.
You can do it this way.
Static
Hello
Main
Open Parentheses
Close Parentheses
Space
Open Curly Bracket
Space
Slash
Slash
Dot Dot Dot
Space
Close Curly Bracket
For arguments to happen, you have to follow the example below.
Or you could also do it this way.
Take note that ARGS denotes string arrays where arguments are happening.
It contains command line arguments in itself and does not contain the executable .exe file.
You also have the read key variable in the end of each argument so that the window would
be prevented from being closed when the program is in debug mode.
Chapter 4 Classes and Structs
Next, you also have to learn about Classes and Structs, which are both important parts
of the program.
These are both important elements of the .NET initiative that show behaviors and structure
of data.
These make every element in the program logical and coherent.
See, Classes and Structs work like blueprints that provide the foundation to objects that
open on runtime.
For example, if your class is Netflix shows, the type would be either Netflix or shows.
Classes
Classes are reference types.
This is because variables are created when you make the object of the class.
This, then, means that there'd be reference memory for your classes.
When you make changes to one class, everything under that class would soon follow and reflect
the changes that have been made.
Structs
Meanwhile, Structs are value types.
When you have Structs, actual data is created for each Struct, which means that one should
not be reflecting the other.
Here's a good example.
Public class Netflix shows
Space
Open curly bracket
Space
Slash slash private field
Space
Private January 2016 date
Semicolon
Space
Slash slash
Public field
Space
Public string day
Semicolon
Slash slash
Netflix shows in January 2016
Space
Public Netflix shows in January 2016
Space
Open curly bracket
Space
Get
Space
Open curly bracket
Space
February 2016
Semicolon
Space
Close curly bracket
Space
Set
Space
Open curly bracket
Space
Slash
Slash
Set reasonable boundaries for probable birth dates
period
If
Open parenthesis
Value
Dot
Year
Greater than
Symbol
January 2016
Ampersand
Ampersand
Ampersand
Value
Dot
Year
Less than
Symbol
Equals
Symbol
Parentheses
Space
Space
Open curly bracket
Space
Date
Equals
Value
Semicolon
Space
Close curly bracket
Space
Else
Space
Throw Netflix shows in January to February 2016
Open parenthesis
Open parenthesis
Close parenthesis
Semicolon
Space
Close curly bracket
Space
Close curly bracket
Space
Close curly bracket
Space
Space
Slash
Slash
Public method
Public method also exposes date fields safely
Period
Space
Slash
Slash
Slash
Example
Call
Colon
January
Dot
S
2016
Open parenthesis
Double quote
2016
Comma
One
Double quote
Close parenthesis
Semicolon
Space
Public
Void
Set
Date
Open parenthesis
String
Date
String
Close parenthesis
Space
Open curly bracket
Date
Time
Dt
Equals
Sign
Convert
Dot
To
Date
Time
Open parenthesis
Date
String
Close parenthesis
Semicolon
Space
Slash
Slash
If
Open parenthesis
Dt dot
Year
Greater
Than
Symbol
January
2016
Ampersand
Dt
Dot
Year
Less than
Symbol
Equals
Symbol
February
2016
Close parenthesis
Space
Open curly bracket
Space
Date
Equals
Sign
Dt
Semicolon
Space
Close curly bracket
Space
Else
Space
Throw Netflix Shows
In January
To
February
2016
Open parenthesis
Close parenthesis
Semicolon
Space
Close curly bracket
Space
Space
Public
Timespan
Get
Time
Open parenthesis
String
Date
String
Close parenthesis
Space
Open curly bracket
Space
Date
Time
Dt
Equals
Sign
Convert
Dot
To
Date
Time
Open parenthesis
Date
String
If
If
Open parenthesis
Dt
Exclamation point
Equal sign
Null
Ampersand
Ampersand
Dt dot
Ticks
Less than
Symbol
Date dot
Ticks
Close parenthesis
Space
Close curly bracket
Space
Return
Date
Dash
Dt
Semicolon
Space
Close curly bracket
Space
Else
Space
Throw Netflix Shows
In January
To
February
2016
Open parenthesis
Close parenthesis
Semicolon
Space
Close curly bracket
Space
Close curly bracket
Other Important Terms
There are other essential terms that are related to classes of
and structs and you'll find them all below.
Encapsulation
The first principle or pillar of object-oriented programming is called encapsulation.
This specifies how each of the class and struct members are accessible and how they are intended to be used from the outside.
You can make use of assembly to hide malicious exploits or coding errors.
Fields
Fields
Fields are variable types that have been declared in a class or structs that are basically members of their containing type.
For example, there may be two static or instant fields for each type and you can modify the values of each type too.
You should be able to use fields for variables that have been accessible through portability.
These should also be provided through indexers, properties, and methods.
You should then be able to declare the fields through access levels in each block next to the name of the field.
For example,
Public Class Netflix Shows
Public Netflix Shows in January 2016
Public Netflix Shows
Public Netflix Shows in January 2016
Get
10
Ones
It
I
Still
filed
Jack
October
It
It
The
es
ampersand, ampersand, value.year, less than symbol, equals symbol, February.2016, close parentheses, space, open curly bracket, space, date, equal sign, value, semicolon, space, close curly bracket, space, else, space,
throw Netflix shows in January to February 2016, open parentheses, close parentheses, semicolon, space, close curly bracket, space, space, space, slash, slash, public method also exposes date field safely, period, space, slash, slash,
example call, colon, January, dot, S, 2016, open parentheses, double quote, 2016, comma, one, double quote, close parentheses, semicolon, space, public void, set date, open parentheses, string,
date, close parentheses, space, open curly bracket, space, date, time, dt, equals sign, convert dot, to date, time, open parentheses, date, string, close parentheses, semicolon, space, slash, slash, space,
if, open parentheses, if, open parentheses, dt, dot, year, greater than symbol, January, 2016, ampersand, ampersand, dt, dot, year, less than symbol, equals, February, 2016, close parentheses, space, open curly bracket, space,
space, space, space, else, space, space, throw Netflix shows in January to February, 2016, open parentheses, close parentheses, semicolon, space, open curly bracket, space, public time span, get time span, open parentheses, string,
column, date, dot, to date, dot, dot, to date, dot, dot, dot, dot, dot, dot, dot, dot, dot, dot, dot, dot dot, dot dot, dot, dot, dot, dot dot, dot dot, dot, dot dot, dot dot dot, dot dot dot dot dot dot dot,
to-date-time, open parenthesis, date-string, close parenthesis, semicolon, space,
if, open parenthesis, dt, exclamation point, equals null, ampersand, ampersand, dt.ticks,
less than symbol, date, dot, ticks, close parenthesis, space, open curly brackets, space,
return date, dash, dt, semicolon, space, close curly bracket, space, else, space,
throw Netflix shows in January to February 2016, open parenthesis, close parenthesis,
semicolon, space, close curly bracket.
If you want to access any of those objects, just type object.fieldname.
For example, class, dot, Netflix shows.
Take note that these will all be initialized before any of the constructors are made.
Properties.
Properties are members that allow objects on a program to be read and to be flexible enough
to fit in various operating systems.
Sometimes they are called accessors because they do help the objects become accessible.
Other essential facts about properties include,
one, get properties.
These are accessors that help return value of the property even in various levels.
Two, properties do not implement set accessors.
Three, the value that's assigned by the accessor is called value.
For body definitions, you have to make use of the following.
Public string name, equal sign, greater than sign, first, plus symbol, double quote, double quote,
plus symbol, last, semicolon.
Here's a good example.
Class school schedule, space.
Open curly bracket, space.
Private double seconds, semicolon, space.
Public double hours, space.
Open curly bracket, space.
Get, open curly bracket, return seconds, slash, 2400, semicolon, close curly brackets, space.
Set, open curly bracket, seconds, equal sign, value, asterisk.
2, 4, 0, 0, semicolon, close curly bracket, space, close curly bracket, space, close curly bracket, space.
Class schedule, space.
Open curly bracket, space.
Static void main, open parentheses, close parentheses, space.
Open curly bracket, space.
Class schedule, class schedule, T, equal sign, new, class schedule, open parentheses, close parentheses, semicolon, space, slash, slash.
Assigning the hours property causes the set accessor to be called, period, space, T, dot, hours, equal sign, 24, semicolon, space, slash, slash.
Evaluating the hours property causes the get accessor to be called, period, space, class, dot, schedule, dot, right line, open parentheses, double quote, time and hours, semicolon, double quote, plus sign, T, dot, hours, close parentheses, semicolon, space, close curly bracket, space, close curly bracket, space, close curly bracket,
space, space, slash, slash, slash, output, semicolon, time and hours, colon, 24, constants.
Meanwhile, constants are known to compile time as immutable values because they do not change or ruin the program's life.
They are often declared as const, C-O-N-S-T, which are also known as modifiers.
System.object is known as a primary constant.
However, arrays, structs, and other classes are not considered const because they are not read-only files.
You can then define constant variables for each of your programs.
For example, class Annual Calendar 1, space, open curly bracket, space, const, int, months, equal sign 12, semicolon, space, const, int, weeks, equal sign 52, semicolon, space, const, int, days, equal sign 365, semicolon.
Space, space, open parenthesis, double, close этих, dot, days, space, double, close needle,edereen.
open parenthesis, double, close parenthesis, days, slash, open parenthesis, double, close
parenthesis, weeks, semicolon, space, const, double days per month, equal sign, open parenthesis,
double, close parenthesis, days, slash, open parenthesis, double, close parenthesis, months, semicolon, space, close
curly bracket. You could then use those variables this way. Class calendar 2, space, open curly
bracket, space, const, int, months, equal sign 12, comma, weeks, equal sign 52, comma, days,
equals 365, semicolon, space, close curly bracket. Or you could use it for this. Class calendar
1, space, open curly bracket, space, public, const, int, months, equal sign 12, semicolon,
space, close curly bracket. As you can see, the variables of calendar are used for each of
the examples because they are constant to the project and parts of the project would not
work if they are not around. Methods. Next up are methods. They are known as code blocks that
contain statements in each of them. Methods are needed to equalize arguments, especially when the
instructions are executed in the middle of the context. In short, it's like you're going to edit
what you have on screen and you do have to be meticulous about it. Methods also bring forth
method signatures. For example, if you want to declare whether something is public or private,
in order for programs to work, everything has to be executed and segregated clearly and methods
will help you make sure of that. As you can see, various codes also make use of parentheses.
These are called method parameters. If the parentheses are empty, it means that the method
does not have any parameters in them. Here are some examples.
public class Netflix shows
public class Netflix shows
public class Netflix shows
private field
private January 2016 date
semicolon
space
slash
public field
public string day
semicolon
space
Netflix shows in January 2016
space
public Netflix shows in January 2016
space
open curly bracket
space
get
space
open curly bracket
space
February 2016
semicolon
space
close curly bracket
space
set
space
open curly bracket
space
slash
slash
set reasonable boundaries for probable birth dates
period
space
if
open parenthesis
value dot year
greater than symbol
January 2016
ampersand
ampersand
value dot year
less than symbol
equals symbol
February dot 2016
close parenthesis
space
open curly bracket
space
date
equals value
semicolon
space
close curly bracket
space
else
space
throw Netflix shows in January to February 2016
open parenthesis
close parenthesis
semicolon
space
close curly bracket
space
close curly bracket
space
space
slash
slash
public method also exposes date field safely
period
space
slash
slash
example call
colon
January dot
s
2016
open parenthesis
double quote
2016
comma
one
double quote
close parenthesis
semicolon
space
public void
set date
open parenthesis
string
date string
close parenthesis
space
open curly bracket
space
date
date
time
dt
equals sign
convert
dot
to date
time
open parenthesis
date
string
close parenthesis
semicolon
space
slash
slash
space
if
open parenthesis
dt dot year
greater than symbol
January
January
2016
ampersand
ampersand
dt
dot
year
less than symbol
equals
February
2016
close parenthesis
space
open curly bracket
space
date
equals
dt
semicolon
space
close curly bracket
space
else
space
throw
Netflix shows
in January
to February
2016
open parenthesis
close parenthesis
semicolon
space
close curly bracket
space
public time span
get time span
open parenthesis
string date string
close parenthesis
space
open curly bracket
space
date time
dt
dot ticks
close parenthesis
dot ticks
close parenthesis
dt.tix, less than symbol, date.tix, close parenthesis, space, open curly bracket, space, return date, dash, dt, semi-colon, space, close curly bracket, space, else, space,
throw Netflix shows in January to February 2016, open parenthesis, close parenthesis, semi-colon, space, close curly bracket, space, close curly bracket.
See, there are some parenthesis that do not have anything inside the parenthesis, which means they could not be considered as methods.
Here's another one.
Class Annual Calendar 1, space, open curly bracket, space, const int months equals 12, semi-colon, space, const int weeks equals 52, semi-colon,
const int days equals 365, semicolon, space, space, const double days per week equals, open parenthesis, double, close parenthesis, days, slash, open parenthesis, double, close parenthesis, weeks, space,
const, double, close parenthesis, days, slash, open parenthesis, double, close parenthesis, months, semi-colon.
As you can see, there are variables inside the parenthesis, which means that there are method parameters in the second example above.
Constructors
Constructors are the next string of variables that come after classes and structs.
These enable default values in the program together with codes and limits.
Take note that if you do not give any constructors to your objects, the program would create one for itself,
but it might not be coherent with your program, so make sure that you input the values yourself.
Deconstructors
Of course, if there are constructors, there are also deconstructors.
These cannot be defined in the structs, and each class could only have one deconstructor.
They cannot be overloaded or inherited, and are automatically invoked.
For example,
class, dishwashing, space, open curly bracket, space, tilde, dishwashing, open parenthesis, close parenthesis,
slash, slash, destructor, space, open curly bracket, space, slash, slash, dishwashing statements, dot, dot, dot,
space, close curly bracket, space, close curly bracket, space,
space, space,或者, dot, dot, dot, dot, dot, dot, dot, photo, dot, dot, site,
dot, dot, dot, dot, dot, dot, dot, dot, dot, dot, dot, dot, dot,
Arrays are pretty much just multiple variables of the same type that could be declared with
either type, open bracket or close bracket, or array, open bracket, close bracket. In
the event that you would not type those names, you just have to make sure that they're in
the same category. For example, Netflix shows are calendar values. Here's an example.
Class Annual Calendar 1, space, open curly bracket, space, const int months equals 12, semicolon,
space, const int weeks equals 52, semicolon, const int days equals 365, semicolon, space,
space, const double days per week equal open parentheses double close parentheses days slash
open parentheses double close parentheses weeks, semicolon, space, const double days per month
equal open parentheses double close parentheses days slash open parentheses double close
parentheses, months, semicolon, space, close curly bracket. Or you could also use this,
public class, Netflix shows, space, open curly bracket, space, slash, slash, private field,
space, private January 2016 date, semicolon, slash, slash, public field, space, public string
day, semicolon, space, slash, slash, Netflix shows in January 2016, space, public Netflix
shows in January 2016, open curly bracket, space, get, space, open curly bracket, space,
February 2016, semicolon, space, close curly bracket, space, set, space, open curly bracket,
space, slash, slash, set reasonable boundaries for probable birthdates, period, space, if,
open parentheses, value, dot, year, greater than symbol, January 2016, ampersand, ampersand,
value, dot, year, less than symbol, equals, February, dot, 2016, close parentheses, space,
open curly bracket, space, date, equals, value, semicolon, space, close curly bracket, space,
else, space, throw Netflix shows in January to February 2016, open parentheses, close parentheses,
semicolon, space, close curly bracket, space, close curly bracket, space, close curly bracket, space,
space, slash, slash, public method also exposes date field safely, period, space, slash, slash,
example call, colon, January, dot, S, 2016, open parentheses, double quote, 2016, comma, one,
double quote, close parentheses, semicolon, double quote, close parentheses, semicolon, space,
public void set date, open parentheses, string, date string, close parentheses, space,
open curly bracket, space, date time dt, equals, convert to date time, open parentheses,
date string, close parentheses, semicolon, space, slash, slash, space, if, open parentheses,
dt.year, greater than symbol, January 2016, ampersand, ampersand, dt.year, less than
symbol, equals February 2016, close parentheses, space, open curly bracket, space, date, equal
sign, dt, semicolon, space, close curly bracket, space, else, space, space, throw Netflix shows
in January to February 2016, open parentheses, close parentheses, semicolon, space, close
curly bracket, space, public time span, get time span, open parentheses, string, date
string, close parentheses, space, open curly bracket, space, date time dt, equal sign, convert
dot, to date time, open parentheses, date string, close parentheses, semicolon, space, if, open
parentheses, dt, exclamation point, equal sign, null, ampersand, ampersand, dt.tix, less
than symbol, date dot tix, close parentheses, space, open curly bracket, space, return date, dash,
dash, dt, dt, semicolon, space, close curly bracket, space, else, space, throw Netflix shows in
January to February 2016, open parentheses, close parentheses, semicolon, space, close curly
bracket, or this, class, school schedule, space, open curly bracket, space, private double seconds,
semicolon, space, semicolon, space, public double hours, space, open curly bracket, space, get,
open curly bracket, return seconds, slash, 2400, semicolon, close curly bracket, space, set, open curly
bracket, seconds, equal sign, value, asterisk, 2400, semicolon, close curly bracket, space, close
curly bracket, space, close curly bracket, space, close curly bracket, space, class schedule, open curly
bracket, space, static void main, open parentheses, close parenthesis, space, open curly bracket, space,
class schedule, t equals new class schedule, open parentheses, close parentheses, semicolon, space, slash,
slash assigning the hours property causes the single quote set single quote
accessor to be called period space t dot hours equals 24 semicolon space slash
slash evaluating the hours property causes the single quote yet single quote
accessor to be called period space class dot schedule dot right line open
parentheses double quote time and hours colon double quote plus sign t dot hours
close parentheses semicolon space close curly bracket space close curly bracket
space slash slash output colon time and hours colon 24 it's all about making sure
that your variables are under the same category for this one to work
chapter six polymorphism and of course there's also polymorphism which is also known as an
important pillar of object-oriented programming it has two essential aspects
apart from its many shapes and these are one virtual methods cannot be implemented
or defined through base classes because they can be derived by override classes
and can even be implemented or defined on its own when the client code calls the
method during runtime you have to make sure that the clr is able to look back on
the project two method parameters and collection arrays should be treated as
objects from one derived class and should not be identical to its run type in any
way therefore you can work with various groups of objects in a way that would be
coherent with one another for example if you want to create an app that would
teach kids what different shapes are you have to make sure that you add
different shapes to the program even before the editing period should you
encounter any problems you just have to do the following one use virtual methods to
invoke the necessary methods for classes that have been derived through single call methods
two create class hierarchies with specific shapes from a common base class
here's a good example public class shapes app space open curly bracket space slash slash a few
two example members space public int x open curly bracket get semi-colon private set semi-colon close curly
bracket space public int y open curly bracket get semi-colon private set semi-colon close curly bracket space
space public int x open curly bracket get semi-colon private set semi-colon close curly bracket space
public int x open curly bracket get semi-colon set semi-colon close curly bracket space space slash slash virtual method space
slash slash slash virtual virtual virtual virtual void draw open parenthesis close parenthesis
open parenthesis close parenthesis space open curly bracket space
open curly bracket space console dot right line open parenthesis double quote performing base class drawing task
dot dot right line dot right line dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot
close parentheses, space, open curly bracket, space, slash, slash, code to draw a heart, dot, dot, dot, space, console dot, right line, open parentheses, double quotation, drawing a heart, double quotation, close parentheses, semicolon, space, base, dot, draw, open parentheses, close parentheses,
semicolon, space, close curly bracket, space, close curly bracket, space, class, oblong, colon, shape, space, open curly bracket, space, public override, void, draw, open parentheses, close
parentheses, space, open curly bracket, space, slash, slash, code to draw a oblong, dot, dot, dot, space, console dot, right line, open parentheses, double quotation, drawing a
oblong, double quotation, close parentheses, semicolon, space, base, dot, draw, open parentheses, close parentheses, semicolon, space, close curly bracket, space, close
curly bracket, space, class, diamond, colon, shape, space, open curly bracket, space, public override, void, draw, open parentheses, close
parentheses, space, close parentheses, space, close parentheses, semicolon, space, base, dot, draw, open parentheses, close
parenthesis, semicolon, space, close curly bracket, space, close curly bracket, space, class program, space, open
curly bracket, space, static void, main, open parentheses, string, open bracket, close bracket, ARGS, close
parentheses, space, open curly bracket, space, slash, slash, polymorphistic, close parentheses,
slash slash polymorphism at work hashtag one space and oblong comma diamond and heart space
slash slash can all be used wherever a shape is expected period no cast is space slash slash
required because an implicit conversion exists from a derived space slash slash class to its base
class system collections dot generic dot list less than symbol shape greater than symbol shapes equal
new space systems dot collections dot generic dot list less than symbol shape greater than symbol
open parenthesis close parenthesis semicolon space shapes dot add open parenthesis new oblong
open parenthesis close parenthesis close parenthesis semicolon space shapes dot add open parenthesis new diamond
open parenthesis close parenthesis close parenthesis semicolon shapes dot add
open parenthesis, new heart
open parenthesis, close parenthesis
close parenthesis, semicolon
slash, slash
polymorphism at work, hashtag 2
colon, the virtual method draw is
space, slash, slash
invoked on each of the derived classes
comma, not the base class, period
space, for each, open parenthesis
shape, S in shapes
close parenthesis, space
open curly bracket, space
S dot draw, open parenthesis, close parenthesis
semicolon, space, close curly bracket
space, slash, slash
keep the console open in debug mode, period
space, console dot, right line
open parenthesis, double quote
press any key to exit, period
double quote, close parenthesis
semicolon, space
console dot, read key
open parenthesis, close parenthesis
semicolon, space
close curly bracket, space
close curly bracket, space
slash, star, output
colon, space
drawing an oblong, space
performing base class drawing task
space, drawing a diamond
space, performing base class drawing task
space, drawing a heart
space, performing base class drawing task
space, star slash
you could also use polymorphism to hide base class members
or members of the class that you no longer want to see in your program
take note that client code could still have access to this
public class, Hogwarts
space
open curly bracket, space
public void, do work
open parenthesis, close parenthesis
open curly bracket, work field
plus sign, plus sign
semicolon, close curly bracket
space
public int, Gryffindor
semicolon, space
public int, Slytherin
space
open curly bracket, space
get
open curly bracket
return
o
semicolon, close curly bracket
space, close curly bracket
space, close curly bracket
space
public class
derived class
colon, Gryffindor
space
open curly bracket
space
public new void
do work
open parenthesis, close parenthesis
open curly bracket
work field
plus sign, plus sign
semicolon
close curly bracket
public new
int
Gryffindor
semicolon
public new
int
Slytherin
space
open curly bracket
space
get
open curly bracket
return o
semicolon
close curly bracket
space
close curly bracket
space
close curly bracket
chapter 7
delegates
events
and enumeration
types
finally
there are delegates
and enumeration
types
delegates
first
delegates
represent method
references
with return
types
and parameter
lists
that help you
initiate delegates
or members
of the program
they help you
create compatible
names and signatures
that can be invoked
through various instances
and are also used
to pass arguments
to other methods
you could also create
custom classes
and methods
that could be accessed
through classes
and structs
other than that
delegates are also
1
methods that are passed
as parameters
2
delegates that work
like C++
when it comes to style
3
methods that do not
have to match
delegate types
4
delegates that could
easily be chained
together
and
5
delegates that define
callback methods
for this
you could also
use
anonymous
methods
open parenthesis
ampersand
close parenthesis
to express
what the delegates
are
this is prevalent
in the Netflix
example
public class
Netflix shows
space
open curly
bracket
space
slash
slash
private field
space
private January
January 2016
date
semicolon
space
slash
slash
public field
space
public string
day
semicolon
space
slash
slash
Netflix
shows
in January
2016
space
public
Netflix
shows
in January
2016
space
open curly
brackets
space
get
space
open curly
bracket
space
February
2016
semicolon
space
close curly
bracket
space
set
space
open curly
bracket
space
slash
slash
set reasonable
boundaries for probable
birth dates
period
space
if
open parenthesis
value dot
year
greater than
symbol
January
2016
ampersand
ampersand
value dot
year
less than
symbol
equal sign
February
dot
2016
close
parentheses
space
open curly
bracket
space
date
equal sign
value
semicolon
space
close curly
bracket
space
else
space
throw
Netflix
shows
in January
to February
2016
open
parentheses
close
parentheses
semicolon
space
close curly
bracket
space
close curly
bracket
space
space
slash
slash
public method
also exposes
date field
safely
period
space
slash
slash
example
call
colon
January
January
dot
S
2016
open
parenthesis
double quote
2016
comma
one
double quote
close
parentheses
semicolon
space
public void
set date
open
parenthesis
string
date
string
close
parentheses
space
open curly
bracket
space
date
date
time
DT
equals
sign
convert
dot
to
date
time
open
parenthesis
date
string
close
parenthesis
semicolon
space
slash
slash
space
if
open
parenthesis
DT
dot
year
greater
than
symbol
January
2016
ampersand
ampersand
DT
dot
year
less
than
symbol
equals
sign
February
2016
close
parenthesis
space
open
curly
bracket
space
date
equals
DT
semicolon
space
close
curly
bracket
space
else
space
throw
Netflix
shows
in
January
to
February
2016
open
parenthesis
close
parentheses
semicolon
space
close
curly
bracket
space
public
time
span
get
time
span
open
curly
bracket
string
date
string
close
parentheses
space
open
curly
bracket
space
date
time
DT
equals
convert
dot
to
date
time
open
parentheses
date
string
close
parentheses
semicolon
space
if
open
parenthesis
DT
exclamation
point
equals
sign
null
ampersand
ampersand
DT
dot
ticks
less
less than
symbol
date
dot
ticks
close
parentheses
space
open
curly
bracket
space
return
date
dash
DT
semicolon
space
close
curly
bracket
space
else
space
throw
Netflix
shows
in
January
to
February
2016
open
parentheses
close
parentheses
semicolon
space
close
curly
bracket
space
close
curly
bracket
events
events
are known
to determine
class objects
that emerge
when the
curiosity
or interest
for them
occurs
when these
happen
members of
the class
become
publishers
and the
receiving
class
becomes
the subscriber
of the
given
program
you get
to subscribe
to events
in web
applications
or windows
forms
by raising
list
boxes
and buttons
together
with visual
C-sharp
in a given
environment
an empty
handler
is automatically
added to
the situation
for this
you have to
remember the
following
1.
there could
be multiple
subscribers
to a single
event
just like
there could
be multiple
fans of
one real
life celebrity
or event
as well
2.
it is up
to the
publisher
to determine
when to
raise the
event
and when
action
is supposed
to be
taken
3.
events
are based
in event
handler
in the
.NET
framework
class
as well
as in
the event
args
class
because
it is
also a
form of
argument
albeit
a positive
one
4.
actions
are predominantly
triggered
by events
such as
graphical
interpretations
charts
or buttons
5.
if the
event
has no
subscribers
it will
never be
raised
because
there
would
be
no
point
to
it
in
enumeration
types
as the
name
suggests
enumeration
types
pretty much
show
items
that fall
under
the same
category
these
integral
constants
could then
be assigned
as variables
to the
program
for example
days of
the week
or number
of months
etc.
The enum
keyword is
used here
here's a
good example
enum
days
open
curly
bracket
Sunday
comma
Monday
comma
Tuesday
comma
Wednesday
comma
Thursday
comma
Friday
comma
space
Saturday
semicolon
space
enum
months
colon
byte
open
curly
bracket
j
a
n
comma
f
e
b
comma
m
a
r
comma
a
p
r
comma
m
a
y
comma
j
u
n
comma
j
u
l
comma
a
u
g
comma
s
e
p
comma
o
c
t
comma
space
n
o
v
comma
d
e
c
close
curly
bracket
semicolon
integers
are prevalent
in enumeration
types
because they
specify
numeric
types
you also
get to
cast
numeric
values
to
underlying
classes
that are
dependent
on one
another
such as
these
class
annual
calendar
one
space
open curly
bracket
bracket
space
const
int
months
equal
sign
12
semicolon
space
const
int
weeks
equal
52
semicolon
space
const
int
days
equal
sign
365
semicolon
space
space
const
double days
per week
equal
sign
open
parentheses
double
close
parentheses
days
slash
open
parentheses
double
close
parentheses
weeks
semicolon
space
const
double days
per month
equal
open
parentheses
double
close
parentheses
days
slash
open
parentheses
double
close
parentheses
months
semicolon
space
days
today
equal
sign
days
dot
Friday
semicolon
space
int
day
number
equals
sign
open
parentheses
int
close
parentheses
today
semicolon
space
console
dot
right
line
open
parentheses
double
quote
open
curly
bracket
o
close
curly
bracket
is
day
number
sign
open
curly
bracket
five
close
curly
bracket
period
double
quote
comma
today
comma
day
number
close
parentheses
semicolon
space
space
months
this
month
equal
sign
months
dot
january
semicolon
space
byte
month
number
equals
sign
open
parentheses
byte
close
parentheses
this
month
semicolon
space
save
continent
double
quote
comma
this
month
space
month
number
close
parentheses
semicolon
space, space, slash, slash, output, colon, space, slash, slash, Friday is day, number
sign 5, period, space, slash, slash, January is month, number, number sign 1, period.
The items above are related to each other even if you don't program them together or
do so one above the other.
This means that you'll be able to list defined values and specify client codes for each of
the variables.
The values are each incremented by one for each type, but if you do not assign value to
a variable, it automatically becomes zero.
So, for example, if you want to decide when the day of the meeting would be, you could
do this.
You have to specify what you want to see next, or else it would just be a page full
of ellipsis.
If you're going to make use of computed values, it would look like the following.
enum computer state, space, open curly bracket, space, shutdown, equal sign, zero, comma, space,
working, equal sign, five, comma, space, sleeping, equal sign, ten, comma, space, hibernating,
equal sign, equal sign, sleeping, plus five, space, close curly bracket.
That's it.
These are the basics of C-sharp, and you can now create your own program based on the language.
Conclusion.
Thank you for reading.
Hope you enjoyed and got great value from this book.
Thanks.
Closing Credits
This has been C-sharp, the stress-free way to learning C, inside and out.
Guide for Beginners, Basics
Written by IT Academy
Narrated by Mike Hennessy
Copyright 2017 by David Maxwell
Production Copyright 2017 by David Maxwell
Audible hopes you have enjoyed this program.
