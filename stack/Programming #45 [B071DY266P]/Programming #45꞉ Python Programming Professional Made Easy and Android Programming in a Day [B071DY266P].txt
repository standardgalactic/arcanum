This is Audible.
Programming No. 45.
Python Programming Professional Made Easy and Android Programming in a Day.
Written by Sam Key, narrated by Million Quinteros.
Introduction
I want to thank you and congratulate you for downloading the book
Python Programming Professional Made Easy,
Expert Python Programming Language Success in a Day for Any Computer User.
This book contains proven steps and strategies on how to program Python in a few days.
The lessons ingrained here will serve as an introduction to the Python language and programming to you.
With the little things you will learn here, you will be able to create big programs.
The book is also designed to prepare you for advanced Python lessons.
Make sure that you take note of all the pointers included here,
since they will help you a lot in the future.
Thanks again for downloading this book. I hope you enjoy it.
Chapter 1 Introduction to Programming Languages
This short section is dedicated to complete beginners in programming.
Knowing all the things included in this chapter will lessen the confusion that you might encounter
while learning Python or any programming language.
Computers do not know or cannot do anything by themselves.
They just appear smart because of the programs installed on them.
Computer, Binary, or Machine Language
You cannot just tell a computer to do something using human language,
since they can only understand computer language,
which is also called machine or binary language.
This language only consists of zeros and ones.
On the other hand, you may not know how to speak or write computer language.
Even if you do, it will take you hours before you can tell a computer to do one thing,
since just one command may consist of hundreds or thousands of ones and zeros.
If you translate one letter in the human alphabet to them,
you will get two or three ones or zeros in return.
Just imagine how many ones and zeros you will need to memorize
if you translate a sentence to computer language.
Assembly, or Low-Level Programming Language
In order to overcome the language barrier, programmers have developed assemblers.
Assemblers act as translators between a human and a computer.
However, assemblers cannot comprehend human language.
They can only translate binary language to assembly language and vice versa.
So, in order to make use of assemblers,
programmers need to learn their language, which is also called a low-level language.
Unfortunately, assembly language is difficult to learn and memorize.
Assembly language consists of words made from mnemonics
that only computer experts know.
And for one, to just make the computer display something to the screen,
a programmer needs to type a lot of those words.
High-Level Programming Language
Another solution was developed, and that was high-level programming languages
such as C++, Java, and Python.
High-level programming languages act as a translator for humans
in assembly language or human-to-computer language.
Unlike assembly language or low-level language,
high-level programming languages are easier to understand
since they commonly use English words instead of mnemonics.
With it, you can also write shorter lines of code
since they already provide commonly used functions
that are shortened into one or two keywords.
If you take one command or method in Python
and translate it to assembly language,
you will have long lines of code.
If you translate it to computer language,
you will have thousands of lines composed of ones and zeros.
In a nutshell, high-level programming languages like Python
are just translators for humans and computers to understand each other.
In order for computers to do something for humans,
they need to talk or instruct them via programming languages.
Many high-level languages are available today.
Among the rest, Python is one of the easiest languages to learn.
In the next chapter, you will learn how to speak and write with Python language
for your computer to do your bidding.
Chapter 2, Getting Prepped Up
In the previous chapter, you had learned the purpose of programming languages.
By choosing this book, you have already decided
that Python is the language that you want to use to make your programs.
In this chapter, your learning of speaking, writing, and using this language starts.
You, Python, and your computer
Before you start writing, take a moment to understand the relationship
between you, the programming language, and the computer.
Imagine that you are a restaurant manager
and that you have hired two foreign guys to cook for the restaurant,
which is the program you want to create.
The diners in your restaurant are the users of your program.
The first guy is the chef who only knows one language that you do not know.
He follows recipes to the letter,
and he does not care if the recipe includes him jumping off the cliff.
The guy is your computer.
The second guy is the chef's personal translator
who will translate the language you speak or write,
which is Python, to the language the chef knows.
This translator is strict and does not tolerate typos in the recipes he translates.
If he finds any mistake, he will tell it right to your face,
walk away with the chef, and leave things undone.
He also does not care if the recipe tells the chef to run in circles until he dies.
That is how they work.
This guy is your programming language.
Since it is a hassle to tell them the recipe while they cook,
you decided to write a recipe book instead.
That will be your program's code that the translator will read to the chef.
Installing Python
You got two things to get to program in Python.
First, get the latest release.
Once you are done with the installation, you must get a source code editor.
It's recommended that you get Notepad++.
Version 2x or 3x
If you have already visited the Python website to download the program,
you might have seen that there are two Python versions that you can download.
As of this writing, the first version is Python 3.4.2,
and the second is Python 2.7.8.
About that, it is best that you get the latest version, which is version 3.4.2.
The latest version or build will be the only one getting updates and fixes.
The 2.7.8 was already declared as the final release for the 2x build.
Beginners should not worry about it.
It is recommended that the new Python programmers start with 3x or later
before thinking about exploring the older versions of Python.
Programming and Interactive Mode
Python has two modes.
The first one is programming, and the second one is interactive.
You will be using the interactive mode for the first few chapters of the book.
On the other hand, you will be using the programming mode on the last few chapters.
In interactive mode, you can play around with Python.
You can enter lines of code on it, and once you press Enter,
Python will immediately provide a feedback or execute the code you input.
To access Python's interactive mode,
go to the directory where you installed Python and open the Python application.
If you are running on Windows, just open the run prompt, enter Python, and click OK.
In programming mode, you can test blocks of codes in one go.
Use a source editor to write the programs.
Save it as a PY file and run it as a Python program.
In Windows, PY files will automatically associate with Python after you install Python.
Due to that, you can just double-click the file, and it will run.
Chapter 3 Statements
A program's code is like a recipe book.
A book contains chapters, paragraphs, and sentences.
On the other hand, a program's code contains modules, functions, and statements.
Modules are like chapters that contain the recipes for a full-course meal.
Procedures or functions are like paragraphs or sections that contain recipes.
Statements are like the sentences or steps in a recipe.
To code a program with Python, you must learn how to write statements.
Statements
Statements are the building blocks of your program.
Each statement in Python contains one instruction that your computer will follow.
In comparison to a sentence, statements are like the imperative sentences, which are sentences that are used to issue commands or requests.
Unlike sentences, Python or programming languages in general has a different syntax or structure.
Variables
As with any recipe, ingredients should always be present.
In programming, there will be times that you would want to save some data in case you want to use them later in your program.
And there is when variables come in.
Variables are data containers.
They are containers for your ingredients.
You can place almost any type of data on them like numbers or text.
You can change the value contained by a variable anytime.
And you can use them anytime as long as you need.
Take note, you cannot just create any name for a variable.
You need to follow certain rules to avoid receiving syntax errors when creating them.
And they are
Variable names should start with an underscore or a letter.
Variable names must only contain letters, numbers, or underscores.
Variable names can be one letter long or any length.
Variable names must not be the same with any commands or reserved keywords in Python.
Variable names are case sensitive.
As a tip, always use meaningful names for your variables.
It will help you remember them easily when you are writing long lines of code.
Also, keep them short and use only one style of naming convention.
Chapter 4 Basic Operators Part 1
As of this moment, you have already seen three operators.
Assignment equals, addition plus, and subtraction minus operators.
You can use operators to process and manipulate the data and variables you have.
Just like how chefs cut, dice, and mix their ingredients.
Types of Python Operators
Multiple types of operators exist in Python.
They are Arithmetic, Assignment, Comparison, Logical, Membership, Identity, Bitwise.
Up to this point, you have witnessed how Arithmetic and Assignment operators work.
During your first few weeks of programming in Python, you will also be using Comparison and
Logical operators aside from Arithmetic and Assignment operators.
You will mostly use Membership, Identity, and Bitwise later when you've already advanced your Python programming skills.
Arithmetic
Arithmetic operators perform mathematical operations on numbers and variables that have numbers stored on them.
Assignment
Aside from the equal sign or simple assignment operator, other assignment operators exist.
Mostly, they are combinations of Arithmetic operators and the simple assignment operator.
They are used as shorthand methods when reassigning a value to a variable that is also included in the expression that will be assigned to it.
Using them in your code simplifies and makes your statement clean.
Multiple Usage of Some Operators
Also, some operators may behave differently depending on how you use them or what values you use together with them.
The Addition operator acts as a unary operator for other languages.
However, it behaves differently in Python.
In some languages, an expression like plus, minus one in parentheses will be treated as a positive one.
In Python, it will be treated as plus one with a minus one in parentheses.
And if you evaluate that, you will still get negative one.
Chapter 5 Basic Operators Part 2
Operators seem to be such a big topic, right?
You will be working with them all the time when programming in Python.
Once you master or just memorize them all, your overall programming skills will improve
since most programming languages have operators that work just like the ones in Python.
And just like a restaurant manager, you would not want to let your chef serve food with only unprocessed ingredients all the time.
Not everybody wants salads for their dinner.
Comparison
Aside from performing arithmetic operations and storing values to variables, Python can
also allow you to let the computer compare expressions.
Logical
Aside from arithmetic and comparison operations, the computer is capable of logical operations
too.
Even simple circuitry can do that, but that is another story to tell.
Anyway, do you remember your logic class where your professor talked about truth tables,
premises, and propositions?
Your computer can understand all of that.
Order of Precedents
In case that your statement contains multiple types or instances of operators, Python will
evaluate it according to precedents of the operators, which is similar to the PEMDAS rule in mathematics.
It will evaluate operators with highest precedents to the lowest.
Below is a reference for the precedents of operators.
The list is sorted from operations with high precedents to operators with low precedents.
Exponents
Exponents
Exponents
Unary
Multiplication
Division
Modulo
And Floor Division
Addition
And Subtraction
Bitwise
Comparison
Assignment
Identity
Membership
Logical
Logical
Truth Values
The values true and false are called truth values or sometimes called boolean data values.
The value true is equal to 1 and the value false is equal to 0.
That means that you can treat or use 1 as the truth value true and 0 as the truth value false.
Chapter 6, Functions, Flow Control, and User Input
With statements, you have learned to tell instructions to the computer using Pythons.
As of now, all you know is how to assign variables and manipulate expressions.
And the only command you know is print.
Do you think that you can make a decent program with those alone?
Maybe, but you do not need to rack your brains thinking of one.
In this chapter, you will learn about functions and flow control.
This time, you will need to leave the interpreter or interactive mode.
Functions
Statements are like sentences in a book or steps in a recipe.
On the other hand, functions are like paragraphs or a recipe in a recipe book.
Functions are blocks of code with multiple statements that will perform a specific goal or goals when executed.
Flow Control
It is sad that only one recipe can be displayed by the sample function.
It would be great if your program can display more recipes.
And letting the user choose the recipe that they want to be displayed on the program would be cool.
But how can you do that?
You can do that by using Flow Control tools in Python.
With them, you can direct your program to do something if certain conditions are met.
In the case of the recipe listing program, you can apply Flow Control and let them see the recipes by requesting it.
If Statement
The simplest control flow tool you can use for this type of project is the If Statement.
Have you been wondering about truth values?
Now you can use them with If Statements.
An If Statement is like a program roadblock.
If the current condition of your program satisfies its requirements, then it will let it access the block of statements within it.
It is like a function with no names, and instead of being invoked to work, it needs you to satisfy the conditions set to it.
User Input
You can now control the flow of your program and create functions.
Now, about the recipe program, how can the user choose the recipe he wants to view?
That can be done by using the Input command.
Once Python executes a line like that, it will stop executing statements, and provide a prompt.
During the moment, a user is given a chance to type something into the program.
If the user presses Enter, Python will store and assign characters the user typed in a program to variable A.
With that, you can make a program that can capture user input and can change its flow whenever it gets the right values from the user.
You can create a recipe program that allows users to choose the recipe they want.
Conclusion
Thank you again for downloading this book.
I hope this book was able to help you learn the basics of Python programming.
The next step is to learn more about Python.
You should have expected that coming.
Kidding aside, with the current knowledge you have in Python programming, you can make any programs like that with ease.
But of course, there are still lots of things you need to learn about the language, such as loops, classes, and etc.
Finally, if you enjoy this book, please take the time to share your thoughts and post a review on Amazon.
We do our best to reach out to readers and provide the best value we can.
Your positive review will help us achieve that.
It would be greatly appreciated.
Thank you and good luck.
Android Programming in a Day
Introduction
I want to thank you and congratulate you for downloading the book, Android Programming in a Day.
This book contains proven steps and strategies on how to get started with Android app development.
This book will focus on preparing you with the fun and tiring world of Android app development.
Take note that this book will teach you basic Android app programming and designing.
Android development is a huge subject to tackle, and learning everything in it in just about one slim book is nigh on impossible.
Nevertheless, using this book as a foundation of your journey in Android app development is crucial.
On the other hand, this book will mostly revolve around the familiarization of the Java programming, XML writing, Android operating system, Android SDK, Eclipse IDE, and Android Studio.
Why not focus on programming immediately?
Unfortunately, the biggest reason many aspiring Android developers stop on learning this craft is due to the lack of wisdom on the tools and skills they need to make Android app development easier.
Sure, you can also make apps using other languages like Python and other IDEs on the market.
However, you can expect that using those is much more difficult than learning what Google has recommended.
As of now, Google recommends using the newest Android Studio and Android SDK to develop Android apps.
Back then, Google and most Android app developers recommend using Eclipse and ADTs, Android development tools.
On a different note, you can use some online tools to help develop your Android app for you.
But where's the fun in that?
You will not learn if you use such tools.
Although it does not mean that you should completely stay away from that option.
Anyway, the book will be split into two parts.
The first part will prepare you and tell you the things you need before you develop apps and familiarize you with the skills and tools you need to develop Android apps.
The second part will teach you in-depth knowledge about the Android operating system and Android apps.
Also, this book will be sprinkled with tidbits about the basic concepts of Android app development as well as various aspects.
From the program structure to navigation.
As you read along, you will have a concrete idea on what to do next.
Thanks again for downloading this book.
I hope you enjoy it.
Chapter 1 Preparation
Android application development is not easy.
You must have some decent background in program development.
It is a plus if you know Visual Basic and Java.
And it will be definitely a great advantage if you are familiar or have already used Eclipse's IDE, Integrated Development Environment.
Also, being familiar with XML will help you.
You will need a couple of things before you can start developing apps.
Your computer
First, you will need a high-end computer.
It is common that other programming development kits do not need a powerful computer in order to create applications.
However, creating programs for Android is a bit different.
You will need more computing power for you to run Android emulators, which are programs that can allow you to test your programs in your computer.
Using a weak computer without a decent processor and a good amount of RAM will only make it difficult for you to run those emulators.
If you are able to run it, it will run slowly.
Android device
Second, you will need an Android device.
That device will be your beta tester.
With it, you will know how your program will behave in an Android device.
When choosing the test device, make sure that it is at par with the devices of the market you are targeting for your app.
If you are targeting tablet users, use a tablet.
If you are targeting smartphones, then use a smartphone.
Android SDK
Third, you will need the Android SDK Software Development Kit from Google.
The SDK is a set of files and programs that can allow you to create and compile your program's code.
As of this writing, the latest Android SDK's file size is around 350 megabytes.
It will take you 15 to 30 minutes to download.
If you uncompress the Android SDK file, it will take up around 450 megabytes of your computer's disk space.
The link to the download page is developer.android.com forward slash SDK.
By the way, when you get the SDK, you will also get Android Studio.
The SDK can run on Windows XP, 7, Mac OS X 10.8.5 or higher,
and Linux distros that can run 32-bit applications and has glibc, new CLibrary 2.11 or higher.
Once you have unpacked the contents of the file you downloaded, open the SDK Manager.
That program is the Development Kit's update tool.
To make sure that you have the latest version of the kit's components, run the Manager once in a while and download those updates.
Also, you can use the SDK Manager to download older versions of SDK.
You must do that in case you want to make programs with devices with dated Android operating systems.
Eclipse and ADT – Android Development Tools
Back then, Eclipse IDE was chosen as the preferred way to develop Android apps.
After all, it was the primary IDE that most Java programmers use.
And since Android apps are basically Java apps for the Android operating system, people have started using Eclipse.
However, Eclipse IDE alone is not capable of making life easier for Android app developers.
Due to that, ADT, or Android Development Tools for Eclipse IDE, was developed.
ADT is a plugin for Eclipse that makes the IDE more ready in developing Android applications.
If you plan to use Eclipse, it is essential that you use the latest version of Eclipse, 3.72 Indigo or higher.
As of this writing, the latest version of Eclipse is 4.4 Luna.
To get Eclipse, go to the page eclipse.org forward slash mobile.
Eclipse is around 200MB to 300MB large.
JRE – Java Runtime Environment
NJDK – Java Development Kit
Any programming venture with Java involved requires the Java Runtime Environment and Java Development Kit.
JRE allows a computer to run Java programs, while JDK allows a programmer to develop Java programs.
Eclipse and even Android Studio, which will be discussed later, highly depend on these two.
By default, if you are using a computer running on Microsoft Windows, it is probable that you already have JRE installed.
However, please do note that it is a must that your JRE is up to date.
You can update your Java by just going to your computer's control panel, opening the Java control panel by clicking Java,
clicking on the Update tab on the Java's control panel, and clicking the Update Now button.
On the other hand, you must download JDK as it does not come pre-installed on computers.
You can download it from Oracle's website at www.oracle.com.
Take note that these two programs alone can cost you 1 gigabit to 2 gigabit of disk space.
Android Studio
On the other hand, you have the option to use the new Android Studio.
The Android Studio contains the Gradle, Google Cloud, JUnit, Maven, Live Preview, Android Studio IDE, Android SDK Tools, Android 5.0 Lollipop Platform, and Google APIs.
Most Android developers are shifting to this app development software package.
As of now, it is considered the official IDE for Android apps.
One of its main features is its Intelligent Code Editor, which contains the following features.
Code analysis, refactoring, and advanced code keyword completion.
Take note that just like the Android SDK, it will require a decent computer.
Your computer must have 4 gigabits of RAM or more for optimal development experience.
You must at least have 5 gigabit free storage space.
The installer alone requires 800 megabytes.
The Studio and Android SDK requires approximately 3 gigabit or more.
And the JDK requires 1 gigabit.
By the way, you might need to free up 2 gigabit or more in case you need to add optional packages for your SDK.
By the way, despite being the primary development IDE for Android, you can still make do with Eclipse.
Also, if you have already done any project in Eclipse, you can easily import it into Android Studio using its import function.
Installation of all those IDE is easy.
Just follow the instructions.
To get Android Studio, just go to the link mentioned in the Android SDK section.
Chapter 2, Starting Your First Project
To start creating programs, you will need to open Eclipse.
The Eclipse application file can be found under the Eclipse folder on the extracted files from the Android SDK.
Whenever you run Eclipse, it will ask you where you want your Eclipse workspace to be stored.
You can just use the default location and just toggle the Don't Show checkbox.
New Project
To start a new Android application project, just click on the drop-down button of the New button on the Eclipse toolbar.
A context menu will appear.
Click on the Android application project.
The New Android application project details window will appear.
In there, you will need to input some information for your project.
You must provide your program's application name, project name, and package name.
Also, you can configure the minimum and target SDK where your program can run, and the SDK that will be used to compile your code.
And lastly, you can indicate the default theme that your program will use.
Application Name
The application name will be the name that will be displayed on the Google's Play Store when you post it there.
The project name will be more of a file name for Eclipse.
It will be the project's identifier.
It should be unique for every project that you build in Eclipse.
By default, Eclipse will generate a project and package name for your project when you type something in the application name text box.
Package Name
The package name is not usually displayed for users.
Take note that in case you develop a large program, you must remember that your package name should never be changed.
On the other hand, it is common that package names are the reverse of your domain name, plus your project's name.
For example, if your website's domain name is www.mywebsite.com, and your project's name is Hello World,
a good package name for your project will be com.mywebsite.helloworld.
The package name should follow the Java Package Name Convention.
The naming convention is there to prevent users from having similar names, which could result in numerous conflicts.
Some of the rules you need to follow for the package name are
Your package name should all be in lower caps.
Though Eclipse will accept a package name with a capital letter, it is still best to adhere to standard practice.
The reverse domain naming convention is included as a standard practice.
Avoid using special characters in the package name.
Instead, you can replace it with underscores.
Also, you should never use or include the default com.example in your package name.
Google Play will not accept an app with a package name like that.
Minimum SDK
Minimum required SDK could be set to lower or the lowest version of Android.
Anything between the latest and the set minimum required version can run your program.
Setting it to the lowest, which is API 1 or Android 1.0, can make your target audience wider.
Setting it to Android 2.2, Froyo, or API 8, can make your program run on almost 95% of all Android devices in the world.
The drawback is that the features you can include in your program will be limited.
Adding new features will force your minimum required SDK to move higher,
since some of the new functions in Android is not available on lower versions of the API, Application Programming Interface.
Target SDK
The Target SDK should be set to the version of Android that most of your target audience uses.
It indicates that you have tested your program to that version,
and it means that your program is fully functional if they use it on a device that runs the target Android version.
Whenever a new version of Android appears, you should also update the target SDK of your program.
Of course, before you release it to the market again, make sure that you test it on an updated device.
If a device with the same version as your set target SDK runs your program,
it will not do any compatibility behavior or adjust itself to run the program.
By default, you should set it to the highest version to attract your potential app buyers.
Setting a lower version for your target SDK would make your program old and dated.
By the way, the target SDK should always be higher or equal with a minimum target SDK version.
Compile With
The Compile With version should be set to the latest version of Android.
This is to make sure that your program will run on almost all versions down to the minimum version you have indicated,
and to take advantage of the newest features and optimization offered by the latest version of Android.
By default, the Android SDK will only have one version available for this option,
which is API 20 or Android 4.4 KitKat.
After setting those all up, it's time to click on the next button.
The new page in the screen will contain some options such as creating custom launcher icons and creating activity.
As of now, you do not need to worry about those.
Just leave the default values in check and click the next button once again.
Custom Launcher Icon
Since you have left the Create Custom Launcher option checked,
the next page will bring you in the Launcher Icon customization page.
In there, you will be given three options on how you would create your launcher.
Those options are launcher icons made from an image, clipart, or text.
With the Text and Clipart method, you can easily create an icon you want
without thinking about the size and quality of the launcher icon.
With those two, you can just get a preset image from the SDK or Android to use as a launcher icon.
The same goes with the Text method, since all you need is to type the letters you want to appear on the icon,
and the SDK will generate an icon based on that.
The Launcher Icon Editor also allows you to change the background and foreground color of your icon.
Also, you can scale the text and clipart by changing the value of the additional padding of the icon.
And finally, you can add simple 3D shapes on your icon to make it appear more professional.
Bitmap Iconography Tips
When it comes to images, you need to take note of a few reminders.
First, always make sure that you will use vector images.
Unlike the typical bitmap images, pictures taken from cameras or images created using paint,
vector images provide accurate and sharp images.
You can scale it multiple times, but its sharpness will not disappear and will not pixelate.
After all, vector images do not contain information about pixels.
It only has numbers and location of the colors and lines that will appear in it.
When it is scaled, it does not perform anti-aliasing or stretching,
since its image will be mathematically rendered.
In case that you will be the one creating or designing the image that you will use for the program
and you will be creating a bitmap image,
make sure that you start with a large image.
A large image is easier to create and design.
Also, since in Android, multiple sizes of your icon will be needed,
a large icon can make it easier for you to make smaller ones.
Take note that if you scale a big picture into a small one,
some details will be lost, but it will be easier to edit and fix and it will still look crisp.
On the other hand, if you scale a small image into a big one,
it will pixelate and insert details that you do not intend to show,
such as jagged and blurred lines.
Nevertheless, even when scaling down a big image into a smaller one,
do not forget to rework the image.
Remember that a poor-looking icon makes people think that the app you are selling is low-quality.
And again, if you do not want to go through all that, create a vector image instead.
Also, when you create an image, make sure that it will be visible in any background.
Aside from that, it is advisable to make it appear uniform with other Android icons.
To do that, make sure that your image has distinct silhouettes that will make it look like a 3D image.
The icon should appear as if you were looking above it and as if the source of light is on top of the image.
The topmost part of the icon should appear lighter and the bottom part should appear darker.
Activity
Once you are done with your icon, click on the Next button.
The page will now show the Activity window.
It will provide you with Activity templates to work on.
The window has a preview box where you can see what your app will look like for every Activity template.
Below the section, there is a description box that will tell you what each template does.
For now, select the blank Activity and click Next.
The next page will ask you some details regarding the Activity.
Leave it on its default values and click Finish.
Once you do that, Eclipse will set up your new project.
It might take a lot of time, especially if you are using a dated computer.
The next chapter will discuss the programming interface of Eclipse.
Chapter 3. Getting Familiar with Eclipse and Contents of an Android App
When Eclipse has finished its preparations, you will be able to start doing something to your program.
But hold on to your horses.
Explore Eclipse first before you start fiddling with anything.
Editing Area
In the middle of the screen, you will see a preview of your program.
In it, you will see your program's icon beside the title of your program.
Just left of it is the palette window.
It contains all the elements that you can place in your program.
Both of these windows are inside Eclipse's editing area.
You will be spending most of your time here, especially if you are going to edit or view something in your code or layout.
The Form Widgets tab will be expanded in the palette by default.
There you will see regular things you see in an Android app, such as buttons, radio buttons, progress bar, the circle icon that spins when something is loading in your device, or the bar that fills up when your device is loading, seek bar, and the ratings bar, the stars you see in reviews.
Aside from the Form Widgets, there are other elements that you can check and use.
Press the horizontal tabs or buttons and examine all the elements that you can possibly use in your program.
To insert a widget in your program, you can just drag the element you want to include from the palette and drop it in your program's preview.
Eclipse will provide you visual markers and grid snaps for you to place the widgets you want on the exact place you want.
Easy, right?
Take note, some of the widgets on the palette may require higher-level APIs or versions of Android.
For example, the grid layout from the Layouts section of the palette requires API 14, Android 4.0 Ice Cream Sandwich or higher.
If you add it into your program, it will ask you if you want to install it.
In case you did include and install it, remember that it will not be compatible for older versions or any device running on API 13 and lower.
It is advisable that you do not include any element that asks for installation.
It might result into errors.
Output Area, Status Bar, and Problem Browser
On the bottom part of Eclipse, the Status Bar, Problem Browser, and Output Area can be found.
It will contain messages regarding the state of your project.
If Eclipse found errors in your program, it will be listed there.
Always check the Problems Bar for any issues.
Take note that you cannot run or compile your program if Eclipse finds at least one error in your project.
Navigation Pane
On the leftmost part of your screen is the Navigation Pane that contains the Package Explorer.
The Package Explorer lets you browse all the files that are included in your project.
Three of the most important files that you should know where to look for are
ActivityMain.xml
This file is your program's main page or window, and it will be the initial file that will be opened when you create a new project.
MainActivity.java
As of now, you will not need to touch this file.
However, it is important to know where it is, since later in your Android development activities, you will need to understand it and its contents.
AndroidManifest.xml
It contains the essential information that you have set up a while ago when you were creating your project file in Eclipse.
You can edit the minimum and target SDK in there.
Aside from those files, you should take note of the following directories.
Source
This is where most of your program source files will be placed, and your main activity file is located.
Res
Most of the resources will be placed here.
The resources are placed in the subdirectories under this folder.
ResDrawableHDPI
Your high-density bitmap files that you might show in your app will go in here.
Res
Layout
All the pages or interface in your app will be located here, including ActivityMain.xml
Res
Values
The values you will store and use in your program will be placed in this directory in form of XML files.
In the event that you will create multiple projects, remember that the directory for those other projects, aside from the one you have opened, will still be available in your Package Explorer.
Because of that, you might get confused over the files you are working on.
Thankfully, Eclipse's title bar indicates the location and name of the file you are editing, which makes it easier to know what is currently active on the editing area.
Outline Box
Displays the current structure of the file you are editing.
The Outline Panel will help you visualize the flow and design of your app.
Also, it can help you find the widgets you want to edit.
Properties Box
Whenever you are editing a layout file, the Properties Box will appear below the Outline Box.
With the Properties Box, you can edit certain characteristics of a widget.
For example, if you click on the Hello World text on the preview of your main activity layout file, the contents of the Properties Box will be populated.
In there, you can edit the properties of the text element that you have clicked.
You can change the text, height, width, and even its font color.
Menu and Toolbar
The Menu bar contains all the major functionalities of Eclipse.
In case you do not know where the button of a certain tool is located, you can just invoke that tool's function on the Menu bar.
On the other hand, the toolbar houses all the major functions in Eclipse.
The most notable buttons there are the New, Save, and Run.
As of now, look around Eclipse's interface.
Also, do not do or change anything of the main activity file or any other program.
The next chapter will discuss how to run your program.
As of now, the initial content of your project are also valid as an Android program.
Do not change anything since you might produce an unexpected error.
Nevertheless, if you really do want to change something, go ahead.
You can just create another project for you to keep up with the next chapter.
Chapter 4, Running Your Program
By this time, even if you have not done anything yet to your program, you can already run and test it in your Android device or emulator.
Why teach this before the actual programming?
Well, unlike typical computer program development, Android app development is a bit bothersome when it comes to testing.
First, the program that you are developing is intended for Android devices.
You cannot actually run it normally in your computer without the help of an emulator.
And you will actually do a lot of testing.
Even with the first lines of code or changes in your program, you will surely want to test it.
Second, the Android emulator works slow.
Even with good computers, the emulator that comes with the Android SDK is painstakingly sluggish.
Alternatively, you can use BlueStacks.
BlueStacks is a free Android emulator that works better than the SDK's emulator.
It can even run games with it.
However, it is buggy and does not work well and does not even run sometimes with every computer.
This chapter will focus on running your program in your Android device.
You need to have a USB data cable and connect your computer in Android.
Also, you will need to have the right drivers for your device to work as a testing platform for the programs you will develop.
Unfortunately, this is the preferred method for most beginners since running your app on Android emulators can bring a lot more trouble since it is super slow.
And that might even discourage you to continue Android app development.
Why Android emulators are slow
Why are Android emulators slow?
Computers can run virtual OSes without any problem, but why can't the Android emulator work fine?
Running virtual OSes is not something as resource extensive anymore with today's computer standards.
However, with Android, you will actually emulate an OS together with a mobile device.
And nowadays, these mobile devices are as powerful as some of the dated computers back then.
Regular computers will definitely have a hard time with that kind of payload from an Android emulator.
Luckily, there is a way for developers that have computers using Intel processors to ease up the burden of the Android SDK's emulator.
And that is to download the Intel x86 Atom System Image and Intel x86 Atom System Image packages for the Android version they are going to use in the emulator.
It can speed up the emulating process, but do expect that it may or not be as fast as you would want it to be.
USB Debugging Mode
To run your program in an Android device, connect your Android to your computer.
After that, set your Android into USB Debugging Mode.
Depending on the version of the Android device you are using, the steps might change.
For 3.2 and older Android devices, go to Settings, Application Development.
For 4.0 and newer, go to Settings, Developer Options.
For 4.2 and newer Android devices with hidden developer options, go to Settings, About Phone.
After that, tap the Build Number 7 times.
Go back to the previous screen.
The developer options should be visible now.
Android Device Drivers
When USB Debugging is enabled, your computer will install the right drivers for the Android device that you have.
If your computer does not have the right drivers, you will not be able to run your program on your device.
If that happens to you, visit the page developer.android.com.
It contains instructions on how you can install the right driver for your device and operating system.
Running an App in your Android Device Using Eclipse
Once your device is already connected and you have the right drivers for it, you can now do a test run of your application.
On your Eclipse window, click the Run button on the toolbar or in the main menu.
If a Run As window appeared, select the Android Application option and click on the OK button.
After that, a dialog box will appear.
It will provide you with two options, running the program on an Android device or on an AVD, Android Virtual Device or Emulator.
If your computer properly identified your device, it will appear on the list.
Click on your device's name and click OK.
Eclipse will compile your Android app.
Install it on your device and then run it.
That is how simple it is.
Take note, there will be times that your device will appear offline on the list.
In case that happens, there are two simple fixes that you can do to make it appear online again.
Number one, restart your device.
Number two, disable and enable the USB debugging function on your device.
Now, you can start placing widgets on your main activity file.
However, always make sure that you do not place any widgets that require higher APIs.
Conclusion
Thank you again for downloading this book.
I hope this book was able to help you get started with Android.
The next step is to study the following.
Relative, Linear and Table Layout.
When it comes to designing your app, you need to know the different types of layouts.
In later versions of Android, you can use other versions of layouts, but of course, the API requirement will go up if you use them.
Master these and you will be able to design faster and cleaner.
Adding activities or interface
Of course, you would not want your program to contain one page only.
You need more.
You must let your app customers see more content and functions.
In order to do that, you will need to learn adding activities to your program.
This is the part when developing your Android app will be tricky.
You will not be able to rely completely on the drag-and-drop function and graphical layout view of Eclipse.
You will need to start typing some code into your program.
Adding the action bar
The action bar is one of the most useful elements in Android apps.
It provides the best location for the most used functions in your program.
And it also aids your users when switching views, tabs, or drop-down lists.
Chapter 7 discusses more about action bars.
Learning more about programming
The programming course in this book is not enough to let you make good programs.
You should learn more about flow control statements, iteration statements, and basic creation of methods in your app.
Surely you will gain more power in creating your apps once you have a better grasp in programming in Android by writing.
Adding Event Listeners
Event listeners are there to detect if the user of your app interacted to any of the elements in your app's screen.
Detecting those events can allow your app to react or do something in response.
For example, an event that you can listen into is OnClick.
When your user clicks something or clicks on a button, you can assign your program to do something like pushing a pop-up message on the screen.
Of course, adding Event Listeners will require you to program or write in your app's Java file.
Due to that, it is essential that you familiarize yourself with programming with Java or with the keywords and intricacies of Android apps.
Also, you should also start researching on how to import and use libraries and classes in your apps.
Those libraries and classes will give you access to more functions, bringing you greater freedom in your app development pursuit.
Once you have gained knowledge on those things, you will be able to launch a decent app on the market.
The last thing you might want to do is to learn how to make your program support other Android devices.
You must know very well that Android devices come in all shapes and form.
An Android device can be a tablet, a smartphone, or even a television.
Also, they come with different screen sizes.
You cannot just expect that all your customers will be using 4-inch display smartphones.
Also, you should think about the versions of Android they are using.
Lastly, you must also add language options to your programs.
Even though English is fine, some users will appreciate if your program caters to the primary language that they use.
And that is about it for this book.
Make sure you do not stop learning Android app development.
Finally, if you enjoyed this book, please take the time to share your thoughts and post a review on Amazon.
We do our best to reach out to readers and provide the best value we can.
Your positive review will help us achieve that.
It would be greatly appreciated.
Thank you and good luck.
This has been Programming No. 45
Python Programming Professional Made Easy and Android Programming in a Day
Written by Sam Key
Narrated by Million Quinteros
Audible hopes you have enjoyed this program.
Thank you and good luck.
Thank you.
And that's the right thing for us.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
