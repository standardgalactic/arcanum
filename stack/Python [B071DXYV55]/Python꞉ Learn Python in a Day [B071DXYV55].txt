This is Audible.
Python. Learn Python in a Day.
Written by Mike R. Valli.
Narrated by Martin Gollery.
Preface.
Python is, without any doubt,
one of the few programming language
which are both simple and powerful.
It is a language that is good for beginners
as well as experts.
More importantly, it is fun to program with.
This book serves as a guide to help all newbies
learn this wonderful language
as well as helping the veterans upgrade their skills
on programming with Python.
You will find yourself pleasantly surprised
to see how easy it is to concentrate
and advance your skills on the solution to problems
involving programming
rather than the syntax and structure of this language.
Who this book is for?
If you're computer literate
and you want to learn a fun programming language
to have a better control of your computer
and show off your programming skills,
this book is for you.
If you're a system administrator
and you want to learn a great language
to help in achieving a better management
and configuration of computer systems
systems and networks, this book is for you.
In summary, this awesome book is for anyone interested
in exploring Python programming in an easy-to-learn manner.
Prerequisites
Although this book is designed for software programmers
who need to learn Python programming language from scratch,
you need to have the basic understanding
of the computer programming terminologies.
Chapter 1
Introduction to Python
1.1. History
Python is an interpreted, object-oriented programming language
that was developed by Guido Van Rossum.
The name comes from one of Van Rossum's favorite television shows,
The Monty Python's Flying Circus.
Python is easily portable
since Python interpreters are easily available
for most operating system platforms.
Although Python is copyrighted,
the source code is open source
and unlike new software,
it can be commercially sold.
1.2. What is Python?
Python is quite a powerful programming language
that is freely available
under GNU license
and that makes solving a computer problem
almost as easy
as writing out one's thought about the solution.
It can be written once
and run on almost any computer
without the need to change the program.
1. Python is interpreted.
That means that it is processed
at a runtime by the interpreter
and you do not need to compile the program
before executing it.
2. Python is interactive.
That means that you can actually sit
at a Python prompt
and interact with the interpreter
directly to write the programs.
3. Python is object-oriented.
This means that Python supports
object-oriented style
or technique of programming
that encapsulates code within objects.
4. Python is a beginner's language.
Python is a great language
for the beginner programmer
and supports the development
of many applications
from the simple text processing
to gaming applications.
1.3. Why learn Python?
Python is a remarkably powerful
dynamic programming language
that is used in a wide application domain
such as the web,
database access,
desktop GUIs,
game and software development,
and network programming.
The language itself
is a flexible powerhouse
that can handle
practically any application domain.
This general-purpose programming language
has the capabilities
of being used
on any modern computer operating system.
It may be easily used
for processing text,
images, numbers,
scientific data,
or anything that requires
computer manipulation.
It is used on every day
in the operations
of the Google search engine,
video sharing websites,
such as YouTube,
and on the stock exchange sites.
1.4. Major uses of Python
1. System utilities,
systems, admin, tools,
and command line programs.
2. Web development.
3. Graphical user interfaces
such as TKinter, GTK, QT.
4. Internet scripting.
5. Embedded scripting.
6. Database access and programming.
7. Game programming.
8. Rapid prototyping and development.
9. Distributed programming.
9. Chapter 2. Python Environment.
2.1. Getting ready for Python.
Python is available
from a wide variety of environments,
including Linux, Windows,
and Mac OS.
In this chapter,
we are going to learn
how to set up the Python environment,
the most up-to-date
and current source code,
documentation, binaries,
and download link
is available on the official website
of the Python.
Python official website,
http colon slash slash
www.python.org.
You can download
the Python documentation package
from the following site.
The documentation is available
in the formats of HTML,
PDF,
and Postscript formats.
Python documentation website,
www.python.org slash doc.
2.2. Installing Python.
Here we are going to install Python
on the three major
operating system platforms.
2.2.1.
Installing Python on Windows.
Setting up Python
for development
on Windows environment
turns out to be
an easy task.
Here are the steps
to install Python
on the Windows machine.
1. Open any web application browser
and go to www.python.org
slash download.
Follow the link
for the Windows installer
python-xyz.msi file
where XYZ is the version
that you need to install.
3. To use the installer
python-xyz.msi,
the Windows system
must be able
to use the Microsoft installer.
Save the installer file
to your machine
and then run it
to find out
if the machine
supports the MSI.
4. Run the downloaded file.
This will bring up
the Python install wizard
which is quite easy to use.
At this stage,
accept the default settings
then wait until
the install is finished.
2.2.2.
Installing Python
Python on Unix
slash Linux
Here are the simple steps
for installing Python
on a Unix
slash Linux machine.
1. Open a web browser
and go to
www.python.org
slash download.
2. Follow the link
to download
the zipped source code
that is available
for Unix
slash Linux.
3. Download
and extract
the files.
4. Edit the modules
or setup file
if you want to make
customization
of some options.
5. Run the
slash configure script
to make the installation.
2.2.3
Installing Python
on Mac OS
Of late,
Macs come with Python
installed.
However,
it may be
several years
out of date.
Open the link
www.python.org
slash download
slash mac
in order to get
the instructions
on getting
the current version
along with
other support tools.
2.3
Setting up the path
Programs
and other
executable files
can be available
in many directories.
Therefore,
operating systems
provide the search path
that outlines
the directories
that the operating system
searches for
executable.
This path
is stored
in an environment
variable
that is a named
string that is
maintained by
the operating system.
This is the variable
that contains
information
that is available
to the command shell
and other programs.
2.2.3
Setting path
at unix
slash linux
To add
the Python directory
or directories
to the path
for any particular
session in Unix,
follow the steps
below.
In the CSH shell,
type the following
setenv path
dollar sign
path
colon
slash
usr
slash local
slash bin
slash python
and press enter.
In the bash shell
in Linux,
type the following
export path
equals
dollar sign
path
colon
slash
user
slash local
slash bin
slash python
and press enter.
In the sh
or ksh shell,
type export path
equals
dollar sign
path
colon
slash
user
slash local
slash bin
slash python
and press enter.
Note
slash
slash user
slash local
slash bin
slash python
is the path
of the Python directory.
2.3.
2.
Setting the path
in Windows
To add the Python directory
or directories
to the path
for any particular
session in Windows,
follow the following steps.
at the command prompt
type
path
percent
path
percent
path
semicolon
c
colon
backslash
python
and press enter.
Note
c
colon
backslash
python
is the path
of the Python directory.
2.4.
Running Python
There are three main
different ways
to start Python.
2.4.1
Using Interactive
Interpreter
You can start Python
using Unix,
DOS,
or any other
operating system
that provides you
with a command line
interpreter
or a shell window.
Enter Python
in the command line
dollar python
pound sign
unix
slash
linux
or
python
percent
pound sign
unix
slash
linux
or
c
colon
greater than
python
pound
windows
slash
dos
2.4.2
Using Script
from the Command Line
A Python Script
A Python Script
can be executed
from the command line
by invoking the interpreter
on your application
as shown below.
dollar python
dollar python
script
dot
pi
pound
unix
slash
linux
or
python
percent
script
dot
pi
pound
unix
slash
linux
or
c
colon
greater than
python
script
dot
pi
pound
windows
slash
dos
2.4.3
Using an Integrated
Development
Environment
You can run
a Python program
from a
graphical user interface
GUI
environment
if you have a GUI
application
on your computer system
that supports
Python.
unix
idle
is the very first
unix IDE
for Python.
Windows
Python win
is the first
Windows interface
for Python.
Macintosh
The Macintosh
version of
Python
along with
the idle
IDE
is available
from the
main website.
Chapter 3
The World
of Variables
and Operators
3.1
Variables
A variable
is a set
memory location
where a programmer
can store
a value.
The value
stored in a
variable
can either
be accessed
or updated
later.
The interpreter
allocates the
memory
on the basis
of the data
type of a
variable.
Python is
completely
object-oriented
and not
statically typed.
This means
that you need
to declare
a variable
before using
them
or declare
their type.
In Python
each variable
is an object.
3.2
Declaring
Python Variables
In Python
variable names
follow set rules
and common
standards.
These are
1.
Must begin
with a letter
lowercase
a through z
uppercase
a b
or underscore
2.
Other characters
can be letters
numbers
or underscore
3.
They are
case sensitive
4.
They can be
of any
reasonable
length.
5.
There are
some reserved
words that a
programmer can't
use as a
variable name
because Python
uses them
for other
things.
3.2.1
A good
variable name
1.
Use a
meaningful name
instead of
a short
name.
Role
underscore
no
is better
than
rn
2.
Maintain
the length
of a
variable name
3.
Be consistent
4.
Begin
a variable
name
with an
underscore
character
for a
special
case.
3.3
Assigning
values
to variables
Python
variables
do not
need any
explicit
declaration
to reserve
memory space.
The declaration
will happen
automatically
when you
assign a
value to
a variable.
The equals
sign is
used in
assigning
values to
variables.
The operand
to the left
of the
equals
operator
is the
name of
the variable
and the
operand
to the right
of the
equals
operator
is the
value
stored
in the
variable.
Example
pound
bang
user
bin
python
counter
equals
100
an
integer
assignment
miles
equals
1000
point
zero
a
floating
point
name
equals
john
a
string
print
counter
print
miles
print
name
here the
100
1000
and
john
are the
values
assigned
to the
counter
miles
and name
variables
respectively.
The assignment
statement is
used in
creating
new
variables
and gives
them
values.
See the
example
below.
Item
name
equals
computer
a
string
item
quantity
equals
10
an
integer
item
value
equals
1000.23
a floating
point
print
item
name
print
item
quantity
print
item
value
results
are
computer
10
1000
.23
In
Python
assignment
statements
are read
right to
left
only.
a
equals
12
is a
correct
expression
but
12
equals
a
would
not
make
sense
to
Python.
See
the
example
in the
Python
shell
below.
a
equals
12
12
equals
a
syntax
error
cannot
assign
to
literal.
3.4
Multiple
Assignment
The basic
assignment
statement
in Python
works
for a
single
variable
and a
single
expression.
One
can
assign
a
single
value
to
more
than
one
variable
simultaneously.
See
the
example
below.
var
1
equals
var
2
equals
var
3
dot
dot
dot
equals
var
n
equals
expression.
For
example,
x
equals
y
equals
z
equals
1.
Another
example.
x
comma
y
comma
z
equals
1
comma
2
comma
a
b
c
d
In the
example
above
x
y
and
z
would
simultaneously
get the
new
values
1
2
and
abcd.
Below
are the
results
in the
python
shell.
x
equals
y
equals
z
equals
1
print
x
1
print
y
1
print
z
1
x
comma
y
comma
z
equals
1
comma
2
comma
abcd
print
x
1
print
y
2
print
z
abcd
3.5
python
operators
In the
programming
context
operators
are special
symbols
that represent
computations
and conditional
matching.
The values
that the
operator uses
are called
operands.
Python supports
the following
type of
operators.
1
arithmetic
operators
2
comparison
operators
3
logical
operators
4
assignment
operators
5
bitwise
operators
6
conditional
operators
3.5.1
Python
arithmetic
operators
Operator
plus
name
addition
Example
x
plus
y
result
the sum
of x
and y
Operator
minus
name
subtraction
Example
x
minus
y
result
is the
difference
of x
and y
Operator
star
name
multiplication
Example
x
star
y
product
of x
and y
Operator
slash
name
division
Example
x
slash
y
result
quotient
of x
and y
Operator
Percent
name
modulus
Example
x
percent
y
Result
remainder
of x
divided
by y
Operator
star
star
name
exponent
Example
x
star
star
y
Result
x
star
star
y
will give
x
to the
power
of y
Operator
slash
slash
name
floor
division
Example
x
slash
y
Result
the
division
of
Operands
where the
results
is the
quotient
in which
the digits
after the
decimal
point
are removed
Below
are the
Python
arithmetic
operators
in a
Python
shell
x
equals
14
y
equals
5
x
plus
y
addition
19
x
minus
y
subtraction
9
x
times
y
multiplication
70
x
slash
y
division
2.8
x
percent
y
modulus
4
x
star
star
y
exponent
537
824
x
slash
slash
y
floor
division
2
3.5
.2
Python
Comparison
Operators
Operator
equals
equals
name
equals
Example
x
equals
equals
y
Result
true
if
x
is
exactly
equal
to
y
Operator
exclamation
point
equal
name
not
equal
Example
x
exclamation
point
equals
y
Result
true
if
x
is
exactly
not
equal
to
y
Operator
greater
than
name
greater
than
Example
x
greater
than
y
Result
true
if
x
the left
hand
argument
is
greater
than
y
the right
hand
argument
Operator
less
than
name
less
than
Example
x
less
than
y
Result
true
if
x
the left
hand
argument
is
less
than
y
the right
hand
argument
Operator
greater
than
equal
sign
name
greater
than
or
equal
to
Example
x
greater
than
equal
to
y
Result
true
if
x
the left
hand
argument
is
greater
than
or
equal
to
y
the right
hand
argument
Operator
less
than
equals
name
less
than
or
equal
to
Example
x
less
than
equal
to
y
Result
true
if
x
the left
hand
argument
is
less
than
or
equal
to
y
the right
hand
argument
Below
are the
comparison
arithmetic
operators
in a
Python
shell
x
equals
12
y
equals
15
x
equals
equals
y
test
whether
x
and
y
are
equal
or
not
false
x
exclamation
point
equals
y
test
whether
or
not
x
is
exactly
equal
to
y
true
x
greater
than
why
test
whether
x
is
greater
than
why
or
not
false
x
less
than
y
test
whether
x
is
less
than
y
or
not
true
x
greater
than
equal
to
y
test
whether
x
is
greater
than
or equal to Y, false.
X less than or equal to Y.
Test whether X is less than or equal to Y, true.
3.5.3 Operator, AND
Example, X and Y.
Result, X is true if both X and Y are true.
Example, X is true if both X and Y are true.
Operator, OR.
Example, X or Y.
Result, X is true if either X or Y is true.
Operator, NOT.
Example, X not Y.
Result, if a condition is true then logical NOT operator will make false.
Follow are the logical arithmetic operators in a Python shell.
X equals 12, Y equals 15.
X greater than 10 AND Y greater than 10.
Test whether both X and Y are greater than 10, true.
X greater than 14 OR Y greater than 14.
Not either X greater than 14 OR Y greater than 14, true.
NOT X greater than 10 AND Y greater than 10.
Here both X and Y greater than 10, i.e.
X is greater than 10 AND Y is greater than 10, will return true, and NOT operator makes
it false.
False.
3.5.4 Assignment operators Operator, plus, equals, shorthand, X plus, equals, Y.
Expression, X equals, X plus, Y.
Description, adds two numbers and assigns the result to the left operand.
Star, equals, shorthand, X minus, equals, Y.
Expression, X equals, X minus, Y.
Subtracts two numbers and assigns the result to the left operand.
Star, equals, shorthand, X star, equals, Y.
Expression, X equals, X star, Y.
Expression, X equals, X slash, Y.
Divides two numbers and assigns the result to the left operand.
Percent, equals, shorthand, X percent, equals, Y.
Expression, X equals, X percent, Y.
Computes the modulus of two numbers and assigns the result to the left operand.
Star, star, equals, shorthand, X star, star, Y.
Expression, X equals, X star, star, Y.
Performs exponential power calculation on operators and assigns value to the equivalent to left operand.
Slash, slash, equals, shorthand, X slash, slash, equals, Y.
Expression, X equals, X slash, slash, Y.
Performs floor division on operators and assigns value to the left operand.
Below are the assignment arithmetic operators in a Python shell.
X equals 12, Y equals 7.
X plus equals Y.
Shorthand of X equals X plus Y.
Print X, 19.
X minus equals Y.
Shorthand of X equals X minus Y.
Current value of X is 19 and Y is 7.
Print X, 12.
X star equals Y.
Shorthand of X equals X star Y.
Current value of X is 12 and Y is 7.
Print X, 84.
X slash equals Y.
Shorthand of X equals X divided by Y.
Current value of X is 84 and Y is 7.
Print X, 12.
X percent equals Y.
Shorthand of X equals X percent Y.
Current value of X is 12 and Y is 7.
Print X, 5.
X star star equals Y.
Shorthand of X equals X star star Y.
Current value of X is 5 and Y is 7.
Print X, 78,125.
X slash slash equals Y.
Shorthand of X equals X slash slash Y.
Current value of X is 78,125 and Y is 7.
Print X, 11,160.
3.5.5, bitwise operators.
Operator, ampersand.
Shorthand, and.
Expression, X ampersand Y.
Description, bits that are set in both X and Y are set.
Operator, vertical line.
Operator, vertical line.
Shorthand, or.
Expression, X, vertical line Y.
Bits that are set in either X or Y are set.
Carat, X or.
Example, X, carat, Y.
Bits that are set in X or Y, but not both, are set.
Tilde, not.
Example, tilde X.
Bits that are set in X are not set, and vice versa.
Less than, less than, shift left.
X, less than, less than, Y.
Shift the bits of X, Y steps to the left.
Greater than, greater than.
Shift right.
X, greater than, greater than, Y.
Shift the bits of X, Y steps to the right.
3.5.6.
Conditional operators.
Conditional operators have the lowest priority in Python.
The expression, P if C, else Q first.
Evaluate the condition.
C, not P.
If C is true, then P is evaluated, and its value is returned.
Otherwise, Q is evaluated, and its result is returned.
Chapter 4.
Data Types in Python.
4.1.
In Python, data types represent the kind of value, and determines how the values can be used.
All the data values in Python are encapsulated on the relevant object classes.
In Python, everything is an object, and every object has an identity, a type, and value.
To determine a variable type in Python, you can make use of the type, open parentheses, close parentheses, function.
The value of some objects can thus be changed.
Objects whose value can be altered are called mutable, and those which cannot be changed are called immutable.
4.2.
Numbers.
Numbers are created by numeric literals.
These numeric objects are immutable, meaning that when an object is created, its value cannot be changed.
Python has three distinct numeric types.
These are
1.
Integers.
They represent negative and positive numbers without fractional parts.
2.
Floating point.
They represent negative and positive numbers with fractional parts.
3.
Boolean.
It is a subtype of plain integers.
Bool is the simplest, built-in type in Python, and represents the truth values of false and true.
See the example in the Python shell below.
3.
x equals complex, open parentheses, 1 comma 2, close parentheses.
Type x.
Class, complex.
Print x.
Open parentheses, 1 plus 2 j, close parentheses.
Z equals, 1 plus 2 j.
Type z.
Open bracket, class, complex.
Z equals 1 plus 2J. Type Z. Class Complex.
4.3. Strings. In Python language, a string type of object is a sequence of the left to right order of characters.
Strings normally start and end with single or double quotes.
In Python, strings are immutable. The single and double quoted strings are same, and a programmer can use single quotes within a string when the string is surrounded by double quotes, and vice versa.
Example. The example below is a screenshot from Python shell, which shows how strings are declared.
Str1 equals string. Strings start and end with double quotes. Print. Open parentheses. Str1 close parentheses. String.
Str3 equals double quotes. String. End double quotes. Strings start and end with single quotes.
Print. Open parentheses. Str2 close parentheses. String. Str3 equals double quote. String single quote.
String start and end with single quote.
Syntax error EOL while scanning string literal.
Str1 equals single quote string double quote.
Strings start with single quote and end with double quote.
Syntax error EOL while scanning string literal.
Syntax error EOL while scanning string literal.
STR2 equals, double quote, day, apostrophe, S, double quote, single quote within double quotes.
Print STR2, days.
STR2 equals, single quote, day, double quote, S, single quote, double quote within a single quote.
Print STR2, days.
4.3.1
Special Characters in Strings
The backslash character is used to introduce a special character shown in the examples below.
Backslash N, new line.
Backslash T, horizontal tab.
Backslash, backslash, backslash.
Backslash, single quote, single quote.
Backslash, double quote, double quote.
4.3.2
String Indices and Accessing String Elements
Strings are arrays of characters and elements from an array which can be accessed using indexing.
The indices start with 0 from the left side and minus 1 when starting from the right side.
4.3.3
Strings are immutable.
Strings are immutable.
Strings are immutable character sets.
Once a string has been generated, one can't change any character within the string.
See the example below.
String 1 equals double quote Python Tutorial.
Close double quote.
String 1, open bracket, 0, close bracket.
Single quote, P, single quote.
String 1, 0, equals A.
Try to change the first character of the string.
Traceback.
Most recent call last.
File, pi shell number 2, line 1 in module.
String 1, 0, equals A.
Try to change the first char of the string.
Type error.
STR object does not support item assignment.
String 1, 0, P.
4.3.4
The in character in strings.
The in operator is used to check whether a character or a substring is present in a string or not.
The expressions return a boolean value.
See the example below.
String 1 equals Python Tutorial.
2 in string 1, false.
Z in string 1, false.
Capital P in string 1, true.
Capital T-U-T in string 1, true.
4.3.5
String slicing.
This involves cutting a substring from a string.
Two indices are used, separated by a colon.
A slice, 3, colon 6 means indices, characters of 3rd, 4th, and 5th positions.
The second integer index, i.e., 6, is not included.
See the example below.
String 1.
String 1 equals Python Tutorial.
String 1, close.
String 1, open bracket, 0, colon 5, close bracket, first 5 characters, pytho.
String 1, open bracket, 3, colon 7, close bracket, characters of 3rd, 4th, 5th, and 6th indices.
Han.
String 1, open bracket, minus 4, colon, minus 1.
Characters of 4th, 3rd, and 2nd indices, from right.
RIA.
4.4.
Tuples.
A tuple is a container that holds a series of values that are separated by the use of
a comma between the items or elements between the parentheses.
Tuples are immutable as you can't change its content once created and can hold a mix of
data types.
To create a tuple, see the example below.
Tuple 1 equals, open parentheses, 0, minus 1, 12, 212.23, 100.
5 items with parentheses.
Type, Tuple 1.
Type function is used to get the type of Tuple 1.
Class, Tuple.
Print, Tuple 1.
0, minus 1, 12, 212.23, 100.
Tuple 2 equals, red, black, 2000, white.
5 items and mixed types.
Print, Tuple 2.
Red, black, 2000, white.
Tuple 3.
A1, B1, C1, D1.
5 items without parentheses.
Type, Tuple 3.
Type function is used to get the type of Tuple 3.
Class, Tuple.
Print, Tuple 3.
A1, B1, C1, D1.
To create or to create a tuple with a single element, you use the command below.
Empty, underscore, Tuple 1, equals, open parentheses, close parentheses.
This command creates an empty tuple.
Print, empty tuple.
Open parentheses, close parentheses.
Single, Tuple 1, equals, 100.
Creates a tuple of a single item.
Print, single, Tuple 1, 100.
Elements of a set tuple are indexed, like other sequences as shown below.
Tuple 2 equals, red, black, 2000, 12.12.
Print, Tuple 2.
Red, black, 2000, 12.12.
Print, Tuple 2, open brackets, 0, close brackets.
Return first element, red.
Print, Tuple 2, 3.
Return the last element, 12.12.
Print, Tuple 2, 4.
Trace back most recent call last.
File, pie shell number 4.
Line 1 in module.
Print, Tuple 2, 4.
Index error.
Tuple index, out of range.
4.4.1, using plus and star operators in tuples.
We use the plus operator to create a new tuple that is basically a concatenation of tuples
and use of the star operator to repeat a tuple as shown below.
Tuple 1 equals 1, 2, 3.
Tuple 2 equals 4, 5, 6.
Tuple 3 equals 7, 8, 9.
Tuple 1 plus Tuple 2 equals Tuple 1 plus Tuple 2 plus Tuple 3.
Concatenation of 3 tuples.
Print, Tuple 1, 2, 3.
1, 2, 3, 4, 5, 6, 7, 8, 9.
Print, Tuple 1, X, 4.
Repetition with star operator.
1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3.
4.5, Lists.
A list is a container that holds a comma-separated value between square brackets.
The elements or items need not have the same type.
Below is an example of creating list.
My list equals 5, 12, 13, 14.
The list contains all integer values.
Print, My list.
5, 12, 13, 14.
My list 2 equals red, blue, black, white.
The list contains all string values.
Print, My list 2.
Red, blue, black, white.
My list 3 equals red, 12, 112.12.
The list contains a string, an integer, and float values.
Print, My list 3.
Red, 12, 112.12.
A list without any element is called empty list, as shown below.
My list equals open bracket, close bracket.
Print, My list.
Open bracket, close bracket.
4.6, Sets.
A set is an unordered collection of unique elements.
Its basic use involves dealing with set theories, such as unions, intersections, and differences.
Sets are used in eliminating duplicate entries.
Below is an example.
A equals 1, 2, 1, 3, 0, 0, 4, 7, 8, 6.
B equals 5, 5, 7, 8, 7, 9, 6, 1, 1, 2.
S1 equals set A.
S1 equals set A.
Unique numbers in S1.
S2 equals set B.
Unique numbers in S2.
S1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9.
S1, 0, 1, 2, 3, 4, 6, 7, 8, 9.
S1 minus S2.
Numbers in S1, but not in S2.
Numbers in S1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9.
S1 and S2.
Numbers in both S1 and S2.
8, 1, 2, 6, 7.
S1, S1, S2.
Numbers in S1 or S2, but not both.
0, 3, 4, 5, 9.
4.7.
Dictionaries.
A Python dictionary is a container of an unordered set of objects, such as lists.
The objects are surrounded by the use of curly braces.
The items in a dictionary are comma separated.
Each object or value is accessed by key or keys that are unique in the dictionary.
You can create an empty dictionary by use of empty curly braces, as shown below.
Pd equals curly brace class colon V, comma, section colon A, comma, roll no, comma, 12.
Print Pd class, V.
Print Pd section, A.
Print Pd roll no, 12.
Print Pd, curly brace, section, colon, A, comma, class, colon, V, comma, roll no, colon, 12.
Chapter 5.
Making Python Program Interactive
If you are interested in learning a general-purpose and high-powered programming language, then Python is the way to go.
In this chapter, you will learn what's necessary to create an interactive program from a Linux shell.
5.1.
Using Python Interpreter
With the Python Interpreter, it is easy to check Python commands.
The Python Interpreter can be invoked by typing the command Python without any parameter, followed by the return key at the shell prompt, Python.
Python comes with the following information.
Python 2.5.2 R252 colon 60911 aug5 2015 19.20.17
GCC 4.3.2 on Linux 2.
Type help, copyright, credits, or license for more information.
Once the Python Interpreter is started, you can issue any command at the command prompt.
Greater than, greater than, greater than.
The first thing we are going to do is write the normal Hello World statement.
Print Hello World.
Hello World?
Python follows the usual order of operation in expression.
The standard order of operations is expressed in the following enumeration.
1.
Exponents and roots.
2.
Multiplication and division.
3.
Addition and subtraction.
This means we do not need parentheses in the expression 3 plus, open parentheses, 2, star, 4, close parentheses.
3 plus 2, star, 4.
11.
The most recent output value is stored automatically by the interpreter in a special variable with the name underscore,
so we can print the output from the recent example again by typing an underscore after the prompt.
3.
Underscore star 3, 33.
To close the Python Interactive Interpreter in Linux, type control D.
Executing a Python script.
Print.
It's easy to write a Python script.
It's easy to write a Python script.
The interactive interpreter is a great way for checking small bits of code.
However, if we have to write a serious program or script, we'll have to save the script to file.
To save a program in a file, we'll need an editor.
There are lots of editors, but you should make a choice of the one that supports syntax highlighting and indentation.
Under the Linux, you can choose Vi, Vim, Genie, Emacs, G-Edit, and Umpteen, among others.
After you have chosen your editor, you can input your mini script and save it as easy-to-write.py.
Under Linux, the suffix .py is not necessary, and it is good programming habit to use it.
5.2.1 Python Internals
Most probably you have read somewhere that Python is an interpreted programming or script language.
The truth of this statement is that Python is both an interpreted and compiled language.
The Python code is translated into intermediate code that has to be executed by a virtual machine known as the PVM Python virtual machine.
For whatever reason you may want to compile a Python program manually, it can be done by the use of the module py underscore compile, either by using the interpreter shell, import py underscore compile, py underscore compile dot compile, easy to write dot py,
or by using the command at the shell prompt, python dash m, py underscore compile, easy to write py.
However, you should not be bothered about compiling the Python code.
The compilation is hidden from the user.
If Python has the write access for the directory where the Python programs reside, it will thus store these compiled bytecode in a file that extends with a .pyc suffix.
If Python has no write access, the program will work anyway, but the bytecode will be produced and discarded when the program exits.
5.2.2 Compiler
A compiler is a computer program that transforms or translates the source code of programming language into another computer language.
Compilers are, in most cases, used to convert source code into an executable program.
They convert code from a high-level programming language into lower-level languages.
5.2.3 Interpreter
An interpreter is a computer program that is used to execute instructions written in a programming language.
It can be used to either run the source code directly or translate the source code in a first step into more efficient representation and execute the code.
5.3 Structuring with indentation
Most programming languages use some certain characters or keywords to group statements.
Begin, End, Do, Done, Dot Dot Dot Dot Dot
If, Un, Dot Dot Dot Dot Dot Dot
FI
Block 1, Offset, Block 2, Offset, Block 3, Block Block
Block 2 Continuation, Block 1, Continuation
Python uses a different principle. Programs get structured through indentation, meaning that the code blocks are defined by their indentation.
All the statements with the same distance to the right belong to the same block of code.
Statements within a block line up vertically. The block ends at a line less indented, or at the end of the file.
If any block has to be more deeply nested, it is simply indented further to the right.
5.4. Input. There are no any programs without any input.
Input can come from various ways, from a database, from mouse clicks, or from the Internet.
Python provided the function input. Open parentheses, close parentheses.
Input has an optional parameter that the prompt screen.
If the input is called, the program flow will be stopped until the user given input and has ended the input with a return key.
The text of the optional parameter, i.e., the prompt, will thus be printed on the screen.
The input of the programmer will be interpreted.
If the user, for example, puts in an integer value, this input function returns the integer value.
If the programmer, on the other hand, inputs, say, a list, the function will return a list.
Below is an example.
Name equals input. What is your name?
Print. Nice to meet you.
Age equals input. Your age.
Print. So, you are already, plus str, open parentheses, age, close parentheses, plus years old, plus name, exclamation point.
We save the program as input plus test pi, and run it.
Below is the output.
Dollar sign, Python, input, test pi.
What's your name?
Frank.
Nice to meet you, Frank.
You're age 30.
So, you are already 30 years old, Frank.
5.5. Output.
When a beginner starts to learn programming, the essential things have priority.
The most programming logic involves how to assign values to variables, how to use conditional statements, and how to create loops.
This means that when one is beginning programming, they do not need to bother about the beauty of these outputs.
The most important component is to get some output and get the correct output.
It is possible to put the arguments inside of parentheses.
Chapter 6. Making Choices and Decisions
6.1. Conditional Statements
Decision-making is an anticipation of a condition occurring while execution of the program and specifying actions taken according to the conditions.
Decision structures are used to evaluate multiple expressions which produce true or false as the outcome.
You need to determine which actions to take and which statements to execute if the result is true or false.
Below is the general form of the general structure of a decision-making structure that is found in most of the programming languages.
6.2. The If Statement
The Python If Statement is the same as it is with other programming languages.
It executes a series of statements conditionally based on the value of a logical expression.
The syntax
If Expression
Statement
Underscore 1
Statement
Underscore 2
6.2. If Else
Statement
The If Else statement has two blocks. One follows the expression and the other follows the else clause.
Here is the syntax.
If Expression
Statement Underscore 1
Statement Underscore 2
Else
Statement Underscore 3
Statement Underscore 4
In the above case, the If Expression evaluates to true the same amount of indented statements following the If will be executed.
And if Statement evaluates to false, the same amount of indented statements following Else will be executed.
Below is an example.
A equals 10.
If A greater than 10, print, value of A is greater than 10.
Else, print, value of A is 10.
Output
The value of A is 10.
6.3. The Python Inline Code
You can create complex statements using only the graphical user interface, but you will inevitably encounter a certain situation in which the functionality provided by the GUI is insufficient.
In these case, you can create the InlineScript item to add Python code to your experiment.
You can do this approach by dragging the Python icon, the blue slash yellow icon, from ThenItemToolbar into the experiment sequence.
After you have done this, below is what appears.
As shown above, the InlineScript item consists of two tabs.
One is used for preparing phase, and the other for running the phase.
The prepare phase is executed first to prepare for the time-critical run phase.
The scripts that you enter are then used as the body of two functions of the InlineScript class.
6.4. Nested If-Else Statement
In general, the nested If-Else Statement is used when we want to check more than one conditions.
The conditions are executed from the top to bottom, and check each condition whether it evaluates true or not.
If a true condition is found in the statement, the statement's block associated with the condition executes, otherwise it goes to the next condition.
6.5. Loops
Python has four different loops, but it is a bit different from other like C or Pascal.
In Python, the for loop is used in iterating over the items in any sequence, including Python list, strings, tuples, etc.
The for loop is used in accessing elements from a container, for example, a list, strings, or tuple, using built-in function range.
Below is the syntax, for variable underscore name in sequence, statement 1, statement 2, dot, dot, dot.
The variable name indicates the target variable which will set a new variable for each iteration of the loop.
Sequence defines a sequence of values that will be assigned to the target variable, variable name.
Values that are provided using a list or a string, or from the built-in function range.
Statement 1 and statement 2 are blocks of program statements.
See the example below.
Color list equals red, blue, green, black.
The list have four elements, indices, start at 0 and end at 3.
For C in color list, print C, red, blue, green, black.
In the example above, the color list contains a list of various color names.
When the for loop executes, the first item which is red is assigned to the variable C.
After this process, the print statement will execute, and the process will continue until we reach the end of the list.
6.6 Python range function
The range function is used to return a list of consecutive integers.
The function has one, two, or three parameters where the last two parameters are optional.
It is widely used in loops.
Below is the syntax.
Range A, range AB, range ABC.
Range A generates a sequence of numbers from 0 to A, excluding A, incrementing by 1.
Example
For A in range 4, print A.
0, 1, 2, 3
Range AB generates a sequence of numbers from A to B, excluding B, incrementing by 1.
For A in range 2, 7, print A, 2, 3, 4, 5, 6.
Range ABC generates a sequence of numbers from A to B, excluding B, incrementing by C.
Example
For A in range 2, 19, 5, print A, 2, 7, 12, 17.
6.7 While loop
Loops are used to repeatedly execute blocks of program statements.
The basic syntax of while loop is while expression, statement 1, statement 2, dot, dot, dot.
The while loop will run as long as the expression, condition, evaluates to true and execute the
program block.
The condition is then checked every time at the beginning of the loop, and the first time
when the expression evaluates false, the loop stops without executing any remaining statements.
The following example prints the digits 0 through 4 as we set the condition x less than 5.
x equals 0, while x less than 5, print x.
x plus equals 1.
Output 0, 1, 2, 3, 4
Using the while loop, if the initial test returns false, the body is not executed at all.
The following is an example of an infinite while loop, using true as the condition.
x equals 10.
While true, print x.
x plus equals 1.
You can attach an optional else clause with the while statement as shown below.
While expression, statement 1, statement 2, dot, dot, dot.
Else, statement 3, statement 4, dot, dot, dot.
The while loop is used to repeatedly test the expression, condition, then if it is true,
it executes the first block of the program statements.
The else clause gets to be executed only when the condition is false.
It may be the first time it is tested, and will not execute if the loop breaks, or in case
an exception is raised.
If a break statement executes in the first program block, and terminates the loop, then
the else clause will not execute.
Below is an example where the while loop calculates the sum of the integers from 0 to 9, and after
the completion of the loop, the else statement executes.
See the example below.
x equals 0, s equals 0.
While x less than 10, s equals s plus x.
x equals x plus 1.
Else, print the sum of the first 9 integers, comma, s.
Output, the sum of the first 9 integers, 45.
6.8, break.
We use the break statement to exit a for or a while loop.
This statement is used to end the execution of the loop, for or while, immediately, and
the program controls goes to the statement after the last statement of the loop.
If there is an optional else statement in the while of the for loop, it will skip the optional
clause 2.
Below is the syntax.
While expression 1, statement 1, statement 2, dot dot dot.
If expression 2, break.
Below is an example of a break used in a for loop.
None underscore sum equals 0.
Count equals 0.
While count less than 10.
Number 1, num sum equals num sum plus count.
Count equals count plus 1.
If count equals equals 5, break.
Print sum of first, count.
Integers is num sum.
Output, sum of the first 5 integers is 15.
6.9, continue.
The continue statement is used in programming in a while or for loop to take control of the
top of the loop without executing the rest statements inside the loop.
Below is an example.
For x in range 6, if x equals equals 3 or x equals equals 6, continue.
Print x.
Output, 0, 1, 2, 3, 4, 5.
Chapter 7.
Function and Modules.
7.1.
In all the programming and scripting languages, a function refers to a block of program statements
that are used repetitively in a program.
Functions are to save the programmer's time.
There are some inbuilt functions that are part of the Python language.
7.2.
The user-defined functions.
In the Python language, a user-defined function declaration begins with a keyword def and is
followed by the function name.
Functions may take an argument or arguments as inputs within an opening and closing parentheses,
just after the function name followed by a colon.
After defining the function name and the argument or arguments of a block of program statements
starts at the next line and these statements must be indented.
The syntax.
Def function name argument1 argument2 dot dot dot statement1 statement2 dot dot dot.
7.3.
Call function.
Calling a function in the Python language is similar to how it is done in the other programming
languages.
You make use of a function name, a parentheses, and the parameters.
See the syntax below.
Function name arg1, arg2.
Example.
Def AVG number x, y.
Print average of x and y is x plus y over 2.
AVG number 3, 4.
Output.
The average of 3 and 4 is 3.5.
7.3.1.
Function without arguments.
Below is an example of a function that has no arguments.
Def function name.
Statement 1, statement 2, dot dot dot.
Below is an example.
Def print.
Print.
This is a Python function tutorial.
Print.
This is a Python function tutorial.
Print.
This is a Python function tutorial.
Print.
Output.
This is a Python function tutorial.
This is a Python function tutorial.
This is a Python function tutorial.
7.2.2.
Return statement in functions.
In Python, the return statement is used to return a value from a function.
The return statement without an expression argument returns none.
Below is the syntax.
Def function name.
Argument 1, argument 2, dot dot dot.
Statement 1, statement 2, dot dot dot.
Return expression.
Function name.
Arg 1, arg 2.
Below is an example.
Def n square x y.
Return x star x plus 2 star x star y plus y star y.
Print.
The square of the sum of 2 and 3 is n square.
The square of the sum of 2 and 3 is 25.
7.4.
Default argument values.
In functions parameters list, we can specify the default values for one or more arguments.
A default value can be written in the format argument 1 equals value.
This will therefore give us the option of declaring or not declaring a value for those statements.
Below is an example of a function that returns the square of the sum of two numbers where the default value of the second argument is 2.
Def n square x y equals 2.
Return x star x plus 2 star x star.
Print.
Print.
The square of the sum of 2 and 2 is n square.
Print.
The square of the sum of 2 and 3 is n square.
The square of the sum of 2 and 2 is 16.
The square of the sum of 2 and 4 is 36.
7.5. Python Module
Modules make a simple way to organize a program which contains a program code, variables, etc.
All the definitions and statements are contained in a single Python file
where the name of the module has the .py extension.
Modules are not loaded unless executed in a Python interpreter or called within a program.
In Python, the modules are contained in the standard library, current directories, or directories that contain the .py files.
7.5.1 Defining a Module
In order to define a module, we use the Python IDLE, the Notepad++, or any other suitable text editor.
Below is an example of a file called factorial.py that shows an example of defining a module.
The factorial.py file creates the factorial of a positive integer as well as some other jobs in the current directory.
Pound sign factorial .py
Def fact cal n
Pound create the factorial of positive integer
Fact equals 1
While n greater than 0, fact star equals n
n equals n minus 1
If n less than 0, break
If n less than equals 1, break
Else
Pound display the message if n is not a positive integer
Print input a correct number
Return
Return fact
Def fact data n
Hash
Return the numbers of factorial x
Result equals
Open bracket
Open bracket
Close bracket
While n greater than 0, result dot append n
Capital n equals n minus 1
If n equals equals 0, break
Else
Display the message if n is not a positive integer
Print input a correct number
Return
Return result
Importing a Module
In order to use a module, we use the import statement
This is done by the Python interpreter and executed as shown below
Import factorial
7.5.3
From import statement
The from dot dot import statement is used to import selective names or all the names that a module defines
From fact cal import fact cal
From factorial import fact cal
Fact cal 9
362,880
Fact data 9
Traceback
Most recent call last
File
Pyshell number 2
Line 1 in module
Fact data 9
Name error
Fact data is not defined
From factorial import
Fact cal 9
362,880
Fact data 9
987654321
7.5.4
The dir function
The built-in is used to get the names, assorted list of strings of how the module is defined
See an example in the Python shell below
Import factorial sys
DIR factorial
DIR sys
Chapter 8
Working with files
8.1
Opening and reading text files in Python
In Python, you don't need to import any library to read and write files
You do this by getting a file object and using the open function
Text files can be edited by any program that edits plain text and are easy to process in
any programming language
Python provides two inbuilt functions to read a line, form a text, and this by default
comes from the keyboard
These functions include rawinput, input
The input function is equivalent to rawinput except that it assumes that the input is a valid
Python expression and returns the evaluated results to the user
Example
String equals input
Enter your input
Print received input is string
This prompts the user to enter any string and it will display same string on the screen
Below is the example
Enter your input
Hello Python
Received input ID
Hello Python
The input function is equivalent to the raw function except that it assumes the input is a valid Python expression
And returns the evaluated results back to the user
8.2
Using a for loop to read text files
For reading from a line, you can loop over the file object
It is memory efficient, fast, and leads to a simple code
Here is an example
File equals open newfile.txt r
For line in file, print line
In text files, lines are broken up by special invisible characters that mark the end of the line
These invisible characters are called control characters
In Python, the control characters at the end of a line are always represented as backslash n
And you can use backslash n in a string anywhere that you want to break a line
Example
Print
I want two lines, exclamation point, backslash n
The new line character gives me the two lines
Output
I want two lines
The new line character gives me the two lines
8.3
Writing to a file
When you open a file, you can optionally specify a file mode which tells Python what you want to do with the file
The default mode is R for read
But there is another mode, W, to write a file
Example
F equals open
Awesome newfile.txt
W
The W mode will write completely new content to a file, wiping out what it had previously written
Hint
File objects have a method for writing
You can find out about it by viewing the built-in help for the file object
In the Python notebook, you can type
F equals open
Awesome newfile.txt
W
F?
8.4
Opening and reading text files by buffer size
Before you can read or write a file, you have to open it using Python's built-in open
function
This function creates a file object which would be used to call other support methods
associated with it
Buffering
If buffering value is set to 0, no buffering will take place
If the buffering value is 1, line buffering is going to be performed while accessing a file
In case you make a specification of the buffering value to be greater than 1, then the buffering
action is performed with the indicated buffer size
In case of negative, the buffer size is the system default
The file object provides a set of access methods to make the life of a programmer easier
We use read and write methods to read and write files
8.5.1
The write method
The write method writes any string to an open file
It is important to note that the Python strings can be binary data and not just text
Syntax
The write method reads a string from an open file
It is important to note that Python strings can have binary data apart from text data
Syntax
FileObject.readCount
8.6 Deleting and Renaming Files
The Python OS module provides methods that help the user to perform file processing operations such as renaming and deleting files
8.6.1
The rename method
The rename method takes two arguments
The current file name and the new file name
Syntax
OS.rename current file name new file name
Example
Rename a file from test1.text to test2.text
OS.rename test1.text test2.text
8.6.2
The remove method
You can use the remove method to delete files by supplying the name of the file to be deleted as the argument
Syntax
OS.remove
FileName
Example
Delete file text2.text
OS.remove
Text2.text
Project 1
A Python program to solve quadratic equation
To have a better understanding of this example, make sure you have a better understanding of
Python variables and data types, Python input, output, and import and Python operators
Question
Solve the quadratic equation AX star star 2 plus BX plus C equals 0
Solution
Solution
In this program we ask the user for the coefficients of the quadratic equation
We are going to import the CMATH module to perform complex square root
First, we are going to calculate the discriminant and then find the two solutions of the quadratic equation
Solve the quadratic equation AX star star 2 plus BX plus C equals 0
Coefficients A, B, and C are provided by the user
Import complex math module
Import CMATH
A equals float
Input
Enter A
B equals float
Input
Enter B
C equals float
Input
Enter C
Hash
Calculate the discriminant
D equals B star star 2 minus 4 star A star C
Hash
Find two solutions
Sol 1 equals minus B minus CMATH dot square root D over 2A
Sol 2 equals minus B plus CMATH dot square root D
Slash 2 star 2 star A
Print
Print
The solution
Are 0 and 1
Format
Sol 1
Comma
Sol 2
Output
Enter A
1
Enter B
5
Enter C
6
Project 2
Project 2
Project 2
A Python program to find numbers divisible by another number
To understand this project you need understanding of the Python anonymous slash lambda function and the Python list
Question
Write a Python program to find numbers divisible by 13 from a list
Solution
In this program we are going to use the anonymous lambda function inside the filter built in function to find all the numbers divisible by 13 in the list using anonymous function
Hash
Python program to find numbers divisible by 13 from a list using anonymous function
Hash
Take a list of numbers
My list equals 12, 65, 54, 39, 102, 339, 221
Hash
Use anonymous function to filter
Result equals list filter lambda x x percent 13 equals equals 0 my list
Hash
Display the result
Print
Numbers divisible by 13 are result
Output
Numbers divisible by 13 are 65, 39, 221
Project 3
Python program to find the sum of natural numbers
To understand this example you should have the knowledge of the Python if, elif, else and nested if and the Python while loop
Question
Python program to find the sum of natural numbers up to n where n is provided by user
Solution
Here we ask the user for a number and display the sum of the natural numbers up to that number
We make use of the while loop to iterate until the number becomes 0
Program to find the sum of natural numbers up to n where n is provided by user
Hash
Take input from the user
Num equals int
Input
Enter a number
If num less than 0
Print
Enter a positive number
Else
Sum equals 0
Use while loop to iterate until 0
While num greater than 0
Sum plus equals num
Num minus equals 1
Print
The sum is sum
Output
Enter a number
16
The sum is 136
Note
We could have solved this problem using any loop
From mathematics we know that the sum of natural numbers is given by n star
Open parentheses n plus 1 close parentheses slash 2
We could have used this formula directly
For example if n equals 16 the sum would be 16 star 17 slash 2 equals 136
Appendix A
Working with strings
This appendix briefly talks about string manipulation techniques in Python
Having an understanding on how to manipulate strings plays a crucial role in most text processing tasks
If you would like to work with the experiments discussed in this appendix
You can use the Python shell slash terminal to try them
Manipulating Python strings
If you have been exposed to another programming language before
You might have learned that you need to declare or type variables before you can store anything in them
This is not necessary when working with strings in Python
We can create a string simply by putting content that is wrapped with quotation marks into it with an equal sign
Message equals
Hello world
Adding and multiplying string operators
As mentioned before a string is a type of object that consists of a series of characters
Python already knows how to deal with a number of general purpose and powerful presentations including strings
One way to do that is by the use of string operators
These operators are represented by symbols used in mathematics such as plus, minus, star, slash, and equals
Concatenate
This term means joining strings together
The process is known as concatenating strings and it is done using the plus operator
You must be explicit about where you want blank spaces to occur by placing them between single quotation marks
In this example the string message 1 is given the content hello world
Message 1 equals hello plus plus world
Print message 1 hello world
Multiply
If you want to multiply copies of strings you use the multiplication star operator
In this example string message 2a is given the content hello times 3
String message 2b is given content world
Then we print both strings
Message 2a equals hello times 3
Message 2b equals world
Print message 2a plus message 2b
Hello hello hello world
Append
What if you want to add material to the end of a string successfully?
There is a special operator for that plus equals
Message 3 equals howdy
Message 3 plus equals
Message 3 plus equals world
Print message 3
Howdy world
String methods
Finding
Changing
In addition to the operators Python comes pre-installed with dozens of string methods
That allow you to do things to the strings
When used alone or in combination these methods can do just about anything you can imagine to strings
Length
You can determine the number of characters in a string using len
Message 4 equals hello plus space plus world
Print len message 4
11
Find
You can search a string or a substring
And your program will return the starting index position of that substring
This is helpful for further processing
Indexes are numbered from left to right
And that the count starts with position 0, not 1
Message 5 equals hello world
Message 5a equals message5.find world
If the substring is not present, the program will return a value of minus 1
Message 6 equals hello world
Message 6b equals message6.find dog
Print message6b
Print message6b
Minus 1
Lowercase
Sometimes it is useful to convert a string to lowercase as shown in this example
Message 7 equals hello world
All caps
Message 7a equals message7.lower
Print message7a
Hello world
Appendix B
Working with lists
The list type is a container that holds a number of other object in a given order
The list type implements the sequence protocol and also allows one to add or remove objects from the sequence
Creating lists
To create a list, put a number expression in the square brackets
L equals
Open square bracket
Close square bracket
L equals
Open square bracket
Expression
Dot dot dot
Close square bracket
This construct is known as a list display
Python supports computed lists called list comprehensions
In its simplest form, a list comprehension has the syntax shown below
L equals
Open bracket
Expression for variable in sequence
Close bracket
Where the expression is evaluated once
For every item in the sequence
You can equally make use of the built-in list type object to create lists
L equals
List
Hash
Empty list
L equals
List
Sequence
L equals
List
Expression for variable in sequence
Accessing list
Lists implement the standard sequence interface
LEN L returns the number of items in the list
L I returns the item at index I
The first item has index 0
And L I colon J return a new list containing the objects between I and J
N equals LEN L
Item equals L
Item equals L index
Seek equals L start stop
If you pass in a negative index, Python adds the length of the list to the index
L minus 1 can be used to access the last item in a list
Looping over list
Looping over lists
The for in statement makes it easy to loop over the items in a list
For item in L, print item
If you need the index and the item, make use of the enumerate function
For index, item in enumerate L
Print index
The list object supports the iterator protocol
To explicitly create an iterator, use the built-in ITER function
Modifying lists
The list type allows one to assign the individual items or slices and to delete them
L I equals OBJ
L I colon J equals sequence
Note that the operations that modify the list will modify it in place
This is to mean that if you have multiple variables that point to the same list, all variables will
be updated at the same time
L equals open bracket close bracket
M equals L
Hash modify both lists
L append obj
Searching lists
The in operator can be used to check if an item is present in the list
If value in L, print list contains value
To get the index of the matching item, use index
I equals L dot index value
The index method does a linear search and stops at the first matching item
If no matching item is found, it raises the value error exception
Try I equals L dot index value
Accept value error
I equals minus 1
No match
Sorting lists
The sort method sorts a list in place
To get a sorted copy, use the built-in sorted function
Out equals sorted L
By default, Python's sort algorithm determines the sort by comparing the objects in the lit
Against each other
You can override this by passing in a callable object that make two items and returns minus 1 for less than, 0 for equal, and 1 for greater than
Printing lists
By default, the list does a repr on all items and adds brackets and commas as necessary
In other words, for built-in types, the printable lists look like the corresponding list display
Print 123
Hashtag prints 123
To control formatting, use the string join method combined with either map or a list comprehension or generator expression
Print quote quote dot join L
Hashtag if all items are strings
Print quote comma space quote dot join dot join map string L
Print quote backslash quote dot join string V for V in L if V greater than 0
Appendix C, working with tuples
A tuple is a collection that is used to create complex lists in Python
You can embed one tuple within another
This embedding lets you create hierarchies within the tuples
A hierarchy can be something as simple as the directory listing of your hard drive
Or an organizational chart for the company
Basically, tuples are used to create complex data structures
The biggest difference between a tuple and a list is that tuples are immutable
And allows one to embed one tuple inside another
Lists are mutable, which means you can change them
Creating tuples
Creating a tuple is as simple as putting different comma-separated values
And you can put these comma-separated values between parentheses
Example
Tuple equals, open parentheses, A, B, C, D, E
Tuple 2 equals, 1, 3, 8, 67
An empty tuple in Python is written as two parentheses containing nothing
Tuple equals, open parentheses, close parentheses
Accessing Values in Tuples
To access values in tuples, use the square bracket for slicing along the index or indices
To obtain value available at the index
Example
Tuple 2 equals, A, B, C
Tuple 3 equals, SDLC, Zone, Web, Site
Tuple 2, 0, A
Tuple 2, open bracket, 10, close bracket
Traceback, most recent call last
File, standard in, line 1 in module
Index error, tuple index out of range
Tuple 3, open bracket, 1, close bracket, Zone
Tuple 3, open bracket, 2, close bracket, Web
Updating tuples in Python
Tuples are immutable and this means you can't update or change the values of the tuple elements
Tuple operations
Tuples respond to the plus and star operators much like strings
They can be concatenated, repeated, except that the result is a new tuple and not a string
Example
X equals, H, A, I
X star 3
H, A, I, H, A, I
X equals, COM
X times 3
COM, COM, COM
I in X, false
X equals, H, A, I
I in X, true
Tuple 1 equals, 1, 2, 3, 4, 5
Tuple 2 equals, 1, 2, 3, 4, 5, 6, 7, 8, 9
Min, tuple 1, 1
Max, tuple 2, 9
Len, tuple 1, 5
Deleting tuples
Deleting individual tuple elements is not possible
There is nothing wrong with putting together another tuple with the undesired elements discarded
Example
Tuple 2, SDLC, Zone, Web, Site, Com
Tuple 2 equals, open parenthesis, close parenthesis
Tuple 2, open parenthesis, close parenthesis
Tuple 2, 1
Trace back, most recent call last
File standard in, line 1 in module
Index error, tuple index out of range
Tuple 2 equals, 1, 2, 3, 4, 5, 6, 7, 8
Del tuple 2, tuple 2
Trace back, most recent call last
File standard in, line 1 in module
Name error, name tuple 2 is not defined
Appendix D, working with dictionaries
A dictionary is an unordered collection of objects
Both strings and lists are sequentially ordered
Which means you can access their content using an index
A number that starts at 0
If you have a list containing strings
You can use the pair of indexes to access the first particular strings in the list
And then a particular character within the string
Below is an example
S equals, hello, world
Print S, open bracket, 0, close bracket, H
Print S, 1, E
M equals, hello, world
Print M, open bracket, 0, close bracket, hello
Print M, open bracket, 1, close bracket, world
Print M, open bracket, 0, close bracket, open bracket, 1, close bracket, E
Print M, open bracket, 1, close bracket, open bracket, 0, close bracket, W
Keeping track of frequencies
Since a dictionary is an unordered collection of frequencies, this means that we can't use
an index to retrieve elements from it.
You can, however, look them up by the use of a key, hence the name dictionary.
See the example below.
d equals world, one, hello, zero, print d, hello, print d, hello, zero, print d, world, one, print d dot keys, world, hello.
Word frequency pairs.
We can create a function that converts a list of words into a dictionary of the word frequency
pairs.
The only new command that we will need is a dict, which makes the dictionary from a list
of pairs.
Below is an example of the code extract.
Copy it and add to the obo.py module.
Hash.
Given a list of words, return a dictionary of word frequency pairs.
def wordlist to freakdict wordlist.
wordfreak equals wordlist dot count p for p in wordlist.
Return dict zip wordlist dot wordfreak.
This has been Python.
Learn Python in a day.
Written by Mike R. Valley.
Narrated by Martin Gallery.
Copyright 2015 by Mike R. Valley.
Production copyright 2015 by Martin Gallery.
Audible hopes you have enjoyed this program.
hab換 known part.
Tell me about context for talks.
Speak.
Go to my host.
We'll see you now.
Go to my host.
Elsie Lee downen par here.
Come.
Go around next.
Ok.
Come, stop.
Here we go from college.
Arryah to be wider.
Will you look so short?
Don't know.
Hey, 21, please.
Turn or see you.
Which happens anytime again to my poblate diagnosis.
I dare come back on time to show you.
I'm sorry.
Turn here to pull my orinte rays.
