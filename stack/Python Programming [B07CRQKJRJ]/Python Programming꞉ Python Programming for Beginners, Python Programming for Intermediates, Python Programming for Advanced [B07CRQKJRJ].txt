This is Audible.
Python Programming for Beginners, a comprehensive guide to learning the basics of Python programming.
Written by Adam Stewart. Narrated by Corey Schaefer.
Introduction
Getting started in coding can be tough.
You may have looked at a few of the most popular coding languages, such as C++ or Java, and been a bit scared by what you saw.
The pages may have been filled to the brim with letters and symbols that you just didn't understand, and you became frustrated and just wanted to walk away.
Many people are scared of programming and feel like it is just too hard for them.
But with the Python programming language, you will find that it can be easier than ever to learn about coding and to even read it like a professional.
This guidebook is going to give you some of the basics that you need to get started with Python programming.
We will start out a bit talking about what Python programming is, as well as some of the steps that you should take in order to download the program, if it isn't already present on your computer, and give you some more information to really understand why this program is so great.
We will then move on to some keywords that will be useful to you when starting out with the program, and even talk about the benefits and the drawbacks of using Python for all your coding and programming needs.
The rest of the guidebook is devoted to talking about some of the different things that you can do with the Python program, as well as some examples of how each of these would work.
We talk about adding comments into the code, working with strings and integers, and even spend some time working with variables so that they will show up right in the program.
It is a great idea to experiment a bit with the process.
Python makes it easy to test out your strings so that you can figure out what is going to work and what needs some more practice.
Getting started in programming can seem like a challenge.
You may worry that you aren't going to be able to figure it all out, and all of those crazy programming languages may have scared you away in the first place.
This guidebook is going to spend some time looking at the Python language and exploring how easy it can be to get started with this simple program.
Chapter 1. Learning About Python
The computer world has brought in many different types of people.
Some are interested in making money creating their own programs to sell to others.
Some just like to mess around and learn different things about how the computer will work.
And still others have devoted their lives to programming, making it the product that brings home their income each month,
whether they work at repairing computers, work in a corporation to keep the computer safe, or doing some other aspect of computer technology.
When it comes to computer technology, nothing is going to be simple.
Before you can get a program to work on the computer, it needs to receive the right code to make it work.
There are several options for code creation that a computer tech can choose, including Java, C++, and Python.
Here we will explore a bit about Python and why it is often preferred over the other two programming options.
Before you are able to start using Python to take over your programming needs,
it is important to start learning more about it and all the great benefits you will receive when using this program.
Python is a high-level programming tool, which means that it is easy to use and read, even as a beginner.
The philosophy behind the code is readability, and it is a type of syntax that allows the programmer to express their concepts without having pages of code along with it.
Compared to other popular codes, like Java and C++, this can make Python much easier to complete.
The philosophy of this code language is simple enough to use.
It believes that a simple design is so much better than a complex one and that readability is important.
This is a great language for beginners to get started on because they will actually be able to read and understand the code they are putting in.
With other options, they may have to spend a lot of time trying to get the code just right, adding in many other symbols to get it to work.
But with Python, it is kept much simpler, and you may find that it is easier to read through the lines and see what you are doing.
Some of the features that you may like with Python include
an elegant syntax, which will make the program so easy to read,
language that is easy to use so that the program will work without a lot of bugs if you are doing ad hoc programming tasks or prototype development,
because it works well without issues with maintaining the program,
has a large library that will work with other programming tasks such as changing files, searching for text, and connecting with web servers.
Python is really interactive.
This makes it easier for you to test out small bits of code to see if they work.
You can also bundle it with a development environment called Idle.
If you would like to expand the programming language, it is easy to extend into other modules like C or C++.
Python programming can be run on any unit, including Unix, Linux, Windows, and Mac OS X.
The software is free. You won't have to pay anything to download and use Python in your own life.
You can also make modifications and redistribute this product.
It is under a license, but it is an open source license so others are able to use it.
Even though Python is a simple programming language, it does contain some advanced features like list comprehensions and generators.
Errors can be caught quickly in this program.
Since data types are dynamically typed, when you mix types together that don't match, it will raise an exception for you to notice.
You can group the codes into packages and modules if needed.
There is a wide variety of basic data types that you can choose from, including dictionaries, lists, strings, and numbers.
The origins of Python
The beginning of the modern Python programming started in December of 1989.
The creator of this program was Guido van Roussem, who began programming as more of a hobby.
At the time, van Roussem was working on a project with the Dutch CWI Research Institute that was later terminated.
Van Roussem was able to use some of the basics of this new language, known as the ABC language, in order to work on Python.
The main strength of this language is that it is really easy to extend upon to make more complex or keep simple, and it was able to support multiple platforms.
Both of these were important during the days when personal computers were becoming popular, and since Python was designed to communicate with different file formats and libraries, it became a hit as well.
Python has grown quite a bit since its inception, and more tools have been added to make the programming more functioning.
In addition to making Python easy to use, van Roussem has been working on initiatives that encourage the education of coding to everyone, not just a select few.
Using Python to use coding can make things easier and helps to get rid of some of the fears associated with the complex computer codes, since it doesn't look so scary.
Over the years, van Roussem decided to make Python open-sourced.
This allowed all to gain access and make changes to Python so that if something happened to van Roussem, all would not be lost.
Thanks to having Python open-sourced, Python 2.0 was released during 2000 to make it more community-oriented and to have a transparent development process.
There are a few newer versions of Python 2.0 still being used, but Python 3 has been taking the world by storm, and most anticipate this will be the normal one used within the next few years.
Python 3
This version of Python was released in 2008.
It is not simply an update to the program, but a complete change in it.
While there are a lot of great features that come with this version, it doesn't have a backward compatibility, so you will have to make a choice between Python 2.0 and Python 3.
To make things easier, the programmers did make a little marker within the program that would show a coder what needed to be changed between the two programs when uploading.
Despite this, most have stuck with Python 2.0 for now.
Why use Python?
As you can probably guess, there are several different computer coding programs that you can choose to use.
But while there are some benefits to using these other programs, Python is one of the best options out there.
It is easy to use, has a lot of options for you to choose from, and it can even be used over a variety of platforms without having to change things up.
Some of the benefits that you will love with Python include readability.
Python is designed to work with the English language, making it easy to read.
There are also strict rules in terms of punctuation on the program, so you aren't just looking at brackets all over the place.
Python also makes sure that the programmer knows how to format everything thanks to a set of rules that are in place, making it easy for everyone to create a code that others can follow.
Libraries
Python has been around for over 25 years now, and since it is one of the easiest codes to learn how to use, there have been quite a few different codes written using the system.
The good news is that this system is open-sourced so that the code is available for any programmer to use.
You can install the Python program in your own system and use it for your own personal use.
Whether you are using the code to finish off a product or to write some of your own codes, the library of Python is easy to use.
The codes that you want will be installed into the libraries, and since the program has been around for a long time, they are going to cover pretty much whatever you want from automating your server to making changes to a picture.
Community
Since Python is so popular, the community for Python is pretty big.
There are conferences with lots of networking and workshops available for this program product, and lots of places you can visit, both online and offline, to ask questions or learn more about the program.
You may want to consider checking out a few of these places if you are a beginner with Python, as it can help you to learn more and even to meet some new people.
If you are interested in getting started with coding, Python is one of the best options that you can make.
It is simple to get started on, and since it will work on a variety of different platforms, it is sure to work on your personal computer.
Since it is easy to read, you will find that coding doesn't have to be a challenge, and you can create your own or learn from others in no time.
Chapter 2. The Benefits and Negatives of Python
Python is a great program to use whether you are a beginner in the programming world, or you have been into it for some time.
Many of those who are just looking at getting started with programming will jump right in with Python and make it their own.
It is simple to understand and can be used by anyone who is ready to get started with coding.
This chapter is going to take some time to explain some of the positives, as well as some of the drawbacks of using Python for your programming language.
The Benefits of Python
Python is probably one of the best programming languages that you can choose to use.
Beginners are going to love how easy it is to turn on this program and start writing their own codes, even without experience, and there is plenty to enjoy when you are a professional or an expert as well.
Some of the benefits that you will get when you get started with Python include
Easy to use and read
When it comes to programming language, there are none that are as easy to use as Python.
Other languages are kind of clunky and hard to look at.
You may take a look at them and notice that they have tons of brackets and even words that you won't even recognize.
It is enough to scare away someone who isn't used to programming at all just because all the words look a bit intimidating.
Python is a bit different. Instead of all the crazy brackets, it makes use of indentations, causing an easier-to-read page that isn't such a mess.
Instead of words that you can't understand, it uses English.
The other special characters are kept to a minimum so that you can look at the page of coding and not feel like you are going to be overwhelmed in the process.
This is one of the easiest programming tools that you can use.
It looks nice on the page and will use plenty of white spaces, when it can, to make it easier to read what you should know.
There are plenty of places with comments so you can get clarification if a program is too confusing for you.
Overall, it is one of the best programming languages to use to really get ahead or even to learn about programming.
Uses English as the main language
Since English is the language that this program is based off, it is really easy to read.
There aren't a lot of words that you won't get, and you won't have to spend time trying to figure out what it is telling you.
The program is all in English, and you will love how simple this can make things.
Always present on some computers
In some cases, Python is already present on your computer.
Mac OS X systems, as well as those with Ubuntu, will already have Python preloaded.
You will simply need to download a text interpreter to get started.
In terms of using Python on Windows computers, all you need to do is download the program.
Python works with all these programs, even if it isn't installed right from the beginning.
It can work with other programming languages.
In the beginning, you will most likely only use Python on its own.
It is a great program to learn with and grow with.
But over time, you may decide that you want to try something new
that Python can't do on its own.
Luckily, Python is able to work with several other programming languages,
such as C++ and JavaScript, so you can mess around, learn some more,
and really get the code that you were looking for, even if Python is not able to do all the work.
Can test out things with the interpreter
When you download Python, you are going to have to download a text interpreter too.
This will make it easier for Python to read through your information.
You can use simple products that are sometimes already on your computer,
such as Notepad from Windows, or look for another interpreter that may be a bit easier.
Once you pick out the interpreter that you would like to use, it is time to get to work writing the code.
Some of those who are new to coding may feel worried about trying to get the code to work.
This is another spot where Python can make things easier.
It will be able to take the words that you are typing and spit them back out, with the help of the interpreter, in just a few seconds.
You can test what you are doing while you are working on it.
There are so many benefits of using the Python program. Beginners are going to love how readily available this program is, and how easy it is to learn some of the simple commands in no time.
Even those who have been programming for some time will be impressed by how this all works.
The Negatives of Python
While there are a lot of reasons to love Python, it is important to realize that there are a few negatives that you should watch out for.
These negatives include...
It doesn't have a lot of speed.
For those who are looking to work with a program that has a lot of speed, Python may not always be the best option for you.
It is an interpreted language, so this will slow it down compared to some of the other options that are compiled languages.
However, it does depend on what you are translating.
There are certain benchmarks with the Python code that can run faster using PyPy compared to other codes.
Luckily, this issue with the slow speed in Python is being remedied.
Programmers are working to make the interpreting speed of Python faster so that you won't have to compare it with others so much.
Over time, the hope is that Python will be able to work at the same speed as C and C++, or even some of the newer programming languages that are coming out.
Python is a great option to use if you have a regular computer.
It is available on many desktop and server platforms to help you create the code that you are looking for.
But it is not ready to go into mobile computing.
Since there is such a big increase in revenue and people going into the mobile industry, it is sad that this programming language hasn't kept up with the trends like others.
Perhaps in the future, Python will decide to go into the future and develop a version that will be able to work well with various mobile devices.
Until then, programmers will have to be satisfied with using it on their desktop and laptop computers.
If you are looking to work with a program that has a lot of design options, the Python program may not be the right option for you.
The design language is not up to what you will find with some of the other options.
Since you are working with a program that is dynamically typed, it takes more testing and can have more errors that will only show up when you are running the program.
The global interpreter lock means that you can only have one thread access the internals of Python at a time.
This may not be as important anymore since it is easy to spawn the tasks out to different processes, but the design is not as nice as some of the other options that you would like.
A good way to work with the design is to remember that indentation is important with Python.
Other programming languages are going to use a lot of brackets to show the differences in lines and information inside the program, but Python is going to rely on indentations.
Make sure to be careful with using this to avoid issues and errors that can come up.
Python can be one of the best programs that you use to write your own codes and have some fun.
While there are a lot of benefits to using this program, especially compared to some of the other ones that aren't as easy to read,
it is important to understand both the positives and the negatives of each option before you jump in.
Chapter 3 Common Terms You Should Know With Python
Before you get too far into your programming with Python, it is important to understand some of the words that can make the programming easier to understand.
This chapter is going to take some time to look at the different words that are common in Python programming,
and which we do talk about a bit in this guidebook, to help avoid some confusion and to help you get started with your first code.
Class
This is a template that was used for creating user-defined objects.
DocString
This is a string that will appear lexically first expression inside a module, function, or class definition.
The object will be available to documentation tools.
Function
This is a block of code that is invoked when using a calling program.
It is best used in order to provide a calculation or an autonomous service.
Idle
This stands for Integrated Development Environment for Python.
This is the basic interpreter and the editor environment that you can use along with Python.
It is good for those who are just beginning with this and can work for those on a budget.
It is a clear example of code and won't waste a lot of time or space.
Immutable
This is an object within the code that is assigned a fixed value. This could include tuples, strings, and numbers.
You can't alter the object and you will need to create a new object with a different value and store it first.
This can be helpful in some cases, such as the keys in a dictionary.
Interactive
One thing a lot of beginners like about Python is that it is so interactive.
You can try out some different things in the interpreter and see how they will react right away in the results.
It is a good way to improve your programming skills, test out a new idea you have, and more.
List
This is a data type within Python that is built in.
It contains a mutable sequence of values that are sorted.
It can include immutable values of numbers and strings as well.
Mutable
These are the objects that will be available to change their value within the program,
but which are able to keep their original ID.
Object
Within Python, this is any data with a state, such as a value or an attribute,
as well as defined behavior or a method.
Python 3000
Python 2 and Python 3 are the main two types of Python that are available.
Many people have stuck with Python 2, since Python 3 does not have any backward compatibility,
and they like using the databases on the older version.
Python 3000 is a mythical option of Python that does allow this backward compatibility,
so you can use it in the Python 2.
String
This is one of the most basic types that you will find in Python that will store the text.
In Python 2, the string will store text so that the string type can then be used to hold
onto binary data.
Triple quoted string
This is a string that has three instances of either the single quote or the double quote.
It could have something like, start triple quote, I love tacos, and triple quote.
They are used for many reasons. They can help you to have a double and single quotes in a string,
and they make it easier to go over a few lines of code without issues.
It could have a double quote.
It could have a double quote.
Tuple
This is a data type that has been built into Python.
This data type is an immutable ordered sequence of values.
The sequence is the only part that is immutable.
It can contain some mutable values, such as having a dictionary inside it,
where the values can change.
Type
This is a category or sort of data that is represented in the programming languages.
These types are going to differ in their properties, including immutable and mutable options,
as well as in their functions and methods.
Python includes a few of these including dictionary types.
Tuple, list, floating point, long, integer, and string.
Chapter 4 Getting Started with Python
Now that we know some of the benefits of choosing this program, it is time to get started with it.
Before you are able to learn some of the great steps that are needed to make this program create
code for you, it is time to set up the environment.
For those who have a computer with Mac OS X or Ubuntu, you will already have Python installed on the system.
This can make things easier to get started, as you will just need to click on the icon to get started.
Windows computers will need to install Python.
While Python works just fine on Windows computers, it doesn't come pre-installed, so you will need to do this.
The following steps work for Windows 7 to 10.
Download Python
You can choose between Python 2 or Python 3.
Both are fantastic options, it just depends on which one will get the job done for you.
Click to run the Python installer.
When you get to the options, choose to customize installation.
You will see a box pop up.
Click on every box that is under optional features and then continue.
On the next screen, look for the advanced options and then choose where you would like to have Python installed.
Once you have gotten this far, the next part is to set up your path variable.
This is going to allow the user to include directories for all the components and packages that are needed.
To do this step, open up the control panel on the Windows computer.
You may have to look a bit for the next part, but look for user variables.
You can then either create a new one or edit an existing path.
To create a new path, select path as the name and add it to the directories that are there.
Make sure that each variable values is separated with a semicolon.
If you want to edit your existing path, you need to make sure that each value is on a different line.
Click on New and then put your directories on different lines.
Now you can open your command prompt.
To do this, click on Start, then Windows System, and then Command Prompt.
When the command prompt opens, you can type in Python.
This will load up the Python interpreter.
You can then type in Exit and hit Enter to get back to the command prompt.
Text Editor
You will not be able to program Python without having the text editor in place on your computer.
If you are using Windows, the Notepad function will work.
Make sure that you are not using Word, though.
It is not considered an editor and your code is not going to save on the system properly.
If you are considering getting a version of Notepad,
you will notice that Notepad++ is the best one to use on a Windows computer
and Text Wrangler is the best to use for Mac.
To set them up, do the following.
Windows
Download and then install Notepad++.
Once it is downloaded, open up the settings and click on Language Menu and Tab Settings.
Tick the box that is beside Expand Tabs.
Make sure that the value is at 4.
Click again to close.
Mac
Download and then install Text Wrangler.
You won't need to register to install the software, just click Cancel if there is a box that comes up asking for this.
Otherwise, follow the other instructions that come up on the screen to set this editor up.
Once the program is on your computer, it is time to learn more about the coding and functions that you can enjoy on Python.
Getting Idle
While you are setting up Python, make sure that you download the idle, or the integrated development and learning environment.
This should download along with Python if you are setting it up, but make sure to check into this while you are going through the process.
This is the environment that you are going to work with when you are on Python, and it can make things easy.
If you don't want to mess around with finding another environment, or you want to make the process as easy as possible for you as a beginner, this is the option for you.
The main features of using idle with your Python programming include
Integrated debugger with persistent breakpoints, call stack visibility, and stepping to make things easier.
Python shell that will highlight the syntax.
Multi-window text editor that can help with the indentation, highlighting, and completing the code.
Now, you can choose to use another environment, like those that we discussed above if needed.
But since this one often comes as an option with Python, and it is designed to work well with the system, there are many people who choose to go with this option.
That being said, there have been some issues in the past with idle having trouble focusing.
Won't copy some things, and some clients don't like the interface design.
You may want to try out this program ahead of time, and see if it is the right one for you, or if you would like to use one of the options above.
Getting Python set up on your computer is a pretty easy process.
There are already several types of computers that have the programming language already present, so you won't have to do any work,
and the rest of them simply need a quick download to complete.
You can wait just a short amount of time to get Python on your computer, and then you are good to go, and try out some of the codes you want to make.
Chapter 5. Learning the Basics of Python Programming
Now it is time to get to know a bit more about Python programming, and how you can make it work for you.
You will need to learn a bit more about the different keywords and the variables that come with Python,
so you are able to write the words that you want, and make the program perform a certain way.
Let's take a look at some of these basics of Python programming, so you can get started with your new code right away.
Keywords
When you are working on a new computer coding program, you are going to notice that each computer language will have certain keywords.
These are the words that are meant for a specific command or purpose in the language,
and you should try to avoid using them anywhere else.
If you do use these words in other parts of your code, you may end up with an error alert,
or the program not working properly.
The keywords that are reserved for Python include
and
pass
or not
non-local
none
lambda
is
in import
if
global
from
for
finally
false
except
else
l if
del
def
continue
class
break
assert
as
yield
with
while
try
true
return
raise
identifier names
When you are creating a new program in Python,
Python, you are going to work on creating quite a few entities, a combination of functions, classes, and variables.
All of these will be given a name that is also known as an identifier.
There are a few rules that you need to follow when forming an identifier in Python, including
It should contain letters, either uppercase or lowercase, or a combination of the two, numbers, and the underscore.
You should not see any spaces inside.
If you break one of these rules, the program will close on you and will show a syntax error.
In addition, you need to work on making identifiers that are legible to the human eye.
While the identifier may make sense to the computer and get through without causing issues on the computer,
a human is the one who will read through the code to use it themselves.
If the human eye doesn't understand what you are writing in a certain place, you could run into some issues.
Some of the rules that you should follow when creating an identifier that will be readable to the human eye include
The identifier should be descriptive.
You should pick out a name that is going to describe what is inside the variable, or will describe what it does.
You should be careful with using abbreviations that aren't necessary, because these always make things that are difficult.
While there are a lot of ways that you can write out your code,
you should be careful and stick with one rule throughout.
For example, both MyBestFriend, with the M, B, and F capitalized, and MyBestFriend, all lowercase, work in the coding world.
But pick one that you like and do it the same each time that you work in the program to avoid confusion.
You can also add in underscores into this, or numbers.
Just be careful that you keep things consistent.
Flow of Control
When working on the Python language, you are going to write out the statements in a list format,
just like you would when writing out a shopping list.
The computer will start with the first instruction,
before working through each of them in the order that you make them show up on the list.
So you will need to write out the controls that you want,
just like you would for your grocery shopping list, to make sure that the computer is reading it properly.
The computer will only stop reading through this list once it has done the final instruction to completion.
This is known as the Flow of Control.
This is an important way to get started.
You want to make sure that your Flow of Control is even and smooth for the computer to read.
This will make it easier to get the program to do what you would like without as many issues,
and ensures that the computer program doesn't get stuck, cause issues, or have something else go wrong.
Semicolons and Indentation
When you look at some of the other computer languages,
you will notice that there are a lot of curly brackets used to arrange the different blocks of code,
or to begin and end the statements.
This helps you remember to indent the code blocks in these languages,
to make the code easier to read,
although the computer will be able to read the different codes without the indentations just fine.
This type of coding can make it really difficult to read.
You will see a lot of unnecessary information that is required for the computer to read the code,
but can make it hard on the human eye to read this.
Python uses a different way of doing this,
mostly to help make it easier on the human eye to read what you have.
You are going to need to indent the code for this to work.
An example of this is
Hashtag
This function definition begins a new block.
New line
Def
add underscore numbers
parenthesis a comma b
end parenthesis
colon
New line
C
C equals
A
plus
B
New line
Hashtag
As is this one
New line
Return
C
Hashtag
This function definition begins a new block.
New line
If it is Saturday
New line
Print
parenthesis
It's Tuesday
It's Tuesday
Exclamation point
Close quote
New line
Hashtag
And this one is outside the block.
New line
Print
Parenthesis
Begin quote
Print this no matter what
Period
Close quote
Parenthesis
In addition
There are a lot of languages that will use a semicolon to tell when an instruction ends.
With Python though, you will use line ends to tell the computer when an instruction will end.
You will be able to use a semicolon if you have a few instructions that are on the same line,
but this is often considered bad form within the language.
Lettercase
Most computer languages will treat uppercase and lowercase letters the same,
but Python is one of the only ones that will be case sensitive.
This means that the lowercase and the uppercase letters will be treated differently in the system.
Keep in mind as well that all the reserved words will use lowercase except for none, false, and true.
These basics are going to make it easier to get started on the Python programming.
You need to take a bit of time to go through the program in order to get familiar with it.
You aren't going to need to become an expert,
but getting familiar with some of the text interpreter
and some of the other parts of the program can make it easier to use,
and you can learn how the different buttons will work even before you get started.
Try out a few of the examples above first to help you get started.
Python works to keep things as basic as possible
because it understands that most of its users are going to be beginners
or those who are tired of other complex languages.
As you can see here, and in the following chapters,
there are simple commands that you will be able to put forward
in order to get the program to work a specific way.
Study these, and you can make a great program without quite as much work.
Chapter 6. A bit more on comments
There are a lot of things that you can do in Python.
It is one of the most interactive options that you will run into
when getting started in programming and since it is so easy to use.
In this chapter, we will take some time to discuss more about comments
and some of the other aspects of Python so you are able to get started
and make your codes amazing in no time.
In Python programming, a comment is one that will start with the hashtag sign
and then will continue on until you get to the end of the line.
For example,
Hashtag, this would be a comment, new line,
print, parenthesis, start quote,
This would tell the computer to just print,
Hi, how are you?
All comments are ignored in the Python interpreter
because it is more of a footnote in the program
to tell the programmer or others who use the code
special things about the code.
They are basically there to say what the program is supposed to do
and how it will work.
It is a bit more detailed
and can be helpful without getting in the way of how the code works.
You will not need to leave a comment on every line
just when it is needed.
If the programmer feels that something needs explained better,
they would put in a comment
but don't expect to see it all over the place.
Python doesn't support any comments
that will go across several lines
so if you have a longer comment in the program,
figure out how to split it up
into different lines
with the hashtag sign in front of each part.
Writing and reading
Some programs are going to show the text you want on the screen
or they can request certain information.
You may want to start out the program code
by telling the reader what your program is all about.
Giving it a name or a title
can make things easier
so the other coder knows what is in the program
and can pick the right one for them.
The best way to get the right information to show up
is show a string literal
that will include the print function.
For those who don't know,
string literals are basically lines of text
that will be surrounded by some quotes,
either a single or double quote.
The type of quote that you use
isn't going to matter that much,
but if you use one type in the beginning of the phrase,
you should use it at the end.
So if there are double quotes
at the beginning of your phrase,
make sure that you keep up
with the double quotes at the end as well.
When you want the computer
to display a word or phrase on the screen,
you would simply have print
and then the phrase after it.
For example,
if you want to portray welcome,
you would do
print parenthesis
begin quote
welcome
end quote
close parenthesis.
This will make it so that welcome
shows up on your program
for others to use.
The print function
is going to take up its own line,
so you will notice
that after putting this in,
the code will automatically
place you on a new line.
If you would like to have the visitor
do a certain action,
you can go with the same kind of idea.
For example,
say you want the person
to input a specific number
so that they can get through the code.
You would use the string
first underscore number
equals
input
opening parenthesis
quote
put the first number in
end quote
close parenthesis.
When using the input feature,
you won't automatically see it
print on a new line.
The text will be placed
right after the prompt.
You will also need to convert
the string into a number
for the program to work.
You don't need to have
a specific parameter
for this either.
If you do the following option
with just the parenthesis
and nothing inside,
you will get the same result
and sometimes make it easier.
Files
For the most part,
you will use the print function
to get a string
to print to the screen.
This is the default
of the print function,
but you can also use
this same function
as a good way
to write something into a file.
A good example of this is
with open
begin parenthesis
quote
my file dot txt
end quote
comma
begin quote
w
end quote
close parenthesis
as
my file
colon
new line
print
begin parenthesis
quote
hello
end quote
comma
file
equals
my file
close parenthesis
Now this may look
like a simple equation,
but there is quite a bit
that is going on
in the string above
that you should watch out for.
In the spot
with
you opened up
the my file dot txt
to write on
and then assigned it
to the variable
called my file.
Then the second part
you wrote in
hello
to the file
as a new line
and then the w
told the program
that you will only be able
to write the changes
when the file is open.
Of course,
you don't have to use
the print function
to get it to do
the work you want.
The write method
will often work well too.
For example,
you can replace
the print
with write
like the example below
to get the same things
with
open
parenthesis
quote
my file dot txt
end quote
comma
quote
w
end quote
close parenthesis
as
my file
colon
new line
my file dot
write
parenthesis
quote
hello
end quote
close parenthesis.
So far,
we have learned
how to print
a string of words
into the program
and even
how to save them
to a specific file.
In addition
to those options,
you can use
the read method
in order to open
a specific file
and then to read
the data that is there.
If you would like
to open
and read
a specific file,
use this option.
wif
open
parenthesis
quote
my file dot txt
end quote
comma
quote
r
end quote
close parenthesis
as
my file
colon
new line
data
equals
my file dot
read
parenthesis
end parenthesis
end parenthesis
With this option,
you will be able
to tell the program
to read the file's
contents
into variable data.
This can make it easier
to open up the programs
that you would like
to read.
Built-in types
Your computer
is capable
of processing
a lot of information
including numbers
and characters.
The types of information
that the Python program
will use
are known as types
and the language
will contain
many different types
to help make
things easier.
Some of these
include strings,
integers,
and floating point numbers.
Programmers
can even define
these different types
using classes.
Types will consist
of two separate parts.
The first part
is a domain
that will contain
a possible set
of values
and the second part
is a set
that contains
the possible operations.
Both of these
can be performed
on any value.
An example of this
is that if you have
a domain
that is a type
of integer,
it can only contain
integers inside it
including addition,
division,
multiplication,
and subtraction.
One thing to note
with this
is that Python
is a dynamically
typed program.
this means
that there really
isn't a need
to specify
the types
for the variables
when you create it.
The same variables
can be used
to store the values
of different types.
Despite this,
Python still needs
you to have
all the variables
with a definitive type.
For example,
if the programmer
tried to add in
a number to a string,
the Python program
would recognize this
and show an error.
It won't try
to figure out
what you wanted,
rather it will just
exit without trying.
Integers
If you want
to use integers
as a type,
you need to keep
them as whole numbers.
These can be
positive or negative
numbers,
as long as there
are no decimals
with these numbers.
If you have a decimal
point in the number,
even if the number
is 1.0,
you will need to use
it as a floating
point number instead.
Python is able
to display these
integers
in the print function,
but only if it
is the sole argument.
print,
parenthesis,
3,
end parenthesis,
hashtag,
let's add two
numbers together,
new line,
print,
parenthesis,
1 plus 2,
end parenthesis.
If you are using
integers,
you will not be
able to place
the two right
next to each
other.
This is mainly
because of how
Python is a
strongly typed
language and
won't recognize
them if you
combine them
together.
If you would
like to put the
number and the
string together,
you need to make
sure that the
number has turned
into a string.
Operator precedence
One thing that
you need to
keep track of
when you are
working in
Python is
operator precedence.
For example,
if you have
1 plus 2
divided by 3,
Python could
interpret it as
parenthesis 1 plus
2,
close parenthesis,
divided by 3,
or 1 plus
parenthesis 2
divided by 3,
close parenthesis.
Python has a
method that will
help you to
order the
operation properly,
so that you get
the right
information to
come up.
For example,
when it comes
to integer
operation,
Python is going
to handle
everything that
is brackets
first,
then it will
handle the
things that
have double
asterisks,
then single
asterisks,
and then
double forward
slash,
then percent
sign,
plus,
and finally
minus.
If you are
writing an
expression that
has a number
of operations in
it, you will
need to keep
those signs in
mind.
This will tell
Python how to
go through the
numbers so that
you get the
right answers at
the time.
Keep in mind
that most
arithmetic operators
are going to be
left associative,
so write it out
that way for
Python to read.
The only exception
is the double
asterisks feature.
For example,
hashtag,
double asteris
is right associative,
new line,
two,
double asterisks,
three,
double asterisks,
four,
new line,
hashtag,
will be evaluated
right to left,
new line,
two,
double asterisks,
parenthesis,
three,
double asterisks,
four,
end parenthesis.
Strings.
While a string
may seem like
something complicated,
in Python they are
basically a sequence
of characters.
They are going to
work the same way
as a list does,
but they will
contain a bit more
functionality that
is specific to the
text.
Formatting strings
can be a challenge
when it comes to
writing out your code.
There are some
messages that aren't
going to be fixed
string,
and sometimes
there are values
that are stored
inside variables
inside it.
There is a way
to get this to
work right for
string formatting.
An example of
this is
name equals
quote,
Janet,
close quote,
new line,
age equals
twenty-four,
new line,
print,
parenthesis,
quote,
hello,
my name is,
percentage sign,
s,
period,
close quote,
percentage sign,
name,
close parenthesis,
new line,
print,
parenthesis,
quote,
hello,
my name is,
percent sign,
s,
and I am,
percent sign,
d,
years old.
Close quote,
percent sign,
parenthesis,
name,
comma,
age,
close parenthesis,
close parenthesis.
The symbols
that have a
percent first
are called
placeholders.
The variables
that go into
these positions
will be placed
after the
percentage sign
in the order
that they are
placed in the
string.
If you are
doing just
a single string,
you will not
need a wrapper,
but if you do
have more than
one of these,
you need to
place them
into a tuple,
with a parenthesis
enclosing it.
The placeholder
symbols will start
with different
letters,
depending mostly
on the variable
type you are
using.
For example,
the name is
going to be
an integer,
but the name
is a string.
All of these
variables are
going to be
converted into
the string
before you can
add them
into the rest.
Escape
Sequences
Escape
sequences can
be used as
a way to
denote special
characters that
can be hard to
type on your
keyboard.
In addition,
they can be
used to denote
characters that
can be reserved
for something
else.
For example,
using AND in
the sequence can
confuse the
program, so you
may use the
escape sequence to
replace that like
the following
example.
print
parenthesis
quote
this is a
line
period
backslash
n
this is
another
line
period
end
quote
close
parenthesis
triple quotes
we have spent
a bit of time
talking about
both the
single and
double quotes
but there are
times when you
may need to
bring in the
triple quote.
this is used
when you need
to define a
literal that
will span many
lines or one
that already has
a lot of
quotes in it.
To do this,
just use a
single and
double together
or three
singles.
The same rule
applies with the
triple quote as
with all the
others.
You will need
to start and
end the phrase
with the same
one.
String
Operations
One of the
string operations
that you may
use a lot is
concatenation.
This is used
in order to
join a pair of
strings together
and you will
notice it is
there with the
plus symbol.
There are a lot
of functions that
Python is able
to help you
with and they
will work with
the strings to
create a variety
of operations.
They are going
to have some
useful options
that can do a
lot more in
the Python
program.
In Python
program,
strings are
called immutable.
This means that
once you create
this string,
it is not
capable of being
changed.
You may have
to assign a new
value to a
specific variable
that exists if
you are looking
to make some
changes.
There is so much
that you are able
to learn about
when it comes to
getting started
with Python.
It may be a
simple language,
but you want to
be able to learn
how it works,
how to write
things down
properly,
and even how to
leave a comment
for others to
understand when
they are looking
through the code.
It may seem a bit
intimidating in the
beginning, but
before too long,
and with some
practice, you will
get it down and be
writing your own
code in no time.
Chapter 7,
Variables and
What They Do
in Python
The next thing
that we are going
to discuss are
variables.
Variables are
basically the
labels that will
denote where in
your computer's
memory something
is going to be
stored, and they
can also hold
values.
When it comes to
programming that is
typed with statistics,
the variables will
each have a value
that is predetermined,
and each variable
is only going to
hold the value
of that type.
Python has made
it a bit easier
because you can
use one of your
variables in order
to store different
types.
Think about your
calculator for this
one.
The variable is
going to be like
the memory function
in this calculator.
It will hold on
to a value so that
you can retrieve it
at any time that
you want, but when
you store in a
newer value, the
older one will be
erased.
The only difference
is that you will
be able to have a
larger number of
variables, and
each of them will
have different
values, each of
them being referred
by their own
name.
With Python, you
will be able to
define a variable
by giving the
label a value.
For example, you
can name a
variable count and
have it an integer
value of one.
You would show
this by simply
writing count
equals one.
Note that with
this syntax, you
can assign a value
to the variable
with the same
name.
If you try to
access values in
a variable that
hasn't been
defined, the
Python interpreter
won't read through
this.
It will just exit out
of the program and
give you an error.
You can choose to
define a few
different variables in
one line, but this
is not the best
practice for you to
use.
For example, you
could do this.
Hashtag, let's
define three variables
at the same time.
And while that is
the correct way to
do things, it is
much better to
show it like this.
Hashtag, this is
the same as, new
line, count
equals zero, new
line, result
equals zero, new
line, total
equals zero.
It is much
easier to read the
second way and
will ensure that the
Python program is
going to understand
what you want it to
say.
Understanding the
scope of a
variable.
You won't be able
to access every
variable from all
parts of the
program and not
every variable will
be the same
length.
The way that you
define the variable
is going to
determine where and
how long you will
be able to access
this variable.
The section of your
program where you
can access the
variable is going
to be known as
the scope and the
time that the
variable will be
available is known
as the lifetime.
Global variables are
those that are
defined within the
main file body and
you will be able to
see these variables
throughout the entire
file as well as
inside a file that
will be able to
import the specific
file.
These variables have
far-reaching effects
and because of
this you may
notice some
consequences that
you didn't notice.
This is why most
people won't use
global variables or
they will use them
sparingly.
You should only add
stuff into the
global namespace if
you plan to use them
globally like with
functions or
classes.
On the other hand,
if you define a
variable inside of
another variable, it
will be called a
local variable.
This one has the
ability to be accessed
from where it is
defined and will only
exist when that
function executes.
These are only going
to be available in
certain areas of the
program and can't be
found or used
elsewhere.
The assignment
operator.
We have discussed
this option a bit
throughout the book
but haven't really
given it a name.
The assignment
operator is the
equal sign.
It is going to be
used in programming
to assign the
value to the right
of the statement to
the variable that is
located on the left.
Sometimes the
variable will be
created first.
In cases where the
value on the right
is from an
expression such as
an arithmetic
expression, the
evaluation will take
place before this
assignment happens.
Keep in mind that
the equal sign is
not going to be a
mathematical sign in
programming.
You can add things
to the number and
make all sorts of
changes that
wouldn't make sense
if you thought of
this sign as a
mathematical one.
Rather, it is an
assignment operator
so the statement
will be turned into
the part on the
right.
When you assign the
first value to this
variable, you are
going through the
process of
initializing.
The definition of a
value assignment and
variable are carried
out in the single
step in this
programming, although
it is sometimes done
in two steps with
some of the other
programming languages.
But since it is
done in one step,
it is less likely
that the user will
make a mistake and
receive an error in
the process.
Modifying Values
In some programming
languages, you will
be able to define a
special variable that
has a value that has
been set.
This means that the
value can't be
changed.
These are called
constants in the
programming language.
For the most part,
Python is not going
to allow for these
kinds of restrictions,
but there is a
convention that is
used to help ensure
that some variables
are marked to
indicate that the
values aren't
supposed to be
changed.
To show this, the
names will be written
in capital letters
with underscores
between each word.
An example of a
variable that is a
constant include
number underscore of
underscore days
underscore in
underscore a
underscore week
equals seven.
New line.
Number underscore of
underscore weeks
underscore in
underscore a
underscore year
equals fifty-two,
where all letters are
capitalized.
Of course, there are
no rules to say you
have to put the
right number at the
end.
You could say there
are eight days in a
week if you want,
because the Python
program won't be
keeping track, but it
is best to just keep
it accurate in case
other coders would
like to use it.
These can be really
helpful to you in
your string.
Sometimes in the
program, for example,
you will want to
change the maximum of
a number that is
allowed in the
program.
This may work
fine for a bit, but
maybe later on you
need to increase or
decrease this number.
Without setting up a
constant, you are
going to have to go
through and make
quite a few changes
to get everything
matched up.
But, with a good
constant in order,
you can just go back
to one place and get
it all fixed up.
Understanding how the
strings work in your
program can make a
big difference in the
success that you see
with this program.
You need to learn
where they are stored,
what the rules are
that govern each of
them, and how to
make them work in a
specific part of the
program.
With a bit of
practice and using
the guidelines above,
you will get this
down in no time and
can be an expert too.
Conclusion
Learning how to get
started with computer
programming can seem
like a big challenge.
There are many
different programming
options that you can
go with, but many of
them are hard to learn,
will take some time
to figure out, and
won't always do all
the stuff that you
need.
Many people fear that
they need to be really
smart, or have a lot of
education and experience
in coding, before they
are able to make it to
the coding level they
want.
But with Python, even a
beginner can get into
programming.
Python has made it so
easy to get started with
coding, whether you are
a beginner or have been
in this business for some
time.
The language is based in
English, so it is easy to
read, and it has gotten
rid of a lot of the
other symbols that make
coding hard to read for
others.
And since it is user
domain, anyone can make
changes and see other
codes to make things
easier.
This guidebook has spent
some time talking about
the different functions
that you can do in
Python, and how easy it
is for a beginner to get
started.
You will find that this
process is easy, and you
can learn it with a little
bit of practice.
It is easy to use, works
across a lot of
platforms, and it is
even the newer Mac
systems come with this
already downloaded.
When you are ready to get
started on programming, or
you want to find a
program that is going to
do a lot of great things
without all the hassle,
make sure to check out
Python.
This is one of the most
popular options when it
comes to programming, and
you are going to find that
it is easy to read and
learn, even if you have no
idea how to start in the
first place.
Use this guidebook to
learn some of the basic
functions, and to learn a
bit more about the Python
program.
This has been Python
Programming for Beginners, a
comprehensive guide to
learning the basics of
Python programming.
written by Adam Stewart, narrated
by Corey Schaefer, copyright 2016
by Ramandeep Shahi, production
copyright 2016 by Ramandeep
Shahi.
Python Programming for
Intermediates, written by Adam
Stewart, narrated by Corey
Schaefer.
Introduction
If you are looking for a
great program that will
allow you to write a great
code without all the hassle
or the messy code to read
through, going with Python is
one of the best options to
choose.
When you look at the code,
you will see that it is
really easy to read, even
when you have no experience
with writing code.
When you get started with
using it, you will see that
it is really easy to
understand and learn, even
though it still gives you the
power that you are used to
with some of the other
languages.
For those who have had some
experience with using
programming languages, this
is the guidebook for you.
It is a comprehensive look
at Python, providing some
more examples and in-depth
information on what you are
able to do with the codes
that you are learning.
Not only are you going to
get some information and a
few syntaxes that you are
going to have to figure out
on your own, but you also
get the chance to see some
of these in work and learn
how they will place on your
computer when working in
Python.
All of this will come
together to give you some
experience, as well as the
confidence that is needed to
do really well with the
Python language.
While you may have some of
the background information
in programming, or with
Python in particular, getting
started with this kind of
code is sometimes scary and
a bit confusing.
But with the help of this
book, you are going to get
some real-life experience to
work with, and it will be
easier than ever to get the
work done for you.
So when you are ready to put
some of your practical
learning to use, and you
want to have some actual
choices that will help you
see results when you want to
put your codes to work, make
sure to check out this
guidebook, and see how it
can all work out for you
without all the hassles or
headaches.
Chapter 1.
Getting Started with Python
Getting started with Python is
a surprisingly easy process.
You will love how simple this
program can be, and how it
will work on a lot of
different programs.
It is simple enough for the
beginner to read through once
they learn some of the tricks
of the trade, but it still has
the power that you want when
working on a programming
language.
It has the best of both
worlds, which is why this
programming language is one of
the best options out on the
market to choose from.
What is Python?
Python is a high-level
programming language that
will use object-oriented
programming, or OOP.
It is often used as a glue
language to help connect other
components together, and can
be used as a general-purpose
programming language.
Because it is so versatile, it
can be used with some of the
more powerful programming
languages, and easy to read.
It gets rid of some of the
brackets and other messy
stuff that is in other
languages.
It has been ranked as one of
the most popular languages for
programming in the whole
world.
If you are looking to create
things like scripting
interpreters, web applications,
and even applications on the
desktop, Python is the best
program for you.
It is considered open-source
right now, meaning that no one
owns the rights to using it
exclusively.
This provides you with many
different choices with the
language, as anyone can take
the code and make it better
all throughout the world.
The best part is, it is
powerful, can be placed on
many different computers and
computer systems, and it is
free.
Versions of Python
There are a few different
versions of Python that have
come out over the years, and
they will have some different
benefits as to why you should
choose them.
The most updated one is Python 3,
although there are a few
versions of this out right now.
Most professionals are still
using Python 2 because it is
able to go back and work with
older versions if needed, while
Python 3 is not able to do
this.
There are no new versions of
Python 2 that have come out in
the past few years, so it is
likely that it is going to be
phased out soon, and Python
users will have to stick with
their older versions or choose
Python 3.
The original creator of Python,
Guido van Rossum, chose to
develop this language because it
was simple, based on the
English language, so that
programmers new and old would
be able to use the program
without having too much
complication.
The language has undergone many
changes throughout the years,
especially since it was open
sourced for other companies and
individuals to work with, but it
has still maintained its simplicity
and ability to work well with
people who are new to
programming.
Downloading Python.
Let's have a little refresher
course on how to download and
install the Python program for
those who may not have this
program on their computers.
You can download this program by
visiting www.python.org
slash downloads, or you can pick
one of your favorite distribution
sites and download the version
that you want.
You will need to select the Python
Windows installer and then follow
the simple steps that follow.
You should notice that the setup
wizard will come up.
It is easiest to just click on
Next for all the options during
the following steps in order to
get everything to show up in
default.
If you would like to customize
some things or make some
changes, you are able to select
these as well when going through
the setup.
After Python has been successfully
installed on the computer, you
should select Idle in order to
get started.
This is basically going to be the
part that allows you to work on
Python, so you need to make sure
that you have it open so that you
can start writing your code.
You will also need a text editor to
work with, so that the program is
able to go through and read the
work that you are doing.
For a Windows computer, working
with Notepad is a great option, or
you can pick out another option
online.
How does Python execute a program?
Each programming language that you
work with is going to execute a
program a bit differently.
This is why it is so important to
learn how to organize the words and
the different statements that the
program requires, so that you can
avoid errors and other issues in
your code.
In this chapter, we will take some
time to learn how Python will
execute the commands that you give,
and basically how the whole
program runs.
When you are working with Python, you
are working with an interpreted
programming language.
You will have a text interpreter that
will execute each of the programs
going line by line, and then will
convert it into a code for the
process to understand the words and
carry them out for you.
Python is also a scripting language,
so you can write out the script and
then save it using the extension
.py, or you can directly write it
and then execute each statement
into the Python shell.
Internally, Python is going to work
to compile your program, basically the
source code, into a bytecode that has
the .pyc extension, just like the
Java bytecode.
This makes it easier for the code to
be executed without the delays, and
you will be able to see it come up in
just a few seconds rather than waiting
around.
You will be able to save your bytecode
files into a subdirectory that is
called pycache, which is located in the
directory where the source file resides.
For example, if you write out
hello-world.py, it is going to then
be converted into one of these bytecodes
and renamed hello-world.pyc.
You can go in and manually compile this
code if something does go wrong, but
for the most part, Python is going to
do the compilation for you, so it won't
be an issue.
As a beginner, you may wonder where
some of these .pyc suffixes come from,
but Python is going to store them with
that specific suffix, so don't worry if
it shows up.
Of course, this is only going to happen
if Python has the write access, but even
if the Python has no write access, it may
not be saved that way, but the program is
still going to work.
Whenever you call up a Python program,
Python is going to check if there is already
a compiled version with this .pyc suffix.
This file should be newer than the .py
suffix, and if it exists, the Python will
load in the bytecode to speed up how fast the
script is able to go. If the bytecode doesn't
exist on your computer, Python will work to
create your bytecode before it executes
the program. So basically, each time that
you execute a script in Python, you will
have a bytecode created by the program as
well. If the script in Python is imported
like a module, your bytecode is going to get
stored in the proper .pyc file.
Python Implementations
When you hear about implementation of
Python, it means that the environment or the
program that is providing support for executing
your programs inside of the Python language
will be represented with the CPython
reference implementation.
This means that it is going to help you work
on executing the different codes and
statements that you are working on within
the program. There are also some variants of
the CPython that you can work on and will
make a big difference in the way that the
program works. Some of the features that are
available with the variants include
Crosstwine Linker. This is going to be a
combination between CPython and an add-on
library of your choice. It is going to offer
some better performance when it comes to the
code that you are working on.
Stackless Python
This is CPython that has an emphasis on
concurrency while using channels and tasklets.
This is often the kind that is used for the DS
Python on programs like the Nintendo DS.
YPython
This is considered a re-implementation of some
of the parts of Python, which will drop the
supports of using bytecode in order to use the
word code-based model. It is going to use the
stack register and the implementation and adds
in lots of other types of optimization.
Implementation is everything when it comes to
how you are able to work on your programs and
can help you get more done with Python compared
to some of the other programming languages.
What is so unique about Python is that it is able
to work with a lot of other programming languages
in order to still be simple to work on the code,
plus has all the power that you need to really
get things done.
Some of the other implementations that you may
want to consider if you want to do something
specific with the Python programming language
include
Brython
This is one of the implementations that you
can use in order to run Python in your
browser using a translation to JavaScript,
so you can use these two together.
CLPython
This is an implementation of Python in Common Lisp.
HotPy
This is considered a virtual machine for Python
that will support translation and bytecode optimization.
Iron Python
This is Python in C Sharp.
C Sharp is a great programming language to use
inside of the Windows platforms
and is often a competitor to Python
based on how popular and easy it is to use.
This implementation allows you to translate
your work from Python over to C Sharp if you choose.
Jython
This is the version of Python available for the Java platform.
PyMite
This is Python that you can use
for embedded devices.
PyPy
This is Python within Python
so that you are able to target a few different
environments at the same time.
RapidScript
This is a language that is similar to Python
that will compile into JavaScript
so that you can use it in the Java platform
without having to work with all of the difficult
language issues.
Working on Python can be a great experience.
If you are just a beginner with the idea
of programming and are unsure about how to get all this started
some of the other programming languages
can be a bit confusing.
Python is easy to use
but has all the power you want
from some of the bigger names in programming language
and you get the benefit of getting to use this program
along with some of the other popular languages
that you may want to work with.
Review a simple program
As we mentioned
using Python is one of the simplest programming languages
that you can choose.
It isn't going to have a lot of excess around it
like some of the other languages
which can save you a lot of time and effort.
It also makes it easier for you
and for someone else
to take a look at the information
and be able to read through it.
So let's take a look at some of the things
that you can do with Python
and how to get started with writing your first program.
The first program that you are going to write out
is the High World program.
This one is going to need a Python shell
to make it easier
and you will be able to test it out on your editors
if you do it properly.
This makes it easier to have a good idea
of what you are doing
and to catch any errors right in the beginning.
If you are using the Python shell
which works well on most of the computer types
and programs that you may be using with Python
you will simply need to type in the following program
to get the information to show up.
Print, parenthesis, double quote,
High World, exclamation point,
close double quote, close parenthesis.
You should be able to go and execute this information
and find that it will show up
with the words High World on the screen.
This is a simple process to do
but it is going to help you get things started
and provides a good review
of some of the simple steps that you need
in order to start writing your own program on Python.
Remember that Python is a really easy programming language
that won't have a lot of different brackets
and other information that is in the way
and will slow down what you are doing.
It is also really easy to read.
As you can see, you only need a few things in place
in order to write out the phrase
rather than needing to type out lines of code
to get the same result
like you would need to do
with other programming languages.
Let's take a look at some of the other things
that you are able to do with Python programming
and how you can even write some good code
to get your program started.
Chapter 2
Some of the basic commands, variables, statements
and other things that you can do with Python.
There are so many things that you are able to do
in order to get a code up and running on Python.
Many people may avoid using Python
because they think that it is too simple
or it just isn't going to get the job done.
But in reality, it is simple just for the fact
that even a beginner is able to learn how to use it.
And that doesn't mean that you aren't able to do a lot with it.
This chapter is going to take some time
to look at the different commands
that you can do with Python programming
in order to make your programs and codes come to life.
Variables
Variables may sound like something
that is too complicated to learn,
but they are basically locations in the memory
that are reserved in order to store the values of your code.
When you work on creating a variable,
you are reserving this spot in the memory.
In some cases, the data type that is in the variable
will tell the interpreter to save the memory space
and can even decide what you are able to store
in your reserved memory.
Assigning values to your variables
The value is going to be one of the basic things
that your program will need to work with.
It can be a string, such as high world,
3.14, which is considered a type float,
or a whole number, like 1, 2, 3,
which is considered an integer.
Python variables will not need an explicit declaration
in order to reserve the space and memory that you need.
This is something that is going to happen automatically
whenever you place a value with a variable.
For this to work, simply place the equals sign
so that the value knows where it is supposed to go.
Some examples of this include
Keep in mind that when you are working on codes,
you are able to leave a comment with your work
by using the pound sign.
This allows you to explain what is going on in the code,
leave some notes, or do something else with the program.
It is not going to be read by the interpreter
since it is just a little note
that you are leaving behind for yourself
or for someone else.
The next part is going to depend on
which version of Python you are using.
Python 2 is fine with you writing out print
and then the information you want to talk about,
but Python 3 is going to require you
to place the parenthesis in to make it work.
An example would be
print, open parenthesis,
double quote, y equals percent sign d,
close double quote, percent sign y,
close parenthesis.
Next line, print, open parenthesis,
double quote, x equals percent d,
end double quote, percent sign x,
close parenthesis.
Next line, print, open bracket, double quote,
employee name is percent sign s,
end double quote, percent sign emp name,
close parenthesis.
These would then be put through the interpreter
and the outputs that you would get should be
x equals 10, y equals 200,
employee name is Aaron Burra.
Now go through and put in this information
to your program and see what comes up.
If you didn't get the right answers
like listed above,
you should go back and check that the work is done.
This is a simple way to show what you were able to do with Python
and get the answers that you need.
Multiple assignments.
In addition to working with the single variables that were listed above,
you will also be able to work on multiple assignments.
This means that you are going to be able to assign one value to several different variables
at the same time.
To do this, you would just need to place the equal sign between all of them
to keep things organized and to tell the computer that the value is going to be with all of the variables together.
You can keep them separated out if that is easier for you,
but using this method is going to help you to send everything to the same memory location on the computer
and will give the code a clearer look on your screen.
A good example of how to give more than one variable the same value includes
A equals B equals C equals 1.
This is telling the code that you want all of them to be tied with the value of 1
and that all of these variables should have the same value
and that you want to assign them all to the same location within your memory.
Standard data types.
Another thing that you are able to work on when doing Python is the various data types.
These are going to be used in your code in order to define the operations that you can do on each data type,
as well as explain to others the storage method that will be used for this kind of data.
Python has five data types that are considered standard,
including numbers, dictionary, tuple, list, string, and numbers.
Number data types are the ones that will store the numeric values.
They are going to be created as objects once you assign a value to them.
There are also four different types of numericals that Python will support,
including complex, such as complex numbers,
float, floating point real values,
long, long integers that can also be shown as hexadecimal and octal,
and int, signed integers.
One thing to note is that while Python will allow you to use the lowercase l
when doing the long form of a number,
it is best to go with an uppercase l whenever you are using the letter.
This is going to help you avoid confusion in reading the program between the l and the 1
as they look really similar.
Any time that Python is displaying a long integer that has the l in it,
you will see the uppercase l.
Strings.
Strings are identified in Python as a contiguous set of characters
that will be shown by the use of quotation marks.
Python is going to allow for either double quotes or single quotes,
but you need to keep things organized.
This means that if you use a double quote at the beginning of your string,
you need to end the same string with the double quote.
The same goes when you are using a single quote.
Both of these will mean the same thing,
you just need to make sure that you are using the proper quote marks to make the code look good
and to avoid confusing the Python program.
In addition to being able to print off the string that you would like,
you are also able to tell the program to print just a part of the string using some special characters.
Let's take a look at some examples of what you are able to do with the strings
and the corresponding signs that we'll use as well to help illustrate this point.
Str equals single quote high Python exclamation point and single quote new line.
Print parenthesis str close parenthesis pound sign.
Prints complete string.
New line.
Print parenthesis str open bracket zero close bracket close parenthesis pound sign.
Prints the first character of the string.
New line.
Print open parenthesis str open bracket two colon five close bracket close parenthesis pound sign.
Prints characters starting from the third to the fifth.
New line.
Print open parenthesis str open bracket two colon close bracket close parenthesis pound sign.
Print strings starting from the third character.
New line.
Print open parenthesis str plus double quote guys close double quote close parenthesis pound sign.
Prints concatenated string.
For the most part, you are probably going to want to print out the whole string to leave a message up on your program,
so the first print that you do is going to be enough.
But if you just want to print out high or some other variation of the words above,
you may find that the other options are really useful.
You can do any combination of these.
They are just examples to help you get started.
Lists.
Lists are one of the most versatile data types that you can work on in Python.
In this language, the list is going to contain different items that are either enclosed with the square brackets or separated out with commas.
They are similar to the arrays that you would see in C if you've worked with that program.
The one difference that comes up with these is that the items that are in a list can be from different data types.
The values that are stored inside the list can be accessed with a slice operator,
as well as the open bracket, colon, close brace symbol,
with the indexes starting at 0 at the beginning of the list and then working down until you get to minus 1.
The plus sign will be the concatenation operator, while you can use the asterisk as the repetition operator.
For some examples of what all this means and how you can use the different signs within your programming,
consider some of these examples.
List equals bracket, single quote, main you, end single quote, comma, single quote,
Shane you, end single quote, comma, 86, comma, 3.14, comma, 50.2, close bracket.
New line.
Tiny list equals, open bracket, 1, 2, 3, comma, single quote, a run, end single quote, close bracket.
New line.
Print, open parenthesis, list, close parenthesis, pound, prints complete list.
New line.
Print, open parenthesis, list, open bracket, 0, close bracket, close parenthesis, pound sign, prints the first element of the list.
New line.
Print, open parenthesis, list, open bracket, 1, colon, 3, close bracket, minus.
Pound sign.
Pound sign.
Print, open parenthesis, list, open bracket, 2, colon, close bracket, close parenthesis.
Pound sign.
Print all of the elements of the list starting with the third element.
New line.
Print, open parenthesis, tiny list, asterisk, 2.
Close parenthesis.
Pound sign.
Print, open parenthesis, list, plus tiny list.
Close parenthesis.
Pound sign.
Print the concatenated lists.
Tuples.
The next thing that we need to learn about for the Python language is about tuple.
This one is pretty similar to what you are going to find with a list, but it is going to use some different signs.
The main difference, though, is that the list will use brackets and the elements, as well as the size.
The main difference, though, is that the lists will use brackets and the elements, as well as the size, can be changed through the program.
On the other hand, the tuples are going to use parenthesis and you will not be able to update them.
A good way to think about tuples is that they are going to be like a read-only page.
As long as you don't try to make changes to the tuple in the program, you are going to be able to use it in the same way as you did the list examples above.
This makes it a great option to use if you are looking for something that is simple, but won't let anyone make changes to the program after you are done.
Dictionary.
Dictionaries are another kind of tool that you can use when you are working in Python.
They are similar to a hash table type, and they are going to work similar to the hashes or the arrays that you can find on other programming languages like C-sharp and Perl.
They will also consist of key-value pairs, and while the key can be almost any type on Python, you will notice that they are usually going to be strings or numbers.
For the most part, when it comes to values, you will find that they are an arbitrary object in Python.
Some examples of how this will work include the following codes.
Pound sign.
Dictionary stores key-value pair, later to be retrieved by the values of the keys.
New line.
D-I-C-T equals open braces, close braces.
New line.
D-I-C-T, open bracket, single quote, main U, close single quote, close bracket, equals, double quote, this is main U, close double quote.
New line.
D-I-C-T, open bracket, 10, close bracket.
Equals, double quote, this is number 10, close double quote.
New line.
E-M-P-D-I-C-T, equals, open braces, single quote, name, close single quote, colon, single quote, a run, close single quote, parenthesis, comma, single quote, code, end single quote, colon, 23, comma, single quote, D-E-P-T, end single quote.
End single quote, close braces.
New line.
Print, open parenthesis, D-I-C-T, open bracket, single quote, main U, close single quote, close bracket, close parenthesis.
Pound sign.
This will print the value for the main U key.
New line.
Print, open parenthesis, D-I-C-T, open bracket, 10, close bracket, close parenthesis.
Pound sign.
This will print the value for the 10 key.
New line.
Print, open parenthesis, E-M-P-D-I-C-T, close parenthesis.
Pound sign.
This will print the complete dictionary.
New line.
Print, open parenthesis, E-M-P-D-I-C-T, period, keys.
Open parenthesis, close parenthesis, close parenthesis.
Pound sign.
This will print out all of the keys.
New line.
Print, open parenthesis, E-M-P-D-I-C-T, dot, values.
Open parenthesis, close parenthesis, close parenthesis.
Pound sign.
This will print all the values.
One thing to keep in mind is that the dictionary values are not going to be stored in an order
that is sorted.
They aren't going to have the concept of ordering among the elements.
This does not mean that you can say that the elements are out of order.
They are just going to be unordered.
Keywords.
Most of the types of programming languages that you will deal with will have some keywords
or words that are reserved as part of the language.
These are words that you really shouldn't use in your code unless you absolutely can't
help it.
There are 33 keywords found in the most recent version of Python, and you will need to spell
them properly if you want them to do the job that you lay out.
The 33 keywords that you should watch out for include
false, class, finally, is, return, none, continue, for, lambda, try, true, def, from, non-local,
while, and, del, global, not, yield, as, elif, if, or, assert, else, import, pass, break, accept,
in, raise.
Keep this list on hand if you are worried about learning the language.
It will be able to help you out at a time when you have issues with the interpreter
about the names that you are giving the variable.
You may be confused about why it is giving you some issues with the words you chose.
You can go through with this list and see if you used one of the keywords inappropriately
within your code.
Statements.
When you are writing your code in the Python language, you are going to be making expressions
and statements to get it done.
Expressions are going to be able to process the objects, and you will find them embedded within
your statements.
A statement is basically a unit of code that will be sent to the interpreter so that it
can be executed.
There are two types of statements that you can use, assignment so far and print.
You will be able to write out the statement or multiple statements, using the Python shell
to do so interactively, or with the Python script using the .py extension that we talked
about later.
When you type these statements into the interactive mode, the interpreter will work to execute it,
as long as everything is properly in place, and then you can see the results displayed
on the screen.
When there are quite a few lines that you need to write in code, it is best to use a script
that has a sequence of statements.
A good example of this is, pound sign, all of these are statements, new line, x equals 56, new
line, name equals double quote, main u, close double quote, new line, z equals float, open
parenthesis, x, close parenthesis, print, open parenthesis, x, close parenthesis, new line,
print, open parenthesis, x, open parenthesis, x, close parenthesis.
Operands and Operators
There are a lot of great symbols that are going to show up when you make a code in your Python
program.
It is important to understand what parts you are able to work with, and what they are
all going to mean.
Operators are often used to mean subtraction, addition, division, and multiplication.
The values of the operator will be called operands.
You can use many different signs for these in order to get the values that you would like
to see.
While you are using the operators and operands, you need to remember that there is going to
be an order of evaluation that is followed.
Think about going back to math class and how this all worked.
You had to look for specific signs in order to figure out which tool you were supposed
to use in order to come up with the right answer.
This is the same when using these operands within your code.
When you have more than one of these operands in the expression, you will need to do the
order of evaluation based on the rules of precedence.
For anything that is arithmetic, Python is going to use the acronyms PEMDAS, P-E-M-D-A-S,
which is parenthesis, exponentiation, multiplication, division, addition, subtraction.
If there are a number of these that are the same, such as two sets of numbers that need
to be multiplied together, you will need to work from left to right to get the correct
number.
Another important operator that you should look for is the modulus operator.
This one is going to work with integers and is going to yield the remainder once the first
operand has been divided by the second one.
Comments for Python.
One thing that you will find useful with Python is that you are able to send out comments
in the program.
This will allow you to add in something to explain what you are working on rather than
just leaving it up to the programmer to figure out.
You will simply need to bring in the pound sign in order to denote that you are going to
leave a little bit of a comment or a statement about the code.
Anytime that you use the pound symbol, the program's interpreter is going to ignore what
you say rather than trying to write it.
While the computer program is ignoring it, it is still there for the programmer to look
at if needed.
Using the Python language does not need to be difficult, but you do need to be able to understand
what is going on in each part and how all of them are going to help you to get the result
that you need.
Each one will work slightly differently so that you are able to get the right codes done in Python.
Chapter 3 Understanding the Decision Control Structure
There are times in life that you are going to have to make decisions based upon the situation
around you.
Perhaps you woke up one morning and wanted to go for a walk, but it started to rain out.
Did you just sit there blankly without another option to help you out?
No.
You may have woken up and decided to grab an umbrella and go on the walk anyway, or you
may decide to stay home and read a book.
You can make other decisions, even if the first one doesn't work out based on the circumstances
around you.
Now this is kind of the same idea when it comes to working with Python.
So far, we have just told the program to do one thing at a time.
If the circumstances don't line up exactly with the program, you are not going to get
any results.
This just won't work for some programs, especially if the other people are allowed to pick from
a couple different answers.
The decision control structure is the part that allows you to pick a couple different
options for Python in case the first choice doesn't work out.
For the most part, these are going to work on a true or false kind of outcome.
You will need to figure out which action you want to take and what statements the program
should execute if the outcome is either true or false.
In Python, any answer that is non-null or non-zero is going to be considered true, and the ones
that are either null or zero will be considered false.
To understand some of these, consider the following.
If statements.
The if statement is going to consist of a Boolean expression that is then followed up by one
or more statements that will be executed if the answer matches up.
If else statements.
This option will have a statement that will show up if the if statement is correct, but
there is also another statement that is told to come up if the Boolean expression ends
up being false.
Nested if statements.
You can use one if or if else statement inside another one when needed.
Some examples of how this works includes
age equals 23.
New line.
If, open parenthesis, age equals equals 23, close parenthesis, colon, new line, print,
open parenthesis, double quote, the age is 23, close double quote, close parenthesis,
new line, print, open parenthesis, double quote, have a good day, end double quote, close parenthesis.
When this code comes through, it's going to state, the age is 23, new line, have a good day.
Using the if keyword is going to tell the compiler that what you are writing is a decision control
instruction, the condition that is behind the keyword if it is inside the parenthesis.
The conditions will need to be true if you want the code to come out, but if it is not
true, this statement is just going to be ignored in this situation, and it is going to move on to the
next command that you give. On the other hand, you could set up an if else clause. This one would
show the original message if the conditions were true, but if the conditions ended up being false,
it would end up putting out a second statement instead. This can help to ensure that you are
getting the right message access no matter what someone else is sending over, and to prevent the
interpreter from completely ignoring this step.
So the next question you may be asking is how we are able to tell whether the statement is true or
false. You will need to use some of the relational operators to make this happen because it is going
to be able to compare the two values to see if they are equal, unequal, or another choice. Some of
the options that you can use to see if a statement is right include, the expression x equals equals y
is true if x is not equal to y. The expression x is less than y is true if x is less than y. The
expression x greater than y is true if x is greater than y. The expression x is less than equals y is
true if x is less than or equal to y. The expression x is greater than equal sign y is true if x is greater
than or equal to y. A good example of this would be age equals int open parenthesis input open parenthesis
double quote enter your age colon close double quote close parenthesis close parenthesis close parenthesis
new line. If open parenthesis age is less than or equal to 18 close parenthesis colon
new line print open parenthesis double quote you are not eligible for voting try next election
end double quote close parenthesis new line print open parenthesis double quote program ends end double
quote close parenthesis. This code will print you out a different example based on the age that is put in
since it is an if statement only you are going to get an answer just when the number is 18 or under
here we will look at the output based on the age of 18 and that of 35. Enter your age colon 18 new line
you are not eligible for voting try next election new line program ends new line enter your age colon 35
new line program ends. Now we should take a look at adding in multiple statements within your if
statement. It is not uncommon to find two or more statements being placed inside an expression and
working just fine if everything is satisfied. If these statements are executed you will need to make
sure that you indent them properly. Let's take a look at how this could work. Make sure to give this
a try on your interpreter to get some experience with typing code and how the if statements are going to
work. Bonus equals 0.0 new line current year equals int open parenthesis input open parenthesis double
quote enter current year colon end double quote close parenthesis close parenthesis new line
year of joining equals int open parenthesis input open parenthesis double quote enter year of
joining colon, close double quote, close parenthesis, close parenthesis, new line. Year of service
equals current year minus year of joining, new line. If parenthesis year of service is less than
two, close parenthesis, colon, new line. Bonus equals 1500, new line. Print, open parenthesis,
double quote, bonus minus percent sign d, end double quote, percent sign bonus, close parenthesis,
new line. Print, open parenthesis, double quote, congratulations, we are able to provide you a
bonus of percent d, end double quote, percent bonus, close parenthesis, period. Now if the if statement
does end up being higher than two, you will find that the congratulations statement is going to come
out, but if the amount is lower than two, you are going to end up with no statements because all the
statements were not met. You can place whatever numbers that you want inside it in order to get
it to work for each employee in this option. The if else statement. So far we have just been talking
about the if statements. These are the ones that need to be true before you're able to see if any
of your statements come out. If things come out to be false, there will be no statement at all. Now this
does work at times, but in other instances you may want to have a few different statements come up.
With the if else statement, you can pick two and sometimes more statements that are going to come
up based on the results. If your results end up being true, you will have the first statement come
up, but if the results end up being false, you can pick another statement that you would like to show
up as well. This ensures that you're getting an answer no matter what the result so that the program
shows something new. You just need to make sure that after writing out your if statement, you add
in the else and then put in the statements that you would like to have come up. This can take a bit
of time to work, but it opens up so many great options with your code to make sure that it all
evens out and looks nice with your code. The if statement. Another option that you can do with
your statements is the if statement. This one is going to give you the option of checking out a few
expressions as true rather than just one expression as true so that you can execute the whole block of
code once just one of the conditions turns up to be true. Of course, doing this is optional, but
there is the benefit of being able to have any number of elif statements after the if. Let's take a look
at what all this is going to look like when you write it out on the syntax. If expression one,
colon, colon, new line. Statement, open parenthesis, s, close parenthesis, new line. Elif, expression
three, colon, new line. Statement, open parenthesis, s, close parenthesis, new line. Else, colon, new line.
Statement, open parenthesis, s, close parenthesis. You will then be able to place your information
into the parts and get the answer that is listed with each of the parts. Let's take a look at this
syntax expanded out a bit so that you are able to get an idea of how this works. Print, open parenthesis,
double quote. Let's enjoy a pizza. Okay, let's go inside Pizza Hut, close double quote. End double quote,
close parenthesis, new line. Print, open parenthesis, double quote. Waiter, please select pizza of your
choice from the menu. End double quote, close parenthesis, new line. Pizza choice equals
int, open parenthesis, input, open parenthesis, double quote. Please enter your choice of pizza,
colon, close double quote, close parenthesis, close parenthesis, new line. If pizza choice equals
equals one, colon, new line. Print, open parenthesis, single quote. I want to enjoy a pizza
cupricosa, end double quote, close parenthesis, new line. Elif pizza choice equals equals two,
colon, new line. Print, open parenthesis, single quote. I want to enjoy a pizza rustica, end double
quote, close parenthesis, new line. Elif pizza choice equals equals three, colon, new line. Print,
open parenthesis, single quote. I want to enjoy a pizza cupricosa, end single quote, close parenthesis,
end double quote, close parenthesis. You will see the information that is listed after print show up
for the first three lines. After the third line, the program should ask you to put in one of four
options. Depending on which option you choose, you will be able to see the right answer, either the
pizza of your choice or the option to just get a drink. It may look like a bit of a mess at first,
but it helps you to get options that the code will be able to understand while returning the right
pizza type to you in the process. The if statements are going to provide you with a lot of help when you
are looking to make some great things happen in your code. You can also use nested if statements that
allow you to add a few of these within each other, adding some more power to your code. Of course,
it may take some experience to get this all down, but you are going to be amazed at all that you are
able to do when you are working on your codes. Chapter 4, Loop Control Statements. So far,
we have discussed a lot of programs and what you are able to do when you are working in Python,
but these are all going to be either decision or sequential control instruction.
For the first ones, we were doing calculations that will be carried out in a fixed order,
while with the second one, the right set of instructions were executed based on the outcome
of the conditions that were tested. There were some limitations just because of the way they
are executed, and they are only able to perform the exact same series of actions, always in the
same way, and they are only able to do it one time. There are times when you will want to write
out a code that can be a bit more complicated. One of these options is for the Loop Statement.
This kind of statement will allow the programmer to execute a statement or even a group of statements
several times. If you have a statement that you would like to keep coming back in the program,
you will want to create your own loop statement to make this happen.
It is possible to use Python in order to handle these loop statements, and there are three methods
that you can choose in order to make the loop statement happen. These three methods include
nesting loops, using a for loop, using a while loop. Let's take some time to discuss all of these
and figure out when and why you would use each of these methods when creating your new code.
The while loop. The first type of loop we will look at is the while loop. This is a good one when
you want the code to do something for a fixed number of times. You don't want to have it go on
indefinitely, but you do want it to have it go for a certain amount of time, such as 10 times,
before stopping. Let's take a look at a good example of calculation of interest in the following
example to help show how this works.
Pound calculation of simple interest. Ask user to input principle, rate of interest, number of years.
Next line. Counter equals one. Next line. While, open parenthesis, counter is less than or equal to
three, close parenthesis, colon. Next line. Principle equals int, open parenthesis, input, open parenthesis,
double quote. Enter the principle amount, colon, end double quote, close parenthesis, close parenthesis.
Next line. Number of years equals int, open parenthesis, input, open parenthesis, double quote.
Enter the number of years, end double quote, close parenthesis, close parenthesis.
Next line. Rate of interest equals float, open parenthesis, input, open parenthesis, double quote.
Enter the rate of interest, colon, end double quote, close parenthesis, close parenthesis.
Next line, simple interest equals principal, asterisk, number of years, asterisk, rate of interest, divided by 100.
New line, print, open parenthesis, double quote, simple interest equals percent sign, 0.2f, end double quote, percent simple interest, close parenthesis.
New line, pound, increase the counter by one, new line, counter equals counter plus one, new line, print, open parenthesis, double quote, you have calculated simple interest for three times, end double quote, close parenthesis.
The output is going to allow the user to put in the information that they want to compute.
It will figure out the interest rates and the amount that is going to be calculated based on the numbers that you provide.
It will go on a loop so that you will be able to do this three times for use of this.
You can set it up to take on more if you would like, but for this one we are just using it three times for simplicity.
The for loop.
This is for loops that you will use when you want a piece of code to repeat a certain number of times.
It is a bit different than the one above because it is more of the traditional way to do things, but it still can be useful.
This option is going to be a bit different than what you will find in C++ and C.
Rather than this loop giving the user the chance to define the halting condition or the iteration step,
Python is going to have the statement iterate over the items in the order that they show up within the statement.
An example of this is below.
Pound, measure some strings.
New line, words equal, open bracket, single quote,
apple, end single quote, comma, single quote, mango, end single quote, comma, single quote, banana, end single quote, comma, single quote, orange, end single quote, close bracket.
New line.
For W in words, colon, new line, print, open parenthesis, W, comma, LEN, open parenthesis, W, close parenthesis, close parenthesis.
When it goes through the loop with this, you are going to get the four fruit words above come out in the order that they are written.
If you want them to be done in a different order, you will need to place them in a different order when you are putting them into the syntax in order to avoid confusion.
You will not be able to make changes to the words once they are already in the syntax like above.
If for some reason you want to iterate just over a specific sequence of numbers, using the function range can really come in handy with this.
It is going to generate a whole list containing some of the arithmetic progressions that you are looking to use.
It is also possible to do a nested loop.
This is basically just one loop that is inside of another one, and it will keep going until both of the programs are done.
This can be useful for a number of things that you want to do with your program, but we will show an example that will give out the multiplication table going from 1 to 10.
Pound sign.
Write a multiplication table from 1 to 10.
New line.
For x in x range, open parenthesis 1, comma 11, close parenthesis, colon, new line.
For y in x range, open parenthesis 1, comma 11, close parenthesis, colon, new line.
Print, single quote, percent sign d equals percent sign d, end single quote, open parenthesis x, comma y, comma x, asterix, x, close parenthesis.
When you got the output of this program, it is going to look similar to this.
1 times 1 equals 1.
1 times 2 equals 2.
1 times 3 equals 3.
1 times 4 equals 4.
All the way up to 1 times 10 equals 2.
Then it would move on to do the table by 2s such as this.
2 times 1 equals 2.
2 times 2 equals 4.
And so on until you end up with 10 times 10 equals 100 as your final spot in the sequence.
These loops can help you to get a number of things to show up on your computer, sometimes indefinitely.
But for the most part, they are going to keep going through the loop only for the amounts of times that you would like it to.
You will be able to put these loops in with a bit of practice, and there are so many things that you can do.
For example, this simple formula above will give you the whole multiplication table starting with 1 times 1 and ending with 10 times 10.
For such a simple statement, you are getting a great amount of information from it, and many of the loops that you work with will be the same.
Chapter 5. Functions
Functions are another important part of learning the Python language.
These are basically blocks of code that are self-contained and will be able to perform some kind of coherent task within your code.
When you take the time to define a function, you will be able to specify the name of the function as well as the sequence of the statements.
You will then be able to call up the function using its name.
There are two types of functions that we are going to use here, and we will discuss them below.
User-defined functions
With this one, you will be able to define the functions that you are using.
They are going to have pretty much the same rules that you found with variable names.
This means that using underscore characters, numbers, and letters will work great.
But you should never use a number for the first character in the function.
You can't use your keywords as the name of your function, and you should be careful about having a function and a variable that have the same name.
The empty parenthesis that you will see after the name will show that the function isn't going to take on any arguments.
The first line is going to be known as the header, while the rest of the function is known as the body.
You need to make sure that the header ends with a colon, and that you indent in the body so that the interpreter knows what you are doing.
A good example of the syntax for a function includes
def, function name, parenthesis, arg1, comma, arg2, comma, arg3, close parenthesis, colon.
Next line, double quote, docstring of the function, i.e. a brief introduction about the function, and double quote, pound sign, code inside the function.
Using the parameter of a function can be valid in any of the data types that you are using with Python.
Whether you are dealing with user defined classes, dictionary, tuple, list, float, and int.
Let's take a look at some of the different parts of this function, so you can understand the importance of each one, and how they work.
Docstring.
Now let's take a look at the docstring.
The first string that you see right after the header in a function is going to be called the docstring.
Something that is short for documentation string.
It is going to be used in the code in order to explain what the function does.
This is an optional part, but it is a good practice to get into.
If you are planning on having this go across a few lines, you should consider doing the triple quotes in order to tell the computer what you are doing.
The return statement.
The function is always going to give back a value.
The return statement is going to be used as an exit function, and will go back to the place where it is called from.
This statement is allowed to contain expressions that it can evaluate before giving out a value.
If there are no expressions within the statement, or the return statement is not even present inside of the function,
you will find that the return you get is the none object.
Lifetime and scope variables.
Another thing that you can learn about the Python language is about lifetime and scope variables.
The scope variable is the part that is going to be recognized and visible.
The variables and the parameters that are inside the function are not going to be visible from the outside eye.
Those who are looking at the code when it is being executed.
But they will have a local scope that can show up.
On the other hand, a lifetime is the period of time that the variable is going to exist in the memory.
The lifetime of most variables inside functions will be as long as your function executes.
After the function returns the value, these are going to be destroyed so that you can put in no inputs and get different results.
For example, if you input certain numbers and your return ends up being 5, the next time you are able to put in different information, then you may get a 6.
These will delete after each function has run through so that you can get new results if new information is put inside.
Pass by references.
In Python, all of the parameters that you put in are going to be passed by reference.
This means that the address of the location in the memory is going to be referenced to the memory location.
So if you are going to change what your parameter is able to refer to inside the function,
this same change is then going to reflect back when you are doing the calling function.
Flow of execution.
The execution of the statement is always going to start right at the first statement that is inside of the programs.
Your statements are going to be done just one at a time to avoid confusion and make sure that the program is running as smoothly as it should.
The execution is also going to happen from top to bottom,
so you must make sure that you are defining the functions before you decide to call them up to get the right order.
Anonymous functions.
Python allows the programmer to create anonymous functions.
These are functions that are not going to be bound to a name at runtime,
and you are going to need to use a construct that is known as lambda.
This operator is a way to create these functions that don't have a name.
Basically, you will want to create these when the functions are considered a throwaway,
or they are just needed right where they have been created.
There are a few functions that lambda functions will work with, including reduce, map, and filter.
The syntax that you will want to use of the lambda function is
lambda argument underscore list colon expression.
The reduce, filter, and map function.
We have talked about a number of functions so far in this book,
but it's time to look at a few that are going to help you get more out of the code that you are writing.
Particularly, we are going to take a look at the map, filter, and reduce functions,
as well as list comprehension to help you get started.
Map function.
The map function is the one that will apply to every member inside of an iterable,
or those inside a list.
For the most part, you would use the anonymous inline function to make this work,
though this is one of them that you are able to use inside of any of your functions.
So if you are trying to work on a list, this would be a good one for you to use in your computer code.
Filter function.
Next on the list is the filter function.
Just like you would guess from the name,
the filter is able to extract the elements in the sequence for which the function returns a true.
The rest would be ignored.
This means that you will want to do a sequence that would either be true or false in order to get this one to work.
When the sequence has a few options that are true,
the filter function will pick out those ones.
On the other hand, if all of them, or at least some of the sequence points, are false,
you will find that these are not filtered out.
The reduce function.
This one is a bit unique.
It is going to take several values to the sequence and will work it until you end up with just one value,
rather than the large list that you have.
It is going to work from left to right in order to get the answers that you are looking for.
Depending on the length of your sequence, you may have to do some work with this to get it all done.
Let's look at the number 1, 2, 3, and 4.
The reduce function is going to take these four numbers and turn them into one.
It will do this by adding the 1 and the 2 together to get 3,
then adding the 3 and the 3 together to get 6,
and then adding the 6 and the 4 together to get 10.
In this answer, you will get the single value of 10.
A good syntax to show how this works is
from functools import reduce new line
results equal reduce open parenthesis open parenthesis
lambda x comma y colon x plus y close parenthesis
comma bracket 1 comma 2 comma 3 comma 4 close bracket close parenthesis new line
print parenthesis result close parenthesis
list comprehension
This is a great way to create some lists inside of Python.
Some of the common applications will use your elements to make the new list
and others will create a subsequence of these elements when they satisfy certain conditions.
The list comprehension feature can actually be a substitute to using the lambda function,
as well as the others that we just talked about.
This is because the list function is easier to work with and understand.
The syntax of using the list comprehension is
open bracket expression involving loop variable for loop variable in sequence
close bracket
This is going to step right over all the elements of the sequence
so that you are able to set up the loop variable for every element one at a time,
and then it completely eliminates what you needed the lambda function for in the first place.
Conclusion
Working in Python can be one of the best programming languages for you to choose.
It is simple to use for even the beginner,
but it has the right power behind it to make it a great programming language,
even if you are more of an advanced programmer in the process.
There are just so many things that you are able to do with the Python program,
and since you are able to mix it in with some of the other programming languages,
there is almost nothing you can't do with Python on your side.
It is not a problem if you are really limited on what you are able to do when using a programming
language. Python is a great way for you to use in order to get familiar and to do some really
amazing things without having to get scared at how all the code will look.
For some people, half the fear of using a programming language is the fact that it is hard to take a look at
with all the brackets and the other issues.
But this is not an issue when it comes to using Python,
because the language has been cleaned up to help everyone read and look at it together.
This guidebook is going to have all the tools that you need to hit the more advanced parts of Python.
Whether you are looking at this book because you have a bit of experience using Python,
and you want to do a few things that are more advanced,
or you are starting out as a beginner,
you are sure to find the answers that you need in no time.
So take a look through this guidebook and find out everything you need to know
to get some great codes while using the Python programming.
Complete Guide on Python Programming for Advanced Users
Written by Adam Stewart
Narrated by Corey Schaefer
Introduction
Getting started in coding can be complicated sometimes.
You may worry that you won't be able to figure out what all the symbols and words mean.
You may take a look at some of the statements and feel like it is too hard to understand,
or that you will spend too much time to write the syntax before you can get anything started.
But when it comes to getting started with a coding language,
one of the best ones that you can work with is Python.
Python has been around for just a short amount of time,
but it is based on the English language,
so it is easy for even a beginner to get started with.
But if you have some experience with coding,
you will love how powerful this tool is,
and how you will be able to combine together Python
with some of the other coding languages to get everything done that you want.
This guidebook is meant for the more advanced user in Python.
If you have had a chance to work in Python in the past,
but want to be able to do some better things in your programming
and get a fun program set up,
this guidebook is going to help you out.
We will spend some time talking about the different syntaxes
that you can add to your tool belt in order to get some amazing code.
Add some of these in with the huge library that comes with Python,
and you are going to be able to write any kind of code that you would like.
When you are ready to get started with writing in Python,
this guidebook is going to help you make it to the next level.
You are going to learn all the great tips that you need
to do some impressive things when writing out your code.
Chapter 1. Getting Started with Python
If you are someone who likes to work with computers,
or has a great idea that others would be able to use
to help make life easier and more,
learning how to code can be one of the best choices that you make.
It allows you to mess around with some of the different statements
that are available and make games,
have messages come across the page, and so much more.
This is one of the easiest programs that you will be able to use.
It has all the features that the more advanced user is going to love,
but you will still be able to use and enjoy the system
even when you are just getting started with Python.
While some people are scared about getting started with coding languages
because they look too confusing to even get started with making your own,
there are some fantastic programming languages
that you will be able to use even as a beginner.
One of the best programs that you can use
when you first want to get started with your very own code is Python.
While this guidebook is going to work on some of the more advanced commands
and other things that you can work on within this language,
the Python program is good whether you are a beginner
or you have been working in coding for years.
Python is considered one of the easiest coding languages to learn.
It is simple to learn thanks to being based on the English language,
so you won't have to worry about learning new signs and symbols that don't make sense.
It has the power needed to do some great programs,
and you will even be able to combine it with some of the other programming languages
that you are interested in.
There are so many reasons why you would choose to go with Python
over the other programming languages,
and it is really the best choice to go with as a beginner.
Some of the reasons why you would choose to use Python include
Easy to read.
Since this is based off the English language,
it is really easy for most people to read.
It doesn't have a lot of crazy characters that you need to learn,
and you will be able to put it in words that you know.
Clean.
Other programs use a lot of symbols, brackets, and other things
in order to talk to their compiler and get the code executed.
This can make a big mess when you are first getting started in the code,
and you may have some issues reading through the whole thing.
But with Python, the code has fewer symbols around,
and it is fine to use indents and tabs to help the code look nice.
Powerful.
Despite being so easy for even a beginner to get started with,
Python has the added benefit of a lot of power.
Those who have been working in coding for a long time
will appreciate that this program will still get them
some of the power that they are looking for.
Works with other programs.
If you are a fan of another programming language
and want to try out Python,
you will be happy to know that this coding language
will work with other ones as well.
Or if you need to complete a task that is not possible with just Python,
you will be able to combine it with another option
to get everything done.
It is easy to install Python on your computer,
and it is going to work with a lot of different computer systems
that you are going to use.
You will need to go online to find a way to download this.
Just make sure that you are installing the idle environment.
This comes with Python when you download it.
As well as the text interpreter,
Notepad and Windows works well,
can help you to get started on this
and ensure that you are going to get the process to work in the right way.
Whether you are an old expert at using coding
and you have been doing it for a long time
or you are just getting started,
Python is one of the best options for you.
It is simple to use,
has a lot of functionality,
and you will be able to complete almost any task
that you would like on this language.
Now that we have a little bit of an idea
of why Python is such a great product to use
and why you would want to consider using it in your coding language,
let's take a look at some of the exciting things
that you will be able to do
when you decide to go with Python as your programming language.
Chapter 2.
The Built-in Functions Found in Python
When you are working in Python,
there are a number of functions
that are already going to be present for you to use.
The interpreter is set up to already recognize these functions,
so as long as you put them into the code properly,
Python is going to do a lot of the work for you.
There are quite a few of them,
so this can make things so much easier for you
when you are writing your code.
Some of the functions that you will be able to use
within your code when they are needed include
ABS.
This one is going to return the absolute value of the number.
You can use a floating-point number
or a long or plain integer if you would like.
If your argument is a complex number,
this is going to return a magnitude instead.
ALL.
This one will return true
if all the elements in that statement are true
or if it is empty.
ANY.
This one will return true
if any of your elements are true
or if there are no elements.
BIN.
This number is going to convert your integer number
to a binary string.
The result is going to be an expression
that is valid in Python.
B-O-O-L.
This one is going to return a Boolean value.
This means that the answer has to be true or false.
It can only be used in these kinds of instances.
B-Y-T-E-A-R-R-A.
This one is going to return to you
a new array of bytes.
CLASSMETHOD.
This one is going to look at the function
that you place into the system
and then give you a CLASSMETHOD based off that.
C-M-P.
This one is going to compare two different objects
such as X and Y
and then will return to you an integer
according to the right outcome.
COMPILE.
This is going to cause the objects in the statement
to be executed or evaluated
so that you can see the results.
COMPLEX.
This is a class complex.
You will be able to return a complex number
to the real value
or even convert a string or number
over to a complex number.
If the parameter is a string,
the program will interpret as the complex number
and then the function needs to be called
without having another parameter.
The second parameter is not allowed to be a string.
D-I-C-T.
This one is going to create a new dictionary.
This can be helpful when you want to keep
a few of the codes that you are working on in line
without needing to rewrite them
or do anything else.
E-V-A-L.
This is when the expression argument is first parsed
and then evaluated as an expression in Python.
This will be done using the local
and global dictionary in your namespace.
Exec file.
This function will be similar to the exec statement,
but it will parse a file
rather than doing this to a string.
It will also not use a module administration
and it will read through the file no matter what
while also not creating a new module.
File.
You can use this in order to open up a file in the program,
but it is often saved for testing
rather than this other function.
The best way to open a file with Python
is to use the open function.
Filter.
You will first need to construct a list of elements
that you would like to use,
then the filter will be able to go through this list
and determine which ones are true
and filter those out.
Float.
This is going to return a floating point number
that was constructed from a string or number X.
Format.
This is going to convert your value
to a representation that is formatted.
The interpretation of what is formatted
will often depend on the value argument that you use,
though there are some built-in formatting types
that can be used.
ID.
This is the identity of the object.
This is the integer that is guaranteed
that is unique and will remain constant
for that particular object for its lifetime.
If you have two objects
that don't overlap with their lifetimes,
they are able to share the same ID value.
Input.
This function is going to be the input
that you want to show up on the screen.
It is not going to be used
in order to catch errors on the user side.
For example,
if the input is not placed in properly,
there is going to be a syntax error that is raised.
INT.
This is going to give a return of an integer object
constructed from a string or a number X
or a return of zero
if there are no arguments given for this.
List.
This is going to return a list which items are the same,
as well as in the same order
as the original iterable's items.
Locals.
This will update as well as return
a dictionary representing the current symbol table.
Free variables will be returned by this,
as well as when it is called
using the function block,
but not the class block.
Long.
This will return a long integer objected.
Map.
This will apply the function of every item on the iterable
and will return a list with all the results.
This will return the largest item
that is inside of the iterable
or show you the largest of two or more arguments.
Min.
This one works in kind of the opposite
since it is going to return the smallest item
in your iterable
or at least the smallest of two or more arguments.
Object.
This will return to you a new featureless object.
Open.
This is the best way to open a file
as well as return an object to the file type that you want.
If there is something wrong
and your file is not able to open,
you will see the I.O. error.
Print.
This is one of the most common that you will see.
It tells the interpreter
to print the objects to the stream field.
It is basically when you are telling the interpreter
that you would like that string or statement
to be printed on the screen.
Range.
This is a really versatile function
when it comes to making a list
that will need arithmetic progressions
and you will often see it in loops.
Reduce.
This will apply the function
of your two arguments going from left to right
so that the iterable is just down to one value,
even if there are more.
Set.
This will return a new set object,
sometimes with elements
that have been taken from the iterable
and it is one of the built-in classes.
STR.
This is a string that will have a representation
of the object placed inside
and in a format that is easy to print.
Sum.
This is the function that will find
the sum of the iterable
going from left to right
and then will return the total.
Tuple.
This is going to return a tuple
that has the items that are the same
as well as in the same order
at the iterable's items.
Type.
This will take one argument
and will return the type of an object.
The return value will be the type object.
Zip.
This function is going to return
a list of tuples
where the ith tuple
will contain the ith element
from each of your sequences.
The new list is going to be truncated
in length to a new length
that is as long
as the shortest argument sequence.
These are just some of the functions
that you are going to be able to use
in order to make the code work
the way that you would like.
Adding them in
will tell the interpreter
to behave in a certain way
compared to others
and can ensure
that you are getting your program
to work the way that you would like.
Keep in mind
that there are many other functions
that you are going to be able to use
when you are in Python
so mess around with a few
and try them out in the interpreter
to get the best results.
Take a look at this list
any time that you want to try out
something in particular
with your code
or would just like to mess around a bit
and see what everything does
in the program
to see the results.
Chapter 3
Using File Input and File Output
Next we are going to explore
some of the things
that you will need to do
when trying to store the data
in your code to use later.
Sometimes you will want the data
to last for a bit longer.
It isn't practical
to write out a code
and then just use it once
and everything is all done.
There are times
when you will need to store
your data in a way
that you will be able
to retrieve it later
and even display it
either in whole
or as a part
on the computer again.
This is usually considered
a file on a disk.
Let's take a look
at how you are able
to perform these operations
when you are creating
code with Python.
There are some different
file operations
that you are able
to carry out
when you are working
on a Python file mode.
Think of these
kind of like saving your code
like you would
when using a Word document
but you are saving code instead.
Some of the operations
that you are able
to carry out include
creating a new file,
closing a file,
moving to a different
location in the file
this is also known
as seeking,
writing to a file,
opening and reading
an existing file.
Let's take a look
at how each of these
are going to work
when you want to deal
with a file
that you are working
on in Python.
Creating a new file.
The first thing
that you can do
is to create a file.
In order to write
onto a file,
you'll need to open it
and then choose the mode
that you would like
to write in.
You have three choices
when opening this file
including the exclusive
creation mode,
X,
append,
A,
and write,
W.
If you bring up
a file that already exists
and you want to use
the W mode
because it is going
to allow you
to make changes the best.
Any time that you would
like to write a sequence
of bytes or a string,
such as when you are
working in binary files,
you will need to do
the write method.
This method is going
to return a number
of characters
that is written
into the file
and can make it easy
to add in the changes
that you would like
in this program.
Let's take a look
at what you are able
to do with the write function
to help you make
some changes
to the content
that you are writing.
Pound sign,
file handling operations,
new line.
Pound sign,
writing to a new file,
hello.txt,
new line.
F equals open,
open parenthesis,
single quote,
hello.txt,
close single quote,
comma,
single quote,
W,
close single quote,
comma,
encoding equals,
single quote,
UTF dash eight,
close single quote,
close parenthesis,
new line.
F dot write,
open parenthesis,
double quote,
hello Python developers,
close double quote,
close parenthesis,
new line.
F dot write,
open parenthesis,
double quote,
welcome to Python world,
close double quote,
close parenthesis,
new line.
F dot flush,
open parenthesis,
close parenthesis,
new line.
F dot close,
open parenthesis,
close parenthesis.
With this file,
you are creating everything
in the current directory
because we did not take time
to specify where we want it to go.
So the hello.txt file
is going to be located
in the current directory.
When you open up the file,
the message that you are going to see
is hello Python developers,
welcome to Python world.
Now it is possible
to overwrite that same program
and get something
that is a bit different.
Let's take a look
at how this would work
when you want to add
or change something
to your program
with the following syntax.
Pound sign,
file handling operations,
new line.
Pound sign,
writing to a new file,
hello.txt,
new line.
F equals open,
open parenthesis,
single quote,
hello.txt,
close single quote,
comma,
single quote,
W,
close single quote,
comma,
encoding equals,
single quote,
utf-8,
end single quote,
close parenthesis,
new line.
f.write,
open parenthesis,
double quote,
hello Python developers,
end double quote,
close parenthesis,
new line.
f.write,
open parenthesis,
double quote,
welcome to Python world,
close double quote,
close parenthesis,
new line.
My list equals,
bracket,
double quote,
Apple,
end double quote,
comma,
double quote,
orange,
end double quote,
comma,
double quote,
banana,
end double quote,
close bracket,
new line.
Pound sign,
write lines,
is used to write multiple lines in the file,
new line.
f.write,
open parenthesis,
my list,
close parenthesis,
new line.
f.flush,
open parenthesis,
close parenthesis,
new line.
f.close,
open parenthesis,
close parenthesis.
After you save this file,
the message that you will see when it comes up on the screen will be,
hello Python developers,
welcome to Python world,
apple orange banana.
You can also make some changes that allow you to append the message that you write.
This is going to work in slightly different ways.
For example,
if we added the a after the file name of hello.txt,
we would have a different kind of return show up.
It will allow you to add in a few more lists if you would like,
add in more statements,
and even more.
Creating a binary file.
When you want to write out your data as a binary file,
you will need to write them out as a sound or an image file.
You can even change some of your normal text data into a binary file.
You just need to make sure that you are supplying the data in an object form
so that you can expose the data as bytes.
A good example of using this would be,
pound sign,
write binary data to a file.
New line.
Pound sign,
writing the file hello.dat,
write binary mode.
New line.
F equals open,
open parenthesis,
single quote,
hello.dat,
close single quote,
comma,
single quote,
WB,
close single quote,
close parenthesis.
New line.
Pound sign,
writing as byte strings.
New line.
F dot write,
open parenthesis,
B,
double quote,
I am writing data in binary file,
forward slash N,
close double quote,
close parenthesis.
New line.
F dot write,
open parenthesis,
B,
double quote,
let's write another list,
forward slash N,
close double quote,
close parenthesis.
New line.
F dot close,
open parenthesis,
close parenthesis.
Once you have written this out,
you can open up the file using Notepad
to have an idea of what you just wrote onto the disk.
You would need to use the encode or the decode function
in order to read or write the text that you are getting
from a binary mode file.
An example of how to do this is below.
Pound sign,
write binary data to a file.
New line.
Pound sign,
writing the file hello.dat,
write binary mode.
New line.
F equals open,
open parenthesis,
single quote,
hello.dat,
end single quote,
comma,
single quote,
WB,
close single quote,
close parenthesis.
New line.
text equals,
double quote,
hello world,
close double quote.
New line.
F dot write,
open parenthesis,
text dot encode,
open parenthesis,
single quote,
UTF dash eight,
close single quote,
close parenthesis,
close parenthesis.
Opening up one of your files.
So far we have looked at some of the ways that you are able to create and then store some of the files that you want to create.
But at times you may want to open up one of the files that you have been working on.
Let's bring some of these back from the disk so that they can be read on your program.
A good idea of this is as follows.
Pound sign.
Read binary data to a file.
New line.
Pound sign.
Writing the file hello.dat,
write append binary mode.
New line.
With,
open,
open parenthesis,
double quote,
hello.dat,
close double quote,
comma,
single quote,
RB,
close single quote,
close parenthesis,
as F,
colon,
new line,
data equals F dot read,
open parenthesis,
close parenthesis,
new line,
text equals data dot decode,
open parenthesis,
single quote,
UTF dash eight,
close single quote,
close parenthesis,
new line,
print,
open parenthesis,
text,
close parenthesis.
The output that you would get from putting this into the system would be like the following.
Hello world.
This is a demo using width.
This file contains three lines.
Hello world.
This is a demo using width.
This file contains three lines.
Of course,
when you want to read through a file that has some kind of text on it,
you should take the time to open it in text mode.
Seeking in a file.
There are times when you will want to move around some of the things that are in your file.
You may notice that there is something that does not match up that well,
or that you've misspelled a word in some place.
Changing the file position can help you get into the right spot
and find any location in the file that you would like.
You simply need to tell the code that you would like to find a certain spot,
and then you can get there to make the changes that you would like.
You will be able to use the formula at any time
to ensure that you are getting the file position right where you want it,
and if you use some of the syntaxes in this chapter,
you will find that it is easier than ever to tell the system what you want it to do.
There are so many things that you are going to be able to do to your files
based on how you want them to work.
There will be times when you may need to pull the file back up for later,
or mess around and make some changes.
Python makes it easy to add in the changes that you need
to keep the program running smooth,
and to easily find any of the information that you need along the way.
Chapter 4. Working with Regular Expressions
One of the neat things about working in Python
is that it has a really powerful library.
This library is known as Regular Expressions,
and it is responsible for handling many of your searches
as well as extracting different tasks elegantly.
These expressions are going to be used in your language
in order to filter out various texts or text strings.
It is possible to check and see if a text or string
will match up with the regular expression.
The good news is that when it comes to working with Regular Expressions,
you will use the same syntax with pretty much all of the script languages
that you may choose to use.
This means that it is going to work and look the same
as you would find with many other programming languages,
including Java, C Sharp, C++, and more.
Also, make sure to realize that sometimes Regular Expressions
is going to be written out as RegExp or RegX.
So if you see these, you know what they mean.
So what are Regular Expressions, and how would you use them?
A good way to show how you can use a Regular Expression
is to locate a word that has been spelled in two different ways
within your text editor.
We will show you some of the different things
that you are able to do with Regular Expressions
to really make things look amazing.
There are many ways that you are able to use
Regular Expressions in your coding,
and it is important to learn how to use these within the code
to get it to do what you would like.
If you would like to use Regular Expressions,
you must import the Expression Library through Python.
You may need to do this at the beginning of the program,
so make sure that you bring it with you
whenever you are downloading this project
to ensure that everyone is going to be able to use the library
if they are creating code in your system.
There are a variety of different expressions
that you may choose to use in your statements,
and understanding how to get them to work
and what all they can do will make a big difference
in how your code is going to be executed.
Let's take a look at some of the Regular Expressions
that you can choose to use in your code,
what they are able to do,
and how you can make them work inside of your code.
Basic Patterns
The great thing about Regular Expressions
is that they are not just responsible
for specifying fixed characters,
they can also specify patterns if you would like.
Some of the basic patterns that you are able to use
in Python with these include
A, X, 9, less than.
Ordinary characters just match themselves exactly.
The metacharacters that aren't going to match themselves
simply because they have a special meaning include
period,
carat,
dollar sign,
asterix,
question mark,
curly bracket,
square bracket,
open and close,
and more.
The period.
That is going to match any single
except the new line symbol of
backslash n.
Backslash w.
This is the lowercase w
that is going to match the word character.
This can be a letter,
a digit,
or an underbar.
Keep in mind that this is the mnemonic
that is going to match a single word character
rather than a whole word.
Backslash b.
This is the boundary between a non-word and a word.
Backslash s.
This is going to match a single white space character
including a form,
tab,
return,
new line,
and even space.
If you do backslash capital S,
you are talking about any character
that is not a white space.
Carat equals start,
dollar sign equals end.
These are going to match to the end
or the start of your string.
Backslash t.
Backslash n.
Backslash r.
These are going to stand for tab,
new line,
and return.
Backslash d.
This is the decimal digit
for all numbers between 0 and 9.
Some of the older regex utilities
will not support this,
so be careful when using it.
Backslash.
This is going to inhibit
how special the character is.
If you use this,
if you are uncertain
about whether the character
has some special meaning or not
to ensure that it is treated
just like any other character.
Performing a query
with the regular expressions.
There are several methods
that you are able to use
when trying to perform a query
on your input string
inside of Python.
The methods that you are able
to use include
re.search,
re.match,
re.findall.
The search method.
This method is going to be
identified by the search function,
and it will be able
to match anywhere.
The nice thing about
the search function
is that it isn't going
to restrict you
to finding matches
that are just at the beginning
of the string.
It allows you to find things
that are somewhere else
within the string,
such as at the end of the string,
if this is how you would like
your program to work.
Let's take a look
at how this is going to work
when you are placing it
into one of your syntaxes.
Import re.
New line.
String equals,
single quote,
apple,
comma,
orange,
comma,
mango,
comma,
orange,
end single quote.
New line.
Match equals,
re.search,
open parenthesis,
r,
single quote,
orange,
close single quote,
comma,
string,
close parenthesis,
new line.
Print,
open parenthesis,
match.group,
open parenthesis,
zero,
close parenthesis,
close parenthesis.
The output that you are going
to get from this
is going to simply be orange.
One thing to keep in mind
with the search method
is that it is simply
going to find a match once,
but the search function
is going to just find it once
and then will stop looking.
So once it found the first orange,
it stopped searching
and would not have found
the second orange.
In this kind of example,
it would not matter
how many orange you had
in the equation,
you would only get one result.
The match method.
This is going to work
a bit differently
than the search function.
It is going to find the matches
only if they happen
right at the start
of your string
that is being searched.
So for example,
it is going to look
for a pattern of some kind
that is inside of the syntax
that you search.
Using the same example
as above,
you can see that there is
a pattern with the word
orange appearing in
between all the other words.
But when you add in
the read.match function
into the formula
instead of the read.search,
your result will be none.
This is because orange
is not the first part
of the string.
If you had the string
say orange,
apple,
orange,
mango,
orange,
the read.match method
would be able to find it
and would give this
as the result.
If the pattern is not
right at the beginning
of the string,
it is not going to find
the pattern that you would like.
You can have any pattern
that you would like,
but it needs to start out
the statement if you would
like to have it show up
in the results.
The find all method.
This one is another unique one.
If you are looking
to get the statement
to release all
of one particular word
in the string,
you will need to use
the find all method.
Using the example above,
you could type in orange
for the read.findall
and the result that you would
get is orange orange.
This is because you have
two of the orange word
within the string.
You can do this
with any of the other words
that are inside the string
as well as if you would
like to mix it up,
but it doesn't really matter
how many of each word
is in the string.
You can have 10 of the orange word
in the string
and the find all method
will help you find all of them.
Square brackets.
There are times in your syntax
that you are going to use
the square brackets
in order to indicate
a certain set of characters.
For example,
if you write something out
in the statement as
square bracket
A, B, C
close square bracket,
it is going to be a match
for A, B, or C.
Other codes such as
backslash W and backslash S
will work inside
of the square brackets.
The only exception is
that the dot is just
going to be a literal dot
and you will not be able
to find a match with it
when you have it
inside of the square brackets.
These are just some
of the regular expressions
you may want to use
inside of your code.
There is so much more
that you are able to do
with these
and you can make things
so much easier
when you are working hard
inside of your statement.
Try adding in a few of these
inside of your own interpreter
to get some practice
and to see how all of them
are going to work
and make a difference
inside of your codes.
Over time,
you will get the hangout
of what you are doing
and be able to use
some of these regular expressions
in Python to make
some extraordinary codes.
Chapter 5
What is Exception Handling?
When you want to show
that an abnormal condition
has occurred in your coding,
you will use an exception
in Python.
When a method comes across
an abnormal condition,
also known as
an exception condition,
that it isn't able
to handle by itself,
it may add in an exception
to help it out.
There are a few exceptions
that have been added
into the Python library
that will help you out
with your code,
such as one that is able
to indicate when the conditions
are going to be read
past the end of the file
or when you want to divide by zero.
It is possible to define
some of your own expressions
if you find the Python library
doesn't have the right
information present
or you want to do something
a little bit different.
In Python,
you will see that an exception
is going to be triggered
on its own
when it sees errors,
and they can even be triggered
and then intercepted
in the code.
If you are interested
in adding an exception
to your code,
there are a few
that Python will offer
to you in your library.
Some of the accept
handling statements
that you are going to use
in Python include
Try, Accept.
This is when you will
try and catch
or use to try a block
of code and then recover
from exceptions raised
by Python or by you.
Raise.
The raise will trigger
an exception manually
in your Python code.
Assert.
The assert conditionally
triggers an exception
in your code.
Finally.
Finally,
perform cleanup actions,
whether the exceptions
occur or not.
Raising an exception.
If there is an issue
that your code
or the program
is going to try
and do something
that is erroneous,
Python is going to
raise an exception
to such conduct.
An example may be
something like this.
X equals 10.
New line.
Y equals 10.
New line.
Result equals X
divided by Y.
Pound sign.
Trying to divide by zero.
New line.
Print.
Parenthesis.
Result.
Close parenthesis.
The output that you're
going to get
when you try to get
the interpreter
to go through this code
would be
traceback
parenthesis
most recent
call last
close parenthesis
colon
file
double quote
d colon
backslash
python
34
backslash
tt.py
close double quote
comma line 3
comma in
less than sign
module
greater than sign
new line.
Result equals
X divided by Y.
New line.
Zero division error
colon
division by zero.
New line.
Python is going to
raise the error
because you are trying
to divide your number
by zero
and this is something
that is not allowed
when working with Python.
It is possible to add
another part to this
that will have a message
come up
rather than the error
message to help show
off that the user
is not able to do
this number.
A good example of this
is doing
X equals 10
new line
Y equals zero
new line
result equals zero
new line
try
colon
new line
result equals
X divided by Y
new line
print
parenthesis
result
close parenthesis
new line
accept
zero division error
colon
new line
print
parenthesis
double quote
you are trying to
divide by zero
close double quote
close parenthesis
this code is going to
recognize that there is
an issue with trying
to divide by zero
but it is going to
give you a message
that will come up
on the screen
when this happens.
For example
if your user does
use this
and try to divide
by zero
you will find
that the message
you are trying
to divide by zero
will come up
you can change
the message
to something else
if you would like
depending on the
situation
you can do this
with anything
that you will
have an exception
for
to ensure
that the user
understands
why the program
is not working
rather than
just getting
an error sign
to show up
exceptions
that are
user defined
sometimes
when you are
working on your
code
you will need
to raise up
an exception
that isn't
against the
coding rules
in Python
but which meet
a certain
requirement
for the program
that you are
trying to work
with
it is not
uncommon
to create
an exception
class
in this
kind
of
program
you will be
able to create
an exception
class
that will go
with the rules
that you want
to set out
for your
program
for example
if you don't
want someone
to use a
specific letter
or number
in the program
you can add
in these
exceptions
a good example
of doing
this may
include
class
class
custom
exception
class
custom
exception
parenthesis
exception
close
parenthesis
colon
newline
def
underscore
init
underscore
open parenthesis
self
comma
value
close
parenthesis
colon
newline
self dot
parameter
equals
value
newline
def
underscore
str
underscore
open parenthesis
self
close
parenthesis
colon, new line. Return repr, open parenthesis, self.parameter, close parenthesis, new line.
Try colon, new line. Raise custom exception, open parenthesis, begin double quote. This is a custom
error, exclamation point, close double quote, close parenthesis, new line. Accept custom exception
as ex colon, new line. Print, open parenthesis, double quote, caught colon, close double quote,
comma, ex.parameter, close parenthesis. This is a great way to show a custom exception for your
program, even if it is not an exception in Python. When you use this syntax, you will get the message
caught. This is a custom error. If the user puts in some data points that you do not want to have
come up, you will be able to set up your own custom errors to make them work with the results that you
will allow within your syntax regardless of whether they are accepted by Python or you are just making
your own rules at this time. Exception classes are often defined by being able to do things that the
other classes can do, but for the most part, they are going to be kept simple with just a few
attributes that will allow the information about your error to be extracted by the handlers for the
exception. This basically means that you simply need to bring in the exception that you want the
interpreter to recognize, as well as the phrase or statements that you would like to come up when
a user meets one of these exceptions. If you want to create a module that will raise more than one
error, the best practice is to create a base class for the exceptions that will be defined by that
module, and then go on to create a subclass that will work with that specific exception classes for
different error conditions. This way the interpreter understands what you are considering exceptions
from the beginning. You are able to make the classes that you want for just some of the
exceptions if you would like to have in this syntax. Defining the cleanup actions. There is another
optional clause that you can use with the try statement. This one is known as the finally clause
that is going to work to define any of the cleanup actions that you want to have executed no matter
the circumstance. A finally clause is always going to be executed before leaving the try statement,
even if the exception never occurred. When the exception does occur, though, and it is not handled by the
accept clause, it will be raised after your finally clause is executed. The finally clause can also
be done on the way out, when any of the other clauses in this statement is left via a return
statement, continue, or break. A good example of how this is going to look when you write it into
your code. Here code includes def divide parenthesis x comma y close parenthesis colon new line try colon new line
result equals x divided by y new line accept zero division error colon new line print open parenthesis begin double
quote result is end double quote result is end double quote comma result close parenthesis new line
finally colon new line print open parenthesis begin double quote executing finally clause end double quote
close parenthesis close parenthesis close parenthesis when you go through and execute this syntax you will see the results
division by zero executing finally clause working with exceptions is an important part of working in the python program
there are some times when the language code is going to do the exceptions because it doesn't like what you are trying to do
on the other hand there are times when you will want to write out an exception that will only count when it comes to your program
you can work with the exceptions no matter the use that you want them for
exception handling can bring about some new and exciting things that you can work on within the program
sometimes the program itself is going to have the exceptions you will not need to create them
but depending on the program that you are working with you may have to create some of your own to make the program go the way that you would like
this chapter will allow you to make these exceptions so that the program works the way that you want
chapter six what can i do with object-oriented programming
as you are learning a bit about the python programming language you may have heard about object-oriented
programming or oop this is a special approach that is used for organizing and developing your program and
it is designed in order to eliminate some of the pitfalls that come with using conventional programming
methods it is going to do this by using the best structured program features and some new powerful
concepts it is a new way that you are able to make your programs and it can be used on many different
languages python is considered no op language which allows it to be easy to use without all the hassles
and the bugs that you may find with some of your other programs that are harder to use
let's take a look at how oop works and why you are going to love that python has some of these features
the object-oriented paradigm originally many of the programming languages that were developed would
use the procedural approach this had many flaws inside of it that could make working on the code
difficult this was the biggest motivating factor in developing oop oop is going to treat data as an
important element in how to develop a program and it does not let this data flow freely through the
system it is going to tie the data close to the function that will operate it and helps to protect
the data from any accidental modifications from the outside function the oop can do so many things
within the function it is going to be able to allow the decomposition of a problem into a problem of
entities that are known as objects and then will build the function and data in the objects the data
of this object can be accessed by the function that is associated with this object and by nothing else
however it is important to notice that the function of one object can sometimes access the function of
other objects some of the features that you are going to notice when you are using the object-oriented
programming include an emphasis on the data rather than the procedure programs are going to be divided
into objects the data structures have been designed so that they will be characterized by their objects
the functions that operate with the data of a particular object are going to tie together inside the data
structure the data is going to be hidden and an external function is not able to access the data
the objects are able to communicate with each other through their functions the new functions and data
are able to be added if you would like to follows the bottom-up approach when you design the program
basic concepts to know when working with oop there are a few different concepts that you can use when
you are working in oop some of the most common ones that you will need to know and understand when
you are working in this language include classes objects inheritance data encapsulation and
abstraction dynamic binding polymorphism each of these are important parts of working with the oop
language and you are going to be able to do so much with it let's take a look at these different
concepts within oop that will help you really build up your codes classes you can think of the classes
within python as the design or blueprints the entire set of code and data for your object can
be defined with the help of a class in fact the objects are variables of the type of class once you
have taken the time to define a class you are able to create any number of objects that will belong
within the class each object is going to be associated with the data type class that they are created in
so basically the class is going to be a collection of objects that are similar in some way
they can have the same use the same actions the same colors or something else you are able to define
your class in any way that you would like for example you could define a class about vehicles
and then you are able to place in any kind of vehicle that you are going to be using inside of
your program inside a python the classes are going to be user defined and they will often work just like
built-in types within the language objects objects are going to be the basic entities to run time in
the oop system they can represent a lot of different things such as a place a person a bank account a
table with some data or any other item that you want to have the program to execute they can sometimes
represent some other user defined content that you would like including lists time and vectors when you
have a problem in your programming it is going to be analyzed in the term of objects and how the
objects are going to communicate with each other program objects need to be chosen carefully so
that the different objects match closely with other real world objects as well data encapsulation and
abstraction the wrapping up of data and function into one single unit also known as a class is going
to be known as encapsulation this is one of the biggest and most striking features that you are
going to see inside of a class the data will not be accessible to the world outside and only the
functions that are wrapped up into the same class will be able to access it these functions are going
to provide a good interface for you to use between the object's program and the data this kind of
insulation of the data away from direct access by the program is known as information hiding or data
hiding on the other hand the abstraction is going to refer to the act of representing some essential
features without adding in the details or the explanation about its background the classes will use this kind
of abstraction and will be defined by different abstract attributes including cost function
weight and size they will encapsulate all of the different properties of the object that you want
to create and sometimes they will be known as data members since they are able to hold information
the functions that will operate on this kind of data can be called other names such as methods or even
member functions inheritance when you are talking about inheritance in python we are talking about the process of which
objects of one of your classes will acquire the properties of the object from another class
it is going to be able to support the concept of hierarchical classification
the principle that comes with this kind of division is that each derived class is going to share some
common characteristics from the class it is derived from when you are using the oop the concept of
inheritance provides the idea that things can be reused that means that you are able to add in some new and
additional features to a class that is already in existence without having to modify it this is
possible when you derive a new class from one that is already in existence the new class is going to
have features that were combined from both of the classes the real power and appeal on the inheritance
is that it is going to allow the programmer to use one of these classes that they have already made
you may not be able to do everything that you want with these but it does enhance what you are able to
do with the program and make it easier to write some of the code that you really want polymorphism
next on the list is polymorphism this is a greek term which means having the ability to take on more
than one form in your program you can have an operation that is able to exhibit different behavior
in different instances this kind of behavior is going to depend on the data types that you are using in
your operation for example if you have a class that is a shape and then as a draw method as well
this can be nice if you need the object to do several things in the execution you will be able
to go with just one of your objects and turn it into a way to do many different things helping to
limit the amount of lines that you are using in your code and keeping things a bit more organized
dynamic binding another thing that you were able to do when you were working with an oop language
is dynamic binding binding is going to refer to the linking of a procedure call to the code to be executed
in response to the call dynamic binding on the other hand means that the code that is associated
with your given procedure call is not known until you call it out at runtime it is sometimes associated
with some of the other oop functions including inheritance and polymorphism a function call that
is associated with a polymorphic reference will depend on the dynamic type that has been referenced
for example if the inheritance brought about the draw method every object is going to have this
procedure however the algorithm is going to be unique to each of the objects so the draw procedure
needs to be redefined in each of the classes that it is defining python uses the oop option in order
to help you make some amazing code without having to worry about all the mess and bugs that come with
some of the older versions of codes you'll be able to combine together each of these different parts
to help you make some amazing code that will work in a great way when it is executed
chapter seven working on objects and classes in your python programming
in the last chapter we spent some time working on classes and objects seeing how they are going to
work within your code the classes allow you to place some different objects together so that it is
easier than ever to pull them out when you execute your code the objects can be anything that you would
like but you should place similar ones into the same class to keep them all grouped together
with the right organization you are going to be able to get your code in order and ensure that the
interpreter is able to work the way you want there are a few things that you should understand when
you are getting started with using classes in python including classes are basically the design or the
blueprint for your objects and how the program will run creating objects using classes by
instantiating objects objects that are inside the same class will have the same structures but they
can differ in some respects for example you can have a class named vehicle but there are many different
types of vehicles and they will vary creating a class creating a class does not have to be complicated
when you are working in python when you work on a class statement you are creating a new class definition
the name of the class is going to follow right after the keyword class which is then followed by a
superclass object that is inside of the parenthesis and is followed by the colon an example of how you
would be able to do this includes class vehicle parenthesis object close parenthesis colon new line
pound sign constructor new line def underscore init underscore open parenthesis self comma steering comma wheels
close자가
comma
ola
comma
Maxwell
evidence
002
003
004
007
004
007
004
005
004
005
005
008
006
005
005
005
007
007
005
005
gears, new line, pound sign, destructor, new line, def underscore, DEL underscore, open parenthesis,
self, close parenthesis, colon, new line, print, open parenthesis, begin double quote,
this is destructor, end double quote, close parenthesis, new line, pound sign, member
functions or methods, new line, def, display underscore, vehicle, open parenthesis, self,
close parenthesis, colon, new line, print, open parenthesis, single quote, steering, colon,
end single quote, comma, self, dot underscore, steering, close parenthesis, new line, print,
open parenthesis, begin single quote, wheels, colon, end single quote, comma, self, dot,
underscore, wheels, close parenthesis, new line. Print, open parenthesis, begin single quote,
clutch, colon, end single quote, comma, self, dot, underscore, clutch, close parenthesis,
new line. Print, open parenthesis, begin single quote, brakes, colon, close single quote,
comma, self dot underscore brakes, close parenthesis, new line, print, open parenthesis,
begin single quote, gears, colon, close single quote, comma, self dot underscore gears, close
parenthesis, new line, pound sign, instantiate a vehicle option, new line, my generic vehicle
equals vehicle, parenthesis, single quote, power steering, end single quote, comma, four, comma,
begin single quote, super clutch, end single quote, comma, begin single quote, disc brakes,
close single quote, comma, five, close parenthesis, new line, my generic vehicle dot display underscore
vehicle, open parenthesis, close parenthesis. The output that you are going to be able to get from
putting all this information into your interpreter includes, steering, colon, comma, power steering,
wheels, colon, comma, four, clutch, colon, comma, super clutch, brakes, colon, disc brakes, gears,
colon, comma, five. This example is going to show a lot of the different things that you will need
to make the syntax work. It is going to include the object definition, the methods definition,
the attributes, the destructor function, constructor function, and class definition.
These definitions and uses will be discussed a bit more in the following sections so that you can
learn why all of them are so important to helping you get the results that you are looking for.
Class definition as well as object instantiation.
Both of these are important parts of the syntax that we talked about above. First, let's look at the
different syntaxes that you will need to recognize in order to put these to good use.
When you want to invoke the methods and attributes within the syntax, you will use
the following options. Object, dot method, open parenthesis, close parenthesis.
Special Attributes that can be used in Python
Outside of some of the self-defined attributes that you are able to design on your own,
there are some classes that will have special attributes. These can help you get so much more
done with your work and ensures that the interpreter has an idea of what you would like to get done
with your syntax. Some of the special attributes that you need to understand with Python include
Underscore, D-I-C-T, Underscore. This is the dict variable of a class named space.
Underscore doc, Underscore. This is the document reference string of class.
Underscore name, Underscore. This will be the class name.
Underscore module, Underscore. This is the module name and consists of the class.
Underscore bases, Underscore. This is the tuple that will also contain all of the superclasses.
Let's take a look at how this may work with one of the syntaxes that you may choose to work with.
Class, cat, open parenthesis, object, close parenthesis, colon, new line.
Its weight equals zero, new line.
Its age equals zero, new line.
Its name equals, open double quote, close double quote, new line.
Def meow, open parenthesis, self, close parenthesis, colon, new line.
Print, open parenthesis, begin double quote, meow, close double quote, close parenthesis, new line.
Def display cat, open parenthesis, self, close parenthesis, colon, new line.
Print, open parenthesis, begin double quote, I am a cat object, comma, my name is, end double quote, comma, self, dot its name, close parenthesis, new line.
Print, open parenthesis, begin double quote, my age is, end double quote, comma, self, dot its age, close parenthesis, new line.
Print, open parenthesis, begin double quote, my age is, end double quote, comma, self, dot its weight, close parenthesis, new line.
Frisky equals cat, open parenthesis, close parenthesis, new line.
Frisky dot its age equals ten, new line.
Frisky dot its name equals, double quote, frisky, close double quote, new line.
Frisky dot display cat, open parenthesis, close parenthesis, new line.
frisky.meow .
When you are using this as your syntax in the interpreter, the result that you will get
on this screen is, I am a cat object, my name is frisky, new line, my age is, 10, new line,
my weight is, 0, new line, meow.
Accessing the members of a class.
In the syntax above, we have defined the cat object as frisky by showing the .operator
to access the members of that object.
This means that in order to assign 10 to the age of frisky, you will need to write it out
as frisky.itsAge equals 10.
You will be able to do this the same way with all of the other parts that you need including
the name, the display cat, and so much more.
In the example above, you were able to access a lot of different variables from the class
object, but this is not the most convenient way to go through and get all of the variables.
There are other ways that you are able to do this by using the accessor method to provide
information hiding or encapsulation to the syntax.
A good example of this is below.
Class.
Cat.
Open parenthesis.
Object.
Close parenthesis.
New line.
ItsAge equals None.
New line.
ItsWeight equals None.
New line.
ItsName equals None.
New line.
Pound sign.
SetAccessorFunctionUse to assign values to the fields or member vars.
New line.
Def.
SetItsAge.
Open parenthesis.
Self.
Comma.
ItsAge.
Close parenthesis.
Colon.
New age.
Self.
ItsAge equals ItsAge.
New line.
Def.
SetItsWeight.
Open parenthesis.
Self.
Comma.
ItsWeight.
Close parenthesis.
Colon.
New line.
Self.
ItsWeight equals ItsWeight.
New line.
Def.
SetItsName.
Open parenthesis.
Self.
Comma.
ItsName.
Close parenthesis.
Colon.
New line.
Self.
ItsName equals ItsName.
New line.
Pound sign.
GetAccessorFunctionUse to return the values from a field.
New line.
Def.
GetItsAge.
Open parenthesis.
Self.
Close parenthesis.
Colon.
New line.
Return.
Self.
ItsAge.
New line.
Def.
GetItsName.
Open parenthesis.
Self.
Close parenthesis.
Colon.
New line.
Return.
Self.
ItsName.
GetItsName.
Open parenthesis.
Self.
Close parenthesis.
Colon.
New line.
Return.
Self.
ItsName.
ObjFriskie.
Equals.
Cat.
New line.
ObjFriskie.
SetItsAge.
Five.
Close parenthesis.
new line obj frisky dot set its weight open parenthesis 10 close parenthesis new line
obj frisky dot set its name open parenthesis double quote frisky close double quote close
parenthesis new line print parenthesis double quote cat name is colon close double quote comma
obj frisky dot get its name open parenthesis close parenthesis close parenthesis new line print
open parenthesis begin double quote its age is colon close double quote comma obj frisky dot
get its age open parenthesis close parenthesis close parenthesis new line print open parenthesis
begin double quote its weight is colon and double quote comma obj frisky dot get its name
The output that you're going to get from all of this will be the following.
Cat's name is Frisky.
Its age is 5.
Its weight is 10.
In the example above, you are using the accessor method in order to set up and get the member variables.
This is done often for data hiding or for encapsulation.
Encapsulation is done if the variables are protected or private, but inside of the Python language, all of the member variables are going to be set to public by default.
For example, in this language, you are not going to find keywords like private, protected, and public in order to define their accessibility.
So basically, all of your attributes are going to be public.
Many languages that are like Python, such as other OOP languages, are going to prevent access to the attributes of different instances or classes,
with the idea being that if the programmer of the class didn't define or set up a method to manipulate the attribute,
then the user of this instance has no right to change it or even to examine it.
But Python is not going to use this approach.
With the attribute reference syntax, you are able to access most of the instances in the class attributes.
And when using the underscore dict attribute, the entire thing can be shown.
If you are someone who has used C++ or Java in the past, and you would like to use some of the programming techniques
that will allow you to protect the variables and functions that you are making in Python,
or at least make them private, it is possible.
You will need to work on these a bit and make some changes,
but it is possible to protect the work that you are doing in Python,
even when Python assumes that everything is public.
What is the process of name mangling?
When you are using a compiler construction, the process of name mangling,
or you may find it as name decoration,
is a technique that allows you to solve different problems in the code
that are caused by a need to resolve unique names for the programming entities
in many of the more modern programming languages.
It is basically going to provide you with a way of encoding more information into the class,
structure, function, and other data type within the order
to pass on more of the semantic information that you need from the compilers over to the linkers.
There are some times when the language will allow different entities
to have the same identifier as a name,
as long as they are going to take up different namespace.
These namespaces are going to be defined by their explicit namespace, class, or module.
They can also be the same identifier for a name if they have different signatures,
such as function overload.
Any object that is produced by a compiler is going to be linked
with other pieces of the object code by a linker.
The linker is going to need a lot of information about each of the entities within the program.
For example, if you want to link a function,
you will need the same name of the function,
the number of arguments that are inside, and so on,
so that the link is making sure to pick the right information.
In Python, you are able to do name mangling in your private class members.
You are able to use this by giving them a name that will have two leading underscores,
and no more than one that is trailing.
For example, saying underscore underscore thing will be fine with this,
but having underscore underscore thing underscore underscore will not work.
Python's runtime is not going to restrict access to the members,
but the mangling is only going to prevent name collisions
if a derived class defines a member with the same name.
When Python encounters name mangled attributes,
it is going to transform these names with a single underscore
and the name of the enclose in class.
Python will be able to automatically change the name
so that the references to this attribute,
when made in the usual way, end up failing.
The main reason for using name mangling in Python here
is to show that the program is going to take care of the class attributes,
and the name is mangled to help prevent a conflict with the program.
It is also a way that Python makes sure that you are only using them in cases
when you really need to,
not just because you think that you should.
When you are using the name mangling,
keep in mind that these underscores are not going to change
the way that your method will be accessed.
They are better off used for inheritances and other options
so that you are able to build things like hierarchies
without having to worry about a name collision.
The best strategy to do here is to get used to the model
where all of the codes in a single process
will be able to get along well.
Without having to use any of these private options
or worrying about name mangling,
since this is a complicated process
that is sometimes difficult to handle in Python.
So the next question that you may have
is if these underscores are really going to help you make things private.
Unfortunately, they are not going to work in the same way that you are used to
when working in the other programming languages
like C Sharp, Java, and C++.
Everything in Python is going to be public,
so the best bet is to insist that other collaborators
read and follow the documentation that you have in place.
Property
A property gets and sets a value.
It is going to work just like the methods do in Python,
but the syntax is a bit easier to use.
A property is often assigned like a variable,
and this causes the setter method to be executed.
In the cat class we used above,
you have already used a getter and a setter in the properties.
The setter property is going to assign a value to the member variables,
and the getter property will return a value from the member variables.
Instances and Static Methods
When you are using a static method,
you will be able to call them out without having to create an object of a class
using the new class names.
This is because the static method will not accept a self-instance.
On the other hand, when you are using an instance method,
you will be required to use an object of a class
and have it created before it can be called.
These two are opposite of each other,
and which one you will choose will depend on whether you want to create an object or not
when you are working on the syntax.
Objects and classes are important parts of working with your syntaxes.
The objects are going to be the part where you are able to define
what you are using within the statement,
and you will be able to define them in the way that you would like.
The class is going to be the selection that will contain
all of the different options that you would like to define within the program.
This section took some time to use the example of cat,
linking together all the cat objects,
such as age, name, and weight into the same class.
You are able to do so much when you get started with this,
and you can make your own classes based on the different things
that you are working on with your particular program.
Take some time to try out a few of the different syntaxes and statements
that we have inside of this chapter.
This will help you get some more practice with using your interpreter
and seeing what all you are able to do with the Python program.
You can mix around to use different scenarios when you get started
and mix up how many of the variables you would like to use,
as well as to make this more entertaining,
and to learn what you are able to do with this kind of program.
Chapter 8. What are inheritances, and how do they work in Python?
Inheritances is one of the main features that you will find in OOP,
which will allow your user to create a derived class from an existing base class.
The new derived class will inherit all of the features that were in a base class,
and you can add in some more features if you would like.
We took a look at this in some of the other chapters,
but we will look a bit more and see how they will affect your code writing.
Here is an example of what you might see when working on an inheritance.
Pound sign, example of an inheritance, new line.
Pound sign, base class, new line.
Class, student, open parenthesis, object, close parenthesis, colon, new line.
Def, underscore, underscore, init, underscore, open parenthesis,
self, comma, name, comma, role know, close parenthesis, colon, new line.
Self, dot, name, equals, name, new line.
Self, dot, role know, equals, role know, new line.
Pound sign, graduate class, inherits or derived from student class, new line.
Class, graduate student, open parenthesis, student, close parenthesis, colon, new line.
Def, underscore, underscore, init, underscore, open parenthesis,
self, comma, name, comma, role know, comma, graduate, close parenthesis, colon, new line.
Student, underscore, underscore, init, underscore, open parenthesis,
self, comma, name, comma, role know, close parenthesis, new line.
Self, dot, graduate, equals, graduate, new line.
Def, display graduate student, open parenthesis, self, close parenthesis, colon, new line.
print open parenthesis double quote student name close double quote comma self
dot name close parenthesis new line print open parenthesis double quote student role
know close double quote comma self dot role now close parenthesis new line print open
parenthesis begin double quote study group close double quote comma self dot graduate
close parenthesis, new line, pound sign, postgraduate class inherits from student class,
new line, class, postgraduate, open parenthesis, student, close parenthesis, colon, new line,
def, underscore, underscore, init, underscore, open parenthesis, self, comma, name, comma,
role, no, comma, postgrad, close parenthesis, colon, new line, student, underscore, underscore,
underscore, init, underscore, open parenthesis, self, comma, name, comma, role, no, close parenthesis,
new line, self.postgrad equals postgrad, new line, def, display postgraduate student, open parenthesis,
self, close parenthesis, colon, new line, print, open parenthesis, double quote, student, name,
close, double quote, comma, self.name, close parenthesis, new line, print, open parenthesis,
double quote, student, role, no, and double quote, comma, self.role, no, close parenthesis,
new line, print, open parenthesis, double quote, study group, close, double quote, comma, self.postgrad,
Pound sign, instantiate from graduate and postgraduate classes.
OBJ grad student equals graduate student, open parenthesis, double quote, main U, close double
quote, comma one, comma, begin double quote, MS-mathematics, close double quote, close
parenthesis, new line.
OBJ postgrad student equals postgraduate, open parenthesis, double quote, Shane U, close
double quote, comma two, comma, begin double quote, MS-CS, close double quote, close parenthesis,
new line.
OBJ postgrad student dot display postgraduate student, open parenthesis, close parenthesis.
When you typed this into your interpreter, you are going to get the results.
Student name, comma, main U.
Student role know, comma, one.
Student group, comma, MSC-mathematics.
Student name, comma, Shane U.
Student role know, comma, two.
Student group, comma, MSC-CS.
Overriding the base class for your derived class.
There are some times when you are going to need to override the base class in order to
bring it into the derived class.
The basic meaning of overriding in the OOP is basically replacing the same parental behavior
so that it is present in the child class.
You can add these features to the child class and then add in or change some of the features
to make them work the way you would like.
Through this method, the class is able to copy another class while also avoiding duplicating
the code, while also having the ability to customize or enhance part of the new code.
This is why it is important to learn how to do this so that you can make the exact code
that you would like.
Overloading
Another thing that you are able to do when you work with your inheritance class is overloading.
Overloading is basically the ability to use one single identifier in order to define more
than one method inside of a class that differ in the input and the output parameters.
The overload methods are going to be used when they will execute the same task conceptually,
but there will be small differences in the set parameters.
Overloading will also allow you to define two or more functions that have the same names
but different signatures, such as the number of parameters.
For the most part, you will not need to use the overload function.
Python is a dynamically typed program and it is going to support optional arguments in the
functions so the overloading process is not usually something you will need to worry about.
If you do decide to use the overloading process, you are going to have to download the right
module to help you out with this.
You will be able to install the module from
When you have had time to install the module and open it up from your command prompt or
the command shell and type in the following information
$python-overloading.py install in Windows or Linux
PIP install overloading in Linux
If the PIP has installed Windows, then you can also go with this command.
Now import the module from the overloading import and then it should work as overloading for you.
While we have spent some time talking about overloading, it is important to note that the
Python programming language is not going to use the overload function.
This is a dynamically typed language that will allow you to add in optional arguments to your
functions so there really is no reason to need the overloading features unless you are using one of
the other programming languages with your code.
Method overloading
Inside of Python 3.4, there has been an additional feature added that allows for method overloads.
This makes it easier to perform some different operations based on the type of your first argument.
When making a generic function, you are going to have one that is composed of multiple functions
implementing the same operation for different types.
Which type of implementation that you should use during this call is going to be determined
by the dispatch algorithm.
When the implementation is chosen based on the type of just one single argument,
this is going to be known as a single dispatch.
To define a generic function, you will need to decorate it using the at single dispatch decorator.
Note that the dispatch happens on the type of the first argument.
Operator overloading
When you are working in operator overloading, it means that you are going to give more than
one meaning to the standard operators, applying to objects constructed from programmer defined classes.
There are many different operators that you can use inside of your code including division signs,
multiplication, subtraction, and addition signs, but there are times when you are going to need
to do an overloading function in order to ensure that the program is going to do what you would like.
For example, if you don't do the operator overloading on the formula,
equations such as 3 divided by 4 and 2 divided by 3 are not going to show up in the program in the way that you would like.
Multiple Inheritance
Another feature that you can do inside of inheritance with Python is the multiple inheritance.
This is a feature in which a class can inherit some methods and attributes from two or more parent classes.
This means that class C is going to get some features from class B and then class B had gotten some of their features from class A.
Remember that doing a circular inheritance is not a possibility when working in Python,
but you can use a few parent classes to help put together a new class in the code.
Working with inheritance inside of your codes can make things easier.
It takes some of the features and methods that you are using inside of one of your codes and allows you to
put it into the new code and make changes and adjustments that you need to make something amazing.
You can even use a few different parent methods to make a new one if you would like to.
There are just so many things that you are able to do when working with inheritance,
and you will be able to save a lot of time and effort when you are able to use inheritance in some of your codes.
Conclusion
Working in Python can be one of the best coding languages that you can use.
There are so many things that you are able to do with your codes, from creating a simple code that
will have a statement show up, creating loops that will have the same information come back
up again and again, and so much more. This guidebook is meant to help you out with learning some more
that comes with Python after you have had some time to learn it before. These are nice codes that will
help you out so much when working within the language and getting the more complex codes that you want.
You need to have a bit of experience behind you to get started on this, but it is going to make things
more fun when you can do some of these options. We spent a lot of time working on the new topics
including regular expressions, exception handling, and more. It will not take too long before you are
able to add all these things together and make some of the best code that you could ever imagine.
It does not matter if you have used code in the past or are just getting started. You are going to find that
Python is one of the best coding languages that you can use to make some powerful code.
This guidebook is going to show you how to get started with some more complicated codes
so that you can make some more of the programs that you have always wanted to accomplish.
This has been Python Programming Advanced, a complete guide on Python programming for advanced users.
Written by Adam Stewart. Narrated by Corey Schaefer. Copyright 2016 by Ramandeep Shahi.
Production Copyright 2017 by Ramandeep Shahi.
Audible hopes you have enjoyed this program.
