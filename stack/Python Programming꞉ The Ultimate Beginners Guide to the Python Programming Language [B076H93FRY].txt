This is Audible.
Python Programming. The Ultimate Beginner's Guide to the Python Programming Language.
Written by Kay Connors.
Narrated by Stephen Strader, The Voice Ranger.
Computer Programming for Beginners.
Learn how to code step-by-step.
Introduction.
Before you jump in and start learning a programming language,
it will be helpful to you if you understand what programming is and how it works,
including some programming terminology.
A computer on its own is just a useless box.
It's nothing but a bunch of different hardware items assembled into a single unit.
At this point, these hardware items, either together or individually, are of no use.
This is as good as a car that has been assembled.
Is the car of any use without fuel?
In the same way, we need to provide the computer with fuel.
In this case, it's electricity.
A computer at this point is essentially just a big bunch of tiny electronic switches
that are either on or off.
Now, this is as good as a car with enough fuel and can be driven,
but no driver to drive.
We need a driver who can operate the steering wheel, gears, brakes, etc.,
which will make the car move around.
In the same way, by setting different combinations of these switches,
you can make the computer do whatever you want.
Now, telling a computer when to switch on these switches and when to switch off them is,
in other words, nothing but instructing a computer what to do.
This is what programming is, in very simple terms.
Programming often refers to computer programming.
So, this now brings us to our first and most important question.
Why learn computer programming?
Computer programming isn't just about building the next cool app
or about creating a killer website.
It's about planning, discipline, and problem solving,
as well as a good introduction to the wonderful world of logic.
Even for people who are never destined to actually make a career
out of telling a computer what to do,
there are some great advantages to be had
by acquiring the skills needed to actually do it.
Before looking at the three key skills
that are common to all forms of programming,
planning, problem solving, and logic,
it's worth recounting a little anecdote
about the misconception that programmers have to be engineers,
or at the very least, good at mathematics.
There was a time when computers were the size of a house
and communicated with the programmers
using little bits of cards and ticker tape.
If they went wrong,
someone had to repair the valves,
yes, valves,
and it saved a lot of time
if that person was also the programmer.
Learn planning through computer programming.
It is said that the best way to appreciate subject matter
is to teach it to someone else.
This being the case,
the best way to appreciate how to do something well
is to break it down into successively smaller steps
until the whole process is laid bare.
With knowledge of all the components,
estimates of time and cost can then be applied,
as well as the various checks and balances
that will prove that what has been done
has been done correctly
and is the correct thing to have done in the first place.
Computer programming as an introduction to problem solving.
Some things just don't seem possible at first glance.
No doubt the idea that every page on the internet could be indexed
and then searched in real time
was considered to be a bit of a pipe dream by some.
However,
knowing that a computer is just a thing
that can interpret commands
leads the programmer to be able to find a way to solve
just about any problem.
If there aren't any obvious solutions,
the brain has a way of being able to think laterally
and at least find a workaround.
The basis of this is known as logic.
Basic logic in computer programming.
This is really the only science-y bit of programming left.
Logic essentially allows you to hand
the decision-making process over to the computer
and force it to perform different actions
depending on the various conditions it encounters.
There are also logic constructs
that let the programmer repeat actions
as well as choose actions
and ways that various lists of instructions
can be reused for different tasks
depending on how they are invoked.
Seeing the entire domain
as a set of interacting objects in this way
is a fundamental transferable skill
that computer programming teaches.
In fact, all of these skills are transferable.
Computer programming is one big set
of transferable skills
and that's probably the best reason
there is to learn computer programming.
Chapter 1. What is computer programming?
Computer programming, commonly known as programming or coding,
is the art of making a computer
do what you want it to do.
Programming, in very simple terms,
is about writing programs.
A sequence of instructions
written to perform a specific task
for a computer
is known commonly as a program
but is also referred to as a software program
or even computer program.
A computer is just hardware
that requires instructions to act upon.
These instructions are executed
by the computer CPU.
Programming is planning
how to solve a problem.
No matter what method is used
pencil and paper,
slide rule,
adding a machine,
or a computer
problem solving requires planning.
Based on the above definition
programming is planning
how to solve a problem.
So, here we are not actually
solving the problem
but the computer will do it for us.
If we solve the problem ourselves
then there is no necessity
to write a program
and, hence,
we don't require a computer
to solve it.
Then why do we need a computer
if we know how to solve
a problem ourselves?
Because we simply cannot do it
at the speed and accuracy
with which a computer can.
Also,
we may get tired and bored
of doing the same job
again and again.
But the computer can do
the same job
a million times
at the same speed
and accuracy
as the first one
without getting bored
or tired.
We can take a simple example
of calculating
the sum of all even numbers
from one to one million.
This is not something
that we cannot do
but the time
that is required
to calculate,
the possibility
of making a mistake
at some point of time,
a number of resources
required
if we use a pen and paper
or a calculating machine,
and other similar reasons
make this an undesirable option.
Over and above this,
what if we need to calculate
between a different set
of numbers
again and again?
It is difficult humanly.
However,
by writing a program,
we can achieve this
in less than five minutes.
At the same time,
we can keep running
the same program
again and again
for doing any number
of calculations
and get accurate results
in seconds.
We can instruct
the computer
to take each number,
add it to the next,
and from there on
add every next number
to the previous sum
until we reach
the upper limit specified.
Don't look at these
instructions for its accuracy.
But what you need
to understand here
is that
we can instruct
a computer
to solve a problem
only if we know
how to do it.
This means that
unless we know
the solution
to the problem,
it's of no use
even to try solving one.
You can take an example
of a cab driver
on the street,
but who is new
to the city?
With this cab driver,
we cannot simply
get into the car
and ask him
to drive to point A.
We will have to give him
proper instructions
on the route
that he needs to take
to reach the destination.
We can give him
the instructions
on the route
only if we know how.
Otherwise,
it will be
a futile effort.
In the same way,
there is no point
even trying to write
a program
until you have
the knowledge
of how you are going
to set about
solving the problem.
Put in simple words,
programming is telling
a computer what to do.
Though it seems
to be pretty simple,
it's very complicated.
The very important point
here is that
computers don't speak English.
Since a computer,
being a machine,
only understands
two basic concepts,
on and off.
The on and off concept
is called binary system,
with on representing one
and off representing zero.
Hence,
the computer knows
only one language,
that is of zeros
and ones,
commonly known as
binary language.
The second important thing
is that your instructions
should be precise.
As we have mentioned previously,
a computer on its own
is just a useless box.
It's nothing but a bunch
of different hardware items
assembled into one unit.
So,
if you have to instruct
a computer,
then you have to tell it
precisely
what to do.
Computer programming.
Now,
we are going to present
computer programming
and discover
how it may be applied
to command
the way your computer
operates.
Generally,
computer beginners
aren't concerned
about controlling
the computer,
but are commonly
concerned in learning
more about
how it all works.
Nevertheless,
they may be surprised
to learn that
computer programming
increases computer knowledge
as a whole,
and it can assist
to decrease
the fearfulness
and intimidation
associated with
using a new computer.
Computer programming
is creating
a succession
of commands
that enable
the computer
to do
some actions.
The people
who program
computers,
called
computer programmers,
use a
programming language
to communicate
with a computer.
You might have
heard of some
of these languages
in the past,
such as Visual Basic,
C++,
Python,
or Fortran.
There are
hundreds of
other programming languages,
and neither one
is better than the other.
Just about all of them
are capable of
executing the same
tasks
and accomplishing
the same goals.
A programmer
chooses one language
by a simple preference.
Each of these languages
differs by the way
they communicate
with a computer,
and the commands
that they abide by
are very specific.
Not a single command
of one language
can be exchanged
with the commands
or language
of another,
but all of them
can be used
to control a computer.
At present,
it would be impossible
to teach you
how to program
any language
in a single book.
However,
we can still
introduce you
to some of
programming's
most basic concepts,
starting with
the commands.
Commands are
the instructions
that a computer
conforms
to perform an action.
To make them
work inside
of a program,
programmers assign
commands
to objects
like buttons,
for example.
The commands
in a program
are pretty worthless
unless they have
some data
to pursue.
So programmers
either give
the programs
some information
to work with,
a list of names
or numbers,
for example,
or they make
the program
generate its own data.
Occasionally,
the data comes
from an outside source
like the internet
or the computer
that the program resides.
The data
that a program receives
is called input
and data
that the program
generates
is called output.
Other times,
the data is unknown.
If the program
were working
with a simple
algebraic equation
like x plus 5
equals y,
the variables x
and y
would be
unidentified pieces
of data.
Or if a program
were to calculate
a date x
days from now,
variable x
would be
an unidentified
piece of data
until we tell
the program
what x is.
In programming,
it's sometimes
required to work
with unidentified
pieces of data.
That's when
conditions are convenient.
Conditions allow
a program to execute
an action
based on the event
of a previous command.
Using this type
of command,
we can instruct
a program
to do one thing
if the x variable
in our latter example
turned out to be
nine days
and then do
a different thing
if the variable
turned out to be
31 days.
Commands,
data,
variables,
and conditions
help build
the most
simple programs.
And there are
certainly more
components of
any programming
language.
But when they're
typed into a
programming language
and compiled
to create an
executable file,
a file ending
with the .exe
extension,
they turn
into a software
application.
As we mentioned
earlier,
you can use
a programming language
to control
your computer.
By using
simple commands,
you can program
your computer
to perform
mathematical tasks,
fill out web forms,
compose an email
message,
and send it off,
or any number
of other things.
If you're interested,
you may find
Visual Basic
one of the easiest
computer programming
languages to learn.
Visual Basic
is an object-oriented
programming language,
and it automatically
codes much of a program
the minute a programmer
drags a button
onto a screen.
Chapter 2.
What can you do
with computer programming?
In summary,
computer programming
is the process
of designing
and writing
computer programs.
That sounds
pretty straightforward,
doesn't it?
At its most basic level,
you can think of
programming as
giving instructions
to a computer
to do something
you want it to do,
which might sound
very similar
to how you operate
your desktop computer.
Simplistically,
the only difference
between what you are
doing now
as a computer user
and what you might do
as a computer programmer
is that the instructions
are saved somewhere
so they can be used
over and over.
As a matter of fact,
if you have used
macros
in a software program,
like a word processor
or spreadsheet,
or countless
other applications
that are macro-enabled,
you have already done
computer programming
of a sort.
Programs can be
as simple as
a set of instructions
stored in a text file
for doing some mundane task,
like making backups
of all the computer files
in a folder,
or as complex
as something like
a word processor,
or the operating system
that your computer uses,
which can require
millions of lines of code.
We need to understand
that computers
are generally
just pieces of metal,
plastic, silicon,
and other materials
stuck together
in a way
that allows them
to do some amazing things
that seem like thinking,
can't actually think at all.
But what they can do
extremely well
is follow instructions.
So what are
these instructions anyway?
At the level
that a computer understands,
these have to be
very precise,
very detailed,
and very complete
step-by-step directions,
and they must be
in a form
that the processor
and other parts
of the computer
can understand,
and that is as
little electrical pulses
which humans
aren't capable of emitting,
at least not at this time.
In a way,
you can think
of a computer program
like a recipe,
a set of instructions
that can be followed
to produce a result.
In the case of a recipe,
the instructions are used
by a human
and can,
therefore,
be a bit descriptive,
leaving out
some of the details.
For example,
if a recipe instruction
is to pour the mixture
into a blender
and whip until frothy,
it is assuming
that the human knows
what a blender is
and where it is
and how to set it up
and how to use it,
and also
what poor means
and what frothy means,
and so on.
The human chef
is expected
to fill in the gaps.
A computer
can't do this.
It has no idea
what anything means
except for a few
very simple instructions.
The way we do this
is to write instructions
that can then
be translated
into something
the computer
can understand.
The way to write instructions
is called
a programming language.
What a programming language
allows us to do
is to write instructions
for the computer
in a more or less
human-readable form
that can then
be translated
into something
the computer
can work with.
The human-readable instructions
are typically called
a code.
Each line
of human-readable code
translates into
thousands of
detailed computer instructions.
A special program
or set of programs
is used
to do this translation.
Each computer language
has its own translators,
which are called
compilers or interpreters.
Once the translation
is done,
the result is stored
in some form
such as a file
or a set of files
or in computer memory
in some cases.
And each time
the software is run,
the computer will
follow the instructions
and, hopefully,
the program will do
whatever it is
that it is supposed
to be doing.
Although it is
often imagined
that you have
to be a genius
to be able
to write useful software,
almost anyone
who is computer savvy
and has an interest
in becoming a power user
can learn to program.
Most software
is written by
average people
with specialized
knowledge and skills.
Mastering computer programming
can be a lifelong pursuit,
but gathering enough
knowledge and skill
to be able to write
useful code
isn't out of reach
for anyone
who knows
how to use a computer
and is willing
to dedicate
a little time
or maybe
a lot of time,
but still,
it isn't
out of reach.
Chapter 3
Understand the Basics
of Computer Programming
If you have used
a computer
for any purpose
up until now,
you may not agree
with me,
since you have been
using it mostly
in English
or any other language
that you know.
You may have
watched movies,
listened to songs,
created documents,
sent emails,
browsed a lot of sites,
and you may even
have read my articles,
books, etc.,
in one of these
human-readable languages.
Also,
if you have written
a program
or even seen
somebody doing it,
you might have noticed
that even they
have not been using
the language
of zeros and ones.
Even if you agree
that there are people
who know this language
of zeros and ones,
looking at the
second important point,
we said that
the instructions
should be precise.
you might be thinking
that it will be
next to impossible
to even write
a simple computer program,
if what I'm saying
is true.
Today,
to use a computer,
you need not know
how a computer works
or what language
it speaks.
All you need to do
is simply turn on
a computer
and when it is ready
to use the mouse
and keyboard,
point at some little
graphical object
on the screen,
click a button,
or swipe a finger
or two in the case
of a touchscreen device
to get a computer
to do what
is required of it.
An example would be
what you need
to read this book
if you're reading
on a computer.
The reason computers
are so easy
to use today
are because of
the hard work
of some programmers
who have programmed
for it to behave
in a certain way.
And here,
we are not trying
to use a computer
but to learn
how to program
a computer.
But the computer
doesn't know anything
except for
binary language.
And remember,
not all computers
speak the same dialect.
That is the reason
a program
on a desktop computer
does not run
on an iMac
and vice versa.
Let me explain
with an example
of two blind people
wherein the first person,
let us call him
as person A,
knows only English
and the other person,
let us call him
as person B,
knows only French
and is blind.
Person A wants
person B
to draw a sketch.
Now,
how do you expect
these two
to communicate
with each other?
Isn't it difficult?
Person A
can't even show
in writing
since person B
is blind.
The only way
of communicating
is through speech
in a known language
and by giving
precise instructions.
Now,
the only way
they both
can communicate
with each other
is by having
an interpreter.
Now,
when person A
speaks in English,
the interpreter
then translates it
into French
and repeats it
to person B.
When person B
says something
in French,
the interpreter
again translates
and repeats
the sentence
in English
to person A.
Now,
with the help
of an interpreter,
both are able
to communicate
very easily.
Using the interpreter
solves our language problem.
We still have
another problem at hand.
That is,
person A
is asking person B
who is blind
to draw a sketch.
Though this is not
something that
is impossible,
it is difficult
unless you know
how to instruct.
Even if person A
is able to now
communicate,
he should know
the steps
in a proper order
and very precisely.
Otherwise,
he will get person B
to draw something
but not what
he would be expecting.
Person A should know
every minute detail
very precisely
since person B
is blind.
He will just follow
whatever person A
instructs.
If person A
asks him to draw
a line of
1.23 centimeters
from a particular point
with a certain degree,
person B
without questioning
anything
just does that
without even thinking
about the outcome.
If person A
knows how to
instruct precisely
and exactly
in the way
it is required,
then person B
will draw
what he wants
in the way
he wants.
If we get back
to computer programs
and use the same
approach as in
the above example,
everything becomes
simple and easy.
Replace person A
with yourself
and person B
with a computer.
Now the first
thing you need
is an interpreter
and the second
is knowing
what you want
and the precise
steps that
is required
so that you
can get the
work done.
To read or write
a binary code
or program
is unfortunately
very difficult
for humans.
So we have to
use some kind
of program
that can translate
something we
instruct in English
into binary language
and vice versa.
These programs
which can translate
our instructions
in English
into binary code
are surprisingly
called
wait for it
an interpreter.
Do these interpreters
really understand
English?
This might be
the question
you're asking
yourself
or not.
Either way
the answer
is yes
and no.
Yes
since we use
English words
in programming languages
and no
since computers
are still not
up to that level
so as to
understand
what we speak
be it
in any language.
This type of language
is known as
high-level language.
By using
the term
languages
we are not
referring to
various languages
such as
English,
French,
etc.
But we're
referring to
the high-level
languages
that we use
to write
programs
which are
then interpreted
and converted
into binary code
so as to
make the
computers
understand it.
Chapter 4
Computer Programming
Concepts
for Beginners
Getting Started
the Easy Way
A computer
program is
made up of
a chain
of instructions
a computer
has to
perform.
These instructions
may come
with other
important data
that's needed
to carry out
those instructions.
Hence,
the process
of programming
involves
the defining
of the instructions
and the data.
For you
to come up
with data
for your computer
you should be
familiar with
computer programming
basics
and the three
fundamental elements.
1. Instructions
that need
to be carried
out
2. Order
in which
the instructions
are to be
carried out
3. Data
needed
to complete
the instructions
The first
stage of
computer programming
basically involves
paper processes.
In this phase
you don't even
need to work
using a computer.
However,
if you use
a word processor
that will enable
you to write
your work
to a disk file
rather than
on a piece
of paper.
You need
to do this
so you can
figure out
clearly
and more
specifically
what you
want your
computer to
perform
before you
begin to
instruct the
computer to
execute it.
Bear in mind
that the
computer will
follow the
instructions
exactly as
given.
It can't
say what
you want
it can
rather do
what you
want it
to do.
So before
your program
comes close
to a computer
you need
to do
several steps
which include
number one
defining
the problem
before you
instruct the
computer
what to
do
you must
first be
familiar
with it.
You need
to clearly
tell the
computer
what it
needs to
accomplish
or to
generate
as the
outcome
of all
the
activities
it will
perform.
Number two
identifying
the solution
If you
already know
what the
computer will
produce as
an end
result
you should
take a
close look
at the
information
you have
and determine
the information
that you
require.
There's also
a need
for you
to define
the logical
procedures
equations
and other
methods
you have
to utilize
so you
can manipulate
the raw
input data
into the
end result
you want
to achieve.
Number three
mapping
the solution
This stage
in computer
programming
has to be
laid out
in proper
order.
Don't forget
that the
sequence
in which
actions
are used
is as
vital as
the actions
themselves.
When organizing
the solution
into the
right order
you will be
putting choices
into consideration.
When you're
done defining
the problem
as well as
designing
and mapping
the solution
the next
thing you
need to do
is the
task of
writing the
program code
into one
or a couple
of computer
languages.
But before
you proceed
you must
first decide
on the
possible
languages
you need
to use
as well
as the
particular
computer
platform.
Usually
computer
languages
are optimized
for various
kinds of
tasks.
It is
important
to select
first
the language
that will
best suit
the task
required.
Instructing
or telling
a computer
what to do
The process
of instructing
or telling
a computer
what to do
is called
computer
programming.
It involves
writing
valuable
sustainable
extensible
commands
that can
be read
by a
computing
system
to do
a
significant
task.
Programming
can be
achieved
using one
or some
of the
different
languages
dubbed as
programming
languages
as explained
above.
Since one
instruction
is not
enough
for a
computer
to perform
something
substantial
you need
to come
up with
a set
of
instructions
known as
programs
and submit
it to the
computer
to be able
to complete
a task.
For beginners
learning
programming
concepts
as well
as the
processes
in making
computer
programs
isn't a
piece of
cake.
It requires
know-how
and programming
skills.
The lowest
form of coding
a novice
programmer
can do
is the
machine
code.
This code
is written
in binary
and it
uses a
series of
zeros
and ones.
However,
just because
it is known
as the lowest
form of code
doesn't mean
it is the
easiest
to do.
Higher
code
forms
like
Java,
C,
and C++
are made
to make
it easier
for anyone
to learn
and use
compared
to the
machine
code.
For
beginners
to know
what they
should expect,
here are
the procedures
involved
in computer
programming.
Number
one,
developing
a program.
In this
stage,
the programmer,
whether novice
or experienced,
usually works
with internet
marketers,
sociologists,
or other
individuals
to find out
the program
needed by
the market
to be able
to work
better at
home or
in the
workplace.
The features
of the
programs are
then created
from the
suggestions
of the
other people
involved.
It is the
programmer
who will
determine
the feasibility
of the
suggested
features.
Number
two,
choosing
the right
language.
Depending
on the
programs
you need
to develop
and your
knowledge
of the
language,
you now
need to
select
the right
language
you will
use.
Hypertext
Markup
Language
and Hypertext
Pre-Processor
are the
two
internet
languages
commonly
used by
programmers.
HTML is
ideal if you
are developing
a basic
web page,
while PHP
is for the
applications or
things that
you actually
don't see
happening.
Other languages
you can use
are CSS,
Visual Basic,
MySQL,
C,
C++,
Java,
and many
others.
Programmers
frequently
use different
languages in
a single
program,
since each
of them
has unique
functions.
Number
three,
writing the
script or
coding the
program.
Once the
features of
a certain
program are
made final,
the programmer
should now
start working
on it.
This involves
coding the
program or
writing the
script to
perform
particular
actions by
means of
a computer
language.
Number
four,
testing the
program.
After coding
the program,
it needs to
be tested
before it
will be
released.
Programmers
usually apply
for this
program in
various operating
systems to
test its
ability to
function.
If the
program works
well,
it will then
be released
in beta
version.
Number
five,
troubleshooting
errors.
Along with
the release
of the
program's
beta version
is a
request for
users to
report any
bugs or
errors they
encounter so
they can be
fixed right
away.
Computer
programming is
by no
means easy.
You need to
be armed
first with
the basics
before you
can move
on to the
next and
more crucial
steps.
The best
way to
learn the
ins and
outs of
computer
programming
and programming
concepts for
beginners is
to read
books,
take classes,
or listen
to programming
tutorials.
Things to
consider when
writing a
computer program.
Number
one,
set up the
logic of
the
program.
Logic is
considered the
backbone of
any program.
It needs to
be prepared
based on the
resources your
chosen programming
language allows.
Preparing the
logic must be
done prior to
the real coding
process.
You should
make a flow
chart for
your program
or write its
algorithm before
you start with
the process of
writing the
program.
Number
two,
split the
programs into
functions.
The majority
of the programs
let you break
the program
into functions.
These functions
need to be
written with
the least
number of
instructions.
They must be
designed in
such a way that
they can be
reused over
and over
again.
Number
three,
study the
syntax of
every command
you'll use.
One of the
reasons for
most programming
errors is an
improper use
of syntax.
There are
many programs
that have
features that
can be used
to check the
syntax of each
command as well
as integral
functions that
you want to
utilize.
Number
four,
make sure
your code
is short.
The fewer
the number
of instructions,
the faster
the rate of
execution of
the program.
Most of
the time,
we use
complex logic
in getting
this task
done.
Little do
we know
that this
task can
easily be
performed if
we utilize
the built-in
functions of
the programming
language.
To avoid
these problems,
you should
have enough
knowledge of
all the
inbuilt
functions
available in
the program.
Number
five,
be sure
that variable
names and
functions are
logical.
Proper names
used in
functions and
variables make
the coding
process simpler.
While using
illogical variable
names won't
impede the
program's
functionality,
it will make
it harder for
you to enhance
or modify
this code
afterward.
Aside from
learning various
programming languages,
computer programming
for beginners
involves familiarization
of the above
mentioned tips.
In order to
pass on
instructions to
computers,
programming languages
are used.
These languages,
which are
designed by
people,
are based on
the so-called
rules of
syntax and
semantics.
These days,
a wide range
of languages
have been
made,
employed,
and discarded.
Programming
languages usually
don't last
that long.
They come up,
but after just
a few years
of stay in
the industry,
you will feel
that the
language needs
some improvement
or you need
something your
chosen language
can't provide.
It won't be long
until that
particular language
is replaced
by a more
flexible successor.
Programming
languages do
evolve because
there's a
continuous search
for efficient
transformation of
human language
language into
machine code.
Languages produced
usually start
with ideas,
which conceal
hardware and
employ representations
that are more
convenient to
human programmers.
Another crucial
facet of language
design is dealing
with the
program's
complexity.
As programs
become bigger
and more
refined,
developers have
come to realize
that there are
language types
that are easier
to support
in huge systems.
Because of this,
event-driven
and object-oriented
languages have
become widely used.
Types of
programming languages
Since this field
is evolving,
there is no
set standard
in categorizing
programming language.
One way to
categorize them
is through
programming paradigm.
These classifications
include
Number one,
object-oriented.
Object-oriented
programming
isn't just the
newest.
It is also
the most powerful
among the paradigms.
In programs
that are
object-oriented,
the designer
indicates the
data structures
as well as
the categories
of operations
that can be
done on it.
The combination
of data
and operations
that can be
carried out
is dubbed
as an object.
Number two,
procedural.
Procedural programming
involves a list
of actions
a program needs
to accomplish
to be able
to attain
a certain goal.
This is a
simple paradigm
wherein a program
is divided
into a starting
phase,
list of operations
that need
to be done,
and an ending
stage.
Also called
imperative
programming,
procedural programming
involves the idea
of the procedure
call.
Number three,
structured.
A unique type
of procedural
programming,
structured programming
offers additional
tools that can
be used to deal
with the issues
produced by
larger programs.
In structured
programming,
the program
is split
into small
codes that
can easily
be understood.
often times,
structured programming
is associated
with a top-down
approach which
starts with an
overview of the
system.
Computer programming
languages are
artificial and are
made to manage
computers.
To come up with
a new and better
language,
the developer
needs to spend
hard work
and long hours.
With this
introduction to
computer programming,
you've become
familiar with the
various types of
languages based
on paradigms.
integral parts
of programming
languages.
Are you new
in the field
of computer
programming?
If so,
it is very
important to
know and
understand the
common concepts
and principles
involved in
such a field.
While computer
programming for
beginners comes
with a certain
level of
difficulty,
it is still
achievable,
especially if you
are equipped with
the basic
principles and
concepts.
Writing a
program involves
storing data as
well as
manipulating it by
means of a
series of
instructions.
Included in the
data are time
and countable
factors such as
names, dates,
and descriptions.
By means of
data types,
you'll be able to
find out how
data must be
stored and
used.
Most programming
languages such
as C, C-sharp,
C++, Visual
Basic, and
Java have
integral parts
which novice
programmers need
to get acquainted
with.
Among such
parts are
number one,
variables.
Programmers have
to understand
that variables
provide them
with momentary
storeroom for
any information
needed while
the program
is used.
Variables also
play a great
role in moving
information from
one section of
the program to
another.
There's also
the so-called
local variable
which can be
accessed or
modified by a
specified portion
of a program
and global
variables which are
accessible to
any part of
the program.
number two,
data types.
Any computer
language comes
with data types
because they
help maintain
the information
contained in
the program.
However,
programming languages
have some
restrictions on
the data types
they provide.
Among the
popular data types
are characters,
pointers,
numbers,
and strings.
Numbers come
in either
floating points
or integers.
String data
conceals internals
that can be
manipulated via
exposed functions.
Additionally,
character data
types stocks
up numbers,
symbols,
letters,
and spaces
while the
pointer is a
piece of memory
which can also
be utilized for
storing arrays.
Number three,
output.
Since it is an
important part of
any programming
language,
it is advisable
that you have
a good understanding
of the various
types of outputs
in the majority
of the computer
programming languages.
One of the
popular types
is text output
which provides
a simple means
of revealing
the result
of a particular
computer program.
Graphical output
is a bit difficult
and it needs
higher resolution.
Number four,
testing conditions.
These allow you
to find out
the path
through a program
by implementing
a code
with value
as the basis.
This value,
which can be
variable,
another expression,
or constant,
is compared
against an expression.
One example
of a testing
condition statement
is IF.
In case the
validations
became unsuccessful,
many computer
languages let you
define a chunk
of code that
needs to be executed
using the
ELSE statement.
Aside from
the indispensable
elements of
programming languages,
computer programming
for beginners
also requires
you to be familiar
with the different
language categories
which include
compiled languages,
markup languages,
and programming languages.
It is also wise
to have a full
understanding
of the general
principles and
concepts behind
each and every
programming language.
All of these
factors are very
useful in helping
you become an
expert in a
particular programming
language or in
computer programming
in general.
Basic languages
you can use
in creating programs.
Individuals who
want to learn
computer programming
and the languages
that can be used
in making programs
must first be
familiar with
the basics.
Languages employed
in programming
should be one
of your primary
considerations.
Prior to creating
programs,
it is crucial
that you know
the different
types and levels
of programming
languages.
Among these
are...
Number one.
Machine level
language.
We all know
that computers
work in bits
and bytes
and it reads
and understands
binary digits
0 and 1.
While you are
free to create
a program
in any language
you like,
it has to be
transformed into
the languages of
0s and 1s
before it can
be implemented.
It means you
need to write
a program
or convert
your written
program into
machine language.
And this is
no easy task.
It is nearly
impossible to
memorize a long
sequence of
0s and 1s
for each instruction
you wish to be
executed.
Yes, it is true
that before the
development of
high-level languages,
the ones used
in making programming
codes were
machine-level
languages.
These days,
however,
this level of
language is not
used anymore
in designing
computer programs.
Number two.
Assembly-level
language.
This level of
programming is
only one level
higher than
a low-level
or machine
language.
This is actually
the reason why
creating a program
using such
languages isn't
a piece of cake,
although the
programming code
produced is
still understandable.
There are lots
of programs
for embedded
technology that
are created
in assembly
language.
The program
that's responsible
for transforming
assembly-level
programs into
machine-level
programs is
called the
assembler.
Number three.
High-level
language.
These computer
languages are
easier for humans
to understand.
It entails
clear statements
for making
each instruction.
Languages that
fall in this
category have
different purposes.
There are
languages designed
for web
programming,
some for
desktop applications,
while others
can perform
both tasks.
One thing to
bear in mind,
though,
a high-level
language isn't
easy for the
computer to
understand.
This is where
the importance
of an interpreter
or a compiler
comes into play.
Such programs
transform the
programming code
into a language
form the
machine can
understand.
Aside from
these three
basic levels
of languages,
another generation
of programming
languages now
being designed.
This is dubbed
as the fourth
generation language,
which is designed
for those who
have very minimal
or no programming
experience.
Developers of
such language
want these
inexperienced
programmers to
learn to prepare
their own code.
This is also
the very reason
why high-level
languages like
Java already
came with
these systems.
These enable
a person to write
a programming code
without memorizing
every function.
Bear in mind
that no matter
what programming
language you
want to learn,
you need to have
a proper understanding
of the basics.
If you're not
familiar with
programming language
basics,
you will not be
able to make
a program
in that specific
language.
It is advisable
that you take up
computer courses
so you'll be able
to learn more
than just the basics
of computer programming.
Chapter 6.
Computer Programming
Languages
Continued
Programming
Computer Languages
typically belong
to any of the
two types,
compiled and
interpreted.
Compiled
programming languages
are implemented
by using
compilers,
which are
translators that
generate machine
code from
source code.
The compiler
can translate
the source code
into the
intermediate form,
which is known
as bytecode.
In interpreted
programming languages,
the programs
are not
directly executed
by the host
CPU,
but they are
executed by a
software program
called an
interpreter.
It is advisable
to start with
programming for
beginners like
BASIC.
There are several
BASIC compilers
and interpreters,
along with
commercial programming
like Visual
Basics from
Microsoft.
Though there are
several types of
BASIC,
it is advisable to
start with
QBASIC.
In order to run
QBASIC,
you need to get
to DOS and
then find out
the icon
MS-DOS.
Double-click on
it so that you
can get
C colon slash
slash Windows.
Type QBASIC
and press the
enter key.
If you get a
blue screen with
something like a
guide, it means
that you are
ready to program.
If you want to
learn programming
with a simple
syntax, you can
go for LOGO.
LOGO is used
for functional
programming.
It is known
for its
turtle graphics,
which is a
method of
programming vector
graphics by
using a cursor.
You can build
more complex
shapes like
squares, circles,
triangles, and
other figures with
the help of
this language.
Though there are
many good
beginner programming
languages, it
is worth selecting
C, C++,
BASIC, and
Java, which
are great for
learning and
support.
C is a
popular programming
language that
has facilities
for structured
programming.
It features a
static type
system to
prevent unintended
operations.
C++ is a
compiled, general
purpose programming
language and is
an enhancement
of the C
programming
language.
It offers
more than
30 operators,
which cover
basic arithmetic,
comparisons,
logical operations,
and manipulation.
Java derives
much of its
syntax from
C and
C++.
The Java
applications are
compiled to
bytecode and
they can be
run on any
Java virtual
machine, irrespective
of the computer
architecture.
Modula 2 is a
great teaching
language that is
ideal if you
want the power
of C++ and
the friendly
syntax of
BASIC.
It is advisable
to have an
integrated
development
environment,
IDE, that
supports several
languages for
the purpose of
editing, in
addition to
indexing and
syntax highlighting.
integrated
development
environment is
also known as
integrated
debugging
environment that
offers you some
facilities for
developing software
applications.
An IDE
consists of a
source code
editor, a
compiler
interpreter,
automation
tools, and
debugger.
The source code
editor is designed
to edit the
source code of
the computer
programs.
It simplifies the
process of inputting
the source code by
auto-completing and
bracket-matching
functionalities.
build automation
helps to compile
source code into
binary code.
It runs tests and
creates release
notes.
The debugger is
used to test and
debug other
programs.
It offers some
sophisticated functions
like running a
program step-by-step
and pausing the
program to examine
the present state.
When you are just
getting started, it is
essential that you
learn the basics of
computer programming.
This will enable you
to gain a solid
foundation upon which
to build your
knowledge and
experience.
Logic, basis of
computer programming.
A computer
program, as we
have seen, is a
set of instructions
that we issue to a
computer for it to
carry out a task
for us.
To be able to
tell the computer
what to do, we
need to have the
basic idea or
steps involved in
our mind that
would be required
to complete our
task.
This brings us
to the concept
of logic, which
in fact is the
base and core of
every computer
program that you
write.
However simple or
however complex the
program might be.
The logic, in
simple terms, could
be seen as the
trick behind the
solution to a
problem.
It is that
instruction or set
of steps that form
the most important
part of the
program and is the
basis of problem
solving.
Consider, for
example, finding the
average of five
numbers input by a
user.
What is the first
thought that crosses
your mind when you
think of the
solution of this
problem?
Simple mathematics
tells you we need
to add the numbers
and divide them
by five.
This very step,
which forms the
core to the
solution of this
problem, is in
fact the logic
behind the
solution of this
task and what our
program would be
based upon.
When we write a
program for the
above task, we
will...
out of all these
steps, as we can
clearly see, the
most pertinent steps
depend on our
entire output, and
the action the
program performs are
two and three,
adding the five
numbers and dividing
them by five.
If we were to
change these steps,
the whole purpose
and behavior of
the program would
change.
Consider for a
moment that we
replace steps two
and three by the
following.
One, take the
five numbers from
the user.
Two, take the
first number and
store it in the
variable smallest.
Three, take the
next number.
Four, compare
with smallest.
Five, if number
less than smallest,
then store this
number to
smallest.
Six, repeat
steps three to
five for all
remaining four
numbers.
Seven, give the
results stored in
smallest back to
the user.
What do you
notice here?
The first and
last steps are
still the same.
What we have
changed is the
core or the
logic of the
program, i.e.,
once the user
has input the
five numbers, we
have changed what
we do with the
numbers.
This change now
gives us the
smallest number from
the five numbers
input as the
result.
This thus becomes a
program to find the
smallest number from
a list of given
numbers.
Programming languages
to learn.
One of the most
common questions we
hear from individuals
hoping to enter the
IT industry is,
what programming
languages do I need
to know?
Obviously, this is a
complex question, and
the answer will
depend on what field
the questioner is
going into.
However, those
already in IT know
that the greatest
skill you can have is
to be a jack-of-all-trades.
A well-prepared
worker can switch
between computer
programming jobs with
only minimal
training, thanks to
a wide knowledge of
multiple programming
languages.
Because of this, the
quick answer to this
question is, as many
languages as you can
learn.
Of course, if we took
the time to learn
every programming
language possible, we'd
never actually earn
an income.
This list covers
essential computer
programming languages
a person trying to
enter IT should know.
Number one, HTML,
CSS, and
JavaScript.
These three different
languages are listed
together because between
them, they make up the
vast majority of
website coding.
Since the Internet is
now the dominant means
of global communication,
there will always be
jobs in web design
and development.
HTML, CSS, and
JavaScript are similar
in many ways, but each
has a different capacity
to improve website
function.
HTML stands for
Hypertext Markup
Language and is the
basic language of
websites.
HTML is used to
insert images, links,
basic formatting, and
content onto a webpage.
It's one of the
easiest and usually
the first programming
language aspiring IT
professionals learn.
CSS is a natural
extension of HTML that
introduces more features
to a website.
CSS, or
Cascading
Style Sheets, allows
for complex websites
with constant formatting.
by making individual
webpages call up a
separate piece of code
that determines elements
on the page.
This allows for
cleaner coding and a
separation of layout
and content.
JavaScript allows for
client-side interactivity
on a webpage and is
designed to blend
seamlessly with HTML and
CSS.
Text boxes,
buttons,
and pop-up are all
functions of JavaScript.
JavaScript.
Number two,
Java.
Java is similar in
many ways to
JavaScript, but is
in fact unrelated.
It's an object-oriented
language with many
uses and is designed
to be both intuitive
and stable.
Java's versatility
and widespread use
make it handy for
developers, and it'd
be nearly impossible to
find a successful
programmer who didn't
know it like the back
of his or her hand.
Java is most often
seen in web
applications where it
can run more advanced
GUIs than JavaScript.
Many online games run
through Java.
It is not a particularly
fast or powerful
language, but it can
do practically anything
and is almost
universally understood
across different
machines and operating
systems.
Because of this, it's
a programming language
every IT worker
should know.
Number three, C and
C++.
These two languages
are old classics,
still widely in use
today.
C was developed in
the 1970s and
originally meant for
use in systems
programming.
However, it soon
became popular for
consumer software as
well thanks to its
efficiency and
versatility.
C++ was designed as
an expansion to C in
1983.
It is now one of the
most popular of
programming languages
and can be used for
nearly every application.
As one of the best
developed and powerful
programming languages in
use, it is essential
for IT workers to
know.
If you can only learn
one language, learn
C++.
Number four, PHP.
PHP is a server-side
language that allows for
interactive web pages.
It is designed to use
tags and can thus be
integrated with the basic
HTML of a page.
This may sound similar
to JavaScript, but the
key difference is that
JavaScript works solely
on the client side.
There are many
occasions where having
the interaction go
through the server is
desirable, and that's
where PHP really
shines.
PHP also works well
with Java, making it
easier to call Java
methods in your code.
Combined with its
compatibility with many
types of databases, it's
easy to see why PHP
should be in every
programmer's arsenal.
How to learn
programming languages.
The languages above will
generally be enough to
start with as a beginner,
but there are a few more
that you may come across.
Ruby, Perl, and Python
are all commonly used
in advanced projects, so
if you have the time,
they're well worth
looking into.
And of course, specific
assignments may require any
one of the many
programming languages out
there.
Don't let yourself fall
behind in this competitive
industry.
Brush up on your
programming languages today.
Chapter 7.
The Math Involved
with Programming.
Mathematics is used
everywhere in the world,
and it is the most used
science on Earth at the
moment.
Fields like electrical
engineering, mechanical
engineering, physics, and
much more will make an
extensive use of it.
computer engineering also
uses math quite often.
Math logic is used in a
lot of fields, and that
also includes computer
programming.
When it comes to the Venn
diagrams, they are very
useful in understanding how
logic works, but they are
not only helpful in that
regard, as they can be used
in computer programming as
well.
In computer science,
calculations also play a
very important role.
For example, the text that
you are writing or reading on
your computer screen has
been formatted in a
specific way.
This is definitely something
that requires calculations.
For developing graphics,
there is a field of
mathematics that's used
extensively, geometry.
For instance, the
graphics screen has a lot of
similarities with the
coordinate plane.
Just as you will get to see
the points in this plane,
you will see that the
graphics screen will have
pixels.
Even though there is a
massive number of points
that can be observed in any
of the bounded parts of the
plane, and the pixels of the
graphics screen are limited,
the techniques of coordinate
geometry are still
successfully employed in order
to have different figures
drawn on the graphics screen.
Developing software is
something that implies a lot
of transformations.
There are two of them which
are very popular, and they are
known as pop and push
transformations.
In computer programming,
there is a lot of use of
mathematics by the classical
C language.
In addition, there are a lot
of commands in this language
which will make use of math
extensively.
Web application programming
language.
Among computer programming
languages, there is no
single application that does
all the different things,
in all the different ways,
that programmers need.
Because of the great number
and diversity of programming
tasks, choosing a web
application programming
language has become a
critically important step.
Fortunately, there is
continuing development in the
field, and today the number
of capable applications is
expanding.
Database-driven websites can
now be built with such
varied scripting languages as
PHP, ASP.NET, JSP,
Perl, and ColdFusion,
which fall into two main
groups, proprietary and
open-source.
In the foregoing examples,
all are open-source except the
proprietary ColdFusion and
ASP.NET.
Number one, PHP pros and cons.
As an open-source application,
PHP was developed, and
continues to be developed, by
an active, engaged,
international community of
users.
This is a great example of
strength in numbers.
The strength of PHP, of
course, is cost.
It's free.
Because it's free, the
open-source software, PHP,
can be compiled and tweaked
for most any operating
system.
In fact, there are even
pre-compiled versions available
for the majority of
operating systems, both
commercial and freeware.
You can also relax a bit
more with PHP, as you can
count on it being updated and
improved more often than other
languages.
In an open, collaborative, and
non-hierarchical environment,
suggested improvements can be
adopted quickly.
Again, this is a strength that
is derived from its open-source
status.
PHP is a mature application,
though younger than Perl.
However, it does have a few
weaknesses that may be minor
annoyances to some, but deal
killers for other programmers.
Its lack of event-based error
handling means that your
workflow may be interrupted by a
sudden jump to a special error
handling section.
Finally, its lack of case
sensitivity for its function
names will run afoul of many
professionals' long-established
work habits.
Number two, ASP.NET equals
flexibility.
ASP.NET is arguably the most
flexible of the programming
tools and plays nice with both
scripting languages, VBScript,
JScript, PerlScript, Python, and
compiled ones, VB, C, COBOL,
Smalltalk, Lisp.
This flexibility is also apparent in
the application's compatibility with
such development environments as
WebMatrix, VisualStudio.net,
Borland's Delphi, and C++ Builder.
On the downside, ASP.NET is a memory
hog and somewhat slower to execute than
its competitors.
For this kind of application, that can
be a serious weakness.
On the Internet, it may be called upon to
scale to thousands of users per second.
Its memory usage can easily become
problematic on your server.
Number three, JSP, Java Server Pages.
JSP is an open-source scripting language
supported by Oracle, so developers can
use Oracle JDeveloper to create JSP pages.
This can be accomplished without having to
learn the Java language first, relieving you of
the task of writing Java scripts.
It is also extensible, allowing Java Tag
Library developers to outfit it with
simple tag handlers that use a new, simpler,
cleaner tag extension, Application Programming
Interface, API.
JSP has integrated the Java Server Pages
Standard Tag Library, JSTL, expression
language, and it now supports functions.
This greatly eases the creation and maintenance
of JSP pages.
The most significant disadvantage of JSP
is that there is no XML-compliant version
of JSP comments, forcing developers to use
client-side HTML-XML-style comments
or embed Java comments.
Depending, once again, on your particular needs,
this may or may not be sufficient reason
to eschew the use of JSP.
Number four.
A shiny Perl.
An open-source language that is both mature
and powerful, Perl offers web developers
about every tool they need to create
dynamic webpages.
Like other open-source languages,
it benefits tremendously from ongoing development,
and the support offered by its international
community of users is second to none.
Perl is particularly good at creating
single websites quickly, cleanly, and elegantly.
If it has a major identifiable weakness,
it is that it may be unnecessarily complicated.
If you are not comfortable switching gears
among a variety of syntaxes,
it may not be the best tool for you.
Number five.
The real ColdFusion.
Originally built by Allaire
and then purchased by Macromedia,
ColdFusion is now owned by Adobe.
It is very easy to get started building websites with it,
and you can deploy powerful web applications
and services with less training
and in less time,
using fewer lines of code
than with PHP and JSP.
ColdFusion is now at version 8,
although many programmers are still using
the various iterations of ColdFusion MX,
variously known as ColdFusion MX-6,
ColdFusion MX-6.1,
ColdFusion MX-7,
ColdFusion MX-7.0.1,
ColdFusion MX-7.0.2,
ColdFusion 7,
ColdFusion 7.0.1,
and ColdFusion 7.0.2.
However,
ColdFusion MX-7.0.1
to ColdFusion 8
is a valid upgrade path.
In fact,
upgrading to ColdFusion 8
is supported for the two
most recent previous major releases
of the program.
ColdFusion supports most major databases,
from Oracle and Sybase
to Microsoft SQL Server and Access.
With its own markup language,
CFML,
and tags to connect to the database,
it is relatively easy
to create forms
and dynamic pages.
It also has all the benefits of CGI
for today's broad-based developers.
Its weaknesses are few,
but expert users will caution
that it is probably
the most difficult to maintain.
Chapter 8.
Elements of a Program Specification
Each program should be defined
in terms of...
Number 1.
Input Descriptions
To collect data
or request an output.
Command Line Interface
Verbal, Optical,
or through some other screen interface.
All inputs should include...
A. Name, Alternate ID,
Program Label, Description.
B. Defined Layout and Examples.
C. Input Transaction Specifications,
including default values
and editing rules for data to be collected.
D. Messages,
e.g. data validation and general processing.
E. Panels for screens.
F. Relationship of inputs to outputs.
Number 2.
Output Descriptions
To retrieve data,
printed report,
audio-video,
or through some other screen interface.
All outputs should include...
A. Name, Alternate ID,
Program Label, Description.
B. Defined Layout and Examples.
C. Panels for screens.
Maps for reports.
D. Messages,
e.g. general processing
and program-specific information
slash warning
slash error messages.
Number 3.
Data Structure Descriptions.
Databases,
files,
records,
and data elements.
Note,
programmers should not be in the business
of designing databases
as they will only do
what is convenient for their application,
not others,
thereby missing the opportunity
for a company to share
and reuse data.
Physical files should be defined
by database administrators.
A. All data structures
should include
name,
alternate ID,
program label,
and description.
They should also include...
B. Databases,
organization,
keys,
labels,
volume slash size,
backup requirements,
internal structure.
C. File,
both primary and working.
Organization,
keys,
labels,
volume slash size,
backup requirements,
internal structure,
file-to-file relationships.
D. Records,
form,
length,
keys,
contents,
record-to-record relationships.
E. Data elements,
class,
justification,
fill character,
void state,
mode,
picture,
label,
size,
precision,
scale,
validation rules.
If generated data,
rules for calculation.
If group data,
rules for assignment.
Number four,
program description.
A. Name,
alternate ID,
program label,
description.
B. Characteristics,
required processing speed,
memory requirements.
C. Dependencies to other programs externally,
e.g.
batch job stream.
D. Dependencies to modules internally,
e.g.
DLLs,
subroutines,
etc.
E. Functions to be performed with inputs,
outputs,
and data structures.
Create slash update slash reference.
F. Special processing rules.
Logic for processing.
G. Command language required to execute the program.
E.g. command files,
JCL,
etc.
H. Physical environment where the program will be executed.
I. Test plan and how to assemble test data.
J. The method of implementation.
Programming languages to be used.
Design techniques to be observed.
Tools to be used.
In-house software engineering standards complement any program specification
and should provide guidelines for writing the specification.
Such standards define best practices for design and conventions to be observed during programming.
As an aside,
the objective of software engineering should be
maintainability,
easy to correct and update,
performance,
design correctness,
proof,
international support,
to accommodate languages and cultures,
integration,
sharing and reusing code,
and portability,
platform independence.
Between the programming spec as listed above
and a good set of programming standards,
it becomes rather easy to implement any program,
be it by hand or through the use of a generator.
As a matter of policy,
specifications should be written under the assumption
that a program generator will be used.
This forces us to be more precise in our specifications.
Chapter 9. Game Programming
It is essential to have an understanding of all the basic concepts regarding programming.
If you don't know how to program,
I would recommend starting with Python.
It is a wonderful language that takes away the low-level details for the programmer
and allows them to focus on concepts.
It is also a very fun language.
I'm sure you'll love to program in it.
Once you have picked up a language and know how to program,
you need to decide which language you want to program your games in.
That really depends on the kind of stuff that you want to do,
engine development or game development.
Engine developers create the core of the game,
the engine,
the stuff those powers up the actual game.
If you choose this route,
you will have to deal with all the low-level details of programming.
For this,
you should pick up C or C++,
since most of the engines are coded in these languages.
You should also be disciplined in memory allocation,
deallocation and code optimization techniques.
The other path is to actually code the games
using a previously coded engine.
In this path,
you will use an engine created by someone else
and use it to make your own game.
Usually,
engines have bindings in some scripting language,
like Python,
Lua,
or Ruby,
and thus you can code the actual game in a scripting language.
You can focus on the game design
rather than other low-level details.
Obviously,
you can choose to do both levels,
code the engine,
as well as the actual game.
In the beginning,
I think it's better for you to wait
after you've made some games
to decide which way you want to go.
With your first few games,
it's better to code the entire game on your own.
You will learn a lot along the way
and will also be able to decide
which way you want to go.
The best way to learn and remember something
is to struggle through it the first time.
Don't take shortcuts.
You'll thank yourself later.
To make games,
you need certain extra libraries.
If you know how to program,
you must know what libraries mean.
They are extra patches of code
that you can link with your own code.
To make games,
you will need libraries for graphics,
event handling,
networking, etc.
If you're using Python,
PyGame is an excellent library for beginners
that provides almost all this stuff.
For C or C++,
you have Allegro and SDL.
A simple Google search
will give you a list of game programming libraries
for the language of your choice.
Start playing with the library you have chosen.
Read its tutorials online.
Learn how to make simple things like
rectangles,
circles,
load images,
etc.
Try to make some animations.
The fundamental concept behind building an animation
is to draw the object,
then draw another object
of same dimensions on top of it
with the background color,
and then draw the earlier object
with its coordinates displaced
by the required amount.
Of course,
if you do this quickly,
you will be able to cause
an illusion of movement.
After that,
make a simple game.
Google for Game Loop Structure.
It will help you out
in coding the game.
After you have coded it,
move on to a slightly complex game,
like a game with two tanks
fighting it out.
You don't have to get cute with graphics.
Just use whatever royalty-free images
you can lay your hands on.
Try cloning more arcade games.
To make these,
you will have to use something called
a level editor,
something that is used
in almost every game.
After that,
try your handout at a game
which uses some AI,
like a Pac-Man clone
or a Top View soccer game.
Both of them can be implemented
using an FSM,
Finite State Machine,
a concept used for AI
in 80% of commercial games.
Then try your handout
at a side-scroller platform game
like a Mario clone.
Chapter 10
Properties of a Good Computer Program
Today,
many businesses require computers
to ensure the smooth running
of the business.
Therefore,
the computers should have
programs that are
user-friendly
and easy to understand.
A few things will tell
if a program is
good enough for business use.
Number one,
is it readable?
If the program is
in writing that makes it easy
for a user to understand
and follow the logic,
then it can be termed as good.
It should also have
a systematic arrangement
that will make it easier
to troubleshoot the computer
if anything goes wrong.
Number two,
efficiency.
Your program
should save you time.
For you to process instructions,
you will need time
and it will certainly
use up some memory.
A good program
is that which works
with less processing time
and a small amount of memory.
This proves efficient
as you realize
less waste.
Number three,
flexibility.
A good program
should be able
to accommodate
different platforms
without having to make
major changes
to coding and software.
It is a common phenomenon
today to see
different platform changes.
Therefore,
having a portable program
will not be effective
if the user decides
to change the operating system.
When proper computer programming
is executed,
your system
will be able
to handle modification.
This happens
due to many reasons,
like a change
of administration.
It should only have
simple codes
that facilitate
different amendments
needed over time.
Number four,
proper structure.
For a program
to be developed,
the major tasks
that are required
to run the different systems
should be broken down.
A developer
can also develop them
independently
in order to accomplish
the job assigned to them
without having to rely
on other subtasks.
Number five,
proper documentation.
Every program
has to have
good documentation,
especially if the author
will not be around
for long.
This is so that
the other person
handling it
will find it easy
to comprehend.
Good programming habits.
Number one,
before sitting down
to code,
you must have
a formal
or a paper-napkin
design of the solution
to be coded.
Never start coding
without any design
unless the code
is a trivial one.
Number two,
good code documentation
is as important
as good knowledge
of a programming language.
Write brief logic
for each major block
of your code
as comments
in source code file itself.
It's good to mention
creation and modification
dates of your program,
along with why
modification
was required.
Number three,
maintaining versions
of your program
is another important task.
Some present-day
programming tools
already have
a built-in
version management.
Whenever you make
any change
to your program,
they save its copy
as .bak file.
My approach
is to maintain
three versions
of a program.
Say I have a file
program.c,
which is used
by other project team
members as well.
I copy this file
as program.c.old
as a backup
and make another copy
as program.c.wrk
where I do modifications.
When modifications
are successfully compiled,
replace program.c
with the .wrk file.
You can also append
a date
or some explanation phrase
to your program versions
like program260505.c
or programreadfunctionworking.c.
Number four,
if your project
contains multiple
source files,
then maintain
a readme file
stating the purpose
of each source files,
data files,
intermediate,
and log files,
if any.
You may also mention
the compilation
and execution steps.
Number five,
ever wondered
why your if statement
is not working
as it should?
Maybe you are using
single equal,
i.e.,
equal,
instead of
equal equal
in the condition check.
A good approach
is the right condition
in reverse order.
So your condition
should read
something like this.
If
open paren
10
equal equal I
close paren.
So,
if you put a single
equal sign by mistake,
then it will be detected
at compilation time
only as an error.
Number six,
while using loops
and conditional statements,
always first put
closing braces
with corresponding
opening braces
and then write
the inner statements.
I.e.,
line one,
four,
open paren,
int,
i equals zero,
semicolon,
i less than 10,
semicolon,
i plus plus,
close paren.
Line two,
open brace,
line three,
print f,
open paren,
double quote,
i equals percent
dn,
double quote,
comma,
i,
close paren,
semicolon.
Line four,
closed brace.
The numbers
at the starting
of each line
indicate the sequence
of writing loop code.
Number seven,
avoid using magic numbers.
For example,
instead of writing
circle area
equals
3.14
times
p-o-w
open paren
radius,
comma,
two,
close paren,
semicolon,
use following code.
Pound define
pi 3.14.
Circle area
equals
pi
times
p-o-w
open paren
radius,
comma,
two,
close paren,
semicolon.
Number eight,
use meaningful variable
and function names.
For example,
instead of using
r,
use radius
to represent
the radius
of a circle.
Similarly,
function name
calculate area
is better
than any cryptic
short name.
In a hurry,
we may use
short variable names,
but the time saved
leads to double
wastage of time
later when you have
to guess what
that short variable
name stands for.
Number nine,
using print statements
for later debugging
is a good habit.
but removing them
when the final code
is ready
is sometimes
a risky task.
So,
make a function
that displays
debugging information
passed to it.
When your final version
is ready,
simply comment
the internals
of this function
so this requires
changes only
at one place.
Number ten,
once you are done
with coding,
start optimizing
your code.
Some of the variables
you declared earlier
may not be of use
at this stage.
Similarly,
statements which are
not loop dependent
can be moved
out of loop block.
Sound knowledge
of compiler
can also help
in optimizing
the code further.
Number eleven,
with good knowledge
of your operating system
and hardware,
you can improve
the performance
of your program
in terms of resource
requirements,
etc.
Number twelve,
always indent your code
for clarity
and easy readability.
Number thirteen,
you may also like
the idea of organizing
project files
into various folders
like source,
headers,
make,
X's,
etc.
Number fourteen,
study the code
written by others.
This will bring to you
new programming techniques
and what approach
they have followed
for the task
for which you
have also coded.
Number fifteen,
last but not least,
take backup
of your source code files
so that your effort
doesn't go waste
if your hard disk
crashes
or a similar
mishappening occurs.
Conclusion,
when it comes
to programming,
the one statement
attributed to Confucius
will always remain true.
I do
and I understand.
While sitting
in a classroom
and learning
the ideal way
to program
is obviously
helpful,
reading about
computer programming
concepts
and trying out
the real thing
are two different
ways of doing
the same thing.
What do you do then
to quickly get yourself
up and running
to working with code?
Well,
that's the easy part.
The web is filled
with clutter
and some of this clutter
is code snippets.
While this may seem
to be a bad idea,
especially with all
the wrong snippets
of code lying
all over the web,
by immersing yourself
into this world,
it will give you
plenty of ideas
on how to solve
programming challenges
and get you up
and running
on some of the major
programming languages,
the most common
being JavaScript.
JavaScript is one
of the easiest
languages to learn
and the net
is filled with
client-side web scripts
that can be accessed
by simply accessing
any web page,
right-clicking
and selecting
View Source Code.
Check out ways
that other programmers
have used
to resolve
a particular
programming challenge
or how to do
a certain task.
Soliciting feedback
from people
who already
have more knowledge
about a computer
programming language
will also go
a long way
in helping you
think along fresh lines
or think about
old ideas
in new ways.
How, though,
do you solicit feedback?
One way is to join
a strong, helpful community.
These communities
are all over the web.
There you can learn
the culture,
best practices
for a particular language,
and you can have
your questions
answered by experts.
Another way
is to pair
with another programmer
and learn the ropes.
This is a fashionable
practice that has
gained respect
through the rise
of the Agile Development
Computer Programming
methodology
where two people
get to work together
on a project.
The potential value
of pair programming
is indisputably superior
when compared
to programming
on your own.
Computer programming
also requires
following predefined steps
if you are to avoid
typing time-consuming
and tedious code
that will not do
what it's supposed to do.
Programmers start
by prototyping
their programs.
This involves
creating the program
interface with all
the windows,
dialog boxes,
and pull-down menus
without adding
action to them.
The next step
involves choosing
a programming language
that will be easiest
to write the program.
The last step
is to create
mock-up instructions
known as
pseudocode
that describe
exactly how
the program
will work.
Pseudocode
is thus
a valuable tool
that you can use
to outline the structure
of your program
and spot flaws
in your logic.
So what are you
waiting for?
Go and find
a programming language
that best suits you
and dive right in.
You may be surprised
at how much
you can pick up
in just one sitting.
This concludes
the first book,
Computer Programming
for Beginners.
Learn how to code
step by step.
Next is the second book,
Learn Python,
the ultimate guide
to learning
one of the most useful
programming languages.
Introduction.
Programming is a very useful
and rewarding skill.
As a programmer,
there are few
better moments
than when someone
sees you using
a program you
lash together
in hopes of making
your life easier
and says,
that looks really useful.
Most people have,
at some point
in their lives,
desired to accomplish
something on their computer
or even cellular phone
and yet,
have been unable
to do so
due to a lack
of knowledge
about programming
and programming languages.
Programming
and its associated languages
are used
to communicate
to the computer
a set of instructions
that will produce
a desired outcome.
While there are
a huge number
of programming languages,
many of them
have similarities.
opportunities.
This means that
once you learn
one language
quite well,
in most cases,
you will be able
to pick up a new one
fairly quickly.
If you know
and understand
a programming language,
then there is often
a fair chance
that you can write
a program
to accomplish
any task yourself.
Chapter 1.
What is programming?
Computer programming
refers to the science
of writing programs
for the computer
to perform tasks
for us
and to produce
the desired results
in a form
that is useful
to society.
A program
is a set of instructions
to the computer
in a specific order,
enabling it to perform
a specific task
or function
to produce
a desired output
or result.
What is a programming language?
As we all know,
communication
is a two-way process.
The objective
is that both parties
are able
to understand each other.
If one fails
to communicate
in a way
the other can understand,
it leads
to a communication gap.
A programming language
is used
to bridge the gap
between users
and computers
and allow
the two parties
to communicate data
and desires
into usable results.
Programmers communicate
with a computer
when they issue instructions
and provide data
to be processed
as input.
The computer
then communicates
with us
by providing
the desired result
as output.
Setting realistic goals
One thing
that all new programmers
must come to terms with
is the amount of time
learning a programming language
may take.
Although,
when you have become
an expert
and have the ability
to write many programs
quickly,
you must remember
that many programs
have taken
whole teams
of expert developers
years
to create.
So it is important
to understand
that knowing
a programming language
or even several
is not enough
to write
some of the more complex
programs
you may have seen.
Don't look at this
new hobby
as a way
to save yourself
a lot of money
as writing
your own version
of most programs
will be out
of your reach
for now.
However,
learning a new language
can be accomplished
with the use
of a simple search engine
in practice.
Practice,
practice.
Once you acquire
a strong knowledge base,
a simple program
could take you
just 10 minutes
to write.
But it may take
thousands of hours
to obtain
a mastery level
of the craft.
Selecting
your first language.
Now that we have
examined the limitations
and handled
some of the more
unrealistic expectations,
those of you
still desiring
to learn programming
will be happy
to know
that it is not
a hard thing
to begin.
It also does not
require you
to pay out
huge sums of money.
If you are reading
this book online,
you already have
the resources
to begin.
Let us consider
what your first language
ought to be.
Traditionally,
you begin with
either Visual Basic
or Python.
The first thing
to understand
is that these
two languages
are very different.
The simplest
difference
is price.
Python is
totally free.
You can start
writing Python
now
with just a text
editor on your
computer.
Though if you are
on Windows,
you will probably
need to install
it first.
Visual Basic,
often abbreviated
to VB,
is both free
and not free.
The version
of Visual Basic
newcomers learn
is usually
Visual Basic 6.
But this is
rather outdated
and has been
discontinued.
So these days,
the version learned
is often
Visual Basic.net,
which can be
considerably less
simple for newcomers.
Visual Basic can
be simpler for
newcomers to learn
because it allows
you to build
the interfaces,
the part of the
program the user
will see,
by dragging and
dropping the different
parts much like
you would in
art applications.
Visual Basic.net
must be developed
inside what we call
an IDE,
Integrated Development
Environment.
This is basically
a special program
you use to write
other programs.
They also exist for
Python,
but their use
is totally optional.
The free
Visual Basic.net
IDE is called
Visual Studio Express.
Regrettably,
the full paid
version of the
IDE is not
cheap and
probably not
appropriate for a
hobbyist, but
fortunately, to learn
Visual Basic, the
free version is
enough.
In practice,
very few commercial
programs are developed
in Visual Basic these
days, but the
Visual Studio
IDE allows you to
use many other
languages.
The familiarity
you will develop
by using it will
also allow you to
use the power of
the IDE for
development in
many other
languages.
Some will argue
that almost every
language can be
developed in a
text editor and
that they are by
far the most
flexible way in
which to code.
While this is
technically true,
and I do suggest
trying development
in a text editor to
compare once you
get a little
better, I would
strongly advise
learning your
first language with
a proper IDE.
While traditionally
people learn
Python or
Visual Basic first,
and these are
generally taught at
schools, I am of
the opinion that
your first language
should continue to
be useful to you
once it has served
the purpose of
helping you learn
the fundamentals of
programming.
If I had to
recommend one for
newcomers, it would
be Visual Basic.net.
as often, the most
complex part of
programming is the
graphical side of
things, and
Visual Basic.net
utilizes simplicity
through the drag-and-drop
interface.
These two languages
are often used as
introductions as they
are very tolerant of
mistakes and allow you
to become confident in
programming principles
without worrying about
more complex matters.
For those brave souls, I
would suggest Java as
your first language.
Though it can be
complex and is
therefore not a
common choice for a
first language, it is
very widespread and
useful.
Furthermore, it is
very powerful and is
available for free for
both hobbyists and
commercial uses.
Java programs are
different than most
others in that they do
not run on your
computer.
The user downloads
Java and your code
runs on what is
called a VM, virtual
machine.
This means that your
code runs in a
special place Java
sets up for it, a
fake copy of your
computer, and handles
the translation of
this to the real
machine for you.
Java programs can be
thought of as being a
cross-platform, meaning
that they will, for the
most part, run on
Windows, Mac, Linux, and
most other operating
systems.
Java is a good
language to learn.
However, in contrast
to Visual Basic and
Python, it does not
tolerate mistakes and
requires you to be very
specific about
everything.
It is also an object
oriented programming
language.
This is a very complex
issue in which I will
briefly try to
summarize.
Languages like Python
and Visual Basic are
what is known as
procedural languages,
meaning that the lines
of code are run one
after another.
Java is an object
oriented language, and
at the most basic
level, is all about
objects.
Object oriented
development is a term
thrown around a lot
these days in the
programming world, and
while not always
appropriate, it is
generally considered a
good idea.
An object is an
instantiation of a
class.
A class is a
blueprint used to
describe something like
a cat.
The class contains both
the data about the
cat, such as its name,
age, and owner, as
well as methods, which
are essentially actions
the cat can perform,
such as meow or
purr.
An instance of the
class cat would give
you a particular cat.
If you are brave enough
to experiment with Java,
you will come across
this yourself in more
detail.
It is worth noting that
VisualBasic.net and
Python both have
support for object
oriented development,
and Java has the
potential to be used
procedurally, but these
are not the language's
primary intended uses
and are not often
used.
If you did not
understand that
comparison, don't worry
about it too much.
Object orientation is
hard to wrap your head
around, but any basic
Java or another
object oriented
language tutorial should
help you understand
everything in that
paragraph.
A final reason Java is
a good first language
is that it is similar,
in many ways, to
JavaScript, which is a
scripting language as
is Python.
It is an entirely
different class of
language, and learning
Java will mean you
understand JavaScript
reasonably well.
The differences between
scripting languages and
normal programming
languages are that
scripts are largely
used for automated
tasks, while programs
are used interactively
by users.
This is not totally
true, as both types
of languages are used
for both tasks, and
most web programs are
built in JavaScript, but
does represent a broad
generalization about the
uses of programming
language.
As for the actual
language you pick, it is
entirely up to you.
Some may choose the
traditional beginner
language, some may
explore all before
making the final
selection, and some may
experiment with Java.
Some of you may
already have your eye on
a language, or fancy one
of the more specialist
languages like Scheme or
Prologue.
Whatever your choice, the
path to mastery is the
same.
IDE's
Many of the purists say
that IDE's are a bad
idea and are packed with
unnecessary tools and
menus that take up disk
space while requiring a
large amount of time to
learn.
While there is some truth
to this, I feel that an
IDE is definitely
worthwhile.
An IDE, Integrated
Development Environment,
is a programming environment
that has been packaged as an
application program,
typically consisting of a
code editor, a compiler, a
debugger, and a graphical
user interface, GUI, GUI,
Builder.
Many people offer free
IDEs, such as Eclipse and
NetBeans, for the more
popular languages.
There is also Visual Studio,
which I mentioned previously.
It is very intuitive, very
powerful, and it supports
many languages, much as
NetBeans and Eclipse do.
If you choose to use Java, I
would suggest NetBeans, as
there is a packaged version of
NetBeans with the JDK, Java
Development Kit.
Most languages need an
SDK, Software Development Kit,
to work with them and getting it
installed properly, as well as
linked to the IDE, is often
the hardest part of the
procedure.
Visual Studio already comes
with the Development Kit
set up, which makes life
easier, but other languages
like Java and Python can be
quite hard to set up
properly.
This is why I suggested the
NetBeans JDK bundle for
those experimenting with Java,
as it handles the complex
setup for you, which will save
you hours of suffering.
There are, in my opinion,
three major advantages to use
in a fully featured IDE.
First, they are usually
extensible, meaning that there
are many free plugins that
could make your life a lot
easier when you get a little
more advanced.
Second, and most importantly,
is the ease with which an
IDE allows you to debug your
code.
Most IDEs let you set
breakpoints in the code,
which will make the program
stop when it gets to that
point and let you step
through it line by line.
In this way, you can examine
the contents of all the
variables at any time.
For those of you who do not
know what a variable is,
I will briefly explain.
A variable is a bit like a
train station locker.
You ask for one big enough
to hold what you want to
store, and if what you want
to store is the right shape,
it can be stored there.
When you write a program,
any data you want to store
temporarily will be held in one
of these until you are done
with it.
As the old programming saying
goes, if you have not found
any bugs, you are not looking
hard enough.
Almost no non-trivial program
will work the first time,
and trying to work out
where the problem lies
without the use of a debugger
is a pain I would not wish
on anyone.
Finally, an IDE will often
give you advice on how to fix
issues in the code.
This can be very useful for
fixing bugs and saves you
lots of time searching the web.
Learning the Language
Now that you have a language
and an IDE, it is finally time
to learn the language.
This, as you may or may not
be surprised to learn,
is not complex at all.
It is simply time-consuming.
To learn programming for the
first time, there is no better
way than exploration.
The key to learning programming
is to have a goal.
Think of a task, such as a system
to keep track of where you are
in all the various TV shows
you watch, or a system to let you
look at all the books you own
in a particular category.
Or, if you feel brave,
try to replicate part of something
that you use on a regular basis.
My advice would be to start small.
Perhaps make a sequence
of message boxes
that insults the user,
or a really simple calculator.
It is important,
when you first start,
that your goals are
interesting, challenging,
and entertaining.
If you try to make
really boring programs,
you will quickly get disheartened.
So try to inject some comedy
into your program.
The calculator is a very good
introductory program,
but after you get a general idea,
it is important to set
quite ambitious goals,
because if you keep doing
simple things,
you will never learn anything new.
It is important to try
to incorporate some of the knowledge
you have gained from previous work.
One of the reasons most books
fail to teach programming well
is that they use small examples
for each idea they introduce,
whereas what you really need to do
is plan the task
without considering
what you will need
to accomplish it.
This means you will be able
to code some of it
using what you already know,
but most importantly,
you will have to problem-solve
the part you don't.
The best way to learn
is to learn by doing.
Go for a full program
that does a task you wanted
to do on a computer in the past.
Work on it,
and when you are finished,
you will have learned a lot,
and you will have a useful,
or at least entertaining,
program,
which is far better
than some toy program
demonstrating lists.
I have said that you learn
by choosing to do projects
where you are unable
to do certain sections,
thus requiring you to learn.
But how do you go about
finding out how to do them?
It's simple,
and most likely
the way you found this book.
Go to your favorite search engine,
like Google,
and search for what you want to do.
For example,
search
drop-down list Java
to find some examples
of using the drop-down lists
in Java,
because you will need it
for another task,
and not just to redo
the same thing
the examples did.
You will have to play
with the examples you find
and try to get them
to do what you want.
Just search each bit you need,
and before long,
you will find that
most of the basics
are as natural
as waking up in the morning.
As a bonus,
you will have done it all
without spending
a small fortune on books,
without getting bored,
and hopefully
while being entertained.
To this day,
if I am bored,
I sometimes break out
one of my very first programs,
which is just a list of boxes
and a random number generators.
It is your task
to try to fill all the boxes
such that the numbers
the random number generator
gives you
are in ascending order.
If you don't leave space
and can't fit a number
in a hole,
then you lose
and must start again.
Once you have a few
decent-sized programs
under your belt,
you will find that
you know the language well.
You will also find
that it is rare,
no matter how well
you know a language,
to be able to write a program
without resorting to Google,
at least once,
just to check something.
So with that in mind,
it could be argued
that you learn the language
without ever actually
trying to learn it.
Clearly,
there are standards
and good practices
that you may not
pick up on your own.
But as you see more examples
and read the comments,
you will find
you adopt your own standards
rather quickly.
Learning another language.
Once you have learned
one language,
whatever it may be,
the most valuable thing
you will have learned
is all the keywords
for searches.
When you want to do something
in a new language,
you need only search
what you want to do
and the language name.
However,
by now you will know
the names used
to refer to what you want to do,
allowing your searches
to be more effective
and yield examples
and answers
much more quickly.
As the fundamentals
of programming
are mostly the same,
regardless of the language
you use,
you will be able
to guess
at the meaning
of most of the code
much more effectively
once you locate
an example.
This will allow you
to pick up
most of the language
very quickly.
If you take nothing else
away from this chapter,
remember that the best way
to learn a skill
is practice,
practice,
and practice some more.
Remember,
that programming
is not something
that can be learned overnight
and that to become
a passable expert,
you probably need to spend
at least a thousand hours
programming.
So you will need
to find ways
to remain motivated.
Break this into
small chunks,
and it isn't
as much as you think.
Don't think of it
as learning to program.
Rather,
just start programming.
Before you know it,
you will
be an expert.
Programming is a skill,
and while it is
quite simple
once you have
the feel of it,
it can be quite daunting
to see your little calculator
that took you a week
and then consider
what it takes
to build a modern game.
Programming is easy
when you know how,
but it is important
to set yourself tasks.
These tasks
should be interesting
and,
better yet,
entertaining,
as they will be
what keeps you programming
and learning more
and more
until,
one day,
you wake up
to realize
that you have it.
You are
your own best tutor,
and the key
is simply
to jump in
and get started.
Chapter 2.
What is Python?
The Python programming language
is a modern web
programming language
that was originally conceived
and developed
by Guido Van Rossum
in the 1980s.
Since that time,
Python has evolved
into a high-performance
programming language
that is modular
and extensible.
Some of the largest
websites in the world
are utilizing Python,
such as YouTube,
Discus,
and Reddit.
Python offers
a number of features
that make it
an attractive
programming platform
including stability,
portability,
object-oriented development,
a powerful standard library,
and a wealth
of third-party modules
or packages.
Why Python?
Number one.
Stability.
Python has been
under active development
since the late 1980s
and is considered
a mature programming language.
The developers
of the Python language
conduct extensive
functionality
and regression testing
to ensure the language
remains bug-free
and stable
with each new release.
Number two.
Portability.
Python programming
offers a number
of features
that make it
an attractive option
for web application development.
Python applications
are portable
due to the fact
that Python interpreters
are available
for all modern
operating systems
and some embedded
computing systems.
Number three.
Object-oriented development.
The object-oriented
nature of Python
makes it an ideal
first language
for new programmers
and easy to learn
for programmers
migrating to Python
from other
object-oriented languages.
Python programming
is intuitive
and reinforces
good program structure
and object-oriented
methodologies.
Number four.
Standard library.
The standard Python library
offers developers
a plethora of features
comparable
to more complex languages
such as C++
while maintaining
simple and approachable
language syntax.
Comprehensive file-based
I.O.,
database interactivity,
advanced exception handling,
and a host
of built-in data types
make Python appropriate
for both
web applications
and general-purpose
programming.
This makes
Python web programming
an easy task
for application developers
seeking to transition
to web application
development.
Number five.
Third-party modules.
Python is known
for being a
comprehensive language
with extensive functionality
included in the
standard library.
However,
the growing popularity
of Python programming
has led to a vast array
of third-party packages
or modules
that extend Python's
functionality
and allow the language
to deal with
unique programming challenges.
For example,
modules are available
for handling
non-standard
database interactions
and advanced
cryptography functionality.
There are also
modules available
for dealing
with common tasks
such as reading
file metadata,
rendering charts,
and compiling
Python applications
into standardized
executable applications.
Python web programming
is made easier
due to the availability
of many web-centric
modules
to handle tasks
such as email,
maintaining HTTP state,
interacting with JavaScript,
and other common
web development tasks.
Advantages offered
by Python.
Python happens
to be an easy
programming language
which offers its support
to various application types
starting from education
to scientific computing
to web development.
Tech giants like Google
along with Instagram
have also made use
of Python
and its popularity
continues to rise.
Discussed below
are some of the advantages
offered by Python.
Number one.
First steps
in the world
of programming.
Aspiring programmers
can use Python
to enter the programming world.
Like several other
programming languages
such as Ruby,
Perl,
JavaScript,
C Sharp,
C++,
etc.,
Python is also
an object-oriented
programming language.
People who have
a thorough knowledge
of Python
can easily adapt
to other environments.
It is always recommended
to acquire
working knowledge
so as to become aware
of the methodologies
that are used
across different applications.
Number two.
Simple and easy
to understand
and code.
Many people
will agree to the fact
that learning
and understanding
a programming language
isn't that exciting
as compared
to a tense baseball game.
But Python
was specifically developed
with newcomers in mind.
Even to the eye
of a layman,
it will seem meaningful
and easy to understand.
Curly brackets
and tiring
variable declarations
are not part
of this programming language,
thus making it
a lot easier to learn.
Number three.
Getting innovative.
Python has helped
in bringing
the real world
and computing
a lot closer
with its Raspberry Pi.
This inexpensive,
card-sized microcomputer
helps tech enthusiasts
to build
various DIY stuff
like video gaming consoles,
remote-controlled cars,
and robots.
Python is the programming language
that powers
this microcomputer.
Aspirants can select
from different DIY projects
available online
and enhance their skills
and motivations
by completing
such projects.
Number four.
Python also supports
web development.
With its huge capabilities,
Python is also a favorite
among web developers
to build various types
of web applications.
The web application framework,
Django,
has been developed
using Python
and serves as the foundation
for popular websites
like The Guardian,
The New York Times,
Pinterest,
and many more.
Python provides
aspiring programmers
a solid foundation
with which they can branch out
to different fields.
Python programming training
ensures that students
are able to use
this high-potential
programming language
to the best
of its capabilities
in an exciting
and fun way.
Those who are keen
to make a great career
as software programmers
are definite
to find that Python
will live up
to their expectations.
Reasons for learning Python.
Python programming
supports numerous styles
such as
functional programming,
imperative,
and object-oriented styles.
Here are the top five reasons
why a computer programmer
must learn
the Python language.
Number one,
ease of learning.
Python has been created
with the newcomer in mind.
Completion of basic tasks
requires less code in Python
compared to other languages.
The codes are usually
three to five times
shorter than Java
and five to ten times
smaller than C++.
Python codes are easily readable
and,
with a little bit of knowledge,
new developers
can learn a lot
just by looking at the code.
Number two,
highly preferred
for web development.
Python consists of
an array of frameworks
which are useful
in designing a website.
Among these frameworks,
Django is the most popular one
for Python development.
Due to these frameworks,
web designing with Python
has immense flexibility.
The number of websites
online today
is close to one billion
and with the ever-increasing
scope for more,
it is natural that
Python programming
will continue to be
an important skill
for web developers.
Number three,
considered ideal for startups.
Time and budget
are vital constraints
for any new product
or service in a company
and more so
if it is a startup.
One can create a product
that differentiates itself
from the rest
in any language.
However,
for quick development,
less code,
and little cost,
Python is the ideal language here.
Python can easily scale up
any complex application
and can also be handled
by a small team.
Not only do you save resources,
but you also get to develop
applications in the right direction
with Python.
Number four,
unlimited availability of resources
and testing framework.
Several resources for Python
are available today
and these are constantly
being updated.
As a result,
it is very rare
that a Python developer
gets stuck.
The vast standard library
provides inbuilt functionalities.
Its built-in testing framework
enables speedy workflows
and less debugging time.
Number five,
increased growth
and income potential.
Today,
top IT companies
such as Google,
Yahoo,
IBM,
and Nokia
make use of Python.
Among all programming languages,
it has had amazing growth
over the last few years.
It is clear
that Python
is a vital language
for web-based programmers.
More can be learned
at a reputed
Python Training Institute.
What is new
in Python programming?
In today's workplace,
Python training
is an increasingly
important part
of a programmer's education.
As a dynamic language
whose design philosophy
revolves around
readability and conciseness,
Python is a popular choice
for use
as a scripting language.
Like other
interpretative languages,
it is more flexible
than compiled languages
and it can be used
to tie disparate systems together.
Indeed,
Python is a versatile language
with many applications
in growing fields.
For example,
Python is a popular
programming language
for educational software.
Raspberry Pi,
the single-board computer project
for teaching students
computer programming,
uses Python
as its primary
programming language.
In addition,
much of the software
for the
one-laptop-per-child
XO
is written in Python.
At the other end
of the educational spectrum,
Python is also
a very effective language
for scientific computing
and mathematical software
for theoretical mathematics.
As educational software
development continues to grow,
Python will become
a more and more
important language
to know
and understand.
In addition
to educational software,
Python is also
a favored language
for use in AI tasks.
Because Python
is a scripting language
with rich text processing tools,
module architecture,
and syntax simplicity,
it is a natural choice
for applications
involving
natural language processing.
Programs like
Wolfram Alpha
and Siri
are just beginning
to penetrate
the end-user market
and many such programs
yet to come
will be written
in Python.
Moreover,
Python is often used
as a scripting language
for web applications.
For example,
Google has adopted
Python as one
of the available languages
in its Google App Engine,
a cloud computing platform
for developing
and hosting web applications.
Python is also used
as a framework
for program communications
between computers
for web applications
like Dropbox.
As web application development
is a fast-growing field,
programmers would do well
to acquire
some Python training
to keep their skills
up to date.
Python is also
quite useful
as a modern scripting language
similar to Perl,
which can be used
to tie disparate systems together.
Because of this,
Python is a standard component
for many Linux
and Unix-based
operating systems.
And because Python
is used extensively
in the information
security industry,
it is an important tool
for system administrators
to learn,
as well as programmers.
Python is becoming
an increasingly vital
programming language.
Due to its versatility,
it has a wide variety
of uses
and many growing fields.
Both programmers
and system administrators
would do well
to pick up
some Python savvy
in order to keep
their skills up to date.
Chapter 3.
Installing Python
Different people
with a wide range
of backgrounds,
ages,
and educational levels
are involved
in Python development today.
You can become one of them,
no matter whether
you are a student,
a computer designer,
a housewife,
or a retiree.
There is always
a number of thorough instructions
to make your introduction
into the matter easier
and your success
more sustainable.
You can find many of them
on the Internet.
Here you may just get acquainted
with some of the starting points
and stepping stones
of the process.
The first steps.
To begin,
you will need to download
the Python source
and its code.
For better source control,
the development team
applies the subversion
of the most updated modification
of every file
in the project.
If you want to start
Python development
on Windows,
you will also need
to download
Microsoft Studio 2008
or just its free version
called Express.
If you use
Unix-like systems,
Mac,
Linux,
or others,
you will have to install
some special tools
through your package manager.
To start running Python,
you will need to identify
the type of platform
to be able to invoke
the interpreter
in different manners.
After the process
of complete installation
is finished,
you may start working.
What do you need to know?
Use PEP7
and PEP8 tools
as useful guides
for the Python code base
to ensure
you are on the same page
with everybody else.
Always test your work
when you change the code.
You may find
appropriate tests
for each module
in the test directory.
As many people
are working together
with you simultaneously,
they can see
your stages of development.
So,
consider code reviews
and comments
a helpful means
for writing a better code.
This will also help you
to stay away from bugs.
The most interesting thing
in the whole process
of Python development
is its new features.
They should be available
with the corresponding documentation
and code explanations.
Try to write
as much useful information
as is possible.
Even if you don't feel comfortable
with the Python documentation,
there is always a person
who will be able
to help you
with the format.
Always test
new features
before you get
your work accepted.
Creating a patch
is the next step
to make your feature available
for the core development team.
You may use
the diff command
in your subversion
to generate this patch.
Python development
is an educating
and rewarding experience,
as well as a way
to expand your knowledge
while providing
the community
with a service.
Chapter 4.
Python Variables.
According to several websites,
Python is one of the most
popular coding languages.
Along with being a high-level
and general-purpose
programming language,
Python is also
object-oriented
and open source.
At the same time,
a good number of developers
across the world
have been making use of Python
to create
GUI applications,
websites,
and mobile apps.
The differentiating factor
that Python brings
to the table
is that it enables programmers
to flesh out concepts
by writing less quantity
and more readable code.
The developers
can further take advantage
of several Python frameworks
to mitigate the time
and effort required
for building large
and complex software applications.
The programming language
is currently being used
by a number of
high-traffic websites
including Google,
Yahoo Groups,
Yahoo Maps,
Linux Weekly News,
Shopzilla,
and Web Therapy.
Likewise,
Python also finds
great use
for creating gaming,
financial,
scientific,
and educational applications.
However,
developers still use
different versions
of the programming language.
According to the usage,
statistics,
and market share data
of Python posted
on W3Tex,
currently Python 2
is being used
by 99.4%
of websites,
whereas Python 3
is being used
by only 0.6%
of websites.
This is why
it becomes essential
for each programmer
to understand
the different versions
of Python
and its evolution.
How has Python
been evolving
over the years?
Number one,
conceived as a hobby
programming project.
Despite being
one of the most popular
coding languages,
Python was originally
conceived by Guido
Van Rossum
as a hobby project
in December 1989.
As Van Rossum's office
remained closed
during Christmas,
he was looking
for a hobby project
that would keep him
occupied during the holidays.
He planned to create
an interpreter
for a new scripting language
and named the project
Python.
Thus,
Python was originally
designed as a successor
to the ABC
programming language.
After writing
the interpreter,
Van Rossum made the code
public in February 1991.
At present,
the open-source
programming language
is being managed
by the Python
Software Foundation.
Number one,
version one
of Python.
Python 1.0
was released
in January 1994.
The major release
included a number
of new features
and functional
programming tools
including Lambda,
Filter,
Map,
and Reduce.
The version 1.4
was released
with several new features
like keyword arguments,
built-in support
for complex numbers,
and a basic form
of data hiding.
The major release
was followed
by two minor releases,
version 1.5
in December 1997
and version 1.6
in September 2000.
The version 1
of Python
lacked the features
offered by popular
programming languages
of the time,
but the initial versions
created a solid foundation
for the development
of a powerful
and futuristic
programming language.
Number two,
version 2
of Python.
In October 2000,
Python 2.0
was released
with the new
list comprehension feature
and a garbage
collection system.
The syntax
for the list
comprehension feature
was inspired
by other functional
programming languages
like Haskell,
but Python 2.0,
unlike Haskell,
gave preference
to alphabetic keywords
over punctuation characters.
Also,
the garbage collection system
effectuated
collection of reference cycles.
The major release
was followed
by several minor releases.
These releases
added a number
of functionality
to the programming language
like support
for nested scopes
and unification
of Python's classes
and types
into a single hierarchy.
The Python Software Foundation
has already announced
that there will be
no Python 2.8.
However,
they will provide support
to version 2.7
of the programming language
until 2020.
Number three,
version 3 of Python.
Python 3.0
was released
in December 2008.
It came with
several new features
and enhancements
along with a number
of deprecated features.
The deprecated features
in backward incompatibility
make version 3 of Python
completely different
from earlier versions.
Many developers
still use Python 2.6
and 2.7
to avail the features
deprecated
from the last
major release.
However,
the new features
of Python 3
have made it
more modern
and more popular.
Many developers
even switched
to version 3.0
of the programming language
to avail
these awesome features.
Python 3.0
replaced
print statement
with the built-in
print function
while allowing
programmers
to use a custom
separator between lines.
Likewise,
it simplified
the rules
of ordering comparison.
If the operands
are not organized
in a natural
and meaningful order,
the ordering comparison
operators
can now raise
a type error exception.
The version 3
of the programming language
further uses text
and data
instead of Unicode
and 8-bit strings.
While treating
all code
as Unicode
by default,
it represents
binary data
as encoded Unicode.
As Python 3
is backward incompatible,
the programmers
cannot access features
like string exceptions,
old-style classes,
and implicit
relative imports.
The developers
must also be familiar
with changes
made to syntax
and APIs.
They can use
a tool called
2-to-3
to migrate
their application
from Python 2-to-3
smoothly.
The tool highlights
incompatibility
and areas of concern
through comments
and warnings.
The comments
help programmers
to make changes
to the code
and upgrade
their existing applications
to the latest version
of the programming language.
Number 4.
Latest versions of Python.
At present,
programmers can choose
either version 3.4.3
or 2.7.10
of Python.
Python 2.7
enables developers
to avail improved
numeric handling
and enhancements
for the standard library.
The version further
makes it easier
for developers
to migrate to Python 3.
On the other hand,
Python 3.4
comes with several
new features
and library modules,
security improvements,
and Python
implementation improvements.
However,
a number of features
are deprecated
in both Python API
and programming language.
The developers
can still use
Python 3.4
to avail support
in the long run.
Number 5.
Version 4
of Python.
Python 4.0
is expected
to be available
in 2023
after the release
of Python 3.9.
It will come
with features
that will help
programmers
to switch
from version 3
to 4 seamlessly.
As they gain experience,
the expert Python developers
can take advantage
of a number
of backward-compatible features
to modernize
their existing applications
without putting
in any extra time
and effort.
Despite this,
the developers
still have to wait
many years
to get a clear picture
of Python 4.0,
and they must monitor
the latest releases
to easily migrate
to the version 4.0
of the popular
coding language.
The version 2
and version 3
of Python
are completely different
from each other.
Each programmer
must understand
the features
of these distinct versions
and compare
their functionality
based on specific needs
of the project.
Also,
they need to check
the version of Python
that each framework supports.
Each developer
must take advantage
of the latest version
of Python
to avail new features
and long-term support.
Chapter 5
Object-Oriented Programming
Object-Oriented Programming
General Concepts
The programming style
that we usually call
object-oriented programming,
OOP,
OOP,
has appeared
relatively recently
in the history
of programming languages.
This is a particular
and very convenient style
for many situations.
It was designed
to overcome
the limits
of structured programming
based mainly
on the widespread
use of procedures,
functions,
pointers,
or other
more or less
developed data types.
Although structured programming
is very practical
for small software systems
or reduced
non-graphic applications,
it should be avoided
when dealing
with large applications
that use graphic elements
where object-oriented
programming is recommended.
Object orientation
means organizing
software resources
as a collection
of distinct
and discrete objects,
which includes
both data structures
and their processing functions.
This organization
is an extension
of structured programming
in which the data structures
and processing functions
are only loosely connected.
All items
have their own identity
and are perfectly distinct.
An object is defined
as an abstract concept,
a specific
and useful element
for any application.
Objects serve
two specific purposes.
Number one,
they provide a better
understanding
of the problem
to be solved.
Number two,
they provide
a base design
for implementation.
A class of objects
encapsulates
a certain number of objects
with similar properties.
This similarity
refers to both
the description,
data and attributes,
and the behavior,
functions,
or methods.
Attributes are unique features
within an object class.
Each attribute
receives a certain value,
which can be modified
during the object's lifecycle.
two or more objects
can have the same
or different values
for the same attribute.
Methods or operations
are processing functions
applied to objects
of a certain class.
All objects
within a class
admit the same set of methods,
methods which,
in return,
may receive
any number
of additional parameters.
In order to apply
various methods
to an object,
it has to be
created,
defined.
Defining an object
is called
instantiation.
Once an object
has fulfilled
its mission,
it is removed.
Abstraction
is a fundamental
human trait
that allows us
to build models
and thus cope
with complexity.
In every field
of human activity,
project approach
is based on
building a model
for a better understanding
of the problem
to solve.
Software engineering
makes no exception.
Through abstraction,
the essential key aspects
are isolated
from the non-essential ones.
Therefore,
each problem
may have several
adequate models.
In the software
engineering industry,
structured programming
has made a big step forward
defining three perspectives
needed in order
to properly address
any application.
These perspectives,
also known as models,
are the static model,
the dynamic model,
and the functional model.
There are currently
several object-oriented
methodologies
used for analysis,
design,
and implementation
of software resources.
One of these
modeling methodologies
is the OMT,
Object Modeling Technique.
This method of modeling
involves the planning
of the various
development stages
and a graphical representation
of objects
and their relationships.
Object-oriented
system development.
The major motivating factor
in the invention
of the object-oriented approach
is to salvage
some of the flaws
encountered
in the procedural approach.
Developments
in software technology
continue to be dynamic.
New tools and techniques
are announced
in quick succession.
This has forced
the software industry
and software engineers
to continuously
look for new approaches
to software design
and development,
which is becoming
more and more critical
in view of the increasing
complexity of software systems,
as well as the highly competitive
nature of the industry.
Software engineers
have been trying
various tools,
methods,
and procedures
to control the process
of software development
in order to build
high-quality software
with improved productivity.
The object-oriented paradigm
draws heavily
on the general systems theory
as a conceptual background.
A system can be viewed
as a collection of entities
that interact together
to accomplish
certain objectives.
Entities may represent
physical objects,
such as equipment or people,
and abstract concepts,
such as data files
and functions.
In object-oriented analysis,
the entities
are called the objects.
As the name indicates,
the object-oriented paradigm
places greater emphasis
on the objects
that encapsulate data
and procedures.
They play the central
role in all the stages
of the software development,
and therefore,
there exists
a high degree of overlap
and iteration
between the stages.
The entire development process
becomes evolutionary
in nature.
Any graphical representation
of the object-oriented version
of the software development
lifecycle
must take into account
these two aspects
of overlap
and iteration.
The result
is a fountain model
in place of the
classical waterfall model.
Object-oriented analysis,
OOA,
refers to the methods
of specifying requirements
of the software
in terms of real-world objects,
their behavior,
and their interactions.
Object-oriented design,
OOD,
on the other hand,
turns the software requirements
into specifications
for objects
and derives
class hierarchies
from which the objects
can be created.
Finally,
object-oriented programming,
OOP,
refers to the implementation
of the programs
using objects
in an object-oriented
programming language,
such as C++.
OOA provides us
with a simple,
yet powerful mechanism
for identifying objects,
the building blocks
of the software
to be developed.
The analysis
is concerned
with the decomposition
of a problem
into its component parts
and establishing
a logical model
to describe
the system functions.
Object-oriented design,
OOD,
is concerned
with the mapping
of objects
in the problem space
into objects
in the solution space
and creating
an overall structure
and computational model
of the system.
This stage
normally uses
the bottom-up approach
to build the structure
of the system
and the top-down
functional decomposition approach
to design
the class member functions
that provide services.
It is particularly important
to construct
structured hierarchies
to identify
abstract classes
and to simplify
the inner-object
communications.
Reusability of classes
from the previous designs,
classification of the objects
of subsystems,
and determination
of appropriate protocols
are some of the considerations
of the design stage.
Object-oriented design
Object-oriented design
begins with an examination
of the real-world
things
that are part
of the problem
to be solved.
These things,
which we will call objects,
are characterized
individually
in terms of their attributes,
transient state information,
and behavior,
functional process information.
Each object
maintains its own state
and offers a set
of services
to other objects.
Shared data areas
are eliminated
and objects
communicate
by message passing,
e.g. parameters.
Objects are
independent entities
that may readily
be changed
because all state
and representation information
is held
within
the object itself.
Objects may be distributed
and may execute
either sequentially
or in parallel.
Object-oriented design
is not dependent
on any specific
implementation language.
Problems are modeled
using objects.
Objects have
number one,
behavior,
they do things.
Number two,
state,
which changes
when they do things.
For example,
a car is an object.
It has stated
whether its engine
is running,
and it has
behavior,
starting the car,
which changes
its state
from engine
not running
to engine running.
The various terms
related to
object-oriented design
are objects,
classes,
messages,
abstraction,
inheritance,
and polymorphism.
Number one,
objects.
An object
is an entity
able to save
a state,
information,
and which offers
a number of operations,
behavior,
to either examine
or affect
the state.
Hence,
an object
is characterized
by a number
of operations
and a state
which remembers
the effect
of those operations.
All objects
have a unique
identification
and are
distinguishable.
Number two,
classes.
In any system,
there shall be
a number of objects.
Some of the objects
may have common
characteristics
and we can group
the objects
according to
these characteristics.
This type of grouping
is known as
a class.
Hence,
a class
is a set
of objects
that share
a common structure
and a common behavior.
Number three,
messages.
Conceptually,
objects communicate
by message passing.
Messages consist
of the identity
of the target object,
the name
of the requested
operation,
and any other
operation needed
to perform
the function.
Number four,
abstraction.
In object-oriented
design,
complexity is managed
using abstraction.
Abstraction is
the elimination
of the irrelevant
and the amplification
of essentials.
We can teach
someone to drive
any car
using an abstraction.
We amplify
the essentials.
We teach
about the ignition
and steering wheel
and we eliminate
the details,
such as details
of the particular
engine in this car
or the way fuel
is pumped
to the engine.
Number five,
inheritance.
Inheritance is
the technique
that is used
to build new classes
from existing ones
and to build
object-oriented
class hierarchies.
You can build
layers of classes
derived from
other classes.
Number six,
polymorphism.
When we abstract
just the interface
of an operation
and leave
the implementation
to subclasses,
it is called
a polymorphic operation
and the process
is called
polymorphism.
Object-oriented
programming
as web programming.
Web programming
is an aspect
of website development
and the role
of the web programmer
is just as significant
as the web designer's role
in the web design
aspect website development.
Programming languages
have developed
from machine languages
to low-level language
and then to a
high-level language.
The high-level language,
which is a language
close to natural language,
the language we speak,
is written
using certain approaches.
Notable are the
monolithic
and structural
programming approaches.
With the monolithic style,
you write a whole program
in one single block.
In the structured
programming approach,
a program is divided
into blocks of codes
called modules,
with each module
performing a specific task.
Basic, COBOL,
Pascal,
C,
and D-Base
that ran on
MS-DOS platform
could be written
using both approaches.
Following the revolution
of the Windows operating system,
it became possible
to write programs
using a more advanced
structured programming approach
than the type used
on the MS-DOS platform.
This is the
object-oriented programming
approach,
where a program
is divided into classes
and each class
is subdivided
into functions
or methods
with each function
providing a specific service.
C++ and Java
are typical examples
of object-oriented programming
languages,
which were originally
developed
for non-web solutions.
As the preference
for web applications
grew more and more,
according to
the historical development
of the internet
and the historical development
of web,
the need to improve
on scripting languages
continued to rise
and one of the ways
they embarked
on that journey
was by making scripts
object-oriented.
Java Applet
and PHP,
Hypertext Pre-Processor,
are examples
of object-oriented programming
OOP languages
for web solutions.
PHP was originally
on object-oriented,
but it has been
fully upgraded
to an object-oriented
programming language,
OOP,
demonstrating the three pillars
of object-oriented programming,
OOP,
encapsulation,
inheritance,
and polymorphism.
Thus,
it is possible
to write server-side scripts
in an object-oriented fashion.
Object-oriented programming,
OOP,
structures program
into classes
and functions
or methods.
To use a class
and access
the services
rendered by each function,
you must create
an instance
of the class.
When an instance
is created
and object
is produced,
which is held
by an object variable.
It is this object
that will now be used
to access each function
and make use
of its service.
The syntax of
class instantiation statement
for object creation
varies from language
to language.
In PHP,
you use the
new keyword.
For instance,
if you have a class
with name
customer
and you want
to instantiate it
and use the object
to access
function select records
in the class,
you go about it
this way.
Cust
equals
new
customer.
Cust
arrow
select records.
The first line
created an instance
of class customer
and an object
held by object variable
cust.
The second line
accesses the service
provided by function
select records
with the object
variable
cust.
Java, too,
uses the new keyword
for object creation,
but the application
of the keyword
in C++
is different
where it is used
by a pointer variable
during dynamic
memory allocation.
I mentioned earlier
the three pillars
of object-oriented
programming,
OOP,
encapsulation,
inheritance,
and polymorphism.
They are the
integral features
of PHP.
Encapsulation
is the process
of hiding
all the details
of an object
that do not
contribute to
its essential
characteristics.
This is achieved
by making all
instance variables
of the class
private so that
only the member
functions of the
class can access
its private
instance variables.
Inheritance
is a situation
in which a class
derives a set
of attributes
and related behavior
from a parent
class.
The parent class
is called the
superclass
or base class
and the inheriting
class is called
the subclass.
The member variables
of the superclass
become member variables
of the subclass
derived class.
In PHP,
you use the keyword
extends
to implement
inheritance
just like Java.
Class customer
extends products.
Polymorphism
is an extension
of inheritance.
It is a situation
when a subclass
overrides a function
in the superclass.
When a function
or method
is overridden,
the name
and the signature
of the function
in the superclass
are retained
by the overriding
function in the subclass.
But there is a change
in the function code.
Another important feature
of object-oriented
programming,
OOP,
language,
is a constructor.
A constructor
is a function
or method
bearing the same name
as its class name.
It is used
for initialization
of member variables
and invoked
as soon
as the class
is instantiated,
unlike other member
functions that are
invoked only
with the use
of the object variable.
At this point,
let us use
submission of data
with,
for instance,
fixed asset register form
for further illustration.
Your PHP script
needs to retrieve
data posted
from the form,
connect to the database,
print custom error messages,
and insert data
into the database table.
Using the object-oriented
programming,
OOP,
approach,
you need four functions
in the class.
The constructor
to retrieve
the posted data
from the form,
a function
to connect
to MySQL database,
a function
to insert a record
into the database
using the
insert SQL statement,
a function
to print
custom error messages.
because your program
is in an organized form,
it is easier
to understand
and debug.
This will be
highly appreciated
when dealing
with long
and complex scripts,
like those
incorporating
basic stock-broking
principles.
Within the limit
of the structured
programming capabilities
of the non-object-oriented
programming languages
of Basic,
COBOL,
Pascal,
etc.,
you could
organize programs
by dividing it
into smaller,
manageable modules.
However,
they lack
the encapsulation,
inheritance,
and polymorphism
capabilities
of object-oriented
programming,
OOP,
which demonstrates
a great advantage
of the object-oriented
programming,
OOP,
approach.
Python technology.
Python is a dynamic
and object-oriented
programming language,
widely used
for web application
development
with 90% of people
preferring Python
over other technology.
because of its simplicity,
reliability,
and easy interfacing.
It offers both
powerful scripting
and fast application
development process
across a vast range
of fields.
As the basis
of several
open-source platforms,
Python supports
with tools
that help to build
applications with
excellent security
and performance levels.
Python follows
procedural
and object-oriented
coding paradigms,
and hence,
the varied applications
that are written
in Python come out
with clean and readable
code, making them
easy to maintain.
Uses of Python technology
for application development.
Python is an open-source
programming language,
which is widely used
in a number of
application domains.
It can perform
on almost all
operating systems,
like Windows,
Linux,
Unix,
OS2,
Mac,
and Amiga.
The dedicated
Python development team
has written several
applications based on
Python programming language.
Python is a fun
and dynamic language
used by a number
of companies,
such as Google,
Yahoo,
and IBM.
It is also used widely
to write custom tools
and scripts
for special applications.
Python is extensively
used in web
applications development,
such as Django,
pylons,
and games applications
like EVE Online,
image applications,
science and education
applications,
software development,
network programming,
mobile applications,
audio-video applications,
etc.
Python can be easily
interfaced with C,
Object C,
Java,
Fortran.
The key features
of Python are
its natural expression
of procedural code,
sound introspection
capabilities,
precision,
readable syntax,
instinctive object
orientation,
dynamic data types,
extensions and modules
easily written
in C,
C++,
extensive standard libraries
and full modularity,
exception-based
error handling,
and it is embeddable
within applications
as a scripting interface.
Python also supports
the Internet Communications Engine,
ICE,
ICE,
and several other
integration technologies.
As a dynamic,
general-purpose
programming language,
Python is finding
extensive usage
by Python development
services providers
across the world
for developing
a wide range
of software applications.
It allows developers
to express a concept
with less quantity
and more readable code.
It enables the developers
to integrate Python
with varied other
well-known programming languages
and tools flawlessly.
Frequently,
the Python developers
have the necessity
to use diverse frameworks
and tools
to create high-end quality
software applications
within a short period of time.
With the support
of the resources
offered by the varied
Python frameworks,
Python developers build
sophisticated applications
with minimal time
and effort.
Also,
Python developers
have an option
to select from
a number of Python frameworks,
such as
KIVI,
QT,
PyGUI,
WXPython,
Dijango,
Flask,
Pyramid,
etc.,
depending on the nature
and requirements
of individual application-building projects.
Python is a popular choice
for use
as a scripting language
for many software
development processes.
Similar to many other
interpretative languages,
Python offers more flexibility
than compiled languages
and it can be efficiently used
to integrate
disparate systems together.
Certainly,
Python is a versatile
programming language
with several applications
that are used
in diverse fields.
The future
of object-oriented programming
The object-oriented paradigm
is based on the idea
that objects exist
independently of each other
and that operation
can be executed
on them.
Consequently,
a user in a true
object-oriented
development environment
should be able
to interactively create objects
of any available class,
manipulate these objects,
and call their
interface routines.
Platform independence
write once
run anywhere
capability.
As a matter of fact,
you cannot run
a Java program
anywhere
unless there is
a virtual machine.
But it's as good
as anywhere.
I know some folks
who would say it's
write once
debug everywhere.
But any such
platform-dependent bugs
are probably VM issues.
All in all,
this platform independence
is a huge plus point
for enterprise development,
saving tons of cash
and effort
importing products.
Key features
of platform independence.
Number one,
ease of use.
I'm not really sure
how many
hard-nut programmers
would agree with me,
but programs are easy
to visualize
when they are
object-oriented
once you get
the hang of it.
After the concept
is built,
it becomes much easier
to realize it
in code.
Number two,
free runtime
compilers tools.
This was one
of the best moves
by Sun.
The runtime is free,
the development kit
is free,
and now
there are a ton
of other tools
built with Java
for Java
that are free.
This makes Java development
easy and affordable.
There are a number
of ways to measure
the popularity
of a programming language.
For example,
based on the number
of
new applications
that are written
in the language,
existing applications
that are written
in the language,
developers
that use the language
primarily,
developers that use
the language ever,
web searches,
available jobs
that require skills
in the language,
developers' favorites,
number three,
low cost.
The tools needed
to build and test
Java programs
are available
without charge.
Sun makes the
Java development kit,
JDK,
available over the internet,
where faculty
and students alike
can download it.
The JDK,
which includes
the Java compiler
and interpreter,
among other tools,
is admittedly spartan,
but students should find
it adequate
for most programming
assignments.
Those willing
to spend a little money
will find nicer
program development
environments,
such as Symantec Cafe
and Microsoft J++,
available at moderate prices.
Number four,
easy to test.
Students can put
their programs,
written as applets,
on their web pages
for instructors
to test and critique.
Instructors can monitor
a student's progress
at any stage
by simply visiting
the student's webpage.
Number five,
student enthusiasm.
Java has gotten
so much publicity
that students are bound
to be excited
about learning it.
By harnessing
that enthusiasm,
instructors can use
Java as a vehicle
to teach students
a tremendous amount
about modern-day computing.
Students will be
motivated by Java's
growing importance
in the real world.
Moreover,
students will be thrilled
by the ease
with which they can build
sophisticated GUI programs.
Number six,
suitable for advanced courses.
After students gain familiarity
with the basic features
of Java in CS1,
they can use its advanced features
in later courses.
For example,
a course on operating systems
can take advantage
of Java's support for threads.
The network classes
that come with Java
make it ideal
for a networking course.
Number seven,
easy transition to C++
and other languages.
Java's syntactic
similarity to C and C++
should ease the transition
to those languages.
Number eight,
international appeal.
The Unicode character set
is an integral part of Java,
allowing students to learn
about the issues
of developing software
for the international market.
Java has significant advantages
not only as a commercial language,
but also as a teaching language.
It allows students
to learn object-oriented programming
without exposing them
to the complexity
of C++.
Chapter six,
why Python?
As stated previously,
Python was originally conceived
by Van Rossum
as a hobby language
in December 1989.
The major and backward
incompatible version
of the general-purpose
programming language
was released
in December 2008.
Python was recently rated
by a number of surveyors
as the most popular
coding language.
The massive popularity
indicates Python's effectiveness
as a modern
programming language.
At the same time,
Python 3 is currently used
by developers
across the world
for creating a variety
of desktop GUI,
web,
and mobile applications.
There are also
a number of reasons
why the huge popularity
and market share of Python
will remain intact
over a longer period of time.
Reasons why
the massive popularity
of Python
will remain intact
in the future.
Number one,
supports multiple
programming paradigms.
Good developers
often take advantage
of different
programming paradigms
to reduce the amount
of time and effort
required for developing
large and complex
applications.
Like other modern
programming languages,
Python also supports
a number of commonly
used programming styles
including object-oriented,
functional,
procedural,
and imperative.
It further features
automatic memory management
along with a dynamic
type system allowing
programmers to use
the language to
effectuate development
of large and complex
software applications.
Number two,
doesn't require programmers
to write lengthy code.
Python is designed
with a complete focus
on code readability,
so the programmers
can create a readable
code base that can be used
by members of distributed teams.
At the same time,
the simple syntax
of the programming language
enables them to express concepts
without writing
long lines of code.
This feature makes it easier
for developers
to create large
and complex applications
within a stipulated
amount of time.
As they can easily
skip certain tasks
required by other
programming languages,
it becomes easier
for developers to maintain
and update their applications.
Python further scores
over other programming languages
due to its extensive
standard library.
The programmers
can use these libraries
to accomplish a variety
of tasks without writing
long lines of code.
The standard library
of Python is designed
with a large number
of high-use programming tasks
scripted into it.
Thus,
it helps programmers
to accomplish tasks
like string operations,
development,
implementation of web services,
working with internet protocols,
and handling
operating system interfaces.
Number four,
effectuates web application development.
Python is designed
as a general-purpose
programming language
and lacks built-in
web development features.
But the web developers
use a variety
of add-on modules
to write modern web applications.
While writing web applications
in Python,
programmers have the option
to use several
high-level web frameworks,
including Django,
Web2Pi,
TurboGears,
CubicWeb,
and Real.
These web frameworks
help programmers
to perform a number
of operations
without writing
additional code,
like database manipulation,
URL routing,
session storage
and retrieval,
and output template formatting.
They can further
use the web frameworks
to protect the web application
from cross-site scripting attacks,
SQL injection,
and cross-site request forgery.
Number five,
facilitates development
of high-quality GUI,
scientific,
and numeric applications.
Python is currently available
on major operating systems
like Windows,
macOS X,
Linux,
and Unix.
The desktop GUI applications
written in the programming language
can be deployed
on multiple platforms.
The programmers
can further speed up
cross-platform desktop
GUI application development
using frameworks like
KIVI,
WXPython,
and PyGTK.
A number of reports
have highlighted
that Python is used widely
for the development
of numeric
and scientific applications.
While writing scientific
and numeric applications
in Python,
the developers
can take advantage
of tools like
SIPI,
Pandas,
IPython,
along with the Python
imaging library.
Number six,
simplifies prototyping
of applications.
Nowadays,
each organization
wants to beat
the competition
by developing software
with distinct
and innovative features.
This is why prototyping
has become an integral part
of the modern
software development
lifecycle.
Before writing the code,
developers have to create
a prototype
of the application
to display its features
and functionality
to various stakeholders.
As a simple
and fast
programming language,
Python enables
programmers
to develop
the final system
without putting in
any extra time
and effort.
The developers
receive the option
to start developing
the system
directly from the prototype
simply by refactoring
the code.
Number seven,
can also be used
for mobile app development.
Frameworks like Kivi
also make Python
usable for developing
mobile apps.
As a library,
Kivi can be used
for creating both
desktop and mobile
applications.
It allows developers
to write the code
once and deploy
the same code
on multiple platforms.
Along with interfacing
with the hardware
of the mobile device,
Kivi also comes
with built-in
camera adapters,
modules to render
and play videos,
and modules to accept
user input
through multi-touch
and gestures.
Thus, programmers
can use Kivi
to create different versions
of the same applications
for iOS,
Android,
and Windows
cellular phones.
The framework
does not require developers
to write long lines
of code
while creating
Kivi programs.
After creating
different versions
of the mobile app,
they can package
the app separately
for the individual
app store.
This option
makes it easier
for developers
to create different versions
of the mobile app
without deploying
separate developers.
Number eight,
open source.
Despite being rated
as the most popular
coding language,
Python is still available
as open source
and free software.
Along with large
IT companies,
the startups
and freelance software
developers can use
the programming language
without paying
any fees
or royalties.
Thus, Python
makes it easier
for businesses
to significantly reduce
development costs.
The programmers
can also avail
the assistance
of the large
and active community
to add out-of-the-box
features to the
software application.
Chapter seven,
how to program
in Python.
Python is a dynamic
language and supports
different programming
styles, including
object-oriented,
aspect-oriented,
functional,
and imperative.
One of the best
features of the language
is ease
and enhanced
memory management.
Essentially employed
as a scripting language,
Python offers a great
level of functionality.
While it can be used
as a stand-alone program,
you can also integrate
third-party tools
and customize
its functionality.
One of the highlights
of Python is that
it is a highly
extensible language.
This means that
various functional elements
are not built
into the core
of this platform.
Rather,
you can use
third-party applications
and extend
the platform's
functionality.
Additionally,
you can integrate
a Python code
into an existing
program and create
an interface
for programming.
This is called
embedding and
extending.
As mentioned above,
syntaxes of Python
are simple.
Complicated syntaxes
are rejected
and the platform
embraces codes
that are less cluttered
and sparse.
This does not
in any way
influence the performance
or functionality
of programs.
also,
unlike other
popular programming
languages,
such as Perl,
Python does not
offer unnecessary clutter
by giving the programmer
multiple ways
of achieving
the same purpose.
Python's philosophy
is to offer
one powerful way
of obtaining
one result.
This philosophy
is the main
driving force
behind the simplicity
of Python.
So,
if you want to
become adept
in this language,
you need to change
your mindset
and think
in a simple
and straightforward
manner.
The simplistic
approach towards
programming works
best with Python.
In order to
aid simplicity,
Python coding
and syntaxes
use English words
rather than
punctuations
or symbols.
This enhances
the readability
as well.
Some examples
of statements
written in Python
include
if,
for,
while,
try,
class,
def,
with,
yield,
import,
and many others.
Most of the common
commands used
are self-explanatory.
Owing to the ease
of handling,
Python is a
programmer's language.
Moreover,
learning the language
is very simple.
One of the biggest
advantages of Python,
besides clear
and easily readable
codes,
is the speed
with which you can code.
Programmers can go
on the fast track
because multiple levels,
which are not necessary,
can be skipped.
Another advantage
is that programmers
get a lot of support
from the Python
open source developer
community.
The portability feature
of Python
is another one
of its major strengths.
Not only can Python
run on multiple platforms,
but also programmers
only need to write
a single program
to work on
all operating systems,
such as Linux,
Mac,
Windows,
and others.
It is a highly
adaptable language.
Learning Python
is not a tough task
even for beginners,
so take the leap
and master Python.
Chapter 8
Tips for Learning
to Code
the Easy Way
Learning to Code
is one of the toughest
decisions you can make.
At first,
we start with a
very high enthusiasm
and zeal
to beat the beginner stage
in 21 days or less,
but all too soon
we hit a brick wall
and end up
being novices.
Learning to program
is like learning
to speak a new language.
Learning a few phrases
of a foreign language
doesn't make you fluent.
The same applies
to programming languages.
Learning new syntax
doesn't make you a pro.
These disappointments
caused by our eagerness
to take the shorter way through
can become burdensome.
In these few steps,
I will be providing
with some cool tips
for starting
your programming journey
and reaching
your full potential.
Number one,
learn how you learn.
Knowing how you learn
not only helps you
in programming,
but in everyday life.
First,
understand your own
personal learning pattern.
I would suggest
you relax
and don't try
to memorize codes.
You will become fluent
with time and practice.
If you want to build
a career with programming,
you should first relax
and identify
your learning curves.
These include
the best time of the day
that your brain
assimilates faster,
the best environment
for you to learn,
and learning methods
that are tailored
to your own personality.
Number two,
know where to start.
It's important to know
what programming language
to learn
and where exactly
to start.
It's a bit confusing
when choosing
a language to learn,
especially if you do not
have any special area
of interest.
Find a problem
and a related programming language
to solve that problem.
For example,
if you are trying
to solve a problem
with web technology,
subscribe to learn Python
and other web-related
programming languages.
Read books
and articles
to learn about
these languages
before choosing
which to learn.
Sometimes it's boring
reading the introduction
when you pick up a book,
but some information
provided there
could be helpful
in the rest of the chapter.
Also,
read books
and watch video tutorials
to get started
and become familiar
with the basics.
Growing a career
and developing
a working program
requires practice.
Look for a new challenge
around you
and try to apply
the basics you've learned.
The more you are trying
to figure out
and solve the problem,
the better you are
at programming.
Number three,
get help.
Never try to do it
on your own.
Subscribe to tutorials
online and offline.
Go to seminars
and programming group meetings.
Meet other programmers,
observe,
and ask questions.
Get mentors for guidance.
It's easier learning
with other programmers,
so don't be intimidated
by their skill.
Be patient,
observe,
and learn.
Even pros
do not work alone.
Subscribe to forums
and websites
like Stack Overflow,
GitHub,
Udemy,
Coursera,
etc.
Number four,
challenge yourself
and keep at it.
Challenge yourself
to solve
a real-life problem,
especially a problem
relating to you
or something
you are very passionate about.
Resolve the same problem
you have already solved
with an easier method,
fewer lines of code,
or a new approach entirely.
The more you look
for new ways
to solve problems,
the better
you will become.
Don't be tempted
to jump into another project
when you are faced
with a challenge
because chances are
that you would keep
jumping in
and out of projects
and languages
and never get any work done
or master a language.
Keep practicing.
Even though working
on the same project
over and over again
can be boring,
I assure you
the second
or even third attempt
will be easier
with a consistent effort.
A cool trick
to staying on programming
without burning out is
when you are not coding,
try to think about it.
The more you think about it,
the more your actions
and body responses
move towards it.
Keep a list
and check things out daily.
Number five,
be updated.
Always keep in touch
with recent updates
and upgrades.
If you think you are
good enough on a language
or want to solve problems
on other platforms,
pick up another language
and explore.
Never limit yourself.
The more versatile you are,
the more successful
you will become.
Subscribe to email listings
and blogs
that keep you updated.
Conclusion
The web is full of free resources
that can turn you
into a programmer.
If you've always wanted
to learn how to build
software yourself
or perhaps write
an occasional script
but had no clue
where to start,
then continue to learn.
If you're interested
in becoming a programmer,
you can get off
to a great start
using tons of free
web-based tutorials
and resources.
Since the early days
of the internet,
programmer communities
have been using it
to discuss software
development techniques,
publish tutorials,
and share code samples
for others to learn from
and use online.
A common issue
for beginners
is getting hung up
on trying to figure out
which programming language
is best to learn first.
There are a lot
of opinions out there.
In the end,
language doesn't really matter.
Understanding data,
control structures,
and design patterns
are key.
Every programming language,
even basic scripting languages,
will have elements
that will make other languages
easier to understand.
Many programmers
never actually take
accredited academic courses
and are actually self-taught
in every language
throughout their careers.
This is achieved
by reusing concepts
already known
and referring to documentation
and books
to learn its syntax.
Therefore,
instead of getting stuck
on what language
to learn first,
simply pick the kind
of development
you want to do
and just get started
using the one
that comes the easiest
to you.
There are several
different kinds
of software development
you can do
for various platforms.
Web development,
desktop development,
mobile device development,
and command line.
My opinion would be
to learn Python
because it is one
of the most useful
and widely adapted
programming languages
in the world.
This has been
Python Programming,
the ultimate beginner's guide
to the Python programming language.
Written by
Kay Connors.
Narrated by
Stephen Strader,
The Voice Ranger.
Copyright
2017 by
Kay Connors.
Production copyright
2017 by
Kay Connors.
Audible hopes you
have enjoyed
this program.
Thank you.
