This is Audible.
This is Python. Learn Python in a day and master it well.
The only essential book you need to start programming in Python now.
Hands-on challenges included.
Authored by Ronald Olson.
Narrated by John H. Feskins.
Copyright 2017 by Ronald Olson.
Copyright 2017 Ronald Olson. All rights reserved.
In no way is it legal to reproduce, duplicate, or transmit any part of this document in either electronic means or in printed format.
Recording of this publication is strictly prohibited, and any storage of this document is not allowed unless with written permission from the publisher.
All rights reserved.
The information provided herein is stated to be truthful and consistent in that any liability, in terms of inattention or otherwise,
by any usage or abuse of any policies, processes, or directions contained within, is the solitary and utter responsibility of the recipient reader.
Under no circumstances will any legal responsibility or blame be held against the publisher for any reparation, damages, or monetary loss due to the information herein, either directly or indirectly.
Respective authors own all copyrights not held by the publisher.
Legal Modus.
This book is copyright protected.
This is only for personal use.
You cannot amend, distribute, sell, use, quote, or paraphrase any part or the content within this book without the consent of the author or copyright owner.
Legal action will be pursued if this is breached.
Disclaimer Notice.
Please note the information contained within this document is for educational and entertainment purposes only.
Every attempt has been made to provide accurate, up-to-date, and reliable, complete information.
No warranties of any kind are expressed or implied.
Readers acknowledge that the author is not engaging in the rendering of legal, financial, medical, or professional advice.
By reading this document, the reader agrees that under no circumstances are we responsible for any losses, direct or indirect,
which are incurred as a result of the use of information contained within this document, including, but not limited to, errors, omissions, or inaccuracies.
Trademarks.
Auva Press and the Auva Press logo are trademarks or registered trademarks that may not be used without written permission.
All other trademarks are the property of their respective owners.
Auva Press is not associated with any product or vendor mentioned in this book.
1st Edition
ISBN 13-978-15426-67890
ISBN 10-15426-67895
Copy Editor
Betty Oaks
Cover Designer
Annie Eves
Development Editor
Peter Nathan
Technical Reviewer
Tony Richards
Abstract
The computing world has undergone a remarkable revolution in recent times.
During this time, programming languages have changed too.
It's no secret that robust, more efficient, and easy-to-learn object-oriented programming languages such as C++, JavaScript, Java, Goang, Perl, etc.
have emerged as an alternative to the core and structural languages such as C and Fortran.
In spite of being a general-purpose programming language, Python can be applied in web development, mobile, and desktop apps.
Python language is simple to learn.
It's also a very flexible programming language that has been used to develop some of the coolest e-commerce and web applications.
Being an object-oriented language, you'll also be on your way to learning other languages such as Java, Golang, and Perl if you finish reading this book.
This book is meant to help you, the novice programmers, gain an understanding of Python programming.
Whether you're new to Python or even new to programming, you'll find this book helpful in fast-tracking your understanding of Python language.
The book has been written to enable novice programmers to get started as soon as possible.
Written by an experienced computer scientist, Learn Python in a Day and Master it Well is a comprehensive guide for beginners.
This book will teach you all the principles and concepts of Python programming through a simple and succinct language.
You'll acquire Python programming skills that are necessary for the practical development of applications in real-world scenarios.
Throughout the chapters, you'll find Python code samples that illustrate the concepts of Python programming.
At the end of each chapter, you'll find exercises that test and challenge your understanding of Python.
The solutions to these exercises have been provided at the end of the chapter.
Fast-tracking your knowledge and understanding of Python language.
By the time you finish reading this book, you'll be a professional Python programmer with in-depth knowledge and experience of creating your own Python software.
It is my hope that you'll enjoy the book. Good luck!
The odds are, if you've bought this book, then you're a newbie to Python.
Or you could be new to programming altogether.
In either case, you've made the right decision by choosing Python programming language.
In the last couple of decades, the programming environment has witnessed a momentous growth in the number of languages.
We've seen how core programming languages such as C, Fortran, and COBOL evolved in 1960s and 1970s to address programmers' challenges.
But in recent times, we've also seen how object-oriented programming languages such as C++, JavaScript, Java, and even Golang have emerged as an alternative to core programming languages.
In all these developments, the Python language has stood out distinctively from the rest.
Why Python?
Well, Python language is a fully functional programming language.
This means that the language can perform almost anything that any programming language can do in a cost-effective and efficient manner.
Python language is capable of threading and GPU, graphical processing, just like any other programming language such as Java, C++, and Golang.
In fact, most of the processing is handled in modules that are already pre-written that just need importation for use.
Therefore, if you're a newbie to Python, or even new to programming, you'll find these modules helpful in developing programs within the shortest time possible.
If you're good in C++, you'll find programming in Python to be simple.
This is because the Python code can be wrapped around C++ codes for seamless interaction.
By using C++ codes, you'll be in a position to use various tools of C++ without having to understand the language.
But that's not all.
Python language is beginner-friendly, yet very powerful.
In fact, the syntax, rules defining the structure of statements, is extremely simple to understand and follow.
You don't need any experience in programming to begin coding in Python.
Because of its powerful nature, Python has been used to develop some of the most popular applications such as Google, Pinterest, Mozilla, SurveyMonkey, Slideshare, YouTube, and Reddit.
It's also used to develop games, perform data analysis, control the robot and hardware, and create GUIs.
This means that there are several career options that demand Python language.
Thus, learning Python can be the greatest asset to land that dream job.
You may also boost your career with new Python programming skills.
This book will provide you with all the vital programming concepts and skills that are necessary for you to learn Python.
It will walk you through the comprehensive step-by-step instructions that are necessary for you to create your own software.
Without further ado, let's jump in and learn Python.
Chapter 1. Understanding Python
Welcome to the world of programming in Python language.
This chapter provides you with the ins and outs of Python language.
By the end of the chapter, you'll have understood the bigger picture of Python language.
Are you ready?
Good.
Let's begin with the most important question.
What is Python?
What is Python?
Well, Python language is a high-level, interpreted, and object-oriented programming language with dynamic semantics.
Being a high-level programming language, you can easily construct statements using a syntax that's easy to learn.
In fact, the core philosophy of Python is to allow programmers to write codes that are not only readable,
but also minimize maintenance routines.
Besides, its high-level, inbuilt data structures make it a perfect candidate for rapid application development.
The language supports the use of modules and packages that encourage modularity and code reuse,
object-oriented paradigms, which can accelerate the development of software.
The Python interpreter and all the standard libraries are available in binary format for all the major platforms,
such as Windows, Linux, and Mac OS.
These source codes are open source and therefore are freely distributed.
I fell in love with Python because of the increased productivity it provides.
Python is an interpreted language.
Therefore, there is no compilation step process required.
This means that the edit-test-debug process will be incredibly fast compared to other programming languages,
such as Java and C++.
In fact, a bug or any bad input in the Python code can never cause the whole software to fail.
Instead, the interpreter will raise an exception or print a stack trace that provides clues on the source of the bug in the code.
Next up, let's examine the versions of Python language.
The Python language was invented in the late 1980s by Guido van Rossum in the Netherlands as a successor to ABC programming language.
Since its first release, there have been major improvements starting with the version 1.0, 1.5, and 1.6.
In October 2000, Python version 2 was released as a garbage collection management system that is capable of collecting the reference cycles.
The initial version of Python 2, Python 2.1, was almost similar to Python 1.5.
All the codes, documentation, and specifications that were added, starting with Python 2.1,
is owned by Python Software Foundation, PSF,
an umbrella organization formed in 2001 to regulate future releases of Python versions.
The PSF focused on regulating the language specification and the nested scopes.
In November 2014, PSF announced that Python 2.7, the latest and final version of Python 2, would be supported until 2020.
The current version of Python is Python 3.
Users are advised to install the latest version of Python.
However, if you're using Python 2.7, then you have until 2020.
Beyond 2020, Python 2.7 will no longer be supported.
At the time of writing this book, the latest version of Python was 3.6.
Python 3.6 was released in December 2016.
So, which version should you use?
Now, the most appropriate version of Python to use depends on what you want to get done by the language.
If you can do exactly what you want to get done with Python 2.7, then it's great.
However, there will be a few demerits ranging from library support and the operating system platform support.
As long as Python 3.7 is installed on your computer, then you shouldn't worry because most of the libraries will be supported.
For instance, in the majority of Linux distributions, Python 3.x will already be installed.
Professionally speaking, I advise you to go for the latest version of Python, which is Python 3.6.
This is because Python 3.6 removes many problems that can hinder your programming capabilities.
Major packages that have been ported to the latest version of Python 3 are
The NumPy and SciPy, which are used for number processing and scientific computing
The Django, the Flask, the CherryPy, and Pyramid, which are used for websites
The PIL, which is an image processing module
The CXFreeze, which is used for packaging the applications with their dependencies
The Py2X, which is used for packaging Python application for Windows users
The OpenCV3, which is used in machine learning
The LXML, which is a powerful and Pythonic XML processing library
For whom is this book written?
It's a fact that Python programming language is currently one of the most popular programming languages
for developing modern data-driven websites, doing data analysis, and software development
By the end of the year 2015, Python language was already topping the list of programming languages
that serious programmers were interested in learning
In fact, a study conducted by Hired.com revealed that Python language recorded a whopping 40.4% popularity
topping Java programming language for the first time in two decades
This was followed by Java, JavaScript frontend, HTML, CSS, and Ruby, in that order
Whether you're new to Python or you're new to programming, you've made the right decision
This book is intended for programmers who would like to master Python programming language
If you're interested in the following job profiles, then this book is for you
Software Engineer, Research Analyst, Data Analyst, Data Scientist, Software Developer
What You Can Expect to Learn
The introductory chapter of this book explores the big-picture view of Python programming language
In this chapter, you'll learn all the basics of Python language, including the two renowned versions of Python
Python 2 and Python 3, and applications of Python language in business, finance, and web and mobile applications
Chapter 2 will teach you all the basics of Python language, including all the steps that are required to get you started
Including, but not limited to, how to install Python language on any platform, the text editors, and the idle environment
Once you're done with this chapter, you'll be in a position to start programming in Python
In chapter 3, you'll learn the variables and data types in Python language
Chapter 4 will walk you through all the Python operators, including the basics operators, logical operators, arithmetic operators, and comparison operators
Chapter 5 will introduce you to list data structure
Where you'll learn how to change, add, and remove elements in a list
You'll also learn how to organize and sort lists
In chapter 6, we explore the decision structures in Python language
These include the if-else statement, while loops, and switch statements
Chapter 7 will teach you all the Python functions and modules
Chapter 8 will introduce the concept of classes in Python programming language
While chapter 9 will teach you all the common error and exception techniques in Python
Finally, you'll learn the basics of testing your Python application in chapter 10
Why Python language?
You've heard that familiar advice that university or college education will equip you with the right tools required to succeed to land that dream job
However, when you enroll for any course in computers, whether computer science, software engineer, or IT
You'll discover that the curriculum for most of these courses is theoretical
This means that when you graduate, you'll still be ill-equipped to enter the job market
In the programming world, you can begin to study some of the top-notch programming languages on your own
But truth be told, there are very few programming languages that are easy to learn
And Python is one of them
With Python language, it's never too late
You can't be too old or too young to begin learning the language
Here are compelling justifications for why Python programming language should be your first sortie into programming world
1. Simple to learn
Let's face it, learning any programming language isn't a walk in the park
However, Python language was designed with newbies in mind
In fact, the syntax is as simple to understand and follow as kindergarten math
You don't need any experience in programming to begin coding in Python
The use of white spaces and other common expressions have eliminated the need for mind-numbing variable declarations
And the distasteful curly brackets
The language has been designed around the philosophy of less code that completes basic tasks
This makes Python language to be one of the most economical languages you can ever learn on the planet
As a matter of fact, the Python language is almost 3-5 times shorter than Java language
And 5-10 times shorter than C++
2. It can be your stepping stone to learning other languages
Mastering the Python language can be your stepping stone into the world of programming
Being object-oriented, just like Java, JavaScript, C++, or Perl
Python language can help you learn other programming languages
If you're planning to become a top-rated software developer, which I bet you are
Then you should invest in Python language
It can easily help you to invest in other programming environments
3. It has vast capabilities for web development
It is no secret that web development is still a booming economic venture for most programmers
With Python's vast web development capabilities, you can become an effective web developer
For instance, Django, the renowned open-source web development framework that's written in Python
Is the bedrock of some of the most popular sites such as Pinterest, The Guardian, The New York Times, and Instagram
Being open-source means that all the information that you need to capitalize on Django will be found online at www.djangoproject.com
Additionally, web development with the Django framework will always document because it has a vast support community
In fact, one of the reasons you should consider learning Python is its ability to allow you to program within the shortest time
4. It is flexible
Being a dynamically typed language, Python is very flexible
There are no difficult standard rules on how to build the features
Therefore, you'll be more flexible when solving problems related to desktop and web apps
Furthermore, the Python language is really forgiving when it comes to debugging
A bug or any bad input in the Python code can never cause the whole software to fail
Instead, the interpreter will raise an exception or print a stack trace that provides clues on the source of the bug in the code
In fact, you'll still be in a position to compile and run the Python code until the problematic part is encountered
5. It is general-purpose language
Python is a general-purpose programming language, which implies it can be used to code just about anything
Ranging from desktop to web applications, data mining, and scientific computing
This has been made by the right libraries and tools that are offered in package form in the language
However, it's important to note that Python language is great for the development of back-end systems
Performing data analysis, artificial intelligence, and scientific computing
Applications of Python programming language
Python programming language can be applied in the following areas
1. Business and e-commerce
In recent times, the numbers of online storefronts have grown exponentially
Causing the online marketplaces to become overcrowded
Some of these storefronts have exposed businesses to serious challenges ranging from response times, security, and scalability
The Django, a Python language framework for the development of intensive data-driven websites
Has come in handy in helping web developers to build fast, secure, and scalable e-commerce websites
Among the popular websites that have been created using the Django framework are
SurveyMonkey, Reddit, Pinterest, Reddit GIFs, and PlayFire
2. Financial Technology
Python language is used in blockchain technology for the development of smart contracts, computer protocols
That facilitate, enforce, and verify negotiations and performance of contracts
The smart contracts describe codes that are capable of executing and enforcing negotiations and agreements
3. Mobile applications
Mobile app development has become a huge industry with a lot of promising capabilities to software developers around the world
Even though Python language isn't very developed when it comes to the development of native applications
Its web applications features are necessary for the development of web applications
For both Android and iOS smartphones that aren't hybrid or native
Chapter 2. Python Basics
Welcome to Python Basics
This chapter provides you with a big picture view of Python Basics
Including details of how you can install it, Python Text Editors, Python Idle, and an overview of Python application
So, let's dive in
The installation process
The process of downloading and installing the Python language interpreter is pretty simple
If you're using the latest Linux distribution, whether Ubuntu, Fedora, or Linux Mint
Then you'll find the latest version of Python installed
However, for other operating system platforms, you have to download and install Python yourself
How to install Python on Linux distributions
Python is an open source programming language, which means it's freely available
For most Linux distributions, you'll find the Python language already installed
To check whether Python has been installed on any Linux distribution
Simply open the terminal as root and type Python at the command prompt
Press the Enter key
If you see something starting, then it's Python, which means it has already been installed
However, if you don't see anything, then it means you haven't installed Python
It's time to install
Let's dive in and find out how you can install Python
Below are steps necessary for installing Python on Linux OS systems
Launch the terminal, ensure you're connected to the Internet
Type SU at the command prompt and press the Enter key
Type your root password and hit the Enter key
If you're using Debian-based Linux distributions such as Ubuntu
Then type apt-get install python at the command prompt and press the Enter key
If you're using the Red Hat RHEL CentOS Linux distributions such as Fedora
Then type yum install python at the command prompt and hit the Enter key
Wait for the installation process to complete
If you're using Debian-based Linux distributions such as Ubuntu
Then type apt-get update at the command prompt and press the Enter key
For the Python to get updated to the latest version
If you're using the Red Hat RHEL CentOS Linux distributions such as Fedora
Then type yum update at the command prompt and hit the Enter key
This ensures that your Python software has been updated to the latest version
And there you have it! You have just installed Python Interpreter on your computer
It's simple, isn't it?
How to install Python on Windows OS
Before you download and install Python, decide on the version of Python language you would want to install
As a rule of thumb, always go for the latest version
In this case, the latest version is Python 3.6
Below are steps that can help you install Python on Windows OS
Go to www.python.org and download the latest version of Python
Select the appropriate version depending on the nature of your operating system
32-bit or 64-bit
Open the Python file you've just downloaded
Click on the Accept the default settings from the on-screen instructions
And wait for the installation process to complete
What about macOS?
How to install Python on macOS
The latest versions of macOS X and Sierra have Python 2.7 already ported in them
Therefore, you don't have to install or configure anything if you want to begin using Python
However, if you wish to install the latest version of Python, you need to use the homebrew
Here are steps that can help install Python on macOS
Open your terminal or any of your favorite OS X terminal emulators
Type the following command at the command prompt
Wait for the app to be installed
Once the installation process has completed
Insert the homebrew directory at the top of the path environment variable
You can perform this operation by adding the following line at the bottom of the
Tilde forward slash dot profile file
Export space path equals forward slash usr forward slash local forward slash bin colon
Forward slash usr forward slash local forward slash s bin colon
Money sign path
Now proceed to install Python language interpreter by typing the following command at the command prompt
Brew space install space python
Wait for the installation process to complete
Now that you've installed Python, what next?
Well, it's now time to begin programming
But not so fast, you should decide on what text editor you'll use
Let's explore the text editors in Python programming
Text editors
Just as the name suggests, a text editor is simply a program that you'll use to type and execute your Python language statements
In other words, the text editor will help you to write the Python code
It also has the features that will help you with common tasks such as auto indentation
and automatic code formatting when writing the code
But if you don't want to use any text editor, you can use the Python programming shell
The Python shell allows programmers to run the Python language commands line by line
The following are some of the text editors that you can use with Python
Emacs
Emacs is a popular text editor that runs on Windows, Mac OS X, Linux, and even Android distributions
Gini
Gini is a cross-platform text editor that provides the most basic features of any IDE
It has Python syntax highlighting features such as auto indentation
Although it doesn't provide auto indentation after return and the break statements
Komodo Edit
Komodo Edit provides the following features
Auto indentation
Project and code navigation
Code folding
Auto completion
And snippets
Notepad++
Notepad++ is a basic text editor with few features that you can rely upon when programming in Python
It has the acceptable syntax highlighting but that is all it provides
SCITE
SCITE is a light, fast, and easy to learn text editor just like the Gini
Sublime Text
This has an outstanding selection of powerful features that includes multiple cursors, a flexible go-to anything, and a command palette that allows easy access to keyboard features
Inasmuch as the text editors will help you to write the Python codes, you'll still have to run them manually from the Python shell
In fact, when you use the text editor, you have to save the file using the .py extension and run the file from the Python shell
If you want to write complex Python scripts and run them at once, you'll need the idle
Let's explore the Python's idle
Python idle
Idle
Idle
Integrated Development and Learning Environment
Is an integrated development environment for the Python interpreter
It has been ported to the latest version of Python interpreter
In Linux distributions, it's packaged as an optional part of the Python package
Idle is intended to provide a simple IDE for accelerated development of Python programs
Among the features you'll get when you install idle are
Syntax highlighting
Autocompletion
Smart indentation
Integrated debugger with the stepping persistent breakpoints
And call stack visibility features
Idle has two basic types of windows
The shell window
And the editor window
The shell window provides you with capabilities of typing and running the Python codes on the Python shell
While the editor window allows you to capitalize on the idle features such as syntax highlighting, autocompletion, and smart indentation
I know you're wondering, how can I install the Python idle?
Good question
If you're using Debian-based Linux distribution systems such as Ubuntu
Open the terminal and type the following command at the command prompt
Pseudo apt-get install idle 3
And hit the enter key
You'll be prompted to provide the root password
Type in your root password, press the enter key, and wait for the installation process to complete
If you're using Windows OS, go to www.python.org
And download the latest version of Python idle
Select the appropriate version depending on the nature of your operating system
Once you've downloaded the app, open the file and follow the on-screen instructions to install Python idle
If you are a Mac user, go to www.python.org
And download the latest version of Python idle
Select the appropriate version depending on the nature of your operating system
Once you've downloaded the app, open the file and follow the on-screen instructions to install Python idle
If you are a Mac user, go to www.python.org
And download the latest version of Python idle
Select the appropriate version depending on the nature of your Mac system
Once you've downloaded the app, open the file and follow the on-screen instructions to install Python idle
So far, so good
We've now explored the basic features of Python language
It's now time to get started
Keep reading
Getting started with Python
To get started, you have to figure out how to launch the Python app
So, how can you launch Python?
It's simple
If you're a Windows user, go to Start, Programs, and click on Python
If you're a Mac user, launch the terminal and type in Python
And click on Python
If you're a Mac user, launch the terminal and type Python at the command prompt
Similarly, if you're a Linux user, simply open the terminal and type Python at the command prompt
Now that you've launched the Python, it's now time to begin coding
Let's now create our first program in Python
Follow these steps to write your first Python program
Open the Python shell
Write the Python language statements in the shell
Run the program
That's it! Isn't it simple?
Now, here's a quick way to see the programming process in action
Proceed and copy-paste the following code into your Python shell
Print
Open parentheses
Quotation marks
Hello space world exclamation point space
This space is space my space first space program
Quotation marks close parentheses
Run the program
What do you see as the output?
Well, the phrase
Hello world, this is my first program
Appears
Congratulations!
You've just written your first Python code
At this time, don't worry so much about the meaning of statements
I'll explain the technical details in the following sections
An overview of Python application
Now that you have executed your first Python program
What else do you need to know?
Well, it's now time to understand the vital components of any Python code
Including its structure
Structure of Python programs
Python programs have the following structure
Import sys
Def space main space open parentheses close parentheses colon
Main space open parentheses close parentheses
Open curly bracket
Program statements
Close curly bracket
As you can see from the above program structure
Python code should always start with the keyword import
Now, what are we importing?
Remember, Python language is object-oriented
Therefore, it has components of all the object-oriented programming languages
One such property is inheritance
The ability to inherit features of codes in Python
Allows programmers to reuse pieces of codes that had been written elsewhere
Technically speaking, the import statement tells the Python interpreter
To declare classes that have already been used in other Python packages
Without referring to their full package names
For instance, the statement
Import sys
Informs the interpreter to include all the system libraries such as print
Whenever the Python program is starting
What does the statement
Def space main space open parentheses close parentheses colon mean?
Whenever any Python program is loaded and run
The computer's memory, the random access memory
Contains the objects with function definitions
The function definitions provide the programmers with the capabilities of instructing the control unit
To place the function object into the appropriate section of the computer's memory
In other words, it's like instructing the control unit to check the main memory
And initialize the program that needs to be executed
The function objects in the memory can be specified using names
That's where the statement def space main space open parentheses close parentheses colon comes in
For example, the Python code below creates a function object and assigns it the name main
Def space main space open parentheses close parentheses colon
If len space open parentheses sys dot argv close parentheses equals equals 10 colon
Name equals sys dot argv open box bracket to close box bracket else colon
Name equals quotation my space world quotation print open parentheses quotation hello quotation close parentheses comma space name
In the above code, the Python interpreter will run all the function statements in the Python file
By placing the set of functions objects in the memory and linking each of them with the namespace
This will happen when the program is initialized with the import statement
But more fundamentally, what are the different elements of Python code?
Well, all Python programs have the following components
Documenting the program
Any statement in the program except the first that starts with the pound sign is treated as a command line or comment line
And will be ignored during execution
This will allow you to comment on sections of the code for proper documentation
Keywords
The keywords are instructions that the interpreter recognizes and understands
For instance, the word print in the earlier program is a keyword
In Python, there are two main types of keywords
The functions and the control keywords
Functions are simply verbs such as print that tell the interpreter what to do while the control keywords control the flow of execution
Examples of keywords are
And
DEL
From
Not
While
As
Elif
Global
Or
With
Assert
Else
If
Pass
Break
Class
Return
Def
For
Etc
It is a must for you to respect the keywords and not use them as normal names in your Python program
Modules
Python program is shipped with a large list of modules that increases its functionality
The modules will help you to organize your code in a manner that's easy to debug and control the code
Program statements
The program statements are sentences or instructions that tell the control unit to perform a given operation
Unlike most programming languages, the Python statements don't need a semicolon at the end
White space
The white spaces are a collective name given to tabs, spaces, and new lines and carriage returns
The Python language is strict on where the white space should be placed in the code
Escape sequences
The escape sequences are special characters used for output
For instance, the sequence backslash n in the program tells Python to output on a new line
There you have it
You're on the right track to becoming an expert in Python programming
In the next chapter, we explore more about Python programming by explaining variables and types
Chapter 3, Variables and Data Types
Are you ready to explore on variables and data types in Python?
Fantastic!
There's so much that goes on in the main memory of the computer whenever you run a program
Understanding the concept of variables and data types will help you to write efficient programs
So, let's jump in
To understand what a variable is, we need to define the term program
A program, like the one you wrote in the previous chapter, is simply a sequence of instructions, statements, that directs your computer to perform a particular task
For instance, the previous program printed the phrase, hello world, this is my first program, on the screen, when it was executed
But before you could see the output on the screen, some data had to be kept in computers memory
The use of data applies to all programming languages, Python included
Therefore, understanding the mechanisms of data management in the computer's memory is the first step towards developing robust, efficient, and powerful applications
But first, what exactly is a variable?
A variable can be conceived as a temporary storage location in the computer's main memory, and specifically, the random access memory
This temporary storage location is what will hold the data that you would like to use in the program
In other words, the variable location of memory that holds data whenever your program is executing
So, whenever you define a variable, you'll actually be reserving a temporary storage location in the computer's memory
Now, all the variables you define must have names, and an equivalent data type
A sort of classification of the variable that specifies the type of value the variable should hold
The data types help to specify what sort of mathematical, relational, or even logical operations you can apply to the variable without causing an error
Ideally, when you assign variables to data types, you can begin to store numbers, characters, and even constants in the computer's main memory
Because Python language is an oriented programming language, it is not statically typed
This means the interpreter regards every variable as an object
Therefore, you have to declare the variables before using them in your program
So, how can you declare variables in Python?
Good question
Python variables are usually declared by names or identifiers
Just like any other programming languages you have so far learned
The conventions for naming the variables must strictly be adhered to
Below are some naming conventions you should follow when declaring variables
All variable names should always begin with a letter A to Z and A to Z
Or an underscore
For instance, 9AGE is not a valid variable name
Special symbols shouldn't be used when declaring variable names
For instance, at sign name isn't allowed as a variable name
The maximum number of characters to use for your variable name shouldn't exceed 255
I know you're now asking, how can I assign specific values to variables in Python?
How to assign values to variables in Python?
To reserve a temporary memory location in the name of a variable, you don't have to use the explicit declaration like other programming languages
If you've had experience in other programming languages such as Pascal or C
I'm sure you know that declaring a variable explicitly before assigning any value is a must
In Python, the declaration of variables usually occurs automatically the moment you assign a value to it
We use the equal sign equal to assign values to variables
For instance, the statement AGE equals 10 automatically reserves a temporary storage location in memory space called age
And assigns 10 to it
It is also possible to assign a single value to several variables simultaneously
For instance, the statement below reserves temporary memory spaces for two variables
Namely, AGE and COUNT
And assigns them value 30
AGE comma COUNT equals 30
Data types that are supported in Python
Python language has different categories of data types that are used to define the storage methods and mathematical operations
Below are examples data types in Python language
Numbers, String, List, Tuple, Dictionary
Let's explore these data types in detail
Number 1. Numbers
The number data type stores numeric values
The number objects will automatically be initialized whenever you assign a specific value to the variable
For instance, the code illustrated below creates two variable objects
Age and COUNT
And assigns them the values 10 and 30 respectively
Age equals 10
Count equals 30
If you want to delete reference to the number object
You'll use the word del
Followed by the variable name you wish to delete
Consider the code below that deletes two variables
Age and COUNT
That have already been declared and used
Del
Age
Count
Python language supports four different categories of numbers
These are
Int
When used in a declaration it refers to signed integers
These include those whole numbers that range from 8 bits to 32 bits
Long
These are long integers
They can be represented either in octal and hexadecimal numbering notation
Float
These are floating real point values
They may range from 8 bits to 64 bits long
Complex
These are complex numbers
Below is an example Python code that uses numbered data types
Minum equals 10
Print
Open parentheses
Quotation marks
The number you have just typed is an integer
Colon
Percent sign
D
Quotation marks
Percent sign
Minum
Close parentheses
Number 2
Strings
Strings are stored as consecutive sets of characters in the computer's memory locations
Python language allows you to use either pair of single or double quotes when defining
the strings
Other subsets of string variable types can be specified using the slice operator
Open parentheses
Open box bracket
Close box bracket
And the open box bracket colon
Close box bracket
Close parentheses
With the indexes that range from 0 at the beginning of the string
The plus operator performs string concatenation joining of two or more strings
While the asterisk operator performs string repetition
Below is an example of a Python code that uses strings
My string
Equals
Quotation mark
Welcome to Python programming period
Quotation mark
Print
My string
White space
Pound sign
This statement prints the complete string colon
Quotation marks
Welcome to Python programming period
Quotation marks
Print
My string
Open box bracket
Zero
Close box bracket
White space
Pound sign
This statement prints out the first character of the string colon
Quotation marks
W
Quotation marks
Print
My string
Open box bracket
Two
Colon
Five
Close box bracket
White space
Pound sign
This statement prints characters beginning from the third to the fifth colon
Quotation marks
ICO
Quotation marks
Print
My string
Open box bracket
Three
Colon
Close box bracket
Pound sign
Print
String starting from the fourth character
Colon
Quotation marks
Welcome to Python programming period
Quotation marks
Print
My string
Asterisk
Two
White space
Pound sign
This statement prints the string two times
Quotation marks
Welcome to Python programming period quotation marks
Quotation marks
Welcome to Python programming period quotation marks
Print
Print
My string
Plus
Quotation marks
In Python quotation marks
Pound sign
This statement prints the concatenated string colon quotation marks
Welcome to Python programming in Python quotation marks
3
Lists
If you're familiar with arrays in C programming language then lists are no different
However, unlike arrays in C, Python lists can contain items that do not necessarily belong to the same data type
The list items are separated by commas and enclosed in square brackets
Lists are declared by providing their names and initializing them with specific data values
Here is an example
My lists equals
Square brackets
Quotation marks
Stars
Quotation marks
Comma
Quotation marks
JUPITER
Quotation marks
Comma
Quotation marks
Earth
Quotation marks
Comma
Quotation marks
Mars
You'll use the same notation that's provided in arrays.
For instance, my list is the first item in the list, which is stars.
My list is the third item in the list, which is earth.
My list is the sixth item in the list, which is Pluto.
Changing, adding, and removing elements in a list.
The methods insert, append, and extend can be used to modify the contents of the list.
The insert method requires that the index and the value to be added to the list are known
in advance.
For example, the Python code below shows how the insert method can be used to add an element
in a list at index 2.
The append method picks one or more list elements as an input and adds them to the existing
list.
Here's an example.
The other method used for adding elements to an existing list is the extend method.
Just like the append method, this method requires one or more values as an input.
However, unlike the append method, all the data elements are added as individual elements.
Here's an example.
My list.extend, open parentheses, square bracket, quotation mark, stars, quotation mark, comma,
quotation mark, meters, quotation mark, close square brackets, close parentheses.
The list can also be searched for values using an index method.
The index method should specify the value to be searched where the output is the index at
the location where the value has been kept.
Here's an example of a code that searches for the element Saturn in my list.
My list.index, open parentheses, quotation marks, earth, quotation marks, close parentheses.
The delete method is used to remove list items from a Python list.
Here's an example of Python code that removes an item, Saturn, from my list.
My list.remove, open parentheses, quotation marks, Saturn, quotation marks, close parentheses.
Organizing and sorting of list items.
Sorting of list items is handled by the sort, open parentheses, close parentheses, method.
The method sort, open parentheses, close parentheses, sorts list items using the compare function.
Below is the syntax of the sort, open parentheses, close parentheses, method.
List.sort, open parentheses, square brackets, f-u-n-c, square brackets, close parentheses.
The above method doesn't return any value but only reverses the given list items.
Below is an example of how you can sort the list.
My list.sort, open parentheses, close parentheses, print, open parentheses, quotation marks, the sorted list is, colon, quotation marks, comma, my list, close parentheses.
When you run the above program, it will produce the following output.
The sorted list is, colon, two, comma, 50, comma, 58, comma, 63, comma, 340, comma, 603.
Note the above function sorts the list items in ascending order.
How about sorting the list items in descending order?
We'll use the same sort method, but include the reverse function.
Here's the syntax.
Sort, open parentheses, reverse equals true, close parentheses.
Take a look at the example code below.
My list.sort, open parentheses, reverse equals true, close parentheses.
Print, open parentheses, quotation marks, the sorted list is, colon, quotation mark, comma, my list, close parentheses.
Now here is the output of the above code.
The sorted list is, colon, 603, 340, 63, 58, 50, 2.
Multi-dimensional lists in Python.
The lists we've described so far are one dimensional.
Multi-dimensional lists are simply lists that are contained within other lists.
Efficient programmers can use dictionaries, we'll explain dictionaries later, to define lists.
But if you're familiar with multi-dimensional arrays in programming languages such as C, you should not have any problem.
Consider the example below.
My list equals, open square brackets, open square brackets, 5, comma, 1,
closed square brackets, comma, open square brackets, 6, comma, 2,
closed square brackets, comma, open square brackets, 3, comma, 1,
closed square brackets, comma, open square brackets, 12, comma, 6,
12, comma, 6, closed square brackets, closed square Brackets.
Now, with nested lists, we can easily create a lookup table or row lengths that produce different rows with each row having a different
having a different number of list elements.
How do you go about it?
Well, you'll create an empty list and add other empty lists
to it using the append method.
This way, you'll have built a two by two multi-dimensional list.
Here's how you can go about it.
MyList equals open square bracket, close square bracket,
pound sign.
Define an empty list.
MyList.append open parentheses, open square bracket, close
square bracket, close parentheses, pound sign.
Append the empty lists in the first two indexes.
MyList.append open parentheses, open square bracket,
close square bracket, close parentheses.
MyList.append open parentheses, one, close parentheses, pound
sign.
Now to begin to add elements to the empty lists.
MyList.append open parentheses, two, close parentheses.
MyList .
MyList .
Print .
Here's how you'll display the top left element.
Print .
Here's how you'll display the entire list.
Number 4.
Tuples.
Python tuples are a number of values separated by commas.
But unlike the lists, where the elements and sizes of the lists can be changed, the tuples
must be enclosed within the parentheses and they can't be updated.
For instance, the Python code below creates a tuple known as months.
Months equals, open parentheses, quotation marks Jan, quotation marks, comma, quotation
marks Feb, quotation marks, comma, quotation marks Mar, quotation marks, comma, quotation
marks APR, quotation marks, comma, quotation marks May, quotation marks, comma, quotation
marks June, quotation marks, comma, quotation marks July, quotation marks, comma, quotation
marks AUG, quotation marks, comma, quotation marks SEPT, quotation marks, comma, quotation
marks OCT, quotation marks, comma, quotation marks NOV, quotation marks, comma, quotation
marks DEC, quotation marks, close parentheses.
Below is an example of Python code demonstrating the use of tuples.
Print months, pound sign, prints the complete tuple.
Print months, open square brackets, 0, close square brackets, white space, pound sign
prints first element of the tuple.
Print months, open square brackets, 1, colon, 3, close square brackets, white space, pound
sign prints elements starting from the second to the third.
Print months, open square bracket, 2, colon, close square bracket, white space, pound
sign prints elements starting from the third element.
Print months, asterisk, two, pound sign
Prints tuple two times
Print months, plus months, pound sign
Prints the concatenated tuple
Number five, dictionaries
A dictionary is a data structure that operates in a similar manner to the hash tables
The hash tables are simply an array of information with key-valued pairs
The Python dictionaries are associative arrays, or hashes
That have key-valued pairs where the dictionary key can take any Python data type
However, numbers or strings are the most common methods of defining the dictionary keys
However, the dictionary values can take any arbitrary Python object
Python dictionaries are enclosed by the curly brackets
And the values are assigned and accessed using the square brackets
Here's an example code
My dictionary equals open curly brackets, close curly brackets
My dictionary, open square brackets, quotation marks
One, quotation marks, close square brackets, equals
This is one
My dictionary, open square brackets, two, close square brackets, equals
This is two
Small dictionary, equals
Open curly brackets, quotation marks, name, quotation marks, colon
Quotation marks, Ronald Olson, quotation marks, comma
Quotation marks, code, quotation marks, colon
722-848386, comma
Quotation marks, DEPT, quotation marks, colon
Quotation marks, IT, quotation marks, close curly brackets
Here's an example, an illustration of Python dictionaries
Printmydictionary, open square brackets, quotation marks, one, quotation marks, close加油 brackets, pound
Prints the value for one, key
Printmydictionary, open square brackets, two, close square brackets, white space, pound sign
Prints the value for two, key
Printsmaldictionary, white space, pound sign
Print the complete dictionary
print small dictionary dot keys open parentheses close parentheses pound sign
prints all the keys now let's explore typecasting which is somehow related to variables and data
types types and casting in python typecasting allows python programmers to convert an entity
from one data type to another for instance you may want to convert a string data type such as
two thousand to a number type but why do you need typecasting in python you may want to take
advantage of certain properties of a particular object data type for instance you may declare a
string variable data type that has the operations of plus and asterisk as we have learned earlier in
our previous section on strings but you may want to apply number operations such as forward slash
and bar for you achieve numerical operations on such a data type you have to convert it or type
cast such a variable to a number to cast between the different data types you must specify the data
type name as the function there are several built-in functions that can help you to convert from one
data type to another examples of these functions are int open parentheses x open square brackets base
close square brackets close parentheses it converts the value x to an integer where
the base to find is a string or not long open parentheses x open square bracket base close square bracket
close parentheses it converts the value x to the long integer where the base specified is x a
string or knot float open parentheses x close parentheses it converts the value x to floating point number
Complex, open parentheses, real, open square bracket, IMAG, close square bracket, close parentheses
It produces a complex number
str, open parentheses, x, close parentheses
It converts the object x to string data type
eval, open parentheses, str, close parentheses
It evaluates the string and returns the object
tuple, open parentheses, x, close parentheses
It converts the value x to a tuple
list, open parentheses, x, close parentheses
It converts the value x to a list
set, open parentheses, x, close parentheses
It converts the value x to a set
dict, open parentheses, x, close parentheses
It converts the value x to a dictionary where x must be a sequence of the key value tuples
chr, open parentheses, x, close parentheses
It converts the integer to a character
It converts an integer to the Unicode character
It converts the single character to its integer value
It converts an integer to a hexadecimal string
It converts an integer to an octal string
Have a look at the example of the code below
What do you think will be the output?
A equals, quotation marks, 3000, close quotation marks
B equals, quotation marks, 2000, close quotation marks
Print, open parenthesis, X plus Y, close parenthesis
Print, int, open parenthesis, X, close parenthesis
Plus, int, open parenthesis, Y, close parenthesis
The output of the above code will be
3000, minus 2000, 4000
Can you explain why the output is like that?
Well, the first statement, print, X plus Y
Will display a concatenation of two strings
3000 and 2000
In the second statement, the X variable has been converted to integer data type
Similarly, the second variable has also been converted to integer data type
Thus, the statement, print, X plus Y prints the sum of X and Y, which is 4000
Are you ready for exercises?
Let's see!
Chapter 3, fun exercises
Exercise 1, write a Python program that accepts the base and height of the triangle as inputs
And compute the area
Exercise 2, write a Python program which gets from the keyboard which has made the first two
And the last two characters
If the length of the string is less than two, then the program should return a value
Otherwise, it should return an empty string
For instance, if you type quotation marks W3 resource quotation marks
The program should display quotation marks W3 CE quotation marks
And if you type W3, the program should display quotation marks W3 quotation marks
Exercise 3, write a Python program that displays a specified list after removing the 0th, 2nd, 4th, and 5th elements
For instance, if the sample list has the following elements
Open square bracket, quotation marks John, quotation marks comma
Quotation marks Peter, quotation marks comma
Quotation marks Sam, quotation marks comma
Quotation marks Tim, quotation marks comma
Quotation marks Janet, quotation marks comma
Quotation marks Dan, quotation marks
Close square brackets
The expected output will be
Peter, Tim
Exercise 4, write a Python program that concatenates following dictionaries
Into a new 1 dictionary
Dictionary 1 equals
Open curly brackets
1 colon 2 0 comma 4 colon 4 0
Close curly brackets
Dictionary 2 equals
Open curly brackets
6 colon 6 0 comma 8 colon 8 0
Close curly brackets
Dictionary 3 equals
Open curly brackets
1 0 colon 1 0 0 comma
1 2 colon 1 2 0
Close curly brackets
The expected result
Open curly brackets
2 colon 2 0 comma
4 colon 4 0 comma
6 colon 6 0 comma
8 colon 8 0 comma
1 0 colon 1 0 0 comma
1 2 colon 1 2 0
Close curly brackets
Exercise 5, write Python programs that sum all the items in the list
Exercise 6, what is the output of the following code?
From date time import date
First underscore date equals
Date open parenthesis
2 0 1 4 comma 7 comma 2
Close parenthesis
Last underscore date equals
Date open parenthesis
2 0 1 4 comma 7 comma 1 1
Close parenthesis
N equals last underscore date
Hyphen
First underscore date
Print open parenthesis
N dot D-A-Y-S
Close parenthesis
Solution for exercise 1
A triangle is any polygon that has three edges and three vertices
The code below illustrates how you can compute the area of the triangle
Base equals
I-N-T
Open parenthesis
Input
Open parenthesis
Quotation marks
Input the value of the base
Colon
Quotation marks
Close parenthesis
Close parenthesis
Pound sign
Enter the base of the triangle
Height equals
I-N-T
Open parenthesis
Input
Open parenthesis
Quotation marks
Input the value of the height
Colon
Quotation marks
Close parenthesis
Close parenthesis
Pound sign
Enter the height of the triangle
Area equals
Base
Asterisk
Height
Forward slash
Two
Pound sign
Formula for computing the area
Print
Open parenthesis
Quotation marks
If the area of the triangle is
Equals
Quotation marks
Comma
Area
Close parenthesis
Pound sign
Display the area of the triangle
Solution for exercise two
Import
Sys
Def
Main
Open parenthesis
Close parenthesis
Colon
Main
Open parenthesis
Close parenthesis
Open curly brackets
Def
Strings
Underscore
On both
Underscore
Ends
Open parenthesis
Str
Close parenthesis
Colon
If
Len
Open parenthesis
Str
Close parenthesis
Is less than two
Colon
Return
Quotation marks
Quotation marks
Return
Str
Open square brackets
Zero
Colon
Two
Close square brackets
Plus
Str
Open square brackets
Hyphen
Two
Colon
Close square brackets
Print
Open parenthesis
Strings
Underscore
On both
Underscore
Ends
Open parenthesis
Quotation marks
W3 resource
Quotation marks
Close parenthesis
Close parenthesis
Print
Open parenthesis
Strings
Underscore
On both
Underscore
Ends
Open parenthesis
Quotation marks
W3
Quotation marks
Close parenthesis
Closed parenthesis
Print
Open advisors
Strings
Underscore
On both
Underscore
Ends
Open parenthesis
Quotation marks
W
Quotation marks
Close parenthesis
Close parenthesis
Close curly brackets
Solution for exercise
Three
Import
Sys
People's underscore names equal
Open square brackets x4 open parenthesis i comma x close parenthesis in enumerate open parenthesis peoples underscore names close parenthesis if i not in open parenthesis 0 comma 4 comma 5 close parenthesis close square brackets print open parenthesis peoples underscore names close parenthesis close curly brackets solution for exercise 4 import sys def main open
parenthesis close parenthesis colon.
main open parenthesis close parenthesis open curly brackets.
Dictionary 1 equals open curly brackets 1 colon 2 0 comma 4 colon 4 0 close curly brackets.
Dictionary 2 equals open curly brackets 6 colon 6 0 comma 8 colon 8 0 close curly brackets.
Dictionary 3 equals open curly brackets 1 0 colon 1 0 0 comma 1 2 colon 1 2 0
close curly brackets. Dictionary 4 equals open open curly brackets close curly
brackets. For D in open parentheses dictionary 1 comma dictionary 2 comma
dictionary 3 close parentheses colon dictionary 4 dot update open parentheses
D, close parentheses. Print, open parentheses, dictionary 4, close parentheses, close curly
brackets. Solution for exercise 5. Def sum underscore of list, open parentheses, items,
close parentheses, colon, sum underscore of numbers equals 0. For n in items, colon,
sum underscore of numbers plus equals n. Return sum underscore of numbers. Print, open parentheses,
sum underscore of list, open parentheses, open square brackets, 1, 2, negative 8, close square
brackets, close parentheses, close parentheses. Solution for exercise 6. 9 days. We've come to
the end of the chapter on variables and types. Remember, practice makes perfect. Therefore,
you must master all the variables and data types and use the appropriate data types when
declaring variables to develop efficient Python programs. Chapter 4, Python Operators. Programming
operators are symbols you use to tell the interpreter to perform specific operations such as mathematical
operations. These operations can range from mathematical to relational or even to logical
operations. The Python language interpreter has rich inbuilt operators grouped into the
following categories. Arithmetic operators, relational operators, logical operators, bitwise
operators, assignment operators. Let's dive in and learn how to use these operators. Number
one, arithmetic operators. These operators perform arithmetic operations. Here are examples of Python's
arithmetic operators and their basic functions. Plus. It adds two operands. For instance, if a equals 300 and b
equals 100, then a plus b gives 400 as the output. Minus. It subtracts the second operand from the first
operand. For example, if a equals 30, zero, and b equals 100, then a minus b yields 200 as the output.
Asterisk. It multiplies two or more operands. For example, if a equals 50 and b equals 20,
then a asterisk b produces 1000 as an output. Forward slash. It divides the first operand by the second
operand. For example, if a equals 300 and b equals 200, then a forward slash b produces 1.5 as an output.
Percentage. It is a modulus operator. It displays the remainder of a number after performing an integer
division. If a equals 8 and b equals 3, then a percentage b yields 2 as the output.
Plus plus. It increases an integer value by 1. For instance, if a equals 10, then a plus plus produces 11.
Minus minus. It is the decrement operator. For example, if a equals 50, then a minus minus produces 49.
Number two. Relational operators. Relational operators perform comparisons between two or more operands.
Here are examples of relational operators and their functions. Equals equals. It checks whether the
values of the two operands are equal or not. If they are equal, then condition becomes true. Otherwise,
it is false. For instance, a equals equals b is only true if a equals 50 and b equals 50.
Exclamation point equals. It compares the values of the two operands to find out whether they are equal
or not. For instance, a exclamation point equals b is false if a equals 50 and b equals 50.
Greater than. It verifies whether the value of the left operand is greater than the value of the
operand on the right-hand side. Less than. It verifies whether the value of the left operand
is less than the value of the operand on the right-hand side. Greater than equal. It verifies
whether the value of the left operand is greater than or equal to the value of the operand on the
right-hand side. Less than equal. It checks whether the value of the left operand is less than or equal
to the value of the operand on the right-hand side. Number three. Logical operators.
Logical operators are used with the boolean or logical values.
Below are examples of logical operators and their functions.
Ampersand, ampersand, the logical AND operator.
If both the operands are not equal to zero, then the condition is true.
Otherwise, the condition is false.
Bar, bar, the logical OR operator.
If any of two operands is not equal to zero, then the output is true.
Exclamation point, the logical NOT operator.
It reverses the logical state of the initial operand.
Number four, bitwise operators.
The bitwise operators perform bit-by-bit operations in Python programming.
Here are examples of Python's bitwise operators and their functions.
Ampersand, the binary AND operator.
It copies a bit to the result if it exists in both the operands.
Bar, the binary OR operator.
It's used to copy a bit if it exists in either of the operands.
Carat, the binary XOR operator.
It's used to copy the bit if it is set in only one operand and not both the operators.
Less than, less than, the binary LEFT SHIFT operator.
It moves to the left side by a number of bits that are specified by the right operand.
Greater than, greater than, the binary RIGHT SHIFT operator.
It is used to move the right side by some bits that are specified by the right operand.
Number five, assignment operators.
Below are examples of assignment operators and their uses.
Equals.
It assigns values of the right side operands to the left side operand.
Plus equals.
It adds the right operand to left operand and assigns the output to the left operand.
Minus equals.
It subtracts the right operand to left operand and assigns the output to the left operand.
Asterisk equals. It multiplies the right operand and left operand and assigns the output to the
left operand. Forward slash equals. It divides the right operand and left operand and assigns
the output to the left operand. Ready for an exercise? Good, here you go. Open the Python
shell and copy, paste the Python code below, making sure to include every letter and symbol
correctly. Press the enter key to execute the file when you're done. Python code. Import
sys. Def main open parenthesis close parenthesis colon. Main open parenthesis close parenthesis.
Open curly bracket. A equals 10. D equals 10. B equals quotation marks. This program demonstrates
Python operators period close quotation marks. E equals quotation marks. This program demonstrates
Python operators period quotation marks. C equals open square bracket 1, 2, 3 close square
bracket. F equals open square bracket 1, 2, 3 close square bracket. Print open parenthesis A is not D
close parenthesis. Print open parenthesis B is E close parenthesis. Print open parenthesis C is F close
parentheses. Close parenthesis C is F close, close curly bracket. What do you see. Here's one more test.
Python code. X equals 10. N equals 12. Print open parenthesis quotation marks X greater than N is quotation marks
C comma X greater than N close parenthesis. Print open parenthesis quotation marks X less than N is quotation marks C
Friend, open parentheses, quotation marks, x equals equals n, is, quotation marks, comma, x equals equals n, close parentheses.
Print, open parentheses, quotation marks, x, exclamation point, equals n, is, quotation marks, comma, x, exclamation point, equals n, close parentheses.
Print x greater than equals n is, x greater than equals n, close parentheses.
Print x less than equal n is, x less than equal n, close parentheses.
Ready for exercises?
Chapter 4, Fun Exercises.
Exercise 7.
Write a Python program that checks to verify whether a specified value is contained in a group of data values.
For instance, if the test data is, open square bracket, 1, 20, 3, 4, close square bracket, and the specified value is 20, then the program should return true.
And if the test data is, open square bracket, 1, 20, 30, 4, close square bracket, and the specified value is 23, then the program should return false.
Exercise 8.
Write a Python program to add three given integers.
However, if two integer values are equal, then their equal sum will be set to zero.
Solution for Exercise 7.
Import sys.
Def main, open parentheses, close parentheses, colon.
Main, open parentheses, close parentheses.
Open curly brackets.
Def is underscore in group underscore member, open parentheses, group underscore data, comma v, close parentheses, colon.
For value in group underscore data, colon.
If v equals equals value, colon.
Return true.
Return false.
Print, open parentheses, is underscore in group underscore member, open parentheses, open square brackets, 100, comma, 7, comma, 56, comma, 73, close square brackets, comma, 70, close parentheses, close parentheses.
Print, open parentheses, is underscore in group underscore member, open parentheses, open square brackets, 76, comma, 81, comma, 65, close square brackets, comma, 7, close parentheses, close parentheses, close curly bracket.
Solution for Exercise 8.
Import sys.
Def main, open parentheses, close parentheses, colon.
Main, open parentheses, close parentheses.
Open curly bracket.
Def sum, open parentheses, open parentheses, a, comma, b, comma, c, close parentheses, colon.
If a equals equals b, or b equals equals c, or a equals equals c, colon, sum equals 0.
Else, sum equals a plus b plus c.
Return sum.
Print, open parentheses, sum, open parentheses, 20, comma, 2, comma, 4, close parentheses, close parentheses.
Print, open parentheses, sum, open parentheses, 30, comma, 20, comma, 20, close parentheses, close parentheses.
Print, open parentheses, sum, open parentheses, 40, comma, 40, comma, 40, close parentheses, close parentheses.
Print, open parentheses, sum, open parentheses, 10, comma, 20, comma, 30, close parentheses, close parentheses.
We've come to the end of Python Operators.
You're on your way to becoming a Python guru.
Keep up the good work.
Chapter 5. Decision-Making and Repetition Structures
The process of decision-making in any programming language is certainly necessary to control the flow of the program.
Besides allowing you to control the flow of the program, you'll also make decisions based on the user inputs or the results of the processing actions.
These decisions are solely based on principles of logic and the relational operators.
For example, if you want to compare two or more variables to determine which one is larger, then you'll be forced to use the relational operators.
On the other hand, repetition structures are necessary to specify the processes and instructions that are repetitive.
This means that some actions have to be processed until a certain condition has been met.
This has two main advantages.
First, you'll be in a position to use your variables in an efficient manner.
As I have mentioned earlier, data management is crucial for the successful development of efficient programs.
Therefore, instead of declaring so many variables in a code, a repetition structure can be designed to deal with that.
By doing so, you'll be minimizing the memory use, which will lead to efficient programs.
Second, and finally, you'll be in a position to organize program statements that are repetitive into a single block based on specific conditions.
This will help you to maintain your Python code in a manner that promotes debugging and testing.
Basically, there are five decision structures you should be aware of in Python programming.
These are if-else statements, for-loop, while-loop, break-and-continue, pass.
So, let's dive in and find out these decision-making structures.
Number one, if-else.
The simplest if-statement in Python programming language has the following syntax.
If boolean expression colon, statement one, statement two, ellipses, statement n.
From the syntax, you should note that the body of the if-else statement should always be specified by the indentation.
This should start with the first unindented line marks at the end of the statement.
If you're using an advanced text editor, such as the Python idle, you shouldn't worry because that will be well taken care of.
When using if-else statement, the non-zeroed values are interpreted as true, while null and zero will be interpreted as false.
Below is an illustration of Python code that tests if the average is greater than or equal to 70, and displays grade A.
My number equals float, open parentheses, input, open parentheses, quotation marks, enter any number from the keyboard, colon, quotation marks, close parentheses, close parentheses.
If number is greater than 70, colon, print, open parentheses, quotation marks, close parentheses.
The if-else statement will only be executed when the boolean expression is true.
In the above example, the program will only display grade A if the my number is greater than 7.
If my number is less than 70, then the statement will be skipped.
In some instances, if statement may be followed by an else statement that is optional.
When there's optional if-else statement, then the optional statement will be executed only when the boolean expression returns false.
Below is the syntax.
If boolean expression, colon, statement1, statement2, ellipses, statementn, else, colon, statement1, statement2, ellipses, statementn.
In this case, the program will evaluate the boolean expression and execute the body statements only when test condition is true.
However, if the boolean condition is false, then the body of the else will be executed.
Here's an example.
My number equals float, open parentheses, input, open parentheses, quotation marks, enter any positive number from the keyboard, colon, quotation marks, close parentheses, close parentheses.
If my number greater than 50, colon, print, open parentheses, quotation marks, past, quotation marks, close parentheses, else, colon.
Print, failed, if you want to specify multiple expressions, then you must use the elif statement, which is synonymous with else if nested statements in other languages.
If the boolean condition is false, then the program will check the boolean condition of the next elif block of statements, and the process goes on.
Here's illustration of Python code that demonstrates the elif.
My number equals float, open parentheses, input, open parentheses, quotation marks, type any number from the keyboard, colon, quotation marks, close parentheses, close parentheses.
If my number greater than 0, colon.
Print, open parentheses, quotation marks, the number you have entered is positive number, quotation marks, close parentheses.
Elif, my number equals equals zero, colon, print, open parentheses, quotation marks, close parentheses, colon, else, colon.
Print, open parentheses, quotation marks, the number you have entered is a negative number, quotation marks, close parentheses.
Ready for another test?
Well, open the Python shell and copy, paste the Python code below.
Make sure to include every letter and symbol correctly.
When you're done, execute the file.
Python code.
Import sys.
Def, main, open parentheses, close parentheses, colon.
Main, open parentheses, close parentheses.
Open curly bracket.
If average greater than equal to 70, colon.
Grade equals, quotation marks, a, period, quotation marks.
Elif, average greater than equal to 60, colon.
Grade equals, quotation marks, B, period, quotation marks.
Elif average greater than equal to 50, colon.
Grade equals, quotation marks, C, period, quotation marks.
Elif average greater than equal to 40, colon.
Grade equals, quotation marks, D, period, quotation marks.
colon grade equals quotation marks
f period quotation marks close curly bracket
number two for loop the for loop
iterates over a sequence that may have different data types such as the list
tuple and string it can also iterate any other objects that may be defined in
Python
below is the syntax for the loop for
val in sequence colon statement 1
statement 2 ellipses statement n
in the syntax above val defines the variable that takes the value of the
item that's contained in the sequence for each of the iterative process
the looping process will continue as long as the last item in the sequence has
not been reached
below is an example of the Python code that shows how the sum of all numbers
stored in a list can be obtained
my number equals open square bracket 10 comma 20 comma 30 comma 40 comma 50
comma 60 comma 70 comma 80 comma 90 comma 100 close square bracket
sum equals zero for val in numbers colon
sum equals sum plus val print open parentheses quotation marks the sum of ten
numbers in your list is quotation marks comma sum close parentheses
number three while loop the while loop loops over a block of statements only if the boolean
expression is true here's the syntax of the Python's while loop while boolean
expression colon statement one statement two ellipses statement n the boolean expression is
evaluated first if the condition is true the program statements in the body of the loop will be executed
after the first iteration the boolean condition is checked again
this process will continue until the boolean expression evaluates to false
below is an example of the Python code that prompts a user to enter n numbers from the
keyboard and sums them
x equals int open parentheses input open parentheses quotation marks enter any positive number n colon
quotation marks close parentheses close parentheses
total equals zero index equals one while index less than equal to n colon sum equals total plus index
index equals index plus one print open parentheses quotation marks the sum of the first n numbers is
quotation marks comma total close parentheses
number four break and continue there are some instances when you just want to end the current loop
for loop and the while loop or even the whole loop without first executing the boolean expression
in this case the break and continue statements changes the flow of a normal loop in Python
when you break a loop using the break statement control of the program will be transferred to the program
statements that are placed after the body of the loop
however if the statement that's being executed is inside the nested loop
then the break statement will end the innermost loop below is the syntax for break statement
break below is an example of a python code that uses the break statement
for val in quotation marks python programming comprehensive guide for programmers quotation marks colon
if val equals equals quotation marks e quotation marks colon
break
print open parentheses val close parentheses
print open parentheses quotation marks the program has reached the end of the string quotation marks
close parentheses
the continue statement is used to skip the rest of the code that is inside the loop for the current iteration
only in such a case the loop will not end but will continue with the next loop instruction
the syntax for continue is continue
here's an example of code that uses the continue statement in python
for val in quotation marks python programming comprehensive guide for programmers quotation marks colon
if val equals equals quotation marks e quotation marks colon
continue
print open parentheses val close parentheses
print open parentheses quotation marks
the program has reached the end of the string quotation marks close parentheses
number five pass the past statement is always treated as the null statement
why is the past statement important
well the python interpreter usually ignores the comments
but the past statements have to be executed
however nothing will happen when the past statement has been executed
in other words the past statement will act as the placeholder
for example if you have a loop that hasn't been implemented but you want to implement in the future
then you can use the past statement below is an example
def function open parentheses args close parentheses colon pass class banking system colon pass
let's see how you're faring on with the exercises
chapter five fun exercises exercise nine
write a python program that counts the number of even and odd numbers in a sequence of numbers
for instance if the sample sequence is open square bracket one comma two comma three comma four comma
five comma six comma seven comma eight comma nine comma ten comma eleven close square brackets
then the expected output will be number of even numbers five number of odd numbers six
exercise ten write a python program that creates a multiplication table from one to ten of an input number
for instance if the input number is eight then the expected output will be
input a number 68 8 times 1 equals 8 8 times 2 equals 16 8 times 3 equals 24 8 times 4 equals 32 8
times 5 equals 40 8 times 6 equals 48 8 times 7 equals 56 8 times 8 equals 64 8 times 9 equals 72 8 times 10 equals 80
to me
solution for exercise 6
import sys
def main open parenthesis close parenthesis colon
main open parenthesis close parenthesis
open curly brackets
mynumber equals
1 comma
2 comma
3 comma
4 comma
5 comma
6 comma
7 comma
8 comma
9 comma
10 comma
11
close parenthesis
count
underscore
of odd numbers equals 0
count underscore
of even numbers equals 0, for index in my number, colon, if not index, percent 2, colon,
count underscore of even numbers plus equals 1, else, colon, count underscore of odd numbers
plus equals 1, print, open parentheses, quotation marks, the number of even numbers are, colon,
quotation marks, comma, count underscore of even numbers, close parentheses, print, open
parentheses, the number of odd numbers are, colon, quotation marks, comma, count underscore
of odd numbers, close parentheses, close curly brackets.
Solution for exercise 10. Import sys. def main, open parentheses, close parentheses, colon,
main, open parentheses, close parentheses, open curly bracket. n equals int, open parentheses,
input, open parentheses, quotation marks, input, unnumber, colon, quotation marks, close
parentheses, close parentheses, pound sign. We're using the for loop to iterate 10 times.
For index in range, open parentheses, 1, comma, 11, close parentheses, colon, print, open parentheses,
n, comma, quotation marks, x, quotation marks, comma, index, comma, quotation marks, equals, quotation
marks, comma, n, asterisk, index, close parentheses, close curly brackets.
There you have it. Next up, we explore Python functions and modules.
Chapter 6, Python functions and modules. In this chapter, we explore the Python functions
and modules. By the end of this chapter, you will be in a position to define and use your
own Python functions and modules. But first, what exactly are functions and modules?
A function can be conceived as procedures or any section of the program that is independent
of the main program that produces an output. The function can help to map zero or more input
arguments and produce an output. The main objective of designing a function in a Python code is to
assist place program statements into a block that can perform related tasks. On the other hand,
a module objects that has arbitrarily named attributes bind a particular reference. In other words,
a module is a file that consists of Python code that breaks down the whole program into manageable
units. The whole essence of having modules is to promote modularization, where the program is broken
down to allow for easier debugging and testing. A module can have functions and classes, together
with its own variables. What about functions? Functions provide every useful insight whenever you want to
create constructs that organize your code. Any program that lacks functions may be difficult to manage
because it can be confusing. Debugging such programs may not be a walk in the park. In addition,
having functions in your program makes the code reusable. Here's syntax of Python functions.
Def name underscore of underscore the underscore function open parentheses parameters close
parentheses colon statement one statement two ellipses statement n. Below are the main components to note
about the function. Any function you declare must start with keyword def which marks the start of the
function header. The keyword def must be followed by the name of the function you're developing. The name of the
function should follow the conventional rules when naming identifiers. The arguments or parameters that
are passed to the function are optional. The colon marks the end of function header. The function body will be
composed of one or more valid program statements. The optional return statement returns a value for the function.
Below is an illustration of how you can specify a function in Python. Def greetings open parentheses my name close
parentheses colon print open parentheses quotation marks hello exclamation point quotation marks quotation marks
quotation marks quotation marks plus my name plus quotation marks period good evening exclamation point are you
okay question mark quotation marks close parentheses. Calling a function. When you define a function you can call it
from any other function any program or even from the Python shell. If you want to call a function simply type the name of the
function and specify the appropriate parameters. Below is an example of a Python code that calls the function that we had declared in
our previous section. Greeting open parentheses quotation marks Ronald Olson quotation marks close parentheses. Below is the output of the
program. Hello Ronald Olson good evening are you okay? Return values. In some instances you may want to exit from the function and return to the
location and return to the location and the program from where it was called. The return statement helps programmers to exit from a
function and go back to program location where the function was called. Below is the syntax of the return statement. Return open square brackets expression
underscore lists close square brackets. The return statement may or may not contain expressions. If it contains the expression list then the list will be
evaluated to find out which value to return. If there is no expression list in the statement then the
function will return a null object. Below is an illustration. Def absolute underscore value underscore of underscore a underscore number
open parentheses my number close parentheses colon if my number is greater than equal to 10 colon return my number else colon return minus my number
my number print open parentheses absolute underscore value underscore of underscore a underscore number open
parentheses 200 close parentheses close parentheses close parentheses print open parentheses absolute underscore value
underscore underscore of underscore a underscore number open parentheses minus 500 close parentheses close
parentheses close parancesies pass by reference and pass by value. All the function arguments, parameters, in Python language are passed by
parameters in Python language are passed by reference. What does this mean? It
simply means that the function output and its definition are tied together. If
you try to alter one value of a parameter within the function, then the
change will also be reflected back in the calling function. Take a look at the
following function def change underscore me open parentheses my list
close parentheses colon pound sign. This declares a function with the name
change underscore me with my list as arguments. Now suppose we want to append
some data on the list. We will use the following statement my list period append
open parentheses open square brackets 1 comma 2 comma 3 comma 4 close square
brackets close parentheses. To display the contents of the list we have to call the
function by its name as follows print open parentheses quotation marks the values
contained inside the function r colon quotation marks comma my list close
parentheses return. We can also call the function as follows my list equals open
square brackets 40 comma 10 comma 20 comma 50 close square brackets change underscore
me open parentheses my list close parentheses. If we want to display the
contents of the list we'll now use the following statement call by reference
because the calling function has also been changed. Print open parentheses
quotation marks the values outside the function are colon quotation marks comma my
list close parentheses. Types of functions. There are two basic categories of
functions in Python. Built-in functions user defined functions. Let's jump in and find out
the distinctions between built-in and user defined functions. Number one built-in
functions. These are functions that have already been built and ported into the
Python. For instance functions such as print input etc that we've been using so
far in our illustrations are examples of Python built-in functions. Other
examples of Python functions are abs div mod open static method all enumerate int
functions. Let's examine the special class of built-in functions, the input and output functions.
Number one input functions. Here are examples of input functions. A the raw
underscore input function. The raw underscore input open parentheses open square
bracket prompt close square bracket close parentheses function is used to read one
line from the standard input and returns it as a string to be stored in the main
memory. Here's an illustration. My string equals raw underscore input open
parentheses. Enter the data. Enter the data colon quotation marks close
parentheses. Print open parentheses quotation marks received input is colon
quotation marks comma my string close parentheses. B the input function. The input open
parentheses open square bracket prompt close square bracket close parentheses function is
similar to a raw underscore input function except that it assumes that the input is a valid Python
expression. Here's an illustration. My string equals input open parentheses
quotation marks enter the value of your input colon quotation marks close
parentheses semicolon. Print open parentheses quotation marks received input is colon quotation marks
comma my string close parentheses. C the open function. This function is used to open a file. It creates a file
object that can be utilized that can be utilized to call other support methods associated with it. Here's the syntax for the
function. File object equals open open parentheses file underscore name comma access underscore mode close
parentheses. Number two output functions. Below are examples of Python's output functions. A print function. It's used to display a
message on the computer screen. Here's an example. A equals quotation marks three thousand
quotation marks. B equals quotation marks two thousand quotation marks. Print open parentheses x plus y close
parentheses. Print int open parentheses x close parentheses plus int open parentheses y close parentheses.
Number two user defined functions. These are functions that are specified by users. The user defined functions are
important because of the following reasons. They allow you to break down a large code into small
segments that make your program easier to understand and debug. If you're working on a very large project,
then the user defined functions can help you to divide the workload into different functions. Below is an
example of a user defined function in action. Def absolute underscore value underscore of underscore a underscore number
open parentheses.
Open parentheses.
Absolute underscore value underscore of underscore a underscore number open parentheses 200 close
parentheses close parentheses.
print absolute underscore value underscore of underscore a underscore number open parentheses
minus 500 close parentheses close parentheses. Python modules. Python modules are essentially
reusable libraries of code that can be imported and used in a program. Python interpreter is
shipped with many standard library modules. The modules are imported using the import statement.
Here's an example. Import module underscore name. Here's an illustration. Import time. Print
time dot asc time open parentheses close parentheses. The above Python code imports the time module and
calls the function asc time which returns the current time as a string. The above code can also
be specified as follows. From time import asc time asc time open parentheses close parentheses.
In the example above we've imported the time function and used the asc time from the time
module. Writing modules. Writing Python modules is pretty simple. To create your own module simply
create a new dot py file with the module name. For instance the code below can be converted
into a module if it's saved with a dot py file extension. Import sys def main open parentheses
close parentheses close parentheses open curly bracket a equals 10. D equals 10. D equals 10. B equals
quotation marks this program demonstrates Python operators period quotation marks. E equals quotation marks
this program demonstrates Python operators period quotation marks. C equals open square brackets 1 comma 2 comma 3
close square bracket, f equals open square bracket, 1, 2, 3, close square bracket, print
open parentheses, a is not d, close parentheses, print open parentheses, b is e, close parentheses,
print open parentheses, c is f, close parentheses, close curly brackets. If the above file is saved
as myModule.py, then it can be imported and used in a new code as follows. Import myModule.
Don't give up on practicing. By adhering to the rules of Python functions and modules that you've
learned in this chapter, you'll be on your way to becoming a professional Python programmer.
Chapter 6. Fun Exercises. Exercise 11. Write a Python function that computes the factorial of a number
of a non-negative integer. The function should accept the number as an argument and display the
output. Exercise 12. Write a Python function which takes any number as a parameter and checks to
confirm whether the number is a prime number or not. Note that a prime number, any natural number
that is greater than 1, and no positive divisors other than 1 and itself. Solution for Exercise 11.
Import sys. Def main open parentheses, close parentheses, colon. Main open parentheses, close
parentheses, close parentheses. Open curly bracket. Def factorial, open parentheses, M, close
parentheses, colon. If M equals equals 0, colon. Return 1. Else, colon. Return M, asterisk, factorial,
open parentheses, M minus 1, close parentheses. N equals INT, open parentheses, input, open parentheses,
parentheses, quotation marks. Enter a number to compute its factorial, colon, quotation marks,
close parentheses, close parentheses, print, open parentheses, factorial, open parentheses,
M, close parentheses, close parentheses, close curly bracket. Solution for Exercise 12. Def test underscore
the prime number, open parentheses, M, close parentheses, colon. If open parentheses, M equals equals 1,
close parentheses colon, return false, elif open parentheses m equals equals 2 close
parentheses colon, return true, semicolon, else colon, for x in range open parentheses
2 comma m close parentheses colon, if open parentheses m percentage x equals equals 0
close parentheses colon, return false, return true, print open parentheses test underscore
the prime number open parentheses 12 close parentheses close parentheses.
Chapter 7. Python Classes. Even before we start to write the actual Python programs using classes,
we need to mention that Python language is an object-oriented programming language.
Therefore, it follows all the concepts of object-oriented programming languages.
As a Python programmer, you should be familiar with the basic concepts of object-oriented programming
and its application in Python programming. Of course, the most important concepts in any
object-oriented programming language are the class and the object. Therefore, to understand why Python
language is an object-oriented programming language, we need to start by defining classes and objects.
So, what is a class? What is a class? To define a class, let me use the concept of groupings to help
you understand it. Our brains can help us to group certain features. For instance, we know that lions,
human beings, cats, and dogs all belong to animals. In this case, animals are groupings of lions, human
beings, cats, and dogs. We can, therefore, say that lions, human beings, cats, and dogs belong to a
class of animals. But how does the brain allow us to arrive at this conclusion? It's because we know
that all animals have certain characteristics that you can't find in plants. In other words, our brain
creates abstractions and thinks hierarchically, based on the characteristics we have. In programming,
the functions can help us to abstract a sequence of operations that we would like to apply to members of
the same class. But we also need to abstract groupings of data that may be complex. That's
where the concept of classes comes in. Consider a social network site such as Facebook or Twitter.
Which data are you going to record for each member in the social media system? You must define a class
to help you manage such a system. A class will essentially be an extensible program code template
that you'll use to. A class will essentially be an extensible program code template that you'll use
to for creating objects, those members that have similar characteristics. The class will allow you to
provide initial values for different states, member variables, and implementations for the various
behaviors in the system. In other words, a class will serve as a template for creating or instantiating
specific objects within the program. Although each object is created from a single class, a single
class can be used to create multiple objects. In Python programming, classes are specified using the
following syntax. Class, name underscore of underscore the underscore class, open square bracket,
open parentheses, expr, open square brackets, comma, expr, close square brackets, asterisk, close
parentheses, close square bracket, colon, class members and methods. Any class you create must start with
the keyword class followed by a name, name of the class. The class must be defined based on the
attributes it supports. The class definition is an executable statement, and because of this,
it can be used wherever an executable statement occurs in a Python code. When it's executed, each
expression is evaluated and within a class where the class members and methods are executed in the new
local namespace. Basically, the class statements in the body of the class are assignments and the
function definitions. After execution class statements, the class name is bound to the new class in the
outer, which is the calling namespace, and the new namespace of the class definition is automatically
associated with the class object. Consider the code below. Class person, colon, pound sign, class
definition, person underscore name equals quotation marks, quotation marks, age equals zero, friends equals
open square brackets, close square brackets. The above code creates a class called person and
associates the characteristics of each person using the methods person underscore name, age, and friends.
Note that you can define any function within the class and set the variables to use. For instance,
you could design a function that displays the age of a person. In the above example, the variables have
been set outside the class. Objects. Once you define a class, you can begin to create instances of it.
Whatever you create will be called instance objects. I know you may be wondering, what are objects?
In the broadest term, an object can be regarded as a thing, tangible or intangible, that you can imagine.
Any program that's written in object-oriented programming style must consist of interacting objects.
Take the case of banking accounts program. You can specify different bank accounts ranging from current,
savings, or fixed deposit accounts. These accounts will be instances of objects that
have been derived from the class of bank accounts. Any object you instantiate must have data,
and the operations that manipulate the data. For instance, the savings account may contain the
account number, the account holder's details name, phone number, email address, etc., date opened,
the initial balance, current balance, and operations such as deposits and transfers. In our earlier code,
we can instantiate the objects of the class person using the example code below.
This creates a person object with person underscore name equals quotation marks quotation marks and age
equals zero. Print Ronald dot age pound sign prints zero. Ronald dot age equals 34. Ronald dot name equals
quotation marks. Ronald Olson quotation marks. Inheritance.
Inheritance is a powerful feature in any object-oriented programming. Basically, inheritance is the act of
creating a new class with little or no modifications from an already defined class. The new class will be
called the derived or child class, and the one from which it has inherited from is called the base class.
The derived class inherits all the features from the base class while adding new features to it.
This is the basis of code reuse in a programming language. Below is the syntax of the inheritance in Python.
Class, derived class, open parentheses, base class, close parentheses, colon,
body underscore of underscore derived underscore class. To demonstrate the use of inheritance,
look at the example below. Class, polygon, colon, def, underscore, i-n-i-t, underscore, open parentheses,
self, comma, n-o, underscore, of, underscore, sides, close parentheses, colon, self dot n equals n-o,
underscore, of, underscore, sides, underscore, polygon, self dot sides equals, open square brackets,
double, open parentheses, input, open parentheses, quotation marks, enter, side, quotation marks,
open parentheses, plus, st-r, open parentheses, plus,��, Wiedergames, lowest, serves, closed parentheses,
ciągn,4 index, south dot n, closed parentheses, closed square brackets, def, dispr, sides, open
parentheses, self, closed parentheses, colon, for independence, in range, open parentheses, self dot n,
close parentheses, colon. Print, open parentheses, quotation marks, side, quotation marks, comma,
index, plus one, comma, quotation marks, is, quotation marks, comma, self, dot, sides,
open square bracket, index, close square bracket, close parentheses. The above class has data
attributes that stores the number of sides, n, and size of each side as a list which are sides.
The method input sides takes in the magnitude of each side of the polygon, while the method
disp sides displays the values. Let's say you want to define a triangle class. We all know that a
triangle is a polygon with three sides. Therefore, we can define it as a class called triangle that
inherits from the polygon class. After inheritance, all the attributes which were available in class
polygon will be available in the new class triangle. Here's an illustration.
Class, triangle, open parentheses, polygon, close parentheses, colon.
Deth, underscore, init, underscore, open parentheses, self, close parentheses, colon.
Polygon, dot, underscore, init, underscore, open parentheses, self, comma, three, close parentheses.
def find underscore the underscore area open parenthesis self close parenthesis colon
x comma y comma z equals self dot sides pound sign calculate the perimeter of the triangle
s equals open parenthesis x plus y plus z close parenthesis area equals open parenthesis s
asterisk open parenthesis s minus x close parenthesis asterisk open parenthesis s minus y close parenthesis
asterisk open parenthesis S minus z close parenthesis close parenthesis asterisk
asterisk 0.5 print open parenthesis quotation marks the area of the triangle is percentage
sign 0.2 f quotation marks percentage sign area close parenthesis from the above example
we can see that even though we didn't specify the methods such as input sides or disp sides for class triangle,
you'll still be in a position to use them.
This means that if any attribute is not found within the class, the search proceeds to the base class.
This process repeats recursively.
Chapter 7. Fun Exercises
Exercise 13.
Write a Python program that finds a pair of elements, indices of two numbers,
from a given array where the sum equals a specific target number.
Exercise 14.
Write a Python class that finds the three elements that sum to zero from a set of m real numbers.
Solution for Exercise 13.
Class, my class, colon.
def, to sum underscore function, open parenthesis, self, num, comma, target, close parenthesis, colon.
lookup, equals, open curly bracket, close curly bracket,
for, index, comma, num, in enumerate, open parenthesis, num, close parenthesis, colon.
if target, minus, num, in lookup, colon.
return, open parenthesis, lookup, open square bracket, target, minus, num, close square bracket, plus one, comma, index, plus one, close parenthesis.
Lookup, open square bracket, num, close square bracket, equals, index.
Print, open parenthesis, quotation marks, index one, equals, percentage sign, d, comma, index 2, equals, percentage sign, d, quotation marks, percentage sign, my class, open parenthesis, close parenthesis, dot, to sum, underscore function.
Open parenthesis, open parenthesis, 20, comma, 10, comma, 10, comma, 70, comma, 100, comma, 60, comma, 70, close parenthesis, comma, 40, close parenthesis, close parenthesis.
Solution for Exercise 14
Solution for Exercise 14
Elif num open square bracket i close square bracket plus num open square bracket j close square bracket plus num open square bracket k close square bracket greater than 0 colon
k minus equals 1
else colon result dot append open parentheses open square bracket num open square bracket index close square bracket comma num open square bracket j close square bracket comma
while j less than k and num open square bracket k closed square bracket equals equals num open
square bracket j minus one closed square bracket colon j plus equals one while j less than k and
n-u-m open square bracket k close square bracket equals equals n-u-m open square bracket k plus
one close square bracket colon k minus equals one index plus equals one while index less than len
open parentheses n-u-m close parentheses minus two and n-u-m open square bracket i close square
bracket equals equals n-u-m open square bracket index minus one close square bracket colon index plus
equals one return result print open parentheses my class open parentheses close parentheses dot three
underscore sum open parentheses open square bracket five comma ten comma seven comma nine comma two
comma four comma eight comma ten close square bracket close parentheses close parentheses
chapter eight error handling and exceptions this chapter explores mechanisms for error handling and
exceptions until now we haven't dealt with the errors therefore if you encountered any errors in the
previous examples you may not have had an idea on how to deal with them are you ready there are two
main categories of programming errors these are syntax errors semantic errors let's dive in
and explore the differences between these errors number one syntax errors syntax errors sometimes
called the parsing errors are errors that emanate from the source code of the program because computer
programs must strictly adhere to grammar and the structure of the program any aspects of the code
that don't conform to the syntax will generate a syntax error for instance if you were to run the code
below you'll encounter a syntax error import sys def main open parentheses close parentheses colon
main open parentheses close parentheses open curly bracket a equals equals 10 d equals 10 b equals equals
quotation marks this program demonstrates python operators period quotation marks e equals equals quotation marks this program
underscore yes but the04 ponerils
constat комментар uz c identifications
reprogram demonstrates python operators period quotation marks c equals equals open square bracket one comma 2 comma 3 clear Open
square bracket f equals equal open square bracket open Square bracket open square bracket 1 comma 2 comma 3 close square
bracketties rows Q result国
Trans read open parentheses a is not d close parentheses print open parentheses B is each close parentheses jut
close parentheses, close curly bracket.
In the above example, the error is caused by the assignment operators,
equals equals, that have been used with variables b, e, and c.
Number two, semantic errors.
Semantic errors are those errors that arise from the compiler understanding and executing code,
but not according to the programmer's dictates.
If there is a semantic error in a program, the program will run successfully because the syntax is correct.
However, the program will not perform what it was intended to.
It will perform something else.
Identifying the semantic errors can be difficult,
because it requires you to work backward by re-looking at the output of the program.
Let's examine the common errors you'll encounter while programming in Python.
Number one, null error.
Null errors in a Python program results from dereferencing a null pointer.
The null errors are usually the result of one or more program assumptions
that are being violated in a Python program.
This can result from software reliability issues.
The null pointer errors take place when a pointer that has a null value
is used as though it pointed to a valid memory area.
For instance, the code below will result in a null error.
If open parentheses pointer 1, exclamation point, equals null, close parentheses, open curly bracket,
free open parentheses pointer 1, close parentheses, pointer 1, equals null, semicolon, close curly bracket.
Number two, zero division error.
The zero division error occurs when the second argument of the division operation or modulo operation is zero.
Number three, file not found error.
The file not found error occurs when you try to open a file that's not defined.
To correct this, you have to use the isfile method.
Take a look at the Python code below.
So, import OS, if open parentheses not os.path.is file, open parentheses, underscore Python, close parentheses, close parentheses, colon,
print, open parentheses, quotation mark, there's an error, colon, percentage sign, s, file not found, quotation mark, comma, percentage sign, error, close parentheses,
else, colon, print, open parentheses, quotation mark, setting up the environment, percentage, s, ellipses, quotation marks, percentage sign, Python, close parentheses.
Exceptions.
Even if a program's statement or expression is syntactically correct, it can generate an error when an attempt is made to run it.
The errors detected during the execution of the program are called exceptions.
Exceptions are not unconditionally fatal if they are handled properly.
Handling exceptions.
Exception handling is the act of responding to the occurrence that occurs during the computation of exceptions.
This requires changing the normal execution flow of the program.
This must be provided by very specialized programming language constructs.
In Python language, it is possible to write programs that handle the selected exceptions.
The following are examples of mechanisms of handling exceptions.
Number 1.
Try catch exception.
Take a look at the example below.
While true, colon, try, colon, a equals int, open parentheses, input, open parentheses, quotation marks,
please enter a positive number, colon, quotation marks, close parentheses, close parentheses.
Break, except, value error, colon, print, open parentheses, quotation marks, oops, exclamation point,
that was not a valid number, period.
Please try again later, quotation marks, close parentheses.
The above code asks the user for an input that is a valid integer,
but the program allows the user to interrupt the flow of the program.
The user-generated interruption will be signaled by the keyboard.
The try statement in the above code works as follows.
First, the try clause and the statements between the try and accept keywords will be executed.
If there's no exception, then accept clause will be skipped and running of the try statement will be completed.
If an exception occurs during the execution of the try clause, the rest of the clause statements will be skipped.
If the type matches the exception that's named after accept keyword, then accept clause will be executed after the try statement.
The try statement can have more than one accept clause that specifies handlers for the different exceptions.
In any exception, at most, one handler will be executed.
The handlers can only handle exceptions that occur in the corresponding try clause.
An accept clause can have multiple exception statements within the same try statement.
Here's an example.
Class, class, another underscore class, open parenthesis, my class, close parenthesis, colon.
Pass, class, class, D, open parenthesis, another underscore class, close parenthesis, colon.
Pass, for index in, open square bracket, my class, comma, another underscore class, comma, D, close square brackets, colon.
Try, colon.
Raise, index, open parenthesis, close parenthesis.
Accept, D, colon.
Print, open parenthesis, quotation marks, D, quotation marks, close parenthesis.
Accept, another underscore class, colon.
Print, open parenthesis, quotation marks, another underscore class, quotation marks, close parenthesis.
Accept, my class, colon.
Print, open parentheses, quotation marks, my class, quotation marks, close parentheses.
Chapter 9, Testing Your Code
This chapter explains the process of testing your Python code after you've completed the coding process.
By the end of the chapter, you'll be familiar with all the concepts regarding software testing
and how unit and integration testing are conducted.
Why is testing an important component of software development process?
Before you present your software to the client, you have to make sure all the customer's concerns have been well taken care of.
It's pointless to spend so much time developing a program that will be rejected by the customer.
Therefore, as a programmer, it is crucial to test all the important aspects of your software
to ensure it's not only running correctly, but has also addressed your client's concerns.
By testing the software, you'll be in a position to identify any mistakes or errors
and correct them before handing over the software to the customer.
The process of testing the software can occur at various stages of software development.
The process shouldn't be a one-off time.
It can get repeated at various stages until the final unit of the program is completed.
Types and Levels of Testing
Here are types and levels of testing.
White box testing
Black box testing
Unit testing
Integration testing
Regression testing
Alpha testing
Beta testing
Let's examine these testing strategies.
1. White box testing
In this type of testing, you have to access the source code of the software you want to test.
This means that you have to gain a complete access and control of the source code.
You must be knowledgeable about the programming language that has been used to implement the source code.
The main objective of white box testing is to derive the test data from the program logic code
so that any inconsistencies that are noted are corrected.
2. Black box testing
Black box testing can also be referred to as functional testing.
Unlike the white box testing, where the source code is examined for inconsistencies,
black box testing allows the programmer to access the output or outcome of the code
to confirm whether the developed software is addressing the customer concerns.
The final software product has to behave in a manner that satisfies the client.
3. Unit testing
In unit testing, each module or function of the software is conducted
to ensure it's working correctly according to the requirement specifications.
This level of testing is conducted to ensure of every module in the program.
It's usually done by programmers who are writing the test cases
for each of the scenarios in the modules of the software.
4. Regression testing
You are aware that the development of software may not be a discrete affair
where the program development isn't subjected to continuous changes.
In a typical programming environment, the program you'll be developing
will be subjected to continuous changes dictated by the clients.
Therefore, you should always ensure that each change made to the system is tested
to ensure it has satisfied your client.
As you manage the changes in the software, you should ensure that the existing software system
is essentially the one your clients proposed.
That is why regression testing is necessary.
The main objective of regression testing is to allow your software to remain intact
even after incorporating the changes suggested by your clients.
5. Integration testing
By unit testing for every module, the process of integration testing is made simpler.
When you correct the mistakes or bugs in every module, integration testing will become easier
because it entails incorporating all the modules that have been thoroughly tested.
Integration testing covers all the aspects of the modules in the program.
Integration testing is best suited to iterative software process models
as it saves time in the long run and helps to keep the project to acceptable budget.
This is because iterative process models allow for more feedback from the customer.
When the customer is more involved in the testing stages,
there are higher chances of the software being acceptable in the long run.
6. Alpha testing
The bottom line in any software development is to test the software and release it to customers.
The testing approaches we have examined earlier looks at testing from the point of view
of requirements and customer needs.
This means that testing is being conducted to ascertain that it is conforming to customer requirements and needs.
However, the final testing is still necessary before the product is released to customers.
Alpha testing is software testing that is conducted before the software system is released to the client.
It involves both the white box and black box testing.
Therefore, you'll be required to conduct the testing at two phases, white box and black box testing.
7. Beta testing
Beta testing is carried out to ensure the validity of the software is guaranteed.
It takes place in the alpha testing.
Essentially, the software product is released to a set of users and feedback is generated from them to ensure the validity of the program.
Therefore, beta testing can be conceived as testing that is carried out by a group of end users.
Having discussed the different types of testing strategies, let's now focus on the testing process itself.
Testing process
Before embarking on testing, it's important to communicate to all the developers who have been involved in the software.
They may not necessarily be programmers, but you have to ensure the client, the system analysts, programmers, and database developers have been involved.
The testing strategies can be conducted in parallel if you're worried about the delivery time of the software.
Next, you have to design a test plan.
I am now sure you're asking, what does a test plan look like?
Test plan
Well, a test plan is any strategy you have concerning how you would like to proceed with the testing process.
It's the guide that will be used throughout the testing process.
It will contain information such as
Development environment of the developed software
The hardware requirements
The operating system
The scope of the software
The limitation of testing
The testing type to be conducted
Next up, you'll proceed to the actual testing, which involves designing the test case.
But before you proceed to actual testing, you have to be at peace with all the requirements of the test plan.
Test case
A test case documents test scenario that you'll prepare to conduct the different levels of testing.
It must have the following components
A set of test data
The preconditions
The expected results
The post conditions
The report that is generated must factor in the errors or defects that have been identified between expected outcome and actual output in every module.
The test case report is then sent to developers for program refinement.
Use proper indentation, your code will fail to run if white space is present, use pound sign for comments, e.g., pound sign this is a comment.
It may be a test case
Basic python logics
Basic python logics
If
If condition, colon, pound sign, execute statements if condition is true.
Elif condition 2, pound sign, execute statements if condition 2 is true.
to, pound sign execute statements if condition2 is true. Else, colon, pound sign execute statements
if both conditions are false. While, while condition, pound sign keep running statements
until condition is false. For, for value in sequence, colon, pound sign execute statements
for each member of sequence. Pound sign, for example, comma, each item in a list, comma, etc.
Python variables and data types. String. String is a sequence of characters used to store
text. String creation. MyString equals, quotation marks, learn Python, exclamation point, quotation
marks. MyString equals, apostrophe, learn Python, exclamation point, apostrophe. String accessing.
MyString, open square bracket, six, close square bracket, returns, apostrophe, p, apostrophe.
String splitting. MyString.split, open parentheses, apostrophe, apostrophe, close parentheses,
returns, open square bracket, apostrophe, learn, apostrophe, comma, apostrophe, Python, exclamation
point, apostrophe, close square brackets. MyString.split, open parentheses, apostrophe,
h apostrophe closed parentheses returns open square bracket apostrophe learn pyt apostrophe
comma apostrophe on exclamation point apostrophe close square brackets string joining words equals
open square brackets apostrophe this apostrophe comma quotation marks is quotation marks comma
apostrophe weird apostrophe comma apostrophe but apostrophe comma apostrophe it apostrophe
comma quotation marks works exclamation point quotation marks close square bracket apostrophe
apostrophe period join open parentheses words close parentheses returns quotation marks this
is weird but it works exclamation point quotation marks apostrophe apostrophe period join open
parentheses words close parentheses returns quotation marks this is weird but it works
Exclamation point quotation marks
Apostrophe cool apostrophe period join open parentheses words close parentheses returns
Quotation marks this cool is cool weird cool but cool it cool works exclamation point quotation marks
String formatting
My string equals quotation marks kindly help to review quotation marks
Print quotation marks please percentage sign s exclamation point quotation marks percentage sign my string
Returns quotation marks please kindly help to review exclamation point quotation marks
Tuples
A tuple consists of values separated by commas
They are often used to manage ordered pairs and returning multiple values from a function
Tuple creation
Empty tuple equals open parentheses close parentheses
Single item tuple equals open parentheses quotation marks o-n-e quotation marks
Comma close parentheses pound sign note the comma
My tuple equals 20 comma 17 comma apostrophe t apostrophe
My tuple equals open parentheses 20 comma 17 comma apostrophe t apostrophe close parentheses
Tuple accessing
My tuple open square bracket 0 close square bracket returns 20
Dictionaries
A dictionary is a set of key value pairs
All keys in a dictionary are unique
Dictionary creation
My empty dictionary equals open curly bracket close curly bracket
My dictionary equals open curly bracket, quotation marks name, quotation marks, colon, quotation marks ronald olson, notation
Joan Thom blesse ronald olson, quotation marks, comma
Quotation marks sod, quotation marks, quote, quotation marks, grenbil, quotation marks, code, quotation marks
Quotation marks, clause, quotation marks,수가, quotation marks, quotation marks, quot You double
So here are you about 0, وب sea cat he says
722 848386, comma, quotation marks, DEPT, quotation marks, colon, quotation marks,
quotations marks, I.T., quotation marks, close curly bracket
Dictionary accessing
My dictionary open square bracket apostrophe name, apostrophe, close bracket adathon below the
bracket, apostrophe, name, apostrophe, close square bracket, returns Ronald Olson. Dictionary
deleting. Del, my dictionary, open square bracket, apostrophe, code, apostrophe, close
square bracket. Dictionary finding. My dictionary dot has underscore key, open parenthesis,
apostrophe, code, apostrophe, close parenthesis, returns false. My dictionary dot keys, open
parentheses, close parenthesis, returns, open square bracket, apostrophe, name, apostrophe,
comma, apostrophe, D-E-P-T, apostrophe, close square bracket. My dictionary dot items, open
parentheses, close parenthesis, returns, open square bracket, open parentheses, apostrophe,
name, apostrophe, comma, apostrophe, Ronald Olson, apostrophe, close parenthesis, comma,
open parentheses, apostrophe, D-E-P-T, apostrophe, comma, apostrophe, I-T, apostrophe, close parentheses, close square bracket.
Apostrophe, D-E-P-T, apostrophe, in my dictionary, returns true.
Apostrophe, phone number, apostrophe, in my dictionary, returns false.
Python list manipulation.
List creation.
My list equals, open square bracket, apostrophe, Virgo, apostrophe, comma, one, apostrophe, Taurus, apostrophe, comma, apostrophe, Capricorn, apostrophe, comma, three, close square bracket.
List accessing.
My list, open square bracket, zero, close square bracket, returns Virgo.
List slicing.
My list, open square bracket, one, colon, three, close square bracket, returns, open square bracket, one, comma, apostrophe, Taurus, apostrophe, close square bracket.
My list, open square bracket, two, colon, close square bracket, returns, open square bracket, apostrophe, Taurus, apostrophe, comma, apostrophe, Capricorn, apostrophe, comma, three, close square bracket.
MyList returns
MyList
MyList returns
ListLength
L-E-N, open parentheses, MyList, close parentheses, returns 5
ListSort
MyList.Sort, open parentheses, close parentheses, pound sign, no return value
Open square bracket 1,3, apostrophe Capricorn, apostrophe, comma, apostrophe Taurus, apostrophe, comma, apostrophe Virgo, apostrophe, close square bracket
ListAdd
MyList.Append, open parentheses, 2,1, close parentheses, pound sign, open square bracket, 1,3, apostrophe Capricorn, apostrophe, comma, apostrophe Taurus, apostrophe, comma, apostrophe Virgo, apostrophe, comma, 2,1, close square bracket
ListReturn and Remove
MyList.Pop, open parentheses, close parentheses, returns 21, pound sign, open square bracket, 1,3, apostrophe, comma, apostrophe Taurus, apostrophe, comma, apostrophe Virgo, apostrophe, close square bracket
MyList.Pop, open parentheses, 2, close parentheses, returns Capricorn, pound sign, open square bracket, 1,3, apostrophe Taurus, apostrophe, comma, apostrophe Virgo, apostrophe, close square bracket
ListReturn, open parentheses, listReturn, open parentheses, open parentheses, 2,6, close parentheses, pound sign, open square bracket, 1,3, 6, comma, apostrophe Taurus, apostrophe, comma, apostrophe Virgo, apostrophe, close square bracket
ListReturn, open parentheses, listReturn, open parentheses, open parentheses, apostrophe Taurus, apostrophe, close parentheses, pound sign, open square bracket, 1,3, comma, six, comma, apostrophe Virgo, apostrophe, close square bracket
ListConcatenation
MyList, plus, open square bracket, 9, close square bracket, returns, open square bracket, 1, comma, 3, comma, six, comma, apostrophe Virgo, apostrophe, comma, 9, close square bracket
ListFinding
QuotationMarks, Virgo, quotation marks, in MyList, returns True
FilesManipulation
OpenFile
MyFile equals open, open parentheses, quotation marks, data directory, forward slash, MyFileName.txt, quotation marks, close parentheses
Take note of the forward slash, open function has read-only permission
AccessFile
MyFile.read, open parentheses, close parentheses, pound sign, reads entire file into one string
MyFile.readLine, open parentheses, close parentheses, pound sign, reads one line of a file
MyFile.readLine, open parentheses, close parentheses, pound sign, reads entire file into list of strings, one per line
For each line in MyFile, colon, pound sign, step through lines in a file
Resources
Web Development
Python Standard Libraries and Package Index
Module
Mechanize
Framework
Django, pylons
Microframework
Flask, bottle
Software Development
Scones, build.apache, gump, roundup
Advanced Content Management
Plone, Django CMS
Scientific and Numeric Analysis
SciPy, Panda, IPython
Desktop GUIs
WX Widgets
WX Widgets
Kivi
Qt
Platform Specific
GTK Plus
Home Automation
Home Assistant
OpenHAB
Amazing Things to Do with Python
Everyday Life
Daily Challenge
Free Tutorials
Free Tutorials
Ed œve
T
Full-stack web development from Hong Kong University of Science and Technology
Intermediate Python course of data analysis and visualization
Conclusion
I know that programming isn't a walk in the park for most students.
Truth be told, I also had the same mentality.
But I can guarantee you that this mentality won't get you anywhere.
I had to learn the hard way and discard this mentality.
That's why I'm a professional Python programmer.
You have to take a positive approach and start from some point.
I'm glad that you've taken the first step.
The next step is putting in a lot of practice.
Remember, the rule of thumb in learning any programming language, Python included,
is practice and having a positive attitude.
I'm also glad that you've chosen the Python language.
There's no doubt about the power of Python programming language.
It's a fact that Python programming language has overtaken
the most popular object-oriented programming languages,
such as Java, C++, Perl, and Ruby in recent times.
Do you know that Python is often preferred over other languages,
such as C++ and Java, because of three things?
Pseudo-code-like syntax, dynamic typing, and has an interpreter?
And the cool thing is it integrates well with C++.
Therefore, you made the right choice to specialize in Python language.
I can assure you that you won't regret it.
Besides mastering the core concepts of the language,
you're now in a position to learn virtually any object-oriented programming language.
Do you have any questions regarding Python language?
Share your concerns with us.
About the author.
Ronald Olson goes crazy when the latest technology and innovative gadgets are launched.
His favorite sites are Kickstarter and Indiegogo.
He is an entrepreneur, a part-time IT lecturer, and an author.
As a child, Ronald was curious why his dad was always hiding behind the enormous monitor.
He started to ask questions on how a program works.
His keen interest did not go unnoticed by his dad.
Ronald received his first C++ programming book as a Christmas gift from his dad.
It is his first experience with coding, and it wasn't easy for him.
It was a tricky and complex journey.
The content was too technical and boring for him.
Ronald did not give up, and kept practicing with some guidance along the way from his dad.
He created his first calculator program in 2001.
It was his proud Eureka moment.
Fast forward.
Ronald feels that programming books should not be complex and boring.
It should be easy and fun.
With years of knowledge and experience, Ronald is able to simplify the technicalities with
easy-to-understand content.
He likes to add elements of fun and personal touches to his programming books for beginners
to learn to code easily.
In his spare time, Ronald likes to surf and work on his app development in a cafe while enjoying
his Frappuccino.
Did you like this book?
If you would like to read more great books like this one, why not subscribe to our website
and receive lifetime updates on all our latest promotions, upcoming books, and new book releases,
and free books or gifts that we occasionally pamper our loyal members?
check out Ronald's other proud works below if you didn't get a chance, or get the latest
updates by following Ronald at
Thanks for reading.
I hope you have enjoyed the book and learned the basics of Python programming.
Please add a short review on Amazon and let me know what your thoughts.
Thanks, Ronald.
AUVA Press
We would like to thank you again for reading this book.
Lots of effort, planning, and time we're committed to ensure that you are receiving the best possible
information with as much value as possible.
We hope you have unlocked the values from this book.
If you feel that you have benefited and find that this book is helpful, we would like to ask
for a small favor.
Please kindly leave a positive review on Amazon or your favorite social media.
Your review is appreciated and will go a long way to motivate us in producing more quality books
for your reading pleasure and needs.
Audible hopes you have enjoyed this program.
