This is Audible.
C-Sharp for Beginners, a step-by-step guide to learn C-Sharp, Microsoft's popular programming
language.
Written by Julian James McKinnon.
Narrated by Ivan Basinius.
Introduction.
Congratulations on purchasing C-Sharp for Beginners, and thank you for doing so.
The following chapters will discuss all of the things that you need to know in order
to get started with the C-Sharp language.
There are a lot of different parts that come with this language, and being able to set it
up well and ensure that you will be able to write some strong and powerful codes in the
process is going to be a critical part of the whole process.
To start out our guidebook, we're going to take a closer look at what the C-Sharp language
is all about.
We will talk about the benefits of working with this language, take a look at some of
the software that we need to use to make this coding language work, and even look at some
of the steps that we can take to write out our very first code in this language.
We will also look at this part so that we can learn how to set up the C-Sharp environment
with all of the different parts that we need to make it happen.
When we are going through with this kind of introduction, we will move on to some of the
many parts that come with the C-Sharp language, and we will learn how we can utilize them for
some of our own needs.
We will take a look at a few different options, including how to work with the C-Sharp variables,
the importance, the different types, and the operators in this language, and even how to
go through and create some of our own conditional statements, which will ensure that our programs
are able to make their own decisions, even if we are not there to help guide them with
every possible input.
From there, we are going to spend some time looking at the steps that you can take to create
your own objects and define your own classes.
Both of these are important topics when it comes to working with an OOP language like C-Sharp,
and we are going to spend our time exploring how to work with both and how they work together,
including some codes to get it all done.
Another neat thing that we are going to be able to do inside of this language, and that
we will spend some time on in this guidebook, is creating some of the loops that are necessary.
There are a wide variety of loops available, and we will discuss many of them, but they
all help us to reduce the amount of space that our code takes up, and can save a lot of time,
and hold a bunch of information inside of a small amount of code.
We can then end this guidebook with a look at a few other important topics.
These will include a look at the strings, the lists, and arrays that are a big part of
the code that you want to write as well.
These may seem like they are the same or very similar on the outside, but the more that you
work with coding, the better you will need to understand them.
Then we can close out the discussion with a look at some of the best tips and tricks that
a beginner programmer can use to help them see success with the C Sharp language overall.
There are a lot of great options out there when it comes to coding languages that we are
able to use, but none of them are going to provide us with the best frameworks, the best
power, and all of the amazing features like we are going to see when it comes to using the
C Sharp language.
And this guidebook took the time to explore more about this and how we are able to utilize
it for our goals as well.
When you are ready to do more with the C Sharp language and you want to get started right
away, make sure to check out this guidebook to help you out.
There are plenty of books on this subject on the market, so thanks again for choosing this
one.
Every effort was made to ensure that it is full of as much useful information as possible,
so please enjoy it.
Chapter 1 What is C Sharp?
One of the neat things that you will enjoy when it comes to programming and all of the
things that you can do with it is that there are actually quite a few different programming
languages to choose from.
Each has been designed to handle a different kind of coding need, which can allow us to
really specialize in the things that are the most important for us for our projects and
for our needs.
But one of the coding languages that we need to spend some time on in this guidebook is
known as C Sharp.
Most people who are looking to get into coding, but have never done it in the past at all, will
find that it is easy to be worried about the whole process when it is time for them to
learn something new.
They know that coding is useful and can benefit them in a whole host of manners, but then they
are worried that it is going to be too hard.
They could use it to create their own applications, their own websites and programs, and it can even
be the key that they need to open up some new doors professionally.
But because of all the new options that are available when they work with this process,
they are worried that it will be too hard to learn the code.
If you let the fear and the worry take over, and you do not take the necessary time to learn
one of these new languages, well then, of course, the programming process and the steps that
are needed to work on it are going to be pretty difficult for you to handle.
However, when it comes to finding a good language that you are able to work with, such as the
simplicity and the great features of the C Sharp language, you will find that it is going
to be so much easier to handle all of your projects, whether you have learned how to do
some programming in the past, or if this is your first step into the process.
With this in mind, it is time for us to dive in a little bit deeper and learn some more
about what is involved with the C Sharp process, what we are able to do with this language that
is so much better than some of the other options and so much more.
Why learn how to use C Sharp?
Well, the first thing that we need to take a look at here is why we would want to learn
how to work with the C Sharp language.
There are a lot of other coding and programming languages out there that we can spend our time
on, and many of them can provide us with the benefits and more that we need.
So then, why would we want to take the time to learn more about C Sharp and how it can work
for our needs as well?
As we mentioned a bit before, there are a ton of other coding and programming languages that
we are able to pick out from, and each of them will work in a different manner and provide
us with some different benefits along the way.
Figuring out which one is going to be the right one for us is sometimes a bit of a challenge.
Some coders will pick out one based on how easy it looks, and others may decide to learn
one because it is able to handle the specific tasks that they are looking for.
But you will find that no matter what your objective with coding is in the first place, working
with the C Sharp language is going to provide you with some benefits, ones that we are going
to explore in this section.
Even though you are someone who is just beginning, knowing some of these benefits are going to
help us to have more confidence in the coding language, and you will find that this is going
to help us to really make some amazing programs and applications in the process.
Some of the benefits that we are going to see when it comes to the C Sharp language includes,
number one, the library with C Sharp is larger than many other libraries, which gives you
a lot more possibilities in the process.
As a beginner, there are going to be a ton of parts of your code that may not come as easily
as you would like without some practice.
The good news is that the C Sharp library is going to provide you some of the help that
you need.
You are able to add in the necessary functions to the code without a ton of hassle in the
process.
You are even able to use them in a manner to make some changes to ensure that your coding
is going to work in the manner that you want.
Number two, it will get rid of your functions for you automatically.
When you do some of your work with other coding languages, you will be the one responsible
for removing the functions when they are all done, all on your own.
This can be time consuming and a big hassle, especially if you end up missing a few of them.
One of the benefits that you will see with the C Sharp language is that it is actually going
to handle this work for you, making the whole process easier overall.
Number three, the C Sharp language is an easy one to learn how to use for beginners.
In fact, this is the language that most would consider the easiest out of all to learn how to code with.
While there are going to be a few parts that add in some more complications to the mix, for
the most part, you will find that you can recognize and use the different parts of the C Sharp language
with relative ease.
Number four, the C Sharp language was originally designed to work with Windows, but it can also work
on some of the other platforms that you decide as well.
This language is going to work well with Linux, Mac, and Windows as long as you make sure to
download the .NET framework with it as well.
Windows is often the preferred method to use with this language, since it comes with an
additional product and features that help beginners use this language.
So if you are still uncertain about the operating system that you want to use, that would be
the safe way to go.
Number five, the .NET framework is going to be your friend in this whole process and can
make coding easier.
This is going to be a program that is readily available on the Windows computer systems,
so you will not need to do additional work to get this one.
However, it is also easy to install this on any other operating system, so that should not
be a problem at all.
Number six, the C Sharp language is going to share a lot of similarities to the C++ and the
C languages.
This is going to make it a lot easier for us to learn how to do the programming and some
of the basics if you already know how to do some coding with this program.
Even if you choose to just go with this language and not spread out to some of the others, you
will find that the C Sharp language has all of the power that you need to get the codes
and the programs done.
How to get started.
Now that we know a bit more about some of the benefits that come with the C Sharp language,
it is time for us to take a look at some of the steps that are needed to get started.
One of the first things that we need to check for before doing any coding is whether we have
the .NET framework that we were talking about before, because this will be the environment where
you need to write out your own codes.
You should already have a kit for development that is found on a computer holding Windows
if you are using that.
Starting with the Windows Vista version of the Windows operating system family, this is going
to be a necessary framework to use, so you should already find that the .NET framework
is on your computer as long as you are up to that operating system or newer.
You will not need to download it since it is unlikely that your computer has an older system
on it at this point of time.
However, if you are going through this process and you find that your Windows computer does
not have the .NET framework, or you are working with another operating system and it doesn't
automatically come with this framework, then it is time to get to work.
So for Mac and Linux, the Mono project is going to be a bit easier to use and will work on these
systems better than the .NET framework.
You can still find this at the Microsoft Store, then just follow the instructions to get it to
download well for you.
You can also visit their website at www.monoproject.com to get the download that is needed.
With the right framework in place, it is time for us to get started on some of the other things
that we need to do with the C Sharp language.
Assuming at this point that you have gone through and done all of the downloading that is necessary
for the frameworks and the programs that you really need, or you found that they were already
on your system, it is time for us to get to work on using that C Sharp language.
When we do some of this work on our Windows computer, you will find that the C Sharp language
is a simple one to work with.
The reason for this is that the Windows operating system is going to come compatible with our
.NET framework automatically.
And when we combine this with the fact that the C Sharp language is a simple and flexible
one to learn how to use, you can catch on to some of the codings in no time.
All of this is going to be there to help you while providing you with the necessary power
to keep all of your codes strong.
For someone who is brand new to all of the ideas that we are talking about here, when
it comes to coding and programming, you will find that this language gives us the ease of
use necessary while still providing us with all of the power to get our codes done.
Similar to what you will find when you work with many of the other coding languages out
there, including options like Java, you will find that C Sharp is not going to support
things like code pointers.
And this is also not one of the languages that are able to support a process that is
known as multiple inheritances.
It is important that we remember some of this because they are things that some other coding
languages can handle, and you don't want to be surprised by the lack of this later on.
You will find, though, that instead of offering some of these options, the C Sharp language
is going to provide you with a few other options, including type checking and memory collection.
There are other important and powerful features that are very noticeable from the C++ language
that you can add to some of your codes based on what we would like to accomplish.
There are a lot of parts that we are able to utilize when it comes to working in the C Sharp
language.
So let's dive into some of the actual codings and learn how this works so that we can see
some of these parts in action.
Writing out a C Sharp program.
With some of that background behind us, it is time for us to go through and actually see
how we are able to write out our first program in C Sharp.
This is the part that you have been waiting for.
We do not want to just hear a bunch of words about the language and nothing else, like
no actionable steps.
But that is why we are going to spend our time in this section actually writing out one
of the codes that we want to use in C Sharp.
So to get started with writing this code, the first thing that we need to accomplish is
opening up our text editor so that we can get the C Sharp language set up and ready to
go.
If you are doing this on a device with Windows on it, then you just need to open up the Notepad
to start.
There are other options that you can choose from too, so make your decision before you
work on the code and then get it installed and ready to go on your computer.
Once you have had a chance to open up your chosen editor, whether you are working with Notepad
or another option, it is time to type in the following code to gain some of the practice
that is necessary here.
So first line, CLASS, FIRST PROGRAM, open bracket.
Next line, STATIC, VOID, MAIN, open close parenthesis.
Next line, open bracket.
Next line, console dot write line, all with capital letters at the beginning of the words, open parenthesis,
quotation mark, using, space, C Sharp is fun, quotation mark, close parenthesis, semicolon.
Next line, close bracket, another line, close bracket.
Now you can access the command prompt and type, CSC in small letters, FIRST PROGRAMS.CS, FIRST
and PROGRAM CAPITALS.
After you issue this command, the compiler for C Sharp will process this file and then
create a .exe file in the same location as your code.
For example, if you save the original file on the desktop, you should see a new program
come up called FIRST PROGRAM.EE, all in quotation marks, right in the same place.
If there is an error in the code that you wrote, you will see an error message come up.
Now you can run this application by entering, quotation mark, FIRST PROGRAM.EXE, quotation mark,
into the command prompt.
If everything else was done correctly, you should see that the command prompt will display the
message, quotation, using C Sharp is fun, quotation.
After you have had a chance to work with this product, it is time for us to actually take
a bit of time and analyze the program and how it is supposed to work.
With the code that we worked on a bit above, you can see that it is actually a simple process
to work with.
But even with all of that simplicity, we are able to find that there are a variety of parts
and aspects of coding that had to come together to make this one work.
Some of the most important parts of the code above that we need to focus on now will include
Number 1.
Taking a look at the first line.
This is the spot where we need to include a good identifier and a keyword.
The keyword is going to be the main word that we find in the code that has a special
function and can tell the compiler what action to take.
With a keyword that is in our example, we are telling the compiler to create a new class
for the program.
The identifier is then going to be in charge of listing out the variable, the class, and
the method.
In that example, we are using one that is known as First Program.
Number 2.
Then we can move on to the third line in the whole thing.
This is where we are going to denote our main function.
This is going to be the starting point of our application on the computer.
When we have this, the program will be able to start by executing this kind of method,
regardless of where you decided to place it in your code.
There will then be two words that are able to work in this method, including the void
and the static.
These will then help us to determine what object is going to be found in the code.
Number 3.
Now we can skip to the fifth line.
This is the final main part that we are going to see within the code that we wrote above.
This is a line where we are able to write out some kind of message that should show up on
the computer screen once you have executed the program.
The method that we are going to use here is the WriteLineOpenCloseParenthesis method so
that the compiler knows that it is supposed to show the statement you're at in.
In addition to some of the different topics that we spend our time talking about above, there
were also some braces that showed up in the code along the way.
These are going to also have some importance to the code that we want to write, because
they are responsible for telling our computer that there are a lot of blocks of code that
need to be separated throughout, and will help us to keep all of the parts nice and organized
as we go along the way.
Chapter 2.
How to set up the C-sharp language.
While we did take some time to look at how to write some code in the C-sharp language in
the chapter above, we did get a little bit ahead of ourselves there.
Now it is time to back up the process a little bit and look at some of the basics that we need
to know in order to learn how to set up the C-sharp language completely so that it can work
on our computers.
We will also take a look at how to work with the .NET Core and Visual Studio and how these
are going to combine together well on our program to give us the best results.
You will find in this process that when you are able to use the C-sharp language that we
are talking about here with the Visual Studio that we will introduce later, it is going to
provide us with all the necessary editing experience that we really need in order to make things
work in the proper manner.
When we are able to add all of these features and benefits together, with some good support
that is present in the C-sharp IntelliSense, which is going to be what we use when writing
out smart code, and some help with the process of debugging, and you will be off to a good
start when it is time to write out our own codes.
Along the way, you will find that the C-sharp language and some of the tools that are necessary
to make it work are already found on a computer that has the Windows system on it.
This is a language that comes hand in hand with Windows, which is going to make things
easier if you already have that system and plan to use it.
The great news is that this language is also able to work with the other two main operating
systems, but keep in mind it is going to take some extra work to get it over there, and
sometimes the number of features you get when using C-sharp on Mac or Linux will be limited.
However, even if your goal is to do the C-sharp language on a Windows computer, it is important
to go through the necessary steps in order to get Visual Studio installed with C-sharp.
This Microsoft Visual Studio is going to be one of the options that you have for an integrated
development environment or an IDE, and it is already there from Microsoft for us to use.
It is often the best one to choose when you want to use the C-sharp for programming.
You also have to go through and do quite a bit of work in order to get all of the parts built
up and ready to go for your program.
And you will find that even when it comes to the .NET platform, Visual Studio is going
to be able to help.
It is going to be the one-stop shop that you need for the applications that we are hoping
to build up with this platform and this language, so it is worth our time to look into it a little
bit more.
With the help of Visual Studio, it is going to be a lot easier for us to get our applications
to create, to run, and go through the process of debugging as needed.
There are a few different types of applications that we are able to focus on here, including
the forms-based and web-based, and they will all be options to develop on your IDE when you
are ready.
And the program of Visual Studio will be able to give us each and every feature that we
need to get this part done.
With all of this information in mind, we need to take some time to look at the different steps
that are necessary when we want to download and then install the Visual Studio IDE and
use it for our needs.
When we get done with this installation, the IDE will be ready to go to get all of our programming
needs done.
The simple steps that we are able to use to install the IDE will include
1.
You need to visit the Visual Studio website in order to download all of the files and
the other materials that you need.
The websites that you are able to work with will include your www.visualstudio.com forward slash
downloads forward slash.
You are able to choose to go with the Community or the Professional Edition.
The first one is going to be free, but the second one is going to cost a bit.
We are going to take a look at how to install the Professional Edition here because it is
the one that has more of the features that you are looking for.
So number two, when you pick your version, you need to click on the Download .exe file.
Number three, when you get to the next screen, make sure that you click on Continue.
Number four, at this point, we are going to start with some of the downloading processes that
we need with Visual Studio.
This is going to include all of the initial files that you need.
Keep in mind that the download speed is going to vary based on your own Internet connection
and how fast that is able to handle the work.
Number five, we are then going to get a new screen to come up for us.
You will need to click Install on the version of the Visual Studio IDE that you would like
to work with.
Number six, at this point, we are going to head on over to the next screen, which is where
we are going to find a ton of options to choose from.
Our goal here is to select on the .NET Desktop Development option, and then we can go through
the installation process to get that on our desktop computer before coding.
Number seven, the following step is where Visual Studio is able to spend a bit of time downloading
the files that you need, based on those other selections that we made above.
You can just click on the parts we suggested, or you can go through and add in some customizations
if you would like them as well.
Number eight, once we are done getting that download going, the computer is going to require
that you go through and reboot your own computer.
This has to be done to get everything in place, so agree to work on that and let the computer
restart.
Number nine, after the reboot is all done, which can take a few minutes to accomplish, it is
time to open the computer up and then look around for the Visual Studio IDE that we just
worked on.
You can then open this IDE up to use it.
So A, when we have it opened up, we should be able to pick out the theme that we want to
use here.
This is not going to matter too much, and you can pick out the one that you personally
like for your coding.
And B, when you have made your selection, you can then click on Continue with Visual Studio
to get started.
Number ten, when we get to the IDE that works with Visual Studio, you can then navigate around
a bit and find the File menu.
You then need to click on that menu and then look for the part that says Create a new C-Sharp
application and click on that.
Number eleven, you are then able to go through all of the necessary steps to get this part
of the process done.
When all the steps are done, you will easily be able to write out the different codes that
you want to use with the C-Sharp language without any issues.
Now, you will notice that there are a ton of reasons why you would want to spend your time
working with this particular IDE over some of the others.
Yes, a quick search will show you that there are other options that you can choose from,
but none of them will provide us with the same kinds of features at all.
For example, this Visual Studio IDE is going to make it easier for us to create choice applications
in any of the different languages that rely on our .NET framework.
This adds in a bit more versatility to your needs.
It is also an IDE that will make it helpful to create all of the types of applications that
we want here.
For someone who is just starting out with coding and learning the ropes a little bit,
the IDE from Visual Studio is a great option to help debug some of your codes as well.
There are always going to be times when your code will run into some issues, and being able
to debug it will ensure that it works in the manner that you would like.
When we use the Visual Studio IDE, it allows us to test out some of the applications that
we are using at the same time that we try to build them up.
This is going to save us a ton of time and will allow for a kind of learning on the job
process so that we can get better with some of the coding that we want to do as well.
And you will find that all of the cool extensions that come with this will make it a lot more
fun to learn how to work with this coding language overall.
While there may be a lot of options out there to help us learn C-Sharp, you will find that
the IDE that comes with Visual Studio is going to be one of the best options to choose from.
And if you are able to go through a few of the steps that are in this chapter, you will
have it all downloaded and set up so that you can actually work on some of the coding that
you would like.
Chapter 3 How to Work with the Variables When it comes to doing some work with your
chosen coding language, it is important to learn a bit about the variables and what we
are able to do with them.
These are important no matter which coding language that you want to learn, so we are going to
take a bit of time to learn more about them and how they can work for our needs.
Now that we have the whole of the C-Sharp language set up and ready to go on any computer that we
do want to use, it is time for us to go through and actually take a good look at the variables
that work on this, as well as the other data types that we can use as well.
All of these are going to work in a slightly different manner from one another, so it is
important for us to learn what they are all about and what we can do with them.
While some of the different things that you are able to do with these variables can be considered
more advanced and can add in some of the more complications to the process, you will find
that these variables are also a part of the basics of this language, and the basic idea
that comes with this is simple to learn.
We have already taken a look at a good example of a code that we can write in C-Sharp.
So now, let's see how we can use the variables to help us write out our codes a bit more in
depth.
The different types of data.
The first thing that we have to explore when it comes to our variables includes all of
the different types of data that are found with the C-Sharp language.
When you work with this, you have the ability to divide it up into two main parts, ones that
are different but can also work well together.
These are going to be separated out into the value type and the reference type.
When we look a bit more closely at the value types, you have to remember that the data has
to be passed over the method that you plan to use here.
But if you are working with the reference type of these, then we have to make sure that
we add in the reference to our method as the value is something that we will need to place
in another location in the code.
Some of the types of data that we are able to utilize includes ULONG, DOUBLE, LONG, FLOAT,
UINT, INT, USHORT, SBITE, SHORT, BYTE, and BOOL.
When you use this type, the values that you are allowed to store can only be two when you
are using BOOL.
The values are going to be FALSE and TRUE, so it is good for CONDITIONAL STATEMENTS and
also for LOGICAL EXPRESSIONS.
DECIMAL
CHAR
This is a data type that is only allowed to have one single character.
When you are writing the CHAR value, you must include it with single quotes such as writing
out the letter T, the letter B, and so on.
The C-Sharp Variables
You will find that, no matter how much code that you write, there will come the point when
you will need to go through and execute the codes.
When it is time to execute the code, the computer program is going to hold on to that data until
it is time to execute again.
The best way that we are able to store this information is to use the variables.
To make this as easy as possible, a variable is going to reserve a spot in the memory of
our computers in order to hold on to that data until you try to create.
Because of these facts, the variables are going to have at least one value attached to them,
and sometimes more than one value at a time.
And this value will then be saved over to that reserved spot in the memory where we held
on to the variable.
When you work with this language, we are able to use the syntax to help us to create a new
variable.
example, less than, underscore, type, greater than, less than, name of variable, greater than.
When you type in the above code to your compiler, you are creating a variable that will save
a part of the memory so that you can store a value there.
The programmer will then be able to access this variable using the identifier it was given.
For example, if you had listed the formula above as char x, you would be able to find the variable
by bringing up x.
C-sharp is unique in that it is going to help us to initialize some of the variables that
we want to use when it is time to declare them.
This term is going to refer to the process of placing a value to the variable when you
create it.
You simply need to use one of the assignment operators, and the operator that we have here
is simply the equal sign.
Then you can write out the value that you want to place there when this is all done.
Another thing that we can do here is to declare a few variables at a time, in the same statement,
as long as we are working with the same type of data.
We just need to make sure that each of the entries that we add to this statement has a
comma in between to help separate them out.
While we are here, though, we need to make sure that the variable is declared before we
try to access them and use them in our code again.
The C-sharp language is also going to make it so that we must implement a new rule, which
we will know as a definite assignment.
What this means is that you will need to take a bit of programming time initializing the local
variables that you want to use, before they are ever added to some of the code that you
write.
Then you can go through and assign the initial value of our local variable while you declare
it, using the process that we were just talking about in the process.
One note to keep in mind here is that when we are working through this phase and using this
language is that the variable we will use will be named using this method as well, because
the values that the variable should hold onto will actually change each time that you execute
and run that program.
The changes will happen in your values, but what they change into will really depend on what
you want them to be to make the code work.
How to create an identifier One thing that is nice about Microsoft is
that it is going to provide you with a variety of suggestions that you can use to get C-sharp
to work well.
And one of these recommendations is that programmers of C-sharp should work with the CAMEL notation with
their work and with the variables that they write out.
And then, when you work with the methods we have talked about, you will need to work with
the method that is a bit different, one known as the PASCAL notation.
To a beginner, this may not make sense, so let's dive into them.
When we talk about the CAMEL notation, you will need to make sure that the first letter
in the variable name is in a lower case.
If your new identifier or variable is going to be a compound word, then you will need the
first letter in the second word to be an upper case letter.
This helps to keep them separate, and tends to make reading them a little bit easier.
A good example of some of the codes that we can write out in CAMEL case would be like the
following, payment, and then complete payment, mathematics, and then first class, but first
has a lower casement first letter, and class has an upper casement first letter.
The PASCAL notation will take things a bit differently.
This notation style is going to ask you to start the first word using an uppercase letter.
The first letter in all of the other words in the sequence should also be done in uppercase
as well.
So some examples of using the PASCAL notation would be write line, so that would be W-R-I-T-E-L-I-N-E,
and the W and the L would be in uppercase letters, with an open close parenthesis behind it.
Read line, with the R and the L, an uppercase, with open and close parenthesis behind it.
Start, with the S being uppercase, with open and close parenthesis behind it.
And Main, with the M being uppercase, with an open and close parenthesis behind it.
While you are naming these identifiers, you will be able to work with numbers and underscores
as well.
But if you will not be able to start these identifies with a number, you can write out something
like seven books, but you could not write out the number seven followed by books.
We need to remember that when we work on this, that the notations are not something that is
required all the time.
And you are able to make some changes to use them to help us give the identifiers a name
if you like.
But the pascal and the camel notations are not going to be seen as the proper way to
do it in coding.
So it is best to use it so that other programmers know what you are talking about along the way.
As we can see, already working with the C-sharp language is not that hard to work with, even
as a beginner.
There are going to be quite a few parts that come together, and we need to remember as
we go through, and sometimes it is going to seem like a lot to try and keep track of with
all of the rules.
But as we go through our coding, we will see why these parts are in place, and why they
are so important to some of the work that we want to do with our own codes as well.
Chapter 4 Handling the C-sharp Operators
It is hard to have a good discussion about the C-sharp language if we don't take the
time to talk about the operators and how these are supposed to work in some of our codes.
These are a relatively simple option that we are able to handle, but they are going to
be important and can really make sure that our codes work well.
In fact, we even took some time to talk about one of the operators, the assignment operators,
in the last chapter about variables.
These operators are going to show up all over the place in our codes, so it is time to learn
what they are, what they mean, and how we can use them.
There are a few different types of operators that we are able to add to our code, and each
one is going to have their own role to play in the process.
No matter how you end up using these in the codes that you write out, they will all have
their own job to handle as well.
When we add in the right operators, we will be able to add in some of the functionality that
we want as well.
These operators are going to be easier to handle than you may think, but the functionality and
the power that comes with them is going to be amazing.
The neat thing here is that no matter which of the other coding languages that you want
to work with, whether you handle the C-sharp language or another option, these operators are
going to be really important for you to work with.
We are going to take some time in this chapter to look at the different types of operators
and how we can work with each one.
Using the arithmetic operators
When you are ready to work with the operators, the first one that we will need to talk about
is the arithmetic operators.
These are going to be pretty simple to work with, and if you have been able to take any math
classes in the past, then you are going to have a good familiarity with how these work,
and you will know how to work with these pretty quickly.
When we handle some of these arithmetic operators, you will find that they are going to be in charge
of telling the computer to work on a few of these functions as well.
As long as you are able to remember the right symbol with these, and you place the numbers
all in the right order and use this well, then the arithmetic functions are going to be
able to work out the way that we want them to.
Some of the most popular of these arithmetic operators that you can use when handling the
C-sharp language will include the plus signal.
This is the addition operator.
It is going to add two operands together.
So you would get x plus v equals 25.
The minus sign.
This is the subtraction operator.
This is going to allow you to subtract the value of the right-handed operand from the left-handed
operand.
So you would get y minus x equals minus 5.
The asterisk.
This is the one that will tell the computer to multiply the two operands.
So you could do x asterisk y equals 150.
The forward slash sign.
This one is the operator that will tell the computer to divide the left-handed operand with
the right-handed operand.
For example, y forward slash x.
The percent sign is often called the remainder of the modulo operator.
It is going to divide the left-hand operand by the right-hand operand and then returns the
remainder.
The plus plus sign is the increment operator.
It is going to increase the value of the operand by 1.
So you would have plus plus x equals 16.
The minus minus minus sign.
Programmers will often call this the decrement operator.
It is going to decrease the value of the operand by 1.
This means that you will have minus minus minus x equals 14.
You will find that there are a lot of times when you will be able to work with these arithmetic
operators, and they are fairly easy to pull out and use.
They can also be there to help out in codes, where you would like to take two numbers or two
statements in the code and do some kind of mathematical formula on them as well, such as addition, or subtraction, or
subtraction.
You have to remember to use the order of operations with these, though, to make sure that the code
is going to behave in the manner that you want.
If you need a little refresher about the order of operations and how it works, it is the method
that tells us which order we need to have the numbers in, in order to do the math correctly,
and to get the answer that we want.
Remember that, going left to right, we need to do all of the multiplication, then all of
the division, then all of the addition, and then finally, the subtraction.
If you do not use this when you do the work in C-sharp, then the answer is going to be wrong.
Using the assignment operators.
Now that we've had some time to look a little bit more at the options that you can use with
the arithmetic operators, it is time for us to move on and look at the second kind of operator
that will work well in C-sharp, and that is the assignment operators.
The assignment operators are going to be the ones that we will use when we want to assign
a value to our variable or some other similar method along the way.
Think back to the variables that we already spent some time on.
The variables and other parts of our identifiers along the way need to get a value to be assigned
over to them.
If not, then you are just reserving blank spots in the memory of your computer, and the assignment
operator is going to make sure that you are able to assign that value over to it and get
everything to go through the right way.
The most common of these types of operators, as you can guess, is going to be the equal sign.
These operators are going to be responsible for making sure that the value is able to go right
to the variable that you want.
But there are other operators that we can use here that fit under this category.
A few of the other assignment category operators that you may recognize when you work with this
language and when you do some of the codings, we can explore later on.
These include the equal sign.
This operator will allow you to perform simple assignment operations.
It is going to assign the value to a variable that you are working on at that particular
time.
For example, writing int sample equals 100 will tell the program that you want to assign 100
to the variable that is called sample.
It won't perform any extra processes on this variable or on the value involved.
Plus equal.
This is the additive assignment operator.
It is going to add up the values of your two operands and then will assign the sum to your
left-handed operand.
Minus equal.
Programmers will often refer to this as the subtractive assignment operator.
It is going to subtract the value of the operand on the right side from the one on the left
side and then assign the difference to the left-hand operand.
Asterisk equal.
This operator will multiply the values of each operand and then will assign the product to
the left-handed operand.
The forward slash equal sign.
This is when you will divide up the two variables and then take the result and assign it to the
variable on the left.
When you want to work with one of the above assignment operators, it is important to double-check
that both of your operands are actually the same type of data.
You will find that in some cases, the operands being different means that they are not going
to be compatible with one another.
And if you try to work with these, then your program will not behave in the way that you
would like it to behave.
So check on this part of the code so that you don't end up with an error that you have to
try and fix later on.
Using the relational operators.
Next on our list of operators is going to be the kind known as the relational operators.
Remember that the arithmetic operators that we talked about above are responsible for
helping us do any kind of mathematical equations that we want inside of the codes.
And then, the assignment operators are responsible for making sure that all of our variables or
some of the spaces that are reserved in the memory of our computer will have a good value
assigned to them.
But now, it is time to shift our focus for a moment and look at how these relational operators
work.
First, the relational operators are going to be the best to work with because they can help
us have a chance to compare the values of two different operands in the code.
Because we have the ability to make this happen, these are going to be the best to use when
we handle some of our conditional statements later on.
There are a number of relational operators that we are able to use in this language.
To make it easier, and to really see what is going to happen when we use these, we have
to make the assumption from the beginning that D equals 100 and E equals 150.
The equal, equal sign.
This is the operator that you can use to check the quality of two values.
If the two values end up being equal, the operand will tell you it is true.
Otherwise, the operand will tell you that it is false.
For example, saying the D equals sign equals sign E would show up as false.
Exclamation mark followed by the equal sign.
This operator allows you to test the inequality of two values.
If the values end up not being equal, it will tell you this is true.
For example, E, exclamation mark, equal, D would result in a true.
The greater than sign.
This operator is used to check whether the operand on the left is greater than the operand
on the right.
If it is, then the operand will tell you it is true.
For example, saying that E is greater than D would be true.
The less than sign.
This is the less than an operator.
It will allow you to check whether the operand on the left side is less than the operand on
the right side.
If it is, you will get it to show up true, such as in the formula D is less than E.
Greater than followed by the equal sign.
This is the operand that will say it is true if the value of the operand on the left side
is greater than or equal to the operand on the right side.
Otherwise, it will tell you the statement is false.
For example, saying that E is greater than or equal to D evaluates as true.
Less than followed by the equal sign.
With this operator, you will get a true if the operand on the left side is less than or
equal to the operand that is on the right side.
For example, D is less than or equal to E is true.
One of the things that we need to remember when we work with this particular type of operator
is that you will actually end up with a result that is Boolean each time that you want to
use them.
What this means is that you will get an answer that is either true or false based on the conditions
that you add to that part of the code.
At this time, it is a good idea for us to go through and check through the code, seeing
whether we add in the proper number of equal signs to make this work.
If we are doing the equality operator, there needs to be two equal signs.
Otherwise, we are working with the assignment operator and that will get us a different result
than what we want at this time with all of this.
Using the logical operators We can also take a look at the next type
of operator that is important with some of our work, which is known as the logical operators.
This one, similar to how we are going to work with some of the other Boolean values, is going
to accept and then rely on the idea of true and false when we work them in our code.
When we are taking a look at some of the logical operators that you would like to add to the
code, you will find that, for the most part, we will focus on four main choices.
We are going to take a look at these below, but to make this easier, make the assumption
that C and D will be true and that E will be false.
Two ampersands together, or two and signs together.
This operator is called logical and.
It will only result in true if both operands are true.
For example, D, ampersand ampersand C will evaluate to true.
Two vertical bars together.
This is the logical OR.
This operator is going to give you a true if at least one of your operands is true.
For example, C, vertical bar, vertical bar E, will result in true.
The Circumflex.
This operator is the logical exclusive OR, and it will result in a true if one of the operands
is true.
If both operands can be false or true, the operator will give you a false.
Exclamation mark.
With this one, you will be able to reverse the value of your boolean variable.
For example, if you type in exclamation mark D, you will get a false.
Using the bitwise operators.
Now it is time to move on to the final operator that we will discuss in this guidebook.
And this will be known as the bitwise operators.
This is a type of operator that we can use, and at first glance, it is going to seem like
it is the same thing as the logical operators that we already talked about.
The main difference that you will see between these bitwise operators, and the previous logical
operators, is that the bitwise options are going to take a value only if it is binary,
and then turn it into something that is a boolean result.
These are going to be values that will represent true or false, but they will come out as a zero
or a one, and then we can see these come as the output in the whole process.
These binary values are sometimes going to be difficult to work with overall, because
a lot of non-programmers will not understand how these are supposed to work in some of the
codes that they want to write.
Let's take a look at an example of some of the different bitwise operators that you are
able to work with, to see how they can be handled here.
For this, let's assume that I equals zero, H equals one, J equals zero, and G equals one.
Ampersand, this is the operator that is known as the bitwise AND.
It is going to assign one to the positions where both of the operands have one.
For example, G plus H will give you one.
Vertical bar.
This is the bitwise OR.
It is going to assign one to the positions when there is at least one of the operands with
a one.
For instance, doing H vertical bar one will give you a result of one.
Circumflex.
This is the exclusive OR that will work well for binary data.
Just like working with the logical values, this kind of operator is only going to give
you one in the areas that the operand has a one.
For example, if you do G circumflex I, you will get a result of one.
The bitwise operator is going to be a bit more work when it comes to the different operators
that we are able to work with.
And there are not necessarily a lot of times when we would want to bring out this kind of
operator in the codes that we are going to be due.
But this is a good option to work with and know about so that we can see how this is
going to work when we do need it.
You will find that all of these categories of operators will be important to the codes
that we want to write along the way.
They are all a bit different and they are able to handle things in a different manner as
you go.
But they can still help you to get a lot done and see some good and powerful results in
the codes that you do want to write.
Take some time to study these and see how they work, so that you are better able to add them
to your own codes quickly and efficiently.
Chapter 5 – Teaching Your C-Sharp Programs to Make Decisions
In this chapter, it's time to get to some of the fun stuff that we are able to do when
it comes to writing out our own codes.
In particular, we are going to learn a bit more about the conditional statements or the
decision control statements and how we are able to make these work for our needs.
There are a lot of times when we will create a program that needs to take in input from
the user.
We can't always guess what input the user is going to provide to us.
So we can use these conditional statements and set them up with a condition on how we
want them to respond to different potential inputs, and then have the program behave in
the right manner based on these conditions.
There are times when you are working with your programs, and you want to make sure that
it is able to handle some decision making all on its own.
You can have it all set up, with the right conditions, ahead of time, and then the code
is able to respond based on the user input that it receives as well.
The computer program is going to behave in the manner that you want, even if you have no
idea what the input is, without you having to make a lot of guesses.
You will find that there are actually a couple of different types of conditional statements
that you are able to work with, and the choice that you make is going to depend on how you
want the code to behave.
Each of these conditional statements will allow us to work in different situations, but it often
depends on how many features and how much decision making you would like the program to do.
We will take a look at some of these, though, through this chapter so that you can see what
we mean here, and you can learn a little bit more about how all of this will come together.
As we mentioned, there are several types of conditional statements that we can choose from, rather than
just one, and each is able to handle the information that it receives as an input in a different
manner.
This helps us to make sure that we get the right decision out of the code, and no matter
how the user provides us with the input.
The options of conditional statements that we are able to work with within our C-Sharp language
include the IF conditional statement.
To start our journey in the world of conditional statements, we need to handle the IF statement.
This is going to be seen as one of the most basic out of all the conditional statements,
and you will see how it sometimes lacks in the amount of functionality that we need when
it does come to these statements.
There are not a lot of times when we will use the IF conditional statement on its own, but
it still gives us some practice with how this works, and what we are able to do with them,
so that we will spend a bit of time here.
When we are ready to write out one of these IF statements, we need to make sure that the
code is only going to need to provide the user with a specific reply if the input that it's
given matches up to all of the conditions that you set in the code to start with.
If the input does match with the conditions, then the code is going to execute, and often,
it provides some kind of message to the user.
You can also choose to have it go through and execute something else if this works better
for your type of code.
When we use the IF statement, you will only end up with a response, or an output if the
input that the program is provided matches up with the conditions that are in the code.
If the user gives the wrong input, based on the condition, then the code will not execute
the next part of the code.
It doesn't have another part of the code to tell it how to behave.
And all the IF a statement is able to recognize at this point is whether the condition is met
or not.
Since it is not met, it will not execute the message or the part that you add in there.
The good news that we are going to find out here is that setting up the IF statement is
going to be a lot easier to accomplish than you may have thought in the beginning.
A good way to see how the IF statement is able to work is to look at the code example
that we have below.
So we have IF, left parenthesis, x is greater than zero, close parenthesis.
Next line is an open bracket.
Next line, console.write, left parenthesis, italics, the value is positive, italics, close parenthesis,
semicolon, last line, close bracket.
With the example that we listed above, there are certain things that need to happen.
If the value that the user puts in is higher than zero, then the program is set up to print
off, the value is positive.
However, if the expression turns out to be false, or the input is less than zero, then
the program will ignore the whole statement that comes after console.write and will move
on.
The IF, ELSE statement.
As we discussed a bit in the above section, there are going to be a few issues that can
show up when we try to work with the IF statement.
There are a lot of situations in coding, even as a beginner, when these are going to be difficult
to use and won't get the work done that we want.
For example, it is usually not a good idea in our codes to set up any potential that the
program will not act at all if the input is wrong.
You want to make sure that no matter what the user adds in as their input, even if it
is considered wrong by the code that you are working with, that some kind of a result will
still show up, so that they know that they did it wrong or have some other indication.
The choice you make here is going to depend on how your code runs.
This is exactly why we are going to stop here and look at the second kind of conditional statement
that we can use in our codes.
This one is known as the IF ELSE statement.
This is going to add in a ton of power to the code, any code that you are writing, and
can make it possible for us to have two, three, or even more options to base the input of the
user on.
You can technically use as many of these options as you would like in the IF statement, but
the idea is that it is set up in a manner that will help us to make sure that everything
gets an answer.
A good syntax that we are able to use to help us understand how the IF ELSE statement
is going to work includes if, in parenthesis, the boolean expression, close parenthesis,
open bracket, the statement forward slash S you want to run if the result is true, semicolon,
close bracket, next line, close bracket, next line, else, next line, open bracket, the statement,
forward slash S you want to run if the result is false, semicolon, next line, close bracket.
As we can see with the code that we wrote above, there's going to be a lot of power that we
can get with the IF ELSE statement.
This is going to be a basic option when it comes to using the IF ELSE statement.
But it is simple to go through and add in some more lines and some more conditions to add
in the power that you need here.
With these statements, if the answer is found to be false, then the code simply skips the
first condition and goes on to the second part to see if that one is true or not.
If there happens to be more than two options, then this process continues until we reach the
ELSE statement of it.
If the input did not match up with all of the other parts, then it will automatically
match up with the ELSE part of the statement, and that is the condition that is met.
That part of the code will execute for us to ensure that something shows up on the screen
in the process.
Now that we know a bit more about how the IF ELSE statement is supposed to work for our
needs, it is time for us to take a closer look at how this is going to work using an
actual example to ensure that it behaves in the manner that we want.
A good example of how we can use this will include the following.
IF
OPENING PARENTHESES X IS GREATER THAN ZERO CLOSE PARENTHESES NEXT LINE OPEN BRACKET NEXT LINE CONSOL.WRITE
OPEN PARENTHES
positive, period, close the quotation marks, close parenthesis, and semicolon.
Next line, close bracket.
Next line, else.
Next line, open bracket.
Next line, console.write, open parenthesis, quotation marks, the value is less than or
equal to zero, period, quotation marks, close parenthesis.
Next line, close bracket.
You will find that with the example that we did above, the else clause is going to be
hidden, at least until the Boolean expression turns out to be false.
It is going to be there when and if the process really requires it, or if the value comes out
as false for that situation.
But if the value is true, and matches up with the conditions that you add into the code,
then you will find that the first statement is going to be the one that we will use.
You will find that there are a lot of situations where you will want to bring out the if-else
statement in your C-sharp code, but it may seem a bit complex to work with as a beginner.
Take some time to practice some of the codes that we have above to ensure that you get to
experience with typing in these codes and that it is going to match up with how you want to
write your codes out as well.
The Nested Conditional Statements Something that is a little bit unique when we work
with our conditional statements in C-sharp is the idea of the nested conditional statements.
These are going to be where we are able to take two of the statements that we already talked
about above, and we are going to combine them together to make them into a nested conditional
statement.
So we can take one if-statement and put it inside of one of our other if-statements.
This is going to add in another level of complexity to what we are doing in our statements and
can help us to really make our programs work hard.
If this is the kind of conditional statement that you would like to work with, you need to
remember that if you do write one out and end up with an error or a mistake, it's going
to take a long time to fix it.
Whether the mistake happens near the beginning, at the end, or somewhere in between, if it's
there, it's going to cause an error in the whole thing, and you have to take some time
to fix it or the code will not work.
This takes some time and can be frustrating for a beginner who is trying to make this work.
Another thing to consider with these nested conditional statements is that you are technically
able to go through and add in as many levels to this one as you'd like.
However, as a beginner, it is probably best to not go above three levels, and two is often
plenty for the codes that you want to write out as well.
If you do go above three levels with these kind of conditional statements, then you may
end up with some coding that is harder to handle and may not work in the manner that you want.
This is a good rule to stick with as a beginner and help make coding a little bit easier.
While this seems complex, and you may assume right off the bat that your codes would not
need these nested statements, there are some situations where it will come up, and it is
a cool piece of programming to learn how to do, whether you use it or not.
A good example of how we can write out some good code with the nested conditional statement
is found below.
Double, with a capital D, space R, equals 60, semicolon.
Next line.
Double, with a capital D, space S, equals 70, semicolon.
Next line.
If, with a capital I, in parenthesis, R, equals, equals, dollar sign, close parenthesis.
Next line.
Open bracket.
Next line.
System dot console dot right line, all with beginning capital letters.
In parenthesis, quotation mark, these numbers are equal, dot, closed parenthesis, semicolon.
Next line.
Close bracket.
Next line.
Else, E-L-S-E with a capital E.
Next line.
Close bracket.
Next line.
If, with a capital I, parenthesis, R, is greater than dollar sign, close parenthesis.
Next line.
System dot console dot right line, again, all with beginning capital letters to each word.
Open parenthesis.
Quotation marks, the value of the first variable is greater than that of the second one, period.
Quotation marks, close parenthesis.
Next line.
Close bracket.
Next line.
Else, E-L-S-E with a capital E.
Next line.
Open bracket.
Next line.
System dot console dot right line, again with capitals in the beginning of each word.
Parenthesis, the value of the second variable is greater than that of the first one, period.
Quotation mark.
Close parenthesis.
Next line.
Close bracket.
Next line.
Close bracket again.
With the example that we are looking at above, you will have a few options that will work with
the if-else clause.
This will allow you to pick out the command so that the program knows what it needs to
read out.
This will help you to do some more with your program, and it'll make it easier to make the
program more complicated.
There are a lot of different times when you will want to work with these conditional statements
in your C-Sharp code.
These will help you to add in some more interaction between your code and whomever is using your
program.
It is simple to work with, but it will ensure that you are able to make a complex code in
your program.
Chapter 6.
Creating Objects in C-Sharp.
C-Sharp is considered one of the OOP languages.
This means that we are working with an object-oriented programming language.
One that is going to be based on objects and classes as part of its organization.
This is going to be a simple topic that we can handle and work with, but it is also something
that is important to learn more about, and to see why it matters, and what it'll mean
to some of the codings that we try to handle along the way.
Without these classes and the objects that they contain, the organization that we want
to maintain and rely on inside of the C-Sharp language is going to be impossible.
This is why we need to understand more about the OOP languages and why we are going to take
some time to look at the necessary steps to help us create these classes and objects in
our own codes as well.
So let's dive in and see what we can do with all of this.
The C-Sharp classes and objects.
To help us get started on all of this, the first step is that we have to spend some of
our time talking about what the objects are, and how the C-Sharp language is going to use
them to execute codes.
Programming is something that has really seen some big changes since its first began, which
has ensured that programmers are going to work with a lot of different methods to help
them create some of the new applications that their programs and their computers need.
One of the best upgrades to happen to these programming languages is the Object Oriented Programming,
or the OOP, that we are talking about with the C-Sharp and with other similar languages.
In fact, most of the modern coding languages out there are going to rely on this, because
it ensures that your coding is easy to use and understand, and it will help us to code
better as a beginner.
You will find that there are a ton of components that your coding needs to be able to handle
to make a code behave.
But the OOE part of our language is going to help us to break all of these parts up into
more manageable chunks so that nothing gets lost and it will all behave in the manner
that it should.
Since there is the fact that there are a ton of aspects that we need to have to go with
one another to ensure that this process works and that our programs will perform, we need
to divide some of these components up a bit, and then learn a little bit more about what
they are going to do.
So let's look at the idea of these OOP languages, the classes, the objects, and so much more,
to see how this will work for us.
THE BASICS OF THE OOP LANGUAGE
The very first thing that we need to understand when we come here is what the OOP language is
going to mean and why this is so important to what we are doing in our coding.
To keep it simple, OOP is basically just a style of coding that is going to rely on objects,
ones that are actually created by the programmer, and can relate back to some of the physical
objects that we find in the world around us all the time.
These OOP languages are nice to work with because they are able to provide us with the
exact model that we need to work with, based on the manner in which we want to use our objects,
and it can also be based on how we would like to work with these objects in the real world
as well.
If you have a ball in your coding, then it is going to look and feel and act in the same
manner as a ball would in the real world.
When we compare this to some of the other languages that you can use for coding, you would have
to spend your time on these working with ideas that are a little more abstract.
Abstract ideas are hard to work with, and that made it hard for beginners to even understand
what was going on in the code, much less use it in a manner that they could code properly.
This was the only way to do things when coding first started, but it set the bar too high
for a lot of people to get into the world of coding, and most felt defeated and stopped
before they even had a chance to get started.
On the other hand, the OOP languages took this challenge away and made things a lot easier.
With these, you get the benefit of throwing out some of those abstract ideas, and instead
had it set up so that you could work with objects that are easier to handle and easier to understand
as well.
And most of the modern coding languages out there rely on this process now, which can make
life easier for you as a beginner.
The objects Well, now that we know a bit more about how these OOP languages are supposed
to work, and what they can do to make coding easier for everyone, it's time to look a bit
more at some of the objects that make up this type of language.
Programmers are able to work with these objects in any manner that they want.
These digital objects are going to be there to represent some of the physical objects that
you want to find in your code.
When you work with any of the modern OOP languages, which include C-sharp, you have to keep in
mind, though, that the objects need to have a few key characteristics in place in order
to work well.
So these characteristics are going to include State.
This is the characteristic that will define the object, and these can be general or specific.
and behavior.
This is the characteristic that will declare all the actions that an object is able to
do.
A good method to use to make sure that we are able to better understand how these are meant
to work is to look at an example of this.
Let's say that we want to add a ball to our code.
The state of this ball is going to be things like what the ball is made from, the size of
the ball, and the color of the ball.
More we could even talk about how the ball feels when we hold it.
On the other hand, when we are talking about the behavior of the ball, we would focus more
on the things that the ball can do.
This could include things like the ball rolling, the ball bouncing, kicking the ball, throwing
the ball, and so on.
Any time that we want to work with one of these types of languages, we will find that it is
easy to combine the information and the technique, and then you can process them as the same thing.
The programming object is then going to have time to match up to how it is supposed to behave
and look when it would be in the real world, and then it will go through and hold on to
all of this information and these actions to use later when the code actually executes.
These objects are going to be an important part of the code that we want to write.
We will use a lot of objects along the way, and as we will see here in a moment, the classes
that we are able to create will come in and provide us with all the storage that we need,
ensuring that these objects stay together and are easy to find at the right parts of
the code.
The next thing that we need to take a look at concerning these is the classes.
And while we are on this topic and looking at some of the objects and how they are supposed
to work, it is time for us to go through and look a bit more at the classes and how these
classes will relate to some of the objects that we work with, and what this will mean
to our coding language.
To start with, when we work with the C-sharp language, the classes are going to be the part
that helps define the characteristics of the objects we did before and can help us to hold
on to all of these for organizational purposes.
These classes are nice, because they will be responsible for helping us to have structure
or a model to base things on, making it easier to effectively define the nature of any object
that our classes are supposed to hold.
The classes are going to be considered part of the foundation of what is needed to make
the OOP language work well, and then they are directly linked back to the object that
goes with it.
This will allow us to put in as many objects as we want to this, sometimes even a collection,
so that they will work well with one another.
So this brings us to the part of needing to dive in a bit more to see how these classes are
going to work in our code.
The example that we are going to look at here is going to be a new class that we name as
toys, and then the object that we want to put into this specific class is going to be
known as ball.
With this particular instance, the ball is going to be just one of the instances that
are found in the toy class that we are creating.
However, the toy class is going to help us out with this one, because it helps to define
the behavior and the state of not just the object of the ball, but with any of the other
toys that we try to put into that class as well.
In addition to the ball object, we can go through and add in things like a bike, or a doll, or
a dinosaur, or anything else.
These objects could be defined by our class at the same time.
So speaking of classes, how to create classes in C Sharp?
With some of the information that we did above, it is time for us to take this a bit further
and actually create one of our own classes in this language.
After we have had a chance to work on some of our own codes, and to bring in the class
keyword, it is time for us to go through and actually indicate to the identifier what you
would like to see.
This has to be done along with some of the variables and the different methods that you
are hoping to use so that the class will work.
We of course want to get the power behind this while keeping it as simple as possible.
To make sure that this happens, we have to use all the right parts and ensure that they
are in order.
Some of the parts that are necessary when creating our classes include the fields.
These are any of the variables that will belong to a particular data type.
The methods.
You can use these methods in order to manipulate the data.
Properties.
In this language, the properties are going to enhance how well the field works.
The property will provide some extra management abilities for the information and to give it
to the fields.
At this point, it will probably be easier if you take a look at how to work with the classes
and how to make sure that they do what you would like them to do.
We're going to now take a look at an example of how this code will work and the different
theories that have been going on with it.
Here, we are going to use Book as the name of the class, and then it will have the properties
of size and type.
The example that you can use is as follows.
Next line.
Next line.
Public class book.
Open bracket.
Next line.
Private string book type colon.
Next line.
Private string size semicolon.
Next line.
Public string book type.
Next line.
Open bracket.
Next line.
Get.
Next line.
Open bracket.
Next line.
Return this dot book type semicolon.
Close bracket.
Next line.
Set.
Next line.
Open bracket.
Next line.
This with a capital T dot book with a small b.
Type with a capital T equals value.
Quotation.
Next line.
Close bracket.
Next line.
Close bracket.
Next line.
Public with a capital P.
String with a small s.
Size with a capital S.
Next line.
Close bracket.
Next line.
Get with a capital G.
Next line.
Close bracket.
Next line.
Return with a capital R.
This size with no capitals.
Semicolon.
Next line.
Close bracket.
Next line.
Set with a capital S.
Next line.
Open bracket.
Next line.
This dot size all small case equals value all small case letters semicolon.
Next line.
Close bracket.
Next line.
Close bracket.
Next line.
Public all lower case book with a capital B.
Open close parenthesis.
Next line.
Open bracket.
Next line.
This dot book all lower case type with a capital T equals in quotations dictionary with a capital
D followed by semicolon.
Next line.
Next line.
Next line.
This dot size all lower case equals in quotation marks large followed by a semicolon.
Next line.
Next line.
Next line.
Next line.
This dot book type with a capital T equals in quotation marks.
Next line.
This dot book type.
This dot book type with a capital T equals book type with a capital T semicolon.
Next line.
Next line.
Next line.
Next line.
This dot book type with a capital T semicolon.
Next line.
This dot size equals size all smaller case followed by a semicolon.
Close brace.
Next line.
Next line.
Next line.
This dot book type with a capital T semicolon.
Next line.
This dot size equals size followed by a semicolon.
Close brace.
Next line.
Next line.
Public void sample with a capital S. Open close parenthesis.
Open brace.
Next line.
Console with a capital C dot right line with a capital W and L. In parenthesis.
Quotation.
Is this a open brace zero close brace comma book type.
Close parenthesis colon.
Now that we have had something to do with a semicolon.
Now that we have had some time to create one of our own classes, it is time to go
through and create some of our own objects as well.
We need to fill up some of the classes with these objects so that it actually has a purpose
inside of the codes that we are writing here.
And that is exactly what we are going to spend our time doing now.
Once we have been able to go through and create the classes that we did above,
it's time for us to go through and create a few objects that are going to work in our codes
and can go right into our classes.
Creating our own objects is not going to be all that difficult to work with.
So, we are going to take some time to look at all of those steps that we can take to make this happen.
And what we are able to do to help create an object, whether it is just one or many for our code to work.
With some of these thoughts in mind, the first thing that we need to focus on here is learning how we can create one of the necessary objects inside of the classes that we created.
To help us get started, we need to go through and make up a new keyword to get going here.
Usually, the programmer will start out by assigning a new object to their variable to ensure that it becomes the same data type as the class that you wanted in.
Remember that doing this is not going to help us copy the object to the variable that we wish to use, but it is going to be useful when we want to have a reference for the variable to the object that we assign to it.
To help make sure that we understand how to do this, take a look at the code below.
Book some book equals new book open close parenthesis.
This is a good example that you can use, because it is going to take the instance of a book and assign it over to the variable that we named same book.
This will ensure that the proper object is going to the right class as is needed.
Then, we are able to take a look at some of the system classes that are going to be important to the work that we are doing.
Sometimes, in this language, you will find that a feature that we can enjoy is the library that comes with it.
This library is going to include many of the classes that you need automatically, including the console, the string, and the math, so that we are able to use them as a default.
As you go through and write out some more of these codes, just remember that the .NET framework that comes with it is set up to work well with the C-sharp library.
So, using it should not be a problem.
While we are on this topic, you will fall in love with how easy it is to use the .NET framework to get the job done for you.
This is because the library that you want to use with the C-sharp language is going to work just fine with this framework.
And you will find that they get along well and they don't run into a lot of troubles.
These classes that you use are helpful as a beginner, especially if you have never had a chance to work with programming in the past at all.
One thing that we need to note here, though, is that when you are working with these classes, they will go through the process of hiding the logical implementations.
You still need to focus on what the classes are going to do for you, rather than having to worry about all of the mechanics about how they get the work done.
Because of this fact, the classes that have been built in with the C-sharp language are not going to be out there in the open for everybody else to see.
You simply need to go through and use these codes for general purposes, rather than the mechanics of things.
You simply need to go through the C-sharp language.
Another topic that we need to spend some time on in the C-sharp language is how we can make sure we assign the right parameters to the object.
This language is going to make it easier to assign the parameters that you want to any object, as long as it is the one that you have already created.
This is actually a pretty easy method to use, and you can add parameters to any of the objects that are in your code.
The right syntax that we are able to work with to assign these parameters, well, any parameters that you want to the object, will include
book some book equals new book, in parenthesis, quotation, biography, quotation, comma, quotation, large, quotation, close parenthesis, semicolon.
This code is going to be good for creating a new object named some book, and will assign the two different parameters to it as well.
With this adjustment, the object's type is not biography, while the size is now large.
Whenever you are using the new keyword, the framework of .NET is going to complete two things.
First, it will reserve some of the memory for this new object, and then it will initialize the object's data members.
This is a process that is easy to accomplish, thanks to what is known as the constructor method.
For the code that we took the time to create above, the parameters that we were able to set out will be the exact same parameters that we will use for the class constructor.
This is there to ensure that the object is going to stay where it should in any of the classes that we choose,
and it is going to provide that object with characteristics that will make the object behave well in our code.
Releasing the objects
When we talk about releasing objects, what we mean here is that we are able to release any and all of the objects that seem to show up too often in our code,
or the ones that are big and may take up too much of the memory and processing power inside of the system,
without us having to go through and manually destroy them along the way.
You are able to use one of the systems that is already on the .NET framework to get this done, and the CLR system is a great option to rely on as well.
When you are ready to release some of the objects as necessary with the CLR system, the compiler is going to be set up so that it is able to detect and then release the objects in an automatic manner.
The memory that was originally set aside in the code to deal with these objects is going to be free at this time, and you can add in another object or a variable to the memory space as long as you take the time to create it as well.
If you want to make sure that the object is released, you need to take the time to destroy the corresponding reference to that object at the same time, or this will not work.
The code that we need to use to make all of this happen includes
SUM book equals NULL.
This process is not going to go through and delete the object, but it will make sure that all references to that object are removed,
so that the CLR is able to go through after you are done and perform the deletion for you.
This is a great process to have because it will help to limit the number of issues that occur in your code, and it can get rid of some of the bugs that show up.
As we can see here, there are a lot of different things that we are able to put together to help us out with these classes and these objects.
When all of these come together, we are able to make a nice strong code, one that works well, and one that has all the different parts in it that we need to be successful.
Chapter 7. Defining the C-Sharp Classes
In the past chapter, we did touch on these classes a little bit, but mostly in how they are going to relate to our objects and make our codes a bit stronger in that manner.
Now, it is time for us to take this a little bit further and really explore these classes.
Part of the benefit of working with the C-Sharp language, and the fact that it is seen as an OOP language, is that we can work with these classes and the objects that go with them.
But to ensure that this is all set up in the proper manner, and that we are able to actually put things together and get them to work for our needs as well, we need to define the classes, call them up, and do a bunch of other actions.
And that is exactly what this chapter is all about.
Working with our classes
When it is time to add in one of these classes, in the C-Sharp language, the class has to be done right.
This is important because it is the part that is going to help us define the types of the objects and the different data types that we will use in this part of the program.
The object is going to help us contain the information that is then going to define the class, which can be seen as a type of container in the code, that our object is found inside.
These classes are going to be nice to work with, because there is a ton of information that they hold onto, and can bring forward whenever we need it.
Not only are they able to hold onto all of those objects that we create, but they can also hold onto any and all of the information that will describe both the features and the behavior that comes with these objects as well.
The behavior that we are talking about here is all of the behavior that we want the objects to handle as we execute the code.
When we are working with OPP languages like C-Sharp, you will learn why it is so important to work with methods that can get the job done like this.
So the first thing that we need to spend some time on here is looking through all of the important components that need to show up in our class.
With these classes, there are going to be several components that are nice to work with, and should be there to make sure the class behaves.
There are a few different parts that we need to look through at the time of handling the classes as well, and these include the following.
The declaration.
This is a line that will declare the identifier of the class.
The body.
Just like with methods, the classes are going to have a single body.
You will need to define the body right after you make the declaration.
The body is the statement, or several statements, that are found between the curly brackets.
An example of this is...
Line 1.
Class example.
Opening curly bracket.
Next line.
Forward slash, forward slash.
This is the body of the, in italics, example class.
Next line.
Closing curly bracket.
Next line.
Constructor.
This is the part that will allow you to create a new object.
An example of this is...
First line.
Public sample.
With a capital P, and a capital S, followed by opening and closing parenthesis.
Opening curly bracket.
And the next line.
And then the next line.
Forward slash, forward slash.
Insert what you want to say here.
And then the next line.
Closing curly bracket.
Fields.
These are the variables that you will declare within your class.
The fields are going to contain the values that will represent the exact state of the object that they are trying to get to.
Properties.
This part will describe the different attributes of the class.
Many programmers will write the class properties right inside the field of their chosen object.
Methods.
A method is basically a named block of code that is executable.
It is able to complete some tasks, and then will allow objects to attain the right behavior.
It can also execute the right algorithms that are present inside of the codes.
When we go through and create some of the codes and the classes that we want to use in this language, remember that we are not able to go through and do any kind of manipulation on the objects that you want to create directly.
Instead, you will need to go through and assign the objects ahead of time so that it is easier to handle some of the manipulations that you want to work with later on, without having to worry about the problems as well.
How to organize your classes.
The next thing to consider here is that we need to have some organization to the classes that we are handling in the C-sharp language.
There is mainly one big rule that we need to follow to make sure that these classes work.
And this rule is that we need to double check that our classes have been saved as a .cs file.
This makes them a lot easier for us to find, and the compiler to find, so that the code can bring the class out at the right time.
If we are looking at this technically, the C-sharp language is able to take all of our classes and save them in a program under one big file name.
And then, the compiler can go through and read that information without running into any errors.
But there are many programmers who like to make sure that their classes stay in individual files, because this allows for some ease of use when working on the individual files, and it can help with the organization.
Both methods work though, so go ahead and pick the one that you like the most.
At this time, we need to understand the topic of a namespace encoding.
This is going to be a set of classes that are related to one another in some sort of manner.
The way that these are able to relate with each other is going to be based on your code and the situation that you put them in, but there should be some sense as to why they relate to one another.
It could be something like their classes, their interfaces, their structure, and even sometimes the information that is found inside of them.
If you are writing out the code, and you would like to add in or create a new namespace in some of the codes that you did in the past, you have to make sure that you work with the directive of using to make this easier.
However, it is often better to do this right at the beginning of that part of the code in the first few lines, so that is a good option as well.
Accessing our classes
The final topic that we need to take a look at in this guidebook is all about how we can actually access one of our classes in this language.
This language is unique in that it is going to provide us with four modifiers that we can use to help access our classes, and even for us to determine who else is able to access these as well.
These four modifiers are going to include protected, public, private, and internal, and they are going to have the control that is necessary to figure out when the parts can be pulled up, which parts of the code can pull them up, and more.
A bit more about how each of these modifiers works is following.
The private. This is the modifier that will place some strict restrictions on one of your classes.
If the class is tagged as a private class, it will not be accessible by the other classes in the code.
The C-Sharp language will use this as a default modifier if you do not place anything else there.
This can help to avoid problems if you forget to add on to that modifier.
Public. You can also choose to make the class public.
This means that the modifier will tell other classes that they are able to access this class.
This modifier is going to take away all the limitations about how visible this class is to all the others.
Internal. If your code has an internal modifier on it, this means that the class is going to be accessible, but only to the files that fall in the same project.
Protected. This is the modifier that you will use if you would like to prevent a user from accessing the element.
However, it also allows all the descendant classes to have access to the elements of that class if they need it.
As you can see with this one, all of the elements are going to be able to work in a slightly different manner based on what you are hoping to see happen inside of some of your codes.
You can determine if a certain part, or all of it really, needs to be private, or if these can be public for others to see.
You can determine if something is going to be protected or not.
It all depends on the kind of code that you are trying to write out, and what you want to see happen with all of the classes that you create.
There are a lot of great classes that we can create when we work on the C-sharp language.
And these classes, along with the objects that go inside of them, are one of the best features that comes with this language.
Learning how to work with them, and what all they are able to do for some of the codes that we want to write, can be pretty amazing.
And we can do so many things with these classes along the way.
Chapter 8. How to Create C Sharp Loops
Now that we have a better understanding of how the classes and the objects are going to work in some of our codes,
it is time for us to dive in a bit and look more at another topic that is going to help our codes come alive in no time.
In many of the OOP languages that we want to spend our time on, you will find that it is possible to work with a type of coding that is simple,
can clean up the code, and can really make complex parts of our code get done in just a few lines.
And these are going to be known as the loops.
As we mentioned a bit before, these loops are going to be great to use.
They save us a lot of time and hassle in the process, and can ensure that the whole process of writing out codes does not take as long to handle as before.
In this chapter, we are going to take some time to look at what these loops are like, how we are able to create them, and even a few of the options that we have when it comes to using loops for our needs.
Any time that we bring up the idea of loops in any coding language, we can think about it as a method that is usable to help us execute a statement,
and in some cases, a set of statements, many times over and over again, depending on the results of the condition that we put in place,
and that we want the loop to be able to evaluate in the first place.
Sometimes, the loop will only go through the iteration a few times, and other times, it could go through that iteration many times,
depending on how the program works and what we want to get out of it in the process.
In many cases, we are going to find that the loops we want to work with are divided up into two categories for us to work with.
The first kind is going to be known as the entry-controlled loops.
The loops where you are going to have the condition tested at the beginning of the loop are going to be, then, part of these entry-controlled loops.
And these include a few options, including the while loop and the for a loop.
In order for us to really see how this is supposed to work, we have to make sure that whatever condition you are testing is going to start showing up at the beginning of the code.
The compiler is going to go through and check the condition that is found in the syntax first.
And if this turns out to be true, then it is going to run the loop.
This is going to work well when it comes to most of the loops that we want to work with.
But there are some situations where the loop will not run at all with this option, because the conditions will not be met.
Now, to help us out here, we need to take a closer look at a few of the loops that will fit into this category.
The first type is going to be known as the while loop.
With this one, the test condition is going to be seen right at the beginning of the loop.
And then, all of the statements that we are able to work with will be executed until the given condition, which is the Boolean when it comes to these loops, can be satisfied.
So, when the condition we are working with is seen as false with this one, then the control is going to be out from the while loop, and then the loop will have to completely stop.
Instead, it is going to head on to the next part of the code, rather than running the loop at all.
Working with this kind of coding and loop is not that hard to work with.
We are going to take a look at an example of how we are able to handle this in a moment.
So, take a look at the syntax and experiment a little bit with it to see how it is going to work.
You can also look for the while part of the code, which is going to tell us where the loop we are working with is going to start.
An example of how we are able to work with the while loop is following.
So, in the first line, forward slash, forward slash, C-sharp program to illustrate while loop.
Next line, using system semicolon.
System has a capital S.
Next line, class while loop demo.
Loop and demo have capital letters to start the name.
Next line, open squiggly brace.
Next line, public static void, main with a capital M, opening closing parenthesis.
Next line, opening curly brace.
Next line, int x equals one semicolon.
Next line, forward slash, forward slash, exit, with a capital E on the exit, when x becomes greater than 4.
Next line, lower case while, in parenthesis, x is less than, equal to 4.
Next line, open curly brace.
The next line, console, with a capital C, dot, right line, with capitals on W and the L, then open parenthesis, italics, geeks for geeks, with a G being capital for both geeks, closing parenthesis.
Semicolon.
In the next line, forward slash, forward slash, increment, with a capital I, the value of x4.
Next line, forward slash, forward slash, next iteration.
Next line, x plus plus, semicolon.
Next line, closing curly brace.
Next line, another closing curly brace.
When it comes to creating this kind of loop, one that is set up to write out a certain message three times, we are working with a while loop that told our code only to do this three times and no more.
If we had set up the loop to do this four times, then the condition we are working with would be seen as false, and we would end up with the wrong results here.
This particular code is going to see that we are true when we write it out once, because that is below four times.
The same is true as we go up the numbers and have it written out two and then three times.
But when the loop heads on through again, it is going to do that final iteration and sees that if it writes it again, it is going to do it the fourth time, and that will not work either.
It is also possible for us to go through and change up some of the terms that we want to do with this kind of loop, and see which statements work the best for your codes here.
You can also get some practice messing around a bit and change up the iterations and more to see if it is still going to work the way that you want it to work.
When you are done experimenting with that part of the code, it is time for us to move on and do some work with them for a loop.
This is going to be similar when it comes to the functions that we saw in the while loop, but the syntax is a bit different because the way that this works is different.
The four loops are going to be one of the preferred methods to work with when the number of times that you want the statement of the loop to execute is something that you know ahead of time.
When we are doing the initialization of our loop variable, or the condition that we want to test, and the decrement or the increment of the variable is going to be done with just a single line for the loop, you know that you are working with something that gives us a structure that is shorter and easier to work with for our loop.
And when you run into some problems, or you want to be able to fix some parts of your code, you may find that it is easier for us to format the loops so that they can debug later on.
Now, before we get into this for a loop a bit more, we need to take a look at a few of the important parts of this process to ensure that the loop is actually going to behave in the manner that we want along the way.
The steps that we can use here include, number one, to initialize the variable we use for the loop.
The expression that controls the loop, also known as the variable, has first to be initialized to get things going.
It is going to be the beginning point that we use with this loop.
A variable that is already declared can be used, or you can declare a local variable in the loop that we are currently in.
Number two, add in the condition for testing.
A second part of this process that we need to take a look at is the condition that we will use for testing.
This is the part that we are able to use in order to execute all of the statements that are found in the loop.
It is going to be used in a ton of situations to help us test out the condition for exiting the loop.
We need to make sure that it returns a Boolean value or a result that is either true or false.
When the condition is false, then this loop is ready to end.
Number three, the decrements and the increments.
The variable of the loop is either going to be incremental or decremented, based on what we are hoping to get out of it, and the control that we place in.
When this is ready to happen in either direction, then we will be able to switch back to our testing conditions to see if things match up or if it is time for the loop to be done at this time.
One thing to note before we go through the process of looking at some of the codings that we want to do with this is that the initialization part is only going to be evaluated just one time before the for loop starts.
If you set this up in the manner that you would really like to see, then this is going to be plenty.
With this in mind, let's take some of the information that we talked about above and add in the coding to see how this kind of loop is going to work.
So in the first line, forward slash, forward slash, C-sharp, program, to illustrate for a loop.
Second line, using system with a capital S, semi-colon.
Next line, class for loop demo, loop and demo having capital letters.
Next line, opening curly brace.
Next line, public static void main with a capital M, opening and closing parenthesis.
Next line, opening curly brace.
Next line, forward slash, forward slash, for loop begins when x equals 1.
Next line, forward slash, forward slash, and runs till x is less than, equal to 4.
Next line, closing parenthesis.
Next line, console with a capital C, dot, right line with capital W and L, opening parenthesis.
italics, italics, geeks for geeks with both G's capital, closing italics, closing parenthesis, semicolon.
Next line, closing curly bracket.
And a final line, closing curly bracket.
As we mentioned before, the two loops that we just went through are going to be known as the entry controlled loops in this language.
But now, it is time for us to look at another category of loops that we can use in our codes.
And these particular options are going to be known as the exit controlled loops.
The loops in which the testing condition is going to be found near the end of the body of the loop will fit into this kind of category.
One note that we should make with these ones, though, is that with the loops that focus on an exist, you are going to have the loop and its body evaluated at least one time.
The code will go through the loop and then see the testing conditions to check for before running through the code again.
These conditions are not going to be found at the beginning of the code.
With this in mind, we are going to look at one of the most common loops that fit into this category, known as the do-while loop.
You will find that there are a lot of times in the C-sharp language when we will want to work with the do-while loop.
You may notice, though, that it shares a few similarities with the while loop that we talked about before.
However, the main difference that shows up between the while loop and the do-while loop is that the do-while loop is set up to check the conditions after they have gone through and executed the statements.
What we mean here is that it is going to do the process of executing our loop one time, and then it will be able to check out the conditions and see whether we have gotten them to be met yet or not, rather than having this all happen in the beginning.
With this in mind, it is time for us to go through and look at some of the work that we are able to do with the syntax of the do-while loop.
These are a good type of loop to work with, and it is going to provide us with a ton of good code in the process.
In the code below, take some time to see what is going on and what parts show up when we want to create a do-while loop.
First line, forward slash, forward slash, c-sharp program to illustrate do-while loop.
Next line, using system with a capital S, semicolon.
Next line, class do-while loop demo with a capital D on the demo.
Next line, open curly brace.
Next line, public static void main with a capital M, opening closing parenthesis.
Next line, opening curly brace.
Next line, int x equals 21, semicolon.
Next line, do.
Next line, opening curly brace.
Next line, forward slash, forward slash, the line will be printed even.
Next line, forward slash, forward slash, if the condition is false.
Next line, console with a capital C, dot, right line with capital W and capital L, opening parenthesis, quotation mark, geeks for geeks, both capital G's, quotation marks, closing parenthesis, semicolon.
Next line, closing curly brace.
Next line, while, open parenthesis, x is less than 20, close parenthesis, semicolon.
Next line, closing curly brace.
Next line, closing curly brace.
Last line, closing curly brace.
Another option that is possible when working on our C-sharp loops is one that is known as the infinite loops.
These are unique, and they are basically the ones that are going to have the test condition not evaluate anything as false at any time.
What this is going to mean for us is that the loop is going to get stuck and will continuously execute the statement that you have there.
You will end up having to bring in some external force to get this loop to stop.
This is usually something that is going to happen when you work on the loop, and you forget to add in some of the conditions that are necessary for this to work well.
You need to make sure that you go through this and add in the right conditions from the beginning and ensure that it is all in the right place so that you don't end up with an infinite loop that you are stuck with along the way.
With this in mind, we need to look through this loop and see what it is able to do.
It is going to look similar to some of the loops that we did previously, but you should notice that there are going to be a few differences, which is what will make it one of these infinite loops in the first place.
An example of how you can work with an infinite loop includes this example.
First line, forward slash, forward slash, C-sharp program to demonstrate the infinite loop.
Next line, using system with a capital S, semicolon.
Next line, class infinite loop with a capital L for the loop.
Next line, opening curly brace.
Next line, public static void main with a capital M, opening closing parenthesis.
Next line, opening curly brace.
Next line, forward slash, forward slash, the statement will be printed.
Next line, forward slash, forward slash, infinite times.
Next line, for, f-o-r, opening parenthesis, semicolon, semicolon, close parenthesis.
Next line, console with a capital C, dot, right line, with a capital W and a capital L, opening parenthesis.
Quotation mark, this is printed infinite times, quotation mark, closing parenthesis, semicolon.
Next line, closing curly bracket.
Final line, closing curly bracket.
In some situations, when you write out your codes, you may find that combining together two loops, and sometimes more,
is going to be the most helpful to get what you want to get done.
If this is true for your code, you want to make sure that you are able to combine the loops, and get both of them to run until they are complete.
This is going to be important in several types of codes that you want to write out, whether you are working with a multiplication table or something simple.
A good example of the coding that you can use to make one of these loops will be like the following.
First line, forward slash, forward slash, C-sharp program to demonstrate nested loops.
Next line, using system with a capital S on the system, semicolon.
Next line, class nested loops with a capital L.
Next line, opening curly bracket.
Next line, public stated void main with a capital M, opening closing parenthesis.
Next line, opening curly bracket.
Next line, forward slash, forward slash, loop within loop, printing geeks for geeks, and geeks, both have capital G's.
Next line, for, open parenthesis, int, space, i equals 2, semicolon, i is less than 3, semicolon, i plus plus, close parenthesis.
Next line, for, opening parenthesis, int, j equals 1, semicolon, j is less than i, semicolon,
j plus plus, close parenthesis.
Next line, console with a capital C, dot, right line, with capital W and capital L, opening parenthesis.
Quotation, geeks for geeks, again, two capitals, G's for the geeks.
Quotation, close parenthesis, semicolon.
Next line, close curly bracket.
Last line, close curly bracket.
And now, we are on to the last type of loop that we are able to focus on in this chapter.
And that last loop is going to be known as the continue statement.
This is going to be a useful statement because it is designed to skip on over to the execution part of the loop if a specific condition is met, and then it will move the flow so that it is then on the next part for the updating when we would like it.
This one is often hard to explain, so we need to look at some of the codings following to help us get a better idea of how the continue statement is supposed to look and how it is supposed to work as well.
First line, forward slash, forward slash, C-sharp program to demonstrate continue statement.
Next line, using system, semicolon, and system has a capital S.
Next line, class, demo, continue, continue with a capital C.
Opening curly bracket.
And the next line, opening curly bracket.
Next line, public static void, main with a capital M, opening closing parenthesis.
Next line, opening curly bracket.
Next line, geeks for geeks, again with capital G's for the geeks, is printed only two times.
Next line, forward slash, forward slash, because of continue statement.
Next line, for, opening parenthesis, int, i equals one, semicolon, i is less than three, semicolon, i plus plus, close parenthesis.
Next line, opening curly bracket.
Next line, if, parenthesis, i, equal, equal, two, close parenthesis.
Next line, continue, semicolon.
Next line, console, dot, and again it's C, capital C on console.
Right line, right line, capital W and L again, open parenthesis, quotation mark, geeks for geeks, capital G's on both geeks, quotation marks, close parenthesis, semicolon.
Next line, close curly bracket.
Last line, close curly bracket.
There are a ton of things that you are able to do when it comes to bringing in these loops and making them work for some of our needs along the way.
Each code that you write is going to be a little bit different from all the others, so it is always a good thing for us to take some time and to learn about these loops, how each one is going to work in some of the codings that we want to create, and how they can save us time while keeping our code nice and organized along the way.
Chapter 9, the arrays, the lists, and the strings.
In this chapter, we are going to take a look at a few of the important parts of working with the C-sharp language to help round out the knowledge that we have been able to do so far.
In this chapter, we are going to look at three important parts of our coding language that are similar and kind of go together, so we will put them together.
We are going to work with the arrays, the lists, and the strings, and even though they may seem really similar to one another, they do have some important differences that are able to show up in your code.
The strings, the lists, and the arrays are going to be important in many of the codes that you decide to write in C-sharp.
And the one that you are going to use will often depend on what you plan to do with your code, and what you are hoping to see the items and the lists you are making do in the long run as well.
So with that in mind, let's look at some of the comparisons and the differences between the strings, the lists, and the arrays, some of the coding that you are able to do with them, and some more to help get us started.
So working with the strings.
The first part of this process that we need to spend some of our time on here is the strings.
To keep it simple, a string is going to be one of the objects in C-sharp that is able to have a value of the text.
Internally, the text is going to be something that is stored on a sequential and read-only collection that has objects of char.
There isn't going to be the possibility of a character for null terminating when we use this kind of string, which means that the string is able to contain any number of embedded null characters as you wish.
Along with this, you need to take the time to look at the fact that the length property that comes with our string is important here,
and it is able to represent the number of char objects that are found in the string.
What this means is that we have to look to the numbers of char objects that are there, rather than at the Unicode characters when we talk about strings.
If you want to go through and access all of the individual code points that are considered a Unicode and are in a particular string, then you need to work with the object that is called string info.
Now, before we are able to move on from here, we have to take a look at something that is going to show up in some of your codes.
You should notice that there is an object that is known as a string, and then another part that is known as system.string.
Any time that we work with C-sharp, the string keyword is simply an alias that is used for string.
This means that string and string with a capital or without a capital are going to be the same,
and you can use any option for naming that that you want to do with this workout.
As we go through this, though, you will find that the string class is unique in that it will provide the programmer with all of the methods that are needed to manipulate,
to create, and even to compare the various types of strings that are in our code.
This language can even overload some of our operators to make the common string operations easier to work with.
Keeping this in order, and making sure that we work with strings in the proper manner, whether we are using them for operations or not,
is important in much of the coding that we use.
Now that we have all this information ready and prepared, it is time for us to take a look at the coding that we can use
in order to first declare, and second, initialize the string that we are hoping to work with.
There are several methods that we are able to use to make this happen, and we are able to take a look at a few of the options following.
So, first line, forward slash, forward slash, declare without initializing.
Next line, string message1 semicolon.
Next line, forward slash, forward slash, initialize to null.
Next line, string message2 equals null semicolon.
Next line, forward slash, forward slash, initialize as an empty string, period.
Next line, forward slash, forward slash, use the empty constant instead of the literal.
Two quotation marks, period.
Next line, string message3 equals system, with a capital S, dot, string, with a capital S, dot, empty, with a capital E, and then semicolon.
Next line, forward slash, forward slash, initialize with a regular string literal, period.
Next line, string old path, P, capital P on the path, equals, quotation mark, C, colon, backslash, backslash, program files, capitalized program and files, backslash, backslash, Microsoft Visual Studio, capitals in the beginning in all three words, 8.0, quotation mark, semicolon.
Next line, colon, semicolon.
Next line, forward slash, forward slash, initialize with a capital I, with a verbatim string literal, period.
Next line, string new path, capital P on the path, equals, ampersigned, quotation, C, colon, backslash, program files, backslash, Microsoft Visual Studio 9.0,
quotation marks, semicolon, semicolon.
Next line, forward slash, forward slash, use system, dot, string, if you prefer, period.
Capitals on the use, the system, and the string.
Next line, system, with a capital S, dot, string, with a capital S, greeting, equals, quotation marks,
quotation marks, hello world, with capital H and W, exclamation mark, quotation mark, semicolon.
Next line, forward slash, forward slash, in local variables, opening parenthesis, i.e., within a method body, closing parenthesis.
Next line, forward slash, forward slash, you can use implicit typing, period.
Next line, var, temp, equals, quotation mark, i'm still a strongly, dash, typed, system, dot, string, capital S on the system and string, exclamation mark, quotation mark, semicolon.
Next line, forward slash, forward slash, use a, c-o-n-s-t, string, to prevent, single quote, message for, single quote, from.
Next line, forward slash, forward slash, being used to store another string value, period.
Next line, c-o-n-s-t, string, message for, equals, quotation, you can't get rid of me, exclamation mark, quotation, semicolon.
Next line, use the string constructor only when creating.
Next line, forward slash, forward slash, a string from a char, asterisk, comma, char, open close brace, comma, or s-byte, asterisk, dot, s-e-e, with capital S.
Next line, forward slash, forward slash, system, dot, string, both capital S's, documentation for details, period.
Next line, char, open close brace, letters, equals, opening curly brace, single quote, a, single quote, comma, single quote, b, single quote, comma, single quote, c, single quote,
closing curly brace, semicolon.
Next line, string, alphabet, equal, new string, open parenthesis, letters, close parenthesis, semicolon.
Creating a list.
Next, we are able to take a look at the lists.
These are going to be important to work with when it comes to our goals with a C-sharp language.
And they are going to be found in a lot of other options of coding languages as well.
Basically, the list is just an object that will take your variables and hold onto them in a specific order that you want.
The type of variable that the list is able to store will be defined with a syntax that is pretty generic to start with, but we are able to go through and add things away as we need.
The list and the array are going to seem really similar when we first get started, but you will notice as you get to work with them that there are a few differences that we need to keep in mind.
First, the list is something that can be dynamically sized, but the array has to be fixed size that you set in the beginning.
When you are not certain about how many variables you would like to list or how many you need at all, then the list is better because you can make more changes to it.
In addition, when you add items to one of these lists, you are able to make some changes to them as well.
With a few other options, including the tuple or the array, you can't go through and change the items that are placed inside.
With a list, though, if you feel like you need to change things up and not get them to be so much the same, even though the execution of the program is going to be still something we can mess around with, you will find that the list in this language is something that you can use on a regular basis to get work done in your codes.
You may find that with these lists, you are able to add in a lot of different items as you need.
You can move them around, make some changes, and so much more.
A good way to think about the list is like the one you make before going to the grocery store.
You can write on it a bunch, make some changes, move things off, and more.
This is how the list can work with this language as well.
Ending with the arrays
In addition to working with the strings and the lists that we mentioned above, it is time for us to take a look at the C-sharp arrays and how this works.
With the array, we can make a group of variables and store them all as long as these variables are the same data type.
You will be able to declare the array that you would like to work with by specifying the type of its elements.
So, if you would like the array to store one of the elements, regardless of the elements that we bring up, we would need to specify the object as its type.
Before we take the time to write out a bit of the code that we need to help us create some of the arrays that we want, it is important for us to go a bit more into what an array is and why this is something that we want to work with overall.
An array is going to come with a number of properties that we are able to use, and some of these will include.
Number 1. When you use an array, it is possible that it will come as either single-dimensional, multi-dimensional, or jagged.
Number 2. The dimensions and the length that you are going to see with these dimensions in our array are going to be established when you first create the array instance.
These are going to be values that we will not be able to change once we create it, no matter how long we decide to use the instance overall.
Number 3. The default values that we are able to see with the elements of an array that is considered numerical are going to start with 0, and then, when we work with the elements that are part of the reference, these are going to be null.
Number 4. When we are working with an array that is seen as jagged, we need to remember that this is actually an array of arrays.
This means that all of the different elements that we are going to use are like the reference types, and they will be initialized when we come to null.
Number 5. We also have to remember that the arrays are going to be indexed at 0.
What this is going to mean for our coding is that the array is going to start from 0 as the first element, and then, the last element will be n-1.
Number 6. The different elements that we are able to find in our array are able to come in as any type that we would like based on our code.
They can even come in as an array type.
And number 7. The types of arrays that we are working with here are going to be a reference type that we will be able to derive from the abstract base type known as array here.
Now, you will find that there are quite a few times when you work on some of the codes you want to do in C-sharp when you will need to bring in these arrays.
And having a good idea of how to work with them and what they can do for the codes you want to write will be important.
That is why it is so important to understand some of the features that we listed above.
And then, we are able to explore some of the different parts of the code that we can do with these arrays below.
There are a number of methods that we are able to use when it comes to creating our own arrays in the C-sharp language.
The code that we are going to look at below is helpful because it is set up to help us work with several different arrays,
including the jagged array, the multi-dimensional array, and the single-dimensional array based on the codes that we are working with.
The code that we can do with this one will include the following.
First line, Class Test Arrays Class with capital letters on the test, arrays, and class.
Next line, Opening Curly Bracket.
Next line, Static Void Main with a capital M, Opening Closing Bracket.
Next line, Opening Curly Bracket.
Next line, forward slash, forward slash, declare with a capital D, a single-dimensional array, period.
Next line, int, opening and closing bracket, array 1 equals new int, opening bracket 5, closing bracket, semicolon.
Next line, next line, next line, int, closing bracket, array 2 equals new int, opening closing bracket, opening curly bracket, 1, 3, 5, 7, 9, closing curly bracket,
semicolon.
Next line, closing curly bracket, semicolon.
Next line, forward slash, forward slash, alternative with a capital A, syntax, period.
Next line, int, opening and closing bracket, array 3 equals, opening curly bracket, 1 comma, 2 comma, 3 comma, 4 comma, 5 comma, 6, closing curly bracket, semicolon.
Next line, forward slash, forward slash, forward slash, declare with a capital D, a two-dimensional array, period.
Next line, int, opening bracket, comma, closing bracket, multi-dimensional array with a capital D and a capital A, 1 equal new int, opening bracket, 2 comma, 3, closing bracket, semicolon.
Next line, forward slash, semicolon.
Next line, forward slash, forward slash, declare with a capital D and set array, element values, period.
Next line, int, opening bracket, comma, closing bracket, multi-dimensional array with capital D and capital A, 2 equal, opening curly bracket, opening curly bracket, 1 comma, 2 comma, 3, closing bracket,
closing curly bracket, closing curly bracket, comma, closing curly bracket, closing curly bracket, again, semicolon.
Next line, forward slash, forward slash, declare with a capital D, a jagged array, period.
Next line, int, opening bracket, period.
Next line, int, opening and closing bracket, followed by another opening and closing bracket, jagged array with a capital A, equal, new int, opening bracket, 6, closing bracket, opening, closing bracket, again, semicolon.
Next line, next line, forward slash, forward slash, set with a capital S, the values of the first array in the jagged array structure, period.
Next line, jagged array with a capital A, opening bracket, 0, closing bracket, equal, new int, opening bracket, 4, closing bracket, opening curly bracket, 1 comma, 2 comma, 3 comma, 4, closing curly bracket, semicolon.
Next line, closing curly bracket, final line, closing curly bracket.
The strings, lists, and arrays in the C-sharp language can add on a new level to some of the work that we are trying to accomplish.
And it is important for us to take the time to learn how they can be added to our codes.
We can see that each one is going to be a little bit different, and it often depends on what we are hoping to get out of the process and how we want the code to behave as well.
Take some time to look at these three options and learn how they work together, how they are different, and how we are able to use them in our own codes.
This guidebook has taken some time to look through all of the different parts of the coding that we need to know in order to utilize the C-sharp language to write some of our own codes.
There are a lot of different aspects that we need to keep in mind when it comes to working on this language.
But when we are able to pull it all together, we will find that we can create some great codes and programs in the process.
Even though many of the modern coding languages that are out there have been designed to make programming easier for those who are beginners,
there are still a number of challenges that are going to show up when you first get started.
Learning the proper tips and tricks to help us learn this language and make sure that we can catch on to the different parts in a quick and efficient manner is going to be so very important.
One of the things that a beginner has to remember when they go through this process is that they need to practice,
and they need to learn from their mistakes and from some of the problems that show up in their coding.
Even taking a break is often enough to help you get going on this and can ensure that you won't burn out and have trouble with the process later on.
This chapter is going to take some time to look at the different parts of the code that we can do with the C-sharp language,
and some of the best tips and suggestions that will ensure we can do as much as possible with some of our own coding choices along the way as well.
There is a lot to take in when you first get started with coding in any new language,
and it is important to learn how to make this as user-friendly as possible.
Some of the tips and suggestions that you are able to follow when it comes to working with the C-sharp language includes
getting lots of practice.
The first tip that we are able to take when it is time to learn the C-sharp language is to get a lot of practice.
There are a ton of codes and suggestions and things to learn about in this guidebook,
but if you don't actually open up the compiler with C-sharp and try some of it out,
well, you are never going to gain the skills and more that you need to really make this work for you.
That is why the first rule that we need to follow here is to play around with the code,
get as much practice as possible.
With any of the new subjects that we want to explore and learn about in any coding language,
the sooner that we are able to get our hands dirty and start messing around with the code,
the faster that we can actually learn some of the concepts that are out there.
You can't go through and read the information without using it a bit,
and then expect that you will remember that information and be able to utilize the code for your own programs.
You will have to actually mess with the code and see how it works.
Now you will have to find that the best place for us to get started with this tip
is to just open up our C-sharp compiler and start to do some of the codings that we want right away.
Take some of the examples that are in this guidebook and just mess around with them a little bit.
Even just typing them into the compiler to start with is a good step in the right direction,
and it will ensure that you are able to get some practice.
You can then work and explore from there to get the right results.
The Fundamentals Are Your Friend
Another thing to consider here is how to learn some of the fundamentals that come with our coding language.
Even though it sometimes seems like the fundamentals are going to be too basic to work with,
and you may feel like you should just race through them without a thought,
it is still important to spend our time learning about how this works.
As easy as they are, they are really important to work with as well.
The better that we are able to work with these fundamentals,
the easier it is for us to start mastering some of the more advanced stuff that is going to show up.
Those programmers who try to get into a programming language and then rush through the beginning parts,
and do not spend the proper time on some of the fundamentals,
are going to be the first ones who get stuck when they need to make the transition
into some of the advanced material that will come later on.
So, before you miss out on some of the first classes that we need here,
and skip through some of the basics that are all important in all of this,
make sure to learn more about the fundamentals,
and what we are able to do with it along the way.
The next thing is to write it out.
It is normal to want to get started with programming,
and just want to open up the compiler and start doing all of the coding there.
And while this is one of the methods to use,
sometimes trying it out in a different manner,
and writing it out by hand, rather than trying to type it all in,
at the same time, is going to be the trick that will help us to get this done.
So, bring out the pen and paper, and write out our codes, because that will help.
There are a ton of advantages to the computers out there, and there are a lot of benefits to using it.
But sometimes, the best way to learn something new is to actually write it out, and then work from there.
Whether you decide to use some scrap paper, a notebook, a whiteboard, or another option,
taking the time to code out everything by hand, is going to take some time to work with.
There is the requirement to use more caution, precision, and even intent behind all of the lines of code that you try to write out.
You also are not able to check out the code when writing it out like you can on the computer, which forces you to pay more attention.
This method is going to take more time, and be really consuming when it is time to get things done.
But, it is going to be a great method that helps us to go through and become a better developer in the process.
And if you plan to use this through college or for a new job, being able to write out the codes that you are using,
and utilize this for your needs, is going to be so important to the success that you are able to see as well.
The more time and the more practice that you are able to give to writing out some of your codes by hand,
the better you will get at understanding the coding and all that you can do with it.
It forces the programmer to slow down and actually focus on what they want the codes to do.
And then, you can use this as a way to catch your own mistakes and learn what works the best for you,
and what does not work the best for you.
Ask for help!
When we first get started with writing out codes in this manner,
it is possible that you have a ton of grand ideas of how things are going to work,
and how you will become the greatest code writer of all time.
Well, you may believe that nothing is going to go wrong with this,
and that you can handle it all in no time at all.
And one of the biggest misconceptions that are going to show up with the work that we want to do here,
is that we assume we really don't need to start any kind of help with our coding at all.
While it would be awesome to get started with coding in any language, even C-sharp on our own without any help,
we really do have to face reality a bit, and remember that we are going to learn in a faster and more efficient manner,
when we have the right kind of peer feedback and mentors to help us out with this.
What may seem like an impossible bug to work with, or a topic that seems like it is unlearnable when you do it in your own way,
you will find that when someone with more experience steps in and helps you out,
things get a lot easier, and you can actually learn something new.
So whether it is online where you ask for help, or you are able to find someone who is able to come to you in person and offer advice,
you should never be scared to ask someone for help.
All of the programmers who are more advanced right now were at one time in the same place as you are now.
And most developers are going to love that they actually get a chance to code again,
and will be more than willing to help you out with some of the coding that you would really like help with.
Of course, we need to be careful with this, and not take it for granted at all through the process.
The best rule to follow here is to never take more than 20 minutes getting someone to help you figure out something with your code.
And you should not ask for help without spending at least 20 minutes on it ahead of time,
trying to learn how it works and what you are able to do with it as well.
Take breaks.
There are going to be times when you are writing out some of the codes that you want to do in the C-sharp language,
and then you get stuck on something.
You spend some time on it, but that just seems to make the whole thing worse.
You keep working at it and working at it, effectively making the problem worse,
or not being able to find the problem at all, and your frustration levels keep going up.
You want to be able to fix the problem, get on with your coding,
but you just get angrier, and the codes just get messier in the process.
So when this happens, this is something that can happen to everybody.
We must take the time to take a break.
This is probably the last thing that we want to worry about when it comes to working with the C-sharp language and some of the codes,
but it is going to allow us to take a break from the problem, get some fresh air, or at least do something else for a small amount of time.
And often, after you take a break, and then you come back to it,
you will find that the problem, which seemed impossible at the start, is actually really easy to fix.
No one wants to give up when they have put in so much time and effort to this process,
but in the long run, it can cut down on the frustration, and it will ensure that you can fix up your code in no time.
Use a C-sharp Community
One of the neat things that we are going to find when it is time to do our coding in the C-sharp language and more,
is that there is a large community of different programmers and developers along the way who are able to help you out.
These communities are going to include a lot of programmers who have been in all stages of the process.
Some are beginners, some have been in the game for a bit, and some are really more advanced.
There is great news for you because it allows us a chance to go through and learn a lot of things.
We can ask questions of those who are in the community.
We can find a lot of the codes that we need to help us work on a variety of programs and to learn something new.
And we are able to talk to others about the programming language and meet with some great people
while asking a lot of questions along the way as well.
It is a good idea for you to go through and make sure that you are able to really find the community that works for you.
There are a ton of these communities found online, and we just need to make sure that we find the one that seems to work the best for us.
This is a great place to resort back to when there are some problems with your code, or when you would like to be able to get something figured out that is not working out that well to start with for your code.
Utilize the sample codes provided.
While this guidebook took some time to show you a few samples of code to show how all the different types of coding are supposed to work,
it is not enough to build up your understanding just to look over the code.
To help develop a true understanding, you need to take some time to run and tinker with the code to see what it can do.
The more times that you are able to spend working on the code, the better off you will be along the way.
With the addition of things like instructions and comments, the sample codes that you are going to work with are packaged in a manner that is digestible in an easy manner by the listener.
But you will find that sometimes, these are hard to replicate from scratch.
Listening is not going to be the same thing as understanding, and actually going through the process of writing out some of the codes on your own, and then running it,
is going to make sure that you can learn how to code much faster than before.
The more that we are able to spend writing and practicing some of the codes that we find, and then testing these codes out as well,
and the more that we can tinker with these as well, the easier the coding language is going to be along the way.
This is a great way to make sure that we are able to learn what is going on, what will not work when we make changes, and a lot more in the process.
Just reading the code may work in some cases, and it seems like it is the better option to work with,
but it is not going to show us the best way to be efficient in order to actually create your own programs.
Working with a C-sharp language is a great choice to make.
There are a lot of options that we are able to focus on, and it is a good option for most of the programs that we want to be able to create.
Even as someone who is brand new to the world of programming, and is not used to doing any kind of coding,
I will find that the C-sharp language is a good option to work with.
When you are ready to get started with the process of learning a new coding language,
you will find that these tips are going to ensure that you are able to get started on the right foot.
Conclusion
Thank you for making it through to the end of C-sharp for beginners.
Let's hope it was informative, and it was able to provide you with all of the tools that you need to achieve your goals, whatever they may be.
The next step is to get to work on using some of the different codes that we have outlined in this guidebook,
and to take your time to learn more about how this language is going to work for your needs.
If you have decided that the C-sharp language is the right one for you to work with, then you are in good company.
There are many programmers throughout the world who are going to use this language,
and now that you are done with this guidebook, you can join the ranks with them now as well.
There are so much knowledge and information inside of this guidebook that we are able to work with,
and you will find that this is going to be one of the best options that we are able to utilize
when it comes time to work with the C-sharp language.
We took the time to look at the classes and objects, how to create some of our own codes,
how to work with the loops and conditional statements, and so much more.
When all of this can come together and combine, you will find that writing out your own codes
is going to be simple and easy, and you can get it done in no time.
This guidebook took the time to help us learn more about the C-sharp language and all that it is able to do for us.
So when you are ready to become a master at programming, and ready to make all of this coding work for your needs,
make sure to check out this guidebook to help get started.
Finally, if you found this book useful in any way, a review on Amazon is always appreciated.
Here are all the books published by Julian James McKinnon.
Linux for Beginners, a step-by-step guide to learn architecture, installation, configuration,
basic functions, command lines, and all the essentials of Linux, including manipulating and editing files.
Hacking with Kali Linux, this is a step-by-step guide with tips and tricks
to help you become an expert hacker, to create your own keylogger, to create a man-in-the-middle attack,
and to map out your own attacks.
Hacking for Beginners, a step-by-step guide to learn how to hack websites, smartphones, wireless networks,
work with social engineering, complete a penetration test, and keep your computer safe.
C-sharp for Beginners, a step-by-step guide to learn C-sharp, Microsoft's popular programming language.
C++ for Beginners, a step-by-step guide to learn, in an easy way, the fundamentals of C++,
programming language with practical examples.
C++ for Beginners, a step-by-step guide to learn SQL, which is structured query language,
from installation to database management and database administration.
C++ for Beginners, a step-by-step guide to learn one of the most popular and easy programming languages,
learn basic Python coding fast with examples and tips.
Data Science with Python, the ultimate step-by-step guide for beginners to learn Python for Data Science.
Arduino, learn how to create interactive electronic objects, setting up your board, discover how coding works,
create your circuit, plus all the essentials of Arduino programming for beginners.
And Raspberry Pi, a step-by-step guide for beginners to learn all the essentials of Raspberry Pi,
and create simple hardware projects like an arcade box, or turning your device into a phone.
Copyright 2020 by Julian James MacKinnon. All rights reserved.
The material contained herein is presented with the intent of furnishing pertinent and relevant information
and knowledge on the topic with the sole purpose of providing entertainment.
The author should thus not be considered an expert on the topic in this material,
despite any claims to such expertise, first-hand knowledge, and any other reasonable claim
to specific knowledge on the material contained herein.
The information presented in this work has been researched to ensure its reasonable accuracy and validity.
Nevertheless, it is advisable to consult with a duly licensed professional in the area pertaining to this topic,
or any other covered in this book, in order to ensure the quality and validity of the advice
and or the techniques contained in this material.
This is a legally binding statement, as deemed so by the Committee of Publishers Association
and the American Bar Association in the United States.
Any reproduction, transmission, copying, or otherwise duplication of the material contained in this work
are in violation of current copyright legislation.
No physical or digital copies of this work, both total and partial,
may not be done without the publisher's express written consent.
All additional rights are reserved by the publisher of this work.
The data, facts, and description of events forthwith shall be considered as accurate,
unless the work is deemed to be a work of fiction.
In any event, the publisher is exempt from responsibility for any use of the information contained in the present work
on the part of the user.
The author and publisher may not be deemed liable under any circumstances for the events resulting from the observance
of the advice, the tips, the techniques, and any other contents presented herein.
Given the informational and entertainment nature of the content presented in this work,
there is no guarantee as to the quality and validity of the information.
As such, the contents of this work are deemed universal.
No use of copyrighted material is used in this work.
Any references to other trademarks are done so under fair use
and by no means represent an endorsement of such trademarks or their holder.
This has been C Sharp for Beginners, a step-by-step guide to learn C Sharp, Microsoft's Popular Programming Language.
Written by Julian James McKinnon.
Narrated by Ivan Basinius.
Copyright 2020 by Julian James McKinnon.
Production Copyright by Julian James McKinnon.
Audible hopes you have enjoyed this program.
