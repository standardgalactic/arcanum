This is Audible.
Python, Programming Boot Camp, the Crash Course for Understanding the Basics of Python Computer Language.
Written by David Maxwell. Narrated by Dave Wright.
Introduction
I want to thank you and congratulate you for downloading the book, Python Programming for Beginners.
This book contains proven steps and strategies on how to master the basic elements of Python programming language.
This e-book will teach you important information regarding Python.
It will explain concepts and ideas that are being used by Python programmers.
Additionally, it will give you actual codes and statements.
That means you'll know the theoretical and practical aspects of the Python language.
In this book, you will learn what Python is, how to use Python, common Python data, and much more.
Thanks again for downloading this book. I hope you enjoy it.
Chapter 1. What is Python?
Python is an advanced and structured programming language.
You can use it to accomplish various programming tasks.
Additionally, Python is an open-source language.
Thousands of computer experts across the globe are using and improving it on a daily basis.
A Dutch programmer named Guido van Rossum created Python in the earlier part of the 90s.
He named it after a comedy show titled, Monty Python's Flying Circus.
Computer experts consider Python as a powerful programming language.
System administrators are using it to develop different types of computer software.
Actually, Python has greatly helped in improving Linux systems.
Most of Linux's main components are written using Python.
IT professors also use this language to teach basic programming.
That means Python is versatile, powerful, and easy to learn.
Before execution, this programming language gets compiled into bytecode automatically.
The system saves the bytecode onto the hard disk.
That means the user doesn't have to perform compilation until changes are made on the source.
Additionally, Python is a dynamically typed programming language that allows, but doesn't require, object-oriented constructs and features.
Unlike other programming languages, Python considers whitespace as an important part of its codes.
In fact, the whitespace's significance is the most distinctive attribute of Python.
Rather than block delimiters, which is being used by C programming languages, Python uses indentation to indicate the starting point and end point of code blocks.
Another cool aspect of Python is that it is available for all platforms.
You can easily install and use Python on Linux, Macintosh, and Windows computers.
That means computer programs written using this language are extremely portable.
You can use them with any available platform.
Chapter 2. Python's Interactive Mode
The Python programming language has two different modes.
1. Normal
In this mode, you'll run the scripted and completed Python files using the built-in interpreter.
2. Interactive
This is a command-line program that can give instant feedback for each of your statements.
This mode gives feedback while performing previous statements stored in the machine's memory.
Technically, the interactive mode evaluates statements individually and holistically, while new ones are being entered into the Python interpreter.
This chapter will focus on the interactive mode.
To activate it, just enter Python without adding any argument.
This is an excellent way of learning the programming language.
You'll play around statements and syntax variations.
After typing Python, the screen will show you a message similar to the one below.
Important note
If Python doesn't work, make sure that you have set your path properly.
Notice that the message has greater than, greater than, greater than at the end.
These symbols indicate that you are using Python's interactive mode.
Here, the system will immediately run whatever you type.
Actually, if you type 1 plus 1, Python will give you 2.
You can use this mode to become familiar with Python and test its capabilities.
If you have learned new statements, activate the interactive mode and check them one by one.
The image below shows an interactive session.
As you can see, Python's interactive environment is an excellent learning and programming tool.
However, you have to be extremely careful when using it since it can be confusing sometimes.
For instance, the image below shows a Python script that is considered valid in the interactive mode.
If 1
Print
True
Print
Done
If you'll use this script as shown in the interactive mode, you'll get a surprising result.
The Python interpreter says that the second print's indentation is unexpected.
Before writing the next statement, you need to end the first one, that is, the if statement,
using a blank line.
For instance, you must enter the statements using this format.
If 1
Print
True
Blank line
Print
Done
This will give the following result.
The Interactive Mode
You may use negative I to indicate the interactive mode.
This flag will stop Python from closing when the program is done.
Computer programmers use this flag a lot, especially during the prototyping and debugging station.
Here's an example.
Python
Hello.py
Chapter 3
The Basics
In this section, you'll learn about the basics of the Python programming language.
The following pages will teach you how to create programs using Python.
Additionally, you'll know about the different parts of Python statements, such as strings and
variables.
Study this chapter carefully because it can help you become a great Python user.
How to create Python programs
In general, programs created using Python are just ordinary text files.
That means you can edit them with typical text editors.
Use your favorite editor.
You can create or improve Python programs using any text editing software.
However, it would be great if you can use one that has syntax highlighting for Python statements.
Your first program.
Inexperienced programmers start their Python journey by writing the Hello World program.
Here, the program simply states, Hello World, and then closes itself.
Try this simple exercise.
1.
Access your favorite text editor.
2.
Create a file and save it as hello.py.
Inside that file, enter the following line.
Print.
Hello.
World.
The Hello World program utilizes print, a function that sends the parameters of a statement
to the machine's terminal.
The print function adds a new line character to the statement's output.
Thus, it automatically transfers the cursor to the subsequent line.
Important note.
For Python revision 2, print is considered as a statement instead of a function.
That means you may use it without any parentheses.
In this situation, print does two things.
It sends the whole line to the terminal.
It allows users to indicate multi-line statements by placing a comma after the last character.
You've just completed your own program.
Now you are ready to run it using Python.
Notice that this procedure differs based on the OS, that is, operating system, you are using.
For Windows computers.
1.
Create a new folder.
You should only use this folder for Python computer programs.
Save the hello.py file in this folder.
For this exercise, let's assume that you name the folder c colon backslash python files.
2.
Access the Start menu and choose Run.
3.
Open the OS terminal by typing cmd in the dialog box.
4.
Type cd backslash python files and hit enter.
This action will set the Python files folder as the directory.
5.
Run the program by typing hello.py, that is, the program's file name.
For Mac computers.
Create a folder that will be used for Python programs only.
For this exercise, name this folder Python files and save it in your computer's home folders.
That is, the one that holds folders for music, movies, pictures, documents, etc.
Save the hello.py program into the Python files folder.
To access the application section of your computer, go to utilities and activate the terminal software.
Enter cd space python files into the dialog box and press enter.
Run the hello world program by typing python dot hello dot py.
For Linux computers.
Create a folder and name it Python files, then save the hello dot py file in it.
Activate the computer's terminal program.
Follow these instructions.
For KDE users, go to the main menu and choose Run command.
For Genome users, go to the main menu, access the application section, open accessories, and
choose Terminal.
Enter cd tilde front slash Python practice.
Run the program by typing Python dot hello dot py.
The outcome.
The screen must show Hello World.
That's it.
If your computer screen shows this message, you did an excellent job.
Or one step closer to being a great Python programmer.
The variables and strings in the Python language.
This section will focus on strings and variables.
As a beginner, you should know that these two types of data play a huge role in the Python
programming language.
The variables.
Basically, variables are things that hold changeable values.
That means you can consider variables as boxes that can hold different kinds of stuff.
Keep in mind that you can use variables to keep different things.
For now, however, let's use them for storing numbers.
Check the screenshot below.
Lucky equals 7.
Print Lucky 7.
The code above generates a variable named Lucky.
Afterward, it assigns the variable to a number, that is 7.
If you ask Python about the data stored in Lucky, you'll get 7 as the response.
You may also edit the value inside variables.
For instance, changing equals 3.
Print changing, 3.
Changing equals 9.
Print changing, 9.
Different equals 12.
Print different, 12.
Print changing, 9.
Changing equals 15.
Print changing, 15.
With the codes above, you saved a variable named changing, assign the number 3 to it, and confirm
that the first statement is correct.
Afterward, you assign the number 9 to the variable and ask the system about the new content.
The Python language replaced 3 with 9.
Then you created a new variable named different.
You assign the number 12 for this variable.
That means you currently have two different variables, namely changing and different.
These variables hold different data.
Setting another value for one of them won't affect the other.
Python allows you to assign the value of an existing variable to a different one.
For instance, red equals 5.
Blue equals 10.
Print red, blue.
5.
5.
5.
5.
10.
Red equals blue.
Print yellow, red, blue.
5.
5.
10.
Red equals blue.
Print yellow, red, blue.
5.
10.
10.
10.
To prevent confusion, remember that the variable's name is always shown on the left side of the assignment
operator, that is the equal sign.
The variable's value, on the other hand, is displayed on the operator's right side.
That means for each variable, you'll see the name first followed by the value.
At first, the code created two variables, red and blue.
Then, it assigned different values for each, 5 and 10 respectively.
Notice that you can place different arguments on the print function to make it show several
items in a single line.
As the result shows, the red holds 5 while the blue stores 10.
Then, the code created another variable and named it yellow.
Afterward, the code instructed Python that yellow's value should be identical to that
of red.
Because of that, Python assigned the number 5 to yellow.
Next, the code instructed Python that red's value must be changed so that it is equal to
that of blue.
The value of blue is 10, so Python assigns that number to red.
The number 5 is thrown away.
At the last part of the screenshot, Python indicates the value of red, blue and yellow
10, 10, 5 respectively.
Wait!
The code told Python that the value of yellow must be equal to that of red, didn't it?
Why does the screenshot show that yellow's value is 5 even though red's is 10?
It's simple.
The code instructed the Python language that yellow should have red's value at the moment
it was coded.
The connection between red and yellow stopped as soon as Python assigned a value to the latter.
Yellow received 5 and 5 will stay regardless of what happens to its original source, unless
a new statement is given.
The Strings
Basically, strings are lists of characters that follow a certain arrangement.
What is a character?
Let's relate this concept with a physical object, the keyboard.
Anything you can enter using a keyboard is considered as a character.
That is, numbers, letters, punctuation marks, etc.
For instance, birthday and Halloween are strings.
These strings are formed by letters, that is characters.
You can also add spaces in your strings.
Good morning contains 12 characters.
Good equals 4.
Space equals 1.
Morning equals 7.
Currently, you can include any number of characters in your Python strings.
That means there are no limits when it comes to the quantity of characters that you can use.
Actually, you can even create a string that has no character in it.
Programmers call it an empty string.
With Python, you can declare strings in three different ways.
You can use any of these methods.
However, make sure that you will be consistent regarding your string declarations.
Begin and end your strings using the same declaration.
Check the screenshot below.
As you can see, quotation marks start and end strings.
By default, Python will consider the quotation marks in your statements as markers for the
beginning or end of strings.
In some situations, however, you have to include quotation marks in your statements.
That means you must stop Python from ending your statements prematurely.
That is, when it sees the quotation marks in your codes.
You can accomplish this using a backslash.
By adding a backslash right before the quotation marks, you are telling Python that those marks
are included in the string.
The act of putting a backslash before a different symbol is known as escaping that particular symbol.
Important note.
When adding a backslash to your Python strings, you still need to escape it.
That is, place a backslash before the needed backslash.
This action will inform Python that the backslash must be used as an ordinary symbol.
Analyze the screenshot below.
After analyzing the examples above, you will realize that only the characters used to quote
strings must be escaped.
This simple rule makes Python statements easy to read.
To help you understand strings further, let's visit your first Python program.
Well, it seems you have used strings even before you learned about them.
You may also concatenate strings in the Python programming language.
Concatenation is the process of combining two different strings by adding a plus sign between
them.
Let's use the same program again.
In the example above, hello and world are entered as separate strings.
This is done by enclosing both strings in quotation marks.
Then the plus sign is added between the strings to combine, that is, concatenate them.
Did you see the space between the comma and the quotation mark?
That space is mandatory.
Without it, you'll get the following string.
Python also allows you to repeat strings.
That means you won't have to type the same thing several times.
To repeat strings, just use the asterisk.
Lastly, you can utilize len to count the characters that form any string.
You just have to place the string you want to check inside the parentheses.
Here's an example.
Now that you know how strings and variables work, you're ready to use them together.
As discussed earlier, variables can hold different types of information, even strings.
Here's an example.
The program above creates a variable named question.
Then, it stores the string.
What did you have for lunch, inside that variable?
Lastly, it instructs Python to give out the string.
It is important to note that you should not enclose the variable with quotation marks.
By omitting quotation marks, you are telling Python that you are using question as a variable,
not as a string.
If you'll enclose the variable using quotation marks, Python will consider it as an ordinary
string.
It will give out question rather than, what did you have for lunch?
How to combine strings and numbers.
Analyze the screenshot below.
This code is designed to accept a number from the programmer.
Add 10 to that number and give out the sum.
If you'll run it, however, you'll get the following error message.
What's happening here?
Instead of giving out a number, Python shows type error.
This message means there is an issue with the information entered.
To be specific, Python cannot determine how to combine the two kinds of data being used,
strings and integers.
For instance, Python assumes that number, that is a variable, contains a string rather than a
number.
If the programmer types in 15, Python will think the variable holds a two-character string,
1 and 5.
What can you do to inform Python that 15 is a number?
Additionally, when asking for the answer, you are instructing Python to combine a number,
that is, plus 10, and a string.
The programming language doesn't know how to accomplish that.
Python can only combine two strings.
How can you make Python treat numbers as strings, so you can use it with a different string?
Fortunately, you have two powerful functions at your disposal.
1.
str This function can convert numbers into strings.
2.
int This function can convert strings into numbers.
When using these functions, you just have to place the string number you want to convert
inside the parentheses.
If you will apply this method to the code given earlier, you will get the following result.
THE FUNDAMENTAL CONCEPTS Python has five basic concepts.
Namely, one, scope.
For large systems, you have to limit the relationship between codes.
This is important if you want to prevent errors or unpredictable system behaviors.
If you won't restrict the effect of your codes on other codes, the entire system might
get confused.
You can control the scope of your codes by assigning specific name groups to each programmer.
For instance, one programmer will use the names of countries, while another one uses names
of animals.
This technique can help in limiting the connections between your Python codes.
2.
OBJECTS Similar to other object-oriented languages, Python uses code and data groups.
In Python, you will create, that is instantiate, objects using classes, a set of templates used
in this programming language.
Objects possess attributes, which store the different pieces of data and code that form
the object.
Accessing an object's attribute is easy.
1.
Enter the object's name and place a dot after it.
2.
Specify the name of the attribute attributes you want to access.
3.
Namespaces Python has dir open parenthesis close parenthesis, a pre-installed function that
can help you understand namespaces.
After starting Python's interpreter, you can use dir open parenthesis close parenthesis to
show the objects in the default or current namespace.
Check the screenshot below.
You can also use dir open parenthesis close parenthesis to list the available names inside
module namespaces.
For this example, let's use type type open parenthesis close parenthesis on underscore
builtins underscore, an object from the screenshot above.
This function, that is, type open parenthesis close parenthesis, allows us to know the file
type of an object.
See the screenshot below.
The image shows that underscore builtins underscore is a module.
That means you can use dir open parenthesis close parenthesis to list the names inside underscore
builtins underscore.
You'll get this result.
This concept is easy to understand.
Basically, namespaces are places in which names can reside.
Every name inside a namespace is completely different from those outside a namespace.
Computer programmers refer to this namespace layering as scope.
In general, you should place names inside a namespace if those names have values.
For instance, the image above shows that you can add names to any namespace just by using
a simple statement, that is, import.
That code used the import statement to add math to the active namespace.
If you want to know what that object is, you can run this command.
It says that math is a module, thus it has its own namespace.
You can show the names inside math's namespace using the dir open parenthesis close parenthesis
function.
4.
Case Sensitivity
Variables are always case sensitive.
That means Smith sensitive.
That means uppercase Smith, lowercase Smith, and sensitive.
That means all uppercase Smith, uppercase S-M-I-T-H, and lowercase S-M-I-T-H are three different variables.
5.
Tabs and spaces don't mix.
Since white spaces are important in Python, keep in mind that tabs and spaces cannot be mixed.
Be consistent while indenting your Python statements.
If you'll use spaces for indentation, stick to that character.
This is an important concept that many beginners forget about.
Although tabs and spaces have the same appearance, they give different meanings when read by the
Python interpreter.
That means you'll experience errors or weird results if you mix them in your statements.
Important note!
If you prefer to use spaces, make sure that you will hit the spacebar four times for each
indentation.
Chapter 4 Sequences Sequences, one of the basic structures
in programming, allow you to save values easily and efficiently.
Python supports three types of sequences, namely lists, tuples, and strings.
Let's discuss each sequence in detail.
As their name suggests, lists are collections of values that follow a certain arrangement.
You can use square brackets to create a list.
For instance, you can use the statement below to initialize an empty list.
You should use commas to separate values.
Here's a sample list.
You can place different kinds of values inside the same list.
For instance, the list above holds numbers and letters.
To enter to characters within a string, you can access listed items using indices that start
at zero.
Accessing a listed item is easy.
You just have to specify the name of the list where that item belongs.
Then, indicate the number of the item inside the list.
Enclose the number using square brackets.
Here's an example.
Python also allows you to enter negative integers.
These numbers are counted backwards, starting from the last item in the list.
You may also use len to determine the quantity of items inside a list.
Check the image below.
Lists are similar to typical variables in one aspect.
They allow you to change the items inside them.
Analyze the following example.
You can also slice strings.
Python offers different methods of adding items to any list.
However, the easiest method is this.
To remove items, you can apply the DEL statement onto the list.
Here's an example.
Lists automatically fix themselves after each item deletion.
That means you won't see any gap in the numbering of items.
Tuples Tuples and lists are similar except for one
thing.
Tuples cannot be edited.
After creating a tuple, you won't be able to change it in any way.
You can't expand, edit, or delete the elements within a tuple.
If you'll ignore this immutability, you can say that lists and tuples are identical.
You should use commas when declaring tuples.
And you have to differentiate tuples using parentheses.
This process is similar to performing several assignments using the same line.
Here's a simple example.
Strings.
You've already learned about strings.
However, it is important to discuss it again as a Python sequence.
For other programming languages, you can access the character's elements inside strings using
square brackets, known as the subscript operator.
This method is also effective in Python.
Python assigns numbers to indices using this formula.
0, n1, n represents the number of characters in the string.
Check the screenshot below.
Indices work with the characters that come right after them.
For negative indices, you should count backwards.
Unlike other programming languages, Python allows you to place up to two numbers inside
square brackets.
You can do this using a colon.
For sequences that concentrate on numeric indices, the combination of brackets and colons returns
the portion between the indices.
This technique is called slicing.
If you'll slice a string, you will get substrings.
Analyze the screenshot below.
The statements given above show an important rule.
If you'll omit a number, Python assumes the missing number as the start or end of that particular
sequence, depending on the position of the missing number.
Dictionaries.
Dictionaries are similar to lists.
Unlike tuples, dictionaries allow users to modify their content.
That means you may add, edit, and delete the elements of any dictionary.
The main difference between lists and dictionaries is this.
Dictionaries don't bind their elements to any number.
A dictionary's element has two aspects, one, the key, and two, the value.
If you'll call the key of a dictionary, you'll get the values related to that particular key.
Computer programmers consider lists as special dictionaries where numbers represent the key
of each element.
How to use a dictionary.
You should use curly braces when declaring a dictionary.
Also, you should use the following format when declaring elements for a dictionary.
1.
Enter the key of the element.
2.
Add a colon.
And 3.
Assign the value.
Here's an example.
Additionally, adding elements to dictionaries is simple and easy.
It's like adding an ordinary variable.
Answer 5.
The Different Types of Data Basically, data types define an object's capabilities.
In other languages, the effectiveness of an operation is tested by ensuring that the object
cannot be stored where the operation is going to be performed.
This system is known as static typing.
However, Python uses a different approach.
This programming language allows you to store the object's data type inside that object.
Python also checks the validity of each operation as soon as you run them.
Programmers refer to this system as dynamic typing.
This chapter focuses on the different types of data that you can use with Python.
The Standard Types.
Python has a set of standard data types.
These types are pre-installed into this programming language.
Let's divide these types into small groups.
This section will use the hierarchy system used in Python's official documentation.
The Numeric Types.
Int.
Int.
This stands for integers.
For Python 2.x, int is identical to C longs.
Long.
It stands for long integers whose length is non-limited.
You'll find this type in systems that use Python 2.x.
Float.
Float.
This stands for floating point numbers.
Float is the equivalent of doubles in C.
Complex.
This type is composed of complex numbers.
The Sequences.
List.
Tuple.
Byte.
This is a sequence of numbers within a 0 to 255 range.
You'll find bytes in systems that use Python 3.x.
ByteArray.
This is the mutable version of bytes.
Str.
This stands for string.
Python 2.x systems represent strings as sequences of 8-bit items.
Python 3.x systems, however, represent them as sequences of Unicode items.
The Sets.
Set.
This is an unorganized group of distinct objects.
Frozen Set.
This type is the immutable version of sets.
The Mappings.
D-I-C-T.
This stands for Python dictionaries.
Computer programmers refer to this type as a hash map or associative array.
In general, each element of a dictionary has a corresponding definition.
Mutable and immutable objects.
In the Python language, data types are categorized based on the mutability of their contents.
Keep in mind that immutable data types prevent you from changing the objects inside them.
That means you'll succeed in slicing or reassigning the objects of mutable data.
Immutable ones, however, will give you an error message.
Here's an important principle that you should remember.
Variables are simple references to the objects inside a machine's memory.
Let's assume that you paired an object and a variable using the following statement.
With the statement given above, you are making variables, that is, 1, a, and s point to certain objects.
Python stores this relationship between variables and objects in the machine's memory.
Thus, you can conveniently access objects whenever you want.
For the next example, let's say you performed a reassignment using the code below.
In this new statement, you link the variables to other objects.
As you've learned earlier, you can only change mutable objects.
1 equals 1 is good, but s equals A will give you an error message.
How to create objects of a defined type
Literal integers
You can enter literal integers in three different ways.
For decimal numbers, you can enter these numbers directly.
For hexadecimal numbers, you have to prepend 0 uppercase x or 0 lowercase x to enter this kind of number.
For octal literals, the method of entering these integers depends on the Python version you are using.
For Python 2.x, you must prepend a 0 to enter octals.
For Python 3.x, you should prepend O to enter octals.
Floating point integers
You can enter these numbers directly.
Long integers
You can enter a long integer in two ways.
Directly
1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 is considered as a long integer.
By appending the letter L, one L is considered as a long integer.
If a computation that involves short integers overflows, it is automatically converted into a long integer.
Complex numbers
Complex numbers
You can enter this object by adding two numbers.
That is, a real number and an imaginary number.
Then, enter these numbers by appending the letter J.
That means 11 plus 2J and 11J are complex numbers.
Strings
You can enter strings as single or triple quoted objects.
The difference between these two types lies in their delimiters and their potential length.
Single quoted strings are restricted to one line only.
You can enter single quoted strings using pairs of single quotations or double quotation marks.
Check the following example.
Triple quoted strings are similar to their single quoted counterparts, but they can cover multiple lines.
Obviously, their delimiters, that is the quotation marks, should be matched.
You must enter these strings using three single or double quotation marks.
Here's an instructive screenshot for you.
Tuples
You can enter tuples using parentheses.
Place commas between objects to separate them.
You can enter a single element tuple by enclosing it in parentheses and adding a comma.
Here's an example.
Lists
Lists work like tuples, though they require square brackets.
Dictionaries
You can create Python dics by listing some pairs of values and separating each pair using a colon.
Use commas to separate dictionary entries.
Then, enclose the statements using curly braces.
Check the image below.
Null Objects
Python uses none as a null pointer analog.
In this aspect, Python is similar to many programming languages.
Actually, none isn't a null reference or a null pointer in itself.
It is an object that only has one instance.
You can use none as a default argument value for functions.
In Python, you must compare objects using none, using is instead of equals equals.
Chapter 6 The Errors That You Will Encounter
Python users encounter three kinds of errors.
Exceptions, logic errors, and syntax errors.
Exceptions
These errors occur when the Python interpreter cannot perform an action, though it knows what should be done.
A good example would be running a Google search while you are offline.
The machine knows what to do, but it cannot accomplish it.
Logic Errors
Logic errors are extremely hard to find.
Also, they are the most common errors that you'll get.
Python programs that are affected by logic errors can still run.
However, they may crash or produce unexpected results.
You can use a debugger to find and solve logic errors in your programs.
Syntax Errors
This is perhaps the most basic kind of error.
A syntax error occurs when the Python interpreter cannot understand a code.
According to programmers, syntax errors are fatal most of the time.
You cannot execute codes that contain this error.
Syntax errors are often caused by typos, wrong arguments, or wrong indentation.
That means you should inspect your codes for these mistakes whenever you encounter a syntax error.
Conclusion
Thank you again for downloading this book.
I hope this book was able to help you master the basics of Python.
The next step is to create your own programs using this powerful computer language.
Finally, if you enjoyed this book, then I'd like to ask you for a favor.
Would you be kind enough to leave a review for this book on Amazon?
It would be greatly appreciated.
Thank you, and good luck!
This has been Python, Programming Bootcamp, the crash course for understanding the basics of Python computer language.
Written by David Maxwell
Narrated by Dave Wright
Copyright 2016 by David Maxwell
Production Copyright 2016 by David Maxwell
CAPTA Fall
Audible Audible hopes you have enjoyed this program.
Spectrum
