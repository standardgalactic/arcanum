But there is one thing that I don't want to talk about right now, but unfortunately,
I have to. So, once you start using these, but there is one thing that I don't want to talk
about right now, but unfortunately I have to.
But there is one thing I don't want to, here we are using partial application. But there
is one thing that I don't want to talk about right now, but unfortunately I have to.
So once you start using these polymorphic curried functions with partial application,
you might run into this thing called the value restriction.
The value restriction is something that's in ML for very good reasons.
The type system would be broken without it.
I don't really want to talk about it right now because it's confusing.
But you would be broken without it.
I don't really want to talk about it right now because it's confusing.
But you may see something of it.
I don't really want to talk about it right now because it's confusing.
The type system would be broken without it.
I don't really want to talk about it right now because it's confusing.
But you may see something about warning type VARs not generalized.
And if you see that warning about some partial application that you have,
you're not going to be able to use the function you get back.
And this should surprise you.
You have not actually done anything wrong in terms of what I have taught you so far.
But you simply have to work around it.
And, you know, no language is perfect.
This is an ugly fact of life in languages like ML.
So let me check this as an ugly fact of life in languages like ML.
So let me show you an example of what might happen.
Use partial application all that you want for now.
It's a beautiful idiom.
But if you do something like this, where the result would be a polymorphic function.
So I'm going to map this across something.
So this could take any, the resulting function could take any kind of list and would return
an alpha star int list of the same length where I put a one next to every element of the list.
And this will give that weird warning.
And it won't be able to be called.
And how should you work around this?
Well, the first way is to just give up on the partial application and put in what I said
was unnecessary function wrapping, but now is a little more necessary.
If you don't like that and you really want to do partial application,
then you can put in an explicit type that's not polymorphic like this.
And then you have a perfectly fine function, but it can only be used with string lists,
not with any kind of list.
I should also point out that on homework three and things like that,
you are not likely to run across this because it only happens when the resulting function
would be polymorphic.
