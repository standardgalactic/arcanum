The text discusses how digital computers and programming influence our approach to describing shapes. It suggests that while computer capabilities should guide shape specification for practical applications like analysis and rendering, they shouldn't dictate the mathematical framework, which is more abstract.

A pragmatic challenge arises in determining the tools used for construction, similar to historical examples where physical constraints influenced geometric methods. For instance, the Greeks' reliance on rulers and compasses shaped their constructability concepts, while modern computers favor spline curves due to computational efficiency.

The author explains that describing shapes involves multiple levels of abstraction, from high-level concepts like decomposing non-convex polygons into convex ones, down to low-level computer representations like floating-point numbers. Initially, shape description is approached abstractly, assuming an "ideal computer," which simplifies the problem space before considering real-world computational constraints.

An ideal computer is likened to a universal Turing machine, emphasizing deterministic, finite-time, mechanically executable methods expressible numericallyâ€”essentially algorithms. This discussion sets up for further exploration in future sections on shape description models.


