There are just a couple more topics I want to cover with currying.
And the first is that sometimes the function you want to call isn't organized the way you might wish it were.
Maybe you want a curried function and it's a coupled function, or you want a coupled function and it's a curried function.
Or maybe you want to use partial application, but not with the first few arguments, maybe with the later arguments.
You can't do that. Given a curried function, you have to pass the first argument to it.
But what we could do is use our idea of combining functions to once and for all write very generic, very reusable functions,
like we did with function composition, that let us change one kind of function into another.
So let me motivate that with a short example. We've seen this example before, where I wanted to take this function range,
which takes two numbers i and j and returns a list with all the numbers from i up to j,
use that to create a helper function, count up, that just goes from one to the number, and then use that count up function.
So this code as written will not work, and that's because this version of range is toppled.
It takes a pair, and here I tried to use partial application.
Now, of course, I could work around this or I could change range, but there's a very general thing I could do,
which is to write a function that takes a function expecting a pair and returns the same function in curried form.
So it basically takes a function and curries it. So what if I did this? I could take this function f, and then I would return a function that takes two arguments in curried form,
and then calls f with a pair. Because f expects a pair, but curry of f will return a two argument curried function.
And now down here for count up, I could just instill call, instead call curry of range, and this will now work.
So that's pretty neat. Let me clean it up a little bit more just by using the syntactic sugar we've seen before.
I could have just written it like this. That's curry. And on the call site, these parentheses are optional.
We can go the other direction as well. If we had a curried function, but we wanted to pass it a tuple,
and that could actually be useful if you were composing functions or chaining them together,
we could take f and x comma y and return a function that would look like this.
So now when you call uncurried with some function foo, you would give back a function that expected a pair,
and then called f with two arguments in curried form. So that's pretty neat.
Let me quickly show you the types of curry and uncurried.
They're very generic, and I will leave you to puzzle over them.
But I want to point out one very neat thing, is there's a deep connection to logic here.
You're not responsible for this, but if you have studied logic, read these as logical formulas
where the star is and and the arrow is implies, and you'll see that these are actually true logical formulas.
And that hints that there's actually a very deep connection, a very mathematical connection,
between toppling and currying, and I'm going to leave that as a mysterious statement for you.
One other thing I wanted to show you that also has these logical formulas, once you look at their type,
is switching the arguments of curried functions.
So if you had a two-argument curried function, and you wanted to partially apply it to the first argument,
or to the second argument instead of the first, you couldn't do that,
unless you took that function and passed it to this function first instead.
So f takes two curried arguments, but other curry of f will just take the arguments in the opposite order.
It takes an x and a y, and then it calls f with y and x.
And we've seen before there's syntactic sugar for this.
You could just write it that way.
Okay, so just more fun playing around with combining functions.
Hopefully I've shown you that this thing is at least a little bit useful.
And functional programmers do often program with these things in order to get things elegant and pretty
and arranged just how they want.
So thank you.
Thank you.
Thank you.
