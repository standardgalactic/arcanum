1.3. The influence of the digital computer on our approach to shape description.
Should the digital computer and computer programming influence our approach to shape description?
On one hand, they should, since one of our intentions, in fact, the primary intention,
is to specify shapes of objects to the computer for the purpose of analysis, manipulation, rendering, and so on.
On the other hand, they should not, since any mathematical framework tends to describe things in more general and abstract terms,
with a de-emphasis on a specific real world, even though that real world might have provided the original motivation for these studies.
In the pragmatic approach, the dilemma is greater, because as soon as we say that we can find or construct,
the question arises, by what can you construct?
The construction tools have a more profound influence on mathematical thought than it may seem.
The decimal system of counting was invented because we have eight fingers and two thumbs on our hands, with which we can count.
The ancient Greeks had a quite restricted notion of geometric constructability in mind,
since their construction tools were limited to the ruler and the compass.
That is why the problem of trisecting an angle attracted so much attention,
whereas the problem can be easily solved by the use of some very simple additional devices,
such as a paper strip.
In recent times, the extensive use of spline curves, parametric cubic curves,
and parametric surfaces in describing shapes is due to the fact that our present-day computer can handle them well.
This dilemma can be solved, although partially, if we remember that the question of description often transcends several levels of detail.
Consider, for example, the problem of describing the shape of a non-convex polygon.
The first-level decision may lead to describing it by means of non-overlapping convex polygons.
The decision at the second level may lead to describing each of the convex polygons by its vertices.
At the third level, the decision is to describe each vertex with the help of vectors.
The fourth-level decision may lead to the choice of a pair of real numbers for each vector and Cartesian coordinates.
At the fifth-level, which is based on the knowledge that data are to be stored in a computer,
the decision may lead to a floating-point representation of each number,
where a real number, r, is represented by a pair of integers denoting a fraction f
and exponent e to a certain base, say 10, such that r equals f by 10 to the e.
The sixth-level decision may lead to a binary representation, and so on.
I have to cough, just a sec.
This example clearly demonstrates that the approaches in the initial levels are more abstract
and are more influenced by the problem situation,
whereas the latter ones are progressively more dependent on the construction tool.
Therefore, in building up the mathematical framework for shape description,
initially we start with the assumption that we are working on an ideal computer
and we adopt an abstract mathematical approach to the problem.
Only in the later stages do we consider various issues involving the implementation
of various shape description schemes on a modern-day digital computer.
The design of relevant computer algorithms, analysis of the complexities of the algorithms,
consideration of their efficiencies, and so on, are dealt with at that stage.
But what do we mean by an ideal computer?
However, there are several equivalent ways of describing the notion of an ideal computer.
The universal Turing machine concept, however, because of its machine orientation,
appears to be a better model for the ideal computer than the other more abstract mathematical models.
There are several good texts on mathematical foundations of computer science
in which the universal Turing machine and other related concepts are discussed.
It's not possible, nor even urgently necessary, to get immersed in those details.
For our purpose, it is sufficient to know, at present, the consequences of using the universal Turing machine,
which are that any method suggested to find or construct something must have the following characteristics.
I just need to mention that this is written by an Indian and a Japanese person.
So, if there are errors in the English, let us blame the translation.
Number one, it must be deterministic.
That is, we expect to obtain the same results from identical starting conditions.
Number two, it must be executable in finite time, and it must use some finite faculty, or finite facility, I think.
This condition implies that our resources for computation are finite.
Three, the execution of such a method must be mechanical.
This roughly means that the steps involved in executing the method are so precisely described that, in principle,
even a mechanical device could execute the method.
Four, the method can be cast in numerical terms.
This is called the arithmetization of a method,
and is, in fact, is another error, and is, in fact, a consequence of property three, as it extra is.
We mention this property to emphasize the important fact that, in digital computing,
we can always restrict, with no loss of generality, the objects of discussion to the natural numbers.
In computer terminology, such a method is known as an effective procedure or an algorithm.
Note, at present, by construction tool, we mean only physical tools.
But in the finer analysis, we must also consider the theoretical tools that are readily available for construction.
The discipline of analytic geometry has progressed very rapidly,
since the concept of coordinates transformed geometric problems into algebraic problems,
and all the theoretical tools of algebra then became immediately available.
We, however, do not delve further into such finer points.
Next time, 1.4, a metamodel for shape description.
Here, what's up?
