I don't think there's been a video that has ever been asked for so hard for me to watch.
And so we're going to watch it.
Big Box Swee, by the way.
Check it out.
Big Box Swee.
I have never been harassed so much about watching this video, which makes me think,
okay, it's from Big Box.
Everyone's asking me to watch it.
It probably mentions me.
That's probably where this is going.
I'm hoping that I'm not going to get dunked on, but let's find out.
I'm ready to get fined.
Dude, it's going to be Vim.
He's going to dunk on Vim.
I already know what's going to happen, and then I'm going to be Sag, okay?
All right, okay.
Software is known for producing a lot of scams.
Think Nigerian Prince, Tai Lopez, Crypto, NFT, AAA Gaming Industry.
But I ain't talking about all that.
I'm talking about the lies sold to developers.
And it's a pretty long list, so buckle up.
Clean code.
See, I knew it.
I knew it.
I knew it.
So buckle.
Mustaches.
Look at that.
Look at that.
That's skill issue, okay?
That is a skill issue.
I can already tell it's about to happen.
I can already feel it.
I knew I came in on the defensive here because I knew.
I knew what I was getting into.
This is a skill issue.
I'm sorry.
If you can't grow a mustache, you got skill issues, okay?
Clean code.
Genetic skill issues.
Charles Ponzi put the Ponzi in Ponzi scheme.
Uncle Bob has put the B in Bacquas.
Clean code has gone through a reputational renaissance similar to Ellen, Jimmy, and James.
Bro's whole book is a filler episode.
When you take the energy of a junior engineer and combine it with such riveting advice,
that's how you get a pull request the size of Epstein's list.
Ain't nobody reviewing that, bro.
Just give us the list.
Just do it.
Just do it.
What's the...
Why?
Why not?
Why not?
Man, this is already...
It's too much, but it is true.
Man, I do...
I'm very curious what Uncle Bob has to say of why four to six lines per function.
Like, why put that arbitrary limit on a function?
I just can't imagine anything good comes out of that because I have this...
I have my opposing theory, which I think HTMX has claimed the best as far as like a term for it,
which is locality of behavior.
The more you have to jump from function to function, like the less easy it is to hold in your head what's happening, right?
The equal thing happens when you have a really long function that does a lot of things.
It's really hard to hold it all in your head, but I think it's significantly easier than 40 functions.
It's all in your head trying to figure out what those things happen.
Locality of behavior is very, very, very useful.
And so I just would rather err on slightly longer functions that maybe it does one and a half things,
as opposed to four to six line functions is considered a good range.
Anything beyond that is considered time to refactor.
Now, obviously, that's not a hard and fast rule, but I think you would like the philosophy of software design.
I very well could.
By the way, for those that don't know, it's right here.
I think that's locality of behavior.
Carson Gross, the primary feature for easy maintenance is locality.
Locality is the characteristics of source code that enables a programmer to understand that source by looking at only a small portion of it.
This is good.
The behavior of the unit of code should be as obvious as looking only at that unit of code.
This is good.
This is exactly what we're talking about, locality of behavior.
It's very, very different than a clean code.
Clean code is the polar opposite of locality of behavior code.
And I'm not saying locality of behavior doesn't have its own edges and issues.
It certainly does.
And it can certainly get out of hand easily.
I barely read my own code.
And that's Jamie Oliver's recipe for a 3 a.m. Christmas Eve production outage.
And off the back of the last famous manifesto, Uncle Bob decides to write his own on the topic of agile development.
Now, this is the manifesto that deserved U.S. military intervention because it infested the whole world.
From Brazil to India, Orlando to Ohio, we're all super happy sitting in another sprint planning.
Agile was a 9,000 IQ chess move by the boomers to get into tech without coding.
But quite honestly, we're the plebs because we listened to the boomers and fell for the next scam.
CS degree.
There were so many shots fired.
I'm not even sure what to do.
I'm not even sure how to process all of this.
And I've stopped at this frame.
This is the frame that we've decided to stop at.
Okay.
That was just a massacre.
Dude, that was just a massacre.
Brazil mentioned it.
Potentially, Brazil might have been mentioned.
I'm going to say something.
And I think a lot of people might be upset about it.
Agile?
In its manifesto.
Is great.
Let me explain why.
Let me explain why.
Every team themselves should decide how they commit and run their own little units.
Right?
That's like one of the most basic forms of Agile.
I think that's great.
Every sub-little team should have their ability to make the decision for how they follow their own process.
What's the problem?
What's the obvious problem of it all?
A sub-team isn't an island onto themselves.
No, it's not management.
Oh, I mean, you could call it management, but not like people management.
It's that each team then needs to also get in line with each other.
And so what ends up happening?
Everyone discusses, hey, we need to come up with some sort of everybody is in step to make the same decisions across this thing.
And so what ends up happening?
You get the average of everyone's decision.
I don't know if you know this, but this is why group decisions suck.
This is why you should have an informed captain and you should never have a group of people making a decision.
Because on one side, you have really, really bad decisions.
Bad ones right here.
And then in the middle, you have just the place that makes nobody happy.
And when I say bad decisions, I mean someone else's opinion at this point.
And maybe it's actually not that bad.
It's kind of like an inverse normal curve.
And this is great decisions, by the way.
These are my ideas.
These are your ideas that I don't like.
These are my ideas that I do like.
And this is the middle ground, which is actually the worst place to be.
It is actually the bad ideas.
And so what happens is that when you get a group of people, well, we can't go over here.
And you can't go over here.
So you compromise right here.
You compromise right in the middle.
And guess what?
You've created the worst possible solution.
And now we call this, we've codified this term today.
We've actually created a word for this exact thing.
And that word, it's called Scrum.
Scrum is the codification of Agile interacting among many teams.
It's just the worst possible outcome ever.
And so what I really mean by this is that Agile truly is communism.
It always fails.
And people always blame that we did not do it correctly.
All right?
I'm sorry.
This is designed by committee.
It is.
All right?
It has never been tried.
I get it.
It's never been tried.
Really?
There's no real Scotsman.
You've never done Agile correctly.
JavaScript can work on a server.
I've heard it.
Okay?
I've heard it a lot of times.
I'm also trying to equally offend as many people as possible.
And by the way, I have a lot of opinions on this one.
And so this one's already triggering me.
So this is actually, I'm still a pro college person.
But let me just give you my base take before we go on.
I think that computer science would do a lot better if we dropped all of the core requirements,
all the stupid stuff to make you a well-rounded person.
When I say stupid stuff, I actually don't mean it's stupid.
I think people should go to school to become well-rounded.
But the first initial courses in becoming a well-rounded person are absolutely worthless.
Okay?
Nobody cares about the coping weather system.
Okay?
The fact that I'm going to be like, well, Brazil is a class A, sub B, tropical rainforest.
It's a coping weather system.
Like, people don't care.
No one cares.
It's completely worthless.
Why are we doing this?
Why are we doing this to ourselves?
Okay?
No one cares that California has a Mediterranean climate on part of it.
And that's what makes it such a desirable place for people to live.
I get it.
But nobody actually cares.
Okay?
That's not helpful information.
It doesn't make me more well-rounded.
Okay?
I can say the word coping weather system and it doesn't mean anything.
Okay?
I had to spend a semester learning about dumb geography things when I was a senior in college
because I did too much LSD as a freshman in college.
And so I had to make up a bunch of core classes and one of them was geography.
It was worthless.
It wasn't – I didn't become a more well-rounded person.
I didn't get to go, like, read the great poets.
Like, imagine if I had to take a class that was, like, reads Wordsworth and Augustine and Thomas Aquinas and Coolridge.
Like, that would have been a great experience.
Why didn't I get the reading of the poetries of the peoples instead I got some stupid-ass coping weather system?
So I totally get it.
This is why college is bad.
I would really – yeah, Marcus Raelis, I'm totally down to do that.
Hot take.
Master's degree is the new bachelor's.
Doubt.
Anyways, I do think it would be really awesome if we had something like a trade school for programming.
And I don't mean a boot camp.
See, boot camps are fundamentally flawed because boot camp's goal is to just make you learn one thing
and get you out as quickly as possible in a market that was starving for need.
No, I don't want that.
I want something that's like a two-year kind of traditionalized school that's at a fast pace,
that, like, forces you to build a compiler, that forces you to do some operating systems, some database stuff.
Like, you actually do real, real part of it, like a trade school, right?
I think a trade school would be way, way, way, way, way better because I don't think you need all of this.
I think college is a dying sport for a lot of people.
And so CS degrees is how we get a lot of that.
And so, but boot camps are pieces of shit and largely leave a lot of people disenfranchised and are terrible.
There's, like, a tech school somewhere in between, right, that I think would be really, really good.
Anyways, just a thought.
That's what I think.
A lot of colleges suck, too.
Yeah, absolutely.
The thing that makes college nice is that they have something called ABET accrediting.
And what makes it really nice is that with ABET accrediting, it forces you to teach certain subjects.
So even if the teacher sucks, you have to go off and learn by yourself and read the book and become good at it, right?
And at least you force yourself to go see stuff, right?
My favorite, I started off at Montana.
I was also at Montana, Montana State University, best, whatever.
But I dropped out and transferred to Colorado State.
They wouldn't accept my dumb general electives.
I refused to retake them and got accepted upper-level electives.
It isn't about being well-rounded.
It's about getting those tuition dollars.
Well, at one point, it was about being well-rounded.
The whole point of getting a bachelor's degree was for you to be able to leisure well,
for you to be able to study and read the poets and do all that.
So the original college degrees, that's why it had so much emphasis on writing and reading the poetry and all that kind of stuff, right?
Anyways, all right.
Now that we've said all that and now you know exactly where I stand, it's time for me to become emotionally damaged.
Now, although degrees are a society-level scam,
leave it to programmers to over-engineer education.
Like in any other occupation, you have simple linear career paths.
You want to become a plumber?
Go to trade school.
You want to become an accountant?
Get a degree.
But the path to software engineering is like a fidget spinner.
There's like three options and none of them work anymore and it's also out of style.
Despite your education, all developers can agree leak code is a mess.
Okay, we got to quit having DevRels convince...
This right here just has to stop.
Can we all agree that you're not helping your case, Cloudflare?
No, ain't nobody helping right now, okay?
This just has to stop.
We just got to stop doing this.
All developers can agree, leak code is a massive scam.
Look, man, it's been discussed to death, but all I'm going to say is,
do you think mechanics need to build a car from scratch to get a job?
All this grinding just to code some front end.
But wait, that's another scam.
Okay, too many scams are happening at one time.
Leak code?
So, dude, some of the worst insults I've ever received are because I have mixed feelings about leak code.
And so, I always get this.
I get, Prime is out of date because he thinks people should do whiteboard interviews.
So, what's the alternative?
The alternative is, what, apprenticing for free or some paid contractual amount?
Like, that's going to happen.
That's not going to happen, okay?
That may work for some people, but that's largely not going to work.
Two, a take-home.
Okay, so you want me to work for, what, 10 to 20 hours on a take-home?
Is that what you're suggesting?
No, that favors people who have no kids, that have free time, right?
It's all, you optimize for a certain set of people with any interview.
Take-homes are absolutely the worst.
I know.
So, again, what's the alternative?
Someone has one where you go to the place and you get a problem where you work on, where you have to, like, hook up to an API and make some calls and do all that.
Six months apprenticeship just ain't no way, right?
I'm not taking a contract for six months.
The thing I like about LeakCode, and by the way, I have told you many times, don't do LeakCode.
I think the only LeakCode you should do are the array problems.
If you're going to do anything with the LeakCode, learn data structures and algorithms, okay?
Be good at data structures and algorithms.
You can solve most problems just knowing a few data structures.
Like, almost all problems in interviews can be solved with this.
Again, I get just hammered in the comments about this specific thing, which is that if you just know your data structures and algorithms, you will pass most whiteboarding interviews.
You will.
The third one is just come up with better whiteboarding interviews.
I think that that largely works if you can come up with good ones.
One of my favorite questions to ask is an async request queue.
Just simply go out there and just build something that takes in a promise or that takes in a promise factory and produces out a promise.
And when you're done with that promise and when you can execute that promise factory, you will execute it, get out the promise, resolve it, and return out the return value or propagate forward the error.
Like, it's just pretty simple.
It's not, like, a hard thing to do.
It's pretty easy.
But, man, I've watched some pretty crazy things.
By the way, I've seen people prompt interview.
By the way, I gave this as a question, and I watched somebody prompt interview me.
I watched somebody do this.
It was awful.
Okay?
I watched somebody give me the old AI.
I watched them go like this.
This is what they would literally do.
They had their camera on, on them, and they go like this.
And then, I kid you not, they actually had the gall to tell me.
I've never worked with TypeScript.
I don't know TypeScript.
And then proceeded to do the following thing.
Const foo equals array.shift bang.
They did that.
After telling me they've never worked with TypeScript.
And I was just like, bro, you tell me you've never worked with TypeScript, but you just did a false or a, what's called a forcing undefined removal in a single bang like that?
Ain't no way.
Ain't no way you don't know anything about TypeScript, and you're hitting that.
What's array, shift, bang?
It forces out the undefined.
So, it just becomes T.
It becomes type T.
And so, to tell me that you never did it, you're off looking at a screen and typing, and then you hit me with a bang T at the end?
Ain't no way.
Ain't no way.
Right?
How did you respond?
Of course, I didn't say anything.
I don't call out people because I wanted to see where they could go.
And guess what?
What happens when there's a single problem and you're using ChatGPT?
What happens with ChatGPT when there's a problem?
It reproduces a new set of code.
Yeah.
So, guess what that person did?
They also went, I'm going to start over.
Erased everything and started over from the beginning.
Yeah.
Yeah.
Certainly.
Anyways, ChatGPT.
Ridiculous.
And so, that's my take on leak code, which is if you know just a little bit of leak, if you know how to do the array stuff, which, by the way, I actually think this is a very positive part about a leak code.
And probably the most beneficial practically to your career for the rest of your life is learning to be effective with arrays.
Do the array problems.
With leak code.
I think they're like Cityscape.
Completely piece of shit.
Annoying problem.
Takes like an hour to get correct.
It's just like such a tedious exercise.
But, man, does it make you good with arrays.
Being good with arrays is very, very, very beneficial.
I strongly recommend you at least do that.
Right?
And that will just help you for your career.
Just being strong with them is never a bad thing.
And so, I recommend that plus DSA and you will be able to conquer most whiteboarding interviews.
Now, if you can't conquer the whiteboarding interview, likely, if you know all of your background.
Based data structures and you can't do it.
To me, all it says is that whoever designed these interviews designed them in such a way that they're complete morons.
And you probably don't want to work at that place to begin with.
Okay?
It's as simple as that.
Yeah, exactly.
If they give you some crazy ass dynamic.
If they like ask you the coin change problem.
It's crazy.
It's actually crazy.
Anyways.
To be fair, they would build an engine from scratch in some sense.
And I'm sure there's plenty that would love the opportunity to do that.
And I'm sure there's a bunch of gear heads who have built a lot of their own stuff together.
And probably the best mechanics do.
Like, real talk.
I bet you some of the best mechanics out there are into that.
Are into building things as much as they can.
Right?
Obviously, you can't build things from scratch in the sense that you can't, like, build your own engine block.
But most certainly, they put things together.
And let's just face it.
A mechanic putting a bunch of pieces together is not much different than the front end.
Okay?
Okay?
Can we be real here for a second?
You put a bunch of pieces together.
And you call that...
Come on.
You put a bunch of pieces together.
You don't actually build any of the pieces.
And then you connect them all together.
And you're like, oh, crap.
Something's not working.
You're just glue engineering.
I hate to tell you this, people.
Just to code some front end.
But wait.
That's another scam.
Front end is easy.
Front end being called easy is a scam perpetrated by insecure back end engineers.
Because they think gluing together some crappy spring boot to Postgres is real.
Engineering.
They're probably coding that mess in NeoVim.
And preaching the next scam to unsuspecting developers.
I already knew this was coming.
Okay?
We knew for a fact what was about to happen.
Okay?
Okay?
I'm not mad.
I'm not mad.
I'm not mad.
Okay?
I'm not in shambles, Nightshade.
Dude, I'm not in shambles.
We're not in shambles.
Okay?
I'm shambling.
I'm not mad.
Can I get a second?
Can a man get a second here?
Can I get a second?
First off, I would just like to let you know.
Okay?
Mr. Big Box Sweet.
You think I'm not keeping the receipts, Mr. Big Box Sweet?
I already knew this was coming.
Okay?
I already knew it was coming.
I already knew it was coming.
Yeah.
Mr. Big Box.
By the way, go follow him on Twitter.
Great guy.
Let's go in here.
Look at this.
He uses Vim Motions.
Okay?
Which means he used VS Code.
Hurts.
But he likes Vim Motions, too.
Okay?
So Mr. Vim is a productivity scam who also uses it.
I'm internally molding.
Okay?
Okay.
But let me be real for one second about why I – okay.
Let me give you my precursor.
Okay?
Let me just tickle the tip just a little bit.
The reason why I choose NeoVim is because I like to craft my own environment.
Okay?
I like all my own shortcuts the way I want them.
I like the ability to be able to create whatever I want to create.
Like right now, we are creating a real-time rendering engine in NeoVim right now, and it's been fantastic.
And for me, that is just absolutely lovely.
I really like my tools.
I like to be able to go deep on my tools.
And NeoVim is by far the best editor to go deep on.
Second, I think Vim Motions by themselves are the superior way to edit text.
I think if you're doing lots of programming, if you're not using Vim Motions, you're just wasting time.
Okay?
You're just wasting time.
All right?
And some people, you can use Vim Motions in your VS Code.
You can have your nice luxurious scarf on with your nice little – you know, you can totally do that.
And no one – hey, Copium, yeah, I know.
But you can do that all you want.
Okay?
Just saying.
Just saying, acoustic AF.
Maybe the acoustics are a bit off in here.
Okay?
Vim Productivity.
Vim Productivity is stage one of toxic developer disease, otherwise known as TDD, which often develops into stage two.
I use Arch, by the way.
And the final stage is when you spend half your salary to buy a keyboard split up like Bangladesh.
Okay.
Okay.
Okay.
The Kinesis 360 Advantage is a great keyboard.
Okay?
What is this?
This is – this is a direct – this is a literal direct attack against me.
Okay?
This is not even fair.
It's not even fair.
It's saying it's split like Pakistan and Bangladesh is – I'm getting owned right now.
Pakistan, to hook up to your overpriced thing.
We were going to finish setting up our System76 after a couple more videos, people.
So, not really sure what to do with this at this point.
I – I feel targeted.
Okay?
I feel – I feel genuinely targeted in this one.
Pat.
Only to be paid half as much as your co-worker with actual hobbies, a girlfriend, and a life outside of programming.
But wait, you're having a maladaptive daydream, because you don't have any co-workers, because tech jobs are literally a scam.
Sure, you're highly paid, but the amount of time you'll spend unemployed from layoffs averages out to working at McDonald's.
The biggest pain of being laid off isn't even losing money.
It's overhearing your mom say,
Oh, Babaji, what to do?
My beta no study, no job, no shardy.
You see, auntie, your beta fell for the biggest scam.
Everyone should learn to code.
A scam peddled by politicians and their buddy businessmen when they outsource your job to a developer.
I do think he's right on this one.
And what I mean is that I don't think –
it's not that I don't think everyone is not capable of being a great programmer.
I don't think most people want to put in the effort it takes to be a good programmer.
No job, no shardy.
It got me.
It's true.
And so that's where I think a lot of this comes from, where people say everyone should learn to code.
The hard part is like, man, you got to full ass it, as Judo says.
As the man Judo says, you got to full ass that.
It's hard.
It's hard.
...country.
No, no, no.
It's for the greater good of the economy.
Tech bros love spouting on and on about how anyone can learn to code and build a startup.
My dude, Mark Zuckerberg dropped out of Harvard.
You're dropping out of Udemy and getting kicked out of free code camp.
Design patterns.
At this point –
There is a little bit of a difference.
There is a little bit of difference.
And I also think, you know, like real talk, you cannot – like, I've always hated that phrase or be like, well, Mark Zuckerberg dropped out of Harvard.
All the best – all the biggest tech entrepreneurs these days have dropped out of Harvard.
There's also this fundamental problem, which is that during that time, there wasn't much on the internet.
It was a giant, a giant, a giant opportunity, like just a well sitting there for anyone to make anything.
And then second, the gold rush is over.
The gold rush is over.
It's no longer – it's no longer possible to do what they did back then.
Also, can we do the second thing?
They got into Harvard.
Okay?
So, step one, they were already smarter than you.
Step two, they were so smart they just left and did something different.
You know what I mean?
So, I hate to tell you this.
Dropping out of college does not make you a genius.
Okay?
Counterpoint.
Counterpoint.
I got into CMU.
And I'm an idiot.
Okay, fair.
Step zero, rich parents.
That's one of the easiest ways.
Honestly, if you guys really want to do this, you should just have rich parents.
It's honestly the easiest way to make a lot of money is just have your parents give you a lot of money.
Like, simplest – it's the most straightforward way.
So, if you just got better parents, honestly, work out pretty easy.
Thanks for the advice, Prime.
No problem.
No problem.
Yeah.
Yeah.
I only give the most based advice around here.
But, you know, real talk.
I just wanted to be such – I wanted to be such a Chad that I just – I personally chose not to have rich parents.
Okay?
I was going to make all of my money off of $5 a month!
That's what I decided.
Okay?
That's what I decided.
Personally.
So, thank you for all the $5 a month.
Personally chose that one.
Personally.
Strats.
Strats and strategies.
Okay?
You wouldn't understand.
Honestly.
You know what?
I dropped out of Harvard so hard I didn't even go to Harvard.
Think about that.
A good rule of thumb is that if Uncle Bob has a book on it, you really shouldn't be using it.
Design patterns like many aspects of software engineering, great in practice, impossible to implement.
Similar –
Oh, gosh.
I just had – I just had – I just had – I just had Earl Grey come up into the nose on that one.
I was not ready for that one.
I was really not ready for Uncle Bob catching multiple strays on this one.
I was not – I was not – I was not ready for that one.
Okay.
Similar to best practices.
Oh, did you even catch that picture?
You really shouldn't be using it.
Design patterns like many aspects of software engineering, great in practice.
The person's writing this.
Looks like they're getting hung in the other –
This is pretty clever.
It's impossible to implement.
Similar to best practices.
And if you disagree, you can kiss my dry yagney ass.
Because your code is always gonna be slow and unreadable.
Not that it matters if it's fast, because code performance is literally a scam.
Code performance is like astrology for developers.
I mean, it could have an impact on your code, but more often than not, it's just to sell you a course.
Your real performance is actually how quickly you ship features.
This whole industry is full of scams, man.
But you know what isn't a scam?
The sponsor.
We'll get to the sponsor.
Don't worry.
We'll get to the sponsor.
Actually, that's the one I kind of partially disagree with, in the sense that if you don't make something to begin with, it can be really slow.
Right?
And let's just face it.
When you use a slow application, it's pretty infuriating.
Right?
There is a good enough threshold.
Absolutely.
I think you should definitely consider the program you're making.
Right?
You should definitely consider the program you're making, and it matters more and less.
Right?
If you are making a simple website, then 600 milliseconds is fast as shit.
Okay?
If you're making, like you said, SSH, that hurts.
You know, if you have to press buttons and everything is super slow, that hurts.
That's emotionally painful.
And so there's definitely, you've got to rate the program you're using.
You know what I mean?
I don't think some apps are intentionally made hard to use.
I don't believe that even one bit.
What I believe is that the average app is just what people think people like.
And what most people think is good UX is not good UX.
Okay?
I'm sorry.
I hate to tell you this, but just because you call yourself a UI engineer doesn't mean you know what makes good UX.
Good UX is hard.
And I think it's really, I think it's very reasonable to have somebody that thinks only about UX.
I think it's really good to go and actually have qualitative research on what makes good UX.
I think it's really, really good to test proper UX.
To be able to have two different user experiences and test them in production to see which one's actually better.
Quantitative and qualitative research is really, really important.
And the bigger the company, the more opportunity you have to do that.
Now, smaller companies, you just have to kind of guess, right?
You kind of just have to guess.
And you hope that you got it good enough.
But it's painful.
To serve today's video, Brilliant.org.
Ooh, brilliant.
Hey, thanks for the hype train, everybody.
Brilliant is an app and a website with an amazing collection of lessons on math and science.
I love learning new things, but learning math and science has always been super tricky.
Most of the material online is very drawn out and not as engaging.
I've also recently been trying to get into game development and needed to brush up on my physics fundamentals.
With the lack of time and resources, I needed a solution.
And that's where Brilliant came in.
You see, Brilliant uses a combination of techniques such as visual learning with interactive diagrams
and reinforcement learning with experiments.
But the more important thing is that it's delivered in super concise and fun lessons.
I've been using my Commute as a key trigger to use Brilliant.
And in the past few months, I've gotten to the point where I can understand and think critically about basic physics problems.
Don't believe me?
You can get started with Brilliant for free for 30 days.
That's brilliant.org slash bigboxsweet.
The link is in the description.
Do that.
You'll also get 20% off the annual subscription.
Thank you so much to Brilliant for sponsoring this video.
And thank you for your time.
I am Big Box.
Let's go.
Let's go.
Let's go.
That was great.
That was great.
It was a scam.
Definitely got scammed hard.
I don't know.
I can't tell where satire ends and where it begins in that video.
Because I don't think he likes clean code.
Right?
I really don't think he likes clean code.
But does he not like all of those things?
Or are some of those things...
I can't tell.
Einstein had a mustache.
Exactly.
Exactly.
Exactly.
See?
It's not that simple.
That's the point.
I can't tell.
I can't tell when things end and begin.
It's impossible.
Anyways, I really...
Satire ends when he talked about the split keyboard.
Yeah, that was just...
The split keyboard on System76 was clearly...
He was fist fighting me.
And he just landed one right in the gut.
And I'm very upset about it.
The name.
The name.
The name.
It's the Prime Gen.
Next time.
First time.
You friend.
Here it is.
Here it is.
And you can miss me.
This is the Prime Gen.
