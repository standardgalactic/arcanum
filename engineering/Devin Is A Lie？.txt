This might be the most linked video I've ever received, potentially, like, ever.
I've been actually using a lot of Devon.
I've been trying to use it as much as I can.
I've just entered my second month of subscription.
I've paid $1,000 now to Devon, and I've probably given it 100 tasks offline,
and so I have a pretty good idea of what it's capable of
and what it's not capable of at this current point.
Devon is an AI that was advertised to be able to replace every...
That was a little loud. My bad. My bad on that one.
Everybody, if your ears are currently bleeding, I went full way too dank, okay?
Yes. By the way, this is, like, the worst thing that Devon did
is that it positioned itself to take over software engineers.
Like, I just don't understand what's wrong with AI companies
because think about this for a second.
One, do you think it would be good if they said,
hey, we're going to take over every software engineer?
That's a slow, long process.
I mean, there's entire hardware things you'd have to figure out.
Like, that integration process would be gigantic.
Now imagine this.
Hey, we will make your devs 20% more efficient for only $500 a month.
You know how many, at least American, UK, other companies would purchase something
to make devs 20%, 30% more efficient, 30% more productive, right?
Like, just imagine if Devon positioned itself as an efficiency gain for devs
as opposed to a replacement of.
It is insane that marketers can't figure this out.
I am literally baffled by this entire thing.
I am absolutely baffled that this is not, this is just not the way they do it.
It's not sexy for VCs.
I think it would be sexy.
I think there's tons of VCs that would find this completely sexy and go,
wait a second, it's still AI.
And they're marketing to be attached to every software engineer.
That could be $500 million a month.
That could be multiple billions a year as part of income
by attaching itself to every single engineer.
Why would you not choose that?
Why would you choose the idea of attempting to replace it?
Because if you fail, you get tossed the hell out of a company.
But hear me out.
Let's say you have a company of a thousand engineers,
like a big engineering company.
And 40% of your engineers say they love Devon.
You don't think that company's not buying a thousand seats of Devon?
Of course they're buying a thousand seats of whatever.
They're buying a thousand seats and only 40% are going to use them.
And it's just like, bada-bing, bada-boom.
You just like, not only have you made more money per engineer,
you have less hardware pressure.
It's just, I don't understand it.
Why would you do this?
What is your thought process?
Why aren't people just thinking clearly about it?
Why was the volume of this video entirely too high?
I don't get it.
I've made stupid bad decisions in life.
Software engineer in existence as a complete AI tool for coding.
And while it terrified software engineers when it was first announced.
What is this going on?
What is this?
Am I watching Inception?
People quickly started to realize that it either didn't work as intended or didn't work at all.
In fact, the only thing actually surprising was that the company behind Devon AI,
Cognition, managed to reach a $2 billion valuation within six months.
So how exactly did Cognition?
Okay, we got to stop.
We got to stop with the kachish, kachish, kachish, kachish, kachish.
By the way, the people that were afraid of Devon or the people that said Devon completely didn't work,
I think they're both full of crap.
Again, I've probably done about 100 requests through Devon now.
And there's some good things.
There's some things that I think are actually positive about Devon.
There's a lot of things I find very frustrating about Devon.
So we're kind of in the middle.
And also, I think this voice has to be AI.
Such a huge valuation with a product that was half-baked.
How does Cognition even exist?
In March 2024...
By the way, it's not surprising how Cognition exists.
They made a play at a very large market for a cheap enough price.
And they already know that there's going to be one or two Devs that'd be kind of running this thing.
They'd be able to run like four or five or ten Devons concurrently fixing various things.
And they would just be the ones kind of churning out the last 10%.
And so it's very obvious what the goal was.
The goal or VCs saw this as probably the most complete full pipeline AI in existence.
And that if they could get in first, they're going to make a lot of money.
And if they can become the full thing for a lot of developers, then it would be worth like, you know, $100 billion.
I don't think that's what it is.
Also, please, those transition sounds are...
They're getting me.
Cognition Labs claimed Devon AI could replace human software engineers.
Within weeks, they raised $175 million and reached a $2 billion valuation.
This scared the pants off every software developer in the world.
And facing imminent...
Type one in the chat if you were scared.
Shit my pants.
Wow.
Okay.
Max integer.
Jobless anarchy.
No one knew what to do until results started showing that Devon wasn't all that it was propped up to be.
I honestly think one of the biggest problems that happened with Devon, there were certain engineers.
I'm not going to name names this time because last time I named names, I received several angry messages.
But there are certain engineers that were exceptionally propping up Devon as if it was fantastic.
Three weeks analyzing every frame of Cognition's promotional videos, revealing a carefully orchestrated deception.
Their investigation exposed specific manipulation techniques.
I've heard about this.
First, the live coding demonstrations were heavily edited.
Oh yeah, they're heavily edited.
And they're...
Dude, did you see those live coding?
Did you watch them?
Like, did you watch them when they actually dropped?
They're not even showing you the good ones because this is clearly done by an AI.
But did you watch the ones that were really hilarious?
It was like 1.20 in the morning.
It was not like a nice March 9th, 3.25 p.m.
Like a nice old-fashioned workday time.
Like, they were up deep in the morning trying to get these things.
And each one of the chunks were like 45 minutes to two hours later.
Sequence where Devon appeared to debug code in minutes, timestamp analysis revealed 47-minute gaps between cuts.
The YouTuber overlaid the original video with git commit timestamps, showing how a 10-minute fix actually took over four hours.
The channel also discovered that Devon's celebrated bug fixes were staged.
In the demo video, Devon appears to fix complex integration issues.
But the code repository's history showed these bugs were artificially introduced just before recording.
As one section revealed, Devon was fixing syntax errors in files it had created moments before.
Equivalent to creating a spelling mistake just to show you can correct it.
Most damning was the...
I didn't know that one.
This is just what I feel so bad about.
Like, why did you have to sell it this way?
Right?
Like, why sell it this way?
There's so many...
There could have been such a better reception.
Right?
Like, why?
Why?
Why?
I understand that VCs want to make infinite money and that they're horrible people, that they're likely developed deep from lizard DNA.
But you could also just make a company and say this is the thing we're doing.
I assume Devon was created in attempts to be this thing.
And then when the boots hit the ground, they realize they can't create the thing as well as they want.
They have to kind of do these weird, like, editing things.
But why male models?
Why male models?
I don't get it!
The Upwork earnings claim.
Internet of Bugs tracked down the actual Upwork job posting and client feedback, revealing that not only was Devon's submission rejected, but the client had specifically noted submitted work appeared to be AI-generated and didn't meet basic requirements.
The $150 payment Cognition claimed Devon earned never actually happened.
Oh, I did not know that.
Okay, so that...
I mean, if this is to be believed, right?
The problem here is that I need to see some sites, right?
The problem is, is am I being bamboozled by what appears to be AI generation?
Like, I don't...
Like, which AI is lying to me?
I don't even know!
Oh my gosh, I am being...
I am being thwarted in all directions.
The task was straightforward.
Set up a computer vision model on AWS.
The solution was right there in the readme file.
A single line of instructions.
Think of it like having a recipe card for baking cookies.
But instead of following the recipe, Devon tried to invent a new way to bake cookies, broke the oven, then spent hours trying to fix it.
The reality?
A simple task that took a human developer 36 minutes took Devon over 6 hours to complete.
And it still failed.
Speaking of, thanks so much for all the support on the channel lately.
It really means a lot, and I want to give something back to you guys.
So do you need a job?
That sounded a bit weird.
But whether you're a UX designer, app developer, freelancer, or just a curious viewer, I want to get to know you guys.
Share some UX and UI tips.
Are all these clips matching up with what is being said?
Or am I just like, am I going crazy?
Or are all the lips actually matching up with what is being said?
Anyways, keep going.
Maybe even get a gig.
So I made a Discord channel for us and want to make this the place to be for front-end professionals.
And I'm having talks with people to get some employers in there so you can connect with them, too, and find some jobs in the future.
I'm really excited to get this thing started, so I hope you'll join me.
The channel's frame-by-frame analysis also caught moments of human intervention.
Mouse movements during supposed autonomous coding sessions, keyboard shortcuts no AI would use,
and even a brief reflection of a human coder in a darkened IDE window,
all pointing to significant human assistance during the demos.
The truth was simple.
Dude, they've got to show those.
I want to see that.
What do you mean there's a darkened reflection?
Like, I'm on the team that this could be all completely staged,
but you've got to put the things.
You've got to put the goods in here, right?
I need to see the goods!
Cherry picking.
While Cognition Labs trumpet...
Also, can we be fair here?
Is any of this surprising?
Is it surprising that they would heavily edit stuff to make it quick for a promotional video?
No.
I think the only parts that would be surprising is that they did not, in fact, include time frames.
Like, while it did this, we were able to go over here and fix some stuff,
and when it came back, we had to make some simple changes, and boom, we were up and running.
I just don't understand it.
In 18.86% success rate as revolutionary, they conveniently omitted the truth.
Out of 570 coding tasks, Devin failed every single task that required changes across multiple files, 95 in total.
It also couldn't handle 230 tasks that needed more than 15 lines of code.
This generally kind of lines up with my Devin experience, which is that whenever I use Devin,
if it's like a change to a specific location, it seems to do pretty good,
or if it's like requested to figure out a bug, it tends to kind of like,
if the bug is a specific line of code, Devin is kind of like a horseshoe.
It gets thrown, it gets close enough, and then you're like,
oh, okay, I can see exactly where the problem is.
Thanks, Devin, for the close enough, but I will just take it from here.
So basically, a junior, no, not a junior at all.
Not a junior at all.
I actually find it very insulting, people thinking junior is so useless.
Like, juniors are, dude, they're, my favorite engineers in the universe to work with are juniors, okay?
Because juniors are so exciting.
Like, they are just ready, they're in there, they cannot wait to program.
Sure, they'll come up with crazy ideas, and sometimes you've got to go,
hey, slow it down now, okay?
I know you just worked 12 straight hours on this idea.
The idea isn't utterly insane, but, dude, you accomplished it.
That's amazing.
Let's just do the one-line change over here.
It's okay sometimes to cut corners, or maybe the corner you just created was created out of thin air,
and we just got to work, you know, we got to walk it back a little bit.
Like, that's totally cool.
I loved working with juniors.
The world goes around on interns.
I am fully and 100% bought in on that.
You know why juniors are so excited?
It's because a lot of times when you've been working for a long time,
it's pretty easy for you to go from job to job.
Whereas when you're brand new, it's kind of like things kind of rest on you performing well, right?
And so there's an entire—I can't imagine anybody disagreeing with the next words out of my mouth,
but there's an entire world that exists where when you don't have pressures to survive or become successful,
you tend to just work worse.
And so juniors who tend to be like resting on this one opportunity tend to work really, really well
because they're actually motivated to do something.
And I think one of the hardest parts about juniors is that when they become successful, they lose that desire.
And it's not that you have to be like you—I'm not saying like just pour into every single job you have.
I actually think that's one of the biggest mistakes I made was go too much onto a single job.
But just that hungry excitement, you know what I mean?
Like that desire.
And so it's just like I don't know why anyone—don't compare it to a junior, okay?
It's not a junior.
They don't care.
Devin does not care.
This is my big gripe with LLMs in general is that LLMs don't care.
They do what they're told, maybe.
Whereas like a junior, they care.
You make a change, they take that change, and they go,
oh, actually, it was off by one pixel, so I actually just went into the code base without anyone telling me,
and I aligned it better, and then I realized that actually I think we should try this.
So I made a secondary example that looks like this.
What do you think?
Should we consider this option instead of this option?
And you're like, hey, you care.
I love it that you care.
I love that you care.
No, but I love what you care.
I love that you care, you know?
And LLMs will never care.
They don't care.
That's not the point.
They can't care.
They don't have the ability to care because they're not—they're not—it's not the same.
And anyone that tells you, oh, humans are just like LLMs, they're just—they just—they don't know anything, okay?
Difference in kind versus difference in order.
Don't get it confused.
Just walk away.
The only tasks it managed to complete were simple, single-file changes,
the kind of work developers already accomplish with free tools like ChatGPT,
even existing tools—
Man, the AI world sucks.
All right, anyways, keep going.
Tools like GitHub Copilot, which doesn't claim to replace developers,
helps complete 30% of developers' code on average and costs $10 monthly.
Way cheaper than Devin's overpriced, underperforming system.
It's different.
The success rate when examined—
It is—it is fair to be different.
Copilot is meant for you—I mean, first off, three things.
Three things.
One, Copilot, stop using it as pilot, okay?
People—I watch people sometimes just use Copilot as if it is the pilot.
Stop that, okay?
Just side note.
Editorial note.
Two, Copilot.
The nice part about Copilot is it's interacting with you at a moment,
and its completion window is really tiny.
So yes, it makes sense that it's probably $10 a month.
And let's also be fair.
How much do you want to bet that Copilot is a complete loss leader
to get people into this entire ecosystem?
My guess is that what Microsoft really wants is they want to own everything.
You own nothing, and you'd be happy.
They want you working on a remote container, using a remote VS code,
committing code to GitHub, while using Copilot for auto-completion.
They don't want you actually having anything.
And so how do they get you in the door?
$10 a month, okay?
Oh, guess what?
Netflix has risen its price like how many times in the last few years?
Guess who else is going to be rising prices?
You think this is going to last forever?
You think this free—you think this freeness is just going to be free forever?
My friends, I hate to break this to you.
It's not how life works, okay?
It's not going to be $10 forever.
That thing will be $25, $40 an hour or $40 a month at some point, blah, blah, blah, blah.
Number three, Devin works on a completely different axis.
It's not working on, like, line by line what you're editing.
Its whole attempt is to be able to analyze a code base, make those changes, commit them to Git, and then make a PR, right?
Like, this is a completely different experience.
And Devin is probably actually priced more reasonable.
And what I mean by more reasonable is Devin is less likely probably to break my expectations because it's already really expensive, whereas Copilot is going to break your expectations.
They will just become more expensive.
That's—I hate to break this to you.
That is the life that it will be happening.
Very, very different.
I can't believe I'm defending Devin here on price.
Okay, out of all things for me to defend Devin on, $500 a month feels way too expensive.
But at least I know I'm probably not going to get shot in the foot here in a moment.
...and closely revealed not a breakthrough, but basic functionality dressed up as innovation.
This gap between hype and reality wasn't just embarrassing.
It affected real decisions.
Companies delayed hiring developers, thinking AI would su—
Good.
Good.
Do that.
Do it, companies.
Do it, please.
Companies, please do it.
I cannot wait for you to just trainwreck your code base and then make the realization that a series of shortcuts make long delays.
Okay?
I'm sorry.
Mary tried to tell you this in Lord of the Rings.
You didn't listen.
This is your own bed.
Now you get to lay in it.
Now you get to hire twice as many software engineers to try to fix the dumb shit that you've decided to do.
Okay?
Good.
Have fun for the next six months.
Good.
...investors poured millions into similar startups without proper due diligence.
Meanwhile, actual developers watching the demos immediately spotted red flags that investors missed.
But okay, Devon AI was a failure, a lie, and a mirage.
So how did a lie manage to raise $2 billion?
VCs are stupid.
VCs should not be stupid.
One in an ideal world would assume that VCs are revolutionary thinkers who are able to see into the future and try to induce from current state into the future and be like, this is what is going on.
This is why they're amazing.
Right?
Like, you would think that that's what they, like, that's just my default mentality because I still believe the best in the world.
I still live on hope.
I still am excited every single day.
So I just, I, that's like my default mentality.
But then I keep seeing all the investments and I realize that there's a whole bunch that are just like play VCs.
You know what I mean?
A human developer completing the Upwork task in 36 minutes would cost about $30.
Devon, taking over six hours and failing, would cost significantly more just in computational resources.
Even you-
That's not a very good answer.
Um, here.
Hold on.
Okay.
There's things I don't like about this video that I feel like is not being very good.
Right?
So it's 62.5 is the cost per hour.
So $8 an hour times, what, five hours?
So it was $40 for Devon to fail at this task, but it could be done while, it could be done autonomously while you were doing something else.
So it's like, which, you know, and I'm sure if you bought more Devon, you'd probably get some sort of reduced amount.
Right?
So my guess is that if you, if you're in the enterprise universe, you're probably getting something like maybe 5,000, but you're getting yourself like maybe 13, you know, you're getting yourself a significantly larger amount to where maybe that only costs you a couple bucks.
Right?
And so it's like maybe, maybe there's like a different world that exists that we're just kind of off on.
You know what I mean?
Yeah, but we really, uh, discount how much, uh, infrastructure and power, uh, this thing needs to run in the background.
Yeah, no, no, it's true.
What, I think one thing we don't ever talk about enough, I mean, this is why Sam Altman is saying that he needs to build his own nuclear power plant.
Nuclear power plant for your, for your startup is like, there's, there's a part of that when you say it out loud, you go, that's kind of insane.
But I, I do think people aren't really realizing just exact, like exactly how expensive is the societal cost of spending that much in energy.
Yeah.
And of course there's going to be price increase.
There's, there's a whole slew of problems that are coming.
Societally, I think that we're, we're over, we're just jumping in so fast.
And I think that that's going to cause a whole, it's just going to cause a whole problem, right?
Because if everybody today tried to turn that, you know, that, like that service on, that service couldn't handle it.
And so it's like, we're all kind of like trying to make it go as fast as possible, but it can't really go as fast as possible as we want.
There's a whole set of problems.
I'm not even trying to get into that.
And I'm not even talking about the feasibility of it all.
So, you know, I'm just talking about the pure cost economics.
I don't think it's a really great way to do it, which is if Devin got you 80% way to a solution, but you could do something else at the exact same time.
That's a bonus.
Just sell it that way.
Anyway, sorry.
I'm getting frustrated by that.
Each successful task would cost hundreds of dollars, 10 times what you'd pay a skilled developer on Upwork.
In 2024, venture capital firms were operating in the shadow of OpenAI's success.
ChatGPT had transformed from a $1 billion company to a $90 billion giant in just two years.
Every VC who had passed on OpenAI's early rounds was now desperately searching for the next ChatGPT, leading to what one investor called AI fever in Silicon Valley.
Cognition Labs crafted their pitch to perfectly exploit VC psychology in 2024.
Devin isn't just another coding assistant.
It's the world's...
By the way, I think I'm completely fine with that.
Dude, if VCs are dumb enough to just throw just an enormous amount of money into a software project and these bros get to go out there and try to build that software project to the best of their ability, like, hey, guess what?
You guys made the game.
That's your fault.
You made the game.
They won.
Like, what do you want from me?
You know what I mean?
It's like, what do you actually want from them?
I think they did a great job.
Take the bag and roll.
I'm Devin here.
I miss you and your $500 a month.
Thank you.
I miss you, too.
And I...
But I don't miss...
I don't have to miss my $500 a month because I haven't.
First complete AI engineer wasn't just a tagline.
It was calculated to tap into tech's biggest pain point, engineering costs.
Their claim that Devin could reduce 100-person engineering teams to just 10 promised to solve the industry's most expensive problem.
With average software engineer salaries at $150,000, this suggested potential savings of $13.5 million.
You know, every time I see B-roll, I just have to look at here and I'm like, what the fuck is this guy even doing?
Why are there...
Why are there orange things going to blue things?
Like, what is this?
I assume this is like a Sora...
A Sora video.
At least, like, the hands are somewhat okay here.
Same screens.
I know, dude...
Bro is dual monitoring to the same screens except for this one's slightly ahead in the future compared to this one.
Like, this one's already doing it.
Now this one's doing the same thing.
Devin suggested potential savings of $13.5 million per company annually.
The market math was equally seductive.
The global software development market stood at $500 billion.
Capturing even 1% of that would mean $5 billion in revenue.
By standard VC calculations, which valued AI companies at 12 times revenue compared to 3 times for traditional software,
this justified a $60 billion valuation.
Suddenly, Devin's $2 billion valuation seemed conservative.
That's not true.
There's not like a 3x.
Look at this.
Look at this.
This guy...
That's not true.
That's not true.
3x.
Look at this.
This guy is 150.
What's 158?
We'll go 159 times 3.
159 times 3 is 4 of 4 or times 4.
My bad.
There's 4 quarters.
Classic 3 quarters in there.
What is this thing?
This thing's worth 2.29.
So if you take that and 2.29 divided by this...
Yeah, that's close enough.
What is that?
That's 5.7.
Look at Coca-Cola.
Let's take a little look at Coca-Cola.
What about Coca-Cola stock?
A K.O. stock.
What's K.O. stock sitting at?
K.O. stock sitting at the market cap of this.
What is its income?
Its income is only this.
So its income is like $47 billion.
Yeah.
So this one's also sitting probably closer to about 5x.
You know, 12x is because they're growing, right?
P.E. is not a valuation.
I know.
Well, that thing's the market cap.
The market cap would be like how much is the whole actual thing.
I'm not saying P.E.
Price to earnings would be not that.
I didn't look at the P.E.
Sales price is different than market cap.
Yeah.
I mean, fair.
If you're buying...
Sort of.
It's sort of different.
They're kind of intertwined.
On private companies, it's less.
It's like private companies can't really align that way.
Right?
But yes, I see what you're saying.
Because it just doesn't have a market to actually align to that.
Market cap is stored in the P.E.?
It is.
It's actually stored in the P.E.
All right.
Sorry.
Let's keep going.
Valuation logic was playing out across the AI
sector.
Character.ai reached $1 billion valuation with basic chatbot technology generating minimal
revenue.
Dude, Character.ai was like literally just ChatGPT.
Like it was just ChatGPT.
What is Character.ai?
Character.ai is where you could develop a character and then it would be this character for your
role-playing games, which then that one 14-year-old boy or 15-year-old boy or 16-year-old
boy fell in love with Daenerys Targaryen.
Daenerys Targaryen.
Did I get that right?
And Crazy Lady.
Crazy Lady with the dragon.
And ended up committing suicide to go home to her and all that.
Right?
Like real, real crazy stuff's going on.
So Character.ai?
Kind of crazy.
You know what I mean?
Yeah.
Kind of crazy stuff.
That one at least makes sense.
Right?
Like Claude makes sense because you're betting that there could be more than one market leader
kind of optimizing for two different things so you could still get that like 12x, 15x,
9 to 90 billion growth.
Right?
Like Claude bet actually makes sense.
If you think about it at all, it makes perfect sense to do that one.
... weren't investing in current capabilities.
They were betting on potential market capture in an industry desperate to reduce engineering
costs.
Traditional due diligence processes were compressed or ignored entirely.
One anonymous VC partner admitted after missing OpenAI's early rounds, firms were throwing
money at anything with AI in the pitch deck.
I don't like anonymous stuff.
I think that if you have something to say, I just don't think reporting anonymously is
very great.
Right?
I just don't.
...evaluations that normally take weeks were rushed through in dates.
We have VC and dunk on them.
Basic questions about product viability were overshadowed by fears of missing out on the
next big thing.
Marketing played a crucial role in maintaining this momentum.
Cognition Labs expertly used AI buzzwords and carefully staged demos to create FOMO among
investors.
They positioned Devin as a revolution in software development rather than what it was, a buggy
...
Good.
Again, I think this is great.
Can we all just not ... How are people not stoked about this?
They were able to create ... What do you want with your life?
We create a cult ... Does this not happen for everything?
Every last thing.
You make a game.
Remember when Apex first came out.
Apex first came out and the Wingman and the Spitfire were amazing.
What did everybody do?
Well, no one could use the Wingman because they didn't have any skill, but everybody used
the Spitfire and they would just sit there and mow down people over and over again.
Every single game mechanic would be exploited immediately.
Why was it exploited immediately?
Because that's what people do.
And so you make a game mechanic where it's just like the more buzzwords you put in there
and the more FOMO you put in there, the more likely investors are supposed to ... What's
it called?
More investors are willing to give you money.
What do you think the outcome of this is going to be?
Welcome to your bed.
Enjoy sleeping in it.
By the time technical experts could point out flaws, the funding rounds were already closed.
For developers watching this unfold, the lessons were clear.
I hate your AI videos.
Technical excellence often matters less than marketing and securing funding.
Devin raised more money in weeks than many profitable developer tools raised in years.
Yep.
Several developers noted that Devin's flaws were obvious to anyone who actually wrote code,
yet investors missed them completely.
Honestly, I think Devin ... Again, the thing is that Devin ... Or not again, this is differently.
It's just like using ChatGPT except for it just places it all for you and makes a PR.
You're just paying for convenience at that point if you can afford the convenience of
not having to find the spot that needs to be debunked.
Honestly, if you're just a prompt kitty and all you know how to do is prompt, Devin is
just a convenience thing.
That's all it is.
I like the term prompt kitty, by the way, because I think it's actually a hilarious phrase.
Prompt kitty, come on.
Prompt kitty is a hilarious phrase, and I think we should actually ... I think we should
keep it.
Okay.
I think we should keep it.
I'm not saying it as a negative term.
It's just the same thing as a script kitty.
Yeah.
While developers focused on whether Devin could actually code, investors focused on whether
they could sell the story of AI replacing developers, two very different metrics of success.
Despite Cognition Labs' bold promises of a revolutionary AI software engineer, Devin's
actual performance revealed a tool that couldn't grasp even basic software development principles.
While they promised an AI that could replace entire development teams, what they delivered
couldn't handle tasks that entry-level programmers routinely solve.
The gap between promise and reality became painfully obvious in day-to-day tasks.
I thought it was okay.
Cognition claimed Devin could autonomously architect and implement complex systems.
Yet when faced with a simple missing Python package, something first-year computer science
students handle daily, Devin ...
First off, first-year computer science students don't handle Python packages daily, okay?
This is not a thing, okay?
First-year computer science students probably ... honestly, probably programming in JavaScript
right now.
They're handling adding 1,000 NPM packages, okay?
NPX create algorithms course.
Devin wrote 50 lines of unnecessary code instead of using the standard pip install command.
This wasn't innovative.
It was inefficient and amateurish.
The disappointment deepened with database optimization tasks.
While marketing materials boasted about Devin's advanced performance tuning capabilities,
it completely missed a basic missing database index, a rookie mistake no human developer would make.
See, again, I don't like those kind of comparisons.
Brother, no engineer would say rookie mistake to forget an index.
Okay, hey, we've all literally done it.
In fact, most people discover they've done it after they woefully realize how bad things are going.
Like, that's like the classic is where you go, oh, shit, it's like, dude, our response times are a second and a half.
What index did you forget?
Damn it.
I forgot user ID.
And people are like, what?
You forgot user ID?
You're like, my bad.
I forgot the foreign key.
See, the problem was is that I just, the join's really bad, right?
It's just like, yeah, I know the join's really bad.
It's okay.
Just go fix it.
Come on.
Just get done with it.
Instead, Devin spent hours implementing complex caching systems and connecting pooling code that actually made the performance worse.
Perhaps most embarrassing was Devin's approach to bug fixing.
For a tool marketed as superior to human developers in debugging, its performance was almost comical.
During a memory leak investigation, Devin spent four hours rewriting entire systems and adding unnecessary complexity,
while completely missing an obvious bug in a basic loop, something a human developer spotted and fixed in five minutes.
These weren't isolated incidents, but a pattern of fundamental failures.
I honestly think that a lot of this is just probably prompt skill issues, is you're giving Devin too big of tasks.
You know what I like to give Devin tasks to do?
Just go make my UI look a little bit nicer.
And yeah, it kind of looks a little bit nicer.
Sometimes it doesn't really look nicer.
Sometimes it does like 50% of the job and I do the other one.
It's just like, well, what are you doing?
Don't tell it to re-architect a system.
Same AI that was supposed to revolutionize software engineering couldn't handle basic version control,
ignored standard documentation, and regularly created more problems than it solved.
For companies that invested millions hoping to reduce their...
By the way, Devin did make this for me for those who are wondering why this right here.
This is if I'm connected to my internal application.
So if we go to right here and I take it down, you'll notice that this connection represents that my WebSocket connection is down.
What is this icon?
I don't know what that icon is.
But Devin made it though.
Devin made that icon.
I don't even know what it means to tell you the truth.
Their development teams from 100 to 10 engineers, Devin wasn't just a disappointment.
It was a stark reminder that revolutionary claims require revolutionary results.
The code quality itself raised red flags.
When asked to optimize a database query, Devin wrote...
Any junior developer would know to simply use...
Its approach to version control demonstrated a complete lack of development best practices.
Devin would routinely modify hundreds of unrelated files in a...
Hey, rewriting the standard is actually a pretty standard, normal thing to do.
Also, you talked about a database and then you talked about processing a file.
So I actually have no clue what you're talking about.
To be completely fair, whatever just happened, I got actually confused.
Okay.
Now I'm confused.
Single commit, combine code formatting changes with logical modifications, ignore established
Git workflows and branching strategies, and create unnecessary merge conflicts by modifying
core system files.
API integration tests exposed more fundamental flaws.
When tasked with implementing OAuth authentication, Devin wrote...
To what level did you ask him to implement OAuth?
Like writing your own OAuth library?
Or just integrating with a simple one?
Huh.
That's a lot of work.
...instead of using standard libraries, stored sensitive credentials in plain text,
failed to implement basic error handling, and created security vulnerabilities by mismanaging
token refresh.
Performance...
I mean, I hate to break this to you.
It's just learn from the best on GitHub.
Like, to be fair, it's just learning from the best of us, people.
That's all that's happening, okay?
You think it came up with that novel solution on its own?
...equally problematic.
In one case, Devin spent hours implementing complex caching mechanisms for a simple web
service, while ignoring basic optimizations like database query optimization, resource
pooling, response compression, and basic HTTP caching headers.
These issues weren't isolated incidents, but reflected systemic problems in Devin's approach
to software development, raising serious questions about its practical utility in real-world
development environments.
Most telling was Devin's handling of documentation.
Modern development...
Okay, I just, you're giving us huge tasks.
I really, I mean, I, ChatGP, ChatGPT couldn't do this.
I'm not, I'm not, I, I, I'm positive Cursor couldn't do a good job with this, right?
Like, I don't think any of these, I don't think any of these LLM systems would do good
if you just do, would, would, would do good if you did that.
I said GPT, sorry.
Jippity, my bad.
I, you know, normally I say Jippity just because it's so convenient.
I don't know what happened there, right?
Like, no one's gonna, huge tasks.
Dude, it's just not good, right?
Development relies heavily on reading documentation and understanding existing code bases.
The selling point.
Yet Devin consistently ignored readme files, existing comments, and API documentation.
Learning from the best of us, you know?
It's just crazy.
It's just crazy how many comments are on the internet saying that, hey, guess what?
The documentation's wrong.
And then learning from all the text on the internet, it goes, ah, probably shouldn't listen
to a readme file.
It's probably out of date.
Wow.
Essential resources that developers use daily.
Crazy, Devin.
It's like having a cook who ignores recipes and food safety guidelines, insisting on reinventing
cooking from scratch every time.
If you liked this video, please check out our other video on the day Trello almost died.
Until next time.
Poor Trello.
So, yeah, the video script is agile.
It feels like the video script.
I think one of the poor parts about that entire experience is that I don't think that they're
wrong.
I think that video points out a lot of good things, which is that it does really appear
that Devin didn't do a good job managing expectations or really showing what people
should be expecting when they come to Devin.
And so people just came into it thinking it's going to do anything and everything.
And then guess what?
They're not happy about it.
Is this a shocker?
It's not a shocker.
Like this is just classic unmet expectations.
This is the reason also this is the reason why Copilot was so amazing.
Remember when Copilot came out?
Your expectations of autocomplete were very small.
Then Copilot comes out and it just it's just like thrown out else statements and all this
kind of stuff.
And you're just like, wow, this is crazy.
This is amazing, right?
Like because your expectations weren't there.
Dude, just I don't see how I just I really wish I wish I could.
I wish Devin would just put me on the board.
Devin put me on the board and just have me go.
Stop it.
Stop it.
Hey, no, that stop.
Oh, that one also stop and just let me do that for like three months.
And then I think it'd fix a lot of things like that's all you got to do is be like Devin.
If you got a small bug to fix, it could take an attempt for you.
Why run?
Why run in serial when it could go unparallel?
Hey, maybe it will get you 80% of the way.
But would you rather fix 20% of a bug with an initial investigation or 100% of the bug?
Where are you going to do all the investigation?
You know, I feel like one of them is a very compelling argument and one of them is just not an argument at all.
Because then it's immediately destroyed the second you try to do anything.
And then you go, wow, this is completely not meeting my expectations.
Anyways, the name is I cannot believe I'm defending Devin in any level at all.
But here I am because that's how bad the AI world is.
Why are there just no regular normal ass takes on AI?
Why does everything have to be just the most bizarre, exceptionally anti-AI take or completely 100% fully positive?
Like why, like, why?
Why not the middle ground?
Why is there no, what the hell's wrong with you?
Why is everything Doomer or Doomer the other way?
Again!
