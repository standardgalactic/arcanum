Hello, everybody.
My name is Steve Hazel, and I'm here to talk to you about my passion for deleting code
and how unstoppable I am.
Also, it's a little bit, it's a manifesto and a beginner's guide, so I'm going to tell
you about why deleting code is the best, but if you have never coded before, I'm going
to encourage you to try deleting some code and see how it feels.
Okay, so first of all, who am I?
I started programming professionally in 1995.
I started a company in 2008.
I worked on that for about 10 years.
I've worked in a bunch of different programming languages.
I've had a bunch of different roles in the software industry.
All of that is just to say, I'm going on 30 years in my career in software here.
So these are not the crazy opinions of some novice who doesn't know what they're talking
about.
These are the crazy opinions of a middle-aged man who should know better.
I've also checked just before putting this talk together.
On my current project that I've been working on for three or four years, I have net deleted
over 10,000 lines of code.
I've written about 100,000 lines.
I've deleted about 100,000 lines, but overall, I'm in the red, which is great.
I also, at the company that I started, I was there for about 10 years, and my total over
that entire experience was negative, much more highly negative in the hundreds of thousands.
So I really have deleted, I'm pretty sure at this point, in my whole career, I've deleted
more code than I have created.
And that's my goal is to die having deleted more code total, okay.
So when people get into programming, I think they think about it as a creative endeavor.
They think, I'm going to create some cool apps, I'm going to come up with some clever algorithms,
I'm going to write the most beautiful, expressive code that everyone will think is just the best,
and then I'm going to add more and more features, this is going to be great.
And that's not what happens at all.
What does happen is you rapidly find that your code breaks every time you change anything,
something somewhere else breaks.
You look at a file that you wrote six months ago, and you think, what is going on in here?
I don't understand this at all, and this is a mess, who wrote this?
Code that used to work stops working mysteriously, and you start fantasizing about rewriting it
all from scratch, which by the way doesn't work, don't do that.
So this is the reality of programming, this is what it really is.
When you really get into it, this is the feeling, this is what you're going to feel about
programming.
I think the problem is that when people think of programming, they're thinking of it like
doing a painting.
They're thinking, I'm going to put a river, I'm going to put some happy little trees,
and just whatever I feel, I'm just going to put it on that canvas.
But that's not the kind of endeavor that programming is.
Right?
It's more like carving a sculpture out of marble by removing marble.
Or maybe a better metaphor is it's like pruning, right?
It's like the thing you're creating is like a living, changing thing, and you're pruning
it to drive it in the direction that you want.
This is a better way to think about computer programming.
So you're going to need to do a lot of deleting code.
And deleted code is amazing.
It is the best.
Deleted code has no bugs in it.
Deleted code never needs to be fixed on the weekend.
It is 100% clear to everybody how it works, even six months later.
It runs in zero milliseconds.
It is absolutely the fastest you can get.
It is infinitely scalable.
It doesn't matter how many users you have.
Your deleted code can handle them.
So it's really the best code.
It's absolutely as good as it gets.
For what it's worth, Thanos was wrong to erase half of the people
in the Marvel Cinematic Universe.
But I think he had potential as a computer programmer that was unrealized.
OK, so how do you get away with it?
You know, we've got to delete some code.
How are we going to get people to let us?
The first thing, easy example, commented out code.
This thing happens all the time.
When you are writing code, you're going to try a few different ways to do it.
And you're going to have one idea, and it's not going to pan out,
and you're going to get another idea, and that one kind of works a little better.
But that first idea, there's still some advantages.
It still seems kind of good.
You comment it out and leave it there because maybe you're going to change your mind.
Maybe you'll want it later.
Maybe after you get things basically working, you'll come back around to that first idea.
You won't.
If that code sits there for like a week, you're never going to use it.
Like my whole career, this has maybe happened one time, you're not going to use it.
You don't need that code.
And when you need it, it's not going to be right anymore because the code around it will
have changed.
But you won't have been keeping the commented code up to date, right?
So it's not going to work anyway.
And worst case, if you're wrong about all of that, you put it in your source control,
you put it in Git, and you can find it in there later.
You don't need it sitting there right next to your perfectly good code that actually does
something.
By the way, I was trying to come up with an image for this slide that would make people
think of letting things go, like maybe something from a movie.
I remembered something with like a character named Elsa, and there it is.
That's the one.
Okay, so deleting commented code, how does that work?
What you do is you're going to select it, you know, and then you're going to press the
delete key, problem solved.
I think even the non-programmers are going to understand what just happened there.
Okay, so a little bit more of a complicated example.
There's something that we talk about in computer programming called don't repeat yourself.
It's like a rule of thumb that people use.
If you find yourself putting the same code in over and over, you know, you want to abstract
that out, make one function that you're going to reuse every time you want to do that task
instead of repeating the same code over and over.
It's not actually quite right.
But it's a, you know, it's a start.
So here's an example, we're going to, we're going to send a message to somebody based on
their target ID, and we got some text to send, but we got to turn it into a message.
And so there's like kind of a few lines of code that do that.
And every time you send a message, you do those few lines of code, and it's very repetitive.
And so the concept is you make this like send message to ID thing with that, whoops, with
that repetitive bit in it.
And then every time you want to do that, you just kind of do the send message to ID thing
over again.
So yeah, good, good concept, but it's not perfect.
It's not a perfect concept.
So for example, like if your function sends a message, you can call it send message and
that's great.
But like what if the thing you're repeating over and over in your code doesn't just send
a message, you know, it sends the message if it's short or if it's longer, it stores it
and notifies whoever is going to get the message that they can pick it up whenever they want.
Now you've got to call it like send message if short or store and notify.
And then like also like what if every time you do that, you want to like remove expired
messages from the store.
So now like if you were going to name the function something, it would be like send message
if short or store and notify and remove expired message from store.
It's a little ridiculous.
This is the equivalent of like trying to label this junk drawer, right?
You're like, got to make it easier to see what's in this drawer.
So I'm going to like get my labeler and it'll say hammer, sunglasses, snacks, vampire teeth.
You know, it's not really much help compared to just opening the drawer.
So that's kind of what doing that is.
So this is a bad idea.
A lot of people confronted with this bad idea decide, well, what I'm going to do is I'm
just going to shorten the name.
We'll call it send notify message.
And that, you know, now it's not so long anymore.
That's fantastic.
That's kind of like doing this.
You put your stuff in some boxes and you label them stuff, more stuff.
It's not a helpful name.
So the rules of deleting code, okay?
If you want to delete code, it's not okay to delete it if it breaks the program, okay?
Obviously people are not going to let you get away with that, okay?
And it's also, it's not okay to delete it if it makes the program impossible to understand.
You have to keep it possible to understand or, like, eventually someone is going to stop
you.
So, you know, you really have to, you have to follow the rules.
You have to think about, are people going to like this code when I'm done deleting as
much of it as I can get away with?
Okay, so another technique is merging similar code.
So thing that happens all the time in programming, you need to do something.
You write yourself a little function to do it.
Somebody else needs to do the same thing.
They write a little function to do almost the same thing, but it's not exactly the same because
they weren't thinking about all the same stuff you were thinking about, but it's mostly
the same.
Maybe two or three people do that, and you've got a bunch of functions that do kind of the
same thing, but not exactly the same thing.
And when you find those, it's a wonderful opportunity to delete some code.
So here's a function that draws some sparkles.
You give it a list of locations, and it iterates through that list, and at each location it makes
a sparkle and draws it, and there's some, like, error checking.
That's what that try-catch thing is about.
Somebody else maybe writes another function.
And they called it Sparkle, it takes a list of locations, it also takes some other stuff,
it iterates over the locations, and at every location it makes a sparkle and it draws it.
But there's this other stuff, it can do, like, different styles of sparkles, and it can scale
them up so they're bigger or smaller.
So great, you find these things in the code.
Fantastic.
Combine them into one function that has all the features.
Now you get to delete one of those functions, and no one's going to be mad at you.
This one, it has the extra features, it does the error checking.
I picked the name that I liked better, I picked the way of iterating that I liked better.
It's perfect.
It's wonderful.
And the other one, you can delete.
Okay, last major technique for deleting code is simplifying code.
You get some code that's too complicated, you can make it shorter and clearer, and you
get to delete a bunch of lines of code.
Fantastic.
It's hard to simplify code, but it's worth it.
The main thing here is you can't just go around your code base doing this, you know?
When you're working with other computer programmers, they, like, want to build features and stuff,
which is a drag.
But if you have to change the code anyway, you know, if you're in there building a feature
and you've got to touch that code anyway, hey, you can do this and no one's going to
think it's weird.
So here's an example of how I would do something like that.
This function gets an average for something with an ID, I don't know what it is, and there's
some number of days.
So it's like the average for this thing over some number of days.
So what it does is it gets the count of that thing, it makes sure that the ID is a string,
it adds a base count, I don't know why there's a base count, but there is, I'm just making
up an example here.
And then it computes the average by dividing the count by the number of days and it returns
the average.
That's okay, but we can get rid of a lot of lines of code.
First of all, you go check through the code.
If ID is always a string, we don't have to turn it into a string, just delete it.
Fantastic.
Next, this base count thing that we're adding on a separate line, well, we have to like mention
count again.
You mentioned count two times there.
That's not great.
Put it on one line.
Only mention count once.
Fantastic.
And in fact, go look at where a get count is used, and if base count always gets added
to the result of get count, let's just put that in get count.
Get count always has the base count in it.
So now we get to get rid of base count from here.
Fantastic.
The next thing is now we're calling the result of calling get count count, but like obviously
it's the count, you just got the count.
So we can get rid of that, oh, I actually did a different one first.
Same thing, we're calling the result of dividing count by days average, but like we know it's
the average because we're returning it from this function.
The function's called get average, so we don't need to say what it's called.
Same deal with count.
You called get count, obviously it's the count, you don't need to say what it's called.
So now we get a much shorter function that is still quite clear.
We got rid of most of the lines of code, right, if you go back there, just kind of looking
through the code and figuring out where it's being redundant and where it's, you know, doing
things that don't need to be done, like turning ID into a string when it's already a string,
you can get rid of most of the lines of code.
This is a simplified example, but I do this kind of thing across giant files all day long.
I delete so much code.
It's fantastic.
It's the best.
I love it a lot.
So yeah, you should try it.
I think you're really going to like it.
It's really an exciting feeling to create code by deleting it.
Yeah, it creates better code.
You can get your numbers to go negative.
There's something really compelling about it.
That is my talk.
Thank you, Shana.
Thank you.
Thank you, Shana.
All right. So, questions. Who's the first question?
Hi. I'm not a programmer at all, my son is, but could you compare this with economical
language for texting or something like that? The same principle that the least amount of
words or characters to express? Yeah. I think about one of the things that I have to do
sometimes at work is write business emails. And it's a very similar thing where inexperienced
people writing business emails will give you three paragraphs. But like if you communicate
with somebody who writes business emails all day every day, like an exec at the company,
they're going to give you like five words. Like, looks good, go and do it. Right? That's
what they say. And it's a very similar thing where it's like, you don't need all of this.
We can delete it and we can just make it really short and clear. It's a skill. You can build
it for sure. Yeah. It's very, very related. Can you tell how experienced the programmer
is by how much code he writes? Well. They. He or she. Yeah. He or she or they. Yeah. I would
say more experienced programmers are more prone to winding up with a code change that adds a feature,
but it actually deletes more lines than it adds. Happens more often with more experienced programmers,
that's for sure. Absolutely. Beginners will make three left turns instead of a right.
So your, thank you for the talk. Your analogy you used was like the bonsai tree that we let
grow and then we trim it. Do you think the long code is necessary for short code?
Yeah. So I do think that when you first start creating something new from scratch,
it is natural to create a mess. And I actually think that it's, it's kind of good to let it get
messy for a little while. People who are a little too enthusiastic, especially about don't repeat
yourself, will kind of try to prune prematurely before they know what shape they want. So I think
there is something to that. It's, it's good to kind of let it grow, see what it wants to be,
before you start to trim it down to the essentials. But that happens really at the beginning of projects,
later on in a project, it happens less and less.
I just spilled beer everywhere.
Hi, I'm not a programmer at all, but I have some friends who are, and they kind of have this sentiment
that code in general now is getting sloppier and sloppier. Do you get that sense? Whether it's
like people are rushed more to like push product out or because computers are getting so much faster
that you, they can take some of the inefficiencies away? Or is that just not true at all?
Yeah, I think maybe there's a couple of different trends that, you know, are actually separate,
but kind of lead to that effect. For sure you can get away with code being slower now in terms of its
like inherent performance characteristics because computers are faster so it doesn't matter as much.
That leads to it being longer sometimes. Another thing is just that there's just a lot more computer
programmers in the world. We've been adding them rapidly and that means there's a lot more inexperienced
computer programmers in the world, I think as a percentage. So that probably tends in that direction.
Also, there's AI creating code now. I'd like to see AI get good at deleting code.
All right. One last question for me.
Where, where is the sweet spot between spending time deleting code
and writing new functions? Yeah. It's a lot further on the spending time deleting code side of things
than I think people naively assume. But there certainly is a trade-off there. If code is working
and doesn't need to change for any reason, don't change it, right? Like obviously, leave it alone.
It might be ugly, but it's fine and you, you can focus on something else. If you need to get in there and
change that code, then you're paying a cost for it being longer than it needs to be, more complex
than it needs to be. And you can start to pay down that cost by reducing it. So it's sort of a calculus
of like, do you need to change the code at all? If you need to change it, are a lot of people going to
need to change it soon? And if that's, if it's an area of code that's about to get a lot more work,
it will pay off a lot to work hard on reducing it and clarifying it. So depends on, depends on how the
code is going to be used. All right. Thank you so much. Fantastic talk.
Thank you.
Thank you.
Thank you.
Thank you.
